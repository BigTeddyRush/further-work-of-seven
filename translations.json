{
  "predefinitionsA7": "X is a subclass of X for every X.",
  "predefinitionsA8": "If X is a subclass of Y and Y is a subclass of Z, then X is a subclass of Z for every X, Y and Z.",
  "predefinitionsA9": "If X is a subclass of Y and Y is a subclass of X, then X is equal to Y for every X and Y.",
  "predefinitionsA12": "If X is an instance of Y and Y is a subclass of Z, then X is an instance of Z for every X, Y and Z.",
  "predefinitionsA15": "INST is not an instance of CLASS1 or INST is not an instance of CLASS2 for every INST if and only if CLASS1 is disjoint from CLASS2 for every CLASS1 and CLASS2.",
  "predefinitionsA18": "CLASS is covered by ROW1 and ROW2 and CLASS is disjointly decomposed into ROW1 and ROW2 if and only if CLASS is exhaustively partitioned into ROW1 and ROW2 for every CLASS, ROW1 and ROW2 and CLASS is covered by ROW1 and ROW2 and CLASS is disjointly decomposed into ROW1, ROW2 and ROW3 if and only if CLASS is exhaustively partitioned into ROW1, ROW2 and ROW3 for every CLASS, ROW1, ROW2 and ROW3 and CLASS is covered by ROW1 and ROW2 and CLASS is disjointly decomposed into ROW1, ROW2, ROW3 and ROW4 if and only if CLASS is exhaustively partitioned into ROW1, ROW2, ROW3 and ROW4 for every CLASS, ROW1, ROW2, ROW3 and ROW4 and CLASS is covered by ROW1 and ROW2 and CLASS is disjointly decomposed into ROW1, ROW2, ROW3, ROW4 and ROW5 if and only if CLASS is exhaustively partitioned into ROW1, ROW2, ROW3, ROW4 and ROW5 for every CLASS, ROW1, ROW2, ROW3, ROW4 and ROW5 and CLASS is covered by ROW1 and ROW2 and CLASS is disjointly decomposed into ROW1, ROW2, ROW3, ROW4, ROW5 and ROW6 if and only if CLASS is exhaustively partitioned into ROW1, ROW2, ROW3, ROW4, ROW5 and ROW6 for every CLASS, ROW1, ROW2, ROW3, ROW4, ROW5 and ROW6.",
  "predefinitionsA21": "If X is an instance of CLASS, then X is an instance of ROW1 or X is an instance of ROW2 for every X if and only if CLASS is covered by ROW1 and ROW2 for every CLASS, ROW1 and ROW2 and if X is an instance of CLASS, then X is an instance of ROW1 or X is an instance of ROW2 or X is an instance of ROW3 for every X if and only if CLASS is covered by ROW1 and ROW2 for every CLASS, ROW1, ROW2 and ROW3 and if X is an instance of CLASS, then X is an instance of ROW1 or X is an instance of ROW2 or X is an instance of ROW3 or X is an instance of ROW4 for every X if and only if CLASS is covered by ROW1 and ROW2 for every CLASS, ROW1, ROW2, ROW3 and ROW4 and if X is an instance of CLASS, then X is an instance of ROW1 or X is an instance of ROW2 or X is an instance of ROW3 or X is an instance of ROW4 or X is an instance of ROW5 for every X if and only if CLASS is covered by ROW1 and ROW2 for every CLASS, ROW1, ROW2, ROW3, ROW4 and ROW5 and if X is an instance of CLASS, then X is an instance of ROW1 or X is an instance of ROW2 or X is an instance of ROW3 or X is an instance of ROW4 or X is an instance of ROW5 or X is an instance of ROW6 for every X if and only if CLASS is covered by ROW1 and ROW2 for every CLASS, ROW1, ROW2, ROW3, ROW4, ROW5 and ROW6.",
  "predefinitionsA24": "ROW1 is disjoint from ROW2 if and only if CLASS is disjointly decomposed into ROW1 and ROW2 for every CLASS, ROW1 and ROW2 and ROW1 is disjoint from ROW2 and ROW1 is disjoint from ROW3 and ROW2 is disjoint from ROW3 if and only if CLASS is disjointly decomposed into ROW1, ROW2 and ROW3 for every CLASS, ROW1, ROW2 and ROW3 and ROW1 is disjoint from ROW2 and ROW1 is disjoint from ROW3 and ROW1 is disjoint from ROW4 and ROW2 is disjoint from ROW3 and ROW2 is disjoint from ROW4 and ROW3 is disjoint from ROW4 if and only if CLASS is disjointly decomposed into ROW1, ROW2, ROW3 and ROW4 for every CLASS, ROW1, ROW2, ROW3 and ROW4 and ROW1 is disjoint from ROW2 and ROW1 is disjoint from ROW3 and ROW1 is disjoint from ROW4 and ROW1 is disjoint from ROW5 and ROW2 is disjoint from ROW3 and ROW2 is disjoint from ROW4 and ROW2 is disjoint from ROW5 and ROW3 is disjoint from ROW4 and ROW3 is disjoint from ROW5 and ROW4 is disjoint from ROW5 if and only if CLASS is disjointly decomposed into ROW1, ROW2, ROW3, ROW4 and ROW5 for every CLASS, ROW1, ROW2, ROW3, ROW4 and ROW5 and ROW1 is disjoint from ROW2 and ROW1 is disjoint from ROW3 and ROW1 is disjoint from ROW4 and ROW1 is disjoint from ROW5 and ROW1 is disjoint from ROW6 and ROW2 is disjoint from ROW3 and ROW2 is disjoint from ROW4 and ROW2 is disjoint from ROW5 and ROW2 is disjoint from ROW6 and ROW3 is disjoint from ROW4 and ROW3 is disjoint from ROW5 and ROW3 is disjoint from ROW6 and ROW4 is disjoint from ROW5 and ROW4 is disjoint from ROW6 and ROW5 is disjoint from ROW6 if and only if CLASS is disjointly decomposed into ROW1, ROW2, ROW3, ROW4, ROW5 and ROW6 for every CLASS, ROW1, ROW2, ROW3, ROW4, ROW5 and ROW6.",
  "mergeA1": "The predicate instance is an instance of binary predicate.",
  "mergeA4": "The predicate immediateInstance is a subrelation of the predicate instance.",
  "mergeA5": "The predicate immediateInstance is an instance of asymmetric relation.",
  "mergeA6": "The predicate immediateInstance is an instance of intransitive relation.",
  "mergeA7": "If CLASS is an instance of set or class and ENTITY is an immediate instance of CLASS, then SUBCLASS is not an instance of set or class or SUBCLASS is not a subclass of CLASS or SUBCLASS is equal to CLASS or ENTITY is not an instance of SUBCLASS for every SUBCLASS for every CLASS and ENTITY.",
  "mergeA8": "The predicate inverse is an instance of binary predicate.",
  "mergeA9": "The predicate inverse is an instance of irreflexive relation.",
  "mergeA10": "The predicate inverse is an instance of intransitive relation.",
  "mergeA11": "The predicate inverse is an instance of symmetric relation.",
  "mergeA14": "If REL2 is an instance of binary relation and REL1 is an instance of binary relation and REL1 is an inverse of REL2, then REL2 holds with the arguments INST2 and INST1 if and only if REL1 holds with the arguments INST1 and INST2 for every REL1, REL2, INST1 and INST2.",
  "mergeA15": "The predicate subclass is an instance of binary predicate.",
  "mergeA16": "The predicate subclass is an instance of partial ordering relation.",
  "mergeA20": "If Y is an instance of set or class and X is an instance of set or class and X is a subclass of Y and Z is an instance of X, then Z is an instance of Y for every X, Z and Y.",
  "mergeA21": "The predicate immediateSubclass is a subrelation of the predicate subclass.",
  "mergeA22": "The predicate immediateSubclass is an instance of asymmetric relation.",
  "mergeA23": "The predicate immediateSubclass is an instance of intransitive relation.",
  "mergeA24": "If CLASS2 is an instance of set or class and CLASS1 is an instance of set or class and CLASS1 is an immediate subclass of CLASS2, then CLASS3 is not an instance of set or class or CLASS3 is not a subclass of CLASS2 or CLASS1 is not a subclass of CLASS3 or CLASS2 is equal to CLASS3 or CLASS1 is equal to CLASS3 for every CLASS3 for every CLASS2 and CLASS1.",
  "mergeA25": "The predicate subrelation is an instance of binary predicate.",
  "mergeA26": "The predicate subrelation is an instance of partial ordering relation.",
  "mergeA29": "If PRED2 is an instance of relation and PRED1 is an instance of relation and NUMBER is an instance of positive integer and PRED1 is a subrelation of PRED2 and PRED1 has a valence of NUMBER, then PRED2 has a valence of NUMBER for every PRED1, PRED2 and NUMBER.",
  "mergeA30": "If REL1 is a subrelation of REL2 and REL2 is an instance of binary relation, then REL1 is an instance of binary relation and if REL1 holds with the arguments INST1 and INST2, then REL2 holds with the arguments INST1 and INST2 for every INST1 and INST2 for every REL1 and REL2.",
  "mergeA31": "If REL1 is a subrelation of REL2 and REL2 is an instance of ternary relation, then REL1 is an instance of ternary relation and if REL1 holds with the arguments INST1, INST2 and INST3, then REL2 holds with the arguments INST1, INST2 and INST3 for every INST1, INST2 and INST3 for every REL1 and REL2.",
  "mergeA32": "If REL1 is a subrelation of REL2 and REL2 is an instance of quaternary relation, then REL1 is an instance of quaternary relation and if REL1 holds with the arguments INST1, INST2, INST3 and INST4, then REL2 holds with the arguments INST1, INST2, INST3 and INST4 for every INST1, INST2, INST3 and INST4 for every REL1 and REL2.",
  "mergeA33": "If REL1 is a subrelation of REL2 and REL2 is an instance of quintary relation, then REL1 is an instance of quintary relation and if REL1 holds with the arguments INST1, INST2, INST3, INST4 and INST5, then REL2 holds with the arguments INST1, INST2, INST3, INST4 and INST5 for every INST1, INST2, INST3, INST4 and INST5 for every REL1 and REL2.",
  "mergeA34": "If PRED1 is a subrelation of PRED2 and PRED2 is an instance of CLASS and CLASS is an instance of inheritable relation, then PRED1 is an instance of CLASS for every CLASS, PRED1 and PRED2.",
  "mergeA35": "The predicate domain is an instance of ternary predicate.",
  "mergeA39": "The predicate domainSubclass is an instance of ternary predicate.",
  "mergeA43": "The predicate equal is an instance of binary predicate.",
  "mergeA44": "The predicate equal is an instance of equivalence relation.",
  "mergeA45": "The predicate equal is an instance of relation extended to quantities.",
  "mergeA48": "The predicate range is an instance of binary predicate.",
  "mergeA49": "The predicate range is an instance of asymmetric relation.",
  "mergeA52": "The predicate rangeSubclass is an instance of binary predicate.",
  "mergeA53": "The predicate rangeSubclass is an instance of asymmetric relation.",
  "mergeA56": "The predicate valence is an instance of binary predicate.",
  "mergeA57": "The predicate valence is an instance of asymmetric relation.",
  "mergeA58": "The predicate valence is an instance of single valued relation.",
  "mergeA61": "The predicate documentation is an instance of ternary predicate.",
  "mergeA65": "The predicate format is an instance of ternary predicate.",
  "mergeA69": "The predicate termFormat is an instance of ternary predicate.",
  "mergeA73": "The predicate disjoint is an instance of binary predicate.",
  "mergeA74": "The predicate disjoint is an instance of symmetric relation.",
  "mergeA77": "If CLASS2 is an instance of set or class and CLASS1 is an instance of set or class, then INST is not an instance of CLASS1 or INST is not an instance of CLASS2 for every INST if and only if CLASS1 is disjoint from CLASS2 for every CLASS1 and CLASS2.",
  "mergeA78": "The predicate disjointRelation is an instance of binary predicate.",
  "mergeA79": "The predicate disjointRelation is an instance of irreflexive relation.",
  "mergeA82": "The predicate disjointRelation is internally related to the predicate disjoint.",
  "mergeA83": "If REL1 is an instance of binary relation and REL2 is an instance of binary relation and REL1 and REL2 are disjoint, then REL1 does not hold with the arguments INST1 and INST2 or REL2 does not hold with the arguments INST1 and INST2 for every INST1, INST2, REL1 and REL2.",
  "mergeA84": "If REL1 is an instance of ternary relation and REL2 is an instance of ternary relation and REL1 and REL2 are disjoint, then REL1 does not hold with the arguments INST1, INST2 and INST3 or REL2 does not hold with the arguments INST1, INST2 and INST3 for every INST1, INST2, INST3, REL1 and REL2.",
  "mergeA85": "If REL1 is an instance of quaternary relation and REL2 is an instance of quaternary relation and REL1 and REL2 are disjoint, then REL1 does not hold with the arguments INST1, INST2, INST3 and INST4 or REL2 does not hold with the arguments INST1, INST2, INST3 and INST4 for every INST1, INST2, INST3, INST4, REL1 and REL2.",
  "mergeA86": "If REL1 is an instance of quintary relation and REL2 is an instance of quintary relation and REL1 and REL2 are disjoint, then REL1 does not hold with the arguments INST1, INST2, INST3, INST4 and INST5 or REL2 does not hold with the arguments INST1, INST2, INST3, INST4 and INST5 for every INST1, INST2, INST3, INST4, INST5, REL1 and REL2.",
  "mergeA87": "The predicate contraryAttribute is an instance of predicate.",
  "mergeA88": "The predicate contraryAttribute is an instance of variable arity relation.",
  "mergeA90": "If ROW2 is an instance of attribute and ROW1 is an instance of attribute, then if OBJ is an instance of object and OBJ has the attribute ROW1, then OBJ does not have the attribute ROW2 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW2, then OBJ does not have the attribute ROW1 for every OBJ if and only if nothing can simultaneously be ROW1 and ROW2 for every ROW1 and ROW2 and if ROW4 is an instance of attribute and ROW3 is an instance of attribute and ROW2 is an instance of attribute and ROW1 is an instance of attribute, then if OBJ is an instance of object and OBJ has the attribute ROW1, then OBJ does not have the attribute ROW2 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW2, then OBJ does not have the attribute ROW1 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW1, then OBJ does not have the attribute ROW3 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW3, then OBJ does not have the attribute ROW1 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW1, then OBJ does not have the attribute ROW4 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW4, then OBJ does not have the attribute ROW1 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW2, then OBJ does not have the attribute ROW3 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW3, then OBJ does not have the attribute ROW2 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW2, then OBJ does not have the attribute ROW4 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW4, then OBJ does not have the attribute ROW2 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW3, then OBJ does not have the attribute ROW4 for every OBJ and if OBJ is an instance of object and OBJ has the attribute ROW4, then OBJ does not have the attribute ROW3 for every OBJ if and only if nothing can simultaneously be ROW1, ROW2, ROW3 and ROW4 for every ROW1, ROW2, ROW3 and ROW4.",
  "mergeA94": "The predicate exhaustiveAttribute is an instance of predicate.",
  "mergeA95": "The predicate exhaustiveAttribute is an instance of variable arity relation.",
  "mergeA98": "If ROW2 is an instance of attribute and ROW1 is an instance of attribute and ATTR is an instance of attribute, then if OBJ is an instance of object and OBJ has the attribute ATTR, then OBJ has the attribute ROW1 or OBJ has the attribute ROW2 for every OBJ if and only if ROW1 and ROW2 are the only instances of ATTR for every ATTR, ROW1 and ROW2 and if ROW5 is an instance of attribute and ROW4 is an instance of attribute and ROW3 is an instance of attribute and ROW2 is an instance of attribute and ROW1 is an instance of attribute and ATTR is an instance of attribute, then if OBJ is an instance of object and OBJ has the attribute ATTR, then OBJ has the attribute ROW1 or OBJ has the attribute ROW2 or OBJ has the attribute ROW3 or OBJ has the attribute ROW4 or OBJ has the attribute ROW5 for every OBJ if and only if ROW1, ROW2, ROW3, ROW4 and ROW5 are the only instances of ATTR for every ATTR, ROW1, ROW2, ROW3, ROW4 and ROW5.",
  "mergeA102": "The predicate exhaustiveDecomposition is an instance of predicate.",
  "mergeA103": "The predicate exhaustiveDecomposition is an instance of variable arity relation.",
  "mergeA105": "The predicate exhaustiveDecomposition is internally related to the predicate partition.",
  "mergeA107": "The predicate disjointDecomposition is an instance of predicate.",
  "mergeA108": "The predicate disjointDecomposition is an instance of variable arity relation.",
  "mergeA110": "The predicate disjointDecomposition is internally related to the predicate exhaustiveDecomposition.",
  "mergeA111": "The predicate disjointDecomposition is internally related to the predicate disjoint.",
  "mergeA113": "The predicate partition is an instance of predicate.",
  "mergeA114": "The predicate partition is an instance of variable arity relation.",
  "mergeA117": "The predicate relatedInternalConcept is an instance of binary predicate.",
  "mergeA118": "The predicate relatedInternalConcept is an instance of equivalence relation.",
  "mergeA121": "The predicate relatedExternalConcept is an instance of ternary predicate.",
  "mergeA125": "The predicate relatedExternalConcept is internally related to the predicate relatedInternalConcept.",
  "mergeA126": "The predicate synonymousExternalConcept is a subrelation of the predicate relatedExternalConcept.",
  "mergeA127": "The predicate synonymousExternalConcept and the predicate subsumedExternalConcept are disjoint.",
  "mergeA128": "The predicate synonymousExternalConcept and the predicate subsumingExternalConcept are disjoint.",
  "mergeA129": "The predicate subsumedExternalConcept and the predicate subsumingExternalConcept are disjoint.",
  "mergeA130": "The predicate subsumingExternalConcept is a subrelation of the predicate relatedExternalConcept.",
  "mergeA131": "The predicate subsumedExternalConcept is a subrelation of the predicate relatedExternalConcept.",
  "mergeA132": "The predicate externalImage is an instance of binary predicate.",
  "mergeA135": "The predicate subAttribute is an instance of binary predicate.",
  "mergeA136": "The predicate subAttribute is an instance of partial ordering relation.",
  "mergeA139": "The predicate subAttribute and the predicate successorAttribute are disjoint.",
  "mergeA140": "If ATTR2 is an instance of attribute and ATTR1 is an instance of attribute and OBJ is an instance of object and ATTR1 is a subattribute of ATTR2 and OBJ has the attribute ATTR1, then OBJ has the attribute ATTR2 for every ATTR1, ATTR2 and OBJ.",
  "mergeA141": "If ATTR1 is a subattribute of ATTR2 and ATTR2 is an instance of CLASS, then ATTR1 is an instance of CLASS for every CLASS, ATTR1 and ATTR2.",
  "mergeA142": "The predicate successorAttribute is an instance of binary predicate.",
  "mergeA143": "The predicate successorAttribute is an instance of asymmetric relation.",
  "mergeA147": "The predicate successorAttributeClosure is an instance of binary predicate.",
  "mergeA148": "The predicate successorAttributeClosure is an instance of transitive relation.",
  "mergeA149": "The predicate successorAttributeClosure is an instance of irreflexive relation.",
  "mergeA152": "The predicate successorAttributeClosure is internally related to the predicate successorAttribute.",
  "mergeA153": "If ATTR2 is an instance of attribute and ATTR1 is an instance of attribute and ATTR1 is an immediate successor attribute of ATTR2, then ATTR1 is a successor attribute of ATTR2 for every ATTR1 and ATTR2.",
  "mergeA154": "The predicate greaterThanByQuality is an instance of ternary predicate.",
  "mergeA158": "If ATT is an instance of attribute and E1 has more of ATT than E2 and E2 has more of ATT than E3, then E1 has more of ATT than E3 for every E2, E1, E3 and ATT.",
  "mergeA159": "If ATT is an instance of attribute and E1 has more of ATT than E2, then E2 does not have more of ATT than E1 for every E2, E1 and ATT.",
  "mergeA160": "If ATT is an instance of attribute and E1 has more of ATT than E2, then E2 is not equal to E1 for every ATT, E2 and E1.",
  "mergeA161": "The predicate entails is an instance of binary predicate.",
  "mergeA164": "The function AssignmentFn is an instance of function.",
  "mergeA165": "The function AssignmentFn is an instance of variable arity relation.",
  "mergeA168": "The function PowerSetFn is an instance of unary function.",
  "mergeA169": "The function PowerSetFn is an instance of total valued relation.",
  "mergeA172": "Entity is a topclass.",
  "mergeA173": "Entity is exhaustively partitioned into physical and abstract.",
  "mergeA174": "THING is an instance of entity for every THING.",
  "mergeA175": "There is at least one THING for which THING is an instance of entity.",
  "mergeA176": "If CLASS is a subclass of entity, then there is at least one THING for which THING is an instance of CLASS for every CLASS.",
  "mergeA177": "CLASS is a subclass of entity if and only if CLASS is an instance of class for every CLASS.",
  "mergeA178": "Physical is a subclass of entity.",
  "mergeA179": "Physical is exhaustively partitioned into object and process.",
  "mergeA180": "If PHYS is an instance of physical, then there is at least one LOC and TIME for which LOC is an instance of object and TIME is an instance of time position and PHYS is located at LOC and PHYS exists during TIME for every PHYS.",
  "mergeA181": "Object is a subclass of physical.",
  "mergeA182": "Self connected object is a subclass of object.",
  "mergeA183": "Organic thing is a subclass of self connected object.",
  "mergeA184": "The function FrontFn is an instance of spatial relation.",
  "mergeA185": "The function FrontFn is an instance of partial valued relation.",
  "mergeA186": "The function FrontFn is an instance of unary function.",
  "mergeA187": "The function FrontFn is an instance of asymmetric relation.",
  "mergeA188": "The function FrontFn is an instance of irreflexive relation.",
  "mergeA191": "If OBJ is an instance of self connected object, then the front of OBJ is a side of OBJ for every OBJ.",
  "mergeA192": "The function BackFn is an instance of spatial relation.",
  "mergeA193": "The function BackFn is an instance of partial valued relation.",
  "mergeA194": "The function BackFn is an instance of unary function.",
  "mergeA195": "The function BackFn is an instance of asymmetric relation.",
  "mergeA196": "The function BackFn is an instance of irreflexive relation.",
  "mergeA199": "If OBJ is an instance of self connected object, then the back of OBJ is a side of OBJ for every OBJ.",
  "mergeA200": "The predicate part is an instance of spatial relation.",
  "mergeA201": "The predicate part is an instance of partial ordering relation.",
  "mergeA204": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then if PART is an instance of object and PART overlaps with OBJ1 , then PART overlaps with OBJ2  for every PART if and only if OBJ1 is a part of OBJ2 for every OBJ1 and OBJ2.",
  "mergeA205": "The predicate properPart is an instance of asymmetric relation.",
  "mergeA206": "The predicate properPart is an instance of transitive relation.",
  "mergeA207": "The predicate properPart is a subrelation of the predicate part.",
  "mergeA208": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then OBJ1 is a part of OBJ2 and OBJ2 is not a part of OBJ1 if and only if OBJ1 is a proper part of OBJ2 for every OBJ2 and OBJ1.",
  "mergeA209": "The predicate piece is a subrelation of the predicate part.",
  "mergeA212": "If SUBSTANCE2 is an instance of substance and SUBSTANCE1 is an instance of substance and SUBSTANCE1 is a piece of SUBSTANCE2 and SUBSTANCE1 is an instance of CLASS, then SUBSTANCE2 is an instance of CLASS for every SUBSTANCE1, SUBSTANCE2 and CLASS.",
  "mergeA213": "The predicate component is a subrelation of the predicate part.",
  "mergeA216": "The predicate material is an instance of binary predicate.",
  "mergeA219": "The predicate contains is a subrelation of the predicate partlyLocated.",
  "mergeA220": "The predicate contains is an instance of spatial relation.",
  "mergeA221": "The predicate contains is an instance of asymmetric relation.",
  "mergeA222": "The predicate contains and the predicate part are disjoint.",
  "mergeA225": "If OBJ2 is an instance of object and OBJ1 is an instance of self connected object, then there is at least one HOLE for which HOLE is an instance of hole and HOLE is a hole in OBJ1 and OBJ2 properly fills HOLE if and only if OBJ1 contains OBJ2 for every OBJ1 and OBJ2.",
  "mergeA226": "Substance is a subclass of self connected object.",
  "mergeA227": "Substance is exhaustively partitioned into pure substance and mixture.",
  "mergeA228": "Substance is exhaustively partitioned into synthetic substance and natural substance.",
  "mergeA229": "If ATTR is an instance of attribute and PART is an instance of object and OBJ is an instance of substance and OBJ has the attribute ATTR and PART is a part of OBJ, then PART has the attribute ATTR for every OBJ, PART and ATTR.",
  "mergeA230": "Synthetic substance is a subclass of substance.",
  "mergeA231": "There is at least one PROCESS for which PROCESS is an instance of intentional process and SUBSTANCE is a result of PROCESS and SUBSTANCE is an instance of substance if and only if SUBSTANCE is an instance of synthetic substance for every SUBSTANCE.",
  "mergeA232": "Natural substance is a subclass of substance.",
  "mergeA233": "Pure substance is a subclass of substance.",
  "mergeA234": "Pure substance is exhaustively partitioned into compound substance and elemental substance.",
  "mergeA235": "Elemental substance is a subclass of pure substance.",
  "mergeA236": "Metal is a subclass of elemental substance.",
  "mergeA237": "Atom is a subclass of elemental substance.",
  "mergeA238": "If ATOM is an instance of atom, then there is at least one PROTON and ELECTRON for which PROTON is a part of ATOM and ELECTRON is a part of ATOM and PROTON is an instance of proton and ELECTRON is an instance of electron for every ATOM.",
  "mergeA239": "If ATOM is an instance of atom and NUCLEUS1 is a part of ATOM and NUCLEUS2 is a part of ATOM and NUCLEUS1 is an instance of atomic nucleus and NUCLEUS2 is an instance of atomic nucleus, then NUCLEUS1 is equal to NUCLEUS2 for every ATOM, NUCLEUS1 and NUCLEUS2.",
  "mergeA240": "Subatomic particle is a subclass of elemental substance.",
  "mergeA241": "If PARTICLE is an instance of subatomic particle, then there is at least one ATOM for which ATOM is an instance of atom and PARTICLE is a part of ATOM for every PARTICLE.",
  "mergeA242": "Atomic nucleus is a subclass of subatomic particle.",
  "mergeA243": "If NUCLEUS is an instance of atomic nucleus, then there is at least one NEUTRON and PROTON for which NEUTRON is a part of NUCLEUS and PROTON is a part of NUCLEUS and NEUTRON is an instance of neutron and PROTON is an instance of proton for every NUCLEUS.",
  "mergeA244": "Electron is a subclass of subatomic particle.",
  "mergeA245": "Proton is a subclass of subatomic particle.",
  "mergeA246": "Neutron is a subclass of subatomic particle.",
  "mergeA247": "Compound substance is a subclass of pure substance.",
  "mergeA248": "Mixture is a subclass of substance.",
  "mergeA249": "If MIXTURE is an instance of mixture, then there is at least one PURE1 and PURE2 for which PURE1 is an instance of pure substance and PURE2 is an instance of pure substance and PURE1 is not equal to PURE2 and PURE1 is a part of MIXTURE and PURE2 is a part of MIXTURE for every MIXTURE.",
  "mergeA250": "If SUBSTANCE is an instance of object and MIXTURE is an instance of mixture and SUBSTANCE is a part of MIXTURE and SUBSTANCE is not an instance of mixture, then SUBSTANCE is an instance of pure substance for every MIXTURE and SUBSTANCE.",
  "mergeA251": "Corpuscular object is a subclass of self connected object.",
  "mergeA252": "Corpuscular object is disjoint from substance.",
  "mergeA253": "If OBJ is an instance of corpuscular object, then there is at least one SUBSTANCE1 and SUBSTANCE2 for which SUBSTANCE1 is a subclass of substance and SUBSTANCE2 is a subclass of substance and OBJ is made out of SUBSTANCE1 and OBJ is made out of SUBSTANCE2 and SUBSTANCE1 is not equal to SUBSTANCE2 for every OBJ.",
  "mergeA254": "Region is a subclass of object.",
  "mergeA255": "If REGION is an instance of region, then there is at least one PHYS for which PHYS is an instance of physical and PHYS is located at REGION for every REGION.",
  "mergeA256": "Collection is a subclass of object.",
  "mergeA257": "Collection is disjoint from self connected object.",
  "mergeA258": "If COLL is an instance of collection, then there is at least one OBJ for which OBJ is an instance of self connected object and OBJ is a member of COLL for every COLL.",
  "mergeA259": "The predicate member is a subrelation of the predicate part.",
  "mergeA260": "The predicate member is an instance of asymmetric relation.",
  "mergeA261": "The predicate member is an instance of intransitive relation.",
  "mergeA264": "The predicate member is internally related to the predicate instance.",
  "mergeA265": "The predicate member is internally related to the predicate element.",
  "mergeA266": "The predicate subCollection is an instance of binary predicate.",
  "mergeA267": "The predicate subCollection is an instance of partial ordering relation.",
  "mergeA270": "The predicate subCollection is a subrelation of the predicate part.",
  "mergeA271": "If COLL2 is an instance of collection and COLL1 is an instance of collection, then if MEMBER is an instance of self connected object and MEMBER is a member of COLL1, then MEMBER is a member of COLL2 for every MEMBER if and only if COLL1 is a proper sub-collection of COLL2 for every COLL1 and COLL2.",
  "mergeA272": "Content bearing physical is a subclass of physical.",
  "mergeA273": "If OBJ is an instance of content bearing physical, then there is at least one THING for which OBJ represents THING for every OBJ.",
  "mergeA274": "Content bearing process is a subclass of content bearing physical.",
  "mergeA275": "Content bearing process is a subclass of process.",
  "mergeA276": "Content bearing object is a subclass of corpuscular object.",
  "mergeA277": "Content bearing object is a subclass of content bearing physical.",
  "mergeA279": "Symbolic string is a subclass of content bearing object.",
  "mergeA280": "Character is a subclass of symbolic string.",
  "mergeA281": "If STRING is an instance of symbolic string, then there is at least one PART for which PART is a part of STRING and PART is an instance of character for every STRING.",
  "mergeA282": "The predicate containsInformation is an instance of binary predicate.",
  "mergeA283": "The predicate containsInformation is an instance of asymmetric relation.",
  "mergeA284": "The predicate containsInformation is a subrelation of the predicate represents.",
  "mergeA287": "Icon is a subclass of content bearing physical.",
  "mergeA288": "Motion picture is a subclass of text.",
  "mergeA289": "Linguistic expression is a subclass of content bearing physical.",
  "mergeA290": "Linguistic expression is disjoint from icon.",
  "mergeA291": "Language is a subclass of linguistic expression.",
  "mergeA292": "Language is disjointly decomposed into animal language, human language and computer language.",
  "mergeA293": "Animal language is a subclass of language.",
  "mergeA294": "If AGENT is an instance of agent and PROC is an instance of process and LANG is an instance of animal language and AGENT is the agent of PROC and LANG is an instrument for PROC, then AGENT is an instance of animal and AGENT is not an instance of human for every PROC, LANG and AGENT.",
  "mergeA295": "Artificial language is a subclass of language.",
  "mergeA296": "Computer language is a subclass of artificial language.",
  "mergeA297": "If AGENT is an instance of agent and PROC is an instance of process and LANG is an instance of computer language and AGENT is the agent of PROC and LANG is an instrument for PROC, then AGENT is an instance of machine for every PROC, LANG and AGENT.",
  "mergeA298": "Human language is a subclass of language.",
  "mergeA299": "Human language is exhaustively partitioned into natural language and constructed language.",
  "mergeA300": "Human language is exhaustively partitioned into spoken human language and manual human language.",
  "mergeA301": "If AGENT is an instance of agent and PROC is an instance of process and LANG is an instance of human language and AGENT is the agent of PROC and LANG is an instrument for PROC, then AGENT is an instance of human for every PROC, LANG and AGENT.",
  "mergeA302": "Constructed language is a subclass of human language.",
  "mergeA303": "Constructed language is a subclass of artificial language.",
  "mergeA304": "If LANG is an instance of constructed language, then there is at least one PLAN for which PLAN is an instance of planning and LANG is a result of PLAN for every LANG.",
  "mergeA305": "Natural language is a subclass of human language.",
  "mergeA306": "Manual human language is a subclass of human language.",
  "mergeA307": "Spoken human language is a subclass of human language.",
  "mergeA308": "English language is an instance of natural language.",
  "mergeA309": "English language is an instance of spoken human language.",
  "mergeA310": "Word is a subclass of linguistic expression.",
  "mergeA311": "Formula is a subclass of sentence.",
  "mergeA312": "Agent is a subclass of object.",
  "mergeA313": "If AGENT is an instance of agent, then there is at least one PROC for which PROC is an instance of process and AGENT is the agent of PROC for every AGENT.",
  "mergeA314": "Sentient agent is a subclass of agent.",
  "mergeA315": "Cognitive agent is a subclass of sentient agent.",
  "mergeA316": "Legal agent is a subclass of agent.",
  "mergeA318": "The predicate leader is an instance of binary predicate.",
  "mergeA319": "The predicate leader is an instance of asymmetric relation.",
  "mergeA320": "The predicate leader is an instance of single valued relation.",
  "mergeA324": "Process is a subclass of physical.",
  "mergeA325": "Dual object process is a subclass of process.",
  "mergeA326": "If PROCESS is an instance of dual object process, then there is at least one OBJ1 and OBJ2 for which OBJ1 is a participant in PROCESS and OBJ2 is a participant in PROCESS and OBJ1 is not equal to OBJ2 for every PROCESS.",
  "mergeA327": "Single agent process is a subclass of process.",
  "mergeA328": "If PROC is an instance of single agent process, then there is at least one AGENT for which AGENT is an instance of agent and AGENT is the agent of PROC for every PROC.",
  "mergeA329": "If AGENT_1 is an instance of agent and AGENT_2 is an instance of agent and PROC is an instance of single agent process and AGENT_1 is the agent of PROC and AGENT_2 is the agent of PROC, then AGENT_1 is equal to AGENT_2 for every PROC, AGENT_1 and AGENT_2.",
  "mergeA330": "Abstract is a subclass of entity.",
  "mergeA331": "Abstract is disjointly decomposed into quantity, attribute, set or class, relation and proposition.",
  "mergeA332": "Quantity is a subclass of abstract.",
  "mergeA333": "Attribute is a subclass of abstract.",
  "mergeA334": "Attribute is exhaustively partitioned into internal attribute, relational attribute and perceptual attribute.",
  "mergeA335": "The predicate property is an instance of binary predicate.",
  "mergeA338": "The predicate attribute is an instance of asymmetric relation.",
  "mergeA339": "The predicate attribute is an instance of irreflexive relation.",
  "mergeA340": "The predicate attribute is a subrelation of the predicate property.",
  "mergeA342": "The predicate manner is an instance of asymmetric relation.",
  "mergeA343": "The predicate manner is an instance of irreflexive relation.",
  "mergeA344": "The predicate manner is a subrelation of the predicate property.",
  "mergeA346": "The predicate manner and the predicate attribute are disjoint.",
  "mergeA347": "The function ExtensionFn is an instance of unary function.",
  "mergeA348": "The function ExtensionFn is an instance of partial valued relation.",
  "mergeA351": "Internal attribute is a subclass of attribute.",
  "mergeA352": "Physical attribute is a subclass of internal attribute.",
  "mergeA353": "Relational attribute is a subclass of attribute.",
  "mergeA354": "Number is a subclass of quantity.",
  "mergeA355": "Number is exhaustively partitioned into real number, imaginary number and complex number.",
  "mergeA356": "The predicate lessThan is an instance of binary predicate.",
  "mergeA357": "The predicate lessThan is an instance of transitive relation.",
  "mergeA358": "The predicate lessThan is an instance of irreflexive relation.",
  "mergeA359": "The predicate lessThan is an instance of relation extended to quantities.",
  "mergeA363": "The predicate greaterThan is an instance of binary predicate.",
  "mergeA364": "The predicate greaterThan is an instance of transitive relation.",
  "mergeA365": "The predicate greaterThan is an instance of irreflexive relation.",
  "mergeA366": "The predicate greaterThan is an instance of relation extended to quantities.",
  "mergeA370": "The predicate greaterThan is an inverse of the predicate lessThan.",
  "mergeA371": "The predicate lessThanOrEqualTo is an instance of binary predicate.",
  "mergeA372": "The predicate lessThanOrEqualTo is an instance of partial ordering relation.",
  "mergeA373": "The predicate lessThanOrEqualTo is an instance of relation extended to quantities.",
  "mergeA377": "If NUMBER2 is an instance of quantity and NUMBER1 is an instance of quantity, then NUMBER1 is equal to NUMBER2 or NUMBER1 is less than NUMBER2 if and only if NUMBER1 is less than or equal to NUMBER2 for every NUMBER1 and NUMBER2.",
  "mergeA378": "The predicate greaterThanOrEqualTo is an instance of binary predicate.",
  "mergeA379": "The predicate greaterThanOrEqualTo is an instance of partial ordering relation.",
  "mergeA380": "The predicate greaterThanOrEqualTo is an instance of relation extended to quantities.",
  "mergeA384": "The predicate greaterThanOrEqualTo is an inverse of the predicate lessThanOrEqualTo.",
  "mergeA385": "If NUMBER2 is an instance of quantity and NUMBER1 is an instance of quantity, then NUMBER1 is equal to NUMBER2 or NUMBER1 is greater than NUMBER2 if and only if NUMBER1 is greater than or equal to NUMBER2 for every NUMBER1 and NUMBER2.",
  "mergeA386": "Real number is a subclass of number.",
  "mergeA387": "Real number is exhaustively partitioned into negative real number and nonnegative real number.",
  "mergeA388": "Real number is exhaustively partitioned into rational number and irrational number.",
  "mergeA389": "Imaginary number is a subclass of number.",
  "mergeA390": "Rational number is a subclass of real number.",
  "mergeA391": "Irrational number is a subclass of real number.",
  "mergeA392": "Nonnegative real number is a subclass of real number.",
  "mergeA393": "If NUMBER is an instance of quantity, then NUMBER is greater than or equal to 0 and NUMBER is an instance of real number if and only if NUMBER is an instance of nonnegative real number for every NUMBER.",
  "mergeA394": "Positive real number is a subclass of nonnegative real number.",
  "mergeA395": "If NUMBER is an instance of quantity, then NUMBER is greater than 0 and NUMBER is an instance of real number if and only if NUMBER is an instance of positive real number for every NUMBER.",
  "mergeA396": "Negative real number is a subclass of real number.",
  "mergeA397": "If NUMBER is an instance of quantity, then NUMBER is less than 0 and NUMBER is an instance of real number if and only if NUMBER is an instance of negative real number for every NUMBER.",
  "mergeA398": "Integer is a subclass of rational number.",
  "mergeA399": "Integer is exhaustively partitioned into odd integer and even integer.",
  "mergeA400": "Integer is exhaustively partitioned into negative integer and nonnegative integer.",
  "mergeA401": "0 is an instance of integer.",
  "mergeA402": "Even integer is a subclass of integer.",
  "mergeA403": "Odd integer is a subclass of integer.",
  "mergeA404": "Prime number is a subclass of integer.",
  "mergeA405": "Nonnegative integer is a subclass of integer.",
  "mergeA406": "Nonnegative integer is a subclass of nonnegative real number.",
  "mergeA407": "Negative integer is a subclass of integer.",
  "mergeA408": "Negative integer is a subclass of negative real number.",
  "mergeA409": "If X is an instance of negative integer, then 0 is greater than X for every X.",
  "mergeA410": "Positive integer is a subclass of nonnegative integer.",
  "mergeA411": "Positive integer is a subclass of positive real number.",
  "mergeA412": "1 is an instance of positive integer.",
  "mergeA413": "2 is an instance of positive integer.",
  "mergeA414": "3 is an instance of positive integer.",
  "mergeA415": "4 is an instance of positive integer.",
  "mergeA416": "5 is an instance of positive integer.",
  "mergeA417": "6 is an instance of positive integer.",
  "mergeA418": "7 is an instance of positive integer.",
  "mergeA419": "8 is an instance of positive integer.",
  "mergeA420": "9 is an instance of positive integer.",
  "mergeA421": "10 is an instance of positive integer.",
  "mergeA422": "11 is an instance of positive integer.",
  "mergeA423": "12 is an instance of positive integer.",
  "mergeA424": "13 is an instance of positive integer.",
  "mergeA425": "14 is an instance of positive integer.",
  "mergeA426": "15 is an instance of positive integer.",
  "mergeA427": "16 is an instance of positive integer.",
  "mergeA428": "17 is an instance of positive integer.",
  "mergeA429": "18 is an instance of positive integer.",
  "mergeA430": "19 is an instance of positive integer.",
  "mergeA431": "20 is an instance of positive integer.",
  "mergeA432": "21 is an instance of positive integer.",
  "mergeA433": "22 is an instance of positive integer.",
  "mergeA434": "23 is an instance of positive integer.",
  "mergeA435": "24 is an instance of positive integer.",
  "mergeA436": "25 is an instance of positive integer.",
  "mergeA437": "26 is an instance of positive integer.",
  "mergeA438": "27 is an instance of positive integer.",
  "mergeA439": "28 is an instance of positive integer.",
  "mergeA440": "29 is an instance of positive integer.",
  "mergeA441": "30 is an instance of positive integer.",
  "mergeA442": "31 is an instance of positive integer.",
  "mergeA443": "32 is an instance of positive integer.",
  "mergeA444": "33 is an instance of positive integer.",
  "mergeA445": "34 is an instance of positive integer.",
  "mergeA446": "35 is an instance of positive integer.",
  "mergeA447": "36 is an instance of positive integer.",
  "mergeA448": "37 is an instance of positive integer.",
  "mergeA449": "38 is an instance of positive integer.",
  "mergeA450": "39 is an instance of positive integer.",
  "mergeA451": "40 is an instance of positive integer.",
  "mergeA452": "41 is an instance of positive integer.",
  "mergeA453": "42 is an instance of positive integer.",
  "mergeA454": "43 is an instance of positive integer.",
  "mergeA455": "44 is an instance of positive integer.",
  "mergeA456": "45 is an instance of positive integer.",
  "mergeA457": "46 is an instance of positive integer.",
  "mergeA458": "47 is an instance of positive integer.",
  "mergeA459": "48 is an instance of positive integer.",
  "mergeA460": "49 is an instance of positive integer.",
  "mergeA461": "50 is an instance of positive integer.",
  "mergeA462": "51 is an instance of positive integer.",
  "mergeA463": "52 is an instance of positive integer.",
  "mergeA464": "53 is an instance of positive integer.",
  "mergeA465": "54 is an instance of positive integer.",
  "mergeA466": "55 is an instance of positive integer.",
  "mergeA467": "56 is an instance of positive integer.",
  "mergeA468": "57 is an instance of positive integer.",
  "mergeA469": "58 is an instance of positive integer.",
  "mergeA470": "59 is an instance of positive integer.",
  "mergeA471": "60 is an instance of positive integer.",
  "mergeA472": "61 is an instance of positive integer.",
  "mergeA473": "62 is an instance of positive integer.",
  "mergeA474": "63 is an instance of positive integer.",
  "mergeA475": "64 is an instance of positive integer.",
  "mergeA476": "65 is an instance of positive integer.",
  "mergeA477": "66 is an instance of positive integer.",
  "mergeA478": "67 is an instance of positive integer.",
  "mergeA479": "68 is an instance of positive integer.",
  "mergeA480": "69 is an instance of positive integer.",
  "mergeA481": "70 is an instance of positive integer.",
  "mergeA482": "71 is an instance of positive integer.",
  "mergeA483": "72 is an instance of positive integer.",
  "mergeA484": "73 is an instance of positive integer.",
  "mergeA485": "74 is an instance of positive integer.",
  "mergeA486": "75 is an instance of positive integer.",
  "mergeA487": "76 is an instance of positive integer.",
  "mergeA488": "77 is an instance of positive integer.",
  "mergeA489": "78 is an instance of positive integer.",
  "mergeA490": "79 is an instance of positive integer.",
  "mergeA491": "80 is an instance of positive integer.",
  "mergeA492": "81 is an instance of positive integer.",
  "mergeA493": "82 is an instance of positive integer.",
  "mergeA494": "83 is an instance of positive integer.",
  "mergeA495": "84 is an instance of positive integer.",
  "mergeA496": "85 is an instance of positive integer.",
  "mergeA497": "86 is an instance of positive integer.",
  "mergeA498": "87 is an instance of positive integer.",
  "mergeA499": "88 is an instance of positive integer.",
  "mergeA500": "89 is an instance of positive integer.",
  "mergeA501": "90 is an instance of positive integer.",
  "mergeA502": "91 is an instance of positive integer.",
  "mergeA503": "92 is an instance of positive integer.",
  "mergeA504": "93 is an instance of positive integer.",
  "mergeA505": "94 is an instance of positive integer.",
  "mergeA506": "95 is an instance of positive integer.",
  "mergeA507": "96 is an instance of positive integer.",
  "mergeA508": "97 is an instance of positive integer.",
  "mergeA509": "98 is an instance of positive integer.",
  "mergeA510": "99 is an instance of positive integer.",
  "mergeA511": "100 is an instance of positive integer.",
  "mergeA512": "101 is an instance of positive integer.",
  "mergeA513": "102 is an instance of positive integer.",
  "mergeA514": "103 is an instance of positive integer.",
  "mergeA515": "104 is an instance of positive integer.",
  "mergeA516": "105 is an instance of positive integer.",
  "mergeA517": "106 is an instance of positive integer.",
  "mergeA518": "107 is an instance of positive integer.",
  "mergeA519": "108 is an instance of positive integer.",
  "mergeA520": "109 is an instance of positive integer.",
  "mergeA521": "110 is an instance of positive integer.",
  "mergeA522": "147 is an instance of positive integer.",
  "mergeA523": "180 is an instance of positive integer.",
  "mergeA524": "210 is an instance of positive integer.",
  "mergeA525": "222 is an instance of positive integer.",
  "mergeA526": "223 is an instance of positive integer.",
  "mergeA527": "226 is an instance of positive integer.",
  "mergeA528": "227 is an instance of positive integer.",
  "mergeA529": "231 is an instance of positive integer.",
  "mergeA530": "237 is an instance of positive integer.",
  "mergeA531": "242 is an instance of positive integer.",
  "mergeA532": "243 is an instance of positive integer.",
  "mergeA533": "247 is an instance of positive integer.",
  "mergeA534": "249 is an instance of positive integer.",
  "mergeA535": "253 is an instance of positive integer.",
  "mergeA536": "254 is an instance of positive integer.",
  "mergeA537": "256 is an instance of positive integer.",
  "mergeA538": "261 is an instance of positive integer.",
  "mergeA539": "262 is an instance of positive integer.",
  "mergeA540": "263 is an instance of positive integer.",
  "mergeA541": "265 is an instance of positive integer.",
  "mergeA542": "266 is an instance of positive integer.",
  "mergeA543": "267 is an instance of positive integer.",
  "mergeA544": "272 is an instance of positive integer.",
  "mergeA545": "360 is an instance of positive integer.",
  "mergeA546": "365 is an instance of positive integer.",
  "mergeA547": "400 is an instance of positive integer.",
  "mergeA548": "746 is an instance of positive integer.",
  "mergeA549": "1000 is an instance of positive integer.",
  "mergeA550": "1024 is an instance of positive integer.",
  "mergeA551": "2000 is an instance of positive integer.",
  "mergeA552": "2205 is an instance of positive integer.",
  "mergeA553": "2240 is an instance of positive integer.",
  "mergeA554": "1000000 is an instance of positive integer.",
  "mergeA555": "1000000000 is an instance of positive integer.",
  "mergeA556": "1000000000000 is an instance of positive integer.",
  "mergeA557": "If X is an instance of positive integer, then X is greater than 0 for every X.",
  "mergeA558": "Binary number is a subclass of real number.",
  "mergeA559": "Complex number is a subclass of number.",
  "mergeA560": "Complex number is disjoint from real number.",
  "mergeA561": "Physical quantity is a subclass of quantity.",
  "mergeA562": "Physical quantity is exhaustively partitioned into constant quantity and function quantity.",
  "mergeA563": "Constant quantity is a subclass of physical quantity.",
  "mergeA564": "Time measure is a subclass of constant quantity.",
  "mergeA565": "Time duration is a subclass of time measure.",
  "mergeA566": "Time position is a subclass of time measure.",
  "mergeA567": "Time position is exhaustively partitioned into time interval and time point.",
  "mergeA568": "Time interval is a subclass of time position.",
  "mergeA569": "Time point is a subclass of time position.",
  "mergeA570": "Function quantity is a subclass of physical quantity.",
  "mergeA571": "Unary constant function quantity is a subclass of function quantity.",
  "mergeA572": "Time dependent quantity is a subclass of unary constant function quantity.",
  "mergeA573": "Set or class is a subclass of abstract.",
  "mergeA574": "Set or class is exhaustively partitioned into set and class.",
  "mergeA575": "Class is a subclass of set or class.",
  "mergeA576": "Set is a subclass of set or class.",
  "mergeA577": "Relation is a subclass of abstract.",
  "mergeA578": "Relation is disjointly decomposed into binary relation, ternary relation, quaternary relation, quintary relation and variable arity relation.",
  "mergeA579": "Relation is exhaustively partitioned into predicate, function and list.",
  "mergeA580": "Relation is exhaustively partitioned into total valued relation and partial valued relation.",
  "mergeA581": "Single valued relation is a subclass of relation.",
  "mergeA582": "Total valued relation is a subclass of relation.",
  "mergeA583": "Partial valued relation is a subclass of relation.",
  "mergeA584": "Binary relation is a subclass of relation.",
  "mergeA591": "Reflexive relation is a subclass of binary relation.",
  "mergeA592": "If REL is an instance of binary relation, then REL holds with the arguments INST and INST for every INST if and only if REL is an instance of reflexive relation for every REL.",
  "mergeA593": "Irreflexive relation is a subclass of binary relation.",
  "mergeA594": "If REL is an instance of binary relation, then REL does not hold with the arguments INST and INST for every INST if and only if REL is an instance of irreflexive relation for every REL.",
  "mergeA595": "Symmetric relation is a subclass of binary relation.",
  "mergeA596": "If REL is an instance of binary relation, then if REL holds with the arguments INST1 and INST2, then REL holds with the arguments INST2 and INST1 for every INST1 and INST2 if and only if REL is an instance of symmetric relation for every REL.",
  "mergeA597": "Asymmetric relation is a subclass of irreflexive relation.",
  "mergeA598": "Asymmetric relation is a subclass of antisymmetric relation.",
  "mergeA599": "REL is an instance of antisymmetric relation and REL is an instance of irreflexive relation if and only if REL is an instance of asymmetric relation for every REL.",
  "mergeA600": "Antisymmetric relation is a subclass of binary relation.",
  "mergeA601": "If REL is an instance of binary relation, then if REL holds with the arguments INST1 and INST2 and REL holds with the arguments INST2 and INST1, then INST1 is equal to INST2 for every INST1 and INST2 if and only if REL is an instance of antisymmetric relation for every REL.",
  "mergeA602": "Trichotomizing relation is a subclass of binary relation.",
  "mergeA603": "If REL is an instance of binary relation, then REL holds with the arguments INST1 and INST2 or INST1 is equal to INST2 or REL holds with the arguments INST2 and INST1 for every INST1 and INST2 if and only if REL is an instance of trichotomizing relation for every REL.",
  "mergeA604": "Transitive relation is a subclass of binary relation.",
  "mergeA605": "If REL is an instance of binary relation, then if REL holds with the arguments INST1 and INST2 and REL holds with the arguments INST2 and INST3, then REL holds with the arguments INST1 and INST3 for every INST1, INST2 and INST3 if and only if REL is an instance of transitive relation for every REL.",
  "mergeA606": "Intransitive relation is a subclass of binary relation.",
  "mergeA607": "If REL is an instance of binary relation, then if REL holds with the arguments INST1 and INST2 and REL holds with the arguments INST2 and INST3, then REL does not hold with the arguments INST1 and INST3 for every INST1, INST2 and INST3 if and only if REL is an instance of intransitive relation for every REL.",
  "mergeA608": "Partial ordering relation is a subclass of transitive relation.",
  "mergeA609": "Partial ordering relation is a subclass of antisymmetric relation.",
  "mergeA610": "Partial ordering relation is a subclass of reflexive relation.",
  "mergeA611": "Total ordering relation is a subclass of partial ordering relation.",
  "mergeA612": "Total ordering relation is a subclass of trichotomizing relation.",
  "mergeA613": "If REL is an instance of binary relation, then REL holds with the arguments INST1 and INST2 or REL holds with the arguments INST2 and INST1 for every INST1 and INST2 if and only if REL is an instance of total ordering relation for every REL.",
  "mergeA614": "Equivalence relation is a subclass of transitive relation.",
  "mergeA615": "Equivalence relation is a subclass of symmetric relation.",
  "mergeA616": "Equivalence relation is a subclass of reflexive relation.",
  "mergeA617": "Case role is a subclass of binary predicate.",
  "mergeA618": "Case role is a subclass of inheritable relation.",
  "mergeA619": "Case role is a subclass of asymmetric relation.",
  "mergeA620": "The predicate involvedInEvent is an instance of binary predicate.",
  "mergeA621": "The predicate involvedInEvent is an instance of asymmetric relation.",
  "mergeA624": "If R is an instance of case role, then R is a subrelation of the predicate involvedInEvent for every R.",
  "mergeA625": "The predicate agent is an instance of case role.",
  "mergeA628": "The predicate agent is a subrelation of the predicate involvedInEvent.",
  "mergeA629": "The predicate destination is an instance of case role.",
  "mergeA632": "The predicate destination is a subrelation of the predicate involvedInEvent.",
  "mergeA633": "The predicate experiencer is an instance of case role.",
  "mergeA636": "The predicate experiencer is a subrelation of the predicate involvedInEvent.",
  "mergeA637": "The predicate instrument is a subrelation of the predicate patient.",
  "mergeA640": "The predicate origin is an instance of case role.",
  "mergeA643": "The predicate origin is a subrelation of the predicate involvedInEvent.",
  "mergeA644": "The predicate patient is an instance of case role.",
  "mergeA647": "The predicate patient is a subrelation of the predicate involvedInEvent.",
  "mergeA648": "The predicate resource is a subrelation of the predicate patient.",
  "mergeA651": "The predicate resource and the predicate result are disjoint.",
  "mergeA652": "The predicate resource and the predicate instrument are disjoint.",
  "mergeA653": "The predicate result and the predicate instrument are disjoint.",
  "mergeA654": "The predicate result is a subrelation of the predicate patient.",
  "mergeA657": "Inheritable relation is a subclass of relation.",
  "mergeA658": "Probability relation is a subclass of relation.",
  "mergeA659": "Probability relation is a subclass of inheritable relation.",
  "mergeA660": "The function ProbabilityFn is an instance of probability relation.",
  "mergeA661": "The function ProbabilityFn is an instance of total valued relation.",
  "mergeA662": "The function ProbabilityFn is an instance of unary function.",
  "mergeA665": "The function ProbabilityFn is an instance of asymmetric relation.",
  "mergeA666": "The predicate conditionalProbability is an instance of probability relation.",
  "mergeA667": "The predicate conditionalProbability is an instance of ternary predicate.",
  "mergeA671": "The predicate increasesLikelihood is an instance of probability relation.",
  "mergeA672": "The predicate increasesLikelihood is an instance of binary predicate.",
  "mergeA673": "The predicate increasesLikelihood is an instance of irreflexive relation.",
  "mergeA676": "The predicate increasesLikelihood and the predicate decreasesLikelihood are disjoint.",
  "mergeA677": "The predicate increasesLikelihood and the predicate independentProbability are disjoint.",
  "mergeA678": "The predicate decreasesLikelihood and the predicate independentProbability are disjoint.",
  "mergeA679": "If FORMULA2 is an instance of formula and FORMULA1 is an instance of formula and NUMBER1 is an instance of real number and NUMBER2 is an instance of real number and FORMULA1 increases the likelihood of FORMULA2 and the probability of FORMULA2 is equal to NUMBER1 and the probability of FORMULA2 provided that FORMULA1 holds is NUMBER2, then NUMBER2 is greater than NUMBER1 for every FORMULA1, FORMULA2, NUMBER2 and NUMBER1.",
  "mergeA680": "The predicate decreasesLikelihood is an instance of probability relation.",
  "mergeA681": "The predicate decreasesLikelihood is an instance of binary predicate.",
  "mergeA682": "The predicate decreasesLikelihood is an instance of irreflexive relation.",
  "mergeA685": "If FORMULA2 is an instance of formula and FORMULA1 is an instance of formula and NUMBER1 is an instance of real number and NUMBER2 is an instance of real number and FORMULA1 decreases the likelihood of FORMULA2 and the probability of FORMULA2 is equal to NUMBER1 and the probability of FORMULA2 provided that FORMULA1 holds is NUMBER2, then NUMBER2 is less than NUMBER1 for every FORMULA1, FORMULA2, NUMBER2 and NUMBER1.",
  "mergeA686": "The predicate independentProbability is an instance of probability relation.",
  "mergeA687": "The predicate independentProbability is an instance of binary predicate.",
  "mergeA688": "The predicate independentProbability is an instance of symmetric relation.",
  "mergeA691": "If FORMULA2 is an instance of formula and FORMULA1 is an instance of formula and NUMBER1 is an instance of real number and NUMBER2 is an instance of real number and the probabilities of FORMULA1 and FORMULA2 being true are independent and the probability of FORMULA2 is equal to NUMBER1 and the probability of FORMULA2 provided that FORMULA1 holds is NUMBER2, then NUMBER2 is equal to NUMBER1 for every FORMULA1, FORMULA2, NUMBER2 and NUMBER1.",
  "mergeA692": "If FORMULA1 is an instance of formula and FORMULA2 is an instance of formula, then FORMULA1 increases the likelihood of FORMULA2 or FORMULA1 decreases the likelihood of FORMULA2 or the probabilities of FORMULA1 and FORMULA2 being true are independent for every FORMULA1 and FORMULA2.",
  "mergeA693": "Spatial relation is a subclass of relation.",
  "mergeA694": "Spatial relation is a subclass of inheritable relation.",
  "mergeA695": "Temporal relation is a subclass of relation.",
  "mergeA696": "Temporal relation is a subclass of inheritable relation.",
  "mergeA697": "Intentional relation is a subclass of inheritable relation.",
  "mergeA698": "Intentional relation is a subclass of relation.",
  "mergeA699": "The predicate prefers is an instance of ternary predicate.",
  "mergeA700": "The predicate prefers is an instance of intentional relation.",
  "mergeA704": "Propositional attitude is a subclass of intentional relation.",
  "mergeA705": "Propositional attitude is a subclass of asymmetric relation.",
  "mergeA706": "Propositional attitude is a subclass of inheritable relation.",
  "mergeA707": "If REL is an instance of propositional attitude and REL holds with the arguments AGENT and FORMULA, then FORMULA is an instance of formula for every REL, AGENT and FORMULA.",
  "mergeA708": "Object attitude is a subclass of intentional relation.",
  "mergeA709": "Object attitude is a subclass of inheritable relation.",
  "mergeA710": "Object attitude is disjoint from propositional attitude.",
  "mergeA711": "If REL is an instance of binary relation and REL is an instance of object attitude and REL holds with the arguments AGENT and THING, then THING is an instance of physical for every REL, AGENT and THING.",
  "mergeA712": "The predicate inScopeOfInterest is an instance of binary predicate.",
  "mergeA713": "The predicate inScopeOfInterest is an instance of intentional relation.",
  "mergeA716": "If AGENT is an instance of cognitive agent, then AGENT is interested in OBJECT if and only if there is at least one PROCESS for which PROCESS is an instance of intentional process and AGENT is the agent of PROCESS and OBJECT is a participant in PROCESS for every AGENT and OBJECT.",
  "mergeA717": "The predicate needs is an instance of object attitude.",
  "mergeA718": "The predicate needs is an instance of binary predicate.",
  "mergeA719": "The predicate needs is a subrelation of the predicate inScopeOfInterest.",
  "mergeA722": "If OBJECT is an instance of physical and AGENT is an instance of cognitive agent and AGENT needs OBJECT, then AGENT wants OBJECT for every AGENT and OBJECT.",
  "mergeA723": "The predicate wants is an instance of object attitude.",
  "mergeA724": "The predicate wants is an instance of binary predicate.",
  "mergeA725": "The predicate wants is a subrelation of the predicate inScopeOfInterest.",
  "mergeA726": "The predicate wants is internally related to the predicate desires.",
  "mergeA729": "If OBJ is an instance of physical and AGENT is an instance of cognitive agent and AGENT wants OBJ, then there is at least one PURP for which PURP is an instance of formula and OBJ has the purpose of PURP for AGENT for every OBJ and AGENT.",
  "mergeA731": "The predicate desires is an instance of propositional attitude.",
  "mergeA732": "The predicate desires is an instance of binary predicate.",
  "mergeA733": "The predicate desires is a subrelation of the predicate inScopeOfInterest.",
  "mergeA734": "The predicate desires is internally related to the predicate wants.",
  "mergeA737": "The predicate considers is an instance of propositional attitude.",
  "mergeA738": "The predicate considers is an instance of binary predicate.",
  "mergeA739": "The predicate considers is a subrelation of the predicate inScopeOfInterest.",
  "mergeA742": "The predicate believes is an instance of propositional attitude.",
  "mergeA743": "The predicate believes is an instance of binary predicate.",
  "mergeA744": "The predicate believes is a subrelation of the predicate inScopeOfInterest.",
  "mergeA748": "The predicate knows is an instance of propositional attitude.",
  "mergeA749": "The predicate knows is an instance of binary predicate.",
  "mergeA750": "The predicate knows is a subrelation of the predicate inScopeOfInterest.",
  "mergeA753": "If FORMULA is an instance of formula and AGENT is an instance of cognitive agent and AGENT knows FORMULA, then AGENT believes FORMULA for every AGENT and FORMULA.",
  "mergeA754": "If FORMULA is an instance of formula and AGENT is an instance of cognitive agent and AGENT knows FORMULA, then the truth value of FORMULA is true for every AGENT and FORMULA.",
  "mergeA755": "Ternary relation is a subclass of relation.",
  "mergeA764": "Quaternary relation is a subclass of relation.",
  "mergeA775": "Quintary relation is a subclass of relation.",
  "mergeA788": "List is a subclass of relation.",
  "mergeA789": "Unique list is a subclass of list.",
  "mergeA791": "Null list is an instance of list.",
  "mergeA792": "ITEM is not in list null list for every ITEM.",
  "mergeA793": "The function ListFn is an instance of function.",
  "mergeA794": "The function ListFn is an instance of variable arity relation.",
  "mergeA796": "The function ListOrderFn is an instance of binary function.",
  "mergeA797": "The function ListOrderFn is an instance of partial valued relation.",
  "mergeA801": "The function ListLengthFn is an instance of unary function.",
  "mergeA802": "The function ListLengthFn is an instance of total valued relation.",
  "mergeA807": "The function ListConcatenateFn is an instance of binary function.",
  "mergeA808": "The function ListConcatenateFn is an instance of total valued relation.",
  "mergeA812": "The predicate inList is an instance of binary predicate.",
  "mergeA813": "The predicate inList is an instance of irreflexive relation.",
  "mergeA814": "The predicate inList is an instance of asymmetric relation.",
  "mergeA818": "The predicate subList is an instance of binary predicate.",
  "mergeA819": "The predicate subList is an instance of partial ordering relation.",
  "mergeA822": "The predicate initialList is an instance of binary predicate.",
  "mergeA823": "The predicate initialList is an instance of partial ordering relation.",
  "mergeA824": "The predicate initialList is a subrelation of the predicate subList.",
  "mergeA826": "The predicate identicalListItems is an instance of binary predicate.",
  "mergeA827": "The predicate identicalListItems is an instance of equivalence relation.",
  "mergeA830": "Predicate is a subclass of relation.",
  "mergeA831": "Function is a subclass of single valued relation.",
  "mergeA832": "Unary function is a subclass of function.",
  "mergeA833": "Unary function is a subclass of binary relation.",
  "mergeA834": "If FUNCTION is an instance of unary function, then FUNCTION has a valence of 1 for every FUNCTION.",
  "mergeA835": "One to one function is a subclass of unary function.",
  "mergeA837": "Sequence function is a subclass of one to one function.",
  "mergeA838": "If CLASS is an instance of set or class and SEQ is an instance of sequence function and the range of SEQ is an instance of CLASS, then CLASS is a subclass of integer for every SEQ and CLASS.",
  "mergeA839": "Binary function is a subclass of function.",
  "mergeA840": "Binary function is a subclass of ternary relation.",
  "mergeA841": "If FUNCTION is an instance of binary function, then FUNCTION has a valence of 2 for every FUNCTION.",
  "mergeA842": "Associative function is a subclass of binary function.",
  "mergeA844": "Commutative function is a subclass of binary function.",
  "mergeA846": "Ternary function is a subclass of function.",
  "mergeA847": "Ternary function is a subclass of quaternary relation.",
  "mergeA848": "If FUNCTION is an instance of ternary function, then FUNCTION has a valence of 3 for every FUNCTION.",
  "mergeA849": "Quaternary function is a subclass of function.",
  "mergeA850": "Quaternary function is a subclass of quintary relation.",
  "mergeA851": "If FUNCTION is an instance of quaternary function, then FUNCTION has a valence of 4 for every FUNCTION.",
  "mergeA852": "Continuous function is a subclass of function.",
  "mergeA853": "Binary predicate is a subclass of predicate.",
  "mergeA854": "Binary predicate is a subclass of binary relation.",
  "mergeA855": "If REL is an instance of binary predicate, then REL has a valence of 2 for every REL.",
  "mergeA856": "Ternary predicate is a subclass of predicate.",
  "mergeA857": "Ternary predicate is a subclass of ternary relation.",
  "mergeA858": "If REL is an instance of ternary predicate, then REL has a valence of 3 for every REL.",
  "mergeA859": "Quaternary predicate is a subclass of predicate.",
  "mergeA860": "Quaternary predicate is a subclass of quaternary relation.",
  "mergeA861": "If REL is an instance of quaternary predicate, then REL has a valence of 4 for every REL.",
  "mergeA862": "Quintary predicate is a subclass of predicate.",
  "mergeA863": "Quintary predicate is a subclass of quintary relation.",
  "mergeA864": "If REL is an instance of quintary predicate, then REL has a valence of 5 for every REL.",
  "mergeA865": "Variable arity relation is a subclass of relation.",
  "mergeA866": "If REL is an instance of variable arity relation, then INT is not an instance of positive integer or REL does not have a valence of INT for every INT for every REL.",
  "mergeA867": "Relation extended to quantities is a subclass of relation.",
  "mergeA868": "Relation extended to quantities is a subclass of inheritable relation.",
  "mergeA869": "Logical operator is a subclass of predicate.",
  "mergeA870": "Proposition is a subclass of abstract.",
  "mergeA871": "The predicate closedOn is an instance of binary predicate.",
  "mergeA872": "The predicate closedOn is an instance of asymmetric relation.",
  "mergeA877": "The predicate reflexiveOn is an instance of binary predicate.",
  "mergeA878": "The predicate reflexiveOn is an instance of asymmetric relation.",
  "mergeA881": "If CLASS is an instance of set or class and RELATION is an instance of binary relation and RELATION is reflexive on CLASS and INST is an instance of CLASS, then RELATION holds with the arguments INST and INST for every CLASS, RELATION and INST.",
  "mergeA882": "The predicate irreflexiveOn is an instance of binary predicate.",
  "mergeA883": "The predicate irreflexiveOn is an instance of asymmetric relation.",
  "mergeA886": "If CLASS is an instance of set or class and RELATION is an instance of binary relation and RELATION is irreflexive on CLASS and INST is an instance of CLASS, then RELATION does not hold with the arguments INST and INST for every CLASS, RELATION and INST.",
  "mergeA887": "The predicate partialOrderingOn is an instance of binary predicate.",
  "mergeA888": "The predicate partialOrderingOn is an instance of asymmetric relation.",
  "mergeA891": "If CLASS is an instance of set or class and RELATION is an instance of binary relation and RELATION is a partial ordering on CLASS, then RELATION is reflexive on CLASS and RELATION is an instance of transitive relation and RELATION is an instance of antisymmetric relation for every CLASS and RELATION.",
  "mergeA892": "The predicate totalOrderingOn is an instance of binary predicate.",
  "mergeA893": "The predicate totalOrderingOn is an instance of asymmetric relation.",
  "mergeA896": "If CLASS is an instance of set or class and RELATION is an instance of binary relation, then RELATION is a partial ordering on CLASS and RELATION is trichotomizing on CLASS if and only if RELATION is a total ordering on CLASS for every RELATION and CLASS.",
  "mergeA897": "The predicate trichotomizingOn is an instance of binary predicate.",
  "mergeA898": "The predicate trichotomizingOn is an instance of asymmetric relation.",
  "mergeA901": "If CLASS is an instance of set or class and RELATION is an instance of binary relation and RELATION is trichotomizing on CLASS and INST1 is an instance of CLASS and INST2 is an instance of CLASS, then RELATION holds with the arguments INST1 and INST2 or RELATION holds with the arguments INST2 and INST1 or INST1 is equal to INST2 for every CLASS, RELATION, INST1 and INST2.",
  "mergeA902": "The predicate equivalenceRelationOn is an instance of binary predicate.",
  "mergeA903": "The predicate equivalenceRelationOn is an instance of asymmetric relation.",
  "mergeA906": "If CLASS is an instance of set or class and RELATION is an instance of binary relation and RELATION is an equivalence relation on CLASS, then RELATION is an instance of transitive relation and RELATION is an instance of symmetric relation and RELATION is reflexive on CLASS for every RELATION and CLASS.",
  "mergeA907": "The predicate distributes is an instance of binary predicate.",
  "mergeA911": "The predicate relatedEvent is an instance of binary predicate.",
  "mergeA912": "The predicate relatedEvent is an instance of symmetric relation.",
  "mergeA915": "If P is an instance of process and S1 is an instance of process and S2 is an instance of process and S1 is a subprocess of P and S2 is a subprocess of P, then S1 and S2 are related events for every P, S1 and S2.",
  "mergeA916": "The predicate causes is an instance of binary predicate.",
  "mergeA917": "The predicate causes is an instance of asymmetric relation.",
  "mergeA920": "The predicate causes is internally related to the predicate causesSubclass.",
  "mergeA921": "The predicate causes is a subrelation of the predicate relatedEvent.",
  "mergeA922": "If PROC1 is an instance of process, then there is at least one PROC2 for which PROC2 is an instance of process and PROC2 causes PROC1 for every PROC1.",
  "mergeA923": "If P2 is an instance of process and P1 is an instance of process and P1 causes P2, then the time when P1 takes place occurs earlier than the time when P2 takes place for every P1 and P2.",
  "mergeA924": "The predicate causesSubclass is an instance of binary predicate.",
  "mergeA925": "The predicate causesSubclass is an instance of asymmetric relation.",
  "mergeA928": "If PROC2 is a subclass of process and PROC1 is a subclass of process and INST2 is an instance of process and PROC1 causes subclass PROC2 and INST2 is an instance of PROC2, then there is at least one INST1 for which INST1 is an instance of process and INST1 is an instance of PROC1 and INST1 causes INST2 for every PROC2, PROC1 and INST2.",
  "mergeA929": "The predicate causesProposition is an instance of binary predicate.",
  "mergeA930": "The predicate causesProposition is an instance of asymmetric relation.",
  "mergeA933": "If SIT2 is an instance of formula and SIT1 is an instance of formula and SIT2 holds during T2 and SIT1 holds during T1 and T1 is an instance of time interval and T2 is an instance of time interval and SIT1 causes proposition SIT2, then the beginning of the interval T1 occurs before or at the beginning of the interval T2 for every SIT1, SIT2, T1 and T2.",
  "mergeA934": "The predicate copy is an instance of binary predicate.",
  "mergeA935": "The predicate copy is an instance of equivalence relation.",
  "mergeA938": "If OBJ2 is an instance of object and OBJ1 is an instance of object and ATTR is an instance of attribute and OBJ1 is a exact copy of OBJ2 and OBJ1 has the attribute ATTR, then OBJ2 has the attribute ATTR for every OBJ1, OBJ2 and ATTR.",
  "mergeA939": "The predicate time is an instance of binary predicate.",
  "mergeA940": "The predicate time is an instance of temporal relation.",
  "mergeA941": "The predicate time is an instance of asymmetric relation.",
  "mergeA944": "The predicate time is internally related to the predicate located.",
  "mergeA945": "The predicate time is internally related to the predicate holdsDuring.",
  "mergeA946": "The predicate holdsDuring is an instance of binary predicate.",
  "mergeA947": "The predicate holdsDuring is an instance of asymmetric relation.",
  "mergeA950": "If SITUATION1 is an instance of formula and TIME is an instance of time position and SITUATION2 is an instance of formula and SITUATION1 holds during TIME and SITUATION1 entails SITUATION2, then SITUATION2 holds during TIME for every SITUATION1, TIME and SITUATION2.",
  "mergeA952": "The predicate capability is an instance of ternary predicate.",
  "mergeA956": "If ARG2 is an instance of object and ROLE is an instance of case role and ROLE holds with the arguments ARG1 and ARG2 and ARG1 is an instance of PROC and PROC is a subclass of process, then ARG2 is capable to do PROC in role ROLE for every ARG1, PROC, ROLE and ARG2.",
  "mergeA957": "The predicate exploits is an instance of binary predicate.",
  "mergeA958": "The predicate exploits is an instance of asymmetric relation.",
  "mergeA961": "If AGENT is an instance of agent and OBJ is an instance of object and OBJ exploits AGENT, then there is at least one PROCESS for which PROCESS is an instance of process and AGENT is the agent of PROCESS and OBJ is a resource for PROCESS for every AGENT and OBJ.",
  "mergeA962": "The predicate hasPurpose is an instance of binary predicate.",
  "mergeA963": "The predicate hasPurpose is an instance of asymmetric relation.",
  "mergeA966": "The predicate hasPurposeForAgent is an instance of ternary predicate.",
  "mergeA970": "If PURPOSE is an instance of formula and THING is an instance of physical and THING has the purpose of PURPOSE, then there is at least one AGENT for which AGENT is an instance of cognitive agent and THING has the purpose of PURPOSE for AGENT for every THING and PURPOSE.",
  "mergeA971": "The predicate hasSkill is an instance of binary predicate.",
  "mergeA972": "The predicate hasSkill is an instance of asymmetric relation.",
  "mergeA975": "If AGENT is an instance of agent and PROC is a subclass of process and PROC has the skill to do AGENT, then AGENT is capable to do PROC in role the predicate agent for every PROC and AGENT.",
  "mergeA976": "The predicate confersNorm is an instance of ternary predicate.",
  "mergeA981": "The predicate deprivesNorm is an instance of ternary predicate.",
  "mergeA982": "The predicate deprivesNorm and the predicate confersNorm are disjoint.",
  "mergeA987": "The predicate partlyLocated is an instance of spatial relation.",
  "mergeA988": "The predicate partlyLocated is an instance of binary predicate.",
  "mergeA991": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is partly located at OBJ2, then OBJ1 overlaps with OBJ2  for every OBJ1 and OBJ2.",
  "mergeA992": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is partly located at OBJ2, then there is at least one SUB for which SUB is an instance of object and SUB is a part of OBJ1 and SUB is located at OBJ2 for every OBJ1 and OBJ2.",
  "mergeA993": "The predicate located is an instance of antisymmetric relation.",
  "mergeA994": "The predicate located is an instance of transitive relation.",
  "mergeA995": "The predicate located is a subrelation of the predicate partlyLocated.",
  "mergeA996": "If OBJ2 is an instance of object and OBJ1 is an instance of object and SUB is an instance of object and OBJ1 is located at OBJ2 and SUB is a part of OBJ1, then SUB is located at OBJ2 for every OBJ1, OBJ2 and SUB.",
  "mergeA997": "The predicate eventPartlyLocated is an instance of case role.",
  "mergeA998": "The predicate eventPartlyLocated is a subrelation of the predicate partlyLocated.",
  "mergeA1001": "If OBJ is an instance of object and PROC is an instance of process and the process PROC is partly located on OBJ, then there is at least one SUB for which SUB is an instance of process and SUB is a subprocess of PROC and the entire process SUB is located on OBJ for every PROC and OBJ.",
  "mergeA1002": "If LOC is an instance of object and PROCESS is an instance of process and LOC is the origin of PROCESS, then the process PROCESS is partly located on LOC for every PROCESS and LOC.",
  "mergeA1003": "If LOC is an instance of object and PROCESS is an instance of process and PROCESS ends at LOC, then the process PROCESS is partly located on LOC for every PROCESS and LOC.",
  "mergeA1004": "The predicate eventLocated is a subrelation of the predicate eventPartlyLocated.",
  "mergeA1005": "If OBJ is an instance of object and PROCESS is an instance of process and SUB is an instance of process and the entire process PROCESS is located on OBJ and SUB is a subprocess of PROCESS, then the entire process SUB is located on OBJ for every PROCESS, OBJ and SUB.",
  "mergeA1006": "The predicate exactlyLocated is a subrelation of the predicate located.",
  "mergeA1007": "If REGION is an instance of object and OBJ is an instance of physical and OBJ is exactly located at REGION, then OTHEROBJ is not an instance of physical or OTHEROBJ is not exactly located at REGION or OTHEROBJ is equal to OBJ for every OTHEROBJ for every REGION and OBJ.",
  "mergeA1008": "The predicate between is an instance of spatial relation.",
  "mergeA1009": "The predicate between is an instance of ternary predicate.",
  "mergeA1013": "If END2 is an instance of object and MID is an instance of object and END1 is an instance of object and MID is between END1 and END2, then MID is between END2 and END1 for every END2, MID and END1.",
  "mergeA1014": "The predicate betweenOnPath is an instance of spatial relation.",
  "mergeA1015": "The predicate betweenOnPath is an instance of quaternary predicate.",
  "mergeA1020": "If PATH is an instance of object and OBJ3 is an instance of object and OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ2 is located between OBJ1 and OBJ3 on the path PATH, then OBJ2 is between OBJ1 and OBJ3 for every PATH, OBJ1, OBJ2 and OBJ3.",
  "mergeA1021": "The predicate traverses is an instance of binary predicate.",
  "mergeA1022": "The predicate traverses is an instance of spatial relation.",
  "mergeA1025": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 traverses OBJ2, then OBJ1 crosses OBJ2 or OBJ1 penetrates OBJ2 for every OBJ1 and OBJ2.",
  "mergeA1026": "The predicate crosses is a subrelation of the predicate traverses.",
  "mergeA1027": "The predicate crosses is an instance of asymmetric relation.",
  "mergeA1028": "The predicate crosses is an instance of transitive relation.",
  "mergeA1029": "The predicate crosses and the predicate connected are disjoint.",
  "mergeA1030": "The predicate penetrates is a subrelation of the predicate traverses.",
  "mergeA1031": "The predicate penetrates is a subrelation of the predicate meetsSpatially.",
  "mergeA1032": "The predicate penetrates is an instance of asymmetric relation.",
  "mergeA1033": "The predicate penetrates is an instance of intransitive relation.",
  "mergeA1034": "The function WhereFn is an instance of binary function.",
  "mergeA1035": "The function WhereFn is an instance of spatial relation.",
  "mergeA1036": "The function WhereFn is an instance of total valued relation.",
  "mergeA1040": "The function WhereFn is internally related to the function WhenFn.",
  "mergeA1042": "The predicate possesses is an instance of binary predicate.",
  "mergeA1043": "The predicate possesses is an instance of asymmetric relation.",
  "mergeA1048": "The function PropertyFn is an instance of unary function.",
  "mergeA1049": "The function PropertyFn is an instance of total valued relation.",
  "mergeA1053": "The predicate precondition is an instance of binary predicate.",
  "mergeA1054": "The predicate precondition is an instance of asymmetric relation.",
  "mergeA1055": "The predicate precondition is an instance of transitive relation.",
  "mergeA1058": "If PROC2 is a subclass of process and PROC1 is a subclass of process and PROC1 is a precondition of PROC2 and there is at least one INST2 for which INST2 is an instance of PROC2, then there is at least one INST1 for which INST1 is an instance of PROC1 for every PROC2 and PROC1.",
  "mergeA1059": "The predicate hindersSubclass is an instance of binary predicate.",
  "mergeA1060": "The predicate hindersSubclass is an instance of irreflexive relation.",
  "mergeA1064": "The predicate preventsSubclass is an instance of binary predicate.",
  "mergeA1065": "The predicate preventsSubclass is an instance of irreflexive relation.",
  "mergeA1068": "The predicate preventsSubclass is internally related to the predicate hindersSubclass.",
  "mergeA1070": "The predicate prevents is an instance of binary predicate.",
  "mergeA1071": "The predicate prevents is an instance of irreflexive relation.",
  "mergeA1074": "The predicate prevents is internally related to the predicate preventsSubclass.",
  "mergeA1075": "The predicate prevents is internally related to the predicate hinders.",
  "mergeA1077": "The predicate hinders is an instance of binary predicate.",
  "mergeA1078": "The predicate hinders is an instance of irreflexive relation.",
  "mergeA1081": "The predicate hinders is internally related to the predicate hindersSubclass.",
  "mergeA1083": "The predicate refers is an instance of binary predicate.",
  "mergeA1086": "The predicate names is a subrelation of the predicate refers.",
  "mergeA1088": "The predicate uniqueIdentifier is a subrelation of the predicate names.",
  "mergeA1089": "The predicate uniqueIdentifier is an instance of single valued relation.",
  "mergeA1090": "The predicate represents is a subrelation of the predicate refers.",
  "mergeA1091": "The predicate representsForAgent is an instance of ternary predicate.",
  "mergeA1095": "If AGENT is an instance of agent and AGENT uses ENTITY to represent REP, then REP represents ENTITY for every AGENT, REP and ENTITY.",
  "mergeA1096": "The predicate representsInLanguage is an instance of ternary predicate.",
  "mergeA1100": "If LANGUAGE is an instance of language and REP is an instance of linguistic expression and REP represents ENTITY in the language LANGUAGE, then there is at least one AGENT for which AGENT is an instance of agent and AGENT uses ENTITY to represent REP for every LANGUAGE, REP and ENTITY.",
  "mergeA1101": "The predicate equivalentContentClass is a subrelation of the predicate subsumesContentClass.",
  "mergeA1102": "The predicate equivalentContentClass is an instance of equivalence relation.",
  "mergeA1105": "If CLASS2 is a subclass of content bearing physical and CLASS1 is a subclass of content bearing physical, then CLASS1 is equivalent to CLASS2 if and only if CLASS1 subsumes the content of CLASS2 and CLASS2 subsumes the content of CLASS1 for every CLASS1 and CLASS2.",
  "mergeA1106": "The predicate subsumesContentClass is an instance of binary predicate.",
  "mergeA1107": "The predicate subsumesContentClass is an instance of partial ordering relation.",
  "mergeA1110": "If CLASS2 is a subclass of content bearing physical and CLASS1 is a subclass of content bearing physical and OBJ2 is an instance of content bearing physical and INFO is an instance of proposition and CLASS1 subsumes the content of CLASS2 and OBJ2 is an instance of CLASS2 and OBJ2 contains information INFO, then there is at least one OBJ1 for which OBJ1 is an instance of content bearing physical and OBJ1 is an instance of CLASS1 and OBJ1 contains information INFO for every CLASS2, CLASS1, OBJ2 and INFO.",
  "mergeA1111": "The predicate equivalentContentInstance is a subrelation of the predicate subsumesContentInstance.",
  "mergeA1112": "The predicate equivalentContentInstance is an instance of equivalence relation.",
  "mergeA1115": "The predicate equivalentContentInstance is internally related to the predicate equivalentContentClass.",
  "mergeA1116": "If OBJ2 is an instance of content bearing physical and OBJ1 is an instance of content bearing physical, then OBJ1 is equivalent to OBJ2 if and only if OBJ1 subsumes the content of OBJ2 and OBJ2 subsumes the content of OBJ1 for every OBJ1 and OBJ2.",
  "mergeA1117": "The predicate subsumesContentInstance is an instance of binary predicate.",
  "mergeA1118": "The predicate subsumesContentInstance is an instance of partial ordering relation.",
  "mergeA1121": "The predicate subsumesContentInstance is internally related to the predicate subsumesContentClass.",
  "mergeA1122": "If OBJ2 is an instance of content bearing physical and OBJ1 is an instance of content bearing physical and INFO is an instance of proposition and OBJ1 subsumes the content of OBJ2 and OBJ2 contains information INFO, then OBJ1 contains information INFO for every OBJ2, OBJ1 and INFO.",
  "mergeA1123": "The predicate realization is a subrelation of the predicate represents.",
  "mergeA1124": "The predicate realization is an instance of asymmetric relation.",
  "mergeA1127": "The predicate realization is internally related to the predicate equivalentContentInstance.",
  "mergeA1128": "The predicate realization is internally related to the predicate containsInformation.",
  "mergeA1129": "If PROP is an instance of proposition and PROCESS is an instance of process and PROCESS realizes the content of PROP, then there is at least one OBJ for which OBJ is an instance of content bearing object and OBJ contains information PROP for every PROCESS and PROP.",
  "mergeA1130": "The predicate expressedInLanguage is an instance of binary predicate.",
  "mergeA1131": "The predicate expressedInLanguage is an instance of asymmetric relation.",
  "mergeA1134": "If LANGUAGE is an instance of language and EXPRESS is an instance of linguistic expression, then there is at least one PROP for which EXPRESS represents PROP in the language LANGUAGE if and only if EXPRESS is expressed in the language LANGUAGE for every EXPRESS and LANGUAGE.",
  "mergeA1135": "The predicate subProposition is an instance of binary predicate.",
  "mergeA1136": "The predicate subProposition is an instance of transitive relation.",
  "mergeA1137": "The predicate subProposition is an instance of irreflexive relation.",
  "mergeA1140": "If PROP2 is an instance of proposition and PROP1 is an instance of proposition and OBJ1 is an instance of content bearing physical and OBJ2 is an instance of content bearing physical and PROP1 is a sub-proposition of PROP2 and OBJ1 contains information PROP1 and OBJ2 contains information PROP2, then OBJ2 subsumes the content of OBJ1 for every PROP1, PROP2, OBJ1 and OBJ2.",
  "mergeA1141": "The predicate subPlan is a subrelation of the predicate subProposition.",
  "mergeA1142": "The predicate subPlan is an instance of transitive relation.",
  "mergeA1143": "The predicate subPlan is an instance of irreflexive relation.",
  "mergeA1146": "The predicate uses is an instance of binary predicate.",
  "mergeA1147": "The predicate uses is an instance of asymmetric relation.",
  "mergeA1150": "If AGENT is an instance of agent and OBJ is an instance of object and OBJ uses AGENT, then there is at least one PROC for which PROC is an instance of process and AGENT is the agent of PROC and OBJ is an instrument for PROC for every AGENT and OBJ.",
  "mergeA1151": "The function MultiplicationFn is an instance of binary function.",
  "mergeA1152": "The function MultiplicationFn is an instance of associative function.",
  "mergeA1153": "The function MultiplicationFn is an instance of commutative function.",
  "mergeA1154": "The function MultiplicationFn is an instance of relation extended to quantities.",
  "mergeA1155": "The function MultiplicationFn is an instance of total valued relation.",
  "mergeA1159": "The function AdditionFn is an instance of binary function.",
  "mergeA1160": "The function AdditionFn is an instance of associative function.",
  "mergeA1161": "The function AdditionFn is an instance of commutative function.",
  "mergeA1162": "The function AdditionFn is an instance of relation extended to quantities.",
  "mergeA1163": "The function AdditionFn is an instance of total valued relation.",
  "mergeA1167": "If NUMBER is an instance of integer, then the successor of NUMBER is equal to NUMBER plus 1 for every NUMBER.",
  "mergeA1168": "The function SubtractionFn is an instance of binary function.",
  "mergeA1169": "The function SubtractionFn is an instance of associative function.",
  "mergeA1170": "The function SubtractionFn is an instance of relation extended to quantities.",
  "mergeA1171": "The function SubtractionFn is an instance of total valued relation.",
  "mergeA1175": "If NUMBER is an instance of integer, then the predecessor of NUMBER is equal to NUMBER minus 1 for every NUMBER.",
  "mergeA1176": "The function DivisionFn is an instance of binary function.",
  "mergeA1177": "The function DivisionFn is an instance of associative function.",
  "mergeA1178": "The function DivisionFn is an instance of relation extended to quantities.",
  "mergeA1179": "The function DivisionFn is an instance of partial valued relation.",
  "mergeA1183": "If NUMBER is an instance of rational number, then there is at least one INT1 and INT2 for which INT1 is an instance of integer and INT2 is an instance of integer and NUMBER is equal to INT1 divided by INT2 for every NUMBER.",
  "mergeA1184": "The function AbsoluteValueFn is an instance of unary function.",
  "mergeA1185": "The function AbsoluteValueFn is an instance of total valued relation.",
  "mergeA1188": "If NUMBER1 is an instance of real number and NUMBER2 is an instance of nonnegative real number, then NUMBER1 is an instance of nonnegative real number and NUMBER1 is equal to NUMBER2 or NUMBER1 is an instance of negative real number and NUMBER2 is equal to 0 minus NUMBER1 if and only if the absolute value of NUMBER1 is equal to NUMBER2 and NUMBER1 is an instance of real number and NUMBER2 is an instance of real number for every NUMBER2 and NUMBER1.",
  "mergeA1189": "The function CeilingFn is an instance of unary function.",
  "mergeA1190": "The function CeilingFn is an instance of total valued relation.",
  "mergeA1193": "If NUMBER is an instance of real number and INT is an instance of integer and the smallest integer greater than or equal to NUMBER is equal to INT, then OTHERINT is not an instance of quantity or OTHERINT is not an instance of integer or OTHERINT is not greater than or equal to NUMBER or OTHERINT is not less than INT for every OTHERINT for every NUMBER and INT.",
  "mergeA1194": "The function CosineFn is an instance of unary function.",
  "mergeA1195": "The function CosineFn is an instance of total valued relation.",
  "mergeA1198": "The function DenominatorFn is an instance of unary function.",
  "mergeA1199": "The function DenominatorFn is an instance of total valued relation.",
  "mergeA1202": "The function ExponentiationFn is an instance of binary function.",
  "mergeA1203": "The function ExponentiationFn is an instance of relation extended to quantities.",
  "mergeA1204": "The function ExponentiationFn is an instance of total valued relation.",
  "mergeA1208": "The function FloorFn is an instance of unary function.",
  "mergeA1209": "The function FloorFn is an instance of total valued relation.",
  "mergeA1212": "If NUMBER is an instance of real number and INT is an instance of integer and the largest integer less than or equal to NUMBER is equal to INT, then OTHERINT is not an instance of quantity or OTHERINT is not an instance of integer or OTHERINT is not less than or equal to NUMBER or OTHERINT is not greater than INT for every OTHERINT for every NUMBER and INT.",
  "mergeA1213": "The function GreatestCommonDivisorFn is an instance of function.",
  "mergeA1214": "The function GreatestCommonDivisorFn is an instance of variable arity relation.",
  "mergeA1215": "The function GreatestCommonDivisorFn is an instance of partial valued relation.",
  "mergeA1219": "The predicate multiplicativeFactor is an instance of binary predicate.",
  "mergeA1220": "The predicate multiplicativeFactor is an instance of transitive relation.",
  "mergeA1223": "If N2 is an instance of integer and N1 is an instance of integer and N1 is a multiplicative factor of N2, then there is at least one I for which I is an instance of integer and N2 is equal to N1 multiplied by I for every N2 and N1.",
  "mergeA1224": "The function ImaginaryPartFn is an instance of unary function.",
  "mergeA1225": "The function ImaginaryPartFn is an instance of total valued relation.",
  "mergeA1228": "The function IntegerSquareRootFn is an instance of unary function.",
  "mergeA1229": "The function IntegerSquareRootFn is an instance of partial valued relation.",
  "mergeA1232": "The function LeastCommonMultipleFn is an instance of function.",
  "mergeA1233": "The function LeastCommonMultipleFn is an instance of partial valued relation.",
  "mergeA1234": "The function LeastCommonMultipleFn is an instance of variable arity relation.",
  "mergeA1238": "The function LogFn is an instance of binary function.",
  "mergeA1242": "The function MaxFn is an instance of binary function.",
  "mergeA1243": "The function MaxFn is an instance of associative function.",
  "mergeA1244": "The function MaxFn is an instance of commutative function.",
  "mergeA1245": "The function MaxFn is an instance of relation extended to quantities.",
  "mergeA1246": "The function MaxFn is an instance of total valued relation.",
  "mergeA1250": "If NUMBER2 is an instance of quantity and NUMBER1 is an instance of quantity and NUMBER is an instance of quantity and the larger of NUMBER1 and NUMBER2 is equal to NUMBER, then NUMBER is equal to NUMBER1 and NUMBER1 is greater than NUMBER2 or NUMBER is equal to NUMBER2 and NUMBER2 is greater than NUMBER1 or NUMBER is equal to NUMBER1 and NUMBER is equal to NUMBER2 for every NUMBER1, NUMBER and NUMBER2.",
  "mergeA1251": "The function MinFn is an instance of binary function.",
  "mergeA1252": "The function MinFn is an instance of associative function.",
  "mergeA1253": "The function MinFn is an instance of commutative function.",
  "mergeA1254": "The function MinFn is an instance of relation extended to quantities.",
  "mergeA1255": "The function MinFn is an instance of total valued relation.",
  "mergeA1259": "If NUMBER2 is an instance of quantity and NUMBER1 is an instance of quantity and NUMBER is an instance of quantity and the smaller of NUMBER1 and NUMBER2 is equal to NUMBER, then NUMBER is equal to NUMBER1 and NUMBER1 is less than NUMBER2 or NUMBER is equal to NUMBER2 and NUMBER2 is less than NUMBER1 or NUMBER is equal to NUMBER1 and NUMBER is equal to NUMBER2 for every NUMBER1, NUMBER and NUMBER2.",
  "mergeA1260": "The function NumeratorFn is an instance of unary function.",
  "mergeA1261": "The function NumeratorFn is an instance of total valued relation.",
  "mergeA1264": "Pi is an instance of positive real number.",
  "mergeA1265": "Number e is an instance of positive real number.",
  "mergeA1266": "The function RationalNumberFn is an instance of unary function.",
  "mergeA1269": "The function RealNumberFn is an instance of unary function.",
  "mergeA1272": "The function ReciprocalFn is an instance of unary function.",
  "mergeA1273": "The function ReciprocalFn is an instance of relation extended to quantities.",
  "mergeA1274": "The function ReciprocalFn is an instance of total valued relation.",
  "mergeA1277": "If NUMBER is an instance of quantity, then 1 is equal to NUMBER multiplied by the reciprocal element of NUMBER for every NUMBER.",
  "mergeA1278": "The function RemainderFn is an instance of binary function.",
  "mergeA1279": "The function RemainderFn is an instance of relation extended to quantities.",
  "mergeA1280": "The function RemainderFn is an instance of partial valued relation.",
  "mergeA1284": "If NUMBER2 is an instance of quantity and NUMBER1 is an instance of quantity and NUMBER is an instance of quantity, then the largest integer less than or equal to NUMBER1 divided by NUMBER2 multiplied by NUMBER2 plus NUMBER is equal to NUMBER1 if and only if the remainder of NUMBER1 divided by NUMBER2 is equal to NUMBER for every NUMBER2, NUMBER and NUMBER1.",
  "mergeA1285": "If NUMBER2 is an instance of real number and NUMBER1 is an instance of quantity and NUMBER is an instance of real number and the remainder of NUMBER1 divided by NUMBER2 is equal to NUMBER, then the sign of NUMBER2 is equal to the sign of NUMBER for every NUMBER1, NUMBER2 and NUMBER.",
  "mergeA1286": "If NUMBER is an instance of even integer, then the remainder of NUMBER divided by 2 is equal to 0 for every NUMBER.",
  "mergeA1287": "If NUMBER is an instance of odd integer, then the remainder of NUMBER divided by 2 is equal to 1 for every NUMBER.",
  "mergeA1288": "If PRIME is an instance of prime number and NUMBER is an instance of quantity and the remainder of PRIME divided by NUMBER is equal to 0, then NUMBER is equal to 1 or NUMBER is equal to PRIME for every PRIME and NUMBER.",
  "mergeA1289": "The function RoundFn is an instance of unary function.",
  "mergeA1290": "The function RoundFn is an instance of relation extended to quantities.",
  "mergeA1291": "The function RoundFn is an instance of total valued relation.",
  "mergeA1294": "The function SignumFn is an instance of unary function.",
  "mergeA1295": "The function SignumFn is an instance of total valued relation.",
  "mergeA1298": "If NUMBER is an instance of nonnegative real number, then the sign of NUMBER is equal to 1 or the sign of NUMBER is equal to 0 for every NUMBER.",
  "mergeA1299": "If NUMBER is an instance of positive real number, then the sign of NUMBER is equal to 1 for every NUMBER.",
  "mergeA1300": "The function SineFn is an instance of unary function.",
  "mergeA1301": "The function SineFn is an instance of total valued relation.",
  "mergeA1304": "The function SquareRootFn is an instance of unary function.",
  "mergeA1307": "If NUMBER1 is an instance of real number and NUMBER2 is an instance of number and the square root of NUMBER1 is equal to NUMBER2, then NUMBER2 multiplied by NUMBER2 is equal to NUMBER1 for every NUMBER2 and NUMBER1.",
  "mergeA1308": "The function TangentFn is an instance of unary function.",
  "mergeA1309": "The function TangentFn is an instance of total valued relation.",
  "mergeA1312": "If DEGREE is an instance of plane angle measure, then the tangent of DEGREE is equal to the sine of DEGREE divided by the cosine of DEGREE for every DEGREE.",
  "mergeA1313": "The predicate identityElement is an instance of binary predicate.",
  "mergeA1314": "The predicate identityElement is an instance of asymmetric relation.",
  "mergeA1318": "1 is the identity element of the function MultiplicationFn.",
  "mergeA1319": "0 is the identity element of the function AdditionFn.",
  "mergeA1320": "0 is the identity element of the function SubtractionFn.",
  "mergeA1321": "1 is the identity element of the function DivisionFn.",
  "mergeA1322": "The function SuccessorFn is an instance of unary function.",
  "mergeA1323": "The function SuccessorFn is an instance of total valued relation.",
  "mergeA1326": "If INT1 is an instance of integer and INT2 is an instance of integer and the successor of INT1 is equal to the successor of INT2, then INT1 is equal to INT2 for every INT1 and INT2.",
  "mergeA1327": "If INT is an instance of integer, then INT is less than the successor of INT for every INT.",
  "mergeA1328": "If INT1 is an instance of integer and INT2 is an instance of integer, then INT1 is not less than INT2 or INT2 is not less than the successor of INT1 for every INT2 and INT1.",
  "mergeA1329": "If INT is an instance of integer, then INT is equal to the successor of the predecessor of INT for every INT.",
  "mergeA1330": "If INT is an instance of integer, then INT is equal to the predecessor of the successor of INT for every INT.",
  "mergeA1331": "The function PredecessorFn is an instance of unary function.",
  "mergeA1332": "The function PredecessorFn is an instance of total valued relation.",
  "mergeA1335": "If INT1 is an instance of integer and INT2 is an instance of integer and the predecessor of INT1 is equal to the predecessor of INT2, then INT1 is equal to INT2 for every INT1 and INT2.",
  "mergeA1336": "If INT is an instance of integer, then INT is greater than the predecessor of INT for every INT.",
  "mergeA1337": "If INT1 is an instance of integer and INT2 is an instance of integer, then INT2 is not less than INT1 or the predecessor of INT1 is not less than INT2 for every INT1 and INT2.",
  "mergeA1338": "The predicate average is an instance of partial valued relation.",
  "mergeA1339": "The predicate average is an instance of binary predicate.",
  "mergeA1340": "The predicate average is an instance of single valued relation.",
  "mergeA1343": "If AVERAGE is an instance of real number and LIST is an instance of list and AVERAGE is the average of LIST and LISTITEM is in list LIST, then LISTITEM is an instance of real number for every AVERAGE, LIST and LISTITEM.",
  "mergeA1344": "The predicate subset is a subrelation of the predicate subclass.",
  "mergeA1347": "If SET is an instance of set and SUBSET is an instance of set and SUBSET is a subset of SET and ELEMENT is an element of SUBSET, then ELEMENT is an element of SET for every SUBSET, SET and ELEMENT.",
  "mergeA1348": "The predicate element is an instance of binary predicate.",
  "mergeA1349": "The predicate element is an instance of asymmetric relation.",
  "mergeA1350": "The predicate element is a subrelation of the predicate instance.",
  "mergeA1353": "If SET1 is an instance of set and SET2 is an instance of set and ELEMENT is an element of SET2 if and only if ELEMENT is an element of SET1 for every ELEMENT, then SET1 is equal to SET2 for every SET1 and SET2.",
  "mergeA1354": "The function UnionFn is an instance of binary function.",
  "mergeA1355": "The function UnionFn is an instance of total valued relation.",
  "mergeA1359": "The function IntersectionFn is an instance of binary function.",
  "mergeA1360": "The function IntersectionFn is an instance of total valued relation.",
  "mergeA1364": "The function RelativeComplementFn is an instance of binary function.",
  "mergeA1365": "The function RelativeComplementFn is an instance of total valued relation.",
  "mergeA1369": "The function ComplementFn is an instance of unary function.",
  "mergeA1370": "The function ComplementFn is an instance of total valued relation.",
  "mergeA1373": "The function GeneralizedUnionFn is an instance of unary function.",
  "mergeA1374": "The function GeneralizedUnionFn is an instance of total valued relation.",
  "mergeA1377": "The function GeneralizedIntersectionFn is an instance of unary function.",
  "mergeA1378": "The function GeneralizedIntersectionFn is an instance of total valued relation.",
  "mergeA1381": "The function CardinalityFn is an instance of unary function.",
  "mergeA1382": "The function CardinalityFn is an instance of total valued relation.",
  "mergeA1383": "The function CardinalityFn is an instance of asymmetric relation.",
  "mergeA1386": "Null set is a subclass of set or class.",
  "mergeA1387": "If SET is an instance of null set, then INST is not an instance of SET for every INST for every SET.",
  "mergeA1388": "Non null set is a subclass of set or class.",
  "mergeA1389": "If SET is an instance of non null set, then there is at least one INST for which INST is an instance of SET for every SET.",
  "mergeA1390": "Finite set is a subclass of set.",
  "mergeA1391": "If SET is an instance of finite set, then there is at least one NUMBER for which NUMBER is an instance of nonnegative integer and NUMBER is equal to the cardinality of SET for every SET.",
  "mergeA1392": "Pairwise disjoint class is a subclass of set or class.",
  "mergeA1393": "If SUPERCLASS is an instance of pairwise disjoint class and CLASS1 is an instance of SUPERCLASS and CLASS2 is an instance of SUPERCLASS, then CLASS1 is equal to CLASS2 or CLASS1 is disjoint from CLASS2 for every SUPERCLASS, CLASS1 and CLASS2.",
  "mergeA1394": "Mutually disjoint class is a subclass of set or class.",
  "mergeA1395": "If CLASS is an instance of mutually disjoint class and INST1 is an instance of CLASS and INST2 is an instance of INST1, then there is at least one INST3 for which INST3 is an instance of CLASS and INST2 is not an instance of INST3 for every CLASS, INST1 and INST2.",
  "mergeA1396": "The function KappaFn is an instance of binary function.",
  "mergeA1400": "Graph is a subclass of abstract.",
  "mergeA1401": "If GRAPH is an instance of graph and NODE1 is an instance of graph node and NODE2 is an instance of graph node and NODE1 is part of the graph GRAPH and NODE2 is part of the graph GRAPH and NODE1 is not equal to NODE2, then there is at least one ARC and PATH for which ARC is an instance of graph arc and PATH is an instance of graph path and ARC links NODE1 and NODE2 or PATH is a subgraph of GRAPH and PATH is an instance of graph path and the beginning of PATH is equal to NODE1 and the end of PATH is equal to NODE2 or the beginning of PATH is equal to NODE2 and the end of PATH is equal to NODE1 for every GRAPH, NODE2 and NODE1.",
  "mergeA1402": "If GRAPH is an instance of graph, then there is at least one NODE1, NODE2, NODE3, ARC1 and ARC2 for which NODE1 is an instance of graph node and NODE2 is an instance of graph node and NODE3 is an instance of graph node and ARC1 is an instance of graph arc and ARC2 is an instance of graph arc and NODE1 is part of the graph GRAPH and NODE2 is part of the graph GRAPH and NODE3 is part of the graph GRAPH and ARC1 is part of the graph GRAPH and ARC2 is part of the graph GRAPH and ARC1 links NODE1 and NODE2 and ARC2 links NODE2 and NODE3 and NODE1 is not equal to NODE2 and NODE2 is not equal to NODE3 and NODE1 is not equal to NODE3 and ARC1 is not equal to ARC2 for every GRAPH.",
  "mergeA1403": "Directed graph is a subclass of graph.",
  "mergeA1404": "Tree is a subclass of directed graph.",
  "mergeA1405": "If GRAPH is an instance of tree, then LOOP is not an instance of graph element or LOOP is not an instance of graph loop or LOOP is not part of the graph GRAPH for every LOOP for every GRAPH.",
  "mergeA1406": "If GRAPH is an instance of tree, then LOOP is not an instance of graph element or LOOP is not an instance of graph circuit or LOOP is not part of the graph GRAPH for every LOOP for every GRAPH.",
  "mergeA1407": "If GRAPH is an instance of tree, then ARC1 is not an instance of graph arc or ARC2 is not an instance of graph arc or NODE is not an instance of graph node or ARC1 is not part of the graph GRAPH or ARC2 is not part of the graph GRAPH or NODE is not part of the graph GRAPH or the terminal node of ARC1 is not equal to NODE or the terminal node of ARC2 is not equal to NODE or ARC1 is equal to ARC2 for every ARC1, ARC2 and NODE for every GRAPH.",
  "mergeA1408": "Graph path is a subclass of directed graph.",
  "mergeA1409": "If NODE is an instance of graph node and GRAPH is an instance of graph path and ARC is an instance of graph arc and ARC is part of the graph GRAPH and the starting node of ARC is equal to NODE, then OTHER is not an instance of graph arc or the starting node of OTHER is not equal to NODE or OTHER is equal to ARC for every OTHER for every GRAPH, NODE and ARC.",
  "mergeA1410": "If NODE is an instance of graph node and GRAPH is an instance of graph path and ARC is an instance of graph arc and ARC is part of the graph GRAPH and the terminal node of ARC is equal to NODE, then OTHER is not an instance of graph arc or the terminal node of OTHER is not equal to NODE or OTHER is equal to ARC for every OTHER for every GRAPH, NODE and ARC.",
  "mergeA1411": "Graph circuit is a subclass of graph path.",
  "mergeA1412": "If GRAPH is an instance of graph path, then there is at least one NODE for which NODE is an instance of graph node and the beginning of GRAPH is equal to NODE and the end of GRAPH is equal to NODE if and only if GRAPH is an instance of graph circuit for every GRAPH.",
  "mergeA1413": "Multi graph is a subclass of graph.",
  "mergeA1414": "If GRAPH is an instance of graph, then there is at least one ARC1, ARC2, NODE1 and NODE2 for which ARC1 is an instance of graph arc and ARC2 is an instance of graph arc and NODE1 is an instance of graph node and NODE2 is an instance of graph node and ARC1 is part of the graph GRAPH and ARC2 is part of the graph GRAPH and NODE1 is part of the graph GRAPH and NODE2 is part of the graph GRAPH and ARC1 links NODE1 and NODE2 and ARC2 links NODE1 and NODE2 and ARC1 is not equal to ARC2 if and only if GRAPH is an instance of multi graph for every GRAPH.",
  "mergeA1415": "Pseudo graph is a subclass of graph.",
  "mergeA1416": "If GRAPH is an instance of graph, then there is at least one LOOP for which LOOP is an instance of graph loop and LOOP is part of the graph GRAPH if and only if GRAPH is an instance of pseudo graph for every GRAPH.",
  "mergeA1417": "Graph element is a subclass of abstract.",
  "mergeA1418": "Graph element is exhaustively partitioned into graph node and graph arc.",
  "mergeA1419": "If PART is an instance of graph element, then there is at least one GRAPH for which GRAPH is an instance of graph and PART is part of the graph GRAPH for every PART.",
  "mergeA1420": "Graph node is a subclass of graph element.",
  "mergeA1421": "If NODE is an instance of graph node, then there is at least one OTHER and ARC for which ARC is an instance of graph arc and OTHER is an instance of graph node and ARC links NODE and OTHER for every NODE.",
  "mergeA1422": "Graph arc is a subclass of graph element.",
  "mergeA1423": "If ARC is an instance of graph arc, then there is at least one NODE1 and NODE2 for which NODE2 is an instance of graph node and NODE1 is an instance of graph node and ARC links NODE1 and NODE2 for every ARC.",
  "mergeA1424": "Graph loop is a subclass of graph arc.",
  "mergeA1425": "If LOOP is an instance of graph arc, then there is at least one NODE for which NODE is an instance of graph node and LOOP links NODE and NODE if and only if LOOP is an instance of graph loop for every LOOP.",
  "mergeA1426": "If ARC is an instance of graph arc and NODE is an instance of graph node and the starting node of ARC is equal to NODE and the terminal node of ARC is equal to NODE, then ARC is an instance of graph loop for every NODE and ARC.",
  "mergeA1427": "The predicate links is an instance of ternary predicate.",
  "mergeA1431": "If ARC is an instance of graph arc and NODE2 is an instance of graph node and NODE1 is an instance of graph node and ARC links NODE1 and NODE2, then ARC links NODE2 and NODE1 for every NODE2, NODE1 and ARC.",
  "mergeA1432": "The predicate graphPart is an instance of binary predicate.",
  "mergeA1433": "The predicate graphPart is an instance of asymmetric relation.",
  "mergeA1434": "The predicate graphPart is an instance of irreflexive relation.",
  "mergeA1437": "The predicate subGraph is an instance of binary predicate.",
  "mergeA1438": "The predicate subGraph is an instance of reflexive relation.",
  "mergeA1439": "The predicate subGraph is an instance of transitive relation.",
  "mergeA1442": "If GRAPH2 is an instance of graph and GRAPH1 is an instance of graph and ELEMENT is an instance of graph element and GRAPH1 is a subgraph of GRAPH2 and ELEMENT is part of the graph GRAPH1, then ELEMENT is part of the graph GRAPH2 for every GRAPH1, ELEMENT and GRAPH2.",
  "mergeA1443": "The predicate pathLength is an instance of binary predicate.",
  "mergeA1444": "The predicate pathLength is an instance of asymmetric relation.",
  "mergeA1445": "The predicate pathLength is an instance of irreflexive relation.",
  "mergeA1448": "The function InitialNodeFn is an instance of unary function.",
  "mergeA1449": "The function InitialNodeFn is an instance of partial valued relation.",
  "mergeA1452": "The function TerminalNodeFn is an instance of unary function.",
  "mergeA1453": "The function TerminalNodeFn is an instance of partial valued relation.",
  "mergeA1456": "The function BeginNodeFn is an instance of unary function.",
  "mergeA1457": "The function BeginNodeFn is an instance of total valued relation.",
  "mergeA1460": "The function BeginNodeFn is internally related to the function InitialNodeFn.",
  "mergeA1461": "The function EndNodeFn is an instance of unary function.",
  "mergeA1462": "The function EndNodeFn is an instance of total valued relation.",
  "mergeA1465": "The function EndNodeFn is internally related to the function TerminalNodeFn.",
  "mergeA1466": "The predicate arcWeight is an instance of binary predicate.",
  "mergeA1467": "The predicate arcWeight is an instance of single valued relation.",
  "mergeA1470": "The function PathWeightFn is an instance of unary function.",
  "mergeA1473": "If PATH is an instance of graph path and SUM is an instance of quantity and SUBPATH is an instance of graph path and ARC1 is an instance of graph arc and NUMBER1 is an instance of quantity and the weight of the path PATH is equal to SUM and SUBPATH is a subgraph of PATH and ARC1 is part of the graph PATH and the arc ARC1 has a weight of NUMBER1 and if ARC2 is an instance of graph element and ARC2 is part of the graph PATH, then ARC2 is part of the graph SUBPATH or ARC2 is equal to ARC1 for every ARC2, then SUM is equal to the weight of the path SUBPATH plus NUMBER1 for every PATH, ARC1, SUM, SUBPATH and NUMBER1.",
  "mergeA1474": "If PATH is an instance of graph path and SUM is an instance of quantity and ARC1 is an instance of graph arc and ARC2 is an instance of graph arc and NUMBER1 is an instance of quantity and NUMBER2 is an instance of quantity and the weight of the path PATH is equal to SUM and ARC1 is part of the graph PATH and ARC2 is part of the graph PATH and the arc ARC1 has a weight of NUMBER1 and the arc ARC2 has a weight of NUMBER2 and if ARC3 is an instance of graph arc and ARC3 is part of the graph PATH, then ARC3 is equal to ARC1 or ARC3 is equal to ARC2 for every ARC3, then the weight of the path PATH is equal to NUMBER1 plus NUMBER2 for every SUM, ARC1, ARC2, PATH, NUMBER1 and NUMBER2.",
  "mergeA1475": "The function MinimalWeightedPathFn is an instance of binary function.",
  "mergeA1481": "The function MaximalWeightedPathFn is an instance of binary function.",
  "mergeA1487": "The function GraphPathFn is an instance of binary function.",
  "mergeA1488": "The function GraphPathFn is an instance of total valued relation.",
  "mergeA1492": "If GRAPH is an instance of graph and PATH is an instance of graph element and PATH is a subclass of graph path and NODE2 is an instance of graph node and NODE1 is an instance of graph node and PATH is part of the graph GRAPH and GRAPH is not an instance of directed graph, then the set of paths between NODE2 and NODE1 is equal to PATH if and only if the set of paths between NODE1 and NODE2 is equal to PATH for every GRAPH, NODE2, NODE1 and PATH.",
  "mergeA1493": "The function CutSetFn is an instance of unary function.",
  "mergeA1496": "The function MinimalCutSetFn is an instance of unary function.",
  "mergeA1499": "The function MinimalCutSetFn is internally related to the function CutSetFn.",
  "mergeA1501": "If GRAPH is an instance of graph and PATHCLASS is a subclass of graph path and the set of minimal paths that partition GRAPH into two separate graphs is equal to PATHCLASS, then there is at least one NUMBER for which NUMBER is an instance of positive integer and if PATH is an instance of graph path and PATH is an instance of PATHCLASS, then the path PATH has a length of NUMBER for every PATH for every GRAPH and PATHCLASS.",
  "mergeA1503": "The predicate abstractCounterpart is an instance of binary predicate.",
  "mergeA1506": "The predicate abstractCounterpart is a subrelation of the predicate represents.",
  "mergeA1507": "Physical system is a subclass of physical.",
  "mergeA1508": "The predicate subSystem is an instance of binary predicate.",
  "mergeA1511": "The predicate systemPart is an instance of binary predicate.",
  "mergeA1514": "If SYSTEM is an instance of physical system and SUB is an instance of physical system and PART is an instance of physical and SUB is a sub-system of SYSTEM and PART is a part of the system SUB, then PART is a part of the system SYSTEM for every SUB, PART and SYSTEM.",
  "mergeA1515": "The predicate graphMeasure is an instance of binary predicate.",
  "mergeA1518": "If M is an instance of unit of measure and G is an instance of graph and AC is an instance of graph element and M is the measure for the arc weight of G, then AC is part of the graph G and there is at least one PC for which PC is an instance of physical and AC is the abstract counterpart of PC for every M, G and AC.",
  "mergeA1519": "If M is an instance of unit of measure and G is an instance of graph and PN is an instance of physical and PA is an instance of object and N is an instance of real number and M is the measure for the arc weight of G and AN is an instance of graph node and AA is an instance of graph arc and AN is the abstract counterpart of PN and AA is the abstract counterpart of PA and the arc AA has a weight of N measured in M, then PA is measured by N measured in M for every G, AN, PN, AA, PA, N and M.",
  "mergeA1520": "Unit of measure is a subclass of physical quantity.",
  "mergeA1521": "Composite unit of measure is a subclass of unit of measure.",
  "mergeA1522": "Non composite unit of measure is a subclass of unit of measure.",
  "mergeA1523": "Unit of measure is exhaustively partitioned into composite unit of measure and non composite unit of measure.",
  "mergeA1526": "Systeme international unit is a subclass of unit of measure.",
  "mergeA1527": "Length measure is a subclass of constant quantity.",
  "mergeA1528": "Unit of length is a subclass of non composite unit of measure.",
  "mergeA1529": "Mass measure is a subclass of constant quantity.",
  "mergeA1530": "Unit of mass is a subclass of non composite unit of measure.",
  "mergeA1531": "Area measure is a subclass of function quantity.",
  "mergeA1532": "Unit of area is a subclass of composite unit of measure.",
  "mergeA1533": "Volume measure is a subclass of function quantity.",
  "mergeA1534": "Unit of volume is a subclass of composite unit of measure.",
  "mergeA1535": "Temperature measure is a subclass of constant quantity.",
  "mergeA1536": "Unit of temperature is a subclass of non composite unit of measure.",
  "mergeA1537": "Currency measure is a subclass of constant quantity.",
  "mergeA1538": "Unit of currency is a subclass of non composite unit of measure.",
  "mergeA1539": "Angle measure is a subclass of constant quantity.",
  "mergeA1540": "Unit of angular measure is a subclass of non composite unit of measure.",
  "mergeA1541": "Plane angle measure is a subclass of angle measure.",
  "mergeA1542": "Solid angle measure is a subclass of angle measure.",
  "mergeA1543": "Solid angle measure is disjoint from plane angle measure.",
  "mergeA1544": "Unit of information is a subclass of non composite unit of measure.",
  "mergeA1545": "Unit of duration is a subclass of non composite unit of measure.",
  "mergeA1546": "The function MeasureFn is an instance of binary function.",
  "mergeA1547": "The function MeasureFn is an instance of total valued relation.",
  "mergeA1551": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER measured in UNIT is equal to QUANT and UNIT is an instance of unit of length, then QUANT is an instance of length measure for every NUMBER, UNIT and QUANT.",
  "mergeA1552": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER measured in UNIT is equal to QUANT and UNIT is an instance of unit of mass, then QUANT is an instance of mass measure for every NUMBER, UNIT and QUANT.",
  "mergeA1553": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER measured in UNIT is equal to QUANT and UNIT is an instance of unit of area, then QUANT is an instance of area measure for every NUMBER, UNIT and QUANT.",
  "mergeA1554": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER measured in UNIT is equal to QUANT and UNIT is an instance of unit of volume, then QUANT is an instance of volume measure for every NUMBER, UNIT and QUANT.",
  "mergeA1555": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER measured in UNIT is equal to QUANT and UNIT is an instance of unit of temperature, then QUANT is an instance of temperature measure for every NUMBER, UNIT and QUANT.",
  "mergeA1556": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER measured in UNIT is equal to QUANT and UNIT is an instance of unit of currency, then QUANT is an instance of currency measure for every NUMBER, UNIT and QUANT.",
  "mergeA1557": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER measured in UNIT is equal to QUANT and UNIT is an instance of unit of angular measure, then QUANT is an instance of angle measure for every NUMBER, UNIT and QUANT.",
  "mergeA1558": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER measured in UNIT is equal to QUANT and UNIT is an instance of unit of duration, then QUANT is an instance of time duration for every NUMBER, UNIT and QUANT.",
  "mergeA1559": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER measured in UNIT is equal to QUANT and UNIT is an instance of unit of information, then QUANT is an instance of information measure for every NUMBER, UNIT and QUANT.",
  "mergeA1561": "Unit of measure multiplier is a subclass of unary function.",
  "mergeA1562": "Unit of measure multiplier is a subclass of total valued relation.",
  "mergeA1563": "The function KiloFn is an instance of unit of measure multiplier.",
  "mergeA1566": "If KILOUNIT is an instance of unit of measure and UNIT is an instance of unit of measure and KILOUNIT is equal to one thousand UNITs, then 1 measured in KILOUNIT is equal to 1000 measured in UNIT for every KILOUNIT and UNIT.",
  "mergeA1567": "The function MegaFn is an instance of unit of measure multiplier.",
  "mergeA1570": "If MEGAUNIT is an instance of unit of measure and UNIT is an instance of unit of measure and MEGAUNIT is equal to one million UNITs, then 1 measured in MEGAUNIT is equal to 1000000 measured in UNIT for every MEGAUNIT and UNIT.",
  "mergeA1571": "The function GigaFn is an instance of unit of measure multiplier.",
  "mergeA1574": "If GIGAUNIT is an instance of unit of measure and UNIT is an instance of unit of measure and GIGAUNIT is equal to one billion UNITs, then 1 measured in GIGAUNIT is equal to 1000000000 measured in UNIT for every GIGAUNIT and UNIT.",
  "mergeA1575": "The function TeraFn is an instance of unit of measure multiplier.",
  "mergeA1578": "If TERAUNIT is an instance of unit of measure and UNIT is an instance of unit of measure and TERAUNIT is equal to one trillion UNITs, then 1 measured in TERAUNIT is equal to 1000000000000 measured in UNIT for every TERAUNIT and UNIT.",
  "mergeA1579": "The function MilliFn is an instance of unit of measure multiplier.",
  "mergeA1582": "The function MicroFn is an instance of unit of measure multiplier.",
  "mergeA1585": "The function NanoFn is an instance of unit of measure multiplier.",
  "mergeA1588": "The function PicoFn is an instance of unit of measure multiplier.",
  "mergeA1591": "The function IntervalFn is an instance of binary function.",
  "mergeA1595": "The function IntervalFn is internally related to the function RecurrentTimeIntervalFn.",
  "mergeA1598": "The function MagnitudeFn is an instance of unary function.",
  "mergeA1601": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER is equal to 1 multiplied by NUMBER and UNIT is an instance of unit of measure and QUANT is equal to NUMBER measured in UNIT, then the magnitude of QUANT is equal to NUMBER for every UNIT, QUANT and NUMBER.",
  "mergeA1602": "The function UnitFn is an instance of unary function.",
  "mergeA1605": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER is equal to 1 multiplied by NUMBER and UNIT is an instance of unit of measure and QUANT is equal to NUMBER measured in UNIT, then the unit of QUANT is equal to UNIT for every NUMBER, QUANT and UNIT.",
  "mergeA1606": "The function PerFn is an instance of binary function.",
  "mergeA1607": "The function PerFn is an instance of total valued relation.",
  "mergeA1611": "The function DensityFn is a subrelation of the function PerFn.",
  "mergeA1612": "The function DensityFn is an instance of total valued relation.",
  "mergeA1616": "The function SpeedFn is a subrelation of the function PerFn.",
  "mergeA1617": "The function SpeedFn is an instance of total valued relation.",
  "mergeA1621": "The function VelocityFn is an instance of quaternary function.",
  "mergeA1622": "The function VelocityFn is an instance of total valued relation.",
  "mergeA1628": "If DIRECTION is an instance of directional attribute and REF is an instance of region and TIME is an instance of time duration and DISTANCE is an instance of length measure and OBJECT is an instance of object and OBJECT is measured by DISTANCE per TIME in REF in the direction DIRECTION, then OBJECT is measured by DISTANCE per TIME for every REF, DIRECTION, OBJECT, DISTANCE and TIME.",
  "mergeA1629": "Meter is an instance of unit of length.",
  "mergeA1630": "Meter is an instance of systeme international unit.",
  "mergeA1631": "Gram is an instance of unit of mass.",
  "mergeA1632": "Gram is an instance of systeme international unit.",
  "mergeA1633": "Second duration is an instance of unit of duration.",
  "mergeA1634": "Second duration is an instance of systeme international unit.",
  "mergeA1635": "Ampere is an instance of composite unit of measure.",
  "mergeA1636": "Ampere is an instance of systeme international unit.",
  "mergeA1637": "Kelvin degree is an instance of unit of temperature.",
  "mergeA1638": "Kelvin degree is an instance of systeme international unit.",
  "mergeA1639": "Mole is an instance of unit of mass.",
  "mergeA1640": "Mole is an instance of systeme international unit.",
  "mergeA1641": "Candela is an instance of composite unit of measure.",
  "mergeA1642": "Candela is an instance of systeme international unit.",
  "mergeA1643": "Liter is an instance of unit of volume.",
  "mergeA1644": "Centimeter is an instance of unit of length.",
  "mergeA1645": "Millimeter is an instance of unit of length.",
  "mergeA1646": "Kilometer is an instance of unit of length.",
  "mergeA1647": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in kilometer is equal to NUMBER multiplied by 1000 measured in meter for every NUMBER.",
  "mergeA1648": "Radian is an instance of unit of angular measure.",
  "mergeA1649": "Radian is an instance of systeme international unit.",
  "mergeA1650": "Steradian is an instance of unit of angular measure.",
  "mergeA1651": "Steradian is an instance of systeme international unit.",
  "mergeA1652": "Frequency measure is a subclass of time dependent quantity.",
  "mergeA1653": "Unit of frequency is a subclass of composite unit of measure.",
  "mergeA1654": "If NUMBER is an instance of real number and QUANT is an instance of physical quantity and NUMBER measured in UNIT is equal to QUANT and UNIT is an instance of unit of frequency, then QUANT is an instance of frequency measure for every NUMBER, UNIT and QUANT.",
  "mergeA1655": "Hertz is an instance of unit of frequency.",
  "mergeA1656": "Hertz is an instance of systeme international unit.",
  "mergeA1657": "Newton is an instance of composite unit of measure.",
  "mergeA1658": "Newton is an instance of systeme international unit.",
  "mergeA1659": "Pascal is an instance of composite unit of measure.",
  "mergeA1660": "Pascal is an instance of systeme international unit.",
  "mergeA1661": "Joule is an instance of composite unit of measure.",
  "mergeA1662": "Joule is an instance of systeme international unit.",
  "mergeA1663": "Watt is an instance of composite unit of measure.",
  "mergeA1664": "Watt is an instance of systeme international unit.",
  "mergeA1665": "Horsepower is an instance of composite unit of measure.",
  "mergeA1666": "If N is an instance of real number, then N measured in horsepower is equal to N multiplied by 746 measured in watt for every N.",
  "mergeA1667": "Coulomb is an instance of composite unit of measure.",
  "mergeA1668": "Coulomb is an instance of systeme international unit.",
  "mergeA1669": "If NUMBER is an instance of real number and QUANTITY is an instance of physical quantity and QUANTITY is equal to NUMBER measured in coulomb, then QUANTITY is an instance of time dependent quantity for every NUMBER and QUANTITY.",
  "mergeA1670": "Volt is an instance of composite unit of measure.",
  "mergeA1671": "Volt is an instance of systeme international unit.",
  "mergeA1672": "Farad is an instance of composite unit of measure.",
  "mergeA1673": "Farad is an instance of systeme international unit.",
  "mergeA1674": "Ohm is an instance of composite unit of measure.",
  "mergeA1675": "Ohm is an instance of systeme international unit.",
  "mergeA1676": "Siemens is an instance of composite unit of measure.",
  "mergeA1677": "Siemens is an instance of systeme international unit.",
  "mergeA1678": "Weber is an instance of composite unit of measure.",
  "mergeA1679": "Weber is an instance of systeme international unit.",
  "mergeA1680": "Tesla is an instance of composite unit of measure.",
  "mergeA1681": "Tesla is an instance of systeme international unit.",
  "mergeA1682": "Henry is an instance of composite unit of measure.",
  "mergeA1683": "Henry is an instance of systeme international unit.",
  "mergeA1684": "Celsius degree is an instance of unit of temperature.",
  "mergeA1685": "Celsius degree is an instance of systeme international unit.",
  "mergeA1686": "Lumen is an instance of composite unit of measure.",
  "mergeA1687": "Lumen is an instance of systeme international unit.",
  "mergeA1688": "Lux is an instance of composite unit of measure.",
  "mergeA1689": "Lux is an instance of systeme international unit.",
  "mergeA1690": "Becquerel is an instance of composite unit of measure.",
  "mergeA1691": "Becquerel is an instance of systeme international unit.",
  "mergeA1692": "If NUMBER is an instance of real number and QUANTITY is an instance of physical quantity and QUANTITY is equal to NUMBER measured in becquerel, then QUANTITY is an instance of time dependent quantity for every NUMBER and QUANTITY.",
  "mergeA1693": "Gray is an instance of composite unit of measure.",
  "mergeA1694": "Gray is an instance of systeme international unit.",
  "mergeA1695": "Sievert is an instance of composite unit of measure.",
  "mergeA1696": "Sievert is an instance of systeme international unit.",
  "mergeA1697": "Day duration is an instance of unit of duration.",
  "mergeA1698": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in day duration is equal to NUMBER multiplied by 24 measured in hour duration for every NUMBER.",
  "mergeA1699": "Hour duration is an instance of unit of duration.",
  "mergeA1700": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in hour duration is equal to NUMBER multiplied by 60 measured in minute duration for every NUMBER.",
  "mergeA1701": "Minute duration is an instance of unit of duration.",
  "mergeA1702": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in minute duration is equal to NUMBER multiplied by 60 measured in second duration for every NUMBER.",
  "mergeA1703": "Week duration is an instance of unit of duration.",
  "mergeA1704": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in week duration is equal to NUMBER multiplied by 7 measured in day duration for every NUMBER.",
  "mergeA1705": "Month duration is an instance of unit of duration.",
  "mergeA1708": "Year duration is an instance of unit of duration.",
  "mergeA1709": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in year duration is equal to NUMBER multiplied by 365 measured in day duration for every NUMBER.",
  "mergeA1710": "Amu is an instance of unit of mass.",
  "mergeA1711": "Electron volt is an instance of composite unit of measure.",
  "mergeA1712": "Angstrom is an instance of unit of length.",
  "mergeA1713": "Foot length is an instance of unit of length.",
  "mergeA1714": "Inch is an instance of unit of length.",
  "mergeA1715": "Mile is an instance of unit of length.",
  "mergeA1716": "United states gallon is an instance of unit of volume.",
  "mergeA1717": "United states gallon is internally related to united kingdom gallon.",
  "mergeA1718": "Quart is an instance of unit of volume.",
  "mergeA1719": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in quart is equal to NUMBER divided by 4 measured in united states gallon for every NUMBER.",
  "mergeA1720": "Pint is an instance of unit of volume.",
  "mergeA1721": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in pint is equal to NUMBER divided by 2 measured in quart for every NUMBER.",
  "mergeA1722": "Cup is an instance of unit of volume.",
  "mergeA1723": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in cup is equal to NUMBER divided by 2 measured in pint for every NUMBER.",
  "mergeA1724": "Ounce is an instance of unit of volume.",
  "mergeA1725": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in ounce is equal to NUMBER divided by 8 measured in cup for every NUMBER.",
  "mergeA1726": "United kingdom gallon is an instance of unit of volume.",
  "mergeA1727": "Atom gram is an instance of unit of mass.",
  "mergeA1728": "Kilogram is an instance of systeme international unit.",
  "mergeA1729": "Kilogram is an instance of unit of mass.",
  "mergeA1730": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in kilogram is equal to NUMBER multiplied by 1000 measured in gram for every NUMBER.",
  "mergeA1733": "The predicate weight is an instance of binary predicate.",
  "mergeA1734": "The predicate weight is a subrelation of the predicate measure.",
  "mergeA1735": "Pound mass is an instance of unit of mass.",
  "mergeA1736": "Slug is an instance of unit of mass.",
  "mergeA1737": "Rankine degree is an instance of unit of temperature.",
  "mergeA1738": "Fahrenheit degree is an instance of unit of temperature.",
  "mergeA1739": "Pound force is an instance of composite unit of measure.",
  "mergeA1740": "Calorie is an instance of composite unit of measure.",
  "mergeA1741": "British thermal unit is an instance of composite unit of measure.",
  "mergeA1742": "Angular degree is an instance of unit of angular measure.",
  "mergeA1743": "If N is an instance of real number and QUANT is an instance of physical quantity and QUANT is equal to N measured in angular degree, then QUANT is an instance of plane angle measure for every N and QUANT.",
  "mergeA1744": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in angular degree is equal to NUMBER multiplied by pi divided by 180 measured in radian for every NUMBER.",
  "mergeA1745": "If NUMBER is an instance of real number and ANGLE is an instance of object and ANGLE is measured by NUMBER measured in angular degree, then NUMBER is greater than or equal to 0 and NUMBER is less than or equal to 360 for every ANGLE and NUMBER.",
  "mergeA1746": "0 measured in angular degree is equal to 360 measured in angular degree.",
  "mergeA1747": "United states dollar is an instance of unit of currency.",
  "mergeA1748": "United states cent is an instance of unit of currency.",
  "mergeA1749": "Euro dollar is an instance of unit of currency.",
  "mergeA1750": "Euro cent is an instance of unit of currency.",
  "mergeA1751": "Information measure is a subclass of constant quantity.",
  "mergeA1752": "Bit is an instance of unit of information.",
  "mergeA1753": "Byte is an instance of unit of information.",
  "mergeA1754": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in byte is equal to NUMBER multiplied by 8 measured in bit for every NUMBER.",
  "mergeA1755": "Kilo byte is an instance of unit of information.",
  "mergeA1756": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in kilo byte is equal to NUMBER multiplied by 1024 measured in byte for every NUMBER.",
  "mergeA1757": "Mega byte is an instance of unit of information.",
  "mergeA1758": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in mega byte is equal to NUMBER multiplied by 1024 measured in kilo byte for every NUMBER.",
  "mergeA1759": "The predicate measure is an instance of binary predicate.",
  "mergeA1760": "The predicate measure is an instance of asymmetric relation.",
  "mergeA1763": "The predicate age is an instance of single valued relation.",
  "mergeA1764": "The predicate age is a subrelation of the predicate measure.",
  "mergeA1767": "The predicate linearExtent is a subrelation of the predicate measure.",
  "mergeA1769": "The predicate width is an instance of single valued relation.",
  "mergeA1770": "The predicate width is a subrelation of the predicate linearExtent.",
  "mergeA1771": "The predicate height is a subrelation of the predicate linearExtent.",
  "mergeA1774": "The predicate length is an instance of single valued relation.",
  "mergeA1775": "The predicate length is a subrelation of the predicate linearExtent.",
  "mergeA1776": "If M is an instance of length measure and O is an instance of object and O has a length of M, then M2 is not an instance of length measure or O does not have a linear extent of M2 or M2 is not greater than M for every M2 for every O and M.",
  "mergeA1777": "Oval is a subclass of closed two dimensional figure.",
  "mergeA1778": "Circle is a subclass of oval.",
  "mergeA1779": "If C is an instance of circle, then there is at least one R for which R is an instance of length measure and C has a radius of R for every C.",
  "mergeA1780": "The function CenterOfCircleFn is an instance of unary function.",
  "mergeA1781": "The function CenterOfCircleFn is an instance of total valued relation.",
  "mergeA1784": "The predicate radius is an instance of binary predicate.",
  "mergeA1785": "The predicate radius is an instance of single valued relation.",
  "mergeA1786": "The predicate radius is an instance of total valued relation.",
  "mergeA1789": "If RADIUS is an instance of length measure and CIRCLE is an instance of circle and CIRCLE has a radius of RADIUS, then there is at least one POINT for which POINT is an instance of geometric point and if PART is an instance of geometric point and PART is a point of the figure CIRCLE, then the distance between the two points PART and POINT is RADIUS for every PART for every CIRCLE and RADIUS.",
  "mergeA1790": "The predicate diameter is a subrelation of the predicate width.",
  "mergeA1791": "The predicate diameter is an instance of binary predicate.",
  "mergeA1792": "The predicate diameter is an instance of single valued relation.",
  "mergeA1793": "The predicate diameter is an instance of total valued relation.",
  "mergeA1796": "If LENGTH is an instance of length measure and CIRCLE is an instance of circle and CIRCLE has a diameter of LENGTH, then there is at least one HALF for which HALF is an instance of length measure and CIRCLE has a radius of HALF and HALF multiplied by 2 is equal to LENGTH for every CIRCLE and LENGTH.",
  "mergeA1797": "The predicate distance is an instance of single valued relation.",
  "mergeA1798": "The predicate distance is an instance of spatial relation.",
  "mergeA1799": "The predicate distance is an instance of ternary predicate.",
  "mergeA1803": "If QUANT is an instance of length measure and OBJ2 is an instance of physical and OBJ1 is an instance of physical and QUANT is the distance between OBJ1 and OBJ2, then QUANT is the distance between OBJ2 and OBJ1 for every OBJ2, OBJ1 and QUANT.",
  "mergeA1804": "The predicate altitude is a subrelation of the predicate distance.",
  "mergeA1805": "The predicate altitude is an instance of single valued relation.",
  "mergeA1806": "If HEIGHT is an instance of length measure and OBJ2 is an instance of object and OBJ1 is an instance of object and the difference in height between OBJ1 and OBJ2 is HEIGHT, then OBJ1 is above to OBJ2 for every HEIGHT, OBJ1 and OBJ2.",
  "mergeA1807": "If HEIGHT is an instance of length measure and OBJ2 is an instance of physical and OBJ1 is an instance of self connected object and the difference in height between OBJ1 and OBJ2 is HEIGHT, then there is at least one TOP for which TOP is an instance of self connected object and TOP is the top of OBJ1 and HEIGHT is the distance between TOP and OBJ2 for every OBJ1, OBJ2 and HEIGHT.",
  "mergeA1808": "The predicate depth is a subrelation of the predicate distance.",
  "mergeA1809": "The predicate depth is an instance of single valued relation.",
  "mergeA1810": "If DEPTH is an instance of length measure and OBJ2 is an instance of object and OBJ1 is an instance of object and the difference in depth between OBJ1 and OBJ2 is DEPTH, then OBJ1 is below to OBJ2 for every DEPTH, OBJ1 and OBJ2.",
  "mergeA1811": "If DEPTH is an instance of length measure and OBJ2 is an instance of physical and OBJ1 is an instance of self connected object and the difference in depth between OBJ1 and OBJ2 is DEPTH, then there is at least one BOTTOM for which BOTTOM is an instance of self connected object and BOTTOM is the bottom of OBJ1 and DEPTH is the distance between BOTTOM and OBJ2 for every OBJ1, OBJ2 and DEPTH.",
  "mergeA1812": "The predicate larger is an instance of binary predicate.",
  "mergeA1813": "The predicate larger is an instance of spatial relation.",
  "mergeA1814": "The predicate larger is an instance of transitive relation.",
  "mergeA1815": "The predicate larger is an instance of irreflexive relation.",
  "mergeA1818": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then if QUANT1 is an instance of real number and QUANT2 is an instance of real number and OBJ1 is measured by QUANT1 measured in UNIT and OBJ2 is measured by QUANT2 measured in UNIT and UNIT is an instance of unit of length, then QUANT1 is greater than QUANT2 for every QUANT1, QUANT2 and UNIT if and only if OBJ1 is larger than OBJ2 for every OBJ1 and OBJ2.",
  "mergeA1819": "The predicate smaller is an instance of binary predicate.",
  "mergeA1820": "The predicate smaller is an instance of spatial relation.",
  "mergeA1821": "The predicate smaller is an instance of transitive relation.",
  "mergeA1822": "The predicate smaller is an instance of irreflexive relation.",
  "mergeA1825": "The predicate smaller is an inverse of the predicate larger.",
  "mergeA1826": "The predicate monetaryValue is an instance of single valued relation.",
  "mergeA1827": "The predicate monetaryValue is a subrelation of the predicate measure.",
  "mergeA1830": "The function WealthFn is an instance of unary function.",
  "mergeA1834": "The predicate barometricPressure is an instance of binary predicate.",
  "mergeA1835": "The predicate barometricPressure is an instance of asymmetric relation.",
  "mergeA1836": "The predicate barometricPressure is a subrelation of the predicate measure.",
  "mergeA1839": "Unit of atmospheric pressure is a subclass of composite unit of measure.",
  "mergeA1840": "Inch mercury is an instance of unit of atmospheric pressure.",
  "mergeA1841": "Mm mercury is an instance of unit of atmospheric pressure.",
  "mergeA1842": "Positive infinity is an instance of time point.",
  "mergeA1843": "If POINT is an instance of time point and POINT is not equal to positive infinity, then POINT occurs before positive infinity for every POINT.",
  "mergeA1844": "If POINT is an instance of time point and POINT is not equal to positive infinity, then there is at least one OTHERPOINT for which OTHERPOINT is an instance of time point and OTHERPOINT occurs between POINT and positive infinity for every POINT.",
  "mergeA1845": "Negative infinity is an instance of time point.",
  "mergeA1846": "If POINT is an instance of time point and POINT is not equal to negative infinity, then negative infinity occurs before POINT for every POINT.",
  "mergeA1847": "If POINT is an instance of time point and POINT is not equal to negative infinity, then there is at least one OTHERPOINT for which OTHERPOINT is an instance of time point and OTHERPOINT occurs between negative infinity and POINT for every POINT.",
  "mergeA1848": "The predicate duration is an instance of binary predicate.",
  "mergeA1849": "The predicate duration is an instance of asymmetric relation.",
  "mergeA1850": "The predicate duration is an instance of total valued relation.",
  "mergeA1853": "The predicate frequency is an instance of binary predicate.",
  "mergeA1854": "The predicate frequency is an instance of asymmetric relation.",
  "mergeA1858": "The predicate temporalPart is an instance of binary predicate.",
  "mergeA1859": "The predicate temporalPart is an instance of temporal relation.",
  "mergeA1860": "The predicate temporalPart is an instance of partial ordering relation.",
  "mergeA1863": "If POINT is an instance of time point, then there is at least one INTERVAL for which INTERVAL is an instance of time interval and POINT is a temporal part of INTERVAL for every POINT.",
  "mergeA1864": "If INTERVAL is an instance of time interval, then there is at least one POINT for which POINT is an instance of time point and POINT is a temporal part of INTERVAL for every INTERVAL.",
  "mergeA1865": "If SITUATION is an instance of formula and TIME1 is an instance of time position and TIME2 is an instance of time position and SITUATION holds during TIME1 and TIME2 is a temporal part of TIME1, then SITUATION holds during TIME2 for every TIME1, TIME2 and SITUATION.",
  "mergeA1867": "If THING is an instance of physical and POS is an instance of time position, then THING exists during POS if and only if POS is a temporal part of the time when THING takes place for every THING and POS.",
  "mergeA1868": "The function BeginFn is an instance of temporal relation.",
  "mergeA1869": "The function BeginFn is an instance of unary function.",
  "mergeA1870": "The function BeginFn is an instance of total valued relation.",
  "mergeA1874": "If INTERVAL is an instance of time interval and POINT is an instance of time point and the beginning of the interval INTERVAL is equal to POINT and OTHERPOINT is an instance of time point and OTHERPOINT is a temporal part of INTERVAL and OTHERPOINT is not equal to POINT and OTHERPOINT is not equal to negative infinity, then POINT occurs before OTHERPOINT for every INTERVAL, POINT and OTHERPOINT.",
  "mergeA1875": "The function EndFn is an instance of temporal relation.",
  "mergeA1876": "The function EndFn is an instance of unary function.",
  "mergeA1877": "The function EndFn is an instance of total valued relation.",
  "mergeA1880": "If INTERVAL is an instance of time interval and POINT is an instance of time point and the end of the interval INTERVAL is equal to POINT and OTHERPOINT is an instance of time point and OTHERPOINT is a temporal part of INTERVAL and OTHERPOINT is not equal to POINT and OTHERPOINT is not equal to positive infinity, then OTHERPOINT occurs before POINT for every INTERVAL, POINT and OTHERPOINT.",
  "mergeA1882": "The predicate starts is a subrelation of the predicate temporalPart.",
  "mergeA1883": "The predicate starts is an instance of temporal relation.",
  "mergeA1884": "The predicate starts is an instance of transitive relation.",
  "mergeA1885": "The predicate starts is an instance of irreflexive relation.",
  "mergeA1888": "If INTERVAL2 is an instance of time interval and INTERVAL1 is an instance of time interval, then the beginning of the interval INTERVAL1 is equal to the beginning of the interval INTERVAL2 and the end of the interval INTERVAL1 occurs before the end of the interval INTERVAL2 if and only if INTERVAL1 starts INTERVAL2 for every INTERVAL1 and INTERVAL2.",
  "mergeA1889": "The predicate finishes is a subrelation of the predicate temporalPart.",
  "mergeA1890": "The predicate finishes is an instance of temporal relation.",
  "mergeA1891": "The predicate finishes is an instance of transitive relation.",
  "mergeA1892": "The predicate finishes is an instance of irreflexive relation.",
  "mergeA1895": "If INTERVAL2 is an instance of time interval and INTERVAL1 is an instance of time interval, then the beginning of the interval INTERVAL2 occurs before the beginning of the interval INTERVAL1 and the end of the interval INTERVAL2 is equal to the end of the interval INTERVAL1 if and only if INTERVAL1 finishes INTERVAL2 for every INTERVAL2 and INTERVAL1.",
  "mergeA1896": "The predicate before is an instance of temporal relation.",
  "mergeA1897": "The predicate before is an instance of irreflexive relation.",
  "mergeA1898": "The predicate before is an instance of transitive relation.",
  "mergeA1899": "The predicate before is a subrelation of the predicate beforeOrEqual.",
  "mergeA1900": "The predicate before is internally related to the predicate earlier.",
  "mergeA1903": "If OBJ is an instance of object, then there is at least one TIME1 and TIME2 for which TIME1 is an instance of time point and TIME2 is an instance of time point and TIME1 occurs before TIME2 and if TIME is an instance of time point and TIME1 occurs before or at TIME and TIME occurs before or at TIME2, then OBJ exists during TIME for every TIME for every OBJ.",
  "mergeA1904": "If OBJ is an instance of physical and PROC is an instance of process and OBJ is a result of PROC and TIME is an instance of time point and TIME occurs before the beginning of the interval the time when PROC takes place, then OBJ does not exist during TIME for every PROC, OBJ and TIME.",
  "mergeA1905": "If INTERVAL is an instance of time interval and the beginning of the interval INTERVAL is not equal to positive infinity and the end of the interval INTERVAL is not equal to negative infinity, then the beginning of the interval INTERVAL occurs before the end of the interval INTERVAL for every INTERVAL.",
  "mergeA1906": "The predicate beforeOrEqual is an instance of binary predicate.",
  "mergeA1907": "The predicate beforeOrEqual is an instance of temporal relation.",
  "mergeA1908": "The predicate beforeOrEqual is an instance of partial ordering relation.",
  "mergeA1911": "If POINT2 is an instance of time point and POINT1 is an instance of time point and POINT1 occurs before or at POINT2, then POINT1 occurs before POINT2 or POINT1 is equal to POINT2 for every POINT1 and POINT2.",
  "mergeA1912": "The predicate temporallyBetween is an instance of temporal relation.",
  "mergeA1913": "The predicate temporallyBetween is an instance of ternary predicate.",
  "mergeA1914": "The predicate temporallyBetween is a subrelation of the predicate temporallyBetweenOrEqual.",
  "mergeA1918": "If POINT3 is an instance of time point and POINT2 is an instance of time point and POINT1 is an instance of time point, then POINT1 occurs before POINT2 and POINT2 occurs before POINT3 if and only if POINT2 occurs between POINT1 and POINT3 for every POINT1, POINT2 and POINT3.",
  "mergeA1919": "The predicate temporallyBetweenOrEqual is an instance of temporal relation.",
  "mergeA1920": "The predicate temporallyBetweenOrEqual is an instance of ternary predicate.",
  "mergeA1924": "If POINT3 is an instance of time point and POINT2 is an instance of time point and POINT1 is an instance of time point, then POINT1 occurs before or at POINT2 and POINT2 occurs before or at POINT3 if and only if POINT2 occurs between or at POINT1 and POINT2 for every POINT1, POINT2 and POINT3.",
  "mergeA1925": "If TIME is an instance of time point and PHYS is an instance of physical, then TIME occurs between or at the beginning of the interval the time when PHYS takes place and TIME if and only if PHYS exists during TIME and TIME is an instance of time point for every TIME and PHYS.",
  "mergeA1926": "The predicate overlapsTemporally is an instance of binary predicate.",
  "mergeA1927": "The predicate overlapsTemporally is an instance of temporal relation.",
  "mergeA1928": "The predicate overlapsTemporally is an instance of reflexive relation.",
  "mergeA1929": "The predicate overlapsTemporally is an instance of symmetric relation.",
  "mergeA1932": "If INTERVAL2 is an instance of time interval and INTERVAL1 is an instance of time interval, then there is at least one INTERVAL3 for which INTERVAL3 is an instance of time interval and INTERVAL3 is a temporal part of INTERVAL1 and INTERVAL3 is a temporal part of INTERVAL2 if and only if INTERVAL1 overlaps INTERVAL2 for every INTERVAL1 and INTERVAL2.",
  "mergeA1933": "If OBJ2 is an instance of physical and OBJ1 is an instance of physical and REL is an instance of binary predicate and REL is an instance of spatial relation and REL holds with the arguments OBJ1 and OBJ2, then the time when OBJ1 takes place overlaps the time when OBJ2 takes place for every REL, OBJ1 and OBJ2.",
  "mergeA1934": "The predicate during is a subrelation of the predicate temporalPart.",
  "mergeA1935": "The predicate during is an instance of transitive relation.",
  "mergeA1936": "The predicate during is an instance of irreflexive relation.",
  "mergeA1937": "The predicate during is a subrelation of the predicate overlapsTemporally.",
  "mergeA1940": "If INTERVAL2 is an instance of time interval and INTERVAL1 is an instance of time interval and INTERVAL1 takes place during INTERVAL2, then the end of the interval INTERVAL1 occurs before the end of the interval INTERVAL2 and the beginning of the interval INTERVAL2 occurs before the beginning of the interval INTERVAL1 for every INTERVAL2 and INTERVAL1.",
  "mergeA1941": "The predicate meetsTemporally is an instance of binary predicate.",
  "mergeA1942": "The predicate meetsTemporally is an instance of temporal relation.",
  "mergeA1943": "The predicate meetsTemporally is an instance of asymmetric relation.",
  "mergeA1944": "The predicate meetsTemporally is an instance of intransitive relation.",
  "mergeA1947": "If INTERVAL2 is an instance of time interval and INTERVAL1 is an instance of time interval, then the end of the interval INTERVAL1 is equal to the beginning of the interval INTERVAL2 if and only if INTERVAL1 meets INTERVAL2 for every INTERVAL1 and INTERVAL2.",
  "mergeA1948": "If INTERVAL1 is an instance of time interval and INTERVAL2 is an instance of time interval and the beginning of the interval INTERVAL1 is equal to the beginning of the interval INTERVAL2 and the end of the interval INTERVAL1 is equal to the end of the interval INTERVAL2, then INTERVAL1 is equal to INTERVAL2 for every INTERVAL1 and INTERVAL2.",
  "mergeA1949": "The predicate earlier is an instance of binary predicate.",
  "mergeA1950": "The predicate earlier is an instance of temporal relation.",
  "mergeA1951": "The predicate earlier is an instance of transitive relation.",
  "mergeA1952": "The predicate earlier is an instance of irreflexive relation.",
  "mergeA1955": "If INTERVAL2 is an instance of time interval and INTERVAL1 is an instance of time interval, then the end of the interval INTERVAL1 occurs before the beginning of the interval INTERVAL2 if and only if INTERVAL1 occurs earlier than INTERVAL2 for every INTERVAL1 and INTERVAL2.",
  "mergeA1956": "The predicate cooccur is an instance of binary predicate.",
  "mergeA1957": "The predicate cooccur is an instance of temporal relation.",
  "mergeA1958": "The predicate cooccur is an instance of equivalence relation.",
  "mergeA1961": "If PHYS2 is an instance of physical and PHYS1 is an instance of physical, then the time when PHYS1 takes place is equal to the time when PHYS2 takes place if and only if PHYS1 occurs at the same time as PHYS2 for every PHYS1 and PHYS2.",
  "mergeA1962": "The function TimeIntervalFn is an instance of binary function.",
  "mergeA1963": "The function TimeIntervalFn is an instance of temporal relation.",
  "mergeA1967": "If POINT1 is an instance of time point and POINT2 is an instance of time point and POINT1 is not equal to negative infinity and POINT2 is not equal to positive infinity and INTERVAL is an instance of time interval and the time interval between POINT1 and POINT2 is equal to INTERVAL, then the beginning of the interval INTERVAL is equal to POINT1 and the end of the interval INTERVAL is equal to POINT2 for every POINT1, INTERVAL and POINT2.",
  "mergeA1968": "If POINT1 is an instance of time point and POINT2 is an instance of time point and INTERVAL is an instance of time interval and the time interval between POINT1 and POINT2 is equal to INTERVAL and POINT is an instance of time point, then POINT is a temporal part of INTERVAL if and only if POINT occurs between or at POINT1 and POINT for every POINT1, POINT2, INTERVAL and POINT.",
  "mergeA1969": "The function RecurrentTimeIntervalFn is an instance of temporal relation.",
  "mergeA1970": "The function RecurrentTimeIntervalFn is an instance of binary function.",
  "mergeA1975": "The function WhenFn is an instance of temporal relation.",
  "mergeA1976": "The function WhenFn is an instance of unary function.",
  "mergeA1977": "The function WhenFn is an instance of total valued relation.",
  "mergeA1980": "The function PastFn is an instance of temporal relation.",
  "mergeA1981": "The function PastFn is an instance of unary function.",
  "mergeA1982": "The function PastFn is an instance of total valued relation.",
  "mergeA1985": "If INTERVAL is an instance of time interval and the beginning of the interval INTERVAL is not equal to negative infinity, then before INTERVAL meets INTERVAL for every INTERVAL.",
  "mergeA1986": "If INTERVAL is an instance of time interval, then before INTERVAL is equal to the time interval between negative infinity and the beginning of the interval INTERVAL for every INTERVAL.",
  "mergeA1987": "The function ImmediatePastFn is an instance of temporal relation.",
  "mergeA1988": "The function ImmediatePastFn is an instance of unary function.",
  "mergeA1989": "The function ImmediatePastFn is an instance of total valued relation.",
  "mergeA1992": "If INTERVAL is an instance of time interval, then immediately before INTERVAL finishes before INTERVAL for every INTERVAL.",
  "mergeA1993": "The function FutureFn is an instance of temporal relation.",
  "mergeA1994": "The function FutureFn is an instance of unary function.",
  "mergeA1995": "The function FutureFn is an instance of total valued relation.",
  "mergeA1998": "If INTERVAL is an instance of time interval and the end of the interval INTERVAL is not equal to positive infinity, then INTERVAL meets after INTERVAL for every INTERVAL.",
  "mergeA1999": "If INTERVAL is an instance of time interval, then after INTERVAL is equal to the time interval between the end of the interval INTERVAL and positive infinity for every INTERVAL.",
  "mergeA2000": "The function ImmediateFutureFn is an instance of temporal relation.",
  "mergeA2001": "The function ImmediateFutureFn is an instance of unary function.",
  "mergeA2002": "The function ImmediateFutureFn is an instance of total valued relation.",
  "mergeA2005": "If INTERVAL is an instance of time interval, then immediately after INTERVAL starts after INTERVAL for every INTERVAL.",
  "mergeA2006": "The predicate date is an instance of binary predicate.",
  "mergeA2007": "The predicate date is an instance of single valued relation.",
  "mergeA2008": "The predicate date is an instance of asymmetric relation.",
  "mergeA2011": "The predicate date is a subrelation of the predicate time.",
  "mergeA2012": "The function YearFn is an instance of temporal relation.",
  "mergeA2013": "The function YearFn is an instance of unary function.",
  "mergeA2016": "The function MonthFn is an instance of temporal relation.",
  "mergeA2017": "The function MonthFn is an instance of binary function.",
  "mergeA2021": "The function DayFn is an instance of temporal relation.",
  "mergeA2022": "The function DayFn is an instance of binary function.",
  "mergeA2028": "The function HourFn is an instance of temporal relation.",
  "mergeA2029": "The function HourFn is an instance of binary function.",
  "mergeA2035": "The function MinuteFn is an instance of temporal relation.",
  "mergeA2036": "The function MinuteFn is an instance of binary function.",
  "mergeA2042": "The function SecondFn is an instance of temporal relation.",
  "mergeA2043": "The function SecondFn is an instance of binary function.",
  "mergeA2049": "Year is a subclass of time interval.",
  "mergeA2053": "If YEAR1 is an instance of year and YEAR2 is an instance of year and YEAR2 minus YEAR1 is equal to 1, then YEAR1 meets YEAR2 for every YEAR1 and YEAR2.",
  "mergeA2054": "Leap year is a subclass of year.",
  "mergeA2056": "Month is a subclass of time interval.",
  "mergeA2058": "January is a subclass of month.",
  "mergeA2061": "February is a subclass of month.",
  "mergeA2065": "March is a subclass of month.",
  "mergeA2068": "April is a subclass of month.",
  "mergeA2071": "May is a subclass of month.",
  "mergeA2074": "June is a subclass of month.",
  "mergeA2077": "July is a subclass of month.",
  "mergeA2080": "August is a subclass of month.",
  "mergeA2083": "September is a subclass of month.",
  "mergeA2086": "October is a subclass of month.",
  "mergeA2089": "November is a subclass of month.",
  "mergeA2092": "December is a subclass of month.",
  "mergeA2095": "Day is a subclass of time interval.",
  "mergeA2099": "Monday is a subclass of day.",
  "mergeA2100": "Tuesday is a subclass of day.",
  "mergeA2101": "If DAY1 is an instance of monday and DAY2 is an instance of tuesday and WEEK is an instance of week and DAY1 is a temporal part of WEEK and DAY2 is a temporal part of WEEK, then DAY1 meets DAY2 for every WEEK, DAY1 and DAY2.",
  "mergeA2102": "Wednesday is a subclass of day.",
  "mergeA2103": "If DAY1 is an instance of tuesday and DAY2 is an instance of wednesday and WEEK is an instance of week and DAY1 is a temporal part of WEEK and DAY2 is a temporal part of WEEK, then DAY1 meets DAY2 for every WEEK, DAY1 and DAY2.",
  "mergeA2104": "Thursday is a subclass of day.",
  "mergeA2105": "If DAY1 is an instance of wednesday and DAY2 is an instance of thursday and WEEK is an instance of week and DAY1 is a temporal part of WEEK and DAY2 is a temporal part of WEEK, then DAY1 meets DAY2 for every WEEK, DAY1 and DAY2.",
  "mergeA2106": "Friday is a subclass of day.",
  "mergeA2107": "If DAY1 is an instance of thursday and DAY2 is an instance of friday and WEEK is an instance of week and DAY1 is a temporal part of WEEK and DAY2 is a temporal part of WEEK, then DAY1 meets DAY2 for every WEEK, DAY1 and DAY2.",
  "mergeA2108": "Saturday is a subclass of day.",
  "mergeA2109": "If DAY1 is an instance of friday and DAY2 is an instance of saturday and WEEK is an instance of week and DAY1 is a temporal part of WEEK and DAY2 is a temporal part of WEEK, then DAY1 meets DAY2 for every WEEK, DAY1 and DAY2.",
  "mergeA2110": "Sunday is a subclass of day.",
  "mergeA2111": "If DAY1 is an instance of saturday and DAY2 is an instance of sunday and WEEK is an instance of week and DAY1 is a temporal part of WEEK and DAY2 is a temporal part of WEEK, then DAY1 meets DAY2 for every WEEK, DAY1 and DAY2.",
  "mergeA2112": "If DAY1 is an instance of sunday and DAY2 is an instance of monday and WEEK1 is an instance of week and WEEK2 is an instance of week and DAY1 is a temporal part of WEEK1 and DAY2 is a temporal part of WEEK2 and WEEK1 meets WEEK2, then DAY1 meets DAY2 for every WEEK1, WEEK2, DAY1 and DAY2.",
  "mergeA2113": "Week is a subclass of time interval.",
  "mergeA2115": "Hour is a subclass of time interval.",
  "mergeA2119": "Minute is a subclass of time interval.",
  "mergeA2123": "Second is a subclass of time interval.",
  "mergeA2127": "The function TemporalCompositionFn is an instance of temporal relation.",
  "mergeA2128": "The function TemporalCompositionFn is an instance of binary function.",
  "mergeA2132": "If INTERVALTYPE is a subclass of time interval and INTERVAL is an instance of time interval and CLASS is a subclass of time interval and the class of INTERVALTYPE that make up INTERVAL is equal to CLASS and TIME1 is an instance of time interval and TIME2 is an instance of time interval and TIME1 is an instance of INTERVALTYPE and TIME2 is an instance of CLASS, then there is at least one DURATION for which DURATION is an instance of time duration and TIME1 has a duration of DURATION and TIME2 has a duration of DURATION for every INTERVAL, INTERVALTYPE, CLASS, TIME1 and TIME2.",
  "mergeA2133": "If INTERVALTYPE is a subclass of time interval and INTERVAL is an instance of time interval and CLASS is a subclass of time interval and the class of INTERVALTYPE that make up INTERVAL is equal to CLASS and TIME1 is an instance of time interval and TIME2 is an instance of time interval and TIME1 is an instance of CLASS and TIME2 is an instance of CLASS and TIME1 is not equal to TIME2, then TIME1 meets TIME2 or TIME2 meets TIME1 or TIME1 occurs earlier than TIME2 or TIME2 occurs earlier than TIME1 for every INTERVAL, INTERVALTYPE, CLASS, TIME1 and TIME2.",
  "mergeA2134": "If INTERVALTYPE is a subclass of time interval and INTERVAL is an instance of time interval and CLASS is a subclass of time interval and the class of INTERVALTYPE that make up INTERVAL is equal to CLASS, then there is at least one TIME for which TIME is an instance of time interval and TIME is an instance of CLASS and TIME starts INTERVAL for every INTERVALTYPE, CLASS and INTERVAL.",
  "mergeA2135": "If INTERVALTYPE is a subclass of time interval and INTERVAL is an instance of time interval and CLASS is a subclass of time interval and the class of INTERVALTYPE that make up INTERVAL is equal to CLASS, then there is at least one TIME for which TIME is an instance of time interval and TIME is an instance of CLASS and TIME finishes INTERVAL for every INTERVALTYPE, CLASS and INTERVAL.",
  "mergeA2136": "If INTERVALTYPE is a subclass of time interval and INTERVAL is an instance of time interval and CLASS is a subclass of time interval and the class of INTERVALTYPE that make up INTERVAL is equal to CLASS and TIME1 is an instance of time interval and TIME1 is an instance of CLASS and TIME1 does not finish INTERVAL, then there is at least one TIME2 for which TIME2 is an instance of time interval and TIME2 is an instance of CLASS and TIME1 meets TIME2 for every INTERVALTYPE, INTERVAL, CLASS and TIME1.",
  "mergeA2137": "If INTERVALTYPE is a subclass of time interval and INTERVAL is an instance of time interval and CLASS is a subclass of time interval and the class of INTERVALTYPE that make up INTERVAL is equal to CLASS and TIME1 is an instance of time interval and TIME1 is an instance of CLASS and TIME1 does not start INTERVAL, then there is at least one TIME2 for which TIME2 is an instance of time interval and TIME2 is an instance of CLASS and TIME2 meets TIME1 for every INTERVALTYPE, INTERVAL, CLASS and TIME1.",
  "mergeA2138": "If INTERVALTYPE is a subclass of time interval and INTERVAL is an instance of time interval and CLASS is a subclass of time interval and the class of INTERVALTYPE that make up INTERVAL is equal to CLASS and TIME is an instance of time point and TIME is a temporal part of INTERVAL, then there is at least one INSTANCE for which INSTANCE is an instance of time position and INSTANCE is an instance of CLASS and TIME is a temporal part of INSTANCE for every INTERVALTYPE, INTERVAL, CLASS and TIME.",
  "mergeA2139": "If YEAR is an instance of year, then the cardinality of the class of month that make up YEAR is equal to 12 for every YEAR.",
  "mergeA2141": "If WEEK is an instance of week, then the cardinality of the class of day that make up WEEK is equal to 7 for every WEEK.",
  "mergeA2142": "If DAY is an instance of day, then the cardinality of the class of hour that make up DAY is equal to 24 for every DAY.",
  "mergeA2143": "If HOUR is an instance of hour, then the cardinality of the class of minute that make up HOUR is equal to 60 for every HOUR.",
  "mergeA2144": "If MINUTE is an instance of minute, then the cardinality of the class of second that make up MINUTE is equal to 60 for every MINUTE.",
  "mergeA2145": "The predicate connected is an instance of binary predicate.",
  "mergeA2146": "The predicate connected is an instance of spatial relation.",
  "mergeA2147": "The predicate connected is an instance of reflexive relation.",
  "mergeA2148": "The predicate connected is an instance of symmetric relation.",
  "mergeA2151": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is connected to OBJ2, then OBJ1 meets OBJ2 or OBJ1 overlaps with OBJ2  for every OBJ1 and OBJ2.",
  "mergeA2152": "If OBJ is an instance of object, then if PART2 is an instance of object and PART1 is an instance of object and OBJ is equal to the mereological sum of PART1 and PART2, then PART1 is connected to PART2 for every PART1 and PART2 if and only if OBJ is an instance of self connected object for every OBJ.",
  "mergeA2153": "The predicate connects is an instance of spatial relation.",
  "mergeA2154": "The predicate connects is an instance of ternary predicate.",
  "mergeA2158": "If OBJ3 is an instance of self connected object and OBJ2 is an instance of self connected object and OBJ1 is an instance of self connected object, then OBJ1 is between OBJ2 and OBJ3 if and only if OBJ1 connects OBJ2 and OBJ3 for every OBJ2, OBJ1 and OBJ3.",
  "mergeA2159": "If OBJ3 is an instance of self connected object and OBJ2 is an instance of self connected object and OBJ1 is an instance of self connected object, then OBJ1 is connected to OBJ2 and OBJ1 is connected to OBJ3 and OBJ2 is not connected to OBJ3 if and only if OBJ1 connects OBJ2 and OBJ3 for every OBJ1, OBJ2 and OBJ3.",
  "mergeA2160": "If NODE2 is an instance of self connected object and NODE1 is an instance of self connected object and ARC is an instance of self connected object and ARC connects NODE1 and NODE2, then ARC connects NODE2 and NODE1 for every ARC, NODE2 and NODE1.",
  "mergeA2161": "The predicate meetsSpatially is a subrelation of the predicate connected.",
  "mergeA2162": "The predicate meetsSpatially is an instance of irreflexive relation.",
  "mergeA2163": "The predicate meetsSpatially is an instance of symmetric relation.",
  "mergeA2164": "The predicate meetsSpatially and the predicate overlapsSpatially are disjoint.",
  "mergeA2165": "The predicate overlapsSpatially is a subrelation of the predicate connected.",
  "mergeA2166": "The predicate overlapsSpatially is an instance of reflexive relation.",
  "mergeA2167": "The predicate overlapsSpatially is an instance of symmetric relation.",
  "mergeA2168": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then there is at least one OBJ3 for which OBJ3 is an instance of object and OBJ3 is a part of OBJ1 and OBJ3 is a part of OBJ2 if and only if OBJ1 overlaps with OBJ2  for every OBJ1 and OBJ2.",
  "mergeA2169": "If COLL is an instance of collection and OBJ1 is an instance of self connected object and OBJ2 is an instance of self connected object and OBJ1 is a member of COLL and OBJ2 is a member of COLL and OBJ1 is not equal to OBJ2, then OBJ1 does not overlap with OBJ2  for every COLL, OBJ1 and OBJ2.",
  "mergeA2170": "If PROCESS is an instance of physical and REL is an instance of case role and OBJ is an instance of object and REL holds with the arguments PROCESS and OBJ, then there is at least one TIME for which TIME is an instance of time point and the place where PROCESS takes place at TIME overlaps with OBJ  for every REL, PROCESS and OBJ.",
  "mergeA2171": "The predicate overlapsPartially is an instance of symmetric relation.",
  "mergeA2172": "The predicate overlapsPartially is an instance of irreflexive relation.",
  "mergeA2173": "The predicate overlapsPartially is a subrelation of the predicate overlapsSpatially.",
  "mergeA2174": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then OBJ1 is not a part of OBJ2 and OBJ2 is not a part of OBJ1 and there is at least one OBJ3 for which OBJ3 is an instance of object and OBJ3 is a part of OBJ1 and OBJ3 is a part of OBJ2 if and only if OBJ1 partially overlaps with OBJ2 for every OBJ1 and OBJ2.",
  "mergeA2175": "The predicate superficialPart is a subrelation of the predicate part.",
  "mergeA2176": "The predicate superficialPart is an instance of irreflexive relation.",
  "mergeA2177": "The predicate superficialPart is an instance of transitive relation.",
  "mergeA2178": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is a superficial part of OBJ2, then OBJ1 is not an interior part of OBJ2 and OBJ3 is not an instance of object or OBJ3 is not an interior part of OBJ1 for every OBJ3 for every OBJ2 and OBJ1.",
  "mergeA2179": "The predicate surface is an instance of asymmetric relation.",
  "mergeA2180": "The predicate surface is a subrelation of the predicate superficialPart.",
  "mergeA2183": "If OBJ2 is an instance of self connected object and OBJ1 is an instance of self connected object and OBJ3 is an instance of object and OBJ1 is a surface of OBJ2 and OBJ3 is a superficial part of OBJ2, then OBJ3 is a part of OBJ1 for every OBJ2, OBJ1 and OBJ3.",
  "mergeA2184": "The predicate interiorPart is a subrelation of the predicate part.",
  "mergeA2185": "The predicate interiorPart is an instance of asymmetric relation.",
  "mergeA2186": "The predicate interiorPart is an instance of transitive relation.",
  "mergeA2187": "If OBJ2 is an instance of object and OBJ1 is an instance of object and PART is an instance of object and OBJ1 is an interior part of OBJ2 and PART is a superficial part of OBJ2, then OBJ1 does not overlap with PART  for every OBJ2, OBJ1 and PART.",
  "mergeA2188": "The predicate bottom is a subrelation of the predicate superficialPart.",
  "mergeA2191": "If OBJECT is an instance of self connected object and BOTTOM is an instance of self connected object and PART is an instance of object and BOTTOM is the bottom of OBJECT and PART is a part of OBJECT and PART is not connected to BOTTOM, then PART is above to BOTTOM for every OBJECT, PART and BOTTOM.",
  "mergeA2192": "The predicate top is a subrelation of the predicate superficialPart.",
  "mergeA2195": "If OBJECT is an instance of self connected object and TOP is an instance of self connected object and PART is an instance of object and TOP is the top of OBJECT and PART is a part of OBJECT and PART is not connected to TOP, then PART is below to TOP for every OBJECT, PART and TOP.",
  "mergeA2196": "The predicate side is a subrelation of the predicate superficialPart.",
  "mergeA2199": "If OBJECT is an instance of self connected object and SIDE is an instance of self connected object and PART is an instance of object and SIDE is a side of OBJECT and PART is a part of OBJECT and PART is not connected to SIDE, then there is at least one DIRECT for which DIRECT is an instance of positional attribute and SIDE is DIRECT to PART for every OBJECT, SIDE and PART.",
  "mergeA2200": "If O is an instance of self connected object and TOP is an instance of self connected object and S is an instance of self connected object and TOP is the top of O and S is a side of O, then TOP is not equal to S for every O, TOP and S.",
  "mergeA2201": "If WIDTH is an instance of length measure and OBJECT is an instance of self connected object, then there is at least one SIDE1 and SIDE2 for which SIDE1 is an instance of self connected object and SIDE2 is an instance of self connected object and SIDE1 is a side of OBJECT and SIDE2 is a side of OBJECT and WIDTH is the distance between SIDE1 and SIDE2 if and only if OBJECT has a width of WIDTH for every OBJECT and WIDTH.",
  "mergeA2202": "If HEIGHT is an instance of length measure and OBJECT is an instance of self connected object and TOP is an instance of self connected object and BOTTOM is an instance of self connected object and OBJECT has a height of HEIGHT and TOP is the top of OBJECT and BOTTOM is the bottom of OBJECT, then HEIGHT is the distance between TOP and BOTTOM for every OBJECT, TOP, BOTTOM and HEIGHT.",
  "mergeA2203": "The function MereologicalSumFn is an instance of spatial relation.",
  "mergeA2204": "The function MereologicalSumFn is an instance of binary function.",
  "mergeA2205": "The function MereologicalSumFn is an instance of total valued relation.",
  "mergeA2209": "The function MereologicalSumFn is internally related to the function MereologicalProductFn.",
  "mergeA2210": "The function MereologicalSumFn is internally related to the function MereologicalDifferenceFn.",
  "mergeA2211": "If O1 is an instance of object and C1 is an instance of object and O2 is an instance of object and C2 is an instance of object and P is an instance of object and CP is an instance of object and S is an instance of object and C1 is equal to the mereological complement of O1 and C2 is equal to the mereological complement of O2 and P is equal to the mereological product of C1 and C2 and CP is equal to the mereological complement of P and S is equal to the mereological sum of O1 and O2 and PART is an instance of object, then PART is a part of CP if and only if PART is a part of S for every C1, C2, P, O1, O2, S, CP and PART.",
  "mergeA2212": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ3 is an instance of object and OBJ3 is equal to the mereological sum of OBJ1 and OBJ2 and PART is an instance of object, then PART overlaps with OBJ1  or PART overlaps with OBJ2  if and only if PART overlaps with OBJ3  for every OBJ3, OBJ1, OBJ2 and PART.",
  "mergeA2213": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ3 is an instance of object and OBJ3 is equal to the mereological sum of OBJ1 and OBJ2 and PART is an instance of object and PART is a part of OBJ1 or PART is a part of OBJ2, then PART is a part of OBJ3 for every OBJ1, OBJ2, OBJ3 and PART.",
  "mergeA2214": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then the mereological sum of OBJ1 and OBJ2 is equal to the mereological sum of OBJ2 and OBJ1 for every OBJ2 and OBJ1.",
  "mergeA2215": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then the mereological sum of OBJ1 and OBJ2 is equal to the mereological sum of the mereological sum of OBJ1 and OBJ2 and OBJ2 for every OBJ1 and OBJ2.",
  "mergeA2216": "The function MereologicalProductFn is an instance of spatial relation.",
  "mergeA2217": "The function MereologicalProductFn is an instance of binary function.",
  "mergeA2218": "The function MereologicalProductFn is an instance of total valued relation.",
  "mergeA2222": "The function MereologicalProductFn is internally related to the function MereologicalDifferenceFn.",
  "mergeA2223": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ3 is an instance of object and OBJ3 is equal to the mereological product of OBJ1 and OBJ2 and PART is an instance of object, then PART is a part of OBJ1 and PART is a part of OBJ2 if and only if PART is a part of OBJ3 for every OBJ3, OBJ1, OBJ2 and PART.",
  "mergeA2224": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then the mereological product of OBJ1 and OBJ2 is equal to the mereological product of OBJ2 and OBJ1 for every OBJ2 and OBJ1.",
  "mergeA2225": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then the mereological product of OBJ1 and OBJ2 is equal to the mereological product of the mereological product of OBJ1 and OBJ2 and OBJ2 for every OBJ1 and OBJ2.",
  "mergeA2226": "The function MereologicalDifferenceFn is an instance of spatial relation.",
  "mergeA2227": "The function MereologicalDifferenceFn is an instance of binary function.",
  "mergeA2228": "The function MereologicalDifferenceFn is an instance of total valued relation.",
  "mergeA2232": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ3 is an instance of object and OBJ3 is equal to the mereological difference between OBJ1 and OBJ2 and PART is an instance of object, then PART is a part of OBJ1 and PART does not overlap with OBJ2  if and only if PART is a part of OBJ3 for every OBJ3, OBJ1, OBJ2 and PART.",
  "mergeA2233": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then the mereological difference between OBJ1 and OBJ2 is equal to the mereological difference between the mereological difference between OBJ1 and OBJ2 and OBJ2 for every OBJ1 and OBJ2.",
  "mergeA2234": "The function MereologicalComplementFn is an instance of spatial relation.",
  "mergeA2235": "The function MereologicalComplementFn is an instance of unary function.",
  "mergeA2236": "The function MereologicalComplementFn is an instance of total valued relation.",
  "mergeA2239": "If OBJ1 is an instance of object and OBJ2 is an instance of object and OBJ2 is equal to the mereological complement of OBJ1 and PART is an instance of object, then PART does not overlap with OBJ2  if and only if PART is a part of OBJ1 and PART does not overlap with OBJ1  if and only if PART is a part of OBJ2 for every OBJ2, OBJ1 and PART.",
  "mergeA2240": "If OBJ is an instance of object, then OBJ is equal to the mereological complement of the mereological complement of OBJ for every OBJ.",
  "mergeA2241": "If OBJ1 is an instance of object and OBJ2 is an instance of object and OBJ2 is equal to the mereological complement of OBJ1 and PART is an instance of object, then PART overlaps with OBJ1  or PART overlaps with OBJ2  for every OBJ1, OBJ2 and PART.",
  "mergeA2242": "If OBJ1 is an instance of object and OBJ2 is an instance of object, then the mereological sum of OBJ1 and the mereological complement of OBJ1 is equal to the mereological sum of OBJ2 and the mereological complement of OBJ2 for every OBJ1 and OBJ2.",
  "mergeA2243": "If OBJ1 is an instance of object and OBJ2 is an instance of object, then the mereological product of OBJ1 and the mereological complement of OBJ1 is equal to the mereological product of OBJ2 and the mereological complement of OBJ2 for every OBJ1 and OBJ2.",
  "mergeA2244": "If OBJ is an instance of object and PART is an instance of object, then PART is a part of the mereological sum of OBJ and the mereological complement of OBJ for every PART and OBJ.",
  "mergeA2245": "If OBJ1 is an instance of object and OBJ2 is an instance of object, then the mereological product of OBJ1 and the mereological complement of OBJ1 is equal to the mereological complement of the mereological sum of OBJ2 and the mereological complement of OBJ2 for every OBJ1 and OBJ2.",
  "mergeA2246": "If OBJ1 is an instance of object and OBJ2 is an instance of object, then the mereological sum of OBJ1 and the mereological complement of OBJ1 is equal to the mereological complement of the mereological product of OBJ2 and the mereological complement of OBJ2 for every OBJ1 and OBJ2.",
  "mergeA2247": "The predicate hole is an instance of binary predicate.",
  "mergeA2248": "The predicate hole is an instance of spatial relation.",
  "mergeA2249": "The predicate hole is an instance of asymmetric relation.",
  "mergeA2252": "Hole is a subclass of region.",
  "mergeA2253": "If HOLE is an instance of hole, then there is at least one OBJ for which OBJ is an instance of self connected object and HOLE is a hole in OBJ for every HOLE.",
  "mergeA2254": "If OBJ is an instance of self connected object and HOLE is an instance of hole and HOLE is a hole in OBJ, then OBJ is not an instance of hole for every HOLE and OBJ.",
  "mergeA2255": "If OBJ is an instance of self connected object and HOLE is an instance of hole and HOLE is a hole in OBJ, then HOLE does not overlap with OBJ  for every HOLE and OBJ.",
  "mergeA2256": "If OBJ1 is an instance of self connected object and HOLE is an instance of hole and OBJ2 is an instance of self connected object and HOLE is a hole in OBJ1 and HOLE is a hole in OBJ2, then there is at least one OBJ3 for which OBJ3 is an instance of self connected object and OBJ3 is a proper part of the mereological product of OBJ1 and OBJ2 and HOLE is a hole in OBJ3 for every OBJ1, OBJ2 and HOLE.",
  "mergeA2257": "If OBJ is an instance of self connected object and HOLE1 is an instance of hole and HOLE2 is an instance of hole and HOLE1 is a hole in OBJ and HOLE2 is a hole in OBJ and HOLE3 is an instance of hole and HOLE3 is a part of the mereological sum of HOLE1 and HOLE2, then HOLE3 is a hole in OBJ for every HOLE1, HOLE2, OBJ and HOLE3.",
  "mergeA2258": "If OBJ1 is an instance of self connected object and HOLE is an instance of hole and OBJ2 is an instance of self connected object and HOLE is a hole in OBJ1 and OBJ1 is a part of OBJ2, then HOLE overlaps with OBJ2  or HOLE is a hole in OBJ2 for every OBJ1, HOLE and OBJ2.",
  "mergeA2259": "If OBJ1 is an instance of self connected object and HOLE1 is an instance of hole and OBJ2 is an instance of self connected object and HOLE2 is an instance of hole and HOLE1 is a hole in OBJ1 and HOLE2 is a hole in OBJ2 and HOLE1 overlaps with HOLE2 , then OBJ1 overlaps with OBJ2  for every HOLE1, HOLE2, OBJ1 and OBJ2.",
  "mergeA2260": "If HOLE1 is an instance of hole, then there is at least one HOLE2 for which HOLE2 is an instance of object and HOLE2 is a proper part of HOLE1 for every HOLE1.",
  "mergeA2261": "The function HoleHostFn is an instance of spatial relation.",
  "mergeA2262": "The function HoleHostFn is an instance of unary function.",
  "mergeA2263": "The function HoleHostFn is an instance of total valued relation.",
  "mergeA2264": "The function HoleHostFn is an instance of asymmetric relation.",
  "mergeA2267": "If OBJ is an instance of self connected object and HOLE is an instance of hole and HOLE is a hole in OBJ, then HOLE is connected to OBJ for every HOLE and OBJ.",
  "mergeA2268": "If HOLE2 is an instance of object and HOLE1 is an instance of hole and HOLE2 is a proper part of HOLE1, then there is at least one OBJ for which OBJ is an instance of object and HOLE1 meets OBJ and HOLE2 does not meet OBJ for every HOLE1 and HOLE2.",
  "mergeA2269": "Fillable is an instance of shape attribute.",
  "mergeA2271": "If HOLE1 is an instance of object, then there is at least one HOLE2 for which HOLE2 is an instance of hole and HOLE1 is a proper part of HOLE2 if and only if HOLE1 has the attribute fillable for every HOLE1.",
  "mergeA2272": "The predicate partiallyFills is a subrelation of the predicate located.",
  "mergeA2273": "The predicate partiallyFills is an instance of spatial relation.",
  "mergeA2274": "The predicate partiallyFills is an instance of asymmetric relation.",
  "mergeA2277": "If HOLE1 is an instance of hole and OBJ is an instance of object and OBJ partially fills HOLE1, then there is at least one HOLE2 for which HOLE2 is an instance of hole and HOLE2 is a part of HOLE1 and OBJ completely fills HOLE2 for every HOLE1 and OBJ.",
  "mergeA2278": "The predicate properlyFills is an instance of asymmetric relation.",
  "mergeA2279": "The predicate properlyFills is a subrelation of the predicate partiallyFills.",
  "mergeA2282": "If HOLE1 is an instance of hole and OBJ is an instance of object and OBJ properly fills HOLE1, then there is at least one HOLE2 for which HOLE2 is an instance of hole and HOLE2 is a part of HOLE1 and OBJ fills HOLE2 for every HOLE1 and OBJ.",
  "mergeA2283": "The predicate completelyFills is an instance of asymmetric relation.",
  "mergeA2284": "The predicate completelyFills is a subrelation of the predicate partiallyFills.",
  "mergeA2285": "If HOLE is an instance of hole and OBJ1 is an instance of object and OBJ1 completely fills HOLE, then there is at least one OBJ2 for which OBJ2 is an instance of object and OBJ2 is a part of OBJ1 and OBJ2 fills HOLE for every OBJ1 and HOLE.",
  "mergeA2286": "The predicate fills is an instance of asymmetric relation.",
  "mergeA2287": "The predicate fills is a subrelation of the predicate completelyFills.",
  "mergeA2288": "The predicate fills is a subrelation of the predicate properlyFills.",
  "mergeA2291": "The predicate fills is internally related to fillable.",
  "mergeA2292": "If HOLE is an instance of hole and OBJ1 is an instance of object and OBJ2 is an instance of object and OBJ1 fills HOLE and OBJ2 has the attribute fillable, then OBJ1 does not overlap with OBJ2  for every HOLE, OBJ1 and OBJ2.",
  "mergeA2293": "If HOLE is an instance of hole and OBJ1 is an instance of object and OBJ2 is an instance of object and OBJ1 completely fills HOLE and OBJ2 is connected to HOLE, then OBJ2 is connected to OBJ1 for every HOLE, OBJ1 and OBJ2.",
  "mergeA2294": "If HOLE is an instance of hole and OBJ1 is an instance of object and OBJ2 is an instance of object and OBJ1 properly fills HOLE and OBJ2 is connected to OBJ1, then HOLE is connected to OBJ2 for every OBJ1, HOLE and OBJ2.",
  "mergeA2295": "If HOLE1 is an instance of hole and OBJ is an instance of object and HOLE2 is an instance of hole and OBJ fills HOLE1 and HOLE2 is a proper part of HOLE1, then OBJ completely fills HOLE2 for every HOLE1, OBJ and HOLE2.",
  "mergeA2296": "If HOLE is an instance of hole and OBJ1 is an instance of object and OBJ2 is an instance of object and OBJ1 fills HOLE and OBJ2 is a proper part of OBJ1, then OBJ2 properly fills HOLE for every OBJ1, OBJ2 and HOLE.",
  "mergeA2297": "The function HoleSkinFn is an instance of spatial relation.",
  "mergeA2298": "The function HoleSkinFn is an instance of unary function.",
  "mergeA2299": "The function HoleSkinFn is an instance of total valued relation.",
  "mergeA2300": "The function HoleSkinFn is an instance of asymmetric relation.",
  "mergeA2303": "If HOLE is an instance of hole and OBJ1 is an instance of object and OBJ1 is equal to the skin of the hole HOLE and OBJ2 is an instance of object, then there is at least one OBJ3 for which OBJ3 is an instance of object and OBJ3 is a superficial part of the host of the hole HOLE and HOLE meets OBJ3 and OBJ2 overlaps with OBJ3  if and only if OBJ2 overlaps with OBJ1  for every OBJ1, HOLE and OBJ2.",
  "mergeA2304": "The predicate subProcess is an instance of binary predicate.",
  "mergeA2305": "The predicate subProcess is an instance of partial ordering relation.",
  "mergeA2308": "If PROC is an instance of process and SUBPROC is an instance of process and SUBPROC is a subprocess of PROC, then the time when SUBPROC takes place is a temporal part of the time when PROC takes place for every SUBPROC and PROC.",
  "mergeA2309": "Biological process is a subclass of internal change.",
  "mergeA2310": "If PROC is an instance of biological process, then there is at least one OBJ for which OBJ is an instance of organism and the entire process PROC is located on OBJ for every PROC.",
  "mergeA2311": "If ORG is an instance of agent and PROC is an instance of biological process and ORG experiences PROC, then ORG is an instance of organism for every PROC and ORG.",
  "mergeA2312": "Physiologic process is a subclass of biological process.",
  "mergeA2313": "Autonomic process is a subclass of physiologic process.",
  "mergeA2314": "Autonomic process is disjoint from intentional process.",
  "mergeA2315": "Organ or tissue process is a subclass of autonomic process.",
  "mergeA2316": "Organ or tissue process is disjoint from organism process.",
  "mergeA2317": "If PROC is an instance of organ or tissue process, then there is at least one THING for which THING is an instance of object and the entire process PROC is located on THING and THING is an instance of organ or THING is an instance of tissue for every PROC.",
  "mergeA2318": "Organism process is a subclass of physiologic process.",
  "mergeA2319": "Birth is a subclass of organism process.",
  "mergeA2320": "If AGENT is an instance of agent and BIRTH is an instance of birth and AGENT experiences BIRTH, then there is at least one DEATH for which DEATH is an instance of death and AGENT experiences DEATH for every BIRTH and AGENT.",
  "mergeA2321": "Death is a subclass of organism process.",
  "mergeA2323": "Breathing is a subclass of organism process.",
  "mergeA2324": "Breathing is a subclass of autonomic process.",
  "mergeA2325": "Ingesting is a subclass of organism process.",
  "mergeA2327": "Eating is a subclass of ingesting.",
  "mergeA2328": "If FOOD is an instance of object and ACT is an instance of eating and FOOD is a resource for ACT, then FOOD has the attribute solid for every ACT and FOOD.",
  "mergeA2329": "Drinking is a subclass of ingesting.",
  "mergeA2330": "If FOOD is an instance of object and ACT is an instance of drinking and FOOD is a resource for ACT, then FOOD has the attribute liquid for every ACT and FOOD.",
  "mergeA2331": "Digesting is a subclass of organism process.",
  "mergeA2332": "Digesting is a subclass of autonomic process.",
  "mergeA2333": "If ORGANISM is an instance of agent and DIGEST is an instance of digesting and ORGANISM is the agent of DIGEST, then there is at least one INGEST for which INGEST is an instance of ingesting and ORGANISM is the agent of INGEST and the time when INGEST takes place overlaps the time when DIGEST takes place for every ORGANISM and DIGEST.",
  "mergeA2334": "If DIGEST is an instance of digesting, then there is at least one DECOMP for which DECOMP is an instance of chemical decomposition and DECOMP is a subprocess of DIGEST for every DIGEST.",
  "mergeA2335": "Growth is a subclass of autonomic process.",
  "mergeA2336": "Replication is a subclass of organism process.",
  "mergeA2337": "If PARENT is an instance of organism and CHILD is an instance of organism and REP is an instance of replication and PARENT is the agent of REP and CHILD is a result of REP, then CHILD is a parent of PARENT for every REP, CHILD and PARENT.",
  "mergeA2338": "If REP is an instance of replication, then there is at least one BODY for which BODY is an instance of reproductive body and BODY is a result of REP for every REP.",
  "mergeA2339": "Sexual reproduction is a subclass of replication.",
  "mergeA2340": "Sexual reproduction is disjoint from asexual reproduction.",
  "mergeA2341": "If ORGANISM is an instance of organism and REP is an instance of sexual reproduction and ORGANISM is a result of REP, then there is at least one MOTHER and FATHER for which MOTHER is an instance of organism and FATHER is an instance of organism and ORGANISM is the mother of MOTHER and ORGANISM is the father of FATHER for every REP and ORGANISM.",
  "mergeA2342": "Asexual reproduction is a subclass of replication.",
  "mergeA2343": "If ORGANISM is an instance of organism and PARENT1 is an instance of organism and PARENT2 is an instance of organism and REP is an instance of asexual reproduction and ORGANISM is a result of REP and ORGANISM is a parent of PARENT1 and ORGANISM is a parent of PARENT2, then PARENT1 is equal to PARENT2 for every REP, ORGANISM, PARENT1 and PARENT2.",
  "mergeA2344": "Psychological process is a subclass of biological process.",
  "mergeA2345": "If PROCESS is an instance of psychological process, then there is at least one ANIMAL for which ANIMAL is an instance of animal and ANIMAL experiences PROCESS for every PROCESS.",
  "mergeA2346": "Pathologic process is a subclass of biological process.",
  "mergeA2347": "Pathologic process is disjoint from physiologic process.",
  "mergeA2348": "If ORG is an instance of agent and PATH is an instance of pathologic process and ORG experiences PATH, then there is at least one PART and DISEASE for which PART is an instance of object and PART is a part of ORG and DISEASE is an instance of disease or syndrome and PART has the attribute DISEASE for every PATH and ORG.",
  "mergeA2349": "Injuring is a subclass of pathologic process.",
  "mergeA2350": "Injuring is a subclass of damaging.",
  "mergeA2351": "If INJ is an instance of process, then INJ is an instance of damaging and there is at least one ORGANISM for which ORGANISM is an instance of organism and ORGANISM is a participant in INJ if and only if INJ is an instance of injuring for every INJ.",
  "mergeA2352": "Poisoning is a subclass of injuring.",
  "mergeA2353": "If POISON is an instance of poisoning, then there is at least one THING for which THING is a participant in POISON and THING is an instance of organism or THING is an instance of anatomical structure for every POISON.",
  "mergeA2354": "If POISON is an instance of poisoning, then there is at least one SUBSTANCE for which SUBSTANCE is an instance of biologically active substance and SUBSTANCE is an instrument for POISON for every POISON.",
  "mergeA2355": "Natural process is a subclass of process.",
  "mergeA2356": "Natural process is disjoint from intentional process.",
  "mergeA2357": "Intentional process is a subclass of process.",
  "mergeA2358": "If AGENT is an instance of cognitive agent and PROC is an instance of intentional process and AGENT is the agent of PROC, then there is at least one PURP for which PURP is an instance of formula and PROC has the purpose of PURP for AGENT for every PROC and AGENT.",
  "mergeA2359": "If PROC is an instance of intentional process, then there is at least one AGENT for which AGENT is an instance of cognitive agent and AGENT is the agent of PROC for every PROC.",
  "mergeA2361": "Intentional psychological process is a subclass of intentional process.",
  "mergeA2362": "Intentional psychological process is a subclass of psychological process.",
  "mergeA2363": "Recreation or exercise is a subclass of intentional process.",
  "mergeA2364": "Organizational process is a subclass of intentional process.",
  "mergeA2365": "If AGENT is an instance of agent and AGENT is an instance of self connected object and ACT is an instance of organizational process and AGENT is the agent of ACT, then AGENT is an instance of organization or there is at least one ORG for which ORG is an instance of organization and AGENT is a member of ORG for every ACT and AGENT.",
  "mergeA2366": "Election is a subclass of organizational process.",
  "mergeA2367": "Religious process is a subclass of organizational process.",
  "mergeA2368": "If AGENT is an instance of agent and AGENT is an instance of self connected object and ACT is an instance of religious process and AGENT is the agent of ACT, then AGENT is an instance of religious organization or there is at least one ORG for which AGENT is a member of ORG and ORG is an instance of religious organization for every ACT and AGENT.",
  "mergeA2369": "Joining an organization is a subclass of organizational process.",
  "mergeA2371": "Leaving an organization is a subclass of organizational process.",
  "mergeA2372": "Leaving an organization is disjoint from joining an organization.",
  "mergeA2374": "Graduation is a subclass of leaving an organization.",
  "mergeA2375": "If ORG is an instance of agent and GRAD is an instance of graduation and ORG is the agent of GRAD, then ORG is an instance of educational organization for every GRAD and ORG.",
  "mergeA2376": "Matriculation is a subclass of joining an organization.",
  "mergeA2377": "If ORG is an instance of agent and MAT is an instance of matriculation and ORG is the agent of MAT, then ORG is an instance of educational organization for every MAT and ORG.",
  "mergeA2378": "Hiring is a subclass of joining an organization.",
  "mergeA2380": "Terminating employment is a subclass of leaving an organization.",
  "mergeA2382": "Political process is a subclass of organizational process.",
  "mergeA2383": "If PROC is an instance of political process, then there is at least one POL for which POL is an instance of self connected object and POL is an instance of agent and POL is an instance of government or there is at least one GOV for which GOV is an instance of government and POL is a member of GOV and POL is the agent of PROC or POL is a participant in PROC for every PROC.",
  "mergeA2384": "Judicial process is a subclass of political process.",
  "mergeA2385": "If PROCESS is an instance of judicial process and ORG is the agent of PROCESS and ORG is an instance of organization, then ORG is an instance of judicial organization for every PROCESS and ORG.",
  "mergeA2386": "Legal decision is a subclass of judicial process.",
  "mergeA2387": "Legal decision is a subclass of declaring.",
  "mergeA2388": "If DECISION is an instance of legal decision, then there is at least one ACTION for which ACTION is an instance of legal action and DECISION refers to ACTION for every DECISION.",
  "mergeA2389": "If DECISION is an instance of legal decision, then there is at least one DECIDE for which DECIDE is an instance of deciding and the time when DECIDE takes place occurs earlier than the time when DECISION takes place for every DECISION.",
  "mergeA2390": "Military process is a subclass of political process.",
  "mergeA2391": "Military process is a subclass of organizational process.",
  "mergeA2392": "Regulatory process is a subclass of guiding.",
  "mergeA2393": "Managing is a subclass of organizational process.",
  "mergeA2394": "Managing is a subclass of guiding.",
  "mergeA2395": "Planning is a subclass of intentional psychological process.",
  "mergeA2396": "If EVENT is an instance of planning and CBO is a result of EVENT and CBO is an instance of content bearing object, then there is at least one PLAN for which PLAN is an instance of plan and CBO contains information PLAN for every EVENT and CBO.",
  "mergeA2397": "Designing is a subclass of intentional psychological process.",
  "mergeA2398": "Interpreting is a subclass of intentional psychological process.",
  "mergeA2400": "Quantity change is a subclass of internal change.",
  "mergeA2401": "Quantity change is exhaustively partitioned into increasing and decreasing.",
  "mergeA2402": "Increasing is a subclass of quantity change.",
  "mergeA2405": "Heating is a subclass of increasing.",
  "mergeA2406": "Heating is disjoint from cooling.",
  "mergeA2408": "Decreasing is a subclass of quantity change.",
  "mergeA2411": "Cooling is a subclass of decreasing.",
  "mergeA2413": "The predicate moves is an instance of case role.",
  "mergeA2416": "The predicate moves is a subrelation of the predicate involvedInEvent.",
  "mergeA2417": "The predicate changesLocation is an instance of case role.",
  "mergeA2420": "The predicate changesLocation is a subrelation of the predicate moves.",
  "mergeA2421": "If OBJ is an instance of agent and EVENT is an instance of translocation and EVENT changes the location of OBJ, then EVENT is an instance of translocation and OBJ is an instance of object and OBJ is a participant in EVENT or OBJ is the agent of EVENT or OBJ experiences EVENT for every EVENT and OBJ.",
  "mergeA2422": "Motion is a subclass of process.",
  "mergeA2423": "If MOTION is an instance of motion, then there is at least one OBJ for which OBJ is an instance of object and MOTION moves OBJ for every MOTION.",
  "mergeA2426": "Motion upward is a subclass of motion.",
  "mergeA2427": "Motion upward is disjoint from motion downward.",
  "mergeA2428": "Motion downward is a subclass of motion.",
  "mergeA2429": "The predicate path is an instance of case role.",
  "mergeA2430": "The predicate path is a subrelation of the predicate eventPartlyLocated.",
  "mergeA2433": "If PATH1 is an instance of object and PROCESS is an instance of motion and SOURCE is an instance of object and DEST is an instance of object and MEASURE1 is an instance of length measure and DISTANCE is an instance of length measure and OBJ is an instance of object and PATH1 is the path which PROCESS follows and SOURCE is the origin of PROCESS and PROCESS ends at DEST and PATH1 has a length of MEASURE1 and DISTANCE is the distance between SOURCE and DEST and MEASURE1 is not greater than DISTANCE and OBJ is a part of PATH1, then OBJ is between SOURCE and DEST for every PROCESS, MEASURE1, DISTANCE, PATH1, SOURCE, DEST and OBJ.",
  "mergeA2434": "Body motion is a subclass of motion.",
  "mergeA2435": "If OBJ is an instance of object and MOTION is an instance of body motion and MOTION moves OBJ, then OBJ is an instance of body part and OBJ is a participant in MOTION for every MOTION and OBJ.",
  "mergeA2436": "If MOTION is an instance of body motion, then there is at least one AGENT for which AGENT is an instance of organism and AGENT is the agent of MOTION for every MOTION.",
  "mergeA2437": "Vocal cords is a subclass of organ.",
  "mergeA2438": "Vocal cords is a typical part of .",
  "mergeA2439": "Human typically contains vocal cords.",
  "mergeA2440": "Vocal cords is an initial part of human.",
  "mergeA2441": "Vocalizing is a subclass of radiating sound.",
  "mergeA2442": "If VOCAL is an instance of vocalizing, then there is at least one CORD and ORGANISM for which CORD is an instance of vocal cords and CORD is an instrument for VOCAL and CORD is a part of ORGANISM and ORGANISM is an instance of organism for every VOCAL.",
  "mergeA2443": "Speaking is a subclass of linguistic communication.",
  "mergeA2444": "Speaking is a subclass of vocalizing.",
  "mergeA2445": "Ambulating is a subclass of body motion.",
  "mergeA2446": "Ambulating is a subclass of translocation.",
  "mergeA2447": "Ambulating is exhaustively partitioned into walking and running.",
  "mergeA2448": "Walking is a subclass of ambulating.",
  "mergeA2449": "Running is a subclass of ambulating.",
  "mergeA2451": "Swimming is a subclass of body motion.",
  "mergeA2452": "If AGENT is an instance of agent and SWIM is an instance of swimming and AGENT is the agent of SWIM, then there is at least one AREA for which AREA is an instance of water area and AGENT is located at AREA for every SWIM and AGENT.",
  "mergeA2453": "Dancing is a subclass of body motion.",
  "mergeA2454": "Geological process is a subclass of motion.",
  "mergeA2455": "Geological process is a subclass of internal change.",
  "mergeA2456": "Geological process is disjoint from intentional process.",
  "mergeA2457": "Weather process is a subclass of motion.",
  "mergeA2458": "Weather process is disjoint from intentional process.",
  "mergeA2459": "Precipitation is a subclass of weather process.",
  "mergeA2460": "Precipitation is a subclass of water motion.",
  "mergeA2461": "Precipitation is a subclass of falling.",
  "mergeA2462": "If PROCESS is an instance of precipitation, then there is at least one STUFF for which STUFF is an instance of water and STUFF is a participant in PROCESS for every PROCESS.",
  "mergeA2463": "Liquid motion is a subclass of motion.",
  "mergeA2464": "If OBJ is an instance of object and MOTION is an instance of liquid motion and OBJ is a participant in MOTION, then OBJ has the attribute liquid for every MOTION and OBJ.",
  "mergeA2465": "Water motion is a subclass of liquid motion.",
  "mergeA2466": "If MOTION is an instance of water motion, then there is at least one WATER for which WATER is a participant in MOTION and WATER is an instance of water for every MOTION.",
  "mergeA2467": "Gas motion is a subclass of motion.",
  "mergeA2468": "If OBJ is an instance of object and MOTION is an instance of gas motion and OBJ is a participant in MOTION, then OBJ has the attribute gas for every MOTION and OBJ.",
  "mergeA2469": "Wind is a subclass of gas motion.",
  "mergeA2470": "Direction change is a subclass of motion.",
  "mergeA2472": "Transfer is a subclass of translocation.",
  "mergeA2473": "If AGENT is an instance of agent and TRANSFER is an instance of transfer and AGENT is the agent of TRANSFER and PATIENT is a participant in TRANSFER, then AGENT is not equal to PATIENT for every TRANSFER, AGENT and PATIENT.",
  "mergeA2474": "If O1 is an instance of object and D1 is an instance of object and P is an instance of agent and T1 is an instance of translocation and T2 is an instance of translocation and O1 is the origin of T1 and D1 is the origin of T2 and T1 ends at D1 and T2 ends at D2 and P experiences T1 and P experiences T2, then there is at least one T for which T is an instance of translocation and O1 is the origin of T and T ends at D2 and T1 is a subprocess of T and T2 is a subprocess of T and P experiences T and the time when T1 takes place starts the time when T takes place and the time when T2 takes place finishes the time when T takes place for every D1, O1, D2, P, T1 and T2.",
  "mergeA2475": "Carrying is a subclass of transfer.",
  "mergeA2476": "If CARRY is an instance of carrying, then there is at least one ANIMAL for which ANIMAL is an instance of animal and ANIMAL is an instrument for CARRY for every CARRY.",
  "mergeA2477": "Removing is a subclass of transfer.",
  "mergeA2479": "Uncovering is a subclass of removing.",
  "mergeA2480": "Uncovering is disjoint from covering.",
  "mergeA2481": "Putting is a subclass of transfer.",
  "mergeA2483": "Covering is a subclass of putting.",
  "mergeA2484": "Inserting is a subclass of putting.",
  "mergeA2486": "Injecting is a subclass of inserting.",
  "mergeA2487": "If INJECT is an instance of injecting, then there is at least one SUBSTANCE and ANIMAL for which SUBSTANCE is a participant in INJECT and SUBSTANCE is an instance of biologically active substance and SUBSTANCE has the attribute liquid and INJECT ends at ANIMAL and ANIMAL is an instance of animal for every INJECT.",
  "mergeA2488": "Substituting is a subclass of transfer.",
  "mergeA2489": "Substituting is a subclass of dual object process.",
  "mergeA2490": "If SUB is an instance of substituting, then there is at least one PUT, REMOVE, OBJ1, OBJ2 and PLACE for which PLACE is an instance of object and PUT is an instance of putting and REMOVE is an instance of removing and PUT is a subprocess of SUB and REMOVE is a subprocess of SUB and OBJ1 is a participant in REMOVE and PLACE is the origin of REMOVE and OBJ2 is a participant in PUT and PUT ends at PLACE and OBJ1 is not equal to OBJ2 for every SUB.",
  "mergeA2491": "Impelling is a subclass of transfer.",
  "mergeA2492": "Shooting is a subclass of impelling.",
  "mergeA2493": "Touching is a subclass of transfer.",
  "mergeA2495": "The predicate grasps is a subrelation of the predicate meetsSpatially.",
  "mergeA2498": "Grabbing is a subclass of touching.",
  "mergeA2499": "Grabbing is a subclass of attaching.",
  "mergeA2501": "Releasing is a subclass of transfer.",
  "mergeA2503": "Impacting is a subclass of touching.",
  "mergeA2504": "If IMPACT is an instance of impacting and OBJ is a participant in IMPACT, then there is at least one IMPEL for which IMPEL is an instance of impelling and OBJ is a participant in IMPEL and the time when IMPEL takes place occurs earlier than the time when IMPACT takes place for every OBJ and IMPACT.",
  "mergeA2505": "Translocation is a subclass of motion.",
  "mergeA2506": "If PLACE1 is an instance of object and MOVEMENT is an instance of translocation and PLACE1 is the origin of MOVEMENT, then there is at least one PLACE2 and STAGE for which STAGE is an instance of process and PLACE2 is an instance of region and PLACE1 is not equal to PLACE2 and STAGE is a subprocess of MOVEMENT and STAGE is located at PLACE2 for every PLACE1 and MOVEMENT.",
  "mergeA2507": "If T is an instance of translocation, then there is at least one O, D and P for which O is an instance of object and D is an instance of object and P is an instance of object and P is the path which T follows and O is the origin of T and T ends at D for every T.",
  "mergeA2508": "Falling is a subclass of translocation.",
  "mergeA2509": "Falling is a subclass of motion downward.",
  "mergeA2510": "If START is an instance of object and FINISH is an instance of object and DROP is an instance of falling and START is the origin of DROP and DROP ends at FINISH, then FINISH is below to START for every DROP, FINISH and START.",
  "mergeA2511": "Transportation is a subclass of translocation.",
  "mergeA2513": "If TRANS is an instance of transportation, then there is at least one DEVICE for which DEVICE is an instance of transportation device and DEVICE is an instrument for TRANS for every TRANS.",
  "mergeA2514": "Guiding is a subclass of intentional process.",
  "mergeA2515": "Driving is a subclass of guiding.",
  "mergeA2516": "If DRIVE is an instance of driving, then there is at least one VEHICLE for which VEHICLE is an instance of vehicle and VEHICLE is a participant in DRIVE for every DRIVE.",
  "mergeA2517": "Educational process is a subclass of guiding.",
  "mergeA2519": "Change of possession is a subclass of social interaction.",
  "mergeA2523": "Giving is a subclass of change of possession.",
  "mergeA2524": "If AGENT1 is an instance of agent and GIVE is an instance of giving and AGENT1 is the agent of GIVE and GIVE ends at AGENT2 and AGENT2 is an instance of agent and OBJ is a participant in GIVE, then there is at least one GET for which GET is an instance of getting and AGENT2 is the agent of GET and AGENT1 is the origin of GET and OBJ is a participant in GET for every GIVE, AGENT2, AGENT1 and OBJ.",
  "mergeA2525": "If AGENT is an instance of agent and GIVE is an instance of giving and AGENT is the agent of GIVE, then AGENT is the origin of GIVE for every GIVE and AGENT.",
  "mergeA2526": "Funding is a subclass of giving.",
  "mergeA2527": "If FUND is an instance of funding, then there is at least one MONEY for which MONEY is an instance of currency and MONEY is a participant in FUND for every FUND.",
  "mergeA2528": "Unilateral giving is a subclass of giving.",
  "mergeA2529": "If GIVE is an instance of unilateral giving, then TRANS is not an instance of process or TRANS is not an instance of transaction or GIVE is not a subprocess of TRANS for every TRANS for every GIVE.",
  "mergeA2530": "Lending is a subclass of giving.",
  "mergeA2531": "If AGENT1 is an instance of agent and AGENT2 is an instance of agent, then there is at least one LEND for which LEND is an instance of lending and AGENT2 is the agent of LEND and LEND ends at AGENT1 and OBJECT is a participant in LEND if and only if there is at least one BORROW for which BORROW is an instance of borrowing and AGENT1 is the agent of BORROW and AGENT2 is the origin of BORROW and OBJECT is a participant in BORROW for every AGENT2, AGENT1 and OBJECT.",
  "mergeA2532": "Giving back is a subclass of giving.",
  "mergeA2533": "If AGENT is an instance of agent and DEST is an instance of agent and RETURN is an instance of giving back and AGENT is the agent of RETURN and RETURN ends at DEST, then there is at least one GIVE for which GIVE is an instance of giving and DEST is the agent of GIVE and GIVE ends at AGENT and the time when GIVE takes place occurs earlier than the time when RETURN takes place for every DEST, AGENT and RETURN.",
  "mergeA2534": "Getting is a subclass of change of possession.",
  "mergeA2535": "If AGENT is an instance of agent and GET is an instance of getting and AGENT is the agent of GET, then GET ends at AGENT for every GET and AGENT.",
  "mergeA2536": "Unilateral getting is a subclass of getting.",
  "mergeA2538": "If GET is an instance of unilateral getting, then TRANS is not an instance of process or TRANS is not an instance of transaction or GET is not a subprocess of TRANS for every TRANS for every GET.",
  "mergeA2539": "Borrowing is a subclass of getting.",
  "mergeA2540": "Transaction is a subclass of change of possession.",
  "mergeA2541": "Transaction is a subclass of dual object process.",
  "mergeA2542": "If TRANS is an instance of transaction, then there is at least one AGENT1, AGENT2, GIVE1, GIVE2, OBJ1 and OBJ2 for which AGENT1 is an instance of agent and AGENT2 is an instance of agent and GIVE1 is an instance of giving and GIVE2 is an instance of giving and GIVE1 is a subprocess of TRANS and GIVE2 is a subprocess of TRANS and AGENT1 is the agent of GIVE1 and AGENT2 is the agent of GIVE2 and OBJ1 is a participant in GIVE1 and OBJ2 is a participant in GIVE2 and GIVE1 ends at AGENT2 and GIVE2 ends at AGENT1 and AGENT1 is not equal to AGENT2 and OBJ1 is not equal to OBJ2 for every TRANS.",
  "mergeA2543": "Financial transaction is a subclass of transaction.",
  "mergeA2544": "If TRANS is an instance of financial transaction, then there is at least one OBJ for which OBJ is a participant in TRANS and OBJ is an instance of financial instrument for every TRANS.",
  "mergeA2545": "The predicate transactionAmount is an instance of binary predicate.",
  "mergeA2546": "The predicate transactionAmount is an instance of single valued relation.",
  "mergeA2547": "The predicate transactionAmount is an instance of total valued relation.",
  "mergeA2550": "If AMOUNT is an instance of currency measure and TRANS is an instance of financial transaction and TRANS is a transaction with an amount of AMOUNT, then there is at least one OBJ for which OBJ is an instance of physical and OBJ is a participant in TRANS and OBJ has a monetary value of AMOUNT for every TRANS and AMOUNT.",
  "mergeA2551": "Service process is a subclass of social interaction.",
  "mergeA2552": "Commercial service is a subclass of financial transaction.",
  "mergeA2553": "Commercial service is a subclass of service process.",
  "mergeA2554": "If BUSINESS is an instance of commercial service, then there is at least one AGENT for which AGENT is an instance of commercial agent and AGENT is the agent of BUSINESS for every BUSINESS.",
  "mergeA2555": "Betting is a subclass of financial transaction.",
  "mergeA2556": "Buying is a subclass of financial transaction.",
  "mergeA2558": "If AGENT is an instance of agent and BUY is an instance of buying and AGENT is the agent of BUY, then BUY ends at AGENT for every BUY and AGENT.",
  "mergeA2559": "Selling is a subclass of financial transaction.",
  "mergeA2560": "If AGENT1 is an instance of agent and AGENT2 is an instance of agent, then there is at least one SELL for which SELL is an instance of selling and AGENT2 is the agent of SELL and SELL ends at AGENT1 and OBJECT is a participant in SELL if and only if there is at least one BUY for which BUY is an instance of buying and AGENT1 is the agent of BUY and AGENT2 is the origin of BUY and OBJECT is a participant in BUY for every AGENT2, AGENT1 and OBJECT.",
  "mergeA2561": "If AGENT is an instance of agent and SELL is an instance of selling and AGENT is the agent of SELL, then AGENT is the origin of SELL for every SELL and AGENT.",
  "mergeA2562": "Learning is a subclass of intentional psychological process.",
  "mergeA2563": "If AGENT is an instance of agent and LEARN is an instance of learning and AGENT is the agent of LEARN, then AGENT is an instance of cognitive agent for every LEARN and AGENT.",
  "mergeA2565": "Discovering is a subclass of intentional psychological process.",
  "mergeA2566": "If DISCOVER is an instance of discovering and OBJ is a participant in DISCOVER, then there is at least one PURSUE for which PURSUE is an instance of pursuing and the time when PURSUE takes place meets the time when DISCOVER takes place for every OBJ and DISCOVER.",
  "mergeA2568": "Classifying is a subclass of intentional psychological process.",
  "mergeA2569": "Reasoning is a subclass of intentional psychological process.",
  "mergeA2570": "If AGENT is an instance of cognitive agent, then AGENT is capable to do reasoning in role the predicate agent for every AGENT.",
  "mergeA2571": "Selecting is a subclass of intentional psychological process.",
  "mergeA2572": "Deciding is a subclass of selecting.",
  "mergeA2573": "If AGENT is an instance of agent and PROCESS is an instance of process and DECIDE is an instance of deciding and AGENT is the agent of DECIDE and PROCESS is a participant in DECIDE, then PROCESS is an instance of intentional process and AGENT is the agent of PROCESS for every DECIDE, PROCESS and AGENT.",
  "mergeA2574": "Voting is a subclass of deciding.",
  "mergeA2575": "If VOTE is an instance of voting, then there is at least one ELECT for which ELECT is an instance of election and VOTE is a subprocess of ELECT for every VOTE.",
  "mergeA2576": "Judging is a subclass of selecting.",
  "mergeA2578": "Comparing is a subclass of intentional psychological process.",
  "mergeA2579": "Comparing is a subclass of dual object process.",
  "mergeA2580": "Calculating is a subclass of intentional psychological process.",
  "mergeA2581": "Measuring is a subclass of calculating.",
  "mergeA2583": "Counting is a subclass of calculating.",
  "mergeA2585": "Predicting is a subclass of intentional psychological process.",
  "mergeA2587": "Remembering is a subclass of psychological process.",
  "mergeA2589": "Keeping is a subclass of intentional process.",
  "mergeA2590": "If AGENT is an instance of agent and KEEP is an instance of keeping and AGENT is the agent of KEEP and OBJ is a participant in KEEP, then there is at least one PUT for which PUT is an instance of putting and AGENT is the agent of PUT and OBJ is a participant in PUT and the time when PUT takes place occurs earlier than the time when KEEP takes place for every AGENT, OBJ and KEEP.",
  "mergeA2592": "Confining is a subclass of keeping.",
  "mergeA2593": "If CONFINE is an instance of confining, then there is at least one AGENT for which AGENT is an instance of animal and AGENT is a participant in CONFINE for every CONFINE.",
  "mergeA2595": "Maintaining is a subclass of intentional process.",
  "mergeA2596": "Repairing is a subclass of intentional process.",
  "mergeA2598": "If REPAIR is an instance of repairing and OBJ is a participant in REPAIR, then there is at least one DAMAGE for which DAMAGE is an instance of damaging and OBJ is a participant in DAMAGE and the time when DAMAGE takes place occurs earlier than the time when REPAIR takes place for every OBJ and REPAIR.",
  "mergeA2599": "Therapeutic process is a subclass of repairing.",
  "mergeA2600": "If BIO is an instance of object and PROC is an instance of therapeutic process and BIO is a participant in PROC, then BIO is an instance of organism or there is at least one ORG for which ORG is an instance of organism and BIO is a part of ORG for every PROC and BIO.",
  "mergeA2601": "Surgery is a subclass of therapeutic process.",
  "mergeA2602": "If ACT is an instance of surgery and ANIMAL is a participant in ACT, then there is at least one SUBACT for which SUBACT is an instance of cutting and ANIMAL is an instance of animal and ANIMAL is a participant in SUBACT and SUBACT is a subprocess of ACT for every ANIMAL and ACT.",
  "mergeA2603": "Damaging is a subclass of internal change.",
  "mergeA2604": "Damaging is disjoint from repairing.",
  "mergeA2605": "Destruction is a subclass of damaging.",
  "mergeA2606": "If PROCESS is an instance of process, then there is at least one PATIENT for which PATIENT is an instance of physical and PATIENT is a participant in PROCESS and PATIENT exists during the beginning of the interval the time when PROCESS takes place and PATIENT does not exist during the end of the interval the time when PROCESS takes place if and only if PROCESS is an instance of destruction for every PROCESS.",
  "mergeA2607": "Killing is a subclass of destruction.",
  "mergeA2608": "If AGENT is an instance of agent and KILL is an instance of killing and AGENT is the agent of KILL and PATIENT is a participant in KILL, then AGENT is an instance of organism and PATIENT is an instance of organism for every KILL, AGENT and PATIENT.",
  "mergeA2610": "If OBJ is an instance of agent and KILL is an instance of killing and OBJ is a participant in KILL, then there is at least one DEATH for which DEATH is an instance of death and OBJ experiences DEATH and KILL causes DEATH for every OBJ and KILL.",
  "mergeA2611": "Poking is a subclass of intentional process.",
  "mergeA2613": "Cutting is a subclass of poking.",
  "mergeA2614": "Attaching is a subclass of dual object process.",
  "mergeA2615": "Attaching is disjoint from detaching.",
  "mergeA2618": "If ATTACH is an instance of attaching, then there is at least one OBJ for which OBJ is an instance of corpuscular object and OBJ is a participant in ATTACH for every ATTACH.",
  "mergeA2619": "Detaching is a subclass of dual object process.",
  "mergeA2621": "If DETACH is an instance of detaching, then there is at least one OBJ for which OBJ is an instance of corpuscular object and OBJ is a participant in DETACH for every DETACH.",
  "mergeA2622": "Ungrasping is a subclass of detaching.",
  "mergeA2624": "Combining is a subclass of dual object process.",
  "mergeA2626": "If COMBINE is an instance of combining, then there is at least one OBJ for which OBJ is an instance of self connected object and OBJ is a participant in COMBINE for every COMBINE.",
  "mergeA2627": "Separating is a subclass of dual object process.",
  "mergeA2628": "Separating is disjoint from combining.",
  "mergeA2629": "If SEPARATE is an instance of separating, then there is at least one OBJ for which OBJ is an instance of self connected object and OBJ is a participant in SEPARATE for every SEPARATE.",
  "mergeA2630": "Chemical process is a subclass of internal change.",
  "mergeA2631": "Chemical process is exhaustively partitioned into chemical synthesis and chemical decomposition.",
  "mergeA2632": "If STUFF is an instance of object and PROC is an instance of chemical process and STUFF is a resource for PROC or STUFF is a result of PROC, then STUFF is an instance of pure substance for every PROC and STUFF.",
  "mergeA2633": "Chemical synthesis is a subclass of chemical process.",
  "mergeA2634": "Chemical synthesis is a subclass of combining.",
  "mergeA2635": "If PROC is an instance of process and SUBSTANCE1 is a resource for PROC and SUBSTANCE2 is a result of PROC and SUBSTANCE1 is an instance of elemental substance and SUBSTANCE2 is an instance of compound substance, then PROC is an instance of chemical synthesis for every SUBSTANCE1, SUBSTANCE2 and PROC.",
  "mergeA2636": "There is at least one ELEMENT1, ELEMENT2 and PROCESS for which ELEMENT1 is an instance of elemental substance and ELEMENT2 is an instance of elemental substance and ELEMENT1 is not equal to ELEMENT2 and PROCESS is an instance of chemical synthesis and ELEMENT1 is a resource for PROCESS and ELEMENT2 is a resource for PROCESS and COMPOUND is a result of PROCESS if and only if COMPOUND is an instance of compound substance for every COMPOUND.",
  "mergeA2637": "Chemical decomposition is a subclass of chemical process.",
  "mergeA2638": "Chemical decomposition is a subclass of separating.",
  "mergeA2639": "If PROC is an instance of process and SUBSTANCE1 is a resource for PROC and SUBSTANCE2 is a result of PROC and SUBSTANCE1 is an instance of compound substance and SUBSTANCE2 is an instance of elemental substance, then PROC is an instance of chemical decomposition for every SUBSTANCE1, SUBSTANCE2 and PROC.",
  "mergeA2640": "Combustion is a subclass of chemical decomposition.",
  "mergeA2641": "If COMBUSTION is an instance of combustion, then there is at least one HEAT and LIGHT for which HEAT is an instance of heating and LIGHT is an instance of radiating light and HEAT is a subprocess of COMBUSTION and LIGHT is a subprocess of COMBUSTION for every COMBUSTION.",
  "mergeA2642": "Flammable is an instance of physical attribute.",
  "mergeA2643": "If X is an instance of object and X has the attribute flammable, then X is capable to do combustion in role the predicate patient for every X.",
  "mergeA2644": "Internal change is a subclass of process.",
  "mergeA2646": "Surface change is a subclass of internal change.",
  "mergeA2648": "Coloring is a subclass of surface change.",
  "mergeA2650": "Shape change is a subclass of internal change.",
  "mergeA2652": "Content development is a subclass of intentional process.",
  "mergeA2653": "If DEVELOP is an instance of content development, then there is at least one OBJ for which OBJ is an instance of content bearing object and OBJ is a result of DEVELOP for every DEVELOP.",
  "mergeA2654": "Reading is a subclass of content development.",
  "mergeA2656": "If READ is an instance of reading, then there is at least one TEXT and PROP for which PROP is an instance of proposition and TEXT is an instance of text and TEXT contains information PROP and READ realizes the content of PROP for every READ.",
  "mergeA2657": "Writing is a subclass of content development.",
  "mergeA2658": "Encoding is a subclass of writing.",
  "mergeA2659": "Decoding is a subclass of writing.",
  "mergeA2660": "Decoding is disjoint from encoding.",
  "mergeA2662": "Translating is a subclass of content development.",
  "mergeA2663": "Translating is a subclass of dual object process.",
  "mergeA2664": "If EXPRESSION1 is an instance of linguistic expression and EXPRESSION2 is an instance of linguistic expression and TRANSLATE is an instance of translating and EXPRESSION1 is a participant in TRANSLATE and EXPRESSION2 is a result of TRANSLATE, then there is at least one LANGUAGE1, LANGUAGE2 and ENTITY for which LANGUAGE1 is an instance of language and LANGUAGE2 is an instance of language and EXPRESSION1 represents ENTITY in the language LANGUAGE1 and EXPRESSION2 represents ENTITY in the language LANGUAGE2 and LANGUAGE1 is not equal to LANGUAGE2 for every TRANSLATE, EXPRESSION1 and EXPRESSION2.",
  "mergeA2665": "Wetting is a subclass of putting.",
  "mergeA2667": "If WET is an instance of wetting, then there is at least one OBJ for which OBJ is an instance of object and OBJ has the attribute liquid and OBJ is a participant in WET for every WET.",
  "mergeA2668": "Drying is a subclass of removing.",
  "mergeA2670": "Creation is a subclass of internal change.",
  "mergeA2672": "If ACTION is an instance of creation, then there is at least one RESULT for which RESULT is a result of ACTION for every ACTION.",
  "mergeA2673": "If PROCESS is an instance of process, then there is at least one PATIENT for which PATIENT is an instance of physical and PATIENT is a participant in PROCESS and PATIENT exists during the end of the interval the time when PROCESS takes place and PATIENT does not exist during the beginning of the interval the time when PROCESS takes place if and only if PROCESS is an instance of creation for every PROCESS.",
  "mergeA2674": "Making is a subclass of creation.",
  "mergeA2675": "Making is a subclass of intentional process.",
  "mergeA2676": "Constructing is a subclass of making.",
  "mergeA2677": "ARTIFACT is an instance of stationary artifact if and only if there is at least one BUILD for which BUILD is an instance of constructing and ARTIFACT is a result of BUILD for every ARTIFACT.",
  "mergeA2678": "Manufacture is a subclass of making.",
  "mergeA2679": "Publication is a subclass of manufacture.",
  "mergeA2680": "Publication is a subclass of content development.",
  "mergeA2681": "If PUB is an instance of publication and TEXT is a participant in PUB, then TEXT is an instance of text for every PUB and TEXT.",
  "mergeA2682": "Cooking is a subclass of making.",
  "mergeA2684": "Pursuing is a subclass of intentional process.",
  "mergeA2685": "If PURSUE is an instance of pursuing, then there is at least one OBJ for which OBJ is an instance of object and OBJ is a participant in PURSUE for every PURSUE.",
  "mergeA2688": "Hunting is a subclass of pursuing.",
  "mergeA2689": "If H is an instance of hunting, then there is at least one T for which T is an instance of animal and T is a participant in H for every H.",
  "mergeA2691": "Investigating is a subclass of intentional psychological process.",
  "mergeA2692": "If INVESTIGATE is an instance of investigating and PROP is a participant in INVESTIGATE, then PROP is an instance of formula for every INVESTIGATE and PROP.",
  "mergeA2694": "Experimenting is a subclass of investigating.",
  "mergeA2695": "Diagnostic process is a subclass of investigating.",
  "mergeA2697": "Social interaction is a subclass of intentional process.",
  "mergeA2698": "If INTERACTION is an instance of social interaction, then there is at least one AGENT1 and AGENT2 for which AGENT1 is involved in INTERACTION and AGENT2 is involved in INTERACTION and AGENT1 is an instance of agent and AGENT2 is an instance of agent and AGENT1 is not equal to AGENT2 for every INTERACTION.",
  "mergeA2699": "Pretending is a subclass of social interaction.",
  "mergeA2701": "Communication is a subclass of social interaction.",
  "mergeA2702": "Communication is a subclass of content bearing process.",
  "mergeA2703": "Communication is exhaustively partitioned into stating, supposing, directing, committing, expressing and declaring.",
  "mergeA2705": "If COMMUNICATE is an instance of communication, then there is at least one PHYS, ENTITY, AGENT1 and AGENT2 for which PHYS refers to ENTITY and PHYS is a participant in COMMUNICATE and AGENT1 is an instance of cognitive agent and AGENT1 is the agent of COMMUNICATE and AGENT2 is an instance of cognitive agent and COMMUNICATE ends at AGENT2 for every COMMUNICATE.",
  "mergeA2706": "Disseminating is a subclass of communication.",
  "mergeA2707": "If DISSEMINATE is an instance of disseminating, then there is at least one AGENT1 and AGENT2 for which DISSEMINATE ends at AGENT1 and AGENT1 is an instance of cognitive agent and DISSEMINATE ends at AGENT2 and AGENT2 is an instance of cognitive agent and AGENT1 is not equal to AGENT2 for every DISSEMINATE.",
  "mergeA2708": "Demonstrating is a subclass of disseminating.",
  "mergeA2709": "If DEMO is an instance of demonstrating, then there is at least one PERSON for which PERSON is an instance of human and PERSON attends DEMO for every DEMO.",
  "mergeA2710": "The predicate attends is a subrelation of the predicate experiencer.",
  "mergeA2713": "Gesture is a subclass of communication.",
  "mergeA2714": "Gesture is a subclass of body motion.",
  "mergeA2715": "Advertising is a subclass of disseminating.",
  "mergeA2717": "Expressing is a subclass of communication.",
  "mergeA2718": "If AGENT is an instance of agent and EXPRESS is an instance of expressing and AGENT is the agent of EXPRESS, then there is at least one STATE for which STATE is an instance of state of mind and AGENT has the attribute STATE and EXPRESS represents STATE for every AGENT and EXPRESS.",
  "mergeA2719": "Linguistic communication is a subclass of communication.",
  "mergeA2720": "If COMMUNICATE is an instance of linguistic communication, then there is at least one OBJ for which COMMUNICATE represents OBJ and OBJ is an instance of linguistic expression and OBJ is a participant in COMMUNICATE for every COMMUNICATE.",
  "mergeA2721": "Stating is a subclass of linguistic communication.",
  "mergeA2723": "Disagreeing is a subclass of stating.",
  "mergeA2724": "If DIS is an instance of disagreeing, then there is at least one A1, A2, STATE1, STATE2, STMT1 and STMT2 for which STATE1 is an instance of process and STATE1 is an instance of content bearing physical and STATE2 is an instance of process and STATE2 is an instance of content bearing physical and A1 is an instance of agent and A2 is an instance of agent and STMT1 is an instance of proposition and STMT2 is an instance of proposition and STATE1 is a subprocess of DIS and STATE2 is a subprocess of DIS and A1 is the agent of STATE1 and A2 is the agent of STATE2 and STATE1 contains information STMT1 and STATE2 contains information STMT2 and STMT1 is not consistent with STMT2 for every DIS.",
  "mergeA2725": "Supposing is a subclass of linguistic communication.",
  "mergeA2726": "Directing is a subclass of linguistic communication.",
  "mergeA2727": "Ordering is a subclass of directing.",
  "mergeA2728": "If FORMULA is an instance of formula and ORDER is an instance of ordering and FORMULA is a participant in ORDER, then the statement FORMULA has the modal force of obligation for every ORDER and FORMULA.",
  "mergeA2729": "Requesting is a subclass of directing.",
  "mergeA2730": "If AGENT is an instance of cognitive agent and REQUEST is an instance of requesting and AGENT is the agent of REQUEST and FORMULA is a participant in REQUEST and FORMULA is an instance of formula, then AGENT desires FORMULA for every REQUEST, AGENT and FORMULA.",
  "mergeA2731": "Questioning is a subclass of directing.",
  "mergeA2733": "Committing is a subclass of linguistic communication.",
  "mergeA2734": "If COMMIT is an instance of committing and FORMULA is a participant in COMMIT and FORMULA is an instance of formula, then the statement FORMULA has the modal force of promise for every COMMIT and FORMULA.",
  "mergeA2735": "Offering is a subclass of committing.",
  "mergeA2736": "Declaring is a subclass of linguistic communication.",
  "mergeA2737": "If DECLARE is an instance of declaring, then there is at least one PROP and NORM for which NORM is an instance of objective norm and PROP is an instance of formula and DECLARE brings it about that PROP has the norm NORM or DECLARE brings it about that PROP does not have the norm NORM for every DECLARE.",
  "mergeA2738": "Naming is a subclass of declaring.",
  "mergeA2740": "Cooperation is a subclass of social interaction.",
  "mergeA2741": "If COOPERATE is an instance of cooperation, then there is at least one PURP for which PURP is an instance of formula and if AGENT is an instance of cognitive agent and AGENT is the agent of COOPERATE, then COOPERATE has the purpose of PURP for AGENT for every AGENT for every COOPERATE.",
  "mergeA2742": "Meeting is a subclass of social interaction.",
  "mergeA2745": "Contest is a subclass of social interaction.",
  "mergeA2746": "If CONTEST is an instance of contest, then there is at least one AGENT1, AGENT2, PURP1 and PURP2 for which AGENT1 is an instance of cognitive agent and AGENT2 is an instance of cognitive agent and PURP1 is an instance of formula and PURP2 is an instance of formula and AGENT1 is the agent of CONTEST and AGENT2 is the agent of CONTEST and CONTEST has the purpose of PURP1 for AGENT1 and CONTEST has the purpose of PURP2 for AGENT2 and AGENT1 is not equal to AGENT2 and PURP1 is not equal to PURP2 for every CONTEST.",
  "mergeA2747": "Violent contest is a subclass of contest.",
  "mergeA2748": "War is a subclass of violent contest.",
  "mergeA2749": "If WAR is an instance of war, then there is at least one BATTLE for which BATTLE is an instance of battle and BATTLE is a subprocess of WAR for every WAR.",
  "mergeA2750": "If AGENT is an instance of agent and AGENT is an instance of collection and WAR is an instance of war and AGENT is the agent of WAR, then AGENT is an instance of geopolitical area or AGENT is an instance of organization and if MEMBER is an instance of self connected object and MEMBER is a member of AGENT, then MEMBER is an instance of geopolitical area for every MEMBER for every WAR and AGENT.",
  "mergeA2751": "Battle is a subclass of violent contest.",
  "mergeA2752": "If BATTLE is an instance of battle, then there is at least one WAR for which WAR is an instance of war and BATTLE is a subprocess of WAR for every BATTLE.",
  "mergeA2753": "If BATTLE is an instance of battle, then there is at least one ATTACK for which ATTACK is an instance of violent contest and ATTACK is a subprocess of BATTLE for every BATTLE.",
  "mergeA2754": "Game is a subclass of contest.",
  "mergeA2755": "Game is a subclass of recreation or exercise.",
  "mergeA2756": "Sport is a subclass of game.",
  "mergeA2757": "Legal action is a subclass of contest.",
  "mergeA2758": "Maneuver is a subclass of intentional process.",
  "mergeA2759": "If MOVE is an instance of maneuver, then there is at least one CONTEST for which CONTEST is an instance of contest and MOVE is a subprocess of CONTEST for every MOVE.",
  "mergeA2760": "Attack is a subclass of maneuver.",
  "mergeA2761": "If ATTACK is an instance of attack, then there is at least one CONTEST for which CONTEST is an instance of violent contest and ATTACK is a subprocess of CONTEST for every ATTACK.",
  "mergeA2763": "Defensive maneuver is a subclass of maneuver.",
  "mergeA2764": "If DEFENSE is an instance of defensive maneuver, then there is at least one CONTEST for which CONTEST is an instance of violent contest and DEFENSE is a subprocess of CONTEST for every DEFENSE.",
  "mergeA2766": "If MANEUVER is an instance of maneuver and CONTEST is an instance of violent contest and MANEUVER is a subprocess of CONTEST, then MANEUVER is an instance of attack or MANEUVER is an instance of defensive maneuver for every CONTEST and MANEUVER.",
  "mergeA2767": "Perception is a subclass of psychological process.",
  "mergeA2768": "If AGENT is an instance of agent and PERCEPT is an instance of perception and AGENT is the agent of PERCEPT, then AGENT is an instance of animal for every PERCEPT and AGENT.",
  "mergeA2769": "If AGENT is an instance of sentient agent, then AGENT is capable to do perception in role the predicate experiencer for every AGENT.",
  "mergeA2770": "Seeing is a subclass of perception.",
  "mergeA2774": "Looking is a subclass of seeing.",
  "mergeA2775": "Looking is a subclass of intentional process.",
  "mergeA2776": "Smelling is a subclass of perception.",
  "mergeA2777": "If OBJ is an instance of object and SMELL is an instance of smelling and OBJ is a participant in SMELL, then there is at least one ATTR for which ATTR is an instance of olfactory attribute and OBJ has the attribute ATTR for every SMELL and OBJ.",
  "mergeA2778": "Tasting is a subclass of perception.",
  "mergeA2779": "If OBJ is an instance of object and TASTE is an instance of tasting and OBJ is a participant in TASTE, then there is at least one ATTR for which ATTR is an instance of taste attribute and OBJ has the attribute ATTR for every TASTE and OBJ.",
  "mergeA2780": "Hearing is a subclass of perception.",
  "mergeA2781": "If OBJ is an instance of object and HEAR is an instance of hearing and OBJ is a participant in HEAR, then there is at least one ATTR for which ATTR is an instance of sound attribute and OBJ has the attribute ATTR for every HEAR and OBJ.",
  "mergeA2782": "Sound attribute is a subclass of perceptual attribute.",
  "mergeA2783": "Audible is an instance of sound attribute.",
  "mergeA2785": "Listening is a subclass of hearing.",
  "mergeA2786": "Listening is a subclass of intentional process.",
  "mergeA2787": "Tactile perception is a subclass of perception.",
  "mergeA2788": "If TACTILE is an instance of tactile perception, then there is at least one TOUCH for which TOUCH is an instance of touching and TOUCH is a subprocess of TACTILE for every TACTILE.",
  "mergeA2789": "Radiating is a subclass of motion.",
  "mergeA2790": "Radiating light is a subclass of radiating electromagnetic.",
  "mergeA2791": "If REGION is an instance of object, then REGION has the attribute illuminated if and only if there is at least one EMIT for which EMIT is an instance of radiating light and REGION is a participant in EMIT and REGION is an instance of region for every REGION.",
  "mergeA2792": "Radiating infrared is a subclass of radiating electromagnetic.",
  "mergeA2793": "Radiating x ray is a subclass of radiating electromagnetic.",
  "mergeA2794": "Radiating sound is a subclass of radiating.",
  "mergeA2795": "If SOUND is an instance of agent and EMIT is an instance of radiating sound and SOUND is the agent of EMIT, then there is at least one ATTR for which ATTR is an instance of sound attribute and SOUND has the attribute ATTR for every EMIT and SOUND.",
  "mergeA2796": "Making music is a subclass of radiating sound.",
  "mergeA2797": "Making music is exhaustively partitioned into making instrumental music and making vocal music.",
  "mergeA2798": "Making instrumental music is a subclass of making music.",
  "mergeA2799": "If M is an instance of making instrumental music, then there is at least one I for which I is an instance of musical instrument and I is an instrument for M for every M.",
  "mergeA2800": "Making vocal music is a subclass of making music.",
  "mergeA2801": "Making vocal music is a subclass of vocalizing.",
  "mergeA2802": "Singing is a subclass of making vocal music.",
  "mergeA2803": "If S is an instance of singing, then there is at least one W for which W is a participant in S and W is an instance of word for every S.",
  "mergeA2804": "Radiating electromagnetic is a subclass of radiating.",
  "mergeA2805": "Radiating nuclear is a subclass of radiating.",
  "mergeA2806": "State change is a subclass of internal change.",
  "mergeA2808": "The predicate atomicNumber is an instance of binary predicate.",
  "mergeA2809": "The predicate atomicNumber is an instance of asymmetric relation.",
  "mergeA2813": "The predicate boilingPoint is an instance of binary predicate.",
  "mergeA2819": "The predicate meltingPoint is an instance of binary predicate.",
  "mergeA2824": "If MELT is an instance of temperature measure and TYPE is a subclass of pure substance and BOIL is an instance of temperature measure and MELT is the melting point of TYPE and BOIL is the boiling point of TYPE, then BOIL is greater than or equal to MELT for every TYPE, BOIL and MELT.",
  "mergeA2825": "Melting is a subclass of state change.",
  "mergeA2826": "If MELT is an instance of melting, then there is at least one HEAT for which HEAT is an instance of heating and HEAT is a subprocess of MELT for every MELT.",
  "mergeA2828": "Boiling is a subclass of state change.",
  "mergeA2829": "If BOIL is an instance of boiling, then there is at least one HEAT for which HEAT is an instance of heating and HEAT is a subprocess of BOIL for every BOIL.",
  "mergeA2831": "Evaporating is a subclass of state change.",
  "mergeA2833": "Condensing is a subclass of state change.",
  "mergeA2834": "If COND is an instance of condensing, then there is at least one COOL for which COOL is an instance of cooling and COOL is a subprocess of COND for every COND.",
  "mergeA2836": "Freezing is a subclass of state change.",
  "mergeA2837": "If FREEZE is an instance of freezing, then there is at least one COOL for which COOL is an instance of cooling and COOL is a subprocess of FREEZE for every FREEZE.",
  "mergeA2839": "Astronomical body is a subclass of object.",
  "mergeA2840": "Astronomical body is disjoint from geographic area.",
  "mergeA2841": "Geographic area is a subclass of region.",
  "mergeA2842": "Geographic area is exhaustively partitioned into water area and land area.",
  "mergeA2843": "Localizable place is a subclass of geographic area.",
  "mergeA2844": "The predicate geographicSubregion is an instance of binary predicate.",
  "mergeA2845": "The predicate geographicSubregion is an instance of transitive relation.",
  "mergeA2846": "The predicate geographicSubregion is an instance of asymmetric relation.",
  "mergeA2847": "The predicate geographicSubregion is a subrelation of the predicate properPart.",
  "mergeA2848": "The predicate geographicSubregion is a subrelation of the predicate located.",
  "mergeA2851": "Geopolitical area is a subclass of geographic area.",
  "mergeA2852": "Geopolitical area is a subclass of agent.",
  "mergeA2853": "If PERSON is an instance of human and AREA is an instance of geopolitical area and PERSON is the leader of the government of AREA, then PERSON is the leader of AREA for every AREA and PERSON.",
  "mergeA2854": "If PERSON is an instance of human and AREA is an instance of geopolitical area and PERSON is the leader of AREA, then PERSON is the leader of the government of AREA for every AREA and PERSON.",
  "mergeA2855": "If EVENT is an instance of election and AGENT is the agent of EVENT and AGENT is an instance of geopolitical area, then EVENT is an instance of political process for every AGENT and EVENT.",
  "mergeA2857": "The predicate geopoliticalSubdivision is an instance of asymmetric relation.",
  "mergeA2858": "The predicate geopoliticalSubdivision is an instance of transitive relation.",
  "mergeA2859": "The predicate geopoliticalSubdivision is a subrelation of the predicate geographicSubregion.",
  "mergeA2862": "Water area is a subclass of geographic area.",
  "mergeA2863": "If AREA is an instance of water area, then there is at least one BED, HOLE and WATER for which HOLE is an instance of hole and BED is an instance of object and the host of the hole HOLE is equal to BED and WATER is an instance of water and WATER properly fills HOLE and the mereological sum of BED and WATER is equal to AREA for every AREA.",
  "mergeA2864": "Salt water area is a subclass of water area.",
  "mergeA2865": "Salt water area is disjoint from fresh water area.",
  "mergeA2866": "Fresh water area is a subclass of water area.",
  "mergeA2867": "Land area is a subclass of geographic area.",
  "mergeA2868": "If LAND1 is an instance of land area, then there is at least one LAND2 for which LAND2 is an instance of object and LAND1 is a part of LAND2 and LAND2 is an instance of continent or LAND2 is an instance of island for every LAND1.",
  "mergeA2869": "Shore area is a subclass of land area.",
  "mergeA2870": "If BANK is an instance of shore area, then there is at least one WATER for which WATER is an instance of water area and BANK meets WATER for every BANK.",
  "mergeA2871": "Continent is a subclass of land area.",
  "mergeA2872": "The cardinality of continent is equal to 7.",
  "mergeA2873": "Island is a subclass of land area.",
  "mergeA2874": "If ISLAND is an instance of island, then AREA is not an instance of object or PART1 is not an instance of object or PART2 is not an instance of object or AREA is not an instance of land area or PART1 is not a part of ISLAND or PART2 is not a part of AREA or ISLAND is a part of AREA or AREA is a part of ISLAND or PART1 does not meet PART2 for every AREA, PART1 and PART2 for every ISLAND.",
  "mergeA2875": "If ISLE is an instance of island and AREA is an instance of geographic area and ISLE meets AREA, then AREA is not an instance of land area for every ISLE and AREA.",
  "mergeA2876": "If ISLE is an instance of island, then there is at least one WATER for which WATER is an instance of water area and ISLE meets WATER for every ISLE.",
  "mergeA2877": "Nation is a subclass of geopolitical area.",
  "mergeA2878": "Nation is a subclass of land area.",
  "mergeA2879": "State or province is a subclass of geopolitical area.",
  "mergeA2880": "State or province is a subclass of land area.",
  "mergeA2881": "If STATE is an instance of state or province, then there is at least one LAND for which LAND is an instance of nation and STATE is a proper part of LAND for every STATE.",
  "mergeA2882": "City is a subclass of geopolitical area.",
  "mergeA2883": "City is a subclass of land area.",
  "mergeA2884": "County is a subclass of geopolitical area.",
  "mergeA2885": "County is a subclass of land area.",
  "mergeA2886": "If STATE is an instance of county, then there is at least one LAND for which LAND is an instance of state or province and STATE is a proper part of LAND for every STATE.",
  "mergeA2887": "Transitway is a subclass of region.",
  "mergeA2888": "Transitway is a subclass of self connected object.",
  "mergeA2889": "Land transitway is a subclass of transitway.",
  "mergeA2890": "Land transitway is a subclass of land area.",
  "mergeA2892": "Roadway is a subclass of land transitway.",
  "mergeA2893": "Water is a subclass of compound substance.",
  "mergeA2894": "Mineral is a subclass of substance.",
  "mergeA2895": "The predicate developmentalForm is an instance of binary predicate.",
  "mergeA2896": "The predicate developmentalForm is an instance of asymmetric relation.",
  "mergeA2897": "The predicate developmentalForm is an instance of transitive relation.",
  "mergeA2898": "The predicate developmentalForm is a subrelation of the predicate attribute.",
  "mergeA2902": "Organic object is a subclass of corpuscular object.",
  "mergeA2903": "Organic object is a subclass of organic thing.",
  "mergeA2904": "Organic object is exhaustively partitioned into organism and anatomical structure.",
  "mergeA2905": "Organism is a subclass of organic object.",
  "mergeA2906": "Organism is a subclass of agent.",
  "mergeA2907": "Organism is disjoint from artifact.",
  "mergeA2908": "Organism is exhaustively partitioned into animal, plant and microorganism.",
  "mergeA2909": "If ORGANISM is an instance of organism, then there is at least one BIRTH for which BIRTH is an instance of birth and ORGANISM experiences BIRTH for every ORGANISM.",
  "mergeA2910": "The predicate inhabits is an instance of binary predicate.",
  "mergeA2911": "The predicate inhabits is an instance of asymmetric relation.",
  "mergeA2915": "The predicate home is a subrelation of the predicate inhabits.",
  "mergeA2918": "The predicate stays is a subrelation of the predicate inhabits.",
  "mergeA2919": "The predicate stays and the predicate home are disjoint.",
  "mergeA2922": "Plant is a subclass of organism.",
  "mergeA2923": "Flowering plant is a subclass of plant.",
  "mergeA2924": "Non flowering plant is a subclass of plant.",
  "mergeA2925": "Non flowering plant is disjoint from flowering plant.",
  "mergeA2926": "Non flowering plant is disjointly decomposed into alga, fern and moss.",
  "mergeA2927": "Alga is a subclass of non flowering plant.",
  "mergeA2928": "If ALGA is an instance of alga, then there is at least one WATER for which ALGA lives in WATER and WATER is an instance of water for every ALGA.",
  "mergeA2929": "Fungus is a subclass of organism.",
  "mergeA2930": "If OBJ is an instance of object and FUNGUS is an instance of fungus and FUNGUS lives in OBJ, then OBJ is an instance of organism for every FUNGUS and OBJ.",
  "mergeA2931": "Moss is a subclass of non flowering plant.",
  "mergeA2932": "Fern is a subclass of non flowering plant.",
  "mergeA2933": "Animal is a subclass of organism.",
  "mergeA2934": "Animal is exhaustively partitioned into vertebrate and invertebrate.",
  "mergeA2935": "Microorganism is a subclass of organism.",
  "mergeA2936": "Bacterium is a subclass of microorganism.",
  "mergeA2937": "If BACTERIUM is an instance of bacterium, then there is at least one CELL1 for which CELL1 is a component of BACTERIUM and CELL1 is an instance of cell and if CELL2 is a component of BACTERIUM and CELL2 is an instance of cell, then CELL1 is equal to CELL2 for every CELL2 for every BACTERIUM.",
  "mergeA2938": "If OBJ is an instance of object and BACTERIUM is an instance of bacterium and BACTERIUM lives in OBJ, then OBJ is an instance of organism for every BACTERIUM and OBJ.",
  "mergeA2939": "Virus is a subclass of microorganism.",
  "mergeA2940": "If OBJ is an instance of object and VIRUS is an instance of virus and VIRUS lives in OBJ, then OBJ is an instance of organism for every VIRUS and OBJ.",
  "mergeA2941": "If VIRUS is an instance of virus and PROC is an instance of replication and VIRUS is the agent of PROC, then there is at least one CELL for which PROC is located at CELL and CELL is an instance of cell for every VIRUS and PROC.",
  "mergeA2942": "Vertebrate is a subclass of animal.",
  "mergeA2943": "Invertebrate is a subclass of animal.",
  "mergeA2944": "Invertebrate is disjointly decomposed into worm, mollusk and arthropod.",
  "mergeA2945": "Worm is a subclass of invertebrate.",
  "mergeA2946": "Mollusk is a subclass of invertebrate.",
  "mergeA2947": "Arthropod is a subclass of invertebrate.",
  "mergeA2948": "Arthropod is disjointly decomposed into arachnid, myriapod, insect and crustacean.",
  "mergeA2949": "Arachnid is a subclass of arthropod.",
  "mergeA2950": "Myriapod is a subclass of arthropod.",
  "mergeA2951": "Insect is a subclass of arthropod.",
  "mergeA2952": "Crustacean is a subclass of arthropod.",
  "mergeA2953": "Cold blooded vertebrate is a subclass of vertebrate.",
  "mergeA2954": "Cold blooded vertebrate is disjointly decomposed into amphibian, fish and reptile.",
  "mergeA2955": "Warm blooded vertebrate is a subclass of vertebrate.",
  "mergeA2956": "Warm blooded vertebrate is disjoint from cold blooded vertebrate.",
  "mergeA2957": "Amphibian is a subclass of cold blooded vertebrate.",
  "mergeA2958": "Bird is a subclass of warm blooded vertebrate.",
  "mergeA2959": "Bird is disjoint from mammal.",
  "mergeA2960": "Fish is a subclass of cold blooded vertebrate.",
  "mergeA2961": "If FISH is an instance of fish, then there is at least one WATER for which FISH lives in WATER and WATER is an instance of water for every FISH.",
  "mergeA2962": "Mammal is a subclass of warm blooded vertebrate.",
  "mergeA2963": "Mammal is disjointly decomposed into aquatic mammal, hoofed mammal, marsupial, rodent and primate.",
  "mergeA2964": "Aquatic mammal is a subclass of mammal.",
  "mergeA2965": "Hoofed mammal is a subclass of mammal.",
  "mergeA2966": "Marsupial is a subclass of mammal.",
  "mergeA2967": "Carnivore is a subclass of mammal.",
  "mergeA2968": "If CARNIVORE is an instance of carnivore and EAT is an instance of eating and CARNIVORE is the agent of EAT and PREY is a participant in EAT, then PREY is an instance of animal for every CARNIVORE, EAT and PREY.",
  "mergeA2969": "Canine is a subclass of carnivore.",
  "mergeA2970": "Canine is disjoint from feline.",
  "mergeA2971": "Feline is a subclass of carnivore.",
  "mergeA2972": "Rodent is a subclass of mammal.",
  "mergeA2973": "Primate is a subclass of mammal.",
  "mergeA2974": "Primate is disjointly decomposed into ape, monkey and hominid.",
  "mergeA2975": "Ape is a subclass of primate.",
  "mergeA2976": "Monkey is a subclass of primate.",
  "mergeA2977": "Hominid is a subclass of primate.",
  "mergeA2978": "Human is a subclass of hominid.",
  "mergeA2979": "Human is a subclass of cognitive agent.",
  "mergeA2980": "Human is exhaustively partitioned into man and woman.",
  "mergeA2981": "Man is a subclass of human.",
  "mergeA2982": "If MAN is an instance of man, then MAN has the attribute male for every MAN.",
  "mergeA2983": "Woman is a subclass of human.",
  "mergeA2984": "If WOMAN is an instance of woman, then WOMAN has the attribute female for every WOMAN.",
  "mergeA2985": "Reptile is a subclass of cold blooded vertebrate.",
  "mergeA2986": "Biologically active substance is a subclass of substance.",
  "mergeA2987": "Nutrient is a subclass of biologically active substance.",
  "mergeA2988": "Nutrient is disjointly decomposed into protein, carbohydrate and vitamin.",
  "mergeA2989": "Protein is a subclass of nutrient.",
  "mergeA2990": "Enzyme is a subclass of protein.",
  "mergeA2991": "Carbohydrate is a subclass of nutrient.",
  "mergeA2992": "Vitamin is a subclass of nutrient.",
  "mergeA2993": "Liquid mixture is a subclass of mixture.",
  "mergeA2994": "Liquid mixture is exhaustively partitioned into solution and suspension.",
  "mergeA2995": "If MIX is an instance of liquid mixture, then there is at least one PART for which PART is an instance of object and PART is a part of MIX and PART has the attribute liquid for every MIX.",
  "mergeA2996": "Solution is a subclass of liquid mixture.",
  "mergeA2997": "Suspension is a subclass of liquid mixture.",
  "mergeA2998": "Gas mixture is a subclass of mixture.",
  "mergeA2999": "Gas mixture is disjoint from liquid mixture.",
  "mergeA3000": "If MIX is an instance of gas mixture, then there is at least one PART for which PART is an instance of object and PART is a part of MIX and PART has the attribute gas for every MIX.",
  "mergeA3001": "Cloud is a subclass of gas mixture.",
  "mergeA3002": "If CLOUD is an instance of cloud, then CLOUD is capable to do seeing in role the predicate patient for every CLOUD.",
  "mergeA3003": "Smoke is a subclass of cloud.",
  "mergeA3004": "Water cloud is a subclass of cloud.",
  "mergeA3005": "If CLOUD is an instance of water cloud, then there is at least one WATER for which WATER is an instance of water and WATER is a part of CLOUD for every CLOUD.",
  "mergeA3006": "If PART is an instance of object and CLOUD is an instance of water cloud and PART is a part of CLOUD and PART is not an instance of water, then there is at least one WATER, MEASURE1 and MEASURE2 for which MEASURE1 is an instance of physical quantity and MEASURE2 is an instance of physical quantity and WATER is an instance of water and WATER is a part of CLOUD and WATER is measured by MEASURE1 and PART is measured by MEASURE2 and MEASURE1 is greater than MEASURE2 for every CLOUD and PART.",
  "mergeA3007": "Air is a subclass of gas mixture.",
  "mergeA3008": "If WIND is an instance of wind, then there is at least one AIR for which AIR is a participant in WIND and AIR is an instance of air for every WIND.",
  "mergeA3009": "Body substance is a subclass of substance.",
  "mergeA3010": "Animal substance is a subclass of body substance.",
  "mergeA3011": "If SUBSTANCE is an instance of animal substance and ANIMAL is an instance of organism and SUBSTANCE is a part of ANIMAL, then ANIMAL is an instance of animal for every SUBSTANCE and ANIMAL.",
  "mergeA3012": "Plant substance is a subclass of body substance.",
  "mergeA3013": "If SUBSTANCE is an instance of plant substance and PLANT is an instance of organism and SUBSTANCE is a part of PLANT, then PLANT is an instance of plant for every SUBSTANCE and PLANT.",
  "mergeA3014": "Hormone is a subclass of body substance.",
  "mergeA3015": "Hormone is a subclass of biologically active substance.",
  "mergeA3016": "If HORMONE is an instance of hormone, then there is at least one PROCESS and GLAND for which PROCESS is an instance of process and GLAND is an instance of gland and GLAND is an instrument for PROCESS and HORMONE is a result of PROCESS for every HORMONE.",
  "mergeA3017": "Blood is a subclass of body substance.",
  "mergeA3018": "The function FoodForFn is an instance of unary function.",
  "mergeA3022": "Meat is a subclass of self connected object.",
  "mergeA3024": "Anatomical structure is a subclass of organic object.",
  "mergeA3025": "Anatomical structure is exhaustively partitioned into body part and abnormal anatomical structure.",
  "mergeA3026": "Anatomical structure is exhaustively partitioned into animal anatomical structure and plant anatomical structure.",
  "mergeA3028": "If PART is an instance of anatomical structure, then there is at least one CELL for which CELL is an instance of cell and CELL is a part of PART for every PART.",
  "mergeA3029": "Abnormal anatomical structure is a subclass of anatomical structure.",
  "mergeA3030": "If STRUCTURE is an instance of abnormal anatomical structure, then there is at least one PROC for which PROC is an instance of pathologic process and STRUCTURE is a result of PROC for every STRUCTURE.",
  "mergeA3031": "Body part is a subclass of anatomical structure.",
  "mergeA3033": "If PART is an instance of body part, then there is at least one PROC for which PROC is an instance of physiologic process and PART is a result of PROC for every PART.",
  "mergeA3034": "Animal anatomical structure is a subclass of anatomical structure.",
  "mergeA3035": "If ANIMAL is an instance of object and STRUCTURE is an instance of animal anatomical structure and STRUCTURE is a proper part of ANIMAL, then ANIMAL is an instance of animal for every STRUCTURE and ANIMAL.",
  "mergeA3036": "Plant anatomical structure is a subclass of anatomical structure.",
  "mergeA3037": "If PLANT is an instance of object and STRUCTURE is an instance of plant anatomical structure and STRUCTURE is a proper part of PLANT, then PLANT is an instance of plant for every STRUCTURE and PLANT.",
  "mergeA3038": "Reproductive body is a subclass of body part.",
  "mergeA3039": "Egg is a subclass of reproductive body.",
  "mergeA3040": "Egg is a subclass of animal anatomical structure.",
  "mergeA3041": "Seed is a subclass of reproductive body.",
  "mergeA3042": "Seed is a subclass of plant anatomical structure.",
  "mergeA3044": "Pollen is a subclass of reproductive body.",
  "mergeA3045": "Pollen is a subclass of plant anatomical structure.",
  "mergeA3046": "Fruit or vegetable is a subclass of plant anatomical structure.",
  "mergeA3047": "Fruit or vegetable is a subclass of reproductive body.",
  "mergeA3048": "Spore is a subclass of reproductive body.",
  "mergeA3049": "Spore is a subclass of plant anatomical structure.",
  "mergeA3051": "Body covering is a subclass of body part.",
  "mergeA3052": "If COVER is an instance of body covering, then there is at least one BODY for which BODY is an instance of object and COVER is a superficial part of BODY and BODY is an instance of organism or BODY is an instance of body part for every COVER.",
  "mergeA3053": "Body junction is a subclass of body part.",
  "mergeA3054": "If JUNCT is an instance of body junction, then there is at least one OBJ1 and OBJ2 for which OBJ1 is an instance of body part and OBJ2 is an instance of body part and JUNCT connects OBJ1 and OBJ2 for every JUNCT.",
  "mergeA3055": "Body cavity is a subclass of body part.",
  "mergeA3056": "Body vessel is a subclass of body cavity.",
  "mergeA3057": "Cell is a subclass of body part.",
  "mergeA3058": "Organ is a subclass of body part.",
  "mergeA3059": "If ORGAN is an instance of organ, then there is at least one PURP for which PURP is an instance of formula and ORGAN has the purpose of PURP for every ORGAN.",
  "mergeA3060": "Gland is a subclass of organ.",
  "mergeA3061": "Tissue is a subclass of body substance.",
  "mergeA3062": "Tissue is disjointly decomposed into bone, muscle and fat tissue.",
  "mergeA3063": "If STUFF is an instance of tissue, then there is at least one ORGANISM for which ORGANISM is an instance of organism and STUFF is a part of ORGANISM for every STUFF.",
  "mergeA3064": "Bone is a subclass of tissue.",
  "mergeA3065": "Bone is a subclass of animal substance.",
  "mergeA3066": "If BONE is an instance of bone, then there is at least one VERT for which VERT is an instance of vertebrate and BONE is a proper part of VERT for every BONE.",
  "mergeA3067": "Muscle is a subclass of tissue.",
  "mergeA3068": "Muscle is a subclass of animal substance.",
  "mergeA3069": "Fat tissue is a subclass of tissue.",
  "mergeA3070": "Noun is a subclass of word.",
  "mergeA3071": "Word is exhaustively partitioned into noun, verb, adjective, adverb and particle word.",
  "mergeA3072": "Verb is a subclass of word.",
  "mergeA3073": "Adjective is a subclass of word.",
  "mergeA3074": "Adverb is a subclass of word.",
  "mergeA3075": "Particle word is a subclass of word.",
  "mergeA3076": "Morpheme is a subclass of linguistic expression.",
  "mergeA3077": "If MORPH is an instance of object and MORPH is an instance of morpheme, then OTHERMORPH is not an instance of object or OTHERMORPH is not an instance of morpheme or OTHERMORPH is not a part of MORPH or OTHERMORPH is equal to MORPH for every OTHERMORPH for every MORPH.",
  "mergeA3078": "If MORPH is an instance of object and MORPH is an instance of morpheme, then there is at least one WORD for which WORD is an instance of object and WORD is an instance of word and MORPH is a part of WORD for every MORPH.",
  "mergeA3079": "If WORD is an instance of object and WORD is an instance of word, then there is at least one PART for which PART is an instance of object and PART is a part of WORD and PART is an instance of morpheme for every WORD.",
  "mergeA3080": "Phrase is a subclass of linguistic expression.",
  "mergeA3081": "Phrase is disjointly decomposed into verb phrase, noun phrase and prepositional phrase.",
  "mergeA3082": "If PHRASE is an instance of object and PHRASE is an instance of phrase, then there is at least one PART1 and PART2 for which PART1 is an instance of object and PART2 is an instance of object and PART1 is a part of PHRASE and PART2 is a part of PHRASE and PART1 is an instance of word and PART2 is an instance of word and PART1 is not equal to PART2 for every PHRASE.",
  "mergeA3083": "Verb phrase is a subclass of phrase.",
  "mergeA3084": "If PHRASE is an instance of object and PHRASE is an instance of verb phrase, then there is at least one VERB for which VERB is an instance of object and VERB is an instance of verb and VERB is a part of PHRASE for every PHRASE.",
  "mergeA3085": "Noun phrase is a subclass of phrase.",
  "mergeA3086": "Noun phrase is disjoint from verb phrase.",
  "mergeA3087": "If SENTENCE is an instance of object and SENTENCE is an instance of sentence, then there is at least one PHRASE1 and PHRASE2 for which PHRASE1 is an instance of object and PHRASE2 is an instance of object and PHRASE1 is an instance of noun phrase and PHRASE2 is an instance of verb phrase and PHRASE1 is a part of SENTENCE and PHRASE2 is a part of SENTENCE for every SENTENCE.",
  "mergeA3088": "If PHRASE is an instance of object and PHRASE is an instance of noun phrase, then there is at least one NOUN for which NOUN is an instance of object and NOUN is an instance of noun and NOUN is a part of PHRASE for every PHRASE.",
  "mergeA3089": "Prepositional phrase is a subclass of phrase.",
  "mergeA3090": "If PHRASE is an instance of object and PHRASE is an instance of prepositional phrase, then there is at least one PREP for which PREP is an instance of object and PREP is an instance of particle word and PREP is a part of PHRASE for every PHRASE.",
  "mergeA3091": "Text is a subclass of linguistic expression.",
  "mergeA3092": "Text is a subclass of content bearing object.",
  "mergeA3093": "Text is a subclass of artifact.",
  "mergeA3094": "If TEXT is an instance of text, then there is at least one PART for which PART is an instance of object and PART is a part of TEXT and PART is an instance of linguistic expression for every TEXT.",
  "mergeA3095": "If TEXT is an instance of text, then there is at least one WRITE for which WRITE is an instance of writing and TEXT is a result of WRITE for every TEXT.",
  "mergeA3096": "Factual text is a subclass of text.",
  "mergeA3097": "Factual text is disjoint from fictional text.",
  "mergeA3098": "If TEXT is an instance of content bearing physical and AGENT is an instance of cognitive agent and TEXT is an instance of CLASS and CLASS is a subclass of factual text and AGENT is the author of CLASS and TEXT subsumes the content of CONTENT and CONTENT is an instance of formula, then AGENT believes CONTENT for every CLASS, TEXT, AGENT and CONTENT.",
  "mergeA3099": "Fictional text is a subclass of text.",
  "mergeA3100": "If TEXT is an instance of content bearing physical and AGENT is an instance of cognitive agent and TEXT is an instance of CLASS and CLASS is a subclass of fictional text and AGENT is the author of CLASS, then there is at least one CONTENT for which TEXT subsumes the content of CONTENT and CONTENT is an instance of formula and AGENT does not believe CONTENT for every CLASS, TEXT and AGENT.",
  "mergeA3101": "Sentence is a subclass of linguistic expression.",
  "mergeA3102": "If SENT is an instance of sentence, then there is at least one PROP for which PROP is an instance of proposition and SENT contains information PROP for every SENT.",
  "mergeA3103": "The predicate authors is an instance of binary predicate.",
  "mergeA3104": "The predicate authors is an instance of asymmetric relation.",
  "mergeA3107": "If TEXTCLASS is a subclass of text and AGENT is an instance of agent and AGENT is the author of TEXTCLASS, then there is at least one PROCESS and INSTANCE for which PROCESS is an instance of process and AGENT is the agent of PROCESS and INSTANCE is an instance of TEXTCLASS and INSTANCE is a result of PROCESS for every AGENT and TEXTCLASS.",
  "mergeA3108": "The predicate editor is an instance of binary predicate.",
  "mergeA3109": "The predicate editor is an instance of asymmetric relation.",
  "mergeA3112": "The predicate publishes is an instance of binary predicate.",
  "mergeA3113": "The predicate publishes is an instance of asymmetric relation.",
  "mergeA3116": "If TEXTCLASS is a subclass of text and ORG is an instance of organization and ORG publishes TEXTCLASS and INST is an instance of TEXTCLASS, then there is at least one PUB for which PUB is an instance of publication and ORG is the agent of PUB and INST is a participant in PUB for every TEXTCLASS, ORG and INST.",
  "mergeA3117": "The function EditionFn is an instance of binary function.",
  "mergeA3118": "The function EditionFn is an instance of partial valued relation.",
  "mergeA3122": "If INT1 is an instance of positive integer and TEXT is a subclass of content bearing object and EDITION1 is a subclass of content bearing object and INT2 is an instance of positive integer and EDITION2 is a subclass of content bearing object and DATE1 is an instance of day and DATE2 is an instance of day and the edition INT1 of TEXT is equal to EDITION1 and the edition INT2 of TEXT is equal to EDITION2 and INT2 is greater than INT1 and PUB1 is an instance of publication and PUB2 is an instance of publication and CBO1 is an instance of EDITION1 and CBO2 is an instance of EDITION2 and CBO1 is a participant in PUB1 and CBO2 is a participant in PUB2 and DATE1 is the date of PUB1 and DATE2 is the date of PUB2, then the end of the interval DATE1 occurs before the end of the interval DATE2 for every TEXT, INT2, INT1, EDITION1, EDITION2, CBO1, CBO2, PUB1, PUB2, DATE1 and DATE2.",
  "mergeA3123": "If NUMBER is an instance of positive integer and TEXT1 is a subclass of content bearing object and TEXT2 is a subclass of content bearing object and the edition NUMBER of TEXT1 is equal to TEXT2, then TEXT1 subsumes the content of TEXT2 for every NUMBER, TEXT1 and TEXT2.",
  "mergeA3124": "Summary is a subclass of text.",
  "mergeA3125": "If TEXT is an instance of summary, then there is at least one TEXT2 for which TEXT2 is an instance of text and TEXT2 subsumes the content of TEXT for every TEXT.",
  "mergeA3126": "Certificate is a subclass of text.",
  "mergeA3127": "If DOC is an instance of certificate, then there is at least one PROP and NORM for which NORM is an instance of objective norm and PROP is an instance of formula and DOC brings it about that PROP has the norm NORM or DOC brings it about that PROP does not have the norm NORM for every DOC.",
  "mergeA3128": "Financial instrument is a subclass of certificate.",
  "mergeA3129": "Currency is a subclass of financial instrument.",
  "mergeA3130": "If CURRENCY is an instance of currency, then there is at least one MEASURE for which MEASURE is an instance of currency measure and CURRENCY has a monetary value of MEASURE for every CURRENCY.",
  "mergeA3131": "Patent is a subclass of certificate.",
  "mergeA3132": "Molecule is a subclass of compound substance.",
  "mergeA3133": "If MOLE is an instance of molecule, then there is at least one ATOM1 and ATOM2 for which ATOM1 is an instance of atom and ATOM2 is an instance of atom and ATOM1 is a part of MOLE and ATOM2 is a part of MOLE and ATOM1 is not equal to ATOM2 for every MOLE.",
  "mergeA3134": "Artifact is a subclass of object.",
  "mergeA3135": "There is at least one MAKING for which MAKING is an instance of making and ARTIFACT is a result of MAKING if and only if ARTIFACT is an instance of artifact for every ARTIFACT.",
  "mergeA3136": "Product is a subclass of artifact.",
  "mergeA3137": "If PRODUCT is an instance of product, then there is at least one MANUFACTURE for which MANUFACTURE is an instance of manufacture and PRODUCT is a result of MANUFACTURE for every PRODUCT.",
  "mergeA3138": "The predicate version is an instance of binary predicate.",
  "mergeA3139": "The predicate version is an instance of asymmetric relation.",
  "mergeA3140": "The predicate version is an instance of transitive relation.",
  "mergeA3143": "If ARTIFACT2 is a subclass of artifact and ARTIFACT1 is a subclass of artifact and ARTIFACT1 is a version of ARTIFACT2, then ARTIFACT1 is a subclass of ARTIFACT2 for every ARTIFACT1 and ARTIFACT2.",
  "mergeA3144": "Stationary artifact is a subclass of artifact.",
  "mergeA3146": "Building is a subclass of stationary artifact.",
  "mergeA3147": "If BUILDING is an instance of building, then there is at least one HUMAN for which HUMAN is an instance of human and HUMAN lives in BUILDING or there is at least one ACT for which ACT is an instance of process and HUMAN is the agent of ACT and ACT is located at BUILDING for every BUILDING.",
  "mergeA3148": "Room is a subclass of stationary artifact.",
  "mergeA3149": "Room is disjoint from building.",
  "mergeA3150": "If ROOM is an instance of room, then there is at least one BUILD for which BUILD is an instance of building and ROOM is a proper part of BUILD for every ROOM.",
  "mergeA3151": "House is a subclass of residential building.",
  "mergeA3152": "House is a subclass of single family residence.",
  "mergeA3153": "Residence is a subclass of stationary artifact.",
  "mergeA3154": "Residence is exhaustively partitioned into permanent residence and temporary residence.",
  "mergeA3155": "If RESIDENCE is an instance of residence, then RESIDENCE is an instance of house or there is at least one BUILDING for which BUILDING is an instance of residential building and RESIDENCE is a part of BUILDING for every RESIDENCE.",
  "mergeA3156": "Permanent residence is a subclass of residence.",
  "mergeA3157": "If RESIDENCE is an instance of permanent residence, then there is at least one PERSON for which PERSON is an instance of human and RESIDENCE is the home of PERSON for every RESIDENCE.",
  "mergeA3158": "Temporary residence is a subclass of residence.",
  "mergeA3159": "Residential building is a subclass of building.",
  "mergeA3160": "Residential building is a subclass of residence.",
  "mergeA3161": "Single family residence is a subclass of permanent residence.",
  "mergeA3163": "Art work is a subclass of artifact.",
  "mergeA3166": "Representational art work is a subclass of art work.",
  "mergeA3167": "Representational art work is a subclass of icon.",
  "mergeA3168": "If RA is an instance of representational art work, then there is at least one P for which P is an instance of physical and RA represents P for every RA.",
  "mergeA3169": "Fabric is a subclass of artifact.",
  "mergeA3170": "Fabric is disjoint from stationary artifact.",
  "mergeA3171": "Wearable item is a subclass of artifact.",
  "mergeA3173": "Clothing is a subclass of wearable item.",
  "mergeA3174": "Clothing is disjoint from stationary artifact.",
  "mergeA3175": "If CLOTHING is an instance of clothing, then there is at least one FABRIC for which FABRIC is an instance of fabric and FABRIC is a part of CLOTHING for every CLOTHING.",
  "mergeA3176": "The predicate wears is an instance of binary predicate.",
  "mergeA3179": "If WI is an instance of wearable item and AGENT is an instance of animal and AGENT wears WI, then WI is located at AGENT for every WI and AGENT.",
  "mergeA3180": "If C is an instance of wearable item and A is an instance of animal and P is an instance of wearable item and A wears C and P is a part of C, then A wears P for every C, A and P.",
  "mergeA3181": "Device is a subclass of artifact.",
  "mergeA3182": "If DEVICE is an instance of device, then there is at least one PROC for which PROC is a subclass of process and DEVICE is capable to do PROC in role the predicate instrument for every DEVICE.",
  "mergeA3184": "Musical instrument is a subclass of device.",
  "mergeA3185": "If INSTRUMENT is an instance of musical instrument, then INSTRUMENT is capable to do making music in role the predicate instrument for every INSTRUMENT.",
  "mergeA3186": "Transportation device is a subclass of device.",
  "mergeA3187": "If DEVICE is an instance of transportation device, then DEVICE is capable to do transportation in role the predicate instrument for every DEVICE.",
  "mergeA3188": "Vehicle is a subclass of transportation device.",
  "mergeA3191": "Measuring device is a subclass of device.",
  "mergeA3193": "Attaching device is a subclass of device.",
  "mergeA3194": "If DEVICE is an instance of attaching device, then there is at least one ATTACH for which ATTACH is an instance of attaching and DEVICE is an instrument for ATTACH for every DEVICE.",
  "mergeA3195": "Weapon is a subclass of device.",
  "mergeA3196": "If WEAPON is an instance of weapon, then WEAPON is capable to do damaging in role the predicate instrument for every WEAPON.",
  "mergeA3198": "Machine is a subclass of device.",
  "mergeA3199": "If PROC is an instance of process and MACHINE is an instance of machine and MACHINE is an instrument for PROC, then there is at least one RESOURCE and RESULT for which RESOURCE is an instance of object and RESOURCE is a resource for PROC and RESULT is a result of PROC for every MACHINE and PROC.",
  "mergeA3200": "Engineering component is a subclass of device.",
  "mergeA3201": "If COMP is an instance of corpuscular object and COMP is an instance of engineering component, then there is at least one DEVICE for which DEVICE is an instance of corpuscular object and DEVICE is an instance of device and COMP is a component of DEVICE for every COMP.",
  "mergeA3202": "If MACHINE is an instance of machine, then there is at least one COMP1 and COMP2 for which COMP1 is an instance of engineering component and COMP2 is an instance of engineering component and COMP1 is not equal to COMP2 and COMP1 is a part of MACHINE and COMP2 is a part of MACHINE for every MACHINE.",
  "mergeA3203": "The predicate engineeringSubcomponent is a subrelation of the predicate properPart.",
  "mergeA3206": "The predicate connectedEngineeringComponents is an instance of symmetric relation.",
  "mergeA3207": "The predicate connectedEngineeringComponents is an instance of irreflexive relation.",
  "mergeA3208": "The predicate connectedEngineeringComponents is a subrelation of the predicate connected.",
  "mergeA3211": "If COMP2 is an instance of engineering component and COMP1 is an instance of engineering component and COMP1 is connected to COMP2, then COMP1 is not a component of COMP2 and COMP2 is not a component of COMP1 for every COMP2 and COMP1.",
  "mergeA3212": "Engineering connection is a subclass of engineering component.",
  "mergeA3213": "If CONNECTION is an instance of engineering connection, then there is at least one COMP1 and COMP2 for which COMP2 is an instance of engineering component and COMP1 is an instance of engineering component and CONNECTION connects COMP1 and COMP2 for every CONNECTION.",
  "mergeA3214": "If COMP2 is an instance of engineering component and COMP1 is an instance of engineering component and COMP1 is connected to COMP2, then COMP1 is not an instance of engineering connection and COMP2 is not an instance of engineering connection for every COMP1 and COMP2.",
  "mergeA3215": "If COMP2 is an instance of engineering component and COMP1 is an instance of engineering component, then there is at least one CONNECTION for which CONNECTION is an instance of engineering connection and CONNECTION connects COMP1 and COMP2 if and only if COMP1 is connected to COMP2 for every COMP1 and COMP2.",
  "mergeA3216": "The predicate connectsEngineeringComponents is a subrelation of the predicate connects.",
  "mergeA3220": "Commercial agent is a subclass of agent.",
  "mergeA3221": "Business is a subclass of commercial agent.",
  "mergeA3222": "Business is a subclass of organization.",
  "mergeA3223": "Corporation is a subclass of business.",
  "mergeA3224": "Corporation is a subclass of legal agent.",
  "mergeA3225": "Manufacturer is a subclass of corporation.",
  "mergeA3227": "Mercantile organization is a subclass of corporation.",
  "mergeA3229": "Group is a subclass of collection.",
  "mergeA3230": "Group is a subclass of agent.",
  "mergeA3231": "If MEMB is an instance of self connected object and GROUP is an instance of group and MEMB is a member of GROUP, then MEMB is an instance of agent for every GROUP and MEMB.",
  "mergeA3232": "Group of people is a subclass of group.",
  "mergeA3233": "If MEMBER is an instance of self connected object and GROUP is an instance of group of people and MEMBER is a member of GROUP, then MEMBER is an instance of human for every GROUP and MEMBER.",
  "mergeA3234": "Age group is a subclass of group of people.",
  "mergeA3235": "If MEMB1 is an instance of self connected object and MEMB2 is an instance of self connected object and AGE1 is an instance of time duration and AGE2 is an instance of time duration and GROUP is an instance of age group and MEMB1 is a member of GROUP and MEMB2 is a member of GROUP and MEMB1 is the age of AGE1 and MEMB2 is the age of AGE2, then AGE1 is equal to AGE2 for every GROUP, MEMB1, MEMB2, AGE1 and AGE2.",
  "mergeA3236": "Family group is a subclass of group of people.",
  "mergeA3237": "If MEMB1 is an instance of organism and MEMB2 is an instance of organism and GROUP is an instance of family group and MEMB1 is a member of GROUP and MEMB2 is a member of GROUP, then MEMB1 is related to MEMB2 for every GROUP, MEMB1 and MEMB2.",
  "mergeA3238": "Social unit is a subclass of group of people.",
  "mergeA3239": "If MEMBER is an instance of human and UNIT is an instance of social unit, then there is at least one HOME for which HOME is an instance of permanent residence and if MEMBER is a member of UNIT, then HOME is the home of MEMBER for every UNIT and MEMBER.",
  "mergeA3240": "The function ImmediateFamilyFn is an instance of unary function.",
  "mergeA3243": "If P is an instance of human and FAMILY is an instance of family group and the immediate family of P is equal to FAMILY and MEMBER is an instance of organism and MEMBER is a member of FAMILY, then there is at least one OTHER for which OTHER is an instance of organism and MEMBER is a parent of OTHER or OTHER is a parent of MEMBER for every P, FAMILY and MEMBER.",
  "mergeA3244": "If PERSON is an instance of human and FAMILY is an instance of family group and the immediate family of PERSON is equal to FAMILY, then there is at least one MEMBER for which MEMBER is an instance of organism and MEMBER is a member of FAMILY and MEMBER is a parent of PERSON or PERSON is a parent of MEMBER for every FAMILY and PERSON.",
  "mergeA3245": "The predicate relative is an instance of binary predicate.",
  "mergeA3246": "The predicate relative is an instance of symmetric relation.",
  "mergeA3249": "The predicate familyRelation is a subrelation of the predicate relative.",
  "mergeA3250": "The predicate spouse is a subrelation of the predicate relative.",
  "mergeA3252": "The predicate familyRelation is an instance of binary predicate.",
  "mergeA3253": "The predicate familyRelation is an instance of equivalence relation.",
  "mergeA3256": "If ORGANISM2 is an instance of organism and ORGANISM1 is an instance of organism and ORGANISM1 is related to ORGANISM2, then there is at least one ORGANISM3 for which ORGANISM3 is an instance of organism and ORGANISM3 is an ancestor of ORGANISM1 and ORGANISM3 is an ancestor of ORGANISM2 for every ORGANISM1 and ORGANISM2.",
  "mergeA3257": "The predicate ancestor is a subrelation of the predicate familyRelation.",
  "mergeA3258": "The predicate ancestor is an instance of transitive relation.",
  "mergeA3259": "The predicate ancestor is an instance of irreflexive relation.",
  "mergeA3262": "The predicate parent is a subrelation of the predicate ancestor.",
  "mergeA3263": "The predicate parent is an instance of binary predicate.",
  "mergeA3264": "The predicate parent is a subrelation of the predicate familyRelation.",
  "mergeA3265": "The predicate parent is an instance of asymmetric relation.",
  "mergeA3266": "The predicate parent is an instance of intransitive relation.",
  "mergeA3269": "If PARENT is an instance of organism and CHILD is an instance of organism and CHILD is a parent of PARENT, then the beginning of the interval the time when PARENT takes place occurs before the beginning of the interval the time when CHILD takes place for every PARENT and CHILD.",
  "mergeA3270": "If PARENT is an instance of organism and CHILD is an instance of organism and CHILD is a parent of PARENT and CLASS is a subclass of organism and PARENT is an instance of CLASS, then CHILD is an instance of CLASS for every PARENT, CHILD and CLASS.",
  "mergeA3271": "If PARENT is an instance of organism and CHILD is an instance of organism and CHILD is a parent of PARENT and REP is an instance of sexual reproduction and PARENT is the agent of REP and CHILD is a result of REP, then CHILD is the mother of PARENT or CHILD is the father of PARENT for every REP, CHILD and PARENT.",
  "mergeA3272": "If ORGANISM is an instance of organism, then there is at least one PARENT for which PARENT is an instance of organism and ORGANISM is a parent of PARENT for every ORGANISM.",
  "mergeA3273": "The predicate mother is an instance of single valued relation.",
  "mergeA3274": "The predicate mother is a subrelation of the predicate parent.",
  "mergeA3277": "If MOTHER is an instance of organism and CHILD is an instance of organism and CHILD is the mother of MOTHER, then MOTHER has the attribute female for every CHILD and MOTHER.",
  "mergeA3278": "The predicate father is an instance of single valued relation.",
  "mergeA3279": "The predicate father is a subrelation of the predicate parent.",
  "mergeA3282": "If FATHER is an instance of organism and CHILD is an instance of organism and CHILD is the father of FATHER, then FATHER has the attribute male for every CHILD and FATHER.",
  "mergeA3283": "The predicate daughter is a subrelation of the predicate parent.",
  "mergeA3286": "If PARENT is an instance of organism and CHILD is an instance of organism and CHILD is the daughter of PARENT, then CHILD has the attribute female for every PARENT and CHILD.",
  "mergeA3287": "The predicate son is a subrelation of the predicate parent.",
  "mergeA3290": "If PARENT is an instance of organism and CHILD is an instance of organism and CHILD is the son of PARENT, then CHILD has the attribute male for every PARENT and CHILD.",
  "mergeA3291": "The predicate sibling is an instance of binary predicate.",
  "mergeA3292": "The predicate sibling is a subrelation of the predicate familyRelation.",
  "mergeA3293": "The predicate sibling is an instance of symmetric relation.",
  "mergeA3294": "The predicate sibling is an instance of irreflexive relation.",
  "mergeA3297": "If PARENT1 is an instance of organism and ORGANISM1 is an instance of organism and ORGANISM2 is an instance of organism and PARENT2 is an instance of organism and ORGANISM1 is a parent of PARENT1 and ORGANISM2 is a parent of PARENT1 and ORGANISM1 is a parent of PARENT2 and ORGANISM2 is a parent of PARENT2 and ORGANISM1 is not equal to ORGANISM2 and PARENT1 is not equal to PARENT2, then ORGANISM1 is the sibling of ORGANISM2 for every PARENT1, PARENT2, ORGANISM1 and ORGANISM2.",
  "mergeA3298": "If ORG2 is an instance of organism and ORG1 is an instance of organism and PARENT is an instance of organism and ORG1 is the sibling of ORG2 and ORG1 is a parent of PARENT, then ORG2 is a parent of PARENT for every ORG1, ORG2 and PARENT.",
  "mergeA3299": "If PARENT is an instance of organism and CHILD is an instance of organism and CHILD is a parent of PARENT and PARENT has the attribute male, then CHILD is the father of PARENT for every CHILD and PARENT.",
  "mergeA3300": "If PARENT is an instance of organism and CHILD is an instance of organism and CHILD is a parent of PARENT and PARENT has the attribute female, then CHILD is the mother of PARENT for every CHILD and PARENT.",
  "mergeA3301": "The predicate brother is a subrelation of the predicate sibling.",
  "mergeA3302": "The predicate brother is an instance of irreflexive relation.",
  "mergeA3303": "The predicate brother is an instance of transitive relation.",
  "mergeA3306": "The predicate sister is a subrelation of the predicate sibling.",
  "mergeA3307": "The predicate sister is an instance of irreflexive relation.",
  "mergeA3308": "The predicate sister is an instance of transitive relation.",
  "mergeA3311": "The predicate legalRelation is an instance of binary predicate.",
  "mergeA3312": "The predicate legalRelation is an instance of symmetric relation.",
  "mergeA3315": "If AGENT2 is an instance of human and AGENT1 is an instance of human and AGENT1 is legally realted to AGENT2, then there is at least one DECLARE and OBLIGATION for which OBLIGATION is an instance of formula and DECLARE is an instance of declaring and DECLARE obligates AGENT1 to perform tasks of the type OBLIGATION and DECLARE obligates AGENT2 to perform tasks of the type OBLIGATION for every AGENT1 and AGENT2.",
  "mergeA3316": "The predicate acquaintance is an instance of binary predicate.",
  "mergeA3319": "The predicate mutualAcquaintance is an instance of binary predicate.",
  "mergeA3320": "The predicate mutualAcquaintance is an instance of symmetric relation.",
  "mergeA3323": "The predicate mutualAcquaintance is a subrelation of the predicate acquaintance.",
  "mergeA3324": "The predicate spouse is a subrelation of the predicate mutualAcquaintance.",
  "mergeA3325": "The predicate spouse is a subrelation of the predicate legalRelation.",
  "mergeA3326": "The predicate spouse is an instance of irreflexive relation.",
  "mergeA3327": "The predicate spouse is an instance of symmetric relation.",
  "mergeA3330": "The predicate husband is a subrelation of the predicate spouse.",
  "mergeA3331": "The predicate husband is an instance of asymmetric relation.",
  "mergeA3332": "The predicate husband is an instance of irreflexive relation.",
  "mergeA3335": "The predicate husband is an inverse of the predicate wife.",
  "mergeA3336": "The predicate wife is a subrelation of the predicate spouse.",
  "mergeA3337": "The predicate wife is an instance of asymmetric relation.",
  "mergeA3338": "The predicate wife is an instance of irreflexive relation.",
  "mergeA3341": "Ethnic group is a subclass of group of people.",
  "mergeA3342": "Belief group is a subclass of group of people.",
  "mergeA3343": "If GROUP is an instance of belief group, then there is at least one BELIEF for which BELIEF is an instance of formula and if MEMB is an instance of self connected object and MEMB is an instance of cognitive agent and MEMB is a member of GROUP, then MEMB believes BELIEF for every MEMB for every GROUP.",
  "mergeA3344": "Organization is a subclass of group.",
  "mergeA3345": "Organization is a subclass of agent.",
  "mergeA3346": "If ORG is an instance of organization, then there is at least one PURP for which PURP is an instance of formula and if MEMBER is an instance of self connected object and MEMBER is a member of ORG, then MEMBER has the purpose of PURP for every MEMBER for every ORG.",
  "mergeA3347": "If AGENT is an instance of self connected object and ORG is an instance of organization and AGENT is a member of ORG, then AGENT is an instance of agent for every ORG and AGENT.",
  "mergeA3348": "The predicate employs is an instance of binary predicate.",
  "mergeA3351": "Political organization is a subclass of organization.",
  "mergeA3352": "If POL is an instance of political organization, then there is at least one PROC for which PROC is an instance of political process and POL is the agent of PROC for every POL.",
  "mergeA3353": "Military force is a subclass of political organization.",
  "mergeA3354": "If ORG is an instance of military force, then ORG is capable to do violent contest in role the predicate agent for every ORG.",
  "mergeA3355": "Military organization is a subclass of military force.",
  "mergeA3356": "Military organization is a subclass of government organization.",
  "mergeA3357": "Paramilitary organization is a subclass of military force.",
  "mergeA3358": "Paramilitary organization is disjoint from government organization.",
  "mergeA3359": "Government organization is a subclass of organization.",
  "mergeA3360": "If ORG is an instance of organization, then there is at least one GOV for which GOV is an instance of government and ORG is a part of the organization GOV if and only if ORG is an instance of government organization for every ORG.",
  "mergeA3361": "If ORG is an instance of organization and ORG is a part of the organization GOV and GOV is an instance of government organization, then ORG is an instance of government organization for every GOV and ORG.",
  "mergeA3362": "Government is a subclass of government organization.",
  "mergeA3363": "Government is a subclass of legal agent.",
  "mergeA3364": "The function GovernmentFn is an instance of unary function.",
  "mergeA3367": "Police organization is a subclass of government organization.",
  "mergeA3368": "Judicial organization is a subclass of organization.",
  "mergeA3369": "Educational organization is a subclass of organization.",
  "mergeA3370": "Religious organization is a subclass of organization.",
  "mergeA3371": "Religious organization is a subclass of belief group.",
  "mergeA3372": "The predicate subOrganization is a subrelation of the predicate subCollection.",
  "mergeA3373": "The predicate subOrganization is an instance of partial ordering relation.",
  "mergeA3376": "The predicate citizen is an instance of binary predicate.",
  "mergeA3377": "The predicate citizen is an instance of asymmetric relation.",
  "mergeA3380": "Field of study is a subclass of proposition.",
  "mergeA3381": "Procedure is a subclass of proposition.",
  "mergeA3382": "Computer program is a subclass of procedure.",
  "mergeA3383": "Computer programming is a subclass of content development.",
  "mergeA3384": "If CP is an instance of computer programming, then there is at least one C for which C is an instance of computer program and C is a result of CP for every CP.",
  "mergeA3385": "Plan is a subclass of procedure.",
  "mergeA3386": "If PLAN is an instance of plan and OBJ is an instance of content bearing object and OBJ contains information PLAN, then there is at least one PLANNING for which PLANNING is an instance of planning and OBJ is a result of PLANNING for every PLAN and OBJ.",
  "mergeA3387": "Argument is a subclass of proposition.",
  "mergeA3388": "Argument is exhaustively partitioned into deductive argument and inductive argument.",
  "mergeA3389": "If REASON is an instance of reasoning, then there is at least one ARGUMENT for which ARGUMENT is an instance of argument and REASON realizes the content of ARGUMENT for every REASON.",
  "mergeA3390": "If ARGUMENT is an instance of argument, then there is at least one PREMISES and CONCLUSION for which PREMISES is an instance of proposition and CONCLUSION is an instance of argument and the complete set of premises of the argument ARGUMENT is equal to PREMISES and CONCLUSION is the conclusion of ARGUMENT for every ARGUMENT.",
  "mergeA3391": "Deductive argument is a subclass of argument.",
  "mergeA3392": "Deductive argument is exhaustively partitioned into valid deductive argument and invalid deductive argument.",
  "mergeA3393": "Valid deductive argument is a subclass of deductive argument.",
  "mergeA3394": "Invalid deductive argument is a subclass of deductive argument.",
  "mergeA3395": "Explanation is a subclass of deductive argument.",
  "mergeA3396": "Inductive argument is a subclass of argument.",
  "mergeA3397": "The predicate premise is an instance of binary predicate.",
  "mergeA3398": "The predicate premise is an instance of total valued relation.",
  "mergeA3401": "The function PremisesFn is an instance of unary function.",
  "mergeA3404": "If PREMISES is an instance of proposition and PROPOSITION is an instance of proposition and ARGUMENT is an instance of argument and PREMISES is equal to the complete set of premises of the argument ARGUMENT, then PROPOSITION is a premise of ARGUMENT if and only if PROPOSITION is a sub-proposition of PREMISES for every PREMISES, ARGUMENT and PROPOSITION.",
  "mergeA3405": "The predicate conclusion is an instance of binary predicate.",
  "mergeA3406": "The predicate conclusion is an instance of single valued relation.",
  "mergeA3407": "The predicate conclusion is an instance of total valued relation.",
  "mergeA3410": "The predicate consistent is an instance of binary predicate.",
  "mergeA3411": "The predicate consistent is an instance of symmetric relation.",
  "mergeA3414": "The predicate orientation is an instance of spatial relation.",
  "mergeA3415": "The predicate orientation is an instance of ternary predicate.",
  "mergeA3420": "The predicate direction is an instance of case role.",
  "mergeA3423": "The predicate direction is a subrelation of the predicate involvedInEvent.",
  "mergeA3425": "The predicate faces is an instance of binary predicate.",
  "mergeA3429": "Truth value is a subclass of relational attribute.",
  "mergeA3430": "If ITEM has the property VALUE and VALUE is an instance of truth value, then ITEM is an instance of sentence or ITEM is an instance of proposition for every VALUE and ITEM.",
  "mergeA3431": "True is an instance of truth value.",
  "mergeA3432": "False is an instance of truth value.",
  "mergeA3433": "Nothing can simultaneously be false and true.",
  "mergeA3434": "The predicate truth is a subrelation of the predicate property.",
  "mergeA3437": "Positional attribute is a subclass of relational attribute.",
  "mergeA3438": "Directional attribute is a subclass of positional attribute.",
  "mergeA3439": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ3 is an instance of object and DIRECT is an instance of directional attribute and OBJ1 is DIRECT to OBJ2 and OBJ2 is DIRECT to OBJ3, then OBJ2 is between OBJ1 and OBJ3 for every DIRECT, OBJ1, OBJ2 and OBJ3.",
  "mergeA3440": "North is an instance of directional attribute.",
  "mergeA3441": "Nothing can simultaneously be north, south, east and west.",
  "mergeA3442": "South is an instance of directional attribute.",
  "mergeA3443": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then OBJ2 is south to OBJ1 if and only if OBJ1 is north to OBJ2 for every OBJ2 and OBJ1.",
  "mergeA3444": "East is an instance of directional attribute.",
  "mergeA3445": "West is an instance of directional attribute.",
  "mergeA3446": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then OBJ2 is west to OBJ1 if and only if OBJ1 is east to OBJ2 for every OBJ2 and OBJ1.",
  "mergeA3447": "Vertical is an instance of positional attribute.",
  "mergeA3448": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then OBJ2 is vertical to OBJ1 if and only if OBJ1 is vertical to OBJ2 for every OBJ2 and OBJ1.",
  "mergeA3449": "Horizontal is an instance of positional attribute.",
  "mergeA3450": "Nothing can simultaneously be horizontal and vertical.",
  "mergeA3451": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then OBJ2 is horizontal to OBJ1 if and only if OBJ1 is horizontal to OBJ2 for every OBJ2 and OBJ1.",
  "mergeA3452": "Symmetric positional attribute is a subclass of positional attribute.",
  "mergeA3453": "If O2 is an instance of object and O1 is an instance of object and P is an instance of symmetric positional attribute and O1 is P to O2, then O2 is P to O1 for every O2, O1 and P.",
  "mergeA3454": "Anti symmetric positional attribute is a subclass of positional attribute.",
  "mergeA3455": "If O2 is an instance of object and O1 is an instance of object and P is an instance of anti symmetric positional attribute and O1 is P to O2, then O2 is not P to O1 for every O2, O1 and P.",
  "mergeA3456": "Above is an instance of positional attribute.",
  "mergeA3457": "Above is an instance of anti symmetric positional attribute.",
  "mergeA3458": "Nothing can simultaneously be above and below.",
  "mergeA3459": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is above to OBJ2, then OBJ1 is not connected to OBJ2 for every OBJ1 and OBJ2.",
  "mergeA3460": "Below is an instance of positional attribute.",
  "mergeA3461": "Below is an instance of anti symmetric positional attribute.",
  "mergeA3462": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then OBJ2 is on to OBJ1 or OBJ2 is above to OBJ1 if and only if OBJ1 is below to OBJ2 for every OBJ2 and OBJ1.",
  "mergeA3463": "Adjacent is an instance of symmetric positional attribute.",
  "mergeA3464": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then OBJ1 is near to OBJ2 or OBJ1 is connected to OBJ2 if and only if OBJ1 is adjacent to OBJ2 for every OBJ1 and OBJ2.",
  "mergeA3465": "Left is an instance of positional attribute.",
  "mergeA3466": "Left is an instance of anti symmetric positional attribute.",
  "mergeA3467": "Right is an instance of positional attribute.",
  "mergeA3468": "Right is an instance of anti symmetric positional attribute.",
  "mergeA3469": "Nothing can simultaneously be right and left.",
  "mergeA3470": "If OBJ2 is an instance of object and OBJ1 is an instance of object, then OBJ2 is left to OBJ1 if and only if OBJ1 is right to OBJ2 for every OBJ2 and OBJ1.",
  "mergeA3471": "Near is an instance of symmetric positional attribute.",
  "mergeA3472": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is near to OBJ2, then OBJ1 is not connected to OBJ2 for every OBJ1 and OBJ2.",
  "mergeA3473": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is near to OBJ2, then OBJ2 is near to OBJ1 for every OBJ2 and OBJ1.",
  "mergeA3474": "On is an instance of anti symmetric positional attribute.",
  "mergeA3475": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is on to OBJ2, then OBJ1 is connected to OBJ2 for every OBJ1 and OBJ2.",
  "mergeA3476": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is on to OBJ2, then OBJ1 is located at OBJ2 for every OBJ1 and OBJ2.",
  "mergeA3477": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is on to OBJ2, then OBJ2 is not on to OBJ1 for every OBJ2 and OBJ1.",
  "mergeA3478": "Time zone is a subclass of relational attribute.",
  "mergeA3479": "Coordinated universal time zone is an instance of time zone.",
  "mergeA3480": "Pacific time zone is an instance of time zone.",
  "mergeA3481": "If TIME1 is an instance of time position and TIME2 is an instance of time position and the time TIME1 in zone pacific time zone is equal to TIME2, then TIME2 is equal to TIME1 plus 8 for every TIME2 and TIME1.",
  "mergeA3482": "Mountain time zone is an instance of time zone.",
  "mergeA3483": "If TIME1 is an instance of time position and TIME2 is an instance of time position and the time TIME1 in zone mountain time zone is equal to TIME2, then TIME2 is equal to TIME1 plus 7 for every TIME2 and TIME1.",
  "mergeA3484": "Central time zone is an instance of time zone.",
  "mergeA3485": "If TIME1 is an instance of time position and TIME2 is an instance of time position and the time TIME1 in zone central time zone is equal to TIME2, then TIME2 is equal to TIME1 plus 6 for every TIME2 and TIME1.",
  "mergeA3486": "Eastern time zone is an instance of time zone.",
  "mergeA3487": "If TIME1 is an instance of time position and TIME2 is an instance of time position and the time TIME1 in zone eastern time zone is equal to TIME2, then TIME2 is equal to TIME1 plus 5 for every TIME2 and TIME1.",
  "mergeA3488": "The function RelativeTimeFn is an instance of binary function.",
  "mergeA3489": "The function RelativeTimeFn is an instance of temporal relation.",
  "mergeA3490": "The function RelativeTimeFn is an instance of total valued relation.",
  "mergeA3494": "Social role is a subclass of relational attribute.",
  "mergeA3495": "If PERSON is an instance of object and PERSON has the attribute ATTRIBUTE and ATTRIBUTE is an instance of social role, then PERSON is an instance of human for every ATTRIBUTE and PERSON.",
  "mergeA3496": "Unemployed is an instance of social role.",
  "mergeA3497": "If PERSON is an instance of cognitive agent, then PERSON has the attribute unemployed if and only if PERSON is an instance of human and if ORG is an instance of organization, then ORG does not employ PERSON for every ORG for every PERSON.",
  "mergeA3498": "Position is a subclass of social role.",
  "mergeA3499": "The predicate occupiesPosition is an instance of ternary predicate.",
  "mergeA3503": "If ORG is an instance of organization and POSITION is an instance of position and AGENT is an instance of human and AGENT holds the position of POSITION in ORG, then AGENT has the attribute POSITION for every ORG, AGENT and POSITION.",
  "mergeA3504": "If PERSON is an instance of human and ORG is an instance of organization and ORG employs PERSON, then there is at least one POSITION for which POSITION is an instance of position and PERSON holds the position of POSITION in ORG for every PERSON and ORG.",
  "mergeA3505": "If ORGANIZATION is an instance of organization and POSITION is an instance of position and PERSON is an instance of human and PERSON holds the position of POSITION in ORGANIZATION, then PERSON is a member of ORGANIZATION for every POSITION, PERSON and ORGANIZATION.",
  "mergeA3506": "Normative attribute is a subclass of relational attribute.",
  "mergeA3507": "The predicate modalAttribute is an instance of binary predicate.",
  "mergeA3508": "The predicate modalAttribute is an instance of asymmetric relation.",
  "mergeA3509": "The predicate modalAttribute is an instance of irreflexive relation.",
  "mergeA3510": "The predicate modalAttribute is a subrelation of the predicate property.",
  "mergeA3513": "If PROP is an instance of normative attribute and FORMULA1 is an instance of formula and FORMULA2 is an instance of formula and the statement FORMULA1 has the modal force of PROP and FORMULA1 entails FORMULA2, then the statement FORMULA2 has the modal force of PROP for every FORMULA1, FORMULA2 and PROP.",
  "mergeA3514": "If FORMULA is an instance of formula and the statement FORMULA has the modal force of permission, then the statement FORMULA has the modal force of possibility for every FORMULA.",
  "mergeA3515": "Subjective assessment attribute is a subclass of normative attribute.",
  "mergeA3516": "Subjective assessment attribute is disjoint from objective norm.",
  "mergeA3517": "Objective norm is a subclass of normative attribute.",
  "mergeA3518": "Contest attribute is a subclass of objective norm.",
  "mergeA3519": "Alethic attribute is a subclass of objective norm.",
  "mergeA3520": "Possibility is an instance of alethic attribute.",
  "mergeA3521": "Necessity is an instance of alethic attribute.",
  "mergeA3523": "If FORMULA is an instance of formula and the statement FORMULA has the modal force of necessity, then the statement FORMULA has the modal force of possibility for every FORMULA.",
  "mergeA3524": "The predicate holdsRight is an instance of binary predicate.",
  "mergeA3525": "The predicate holdsRight is an instance of asymmetric relation.",
  "mergeA3528": "The predicate confersRight is an instance of ternary predicate.",
  "mergeA3532": "If AGENT2 is an instance of cognitive agent and FORMULA is an instance of formula and AGENT1 authorizes AGENT2 to perform tasks of the type FORMULA, then AGENT2 has the right to perform FORMULA for every AGENT1, FORMULA and AGENT2.",
  "mergeA3533": "The predicate holdsObligation is an instance of binary predicate.",
  "mergeA3534": "The predicate holdsObligation is an instance of asymmetric relation.",
  "mergeA3537": "The predicate holdsObligation is internally related to the predicate holdsRight.",
  "mergeA3538": "The predicate confersObligation is an instance of ternary predicate.",
  "mergeA3542": "The predicate confersObligation is internally related to the predicate confersRight.",
  "mergeA3543": "If AGENT2 is an instance of cognitive agent and FORMULA is an instance of formula and AGENT1 obligates AGENT2 to perform tasks of the type FORMULA, then AGENT2 is obliged to perform tasks of the type FORMULA for every AGENT1, FORMULA and AGENT2.",
  "mergeA3544": "Deontic attribute is a subclass of objective norm.",
  "mergeA3545": "Permission is an instance of deontic attribute.",
  "mergeA3546": "Obligation is an instance of deontic attribute.",
  "mergeA3548": "If FORMULA is an instance of formula and the statement FORMULA has the modal force of obligation, then the statement FORMULA has the modal force of permission for every FORMULA.",
  "mergeA3549": "Law is a subattribute of obligation.",
  "mergeA3550": "Law is an instance of deontic attribute.",
  "mergeA3551": "Promise is a subattribute of obligation.",
  "mergeA3552": "Prohibition is an instance of deontic attribute.",
  "mergeA3553": "If FORMULA is an instance of formula, then the statement FORMULA does not have the modal force of permission if and only if the statement FORMULA has the modal force of prohibition for every FORMULA.",
  "mergeA3554": "Probability attribute is a subclass of objective norm.",
  "mergeA3555": "Likely is an instance of probability attribute.",
  "mergeA3556": "Nothing can simultaneously be likely and unlikely.",
  "mergeA3558": "Unlikely is an instance of probability attribute.",
  "mergeA3560": "Physical state is a subclass of internal attribute.",
  "mergeA3561": "Nothing can simultaneously be solid, liquid, gas and plasma.",
  "mergeA3563": "Solid is an instance of physical state.",
  "mergeA3564": "Fluid is an instance of physical state.",
  "mergeA3565": "Liquid is an instance of physical state.",
  "mergeA3566": "Liquid is a subattribute of fluid.",
  "mergeA3567": "If OBJ is an instance of solution, then OBJ has the attribute liquid for every OBJ.",
  "mergeA3568": "Gas is an instance of physical state.",
  "mergeA3569": "Gas is a subattribute of fluid.",
  "mergeA3570": "If OBJ is an instance of object, then there is at least one ATTR for which ATTR is an instance of physical state and OBJ has the attribute ATTR if and only if OBJ is an instance of substance for every OBJ.",
  "mergeA3571": "Plasma is an instance of physical state.",
  "mergeA3572": "Plasma is a subattribute of fluid.",
  "mergeA3573": "Perceptual attribute is a subclass of attribute.",
  "mergeA3574": "If OBJ is an instance of object and PERCEPTION is an instance of perception and OBJ is a participant in PERCEPTION, then there is at least one PROP for which PROP is an instance of perceptual attribute and OBJ has the attribute PROP for every PERCEPTION and OBJ.",
  "mergeA3575": "Taste attribute is a subclass of perceptual attribute.",
  "mergeA3577": "Olfactory attribute is a subclass of perceptual attribute.",
  "mergeA3578": "Visual attribute is a subclass of perceptual attribute.",
  "mergeA3579": "Illuminated is an instance of visual attribute.",
  "mergeA3580": "Unilluminated is an instance of visual attribute.",
  "mergeA3581": "Nothing can simultaneously be unilluminated and illuminated.",
  "mergeA3582": "Color attribute is a subclass of visual attribute.",
  "mergeA3583": "Primary color is a subclass of color attribute.",
  "mergeA3584": "Red is an instance of primary color.",
  "mergeA3585": "Blue is an instance of primary color.",
  "mergeA3586": "Yellow is an instance of primary color.",
  "mergeA3587": "White is an instance of primary color.",
  "mergeA3588": "Black is an instance of primary color.",
  "mergeA3589": "Monochromatic is an instance of color attribute.",
  "mergeA3590": "If OBJ is an instance of object and PART is an instance of object and ELEMENT is an instance of object and OBJ has the attribute monochromatic and PART is a superficial part of OBJ and PART has the attribute COLOR and COLOR is an instance of primary color and ELEMENT is a superficial part of OBJ, then ELEMENT has the attribute COLOR for every PART, OBJ, COLOR and ELEMENT.",
  "mergeA3591": "If OBJ is an instance of object, then OBJ has the attribute monochromatic or OBJ has the attribute polychromatic for every OBJ.",
  "mergeA3592": "Polychromatic is an instance of color attribute.",
  "mergeA3593": "Nothing can simultaneously be polychromatic and monochromatic.",
  "mergeA3594": "If OBJ is an instance of object and OBJ has the attribute polychromatic, then there is at least one PART1, PART2, COLOR1 and COLOR2 for which PART1 is an instance of object and PART2 is an instance of object and PART1 is a superficial part of OBJ and PART2 is a superficial part of OBJ and PART1 has the attribute COLOR1 and PART2 has the attribute COLOR2 and COLOR1 is an instance of color attribute and COLOR2 is an instance of color attribute and COLOR1 is not equal to COLOR2 for every OBJ.",
  "mergeA3595": "Structure attribute is a subclass of internal attribute.",
  "mergeA3596": "Shape attribute is a subclass of structure attribute.",
  "mergeA3597": "If OBJ is an instance of self connected object and SURFACE is an instance of self connected object and ATTRIBUTE is an instance of shape attribute and OBJ has the attribute ATTRIBUTE and SURFACE is a surface of OBJ, then SURFACE has the attribute ATTRIBUTE for every OBJ, SURFACE and ATTRIBUTE.",
  "mergeA3598": "Pliable is an instance of internal attribute.",
  "mergeA3599": "If OBJ is an instance of object and OBJ has the attribute pliable, then there is at least one CHANGE for which CHANGE is an instance of shape change and OBJ is a participant in CHANGE for every OBJ.",
  "mergeA3600": "Rigid is an instance of internal attribute.",
  "mergeA3601": "Nothing can simultaneously be rigid and pliable.",
  "mergeA3602": "Texture attribute is a subclass of perceptual attribute.",
  "mergeA3603": "If OBJ is an instance of self connected object and SURFACE is an instance of self connected object and ATTRIBUTE is an instance of texture attribute and OBJ has the attribute ATTRIBUTE and SURFACE is a surface of OBJ, then SURFACE has the attribute ATTRIBUTE for every OBJ, SURFACE and ATTRIBUTE.",
  "mergeA3604": "Smooth is an instance of texture attribute.",
  "mergeA3605": "Rough is an instance of texture attribute.",
  "mergeA3606": "Nothing can simultaneously be smooth and rough.",
  "mergeA3607": "Geometric figure is a subclass of shape attribute.",
  "mergeA3608": "Geometric figure is exhaustively partitioned into geometric point, one dimensional figure, two dimensional figure and three dimensional figure.",
  "mergeA3609": "Geometric point is a subclass of geometric figure.",
  "mergeA3610": "One dimensional figure is a subclass of geometric figure.",
  "mergeA3611": "Two dimensional figure is a subclass of geometric figure.",
  "mergeA3612": "Two dimensional figure is exhaustively partitioned into open two dimensional figure and closed two dimensional figure.",
  "mergeA3613": "Open two dimensional figure is a subclass of two dimensional figure.",
  "mergeA3614": "Two dimensional angle is a subclass of open two dimensional figure.",
  "mergeA3615": "Closed two dimensional figure is a subclass of two dimensional figure.",
  "mergeA3616": "Three dimensional figure is a subclass of geometric figure.",
  "mergeA3617": "The predicate geometricPart is an instance of binary predicate.",
  "mergeA3618": "The predicate geometricPart is an instance of partial ordering relation.",
  "mergeA3621": "The predicate pointOfFigure is a subrelation of the predicate geometricPart.",
  "mergeA3624": "The predicate angleOfFigure is a subrelation of the predicate geometricPart.",
  "mergeA3627": "The predicate pointOfIntersection is an instance of ternary predicate.",
  "mergeA3631": "If POINT is an instance of geometric point and FIGURE2 is an instance of one dimensional figure and FIGURE1 is an instance of one dimensional figure and FIGURE1 and FIGURE2 intersect at the point POINT, then POINT is a point of the figure FIGURE1 and POINT is a point of the figure FIGURE2 for every FIGURE1, POINT and FIGURE2.",
  "mergeA3632": "The predicate parallel is an instance of binary predicate.",
  "mergeA3635": "If LINE2 is an instance of one dimensional figure and LINE1 is an instance of one dimensional figure and LINE1 is parallel to LINE2, then POINT is not an instance of geometric point or LINE1 and LINE2 do not intersect at the point POINT for every POINT for every LINE1 and LINE2.",
  "mergeA3636": "The predicate angularMeasure is an instance of binary predicate.",
  "mergeA3637": "The predicate angularMeasure is an instance of total valued relation.",
  "mergeA3640": "The predicate lineMeasure is an instance of binary predicate.",
  "mergeA3641": "The predicate lineMeasure is an instance of total valued relation.",
  "mergeA3644": "The predicate geometricDistance is an instance of ternary predicate.",
  "mergeA3645": "The predicate geometricDistance is an instance of single valued relation.",
  "mergeA3646": "The predicate geometricDistance is an instance of total valued relation.",
  "mergeA3650": "If LENGTH is an instance of length measure and POINT2 is an instance of geometric point and POINT1 is an instance of geometric point and the distance between the two points POINT1 and POINT2 is LENGTH, then the distance between the two points POINT2 and POINT1 is LENGTH for every POINT2, POINT1 and LENGTH.",
  "mergeA3651": "Saturation attribute is a subclass of internal attribute.",
  "mergeA3652": "Dry is an instance of saturation attribute.",
  "mergeA3653": "Nothing can simultaneously be dry and damp.",
  "mergeA3654": "If OBJ is an instance of object and OBJ has the attribute dry, then SUBOBJ is not an instance of object or SUBOBJ is not a part of OBJ or SUBOBJ does not have the attribute liquid for every SUBOBJ for every OBJ.",
  "mergeA3655": "Damp is an instance of saturation attribute.",
  "mergeA3656": "Wet is an instance of saturation attribute.",
  "mergeA3657": "Wet is a subattribute of damp.",
  "mergeA3658": "If OBJ is an instance of object and PART is an instance of object and OBJ has the attribute wet and PART is a part of OBJ, then there is at least one SUBPART for which SUBPART is an instance of object and SUBPART is a part of PART and SUBPART has the attribute liquid for every OBJ and PART.",
  "mergeA3659": "Biological attribute is a subclass of internal attribute.",
  "mergeA3660": "If ORG is an instance of object and ORG has the attribute ATT and ATT is an instance of biological attribute, then ORG is an instance of organic object for every ATT and ORG.",
  "mergeA3661": "Body position is a subclass of biological attribute.",
  "mergeA3662": "If ANIMAL is an instance of animal, then there is at least one MOTION for which MOTION is an instance of body motion and ANIMAL is the agent of MOTION or there is at least one ATTR for which ATTR is an instance of body position and ANIMAL has the attribute ATTR for every ANIMAL.",
  "mergeA3663": "Standing is an instance of body position.",
  "mergeA3664": "If AGENT is an instance of agent and AMBULATE is an instance of ambulating and AGENT is the agent of AMBULATE, then AGENT has the attribute standing for every AMBULATE and AGENT.",
  "mergeA3665": "Sitting is an instance of body position.",
  "mergeA3666": "Prostrate is an instance of body position.",
  "mergeA3667": "Animacy attribute is a subclass of biological attribute.",
  "mergeA3669": "Living is an instance of animacy attribute.",
  "mergeA3671": "Dead is an instance of animacy attribute.",
  "mergeA3672": "Nothing can simultaneously be dead and living.",
  "mergeA3673": "If ORG is an instance of object, then there is at least one ATTR for which ATTR is an instance of animacy attribute and ORG has the attribute ATTR if and only if ORG is an instance of organism for every ORG.",
  "mergeA3674": "Sex attribute is a subclass of biological attribute.",
  "mergeA3676": "Female is an instance of sex attribute.",
  "mergeA3677": "If BODY is an instance of reproductive body and BODY is a part of ORG and ORG is an instance of organism, then ORG has the attribute female for every BODY and ORG.",
  "mergeA3678": "Male is an instance of sex attribute.",
  "mergeA3679": "Nothing can simultaneously be male and female.",
  "mergeA3680": "If ANIMAL is an instance of animal, then there is at least one ATTR for which ATTR is an instance of sex attribute and ANIMAL has the attribute ATTR for every ANIMAL.",
  "mergeA3681": "Developmental attribute is a subclass of biological attribute.",
  "mergeA3683": "Fully formed is an instance of developmental attribute.",
  "mergeA3685": "Non fully formed is an instance of developmental attribute.",
  "mergeA3686": "Nothing can simultaneously be non fully formed and fully formed.",
  "mergeA3687": "Non fully formed is an immediate successor attribute of fully formed.",
  "mergeA3688": "If ORG is an instance of organism, then there is at least one ATTR for which ATTR is an instance of developmental attribute and ORG has the attribute ATTR for every ORG.",
  "mergeA3689": "Larval is a subattribute of non fully formed.",
  "mergeA3691": "Embryonic is a subattribute of non fully formed.",
  "mergeA3692": "Nothing can simultaneously be embryonic and larval.",
  "mergeA3693": "If ORG is an instance of object and ORG has the attribute embryonic, then there is at least one BODY for which BODY is an instance of reproductive body and ORG is located at BODY for every ORG.",
  "mergeA3695": "Disease or syndrome is a subclass of biological attribute.",
  "mergeA3696": "Psychological attribute is a subclass of biological attribute.",
  "mergeA3697": "Psychological attribute is exhaustively partitioned into state of mind and trait attribute.",
  "mergeA3699": "If AGENT is an instance of object and ATTR is an instance of psychological attribute and AGENT has the attribute ATTR, then AGENT is an instance of sentient agent for every ATTR and AGENT.",
  "mergeA3700": "State of mind is a subclass of psychological attribute.",
  "mergeA3701": "Emotional state is a subclass of state of mind.",
  "mergeA3702": "Consciousness attribute is a subclass of state of mind.",
  "mergeA3703": "If AGENT is an instance of object, then there is at least one ATTR for which ATTR is an instance of consciousness attribute and AGENT has the attribute ATTR if and only if AGENT is an instance of sentient agent and AGENT has the attribute living for every AGENT.",
  "mergeA3704": "Asleep is an instance of consciousness attribute.",
  "mergeA3705": "Unconscious is an instance of consciousness attribute.",
  "mergeA3706": "Nothing can simultaneously be unconscious and awake.",
  "mergeA3707": "Awake is an instance of consciousness attribute.",
  "mergeA3708": "If AGENT is an instance of object and AGENT has the attribute asleep or AGENT has the attribute awake, then AGENT has the attribute living for every AGENT.",
  "mergeA3709": "Trait attribute is a subclass of psychological attribute.",
  "mergeA3710": "Psychological dysfunction is a subclass of psychological attribute.",
  "mergeA3711": "Psychological dysfunction is a subclass of disease or syndrome.",
  "mergeA3712": "The predicate comment is an instance of ternary predicate.",
  "miloA1": "Organism remains is a subclass of organic object.",
  "miloA4": "If REM is an instance of organic object and DEATH is an instance of death and ORG is an instance of organism and ORG experiences DEATH and REM is a result of DEATH, then REM is an instance of organism remains for every ORG, DEATH and REM.",
  "miloA5": "If REM is an instance of organism remains, then there is at least one DEATH for which DEATH is an instance of death and REM is a result of DEATH for every REM.",
  "miloA9": "Human corpse is a subclass of organism remains.",
  "miloA11": "The function DeadFn is an instance of unary function.",
  "miloA16": "Human slave is an instance of social role.",
  "miloA18": "Human adult is a subclass of human.",
  "miloA19": "Human adult is a subclass of legal agent.",
  "miloA26": "Human youth is a subclass of human.",
  "miloA30": "Human child is a subclass of human youth.",
  "miloA36": "Teenager is a subclass of human.",
  "miloA40": "Boy is a subclass of human child.",
  "miloA41": "Boy is a subclass of man.",
  "miloA43": "Girl is a subclass of human child.",
  "miloA44": "Girl is a subclass of woman.",
  "miloA46": "Human baby is a subclass of human child.",
  "miloA50": "The predicate older is an instance of binary predicate.",
  "miloA54": "The function StartFn is an instance of unary function.",
  "miloA58": "The function StopFn is an instance of unary function.",
  "miloA62": "Dodging is a subclass of body motion.",
  "miloA63": "Dodging is a subclass of intentional process.",
  "miloA65": "Mounting is a subclass of body motion.",
  "miloA67": "Stepping is a subclass of body motion.",
  "miloA68": "If DURATION is an instance of time interval and AMBULATE is an instance of ambulating and DURATION is equal to the time when AMBULATE takes place, then there is at least one STEP1 and STEPN for which STEP1 is an instance of stepping and STEPN is an instance of stepping and STEP1 is a subprocess of AMBULATE and STEPN is a subprocess of AMBULATE and the time when STEP1 takes place starts DURATION and the time when STEPN takes place finishes DURATION and STEP1 is not equal to STEPN for every AMBULATE and DURATION.",
  "miloA69": "If S1START is an instance of time point and S2START is an instance of time point and A is an instance of ambulating and S1 is a subprocess of A and S1 is an instance of stepping and S2 is a subprocess of A and S2 is an instance of stepping and S1START is equal to the beginning of the interval the time when S1 takes place and S2START is equal to the beginning of the interval the time when S2 takes place and S1START does not occur before S2START and S2START does not occur before S1START, then S1 is equal to S2 for every A, S2START, S1START, S1 and S2.",
  "miloA70": "If AGENT is an instance of agent and AMBULATE is an instance of ambulating and STEP is an instance of stepping and STEP is a subprocess of AMBULATE and AGENT is the agent of AMBULATE, then AGENT is the agent of STEP for every AMBULATE, STEP and AGENT.",
  "miloA71": "If AGENT is an instance of agent and AMBULATE is an instance of ambulating and STEP is an instance of stepping and STEP is a subprocess of AMBULATE and AGENT is the agent of STEP, then AGENT is the agent of AMBULATE for every STEP, AMBULATE and AGENT.",
  "miloA72": "Wading is a subclass of walking.",
  "miloA73": "If P is an instance of wading, then there is at least one W for which W is an instance of water area and the entire process P is located on W for every P.",
  "miloA74": "Jumping is a subclass of body motion.",
  "miloA75": "Jumping is a subclass of motion upward.",
  "miloA77": "Somersaulting is a subclass of body motion.",
  "miloA79": "Reflecting is a subclass of radiating.",
  "miloA80": "Reflecting light is a subclass of reflecting.",
  "miloA81": "Reflecting light is a subclass of radiating light.",
  "miloA82": "The predicate wavelength is an instance of single valued relation.",
  "miloA85": "The predicate wavelength is a subrelation of the predicate measure.",
  "miloA86": "Radiating infrared is a subclass of radiating.",
  "miloA87": "Radiating infrared is disjoint from radiating light.",
  "miloA88": "Radiating infrared is disjoint from radio emission.",
  "miloA89": "Radiating ultraviolet is a subclass of radiating electromagnetic.",
  "miloA90": "Radiating ultraviolet is disjoint from radiating light.",
  "miloA91": "Radiating ultraviolet is disjoint from x ray radiation.",
  "miloA92": "X ray radiation is a subclass of radiating.",
  "miloA93": "Radiating visible light is a subclass of radiating light.",
  "miloA94": "Radiating visible light is disjoint from radiating ultraviolet.",
  "miloA95": "If R is an instance of radiating light and H is an instance of human and S is an instance of seeing and H is the agent of S and R is a participant in S, then R is an instance of radiating visible light for every H, S and R.",
  "miloA96": "Sunlight is a subclass of radiating light.",
  "miloA97": "Radio receiver is a subclass of receiver device.",
  "miloA98": "Script is a subclass of collection.",
  "miloA99": "If W is an instance of written communication, then there is at least one T, C and S for which T is a result of W and T is an instance of text and C is a part of T and C is an instance of character and S is an instance of script and C is a member of S for every W.",
  "miloA100": "Orthography is a subclass of procedure.",
  "miloA101": "Lyrics is a subclass of text.",
  "miloA103": "Paragraph is a subclass of text.",
  "miloA104": "If T is an instance of paragraph, then there is at least one S for which S is an instance of object and S is an instance of sentence and S is a part of T for every T.",
  "miloA107": "The predicate sententialObject is a subrelation of the predicate grammaticalRelation.",
  "miloA110": "The predicate sententialSubject is a subrelation of the predicate grammaticalRelation.",
  "miloA111": "The predicate speaksLanguage is an instance of binary predicate.",
  "miloA114": "Monophonic music is an instance of relational attribute.",
  "miloA115": "Polyphonic music is an instance of relational attribute.",
  "miloA116": "Musical tone is a subclass of radiating sound.",
  "miloA117": "Radiating sound ultrasonic is a subclass of radiating sound.",
  "miloA118": "The predicate soundFrequency is an instance of binary predicate.",
  "miloA121": "Written communication is a subclass of linguistic communication.",
  "miloA122": "Corresponding is a subclass of linguistic communication.",
  "miloA123": "If C is an instance of corresponding, then there is at least one M and T for which M is an instance of mailing and M is a subprocess of C and T is an instance of text and T is a participant in M and T is a participant in C for every C.",
  "miloA124": "Reminding is a subclass of requesting.",
  "miloA125": "If REMIND is an instance of reminding, then there is at least one REMEMBER for which REMEMBER is an instance of remembering and REMIND causes REMEMBER for every REMIND.",
  "miloA126": "Threatening is a subclass of committing.",
  "miloA127": "If AGENT is an instance of agent and PROP is an instance of formula and DEST is an instance of cognitive agent and THREATEN is an instance of threatening and AGENT is the agent of THREATEN and PROP is a participant in THREATEN and THREATEN ends at DEST, then DEST does not desire PROP for every AGENT, THREATEN, DEST and PROP.",
  "miloA128": "Punishing is a subclass of regulatory process.",
  "miloA130": "Registering is a subclass of stating.",
  "miloA131": "Registering is a subclass of political process.",
  "miloA132": "If ACTION is an instance of legal action, then there is at least one REGISTER for which REGISTER is an instance of registering and REGISTER is a subprocess of ACTION for every ACTION.",
  "miloA133": "Answering is a subclass of stating.",
  "miloA134": "If ANSWER is an instance of answering, then there is at least one QUESTION for which QUESTION is an instance of questioning and ANSWER refers to QUESTION and the time when QUESTION takes place occurs earlier than the time when ANSWER takes place for every ANSWER.",
  "miloA135": "Arguing is a subclass of stating.",
  "miloA136": "If ARGUE is an instance of arguing, then there is at least one STATEMENT and ARGUMENT for which STATEMENT is a participant in ARGUE and STATEMENT is an instance of statement and STATEMENT contains information ARGUMENT and ARGUMENT is an instance of argument for every ARGUE.",
  "miloA137": "Telling a lie is a subclass of linguistic communication.",
  "miloA139": "Founding is a subclass of declaring.",
  "miloA140": "Founding is a subclass of organizational process.",
  "miloA141": "If FOUND is an instance of founding, then there is at least one ORG for which ORG is an instance of organization and ORG is a result of FOUND for every FOUND.",
  "miloA142": "Club is a subclass of organization.",
  "miloA143": "If MEM1 is an instance of self connected object and MEM1 is an instance of cognitive agent and MEM2 is an instance of self connected object and MEM2 is an instance of cognitive agent and CLUB is an instance of club and MEM1 is a member of CLUB and MEM2 is a member of CLUB, then there is at least one DESIRE for which DESIRE is an instance of formula and MEM1 desires DESIRE and MEM2 desires DESIRE for every CLUB, MEM1 and MEM2.",
  "miloA144": "The predicate yearOfFounding is an instance of binary predicate.",
  "miloA145": "The predicate yearOfFounding is an instance of asymmetric relation.",
  "miloA148": "If Y is an instance of integer and O is an instance of organization and O is founded in the year Y, then O is established at the timepostition the year Y for every O and Y.",
  "miloA150": "The predicate dateEstablished is an instance of binary predicate.",
  "miloA154": "The predicate dateUsed is an instance of ternary predicate.",
  "miloA158": "If AGENT is an instance of agent and DATE is an instance of time point and OBJECT is an instance of object and OBJECT is used by AGENT at the timepoint DATE, then there is at least one PROCESS for which PROCESS is an instance of process and OBJECT is a participant in PROCESS and AGENT is the agent of PROCESS and OBJECT uses AGENT and DATE is a temporal part of the time when PROCESS takes place for every OBJECT, AGENT and DATE.",
  "miloA159": "Accrediting is a subclass of declaring.",
  "miloA160": "If A is an instance of accrediting and EO is a participant in A, then EO is an instance of educational organization for every A and EO.",
  "miloA161": "Indicating is a subclass of communication.",
  "miloA162": "Indicating is a subclass of body motion.",
  "miloA163": "Divorcing is a subclass of declaring.",
  "miloA165": "Appointing is a subclass of declaring.",
  "miloA167": "If A is an instance of appointing, then H is not an instance of agent or H is not the agent of A or H is not an instance of public for every H for every A.",
  "miloA168": "Turning off device is a subclass of internal change.",
  "miloA170": "If P is an instance of turning off device and D is a participant in P, then D is an instance of device for every P and D.",
  "miloA171": "Turning on device is a subclass of internal change.",
  "miloA173": "If P is an instance of turning on device and D is a participant in P, then D is an instance of device for every P and D.",
  "miloA174": "Projectile is a subclass of weapon.",
  "miloA175": "If PROJECTILE is an instance of projectile, then PROJECTILE is capable to do shooting in role the predicate patient for every PROJECTILE.",
  "miloA176": "Projectile shell is a subclass of container.",
  "miloA177": "If PROJECTILE is an instance of projectile, then there is at least one SHELL for which SHELL is an instance of projectile shell and SHELL is a part of PROJECTILE for every PROJECTILE.",
  "miloA178": "Projectile launcher is a subclass of weapon.",
  "miloA179": "If L is an instance of projectile launcher, then L is capable to do shooting in role the predicate instrument for every L.",
  "miloA180": "If S is an instance of shooting, then there is at least one P and L for which P is an instance of projectile and P is a participant in S and L is an instance of projectile launcher and L is an instrument for S for every S.",
  "miloA181": "Spear is a subclass of weapon.",
  "miloA182": "Sword is a subclass of weapon.",
  "miloA183": "Whip is a subclass of weapon.",
  "miloA184": "Gun is a subclass of weapon.",
  "miloA185": "Gun is a subclass of projectile launcher.",
  "miloA186": "Gun is exhaustively partitioned into artillery gun and firearm.",
  "miloA187": "If GUN is an instance of gun, then GUN is capable to do shooting in role the predicate instrument for every GUN.",
  "miloA188": "If SHOOT is an instance of shooting, then there is at least one PROJECTILE and GUN for which PROJECTILE is an instance of projectile and PROJECTILE is a participant in SHOOT and GUN is an instance of gun and GUN is an instrument for SHOOT for every SHOOT.",
  "miloA189": "Mortar gun is a subclass of artillery gun.",
  "miloA190": "Bullet is a subclass of projectile.",
  "miloA192": "Bullet cartridge is a subclass of projectile.",
  "miloA194": "Cartridge case is a subclass of engineering component.",
  "miloA195": "If CASE is an instance of agent and CASE is an instance of cartridge case, then there is at least one CARTRIDGE, BULLET and K for which CARTRIDGE is an instance of bullet cartridge and BULLET is an instance of bullet and K is an instance of keeping and CASE is a proper part of CARTRIDGE and BULLET is a proper part of CARTRIDGE and CASE is the agent of K and BULLET is a participant in K for every CASE.",
  "miloA196": "Gun barrel is a subclass of engineering component.",
  "miloA197": "If B is an instance of gun barrel, then there is at least one G for which G is an instance of gun and B is a part of G for every B.",
  "miloA198": "If GUN is an instance of physical and G is an instance of gun and B is an instance of gun barrel and B is a part of G and S is an instance of shooting and GUN is an instrument for S and P is a participant in S and P is an instance of projectile, then there is at least one SUB for which SUB is an instance of motion and SUB is a subprocess of S and B is the path which SUB follows for every G, GUN, P, S and B.",
  "miloA199": "Gun powder is a subclass of mixture.",
  "miloA200": "Lever is a subclass of device.",
  "miloA201": "If L is an instance of lever, then there is at least one A for which A is an instance of object and A is the axis of rotation of L for every L.",
  "miloA203": "If P is an instance of gun powder, then P is capable to do explosion in role the predicate instrument for every P.",
  "miloA204": "Gun trigger is a subclass of engineering component.",
  "miloA205": "Gun trigger is a subclass of lever.",
  "miloA206": "Gun trigger is a typical part of .",
  "miloA207": "Gun typically contains gun trigger.",
  "miloA208": "Loading weapon is a subclass of inserting.",
  "miloA209": "If L is an instance of loading weapon and P is a participant in L, then P is an instance of projectile for every L and P.",
  "miloA210": "If L is an instance of loading weapon and L ends at W, then W is an instance of projectile launcher for every L and W.",
  "miloA211": "The predicate effectiveRange is an instance of binary predicate.",
  "miloA212": "The predicate effectiveRange is an instance of single valued relation.",
  "miloA213": "The predicate effectiveRange is a subrelation of the predicate measure.",
  "miloA218": "Gun stock is a subclass of engineering component.",
  "miloA219": "If STOCK is an instance of gun stock, then there is at least one GUN for which GUN is an instance of gun and STOCK is a part of GUN for every STOCK.",
  "miloA220": "Weapon of mass destruction is a subclass of weapon.",
  "miloA221": "Handle is a subclass of engineering component.",
  "miloA223": "Shield is a subclass of artifact.",
  "miloA225": "If S is an instance of shield, then there is at least one H for which H is an instance of handle and H is a part of S for every S.",
  "miloA226": "Mast is a subclass of artifact.",
  "miloA227": "If M is an instance of mast, then there is at least one W for which W is an instance of water vehicle and M is a part of W for every M.",
  "miloA228": "Wing device is a subclass of engineering component.",
  "miloA229": "If W is an instance of wing device, then there is at least one A for which A is an instance of aircraft and W is a part of A for every W.",
  "miloA230": "Tube is a subclass of artifact.",
  "miloA232": "Photographic film is a subclass of artifact.",
  "miloA233": "Picture frame is a subclass of artifact.",
  "miloA235": "Shelf is a subclass of artifact.",
  "miloA236": "If S is an instance of shelf, then there is at least one F for which F is an instance of furniture and S is a part of F for every S.",
  "miloA237": "Automatic gun is a subclass of gun.",
  "miloA240": "Artillery gun is a subclass of gun.",
  "miloA241": "Firearm is a subclass of gun.",
  "miloA242": "Firearm is exhaustively partitioned into rifle and pistol.",
  "miloA243": "Rifle is a subclass of firearm.",
  "miloA244": "Pistol is a subclass of firearm.",
  "miloA245": "Revolver gun is a subclass of pistol.",
  "miloA246": "Container empty is an instance of relational attribute.",
  "miloA247": "If C is an instance of object and C has the attribute container empty, then C is an instance of container for every C.",
  "miloA248": "If C is an instance of self connected object and C has the attribute container empty, then H is not an instance of hole or S is not an instance of object or H is not a hole in C or S does not partially fill H for every H and S for every C.",
  "miloA249": "Container full is an instance of relational attribute.",
  "miloA250": "Nothing can simultaneously be container full and container empty.",
  "miloA251": "If C is an instance of object and C has the attribute container full, then C is an instance of container for every C.",
  "miloA252": "If C is an instance of self connected object and C has the attribute container full, then there is at least one H and S for which H is an instance of hole and S is an instance of object and H is a hole in C and S fills H for every C.",
  "miloA253": "Holster is a subclass of container.",
  "miloA255": "Wastebasket is a subclass of container.",
  "miloA256": "Arrow projectile is a subclass of projectile.",
  "miloA257": "Drive component is a subclass of engineering component.",
  "miloA258": "Petroleum product is a subclass of oil.",
  "miloA259": "If PP is an instance of petroleum product, then there is at least one O for which O is an instance of organic compound and O is a part of PP for every PP.",
  "miloA260": "Fossil fuel is a subclass of fuel.",
  "miloA261": "Fossil fuel is a subclass of petroleum product.",
  "miloA262": "Fuel is a subclass of substance.",
  "miloA263": "If X is an instance of fossil fuel, then X has the attribute flammable for every X.",
  "miloA264": "Wax is a subclass of substance.",
  "miloA265": "Liquefied petroleum gas is a subclass of fossil fuel.",
  "miloA266": "Gasoline is a subclass of fossil fuel.",
  "miloA267": "Diesel fuel is a subclass of fossil fuel.",
  "miloA268": "Transducer is a subclass of device.",
  "miloA269": "Engine is a subclass of transducer.",
  "miloA270": "The predicate powerPlant is an instance of binary predicate.",
  "miloA271": "The predicate powerPlant is an instance of asymmetric relation.",
  "miloA272": "The predicate powerPlant is an instance of irreflexive relation.",
  "miloA275": "The predicate powerPlant is a subrelation of the predicate component.",
  "miloA276": "If G is an instance of device and G is the power-producing component of O and O is an instance of device, then O is an instance of self powered device for every G and O.",
  "miloA277": "If O is an instance of artifact and G is an instance of device and G is the power-producing component of O, then G is an instance of engine or G is an instance of battery for every O and G.",
  "miloA278": "Steam engine is a subclass of engine.",
  "miloA279": "Turbine is a subclass of engine.",
  "miloA280": "Windmill is a subclass of engine.",
  "miloA281": "Internal combustion engine is a subclass of engine.",
  "miloA283": "Manifold is a subclass of engineering component.",
  "miloA284": "Electric motor is a subclass of engine.",
  "miloA285": "Electric motor is a subclass of electric device.",
  "miloA286": "Switch device is a subclass of engineering component.",
  "miloA287": "If DEVICE is an instance of switch device, then there is at least one PROC1, PROC2 and ELECTRIC for which PROC1 is an instance of process and PROC2 is an instance of process and DEVICE is an instrument for PROC1 and PROC1 causes PROC2 and ELECTRIC is an instrument for PROC2 and ELECTRIC is an instance of electric device for every DEVICE.",
  "miloA288": "Microphone is a subclass of electric device.",
  "miloA289": "Microphone is a subclass of communication device.",
  "miloA290": "Receiver device is a subclass of communication device.",
  "miloA291": "Receiver device is a subclass of electric device.",
  "miloA292": "If E is an instance of radio emission and E ends at D, then D is an instance of receiver device for every E and D.",
  "miloA293": "Telegraph is a subclass of electric device.",
  "miloA294": "Telegraph is a subclass of communication device.",
  "miloA295": "Projection screen is a subclass of communication device.",
  "miloA296": "Pencil is a subclass of writing device.",
  "miloA297": "Device attribute is a subclass of objective norm.",
  "miloA298": "If DEVICE is an instance of object and DEVICE has the attribute ATTRIBUTE and ATTRIBUTE is an instance of device attribute, then DEVICE is an instance of device for every ATTRIBUTE and DEVICE.",
  "miloA299": "Functioning is an instance of device attribute.",
  "miloA300": "Nothing can simultaneously be functioning and malfunctioning.",
  "miloA301": "If DEVICE is an instance of object and PROP is an instance of formula and DEVICE has the attribute functioning and DEVICE has the purpose of PROP, then the truth value of PROP is true for every DEVICE and PROP.",
  "miloA302": "Malfunctioning is an instance of device attribute.",
  "miloA303": "If DEVICE is an instance of object and PROP is an instance of formula and DEVICE has the attribute malfunctioning and DEVICE has the purpose of PROP, then the truth value of PROP is false for every DEVICE and PROP.",
  "miloA304": "Device state attribute is a subclass of internal attribute.",
  "miloA305": "Device closed is an instance of device state attribute.",
  "miloA306": "Device off is an instance of device state attribute.",
  "miloA307": "Device on is an instance of device state attribute.",
  "miloA308": "Device open is an instance of device state attribute.",
  "miloA309": "The predicate deviceState is an instance of binary predicate.",
  "miloA312": "The predicate deviceState is a subrelation of the predicate attribute.",
  "miloA313": "Aerator is a subclass of device.",
  "miloA315": "Aerating is a subclass of combining.",
  "miloA316": "If AERATE is an instance of aerating, then there is at least one AIR and S for which S is an instance of object and AIR is a participant in AERATE and AIR is an instance of air and S is a participant in AERATE and S has the attribute liquid for every AERATE.",
  "miloA317": "Broom is a subclass of brush or comb.",
  "miloA319": "Brush or comb is a subclass of device.",
  "miloA321": "Match device is a subclass of device.",
  "miloA323": "Vending device is a subclass of device.",
  "miloA325": "Writing device is a subclass of device.",
  "miloA327": "Smoking device is a subclass of device.",
  "miloA329": "Smoking pipe is a subclass of smoking device.",
  "miloA330": "Shower is a subclass of bathing device.",
  "miloA332": "If SHOWER is an instance of shower, then there is at least one X and FLOOR for which X is an instance of object and X is an instance of wall or X is an instance of ceiling and SHOWER is connected to X and FLOOR is an instance of floor and SHOWER is above to FLOOR for every SHOWER.",
  "miloA333": "Bath tub is a subclass of bathing device.",
  "miloA334": "Bath tub is a subclass of fluid container.",
  "miloA336": "Excrement is a subclass of body substance.",
  "miloA337": "If X is an instance of excrement, then there is at least one PROC and ORG for which ORG is an instance of organism and PROC is an instance of physiologic process and X is a result of PROC and ORG is the agent of PROC for every X.",
  "miloA338": "Feces is a subclass of excrement.",
  "miloA339": "If X is an instance of feces, then X has the attribute solid for every X.",
  "miloA340": "If X is an instance of feces, then there is at least one PROC and INT for which PROC is an instance of physiologic process and INT is an instrument for PROC and INT is an instance of intestine and X is a result of PROC for every X.",
  "miloA341": "Urine is a subclass of excrement.",
  "miloA342": "If X is an instance of urine, then X has the attribute liquid for every X.",
  "miloA343": "If X is an instance of urine, then there is at least one PROC and KIDNEY for which PROC is an instance of physiologic process and KIDNEY is an instrument for PROC and KIDNEY is an instance of kidney and X is a result of PROC for every X.",
  "miloA344": "Excretion is a subclass of organism process.",
  "miloA345": "If PROC is an instance of excretion, then there is at least one ORG, WASTE and PART for which ORG is an instance of organism and ORG is the agent of PROC and WASTE is a participant in PROC and WASTE is an instance of excrement and PART is an instance of body part and PART is an instrument for PROC for every PROC.",
  "miloA346": "Urination is a subclass of excretion.",
  "miloA347": "If PROC is an instance of urination, then there is at least one URINE for which URINE is an instance of urine and URINE is a participant in PROC for every PROC.",
  "miloA348": "Defecation is a subclass of excretion.",
  "miloA349": "If PROC is an instance of defecation, then there is at least one FECES for which FECES is an instance of feces and FECES is a participant in PROC for every PROC.",
  "miloA350": "Sewage is a subclass of mixture.",
  "miloA351": "If ANI is an instance of animal and D is an instance of disease or syndrome and ANI does not have the attribute D, then there is at least one P and W for which P is an instance of biological process and P is an instance of removing and ANI is the origin of P and W is an instance of sewage and ANI is the agent of P and W is a participant in P for every D and ANI.",
  "miloA352": "Bidet is a subclass of washing device.",
  "miloA354": "Toilet is a subclass of device.",
  "miloA355": "If T is located at R and T is an instance of toilet and R is an instance of room, then R is an instance of bathroom for every T and R.",
  "miloA357": "Toothbrush is a subclass of brush or comb.",
  "miloA359": "Cigar or cigarette is a subclass of smoking device.",
  "miloA360": "If C is an instance of cigar or cigarette, then there is at least one T for which T is an instance of tobacco and T is a part of C for every C.",
  "miloA361": "Tableware is a subclass of device.",
  "miloA363": "Compass is a subclass of device.",
  "miloA364": "Compass is a subclass of content bearing object.",
  "miloA365": "If C is an instance of compass, then there is at least one D for which D is an instance of directional attribute and C represents D for every C.",
  "miloA366": "Major appliance is a subclass of device.",
  "miloA367": "Refrigerator is a subclass of major appliance.",
  "miloA368": "Freezer is a subclass of major appliance.",
  "miloA369": "Cooking range is a subclass of major appliance.",
  "miloA370": "Cooking oven is a subclass of major appliance.",
  "miloA371": "Hot water heater is a subclass of major appliance.",
  "miloA372": "Clothes washing machine is a subclass of major appliance.",
  "miloA373": "Clothes dryer is a subclass of major appliance.",
  "miloA374": "Dishwasher is a subclass of major appliance.",
  "miloA375": "Cooling device is a subclass of device.",
  "miloA377": "Fan device is a subclass of cooling device.",
  "miloA379": "Heating device is a subclass of device.",
  "miloA381": "Oven is a subclass of heating device.",
  "miloA382": "Oven is a subclass of container.",
  "miloA384": "Stove is a subclass of heating device.",
  "miloA386": "Refrigerator is a subclass of cooling device.",
  "miloA387": "Refrigerator is a subclass of electric device.",
  "miloA388": "Refrigerator is a subclass of container.",
  "miloA389": "Pot or pan is a subclass of container.",
  "miloA391": "Ramp is a subclass of self connected object.",
  "miloA392": "If R is an instance of ramp, then R is capable to do motion upward in role the predicate path for every R.",
  "miloA393": "If R is an instance of ramp, then R is capable to do motion downward in role the predicate path for every R.",
  "miloA394": "Recreation or exercise device is a subclass of device.",
  "miloA396": "Walking cane is a subclass of device.",
  "miloA398": "Washing device is a subclass of device.",
  "miloA400": "Material handling equipment is a subclass of device.",
  "miloA401": "Crane is a subclass of material handling equipment.",
  "miloA402": "If C is an instance of corpuscular object and C is an instance of crane, then there is at least one H for which H is an instance of corpuscular object and H is an instance of hoisting device and H is a component of C for every C.",
  "miloA403": "Hoisting device is a subclass of material handling equipment.",
  "miloA404": "If H is an instance of hoisting device, then H is capable to do motion upward in role the predicate instrument for every H.",
  "miloA405": "If H is an instance of hoisting device, then H is capable to do motion downward in role the predicate instrument for every H.",
  "miloA406": "Optical device is a subclass of device.",
  "miloA408": "Eye glass is a subclass of optical device.",
  "miloA409": "Lens is a subclass of optical device.",
  "miloA410": "Microscope is a subclass of optical device.",
  "miloA411": "Filter is a subclass of device.",
  "miloA413": "File device is a subclass of device.",
  "miloA414": "If DEVICE is an instance of file device, then DEVICE is capable to do surface change in role the predicate instrument for every DEVICE.",
  "miloA415": "Electric device is a subclass of device.",
  "miloA416": "If DEV is an instance of electric device and EV is an instance of process and DEV is an instrument for EV, then there is at least one R for which R is an instance of electricity and R is a resource for EV for every DEV and EV.",
  "miloA417": "Electricity is a subclass of substance.",
  "miloA418": "Power source is a subclass of device.",
  "miloA419": "If PS is an instance of power source, then there is at least one RE for which RE is an instance of radiating electromagnetic and PS is the origin of RE for every PS.",
  "miloA420": "Dc power source is a subclass of power source.",
  "miloA421": "Battery is a subclass of dc power source.",
  "miloA422": "Battery is a subclass of electric device.",
  "miloA423": "Radar is a subclass of electric device.",
  "miloA425": "If RADAR is an instance of radar, then RADAR is capable to do radiating electromagnetic in role the predicate agent for every RADAR.",
  "miloA426": "The predicate discovers is an instance of binary predicate.",
  "miloA429": "If OBJECT is an instance of object and AGENT is an instance of agent and AGENT discovers OBJECT, then there is at least one DISCOVERING for which DISCOVERING is an instance of discovering and AGENT is the agent of DISCOVERING and OBJECT is a participant in DISCOVERING for every AGENT and OBJECT.",
  "miloA430": "Sonar is a subclass of corpuscular object.",
  "miloA432": "If SONAR is an instance of sonar, then SONAR is capable to do radiating sound in role the predicate agent for every SONAR.",
  "miloA433": "Echoing is a subclass of radiating sound.",
  "miloA434": "Electrical signalling is a subclass of signalling.",
  "miloA435": "If S is an instance of electrical signalling, then there is at least one D for which D is an instance of electric device and D is an instrument for S for every S.",
  "miloA436": "Electronic signalling is a subclass of electrical signalling.",
  "miloA437": "Security device is a subclass of device.",
  "miloA438": "Lock is a subclass of security device.",
  "miloA439": "Key is a subclass of security device.",
  "miloA441": "Locked is an instance of relational attribute.",
  "miloA443": "If X is an instance of object and X has the attribute locked, then X is an instance of object for every X.",
  "miloA444": "Safe container is a subclass of container.",
  "miloA445": "Safe container is a subclass of security device.",
  "miloA446": "If S is an instance of safe container, then there is at least one L for which L is an instance of lock and L is a part of S for every S.",
  "miloA447": "Animal controller is a subclass of device.",
  "miloA449": "Self powered device is a subclass of device.",
  "miloA450": "If DEVICE is an instance of self powered device, then there is at least one SOURCE for which SOURCE is an instance of device and DEVICE is the power-producing component of SOURCE for every DEVICE.",
  "miloA451": "Animal powered device is a subclass of device.",
  "miloA452": "If P is an instance of process and D is an instance of animal powered device and D is an instrument for P, then there is at least one A for which A is an instance of animal and A is an instrument for P for every D and P.",
  "miloA453": "Flat is an instance of shape attribute.",
  "miloA454": "If F is an instance of self connected object and F has the attribute flat, then there is at least one H, S1, S2, H1 and H2 for which S1 is an instance of self connected object and S2 is an instance of self connected object and H is an instance of length measure and H1 is an instance of length measure and H2 is an instance of length measure and S1 is a side of F and S2 is a side of F and S1 meets S2 and S1 is not equal to S2 and F has a height of H and S1 has a height of H1 and S2 has a height of H2 and H1 is greater than 2 multiplied by H and H2 is greater than 2 multiplied by H for every F.",
  "miloA455": "Long and thin is an instance of shape attribute.",
  "miloA456": "If F is an instance of self connected object and F has the attribute long and thin, then there is at least one H, S1, S2, H1 and H2 for which S1 is an instance of self connected object and S2 is an instance of self connected object and H is an instance of length measure and H1 is an instance of length measure and H2 is an instance of length measure and S1 is a side of F and S2 is a side of F and S1 meets S2 and S1 is not equal to S2 and F has a length of H and S1 has a length of H1 and S2 has a length of H2 and H1 is less than 3 multiplied by H and H2 is less than 3 multiplied by H for every F.",
  "miloA457": "Level shape is an instance of shape attribute.",
  "miloA458": "If O is an instance of self connected object and O has the attribute level shape, then T is not an instance of self connected object or P1 is not an instance of self connected object or P2 is not an instance of self connected object or H1 is not an instance of length measure or H2 is not an instance of length measure or T is not the top of O or P1 is not a part of T or P2 is not a part of T or P1 does not have a height of H1 or P2 does not have a height of H2 or H1 is not greater than H2 for every P1, P2, T, H1 and H2 for every O.",
  "miloA459": "Symmetric shape is an instance of shape attribute.",
  "miloA460": "If T is an instance of object and T has the attribute symmetric shape, then there is at least one C1 and C2 for which C2 is an instance of object and C1 is an instance of object and C1 is a exact copy of C2 and T is equal to the mereological sum of C1 and C2 for every T.",
  "miloA461": "Baton is a subclass of device.",
  "miloA463": "If B is an instance of baton, then B has the attribute long and thin for every B.",
  "miloA464": "Security alarm is a subclass of security device.",
  "miloA465": "Security alarm is a subclass of electric device.",
  "miloA466": "Quantity is exhaustively partitioned into finite quantity and infinite quantity.",
  "miloA467": "Finite quantity is a subclass of quantity.",
  "miloA468": "Infinite quantity is a subclass of quantity.",
  "miloA469": "Clock is a subclass of measuring device.",
  "miloA470": "If M is an instance of measuring and Q is a result of M and C is an instrument for M and C is an instance of clock, then Q is an instance of time measure for every M, C and Q.",
  "miloA471": "Watch clock is a subclass of clock.",
  "miloA472": "If C is an instance of wearable item and P is an instance of animal and P wears C and C is located at W and C is an instance of clock and W is an instance of wrist, then C is an instance of watch clock for every P, W and C.",
  "miloA473": "Thermometer is a subclass of measuring device.",
  "miloA474": "If MEASURE is an instance of measuring and QUANTITY is a result of MEASURE and THERMOMETER is an instrument for MEASURE and THERMOMETER is an instance of thermometer, then QUANTITY is an instance of temperature measure for every MEASURE, THERMOMETER and QUANTITY.",
  "miloA475": "Pressure measuring device is a subclass of measuring device.",
  "miloA476": "If M is an instance of measuring and Q is a result of M and T is an instrument for M and T is an instance of thermometer, then Q is an instance of temperature measure for every M, T and Q.",
  "miloA477": "The predicate measurementReading is an instance of binary predicate.",
  "miloA480": "Communication device is a subclass of engineering component.",
  "miloA482": "If DEVICE is an instance of communication device, then DEVICE is capable to do communication in role the predicate instrument for every DEVICE.",
  "miloA483": "Telephone is a subclass of electric device.",
  "miloA484": "Telephone is a subclass of communication device.",
  "miloA485": "Telephoning is a subclass of communication.",
  "miloA486": "If TEL is an instance of telephoning, then there is at least one DEVICE for which DEVICE is an instance of telephone and DEVICE is an instrument for TEL for every TEL.",
  "miloA487": "If AGENT is an instance of agent and TEL is an instance of telephoning, then there is at least one SPEAK for which SPEAK is an instance of speaking and SPEAK is a subprocess of TEL and if AGENT is the agent of TEL, then AGENT is the agent of SPEAK for every TEL and AGENT.",
  "miloA488": "Fax is a subclass of artifact mediated communication.",
  "miloA489": "If Fax is an instance of fax, then there is at least one FaxMachine for which FaxMachine is an instance of fax machine and FaxMachine is an instrument for Fax for every Fax.",
  "miloA490": "Fax machine is a subclass of telephony device.",
  "miloA491": "Fax machine is a subclass of electric device.",
  "miloA492": "Fax machine is a subclass of communication device.",
  "miloA493": "The predicate emailAddress is an instance of binary predicate.",
  "miloA494": "The predicate emailAddress is a subrelation of the predicate refers.",
  "miloA497": "Light fixture is a subclass of device.",
  "miloA498": "If F is an instance of light fixture, then F is capable to do radiating light in role the predicate instrument for every F.",
  "miloA499": "Candle is a subclass of light fixture.",
  "miloA500": "If CANDLE is an instance of corpuscular object and CANDLE is an instance of candle, then CANDLE is made out of wax for every CANDLE.",
  "miloA502": "Lightning is a subclass of weather process.",
  "miloA503": "Lightning is a subclass of radiating.",
  "miloA504": "If L is an instance of lightning, then there is at least one C for which C is an instance of cloud and the entire process L is located on C for every L.",
  "miloA505": "Thunder is a subclass of weather process.",
  "miloA506": "Thunder is a subclass of radiating sound.",
  "miloA507": "If T is an instance of thunder, then there is at least one L for which L is an instance of lightning and L causes T for every T.",
  "miloA508": "Vehicle light is a subclass of light fixture.",
  "miloA509": "If L is an instance of vehicle light, then there is at least one V for which V is an instance of vehicle and L is a part of V for every L.",
  "miloA510": "Headlight is a subclass of vehicle light.",
  "miloA511": "If L is an instance of headlight, then there is at least one V for which V is an instance of self connected object and V is an instance of vehicle and L is a part of the front of V for every L.",
  "miloA512": "Taillight is a subclass of vehicle light.",
  "miloA513": "If L is an instance of taillight, then there is at least one V for which V is an instance of self connected object and V is an instance of vehicle and L is a part of the back of V for every L.",
  "miloA514": "Painted picture is a subclass of art work.",
  "miloA515": "If PP is an instance of painted picture, then there is at least one PAINT and PAINTING for which PAINT is an instance of paint and PAINTING is an instance of painting and PAINT is a resource for PAINTING and PP is a result of PAINTING for every PP.",
  "miloA516": "Watercolor picture is a subclass of painted picture.",
  "miloA517": "If W is an instance of watercolor picture, then there is at least one WP and P for which WP is an instance of watercolor paint and P is an instance of painting and WP is a resource for P and W is a result of P for every W.",
  "miloA518": "Wallpaper is a subclass of art work.",
  "miloA519": "If P is an instance of object and W is an instance of wallpaper and P is a part of W, then P is an instance of paper for every W and P.",
  "miloA521": "Sculpture is a subclass of art work.",
  "miloA522": "Portrait is a subclass of painted picture.",
  "miloA523": "If P is an instance of portrait, then there is at least one F for which F is an instance of face and P represents F for every P.",
  "miloA524": "Sketch is a subclass of art work.",
  "miloA525": "Collage is a subclass of art work.",
  "miloA526": "Folding is a subclass of shape change.",
  "miloA527": "If O is an instance of object and F is an instance of folding and O is a participant in F, then there is at least one C, P1 and P2 for which P1 is an instance of object and P2 is an instance of object and C is an instance of covering and C is a subprocess of F and P1 is a part of O and P2 is a part of O and P1 is an instrument for C and P2 is a participant in C for every F and O.",
  "miloA528": "Painting is a subclass of covering.",
  "miloA529": "Painting is a subclass of coloring.",
  "miloA530": "If SURFACE is an instance of self connected object and STUFF is an instance of object and PAINT is an instance of painting and SURFACE is a participant in PAINT and STUFF is a resource for PAINT, then there is at least one OBJ for which OBJ is an instance of self connected object and SURFACE is a surface of OBJ and STUFF is an instance of paint for every PAINT, SURFACE and STUFF.",
  "miloA531": "Paint is a subclass of solution.",
  "miloA532": "If PAINT is an instance of paint, then PAINT is capable to do coloring in role the predicate instrument for every PAINT.",
  "miloA533": "Watercolor paint is a subclass of paint.",
  "miloA534": "If P is an instance of watercolor paint, then there is at least one W for which W is an instance of water and W is a part of P for every P.",
  "miloA535": "Oil paint is a subclass of paint.",
  "miloA536": "Oil paint is disjoint from watercolor paint.",
  "miloA537": "If P is an instance of oil paint, then there is at least one O for which O is an instance of oil and O is a part of P for every P.",
  "miloA538": "Oil picture is a subclass of painted picture.",
  "miloA539": "Oil picture is disjoint from watercolor picture.",
  "miloA540": "If P is an instance of oil picture, then there is at least one O and PAINTING for which O is an instance of oil paint and PAINTING is an instance of painting and O is a resource for PAINTING and P is a result of PAINTING for every P.",
  "miloA541": "Art painting is a subclass of content development.",
  "miloA542": "Art painting is a subclass of painting.",
  "miloA543": "If PAINT is an instance of art painting, then there is at least one PICTURE for which PICTURE is an instance of painted picture and PICTURE is a result of PAINT for every PAINT.",
  "miloA544": "Painting device is a subclass of device.",
  "miloA545": "If PD is an instance of painting device, then there is at least one PAINT for which PAINT is a subclass of painting and PD is capable to do PAINT in role the predicate instrument for every PD.",
  "miloA547": "The predicate potentialOfHydrogen is an instance of binary predicate.",
  "miloA550": "If N is an instance of real number and S is an instance of solution and S has a pH value of N, then N is greater than or equal to 0 and N is less than or equal to 14 for every S and N.",
  "miloA551": "Tracing is a subclass of content development.",
  "miloA552": "Tracing is a subclass of surface change.",
  "miloA553": "If T is an instance of tracing, then there is at least one P for which P is an instance of blueprint and P is a result of T for every T.",
  "miloA554": "Composing music is a subclass of content development.",
  "miloA555": "If C is an instance of composing music, then there is at least one M for which M is an instance of musical composition and M is a result of C for every C.",
  "miloA556": "Drawing is a subclass of content development.",
  "miloA557": "Drawing is a subclass of surface change.",
  "miloA558": "If DRAW is an instance of drawing, then there is at least one SKETCH for which SKETCH is an instance of sketch and SKETCH is a result of DRAW for every DRAW.",
  "miloA559": "Focusing is a subclass of quantity change.",
  "miloA560": "If F is an instance of focusing, then there is at least one L for which L is an instance of lens and L is a participant in F for every F.",
  "miloA561": "Display artifact is a subclass of artifact.",
  "miloA563": "Vehicle wheel is a subclass of wheel.",
  "miloA564": "Wheel is a subclass of artifact.",
  "miloA565": "If VEHICLE is an instance of land vehicle, then there is at least one WHEEL for which WHEEL is an instance of wheel and WHEEL is a part of VEHICLE for every VEHICLE.",
  "miloA566": "Vehicle controller is a subclass of device.",
  "miloA567": "If C is an instance of vehicle controller, then there is at least one V for which V is an instance of vehicle and C is a part of V for every C.",
  "miloA569": "Steering wheel is a subclass of vehicle controller.",
  "miloA570": "If W is an instance of steering wheel, then W is capable to do direction change in role the predicate instrument for every W.",
  "miloA571": "Vehicle brake is a subclass of vehicle controller.",
  "miloA573": "Vehicle throttle is a subclass of vehicle controller.",
  "miloA574": "Vehicle tire is a subclass of artifact.",
  "miloA575": "If T is an instance of vehicle tire, then there is at least one W for which W is an instance of vehicle wheel and T is a part of W for every T.",
  "miloA576": "Vehicle window is a subclass of window.",
  "miloA577": "If W is an instance of vehicle window, then there is at least one V for which V is an instance of vehicle and W is a part of V for every W.",
  "miloA578": "Windshield is a subclass of vehicle window.",
  "miloA579": "Windshield is disjoint from rear window.",
  "miloA580": "If W is an instance of windshield, then there is at least one A for which A is an instance of self connected object and A is an instance of road vehicle and W is a part of the front of A for every W.",
  "miloA581": "Land vehicle is a subclass of vehicle.",
  "miloA583": "Water vehicle is a subclass of vehicle.",
  "miloA585": "If CRAFT is an instance of water vehicle and EVENT is an instance of transportation and CRAFT is an instrument for EVENT, then there is at least one WATER for which WATER is an instance of water area and the entire process EVENT is located on WATER for every CRAFT and EVENT.",
  "miloA586": "Road vehicle is a subclass of land vehicle.",
  "miloA587": "Fleet is a subclass of collection.",
  "miloA589": "The predicate fleetSize is an instance of binary predicate.",
  "miloA592": "If NUM is an instance of integer and AGENT is an instance of agent and FLEET is an instance of fleet and AGENT has a fleet size of NUM and AGENT possesses FLEET, then there is a total NUM of members in FLEET for every AGENT, FLEET and NUM.",
  "miloA593": "Axle is a subclass of device.",
  "miloA594": "If V is an instance of corpuscular object and W is an instance of vehicle wheel and V is an instance of road vehicle and W is a part of V, then there is at least one A for which A is an instance of corpuscular object and A is an instance of axle and A is a component of V and W is connected to A for every V and W.",
  "miloA595": "Paper is a subclass of artifact.",
  "miloA597": "Currency bill is a subclass of currency.",
  "miloA598": "Currency is exhaustively partitioned into currency bill and currency coin.",
  "miloA599": "If BILL is an instance of currency bill, then there is at least one PAPER for which PAPER is an instance of paper and PAPER is a part of BILL for every BILL.",
  "miloA600": "Currency coin is a subclass of currency.",
  "miloA601": "If COIN is an instance of currency coin, then there is at least one METAL for which METAL is a subclass of metal and COIN is made out of METAL for every COIN.",
  "miloA602": "Wire is a subclass of artifact.",
  "miloA603": "If WIRE is an instance of corpuscular object and WIRE is an instance of wire, then WIRE is made out of metal for every WIRE.",
  "miloA604": "Wire spring is a subclass of wire.",
  "miloA605": "Wire spring is a subclass of engineering component.",
  "miloA606": "Wire line is a subclass of wire.",
  "miloA607": "Wire line is a subclass of engineering component.",
  "miloA609": "Telephone line is a subclass of wire line.",
  "miloA610": "If TL is an instance of self connected object and TL is an instance of telephone line, then there is at least one T1 and T2 for which T1 is an instance of self connected object and T2 is an instance of self connected object and T1 is an instance of telephone or T1 is an instance of telegraph and T2 is an instance of telephone or T2 is an instance of telegraph and T1 is not equal to T2 and TL connects T1 and T2 for every TL.",
  "miloA611": "String is a subclass of artifact.",
  "miloA613": "Plug is a subclass of artifact.",
  "miloA614": "If PLUG is an instance of plug, then there is at least one HOLE for which HOLE is an instance of hole and PLUG completely fills HOLE for every PLUG.",
  "miloA615": "Pottery is a subclass of artifact.",
  "miloA616": "If POTTERY is an instance of pottery, then there is at least one CLAY for which CLAY is an instance of clay and CLAY is a part of POTTERY for every POTTERY.",
  "miloA617": "Pillow is a subclass of artifact.",
  "miloA618": "Mirror is a subclass of artifact.",
  "miloA619": "If M is an instance of mirror, then M is capable to do reflecting light in role the predicate instrument for every M.",
  "miloA620": "Furniture is a subclass of artifact.",
  "miloA622": "If F is an instance of furniture, then F is capable to do translocation in role the predicate moves for every F.",
  "miloA623": "Furniture is disjoint from engineering component.",
  "miloA624": "Furniture is disjoint from machine.",
  "miloA625": "Furniture is disjoint from transportation device.",
  "miloA626": "Furniture is disjoint from weapon.",
  "miloA627": "Seat is a subclass of furniture.",
  "miloA629": "Chair is a subclass of seat.",
  "miloA630": "If CHAIR is an instance of chair, then PERSON1 is not an instance of object or PERSON2 is not an instance of object or PERSON1 is not an instance of human or PERSON2 is not an instance of human or PERSON1 does not have the attribute sitting or PERSON2 does not have the attribute sitting or PERSON1 is not located at CHAIR or PERSON2 is not located at CHAIR or PERSON1 is equal to PERSON2 for every PERSON1 and PERSON2 for every CHAIR.",
  "miloA631": "Sofa is a subclass of seat.",
  "miloA633": "Bed is a subclass of furniture.",
  "miloA635": "King bed is a subclass of bed.",
  "miloA637": "Queen bed is a subclass of bed.",
  "miloA639": "Double bed is a subclass of bed.",
  "miloA641": "Single bed is a subclass of bed.",
  "miloA642": "Bunk bed is a subclass of bed.",
  "miloA643": "If X is an instance of bunk bed, then there is at least one BED1 and BED2 for which BED1 is an instance of single bed and BED2 is an instance of single bed and BED1 is a part of X and BED2 is a part of X and BED1 is above to BED2 for every X.",
  "miloA644": "Murphy bed is a subclass of bed.",
  "miloA646": "Rollaway bed is a subclass of bed.",
  "miloA647": "If X is an instance of rollaway bed, then there is at least one WHEEL for which WHEEL is an instance of wheel and WHEEL is a part of X for every X.",
  "miloA648": "Sofa bed is a subclass of bed.",
  "miloA650": "Crib is a subclass of bed.",
  "miloA652": "Hammock is a subclass of bed.",
  "miloA655": "Mattress is a subclass of artifact.",
  "miloA656": "If X is an instance of corpuscular object and X is an instance of mattress, then there is at least one BED for which BED is an instance of corpuscular object and BED is an instance of bed and X is a component of BED for every X.",
  "miloA658": "Bed frame is a subclass of artifact.",
  "miloA659": "If X is an instance of corpuscular object and BEDFRAME is an instance of corpuscular object and MATTRESS is an instance of corpuscular object and X is an instance of bed and BEDFRAME is a component of X and BEDFRAME is an instance of bed frame and MATTRESS is a component of X and MATTRESS is an instance of mattress, then MATTRESS is on to BEDFRAME for every X, MATTRESS and BEDFRAME.",
  "miloA660": "Four poster bed is a subclass of bed frame.",
  "miloA661": "If X is an instance of four poster bed, then there is at least one SHAPE for which X has the attribute SHAPE and SHAPE is an instance of quadrilateral for every X.",
  "miloA662": "Bed attribute is a subclass of relational attribute.",
  "miloA663": "If X is an instance of object and X has the attribute ATTR and ATTR is an instance of bed attribute, then X is an instance of bed for every ATTR and X.",
  "miloA664": "Water bed is an instance of bed attribute.",
  "miloA665": "If X is an instance of corpuscular object and X has the attribute water bed, then there is at least one MATTRESS and WATER for which MATTRESS is an instance of corpuscular object and MATTRESS is a component of X and MATTRESS contains WATER and WATER is an instance of water for every X.",
  "miloA666": "Bed linen is a subclass of artifact.",
  "miloA669": "Table is a subclass of furniture.",
  "miloA670": "Desk is a subclass of table.",
  "miloA671": "Chest or cabinet is a subclass of furniture.",
  "miloA672": "Chest or cabinet is a subclass of container.",
  "miloA673": "Coffin is a subclass of container.",
  "miloA675": "Compartment is a subclass of container.",
  "miloA676": "If C is an instance of compartment, then there is at least one O for which O is an instance of container and C is not equal to O and C is a part of O for every C.",
  "miloA677": "Mailbox is a subclass of container.",
  "miloA679": "Screw is a subclass of attaching device.",
  "miloA680": "Screwdriver is a subclass of device.",
  "miloA682": "Hammer is a subclass of device.",
  "miloA684": "Nail is a subclass of attaching device.",
  "miloA685": "Tape is a subclass of attaching device.",
  "miloA686": "If TAPE is an instance of tape, then there is at least one PART for which PART is an instance of object and PART is a part of TAPE and PART is an instance of paper or PART is an instance of fabric for every TAPE.",
  "miloA687": "Anchor is a subclass of attaching device.",
  "miloA688": "If A is an instance of anchor and ATTACH is an instance of attaching and A is an instrument for ATTACH and S is a participant in ATTACH, then S is an instance of water vehicle for every A, ATTACH and S.",
  "miloA689": "Boat deck is a subclass of artifact.",
  "miloA690": "If D is an instance of boat deck, then there is at least one B for which B is an instance of water vehicle and D is a part of B for every D.",
  "miloA691": "Button is a subclass of attaching device.",
  "miloA693": "Clamp is a subclass of attaching device.",
  "miloA694": "Washer is a subclass of device.",
  "miloA696": "If W is an instance of self connected object and W is an instance of washer and O1 is an instance of corpuscular object and O2 is an instance of attaching device and O1 meets W and W contains O2, then there is at least one PURPOSE for which PURPOSE is an instance of formula and W has the purpose of PURPOSE for every O1, O2 and W.",
  "miloA698": "Holder is a subclass of device.",
  "miloA699": "If DEVICE is an instance of holder, then DEVICE is capable to do keeping in role the predicate instrument for every DEVICE.",
  "miloA700": "Saddle is a subclass of holder.",
  "miloA702": "Horse riding is a subclass of carrying.",
  "miloA703": "If R is an instance of horse riding, then there is at least one H for which H is an instance of horse and H is an instrument for R for every R.",
  "miloA704": "The predicate carries is an instance of binary predicate.",
  "miloA707": "If OBJECT is an instance of object and AGENT is an instance of agent and AGENT carries OBJECT, then there is at least one CARRYING for which CARRYING is an instance of process and AGENT is an instrument for CARRYING and OBJECT is a participant in CARRYING for every AGENT and OBJECT.",
  "miloA708": "Tray is a subclass of holder.",
  "miloA709": "Dish is a subclass of holder.",
  "miloA711": "Container is a subclass of holder.",
  "miloA713": "Bag is a subclass of container.",
  "miloA714": "If BAG is an instance of bag, then BAG has the attribute pliable for every BAG.",
  "miloA716": "Box is a subclass of container.",
  "miloA718": "Trap or cage is a subclass of holder.",
  "miloA720": "Envelope is a subclass of container.",
  "miloA721": "Travel container is a subclass of container.",
  "miloA722": "Fluid container is a subclass of container.",
  "miloA723": "If TANK is an instance of self connected object and STUFF is an instance of object and TANK is an instance of fluid container and TANK contains STUFF, then STUFF has the attribute fluid for every TANK and STUFF.",
  "miloA724": "Bottle is a subclass of fluid container.",
  "miloA725": "If BOTTLE is an instance of self connected object and STUFF is an instance of object and BOTTLE is an instance of bottle and BOTTLE contains STUFF, then STUFF has the attribute liquid for every BOTTLE and STUFF.",
  "miloA726": "If BOTTLE is an instance of self connected object and BOTTOM is an instance of self connected object and TOP is an instance of self connected object and WIDTH1 is an instance of length measure and WIDTH2 is an instance of length measure and BOTTLE is an instance of bottle and BOTTOM is the bottom of BOTTLE and TOP is the top of BOTTLE and BOTTOM has a width of WIDTH1 and TOP has a width of WIDTH2, then WIDTH2 is less than WIDTH1 for every BOTTLE, BOTTOM, TOP, WIDTH2 and WIDTH1.",
  "miloA727": "Drinking cup is a subclass of fluid container.",
  "miloA728": "If CUP is an instance of self connected object and STUFF is an instance of object and CUP is an instance of drinking cup and CUP contains STUFF, then STUFF is an instance of beverage for every CUP and STUFF.",
  "miloA729": "Swimming pool is a subclass of fluid container.",
  "miloA730": "Swimming pool is a subclass of stationary artifact.",
  "miloA733": "Board or block is a subclass of artifact.",
  "miloA734": "If BOARD is an instance of board or block, then BOARD is capable to do constructing in role the predicate resource for every BOARD.",
  "miloA735": "Brick is a subclass of board or block.",
  "miloA736": "If B is an instance of corpuscular object and B is an instance of brick, then B is made out of clay for every B.",
  "miloA738": "Veneer is a subclass of artifact.",
  "miloA739": "If V is an instance of veneer, then V has the attribute flat for every V.",
  "miloA741": "The predicate tangent is an instance of binary predicate.",
  "miloA744": "If CIRCLE is an instance of two dimensional figure and LINE is an instance of one dimensional figure and LINE is tangent to CIRCLE, then there is at least one POINT1 for which POINT1 is an instance of geometric point and POINT1 is a point of the figure LINE and POINT1 is a point of the figure CIRCLE and if POINT2 is an instance of geometric point and POINT2 is a point of the figure LINE and POINT2 is a point of the figure CIRCLE, then POINT1 is equal to POINT2 for every POINT2 for every LINE and CIRCLE.",
  "miloA745": "Two dimensional object is a subclass of object.",
  "miloA746": "The predicate sliceOfFigure is an instance of binary predicate.",
  "miloA749": "Round shape is an instance of three dimensional figure.",
  "miloA750": "Cone is a subclass of three dimensional figure.",
  "miloA751": "Cylinder is a subclass of three dimensional figure.",
  "miloA752": "Oblique angle is a subclass of two dimensional angle.",
  "miloA754": "Right angle is a subclass of two dimensional angle.",
  "miloA756": "Acute angle is a subclass of two dimensional angle.",
  "miloA757": "Two dimensional angle is exhaustively partitioned into right angle, oblique angle and acute angle.",
  "miloA759": "Polygon is a subclass of closed two dimensional figure.",
  "miloA760": "If PART is an instance of one dimensional figure and POLYGON is an instance of polygon and PART is a geometric part of POLYGON, then PART is a side of the figure POLYGON or there is at least one SIDE for which SIDE is an instance of one dimensional figure and SIDE is a side of the figure POLYGON and PART is a geometric part of SIDE for every POLYGON and PART.",
  "miloA761": "Triangle is a subclass of polygon.",
  "miloA763": "Right triangle is a subclass of triangle.",
  "miloA764": "If T is an instance of right triangle, then there is at least one A for which A is an instance of right angle and A is an angle of the figure T for every T.",
  "miloA765": "Quadrilateral is a subclass of polygon.",
  "miloA767": "Rectangle is a subclass of quadrilateral.",
  "miloA768": "If ANGLE is an instance of two dimensional angle and RECTANGLE is an instance of rectangle and ANGLE is an angle of the figure RECTANGLE, then ANGLE is an instance of right angle for every RECTANGLE and ANGLE.",
  "miloA769": "Square is a subclass of rectangle.",
  "miloA770": "If SQUARE is an instance of square, then there is at least one LENGTH for which LENGTH is an instance of length measure and if SIDE is an instance of one dimensional figure and SIDE is a side of the figure SQUARE, then the line SIDE has a length of LENGTH for every SIDE for every SQUARE.",
  "miloA771": "The function DiameterFn is an instance of unary function.",
  "miloA772": "The function DiameterFn is an instance of total valued relation.",
  "miloA775": "If C is an instance of circle and L is an instance of length measure and the diameter of C is equal to L, then there is at least one R for which R is an instance of length measure and the radius of C is equal to R and R multiplied by 2 is equal to L for every C and L.",
  "miloA776": "The function RadiusFn is an instance of unary function.",
  "miloA777": "The function RadiusFn is an instance of total valued relation.",
  "miloA780": "If C is an instance of circle and P is an instance of geometric point and P2 is an instance of geometric point and R is an instance of length measure and the center of the circle C is equal to P and P2 is a point of the figure C and the distance between the two points P2 and P is R, then the radius of C is equal to R for every P2, P, C and R.",
  "miloA781": "Circle sector is a subclass of closed two dimensional figure.",
  "miloA782": "The predicate sideOfFigure is a subrelation of the predicate geometricPart.",
  "miloA785": "Sphere is a subclass of three dimensional figure.",
  "miloA786": "Bubble is a subclass of corpuscular object.",
  "miloA787": "If B is an instance of bubble, then there is at least one S for which S is an instance of self connected object and S is a surface of B and S has the attribute liquid for every B.",
  "miloA788": "If P is an instance of object and B is an instance of bubble and P is an interior part of B, then P has the attribute gas for every B and P.",
  "miloA789": "If B is an instance of bubble and S is not an instance of attribute or X is not an instance of object or X does not have the attribute S or X is equal to gas or X does not meet B for every X and S, then B has the attribute round shape for every B.",
  "miloA790": "Nest is a subclass of corpuscular object.",
  "miloA792": "Outdoor clothing is a subclass of clothing.",
  "miloA794": "Apron is a subclass of clothing.",
  "miloA796": "Belt is a subclass of clothing.",
  "miloA797": "If P is an instance of animal and P wears B and B is an instance of belt, then there is at least one C for which C is an instance of clothing and P wears C and B meets C for every P and B.",
  "miloA798": "Tie clothing is a subclass of clothing.",
  "miloA799": "If T is an instance of self connected object and P is an instance of animal and P wears T and T is an instance of tie clothing, then there is at least one N for which N is an instance of neck and N is a part of P and T contains N for every P and T.",
  "miloA800": "Cloak is a subclass of clothing.",
  "miloA801": "Collar is a subclass of clothing.",
  "miloA802": "If C is an instance of collar, then there is at least one OC for which OC is an instance of object and C is a part of OC and OC is an instance of coat or OC is an instance of shirt for every C.",
  "miloA803": "If P is an instance of animal and P wears C and C is an instance of collar, then there is at least one N for which N is an instance of neck and N is a part of P and C meets N for every P and C.",
  "miloA804": "Glove is a subclass of clothing.",
  "miloA805": "If P is an instance of animal and P wears G and G is an instance of glove, then there is at least one H for which H is an instance of hand and H is a part of P and G meets H for every P and G.",
  "miloA806": "Hat is a subclass of clothing.",
  "miloA807": "If PERSON is an instance of animal and PERSON wears HAT and HAT is an instance of hat, then there is at least one HEAD for which HEAD is an instance of head and HEAD is a part of PERSON and HAT meets HEAD for every PERSON and HAT.",
  "miloA808": "Coat is a subclass of outdoor clothing.",
  "miloA809": "Trousers is a subclass of clothing.",
  "miloA810": "If T is an instance of self connected object and H is an instance of animal and H wears T and T is an instance of trousers, then there is at least one L for which L is an instance of leg and L is a part of H and T contains L for every H and T.",
  "miloA811": "Shoe is a subclass of clothing.",
  "miloA812": "If PERSON is an instance of animal and PERSON wears SHOE and SHOE is an instance of shoe, then there is at least one FOOT for which FOOT is an instance of foot and FOOT is a part of PERSON and SHOE meets FOOT for every PERSON and SHOE.",
  "miloA813": "Shoe sole is a subclass of artifact.",
  "miloA814": "If SS is an instance of self connected object and SS is an instance of shoe sole, then there is at least one S for which S is an instance of self connected object and S is an instance of shoe and SS is the bottom of S for every SS.",
  "miloA815": "Sandal is a subclass of shoe.",
  "miloA817": "If S is an instance of sandal, then there is at least one SOLE for which SOLE is an instance of shoe sole and SOLE is a part of S and SOLE has the attribute flat for every S.",
  "miloA818": "Sock is a subclass of clothing.",
  "miloA819": "If S is an instance of self connected object and P is an instance of animal and P wears S and S is an instance of sock, then there is at least one F for which F is an instance of foot and F is a part of P and S contains F for every P and S.",
  "miloA820": "Shirt is a subclass of clothing.",
  "miloA821": "If PERSON is an instance of animal and SHIRT is an instance of shirt and PERSON wears SHIRT, then PERSON is an instance of human for every SHIRT and PERSON.",
  "miloA822": "Sleeve is a subclass of clothing.",
  "miloA823": "If S is an instance of self connected object and P is an instance of animal and P wears S and S is an instance of sleeve, then there is at least one A for which A is an instance of arm and A is a part of P and S contains A for every P and S.",
  "miloA824": "If S is an instance of sleeve, then there is at least one C for which C is an instance of object and S is a part of C and C is an instance of shirt or C is an instance of coat for every S.",
  "miloA825": "Dress is a subclass of clothing.",
  "miloA826": "If PERSON is an instance of animal and DRESS is an instance of dress and PERSON wears DRESS, then PERSON is an instance of woman for every DRESS and PERSON.",
  "miloA827": "Clothing suit is a subclass of collection.",
  "miloA829": "Rug is a subclass of fabric.",
  "miloA831": "Towel is a subclass of fabric.",
  "miloA832": "If X is an instance of towel, then X is capable to do drying in role the predicate instrument for every X.",
  "miloA834": "Leather is a subclass of fabric.",
  "miloA835": "If LEATHER is an instance of leather, then there is at least one MAKE and SKIN for which MAKE is an instance of making and SKIN is a resource for MAKE and SKIN is an instance of skin and LEATHER is a result of MAKE for every LEATHER.",
  "miloA836": "Silk is a subclass of fabric.",
  "miloA837": "If S is an instance of silk, then there is at least one M, T and I for which T is an instance of object and M is an instance of making and S is a result of M and T is a resource for M and T is a part of I and I is an instance of insect and I has the attribute larval for every S.",
  "miloA838": "Wool is a subclass of fabric.",
  "miloA839": "If W is an instance of wool, then there is at least one M, H and S for which M is an instance of making and W is a result of M and H is a resource for M and H is a part of S and H is an instance of hair and S is an instance of sheep for every W.",
  "miloA840": "Pocket is a subclass of fabric.",
  "miloA841": "If POCKET is an instance of pocket, then there is at least one CLOTHING for which CLOTHING is an instance of clothing and POCKET is a part of CLOTHING for every POCKET.",
  "miloA842": "If POCKET is an instance of pocket, then POCKET is capable to do keeping in role the predicate instrument for every POCKET.",
  "miloA843": "Blanket is a subclass of fabric.",
  "miloA845": "Cotton is a subclass of plant anatomical structure.",
  "miloA846": "Cotton fabric is a subclass of fabric.",
  "miloA847": "If F is an instance of cotton fabric, then there is at least one M and C for which M is an instance of making and C is a resource for M and C is an instance of cotton and F is a result of M for every F.",
  "miloA849": "Veil is a subclass of clothing.",
  "miloA851": "Concealing is a subclass of putting.",
  "miloA853": "Dressing is a subclass of putting.",
  "miloA855": "Changing clothing is a subclass of transfer.",
  "miloA856": "If CC is an instance of changing clothing, then there is at least one R and D for which R is an instance of removing clothing and D is an instance of dressing and R is a subprocess of CC and D is a subprocess of CC for every CC.",
  "miloA857": "Removing clothing is a subclass of uncovering.",
  "miloA859": "Cleaning is a subclass of maintaining.",
  "miloA861": "Sweeping is a subclass of removing.",
  "miloA862": "If B is an instance of physical and S is an instance of sweeping and B is an instrument for S, then B is an instance of broom for every S and B.",
  "miloA863": "Washing is a subclass of removing.",
  "miloA864": "Washing is a subclass of cleaning.",
  "miloA865": "Cleaning device is a subclass of device.",
  "miloA867": "Tying is a subclass of attaching.",
  "miloA868": "Untying is a subclass of detaching.",
  "miloA869": "Untying is disjoint from tying.",
  "miloA870": "Sewing is a subclass of attaching.",
  "miloA871": "If S is an instance of sewing, then there is at least one F for which F is an instance of fabric and F is a participant in S for every S.",
  "miloA872": "Soldering is a subclass of attaching.",
  "miloA873": "If OBJ1 is an instance of self connected object and OBJ2 is an instance of self connected object and S is an instance of soldering and OBJ1 is a participant in S and OBJ2 is a participant in S and OBJ1 is not equal to OBJ2, then there is at least one A for which A is an instance of metallic alloy and A connects OBJ1 and OBJ2 for every S, OBJ1 and OBJ2.",
  "miloA874": "Soldering iron is a subclass of electric device.",
  "miloA875": "If S is an instance of soldering, then there is at least one SI for which SI is an instance of soldering iron and SI is an instrument for S for every S.",
  "miloA876": "If SI is an instance of soldering iron, then there is at least one X for which X is an instance of corpuscular object and X is a part of SI and X is made out of metal for every SI.",
  "miloA877": "If S is an instance of soldering, then there is at least one M for which M is an instance of melting and M is a subprocess of S for every S.",
  "miloA878": "The predicate patientMedical is an instance of binary predicate.",
  "miloA881": "If DOCTOR is an instance of cognitive agent and PATIENT is an instance of human and PATIENT is the patient of the doctor DOCTOR, then there is at least one PROCESS for which PROCESS is an instance of process and PATIENT is a participant in PROCESS and DOCTOR is the agent of PROCESS and PROCESS is an instance of diagnostic process or PROCESS is an instance of therapeutic process for every PATIENT and DOCTOR.",
  "miloA882": "Bandage is a subclass of fabric.",
  "miloA884": "Massaging is a subclass of therapeutic process.",
  "miloA885": "Massaging is a subclass of touching.",
  "miloA886": "Relieving pain is a subclass of therapeutic process.",
  "miloA888": "Nonspecific disease is a subclass of disease or syndrome.",
  "miloA889": "If DISEASE is an instance of nonspecific disease, then AGENT is not an instance of physical or AGENT is not an instance of microorganism or there is at least one VICTIM for which VICTIM is an instance of object and VICTIM has the attribute DISEASE and AGENT is not located at VICTIM for every AGENT for every DISEASE.",
  "miloA890": "Bacterial disease is a subclass of infectious disease.",
  "miloA891": "Infectious disease is a subclass of disease or syndrome.",
  "miloA892": "If A is an instance of agent and I is an instance of infectious disease and A has the attribute I, then there is at least one P and O for which P is an instance of pathologic process and O is the agent of P and O is an instance of microorganism and A experiences P for every I and A.",
  "miloA893": "Taking ill is a subclass of pathologic process.",
  "miloA895": "Viral disease is a subclass of infectious disease.",
  "miloA896": "Diarrhea is an instance of disease or syndrome.",
  "miloA897": "Emphysema is an instance of disease or syndrome.",
  "miloA898": "If H is an instance of object and H has the attribute emphysema, then there is at least one L and P for which L is an instance of lung and L is a part of H and P is an instance of pathologic process and the entire process P is located on L for every H.",
  "miloA899": "Fever is an instance of disease or syndrome.",
  "miloA900": "Goiter is an instance of disease or syndrome.",
  "miloA901": "If H is an instance of object and H has the attribute goiter, then there is at least one G and P for which G is an instance of thyroid gland and G is a part of H and P is an instance of pathologic process and the entire process P is located on G for every H.",
  "miloA902": "Tuberculosis is an instance of bacterial disease.",
  "miloA903": "Recovering from illness is a subclass of organism process.",
  "miloA905": "Protozoa is a subclass of microorganism.",
  "miloA906": "The predicate parasite is an instance of binary predicate.",
  "miloA909": "If O2 is an instance of organism and O1 is an instance of organism and O1 is a parasite of O2, then O1 lives in O2 for every O1 and O2.",
  "miloA910": "If O2 is an instance of organism and O1 is an instance of organism and O1 is a parasite of O2, then there is at least one I for which I is an instance of injuring and O1 is the agent of I and O2 is a participant in I for every O1 and O2.",
  "miloA911": "Cancer is an instance of disease or syndrome.",
  "miloA912": "If PERSON is an instance of object and PERSON has the attribute cancer, then there is at least one TUMOR for which TUMOR is an instance of tumor and TUMOR is a part of PERSON for every PERSON.",
  "miloA913": "Neurosis is a subclass of psychological dysfunction.",
  "miloA914": "Psychosis is a subclass of psychological dysfunction.",
  "miloA915": "Atrophy is a subclass of pathologic process.",
  "miloA916": "Atrophy is a subclass of decreasing.",
  "miloA917": "Bloating is a subclass of increasing.",
  "miloA918": "Bloating is a subclass of pathologic process.",
  "miloA920": "Conjugated substance is a subclass of compound substance.",
  "miloA921": "There is at least one C1, C2 and P for which C1 is an instance of compound substance and C2 is an instance of compound substance and C1 is not equal to C2 and P is an instance of chemical synthesis and C1 is a resource for P and C2 is a resource for P and CS is a result of P if and only if CS is an instance of conjugated substance for every CS.",
  "miloA922": "The predicate conjugate is an instance of binary predicate.",
  "miloA923": "The predicate conjugate is an instance of irreflexive relation.",
  "miloA924": "The predicate conjugate is an instance of transitive relation.",
  "miloA927": "If COMPOUND2 is an instance of compound substance and COMPOUND1 is an instance of compound substance and COMPOUND1 and COMPOUND2 are conjugated, then there is at least one NUMBER1 and NUMBER2 for which NUMBER1 is an instance of positive integer and NUMBER2 is an instance of positive integer and the number of protons in COMPOUND1 is NUMBER1 and the number of protons in COMPOUND2 is NUMBER2 and NUMBER1 is equal to NUMBER2 plus 1 for every COMPOUND1 and COMPOUND2.",
  "miloA928": "Biting is a subclass of grabbing.",
  "miloA929": "If ANIMAL is an instance of agent and BITE is an instance of biting and ANIMAL is the agent of BITE, then there is at least one MOUTH for which MOUTH is an instance of mouth and MOUTH is a part of ANIMAL and MOUTH is an instrument for BITE for every ANIMAL and BITE.",
  "miloA930": "Strangling is a subclass of grabbing.",
  "miloA931": "If S is an instance of strangling, then there is at least one T for which T is a participant in S and T is an instance of throat for every S.",
  "miloA933": "Spitting is a subclass of impelling.",
  "miloA934": "If ANIMAL is an instance of agent and SPIT is an instance of spitting and ANIMAL is the agent of SPIT, then there is at least one MOUTH for which MOUTH is an instance of mouth and MOUTH is a part of ANIMAL and MOUTH is the origin of SPIT for every ANIMAL and SPIT.",
  "miloA935": "Punching is a subclass of impelling.",
  "miloA936": "If A is an instance of agent and P is an instance of punching and A is the agent of P, then there is at least one H for which H is an instance of hand and H has the attribute fist and H is a part of A and H is an instrument for P for every A and P.",
  "miloA937": "Kicking is a subclass of impelling.",
  "miloA938": "If ANIMAL is an instance of agent and KICK is an instance of kicking and ANIMAL is the agent of KICK, then there is at least one FOOT for which FOOT is an instance of foot and FOOT is a part of ANIMAL and FOOT is an instrument for KICK for every ANIMAL and KICK.",
  "miloA939": "Mailing is a subclass of transfer.",
  "miloA940": "Messaging is a subclass of transfer.",
  "miloA941": "If MESSAGING is an instance of messaging, then there is at least one M for which M is an instance of message and M is a participant in MESSAGING for every MESSAGING.",
  "miloA942": "The predicate neighbor is an instance of binary predicate.",
  "miloA943": "The predicate neighbor is an instance of symmetric relation.",
  "miloA944": "The predicate neighbor is an instance of irreflexive relation.",
  "miloA947": "If PERSON2 is an instance of human and PERSON1 is an instance of human and PERSON1 is a neighbor of PERSON2, then there is at least one HOME1 and HOME2 for which HOME1 is an instance of permanent residence and HOME2 is an instance of permanent residence and HOME1 is the home of PERSON1 and HOME2 is the home of PERSON2 and HOME1 is not equal to HOME2 and HOME1 is near to HOME2 for every PERSON1 and PERSON2.",
  "miloA948": "The predicate capacity is an instance of binary predicate.",
  "miloA951": "The predicate capacity is internally related to the predicate humanCapacity.",
  "miloA952": "If MEAS is an instance of constant quantity and OBJ1 is an instance of object and OBJ2 is an instance of self connected object and OBJ1 is measured by MEAS and OBJ2 contains OBJ1, then OBJ2 has a capacity of MEAS for every OBJ1, OBJ2 and MEAS.",
  "miloA953": "The predicate humanCapacity is an instance of binary predicate.",
  "miloA954": "The predicate humanCapacity is an instance of single valued relation.",
  "miloA957": "The function LastFn is an instance of unary function.",
  "miloA961": "The function FirstFn is an instance of unary function.",
  "miloA965": "The function StreetAddressFn is an instance of quaternary function.",
  "miloA971": "If COUNTRY is an instance of nation and CITY is an instance of city and ROAD is an instance of roadway and PLACE is an instance of postal place and AGENT is an instance of agent and the agent that resides at PLACE ROAD CITY COUNTRY is equal to AGENT, then PLACE is the post contact site of AGENT for every ROAD, CITY, COUNTRY, PLACE and AGENT.",
  "miloA972": "If COUNTRY is an instance of nation and CITY is an instance of city and ROAD is an instance of roadway and PLACE is an instance of stationary artifact and AGENT is an instance of agent and the agent that resides at PLACE ROAD CITY COUNTRY is equal to AGENT, then there is at least one BUILDING for which BUILDING is an instance of building and PLACE is a part of BUILDING for every ROAD, CITY, COUNTRY, AGENT and PLACE.",
  "miloA973": "Art studio is a subclass of workshop.",
  "miloA975": "Mine is a subclass of stationary artifact.",
  "miloA977": "Mobile residence is a subclass of artifact.",
  "miloA978": "Mobile residence is disjoint from residence.",
  "miloA979": "Prison is a subclass of stationary artifact.",
  "miloA981": "The predicate detainee is an instance of case role.",
  "miloA984": "The predicate detainee is a subrelation of the predicate patient.",
  "miloA985": "The predicate targetInAttack is an instance of binary predicate.",
  "miloA986": "The predicate targetInAttack is an instance of case role.",
  "miloA989": "The predicate targetInAttack is a subrelation of the predicate patient.",
  "miloA990": "Voting poll is a subclass of stationary artifact.",
  "miloA991": "If P is an instance of voting poll, then there is at least one V for which V is an instance of voting and the entire process V is located on P for every P.",
  "miloA992": "Camp is a subclass of mobile residence.",
  "miloA993": "If CAMP is an instance of camp, then there is at least one TENT for which TENT is an instance of tent and TENT is a part of CAMP for every CAMP.",
  "miloA994": "Tent is a subclass of mobile residence.",
  "miloA995": "If TENT is an instance of tent, then there is at least one FABRIC for which FABRIC is an instance of fabric and FABRIC is a part of TENT for every TENT.",
  "miloA996": "Monument is a subclass of stationary artifact.",
  "miloA998": "Tomb is a subclass of stationary artifact.",
  "miloA1000": "Workshop is a subclass of stationary artifact.",
  "miloA1002": "Apartment unit is a subclass of single family residence.",
  "miloA1003": "If PERSON is an instance of human and UNIT is an instance of apartment unit and UNIT is the home of PERSON, then PERSON does not possess UNIT for every PERSON and UNIT.",
  "miloA1004": "If UNIT is an instance of apartment unit, then there is at least one BUILDING for which BUILDING is an instance of apartment building and UNIT is a part of BUILDING for every UNIT.",
  "miloA1005": "The predicate landlord is an instance of binary predicate.",
  "miloA1008": "If U is an instance of permanent residence and L is an instance of agent and L is the landlord of U, then there is at least one R and P for which P is an instance of agent and L possesses U and P is a tenant of U and P is the agent of R and R is an instance of renting and U is a participant in R for every L and U.",
  "miloA1009": "The predicate tenant is an instance of binary predicate.",
  "miloA1012": "If U is an instance of permanent residence and P is an instance of agent and P is a tenant of U, then there is at least one L and R for which L is an instance of agent and R is an instance of renting and L is the landlord of U and P is the agent of R and L possesses U and U is a participant in R for every P and U.",
  "miloA1013": "Condominium unit is a subclass of single family residence.",
  "miloA1014": "If PERSON is an instance of human and UNIT is an instance of single family residence and UNIT is the home of PERSON and PERSON possesses UNIT and UNIT is not an instance of building, then UNIT is an instance of condominium unit for every PERSON and UNIT.",
  "miloA1015": "If UNIT is an instance of condominium unit, then there is at least one BUILDING for which BUILDING is an instance of condominium building and UNIT is a part of BUILDING for every UNIT.",
  "miloA1016": "Apartment building is a subclass of residential building.",
  "miloA1017": "Apartment building is disjoint from single family residence.",
  "miloA1018": "If BUILDING is an instance of apartment building, then there is at least one UNIT1 and UNIT2 for which UNIT1 is an instance of apartment unit and UNIT2 is an instance of apartment unit and UNIT1 is a part of BUILDING and UNIT2 is a part of BUILDING and UNIT1 is not equal to UNIT2 for every BUILDING.",
  "miloA1019": "Condominium building is a subclass of residential building.",
  "miloA1020": "Condominium building is disjoint from single family residence.",
  "miloA1021": "If BUILDING is an instance of condominium building, then there is at least one UNIT1 and UNIT2 for which UNIT1 is an instance of condominium unit and UNIT2 is an instance of condominium unit and UNIT1 is a part of BUILDING and UNIT2 is a part of BUILDING and UNIT1 is not equal to UNIT2 for every BUILDING.",
  "miloA1022": "Dormitory is a subclass of residential building.",
  "miloA1023": "Dormitory is a subclass of temporary residence.",
  "miloA1024": "Dormitory is disjoint from single family residence.",
  "miloA1025": "If D is an instance of dormitory, then there is at least one S for which S is an instance of school and S possesses D for every D.",
  "miloA1026": "Animal residence is a subclass of artifact.",
  "miloA1028": "Sports facility is a subclass of stationary artifact.",
  "miloA1030": "Sports league is a subclass of organization.",
  "miloA1031": "Place of commerce is a subclass of stationary artifact.",
  "miloA1032": "Place of commerce is exhaustively partitioned into commercial building and commercial unit.",
  "miloA1033": "If OFFICE is an instance of place of commerce, then OFFICE is an instance of commercial building or there is at least one BUILDING for which BUILDING is an instance of commercial building and OFFICE is a part of BUILDING for every OFFICE.",
  "miloA1034": "Commercial building is a subclass of building.",
  "miloA1035": "Commercial building is a subclass of place of commerce.",
  "miloA1036": "Warehouse is a subclass of commercial building.",
  "miloA1038": "Commercial unit is a subclass of place of commerce.",
  "miloA1039": "If UNIT is an instance of commercial unit and ORG is an instance of organization and ORG is located at UNIT, then OTHER is not an instance of physical or OTHER is not an instance of organization or OTHER is not located at UNIT or OTHER is equal to ORG for every OTHER for every UNIT and ORG.",
  "miloA1040": "Store is a subclass of building.",
  "miloA1042": "Farm building is a subclass of building.",
  "miloA1043": "Farm building is disjoint from residential building.",
  "miloA1044": "If B is an instance of farm building, then there is at least one F for which F is an instance of farm and B is located at F for every B.",
  "miloA1045": "Agency is a subclass of business.",
  "miloA1046": "If A is an instance of cognitive agent and C is an instance of cognitive agent and A is an instance of agency and C is a customer of A, then C is an instance of commercial agent for every A and C.",
  "miloA1047": "Entertainment company is a subclass of business.",
  "miloA1048": "If C is an instance of entertainment company, then there is at least one P for which P is an instance of commercial service and C is the agent of P and P is an instance of performance for every C.",
  "miloA1049": "Financial company is a subclass of business.",
  "miloA1050": "Savings and loan is a subclass of financial company.",
  "miloA1051": "The predicate insured is an instance of binary predicate.",
  "miloA1052": "The predicate insured is an instance of asymmetric relation.",
  "miloA1055": "If ORG is an instance of organization and PROP is an instance of proposition and PROP is insured by ORG, then PROP has the property contract for every ORG and PROP.",
  "miloA1056": "Insurance company is a subclass of business.",
  "miloA1057": "If I is an instance of insurance company, then there is at least one C for which C is an instance of proposition and C is insured by I for every I.",
  "miloA1058": "Transportation company is a subclass of business.",
  "miloA1059": "If C is an instance of transportation company, then there is at least one S for which S is an instance of commercial service and C is the agent of S and S is an instance of transportation for every C.",
  "miloA1060": "Financial service is a subclass of commercial service.",
  "miloA1061": "If S is an instance of financial service, then there is at least one O for which O is an instance of financial company and O is the agent of S for every S.",
  "miloA1062": "The predicate loss is an instance of asymmetric relation.",
  "miloA1065": "Financing is a subclass of funding.",
  "miloA1066": "Financing is a subclass of financial service.",
  "miloA1067": "Partnership is a subclass of business.",
  "miloA1068": "If C is an instance of partnership, then there is at least one H1 and H2 for which H1 is an instance of human and H2 is an instance of human and H1 is not equal to H2 and H1 possesses C and H2 possesses C for every C.",
  "miloA1069": "Scholarship is a subclass of funding.",
  "miloA1071": "Welfare is a subclass of funding.",
  "miloA1072": "If W is an instance of welfare, then there is at least one O for which O is an instance of service organization and O is the agent of W for every W.",
  "miloA1073": "Publisher is a subclass of manufacturer.",
  "miloA1074": "If C is an instance of publisher, then there is at least one S for which S is an instance of commercial service and C is the agent of S and S is an instance of publication for every C.",
  "miloA1075": "Family business is a subclass of partnership.",
  "miloA1076": "If P1 is an instance of organism and P2 is an instance of organism and C is an instance of family business and P1 possesses C and P2 possesses C, then P1 is related to P2 for every C, P1 and P2.",
  "miloA1077": "Restaurant is a subclass of business.",
  "miloA1079": "If PLACE is an instance of restaurant building, then PLACE is capable to do cooking in role the predicate eventLocated for every PLACE.",
  "miloA1080": "If R is an instance of restaurant, then there is at least one D for which R possesses D and D is an instance of dining area for every R.",
  "miloA1081": "Proprietorship is a subclass of business.",
  "miloA1082": "If C is an instance of proprietorship, then there is at least one H for which H is an instance of human and H possesses C and H2 is not an instance of agent or H is equal to H2 or H2 does not possess C for every H2 for every C.",
  "miloA1083": "Auditorium is a subclass of building.",
  "miloA1085": "If AUDITORIUM is an instance of auditorium, then there is at least one STAGE for which STAGE is an instance of performance stage and STAGE is a part of AUDITORIUM for every AUDITORIUM.",
  "miloA1086": "Auditorium seat is a subclass of seat.",
  "miloA1087": "If SEAT is an instance of auditorium seat, then there is at least one AUDITORIUM for which AUDITORIUM is an instance of auditorium and SEAT is a part of AUDITORIUM for every SEAT.",
  "miloA1088": "If SEAT is an instance of auditorium seat and SEAT is a part of AUDITORIUM and STAGE is a part of AUDITORIUM and AUDITORIUM is an instance of auditorium and STAGE is an instance of performance stage and PERSON is located at SEAT and PERSON is an instance of human and SEE is a subclass of seeing and if INST is an instance of process and INST is an instance of SEE, then STAGE is a participant in INST for every INST, then PERSON is capable to do SEE in role the predicate agent for every AUDITORIUM, SEAT, STAGE, SEE and PERSON.",
  "miloA1089": "The predicate enjoys is a subrelation of the predicate inScopeOfInterest.",
  "miloA1093": "The predicate expects is an instance of binary predicate.",
  "miloA1097": "The predicate fears is a subrelation of the predicate expects.",
  "miloA1098": "If FORMULA is an instance of formula and AGENT is an instance of cognitive agent and AGENT fears that FORMULA will be true, then AGENT does not desire FORMULA for every AGENT and FORMULA.",
  "miloA1099": "The predicate hopes is a subrelation of the predicate expects.",
  "miloA1100": "If FORMULA is an instance of formula and AGENT is an instance of cognitive agent and AGENT hopes that FORMULA will be true, then AGENT desires FORMULA for every AGENT and FORMULA.",
  "miloA1101": "The predicate doubts is an instance of propositional attitude.",
  "miloA1102": "The predicate doubts is an instance of binary predicate.",
  "miloA1105": "If FORMULA is an instance of formula and AGENT is an instance of cognitive agent and AGENT doubts FORMULA, then AGENT does not believe FORMULA for every AGENT and FORMULA.",
  "miloA1106": "The predicate dislikes is an instance of object attitude.",
  "miloA1107": "The predicate dislikes is a subrelation of the predicate inScopeOfInterest.",
  "miloA1108": "The predicate dislikes and the predicate wants are disjoint.",
  "miloA1109": "The predicate dislikes is internally related to the predicate disapproves.",
  "miloA1113": "The predicate disapproves is an instance of propositional attitude.",
  "miloA1114": "The predicate disapproves is an instance of binary predicate.",
  "miloA1115": "The predicate disapproves is a subrelation of the predicate inScopeOfInterest.",
  "miloA1116": "The predicate disapproves and the predicate desires are disjoint.",
  "miloA1119": "The predicate lacks is a subrelation of the predicate needs.",
  "miloA1121": "The function DescendantsFn is an instance of unary function.",
  "miloA1124": "If DESCENDANTS is an instance of family group and PERSON is an instance of human and the descendants of PERSON is equal to DESCENDANTS and MEMBER is an instance of organism, then MEMBER is an ancestor of PERSON if and only if MEMBER is a member of DESCENDANTS for every DESCENDANTS, PERSON and MEMBER.",
  "miloA1125": "Group of animals is a subclass of group.",
  "miloA1126": "If MEMBER is an instance of self connected object and GROUP is an instance of group of animals and MEMBER is a member of GROUP, then MEMBER is an instance of animal and MEMBER is not an instance of human for every GROUP and MEMBER.",
  "miloA1127": "Brood is a subclass of group of animals.",
  "miloA1128": "If MEMBER1 is an instance of organism and MEMBER2 is an instance of organism and BROOD is an instance of brood and MEMBER1 is a member of BROOD and MEMBER2 is a member of BROOD and MEMBER1 is not equal to MEMBER2, then MEMBER1 is the sibling of MEMBER2 for every BROOD, MEMBER1 and MEMBER2.",
  "miloA1129": "If BROOD is an instance of brood, then there is at least one TIME for which TIME is an instance of time interval and if MEMBER is an instance of self connected object and MEMBER is an instance of agent and MEMBER is a member of BROOD, then there is at least one BIRTH for which BIRTH is an instance of birth and MEMBER experiences BIRTH and TIME is equal to the time when BIRTH takes place for every MEMBER for every BROOD.",
  "miloA1130": "Animal team is a subclass of group of animals.",
  "miloA1131": "If AT is an instance of animal team, then there is at least one P for which P is an instance of pulling and AT is the agent of P for every AT.",
  "miloA1132": "Sports team is a subclass of group of people.",
  "miloA1133": "If TEAM is an instance of sports team, then there is at least one SPORT for which SPORT is a subclass of sport and TEAM is capable to do SPORT in role the predicate agent for every TEAM.",
  "miloA1134": "Team sport is a subclass of sport.",
  "miloA1135": "If S is an instance of team sport, then there is at least one T1 and T2 for which T1 is a participant in the contest S and T2 is a participant in the contest S and T1 is an instance of sports team and T2 is an instance of sports team and T1 is not equal to T2 for every S.",
  "miloA1136": "Racing is a subclass of sport.",
  "miloA1137": "The predicate groupMember is a subrelation of the predicate member.",
  "miloA1142": "The predicate headquartersOfOrganization is a subrelation of the predicate located.",
  "miloA1143": "Communication organization is a subclass of organization.",
  "miloA1144": "If CO is an instance of communication organization, then there is at least one CS and C for which C is an instance of communication and CS is an instance of communication system and CS is an instrument for C and CO is the agent of C for every CO.",
  "miloA1145": "Media organization is a subclass of organization.",
  "miloA1146": "The predicate profit is an instance of asymmetric relation.",
  "miloA1149": "Nonprofit organization is a subclass of organization.",
  "miloA1150": "Nonprofit organization is disjoint from commercial agent.",
  "miloA1152": "Communication system is a subclass of collection.",
  "miloA1153": "Care organization is a subclass of organization.",
  "miloA1154": "Care organization is exhaustively partitioned into hospital organization and medical clinic.",
  "miloA1155": "The predicate medicalPatient is an instance of binary predicate.",
  "miloA1159": "Hospital organization is a subclass of care organization.",
  "miloA1160": "Hospital building is a subclass of temporary residence.",
  "miloA1161": "Medical clinic is a subclass of care organization.",
  "miloA1163": "Medical clinic building is a subclass of building.",
  "miloA1164": "Cafeteria is a subclass of restaurant.",
  "miloA1166": "Tavern is a subclass of restaurant.",
  "miloA1167": "If COMPANY is an instance of tavern, then there is at least one SERVICE and BEVERAGE for which SERVICE is an instance of commercial service and COMPANY is the agent of SERVICE and SERVICE is an instance of selling and BEVERAGE is a participant in SERVICE and BEVERAGE is an instance of alcoholic beverage for every COMPANY.",
  "miloA1168": "Shipping is a subclass of transportation.",
  "miloA1169": "Commercial shipping is a subclass of shipping.",
  "miloA1170": "Commercial shipping is a subclass of commercial service.",
  "miloA1171": "Smuggling is a subclass of transportation.",
  "miloA1172": "Smuggling is a subclass of criminal action.",
  "miloA1173": "The predicate customer is an instance of irreflexive relation.",
  "miloA1174": "The predicate customer is an instance of binary predicate.",
  "miloA1175": "The predicate customer is an instance of asymmetric relation.",
  "miloA1178": "If AGENT2 is an instance of cognitive agent and AGENT1 is an instance of cognitive agent, then there is at least one SERVICE for which SERVICE is an instance of financial transaction and AGENT2 is the origin of SERVICE and SERVICE ends at AGENT1 if and only if AGENT1 is a customer of AGENT2 for every AGENT2 and AGENT1.",
  "miloA1179": "The predicate price is an instance of ternary predicate.",
  "miloA1183": "If Agent is an instance of agent and Money is an instance of currency measure and Obj is an instance of physical and Agent pays Money for Obj, then there is at least one Buying for which Buying is an instance of buying and Agent is the agent of Buying and Obj is a participant in Buying and Buying is a transaction with an amount of Money for every Agent, Obj and Money.",
  "miloA1184": "Wholesale store is a subclass of mercantile organization.",
  "miloA1185": "If STORE is an instance of cognitive agent and CUSTOMER is an instance of cognitive agent and STORE is an instance of wholesale store and CUSTOMER is a customer of STORE, then CUSTOMER is an instance of commercial agent for every STORE and CUSTOMER.",
  "miloA1186": "Retail store is a subclass of mercantile organization.",
  "miloA1187": "Retail store is disjoint from wholesale store.",
  "miloA1188": "If X is an instance of retail store, then X is capable to do selling in role the predicate agent for every X.",
  "miloA1189": "Shopping mall is a subclass of mercantile organization.",
  "miloA1190": "Drug store is a subclass of retail store.",
  "miloA1191": "If D is an instance of drug store, then there is at least one S and M for which S is an instance of selling and D is the agent of S and M is a participant in S and M is an instance of medicine for every D.",
  "miloA1192": "Grocery store is a subclass of retail store.",
  "miloA1194": "Offering for sale is a subclass of offering.",
  "miloA1196": "Offering to purchase is a subclass of offering.",
  "miloA1197": "Bargain sale is a subclass of offering.",
  "miloA1199": "Christian bible is a subclass of book.",
  "miloA1200": "Christian bible subsumes the content of new testament.",
  "miloA1201": "Christian bible subsumes the content of old testament.",
  "miloA1202": "Christian gospel is a subclass of text.",
  "miloA1203": "Old testament is a subclass of book.",
  "miloA1204": "New testament is a subclass of book.",
  "miloA1205": "New testament subsumes the content of christian gospel.",
  "miloA1206": "Before common era is an instance of time interval.",
  "miloA1207": "The beginning of the interval before common era is equal to negative infinity.",
  "miloA1208": "Common era does not overlap before common era.",
  "miloA1209": "Common era is an instance of time interval.",
  "miloA1210": "The end of the interval common era is equal to positive infinity.",
  "miloA1211": "Mission organization is a subclass of religious organization.",
  "miloA1212": "Religious building is a subclass of building.",
  "miloA1213": "Religious building is a subclass of place of worship.",
  "miloA1214": "Steeple is a subclass of stationary artifact.",
  "miloA1215": "If STEEPLE is an instance of steeple, then there is at least one BUILDING for which BUILDING is an instance of building and STEEPLE is a part of BUILDING for every STEEPLE.",
  "miloA1216": "Ceremony is a subclass of intentional process.",
  "miloA1217": "Ceremony is a subclass of social interaction.",
  "miloA1218": "Wedding is a subclass of ceremony.",
  "miloA1219": "Wedding is a subclass of declaring.",
  "miloA1222": "Religious service is a subclass of religious process.",
  "miloA1223": "Religious service is a subclass of demonstrating.",
  "miloA1224": "Baptizing is a subclass of ceremony.",
  "miloA1225": "Baptizing is a subclass of religious process.",
  "miloA1226": "Baptizing is a subclass of joining an organization.",
  "miloA1227": "If B is an instance of baptizing and H is a participant in B, then H is an instance of human for every B and H.",
  "miloA1228": "Praying is a subclass of religious process.",
  "miloA1229": "Praying is a subclass of requesting.",
  "miloA1230": "Reference text is a subclass of factual text.",
  "miloA1231": "Independent state is a subclass of geopolitical area.",
  "miloA1232": "Independent state is a subclass of nation.",
  "miloA1233": "Dependency or special sovereignty area is a subclass of geopolitical area.",
  "miloA1234": "Independent state is disjoint from dependency or special sovereignty area.",
  "miloA1235": "Overseas area is a subclass of dependency or special sovereignty area.",
  "miloA1236": "The function ResidentFn is an instance of unary function.",
  "miloA1239": "If AREA is an instance of geopolitical area and AREA is an instance of permanent residence and PERSON is an instance of human and PERSON is a member of the residents of AREA, then AREA is the home of PERSON for every PERSON and AREA.",
  "miloA1240": "The function CitizenryFn is a subrelation of the function ResidentFn.",
  "miloA1243": "The function PerCapitaFn is an instance of binary function.",
  "miloA1247": "If AREA is an instance of geopolitical area and QUANTITY1 is an instance of quantity and QUANTITY2 is an instance of quantity and the average amount of QUANTITY1 possessed by a resident of AREA is equal to QUANTITY2, then there is at least one POPULATION for which POPULATION is an instance of number and POPULATION is equal to the cardinality of the residents of AREA and QUANTITY2 is equal to QUANTITY1 divided by POPULATION for every AREA, QUANTITY2 and QUANTITY1.",
  "miloA1248": "City district is a subclass of geopolitical area.",
  "miloA1249": "If DISTRICT is an instance of geopolitical area, then there is at least one CITY for which CITY is an instance of city and DISTRICT is a geopolitical subdivision of CITY if and only if DISTRICT is an instance of city district for every DISTRICT.",
  "miloA1250": "Downtown is a subclass of city district.",
  "miloA1251": "Cemetery is a subclass of land area.",
  "miloA1252": "If C is an instance of cemetery, then there is at least one T for which T is an instance of tomb and T is located at C for every C.",
  "miloA1253": "Park is a subclass of land area.",
  "miloA1254": "If PARK is an instance of park, then there is at least one GOV for which GOV is an instance of government and GOV possesses PARK for every PARK.",
  "miloA1256": "Public park is a subclass of park.",
  "miloA1257": "If P is an instance of public park, then there is at least one G for which G is an instance of government and G possesses P for every P.",
  "miloA1258": "Cultivated land area is a subclass of land area.",
  "miloA1259": "If A is an instance of cultivated land area, then there is at least one C for which C is an instance of agriculture and the entire process C is located on A for every A.",
  "miloA1260": "Campground is a subclass of land area.",
  "miloA1262": "City block is a subclass of land area.",
  "miloA1263": "If B is an instance of city block, then there is at least one C for which C is an instance of city and B is a part of C for every B.",
  "miloA1264": "Aerobic exercise device is a subclass of recreation or exercise device.",
  "miloA1265": "Anaerobic exercise device is a subclass of recreation or exercise device.",
  "miloA1266": "Anaerobic exercise device is disjoint from aerobic exercise device.",
  "miloA1267": "Skilled occupation is a subclass of occupational role.",
  "miloA1268": "If PERSON is an instance of object and OCCUPATION is an instance of skilled occupation and PERSON has the attribute OCCUPATION, then there is at least one TRAINING for which TRAINING is an instance of educational process and TRAINING ends at PERSON for every OCCUPATION and PERSON.",
  "miloA1269": "Manual labor is a subclass of position.",
  "miloA1270": "Manual labor is a subclass of occupational role.",
  "miloA1271": "Unskilled occupation is a subclass of manual labor.",
  "miloA1272": "Unskilled occupation is disjoint from skilled occupation.",
  "miloA1273": "Occupational trade is a subclass of skilled occupation.",
  "miloA1274": "Occupational trade is a subclass of manual labor.",
  "miloA1275": "Profession is a subclass of skilled occupation.",
  "miloA1276": "Profession is disjoint from occupational trade.",
  "miloA1278": "Government secretary is an instance of government position.",
  "miloA1279": "Secretary of the interior is an instance of government position.",
  "miloA1280": "Secretary of the interior is a subattribute of government secretary.",
  "miloA1281": "Secretary of the treasury is an instance of government position.",
  "miloA1282": "Secretary of the treasury is a subattribute of government secretary.",
  "miloA1283": "State government is a subclass of government.",
  "miloA1285": "City government is a subclass of government.",
  "miloA1287": "Military service is a subclass of military organization.",
  "miloA1288": "Coast guard is a subclass of government organization.",
  "miloA1289": "Army is a subclass of military service.",
  "miloA1290": "Air force is a subclass of military service.",
  "miloA1291": "Military unit is a subclass of military organization.",
  "miloA1292": "If B is an instance of battle, then there is at least one U1 and U2 for which U1 is an instance of military unit and U2 is an instance of military unit and U1 is not equal to U2 and U1 is the agent of B and U2 is the agent of B for every B.",
  "miloA1293": "Military reserve force is a subclass of military organization.",
  "miloA1294": "Military squad is a subclass of military unit.",
  "miloA1295": "Military corps is a subclass of military unit.",
  "miloA1296": "Cavalry unit is a subclass of military unit.",
  "miloA1297": "Military surplus is a subclass of military artifact.",
  "miloA1299": "The predicate hostileForces is an instance of binary predicate.",
  "miloA1300": "The predicate hostileForces is an instance of irreflexive relation.",
  "miloA1303": "If U2 is an instance of military unit and U1 is an instance of military unit and U1 is a force hostile to U2, then there is at least one W, A1 and A2 for which A1 is an instance of geopolitical area and A2 is an instance of geopolitical area and W is an instance of war and A1 is a participant in the contest W and A2 is a participant in the contest W and U1 is a part of the organization the government of A1 and U2 is a part of the organization the government of A2 for every U1 and U2.",
  "miloA1304": "Commission is a subclass of organization.",
  "miloA1306": "Service organization is a subclass of organization.",
  "miloA1307": "If ORG is an instance of service organization, then there is at least one PROC and GOV for which PROC is an instance of regulatory process and ORG is a participant in PROC and GOV is the agent of PROC and GOV is an instance of government for every ORG.",
  "miloA1308": "Library is a subclass of educational organization.",
  "miloA1309": "If L is an instance of library, then there is at least one B and T for which L possesses B and B is an instance of building and T is an instance of text and T is located at B for every L.",
  "miloA1310": "Public library is a subclass of library.",
  "miloA1311": "Public library is a subclass of government organization.",
  "miloA1312": "Museum is a subclass of educational organization.",
  "miloA1313": "Organizational board is a subclass of organization.",
  "miloA1314": "If BOARD is an instance of organizational board, then there is at least one ORG and MANAGE for which ORG is an instance of organization and BOARD is a part of the organization ORG and MANAGE is an instance of managing and BOARD is the agent of MANAGE and ORG is a participant in MANAGE for every BOARD.",
  "miloA1315": "Security unit is a subclass of organization.",
  "miloA1317": "Union organization is a subclass of organization.",
  "miloA1318": "Organic compound is a subclass of compound substance.",
  "miloA1319": "If COMPOUND is an instance of organic compound and COMPOUND is an instance of molecule, then there is at least one CARBON for which CARBON is an instance of carbon and CARBON is a part of COMPOUND for every COMPOUND.",
  "miloA1320": "Urea is a subclass of organic compound.",
  "miloA1321": "Steroid is a subclass of organic compound.",
  "miloA1322": "Steroid is a subclass of biologically active substance.",
  "miloA1323": "Hydrocarbon is a subclass of organic compound.",
  "miloA1324": "If S is an instance of hydrocarbon, then there is at least one P1 and P2 for which S is equal to the mereological sum of P1 and P2 and P1 is an instance of carbon and P2 is an instance of hydrogen for every S.",
  "miloA1325": "Alcohol is a subclass of organic compound.",
  "miloA1326": "Alkaloid is a subclass of chemical base.",
  "miloA1327": "Alkaloid is a subclass of plant substance.",
  "miloA1328": "Alkaloid is a subclass of biologically active substance.",
  "miloA1329": "If A is an instance of alkaloid, then there is at least one N for which N is an instance of nitrogen and N is a part of A for every A.",
  "miloA1330": "Drugged is an instance of consciousness attribute.",
  "miloA1331": "Nothing can simultaneously be drugged and sober.",
  "miloA1333": "Drunk is a subattribute of drugged.",
  "miloA1336": "Amino acid is a subclass of chemical acid.",
  "miloA1337": "Amino acid is a subclass of organic compound.",
  "miloA1338": "If P is an instance of protein, then there is at least one A for which A is an instance of amino acid and A is a part of P for every P.",
  "miloA1339": "Cholesterol is a subclass of steroid.",
  "miloA1340": "Cholesterol is a subclass of animal substance.",
  "miloA1341": "If S is an instance of cholesterol, then there is at least one P and L for which P is an instance of biological process and the entire process P is located on L and L is an instance of liver and S is a result of P for every S.",
  "miloA1342": "Chemical acid is a subclass of compound substance.",
  "miloA1343": "Chemical acid is disjoint from chemical base.",
  "miloA1344": "If CA is an instance of chemical acid and CB is an instance of chemical base and C is an instance of chemical process and CA is a participant in C and CB is a participant in C, then there is at least one CS for which CS is an instance of chemical salt and CS is a result of C for every CA, CB and C.",
  "miloA1345": "Chemical base is a subclass of compound substance.",
  "miloA1346": "Chemical salt is a subclass of compound substance.",
  "miloA1347": "Sodium chloride is a subclass of chemical salt.",
  "miloA1348": "If SALT is an instance of sodium chloride, then there is at least one SYNTHESIS, SODIUM and CHLORINE for which SYNTHESIS is an instance of chemical synthesis and SODIUM is a resource for SYNTHESIS and SODIUM is an instance of sodium and CHLORINE is a resource for SYNTHESIS and CHLORINE is an instance of chlorine and SALT is a result of SYNTHESIS for every SALT.",
  "miloA1349": "Diamond is a subclass of mineral.",
  "miloA1350": "Diamond is a subclass of carbon.",
  "miloA1351": "Saline solution is a subclass of solution.",
  "miloA1352": "If PART is an instance of object and SOLUTION is an instance of saline solution and PART is a proper part of SOLUTION, then PART is an instance of sodium chloride or PART is an instance of water for every SOLUTION and PART.",
  "miloA1353": "If WATER is an instance of water, then there is at least one SYNTHESIS, HYDROGEN and OXYGEN for which SYNTHESIS is an instance of chemical synthesis and HYDROGEN is a resource for SYNTHESIS and HYDROGEN is an instance of hydrogen and OXYGEN is a resource for SYNTHESIS and OXYGEN is an instance of oxygen and WATER is a result of SYNTHESIS for every WATER.",
  "miloA1356": "The predicate reactant is a subrelation of the predicate resource.",
  "miloA1359": "The predicate reagent is a subrelation of the predicate instrument.",
  "miloA1360": "Oil is a subclass of solution.",
  "miloA1361": "If OIL is an instance of oil, then MIX is not an instance of object or WATER is not an instance of object or MIX is not an instance of mixture or WATER is not a part of MIX or WATER is not an instance of water or OIL is not a part of MIX for every MIX and WATER for every OIL.",
  "miloA1362": "Surfactant is a subclass of substance.",
  "miloA1363": "Detergent is a subclass of surfactant.",
  "miloA1364": "Detergent is a subclass of mixture.",
  "miloA1366": "Bathing is a subclass of washing.",
  "miloA1367": "If B is an instance of bathing and A is a participant in B, then A is an instance of animal for every B and A.",
  "miloA1368": "Bathing device is a subclass of washing device.",
  "miloA1370": "Wash basin is a subclass of washing device.",
  "miloA1372": "Glue is a subclass of mixture.",
  "miloA1373": "Glue is a subclass of attaching device.",
  "miloA1375": "Glass is a subclass of mixture.",
  "miloA1376": "Metallic alloy is a subclass of mixture.",
  "miloA1377": "If ALLOY is an instance of metallic alloy, then there is at least one METAL1 and METAL2 for which METAL1 is an instance of metal and METAL2 is an instance of metal and METAL1 is not equal to METAL2 and METAL1 is a part of ALLOY and METAL2 is a part of ALLOY for every ALLOY.",
  "miloA1378": "Steel is a subclass of metallic alloy.",
  "miloA1379": "If STEEL is an instance of steel, then there is at least one IRON for which IRON is an instance of iron and IRON is a part of STEEL for every STEEL.",
  "miloA1380": "Brass is a subclass of metallic alloy.",
  "miloA1381": "If BRASS is an instance of brass, then there is at least one COPPER and ZINC for which COPPER is an instance of copper and ZINC is an instance of zinc and COPPER is a part of BRASS and ZINC is a part of BRASS for every BRASS.",
  "miloA1382": "Powder is a subclass of substance.",
  "miloA1383": "If POWDER is an instance of powder, then POWDER has the attribute solid for every POWDER.",
  "miloA1384": "Fallout is a subclass of powder.",
  "miloA1385": "If POWDER is an instance of fallout, then POWDER is capable to do radiating nuclear in role the predicate instrument for every POWDER.",
  "miloA1386": "Fog is a subclass of water cloud.",
  "miloA1387": "If FOG is an instance of fog, then there is at least one LAND for which LAND is an instance of land area and FOG meets LAND for every FOG.",
  "miloA1388": "Ice is a subclass of water.",
  "miloA1389": "If ICE is an instance of object, then ICE is an instance of water and ICE has the attribute solid if and only if ICE is an instance of ice for every ICE.",
  "miloA1390": "If NUMBER is an instance of real number and ICE is an instance of ice and ICE is measured by NUMBER measured in celsius degree, then NUMBER is less than or equal to 0 for every ICE and NUMBER.",
  "miloA1391": "Field is a subclass of land area.",
  "miloA1392": "If FIELD is an instance of field, then TREE is not an instance of physical or TREE is not an instance of botanical tree or TREE is not located at FIELD for every TREE for every FIELD.",
  "miloA1393": "Lawn is a subclass of field.",
  "miloA1394": "If L is an instance of lawn, then there is at least one G for which G is an instance of grass and G is located at L for every L.",
  "miloA1395": "Military front is a subclass of geographic area.",
  "miloA1397": "Region is exhaustively partitioned into geographic area and space region.",
  "miloA1398": "Atmospheric region is a subclass of space region.",
  "miloA1399": "Stream water area is a subclass of water area.",
  "miloA1400": "Stream water area is a subclass of flow region.",
  "miloA1401": "Stream water area is disjoint from static water area.",
  "miloA1402": "Static water area is a subclass of water area.",
  "miloA1403": "Flow region is a subclass of region.",
  "miloA1404": "If FLUID is an instance of object and FR is an instance of flow region and FLUID is located at FR, then FLUID has the attribute fluid for every FR and FLUID.",
  "miloA1405": "Space region is a subclass of region.",
  "miloA1406": "Space region is disjoint from geographic area.",
  "miloA1407": "Space region is exhaustively partitioned into atmospheric region and outer space region.",
  "miloA1408": "Outer space region is a subclass of space region.",
  "miloA1409": "Storm front is a subclass of atmospheric region.",
  "miloA1410": "If FRONT is an instance of storm front, then there is at least one AIR1 and AIR2 for which AIR1 is an instance of air and AIR2 is an instance of air and FRONT is between AIR1 and AIR2 for every FRONT.",
  "miloA1411": "Inside is an instance of positional attribute.",
  "miloA1413": "Outside is an instance of positional attribute.",
  "miloA1414": "Nothing can simultaneously be inside and outside.",
  "miloA1415": "If REGION is an instance of object and OBJ is an instance of object and OBJ is outside to REGION, then REGION is an instance of region for every OBJ and REGION.",
  "miloA1416": "If REGION is an instance of object and OBJ is an instance of object and OBJ is inside to REGION, then REGION is an instance of region for every OBJ and REGION.",
  "miloA1417": "If REGION is an instance of object and OBJ is an instance of object, then OBJ is not partly located at REGION if and only if OBJ is outside to REGION for every OBJ and REGION.",
  "miloA1418": "If REGION is an instance of object and OBJ is an instance of object and OBJ is a part of REGION, then OBJ is not outside to REGION for every OBJ and REGION.",
  "miloA1419": "Outdoors is a subclass of region.",
  "miloA1420": "If OUTDOORS is an instance of outdoors, then BUILDING is not an instance of object or BUILDING is not an instance of building or OUTDOORS is not inside to BUILDING for every BUILDING for every OUTDOORS.",
  "miloA1421": "Indoors is a subclass of region.",
  "miloA1422": "Indoors is disjoint from outdoors.",
  "miloA1423": "If INDOORS is an instance of indoors, then there is at least one BUILDING for which BUILDING is an instance of building and INDOORS is inside to BUILDING for every INDOORS.",
  "miloA1424": "Biological species is a subclass of class.",
  "miloA1425": "If SPECIES is an instance of biological species, then SPECIES is a subclass of organism for every SPECIES.",
  "miloA1426": "Wood is a subclass of tissue.",
  "miloA1427": "Wood is a subclass of plant substance.",
  "miloA1428": "If X is an instance of wood, then there is at least one CELL for which CELL is an instance of cellulose and CELL is a part of X for every X.",
  "miloA1430": "Wood artifact is a subclass of artifact.",
  "miloA1431": "If W is an instance of corpuscular object and W is an instance of wood artifact, then W is made out of wood for every W.",
  "miloA1432": "Oak wood is a subclass of wood artifact.",
  "miloA1433": "Rubber is a subclass of plant substance.",
  "miloA1434": "Rubber is a subclass of body substance.",
  "miloA1435": "Rubber is a subclass of hydrocarbon.",
  "miloA1436": "If R is an instance of rubber, then there is at least one T for which T is an instance of botanical tree and R is a part of T for every R.",
  "miloA1437": "Plastic is a subclass of hydrocarbon.",
  "miloA1438": "Polypropylene is a subclass of plastic.",
  "miloA1439": "Polystyrene is a subclass of plastic.",
  "miloA1440": "Cellulose is a subclass of plant substance.",
  "miloA1441": "Cellulose is a subclass of carbohydrate.",
  "miloA1442": "Starch is a subclass of carbohydrate.",
  "miloA1443": "Sugar is a subclass of carbohydrate.",
  "miloA1444": "Nectar is a subclass of plant substance.",
  "miloA1445": "Medicine is a subclass of biologically active substance.",
  "miloA1446": "If M is an instance of medicine, then there is at least one P for which P is an instance of therapeutic process and M is an instrument for P for every M.",
  "miloA1447": "Stimulant is a subclass of biologically active substance.",
  "miloA1448": "Stimulant is disjoint from depressant.",
  "miloA1449": "Depressant is a subclass of biologically active substance.",
  "miloA1450": "Opium is a subclass of biologically active substance.",
  "miloA1451": "Opium is a subclass of plant substance.",
  "miloA1452": "Opium is a subclass of depressant.",
  "miloA1453": "If O is an instance of opium, then there is at least one A for which A is an instance of alkaloid and A is a part of O for every O.",
  "miloA1454": "Grass is a subclass of flowering plant.",
  "miloA1455": "Lilac is a subclass of flowering plant.",
  "miloA1456": "Tobacco is a subclass of flowering plant.",
  "miloA1457": "Lesion is a subclass of abnormal anatomical structure.",
  "miloA1458": "If L is an instance of lesion, then there is at least one I for which I is an instance of injuring and L is a result of I for every L.",
  "miloA1459": "If L is an instance of lesion, then there is at least one S and O for which S is an instance of self connected object and S is a surface of O and O is an instance of organ and L is located at S for every L.",
  "miloA1460": "Scar is a subclass of abnormal anatomical structure.",
  "miloA1462": "Tumor is a subclass of abnormal anatomical structure.",
  "miloA1463": "If PART is a subclass of substance and TUMOR is an instance of tumor and TUMOR is made out of PART, then PART is a subclass of tissue for every TUMOR and PART.",
  "miloA1464": "Tendon is a subclass of tissue.",
  "miloA1465": "Tendon is a subclass of animal substance.",
  "miloA1466": "If T is an instance of tendon, then there is at least one M and B for which M is an instance of muscle and B is an instance of bone and T connects M and B for every T.",
  "miloA1467": "Sweat is a subclass of animal substance.",
  "miloA1468": "If SWEAT is an instance of sweat, then there is at least one PART for which PART is an instance of sodium chloride and PART is a part of SWEAT for every SWEAT.",
  "miloA1469": "Plant leaf is a subclass of plant anatomical structure.",
  "miloA1470": "Plant leaf is a subclass of organ.",
  "miloA1471": "Plant branch is a subclass of plant anatomical structure.",
  "miloA1472": "Plant branch is a subclass of body part.",
  "miloA1473": "Botanical tree is a subclass of flowering plant.",
  "miloA1474": "If X is an instance of botanical tree, then X is made out of wood for every X.",
  "miloA1475": "Tree branch is a subclass of plant branch.",
  "miloA1476": "If B is an instance of tree branch, then there is at least one T for which T is an instance of botanical tree and B is a part of T for every B.",
  "miloA1477": "Willow tree is a subclass of botanical tree.",
  "miloA1478": "Plant root is a subclass of plant anatomical structure.",
  "miloA1479": "Plant root is a subclass of organ.",
  "miloA1480": "Flower is a subclass of plant anatomical structure.",
  "miloA1481": "Flower is a subclass of organ.",
  "miloA1483": "Antibody is a subclass of protein.",
  "miloA1485": "Antibiotic is a subclass of biologically active substance.",
  "miloA1486": "Antigen is a subclass of biologically active substance.",
  "miloA1487": "Antigen a is a subclass of antigen.",
  "miloA1488": "Antigen b is a subclass of antigen.",
  "miloA1489": "Blood cell is a subclass of cell.",
  "miloA1490": "Blood cell is a subclass of animal anatomical structure.",
  "miloA1491": "Red blood cell is a subclass of blood cell.",
  "miloA1492": "If C is an instance of red blood cell, then N is not an instance of object or N is not an instance of cell nucleus or N is not a part of C for every N for every C.",
  "miloA1493": "White blood cell is a subclass of blood cell.",
  "miloA1494": "If C is an instance of white blood cell, then there is at least one N for which N is an instance of cell nucleus and N is a part of C for every C.",
  "miloA1495": "Blood type a is a subclass of blood.",
  "miloA1496": "If B is an instance of blood type a, then there is at least one A for which A is an instance of antigen a and A is a part of B for every B.",
  "miloA1497": "If B is an instance of blood type a, then A is not an instance of object or A is not an instance of antigen b or A is not a part of B for every A for every B.",
  "miloA1498": "Blood type ab is a subclass of blood.",
  "miloA1499": "If B is an instance of blood type ab, then there is at least one A for which A is an instance of antigen a and A is a part of B for every B.",
  "miloA1500": "If B is an instance of blood type ab, then there is at least one A for which A is an instance of antigen b and A is a part of B for every B.",
  "miloA1501": "Blood type b is a subclass of blood.",
  "miloA1502": "If B is an instance of blood type b, then there is at least one A for which A is an instance of antigen b and A is a part of B for every B.",
  "miloA1503": "If B is an instance of blood type b, then A is not an instance of object or A is not an instance of antigen a or A is not a part of B for every A for every B.",
  "miloA1504": "Blood type o is a subclass of blood.",
  "miloA1505": "If B is an instance of blood type o, then A is not an instance of object or A is not an instance of antigen a or A is not a part of B for every A for every B.",
  "miloA1506": "If B is an instance of blood type o, then A is not an instance of object or A is not an instance of antigen b or A is not a part of B for every A for every B.",
  "miloA1507": "Nerve cell is a subclass of cell.",
  "miloA1508": "Nerve cell is a subclass of animal anatomical structure.",
  "miloA1509": "If N is an instance of nerve cell, then there is at least one S for which S is an instance of nervous system and N is a part of S for every N.",
  "miloA1510": "Liquid body substance is a subclass of body substance.",
  "miloA1511": "If SUBSTANCE is an instance of liquid body substance, then SUBSTANCE has the attribute liquid for every SUBSTANCE.",
  "miloA1512": "Serum is a subclass of liquid body substance.",
  "miloA1513": "Serum is disjoint from blood.",
  "miloA1514": "Tear substance is a subclass of liquid body substance.",
  "miloA1515": "Tear substance is a subclass of saline solution.",
  "miloA1516": "If T is an instance of tear substance, then there is at least one P and E for which P is an instance of process and E is an instance of eye and E is an instrument for P and T is a result of P for every T.",
  "miloA1517": "Milk is a subclass of liquid body substance.",
  "miloA1518": "Milk is a subclass of beverage.",
  "miloA1519": "If MILK is an instance of milk, then there is at least one PROCESS and MAMMAL for which PROCESS is an instance of process and MAMMAL is an instance of mammal and MAMMAL has the attribute female and MAMMAL is an instrument for PROCESS and MILK is a result of PROCESS for every MILK.",
  "miloA1520": "Cell part is a subclass of body part.",
  "miloA1521": "If OBJ1 is an instance of cell part, then there is at least one CELL for which CELL is an instance of cell and OBJ1 is a proper part of CELL for every OBJ1.",
  "miloA1522": "Cell nucleus is a subclass of cell part.",
  "miloA1523": "If NUCLEUS is an instance of cell nucleus, then there is at least one CELL for which CELL is an instance of cell and NUCLEUS is a part of CELL for every NUCLEUS.",
  "miloA1524": "Tea is a subclass of beverage.",
  "miloA1525": "Tea is a subclass of prepared food.",
  "miloA1526": "Alcoholic beverage is a subclass of beverage.",
  "miloA1527": "Alcoholic beverage is a subclass of depressant.",
  "miloA1528": "If BEVERAGE is an instance of alcoholic beverage, then there is at least one ALCOHOL for which ALCOHOL is an instance of alcohol and ALCOHOL is a part of BEVERAGE for every BEVERAGE.",
  "miloA1529": "Wine is a subclass of alcoholic beverage.",
  "miloA1530": "Distilled alcoholic beverage is a subclass of alcoholic beverage.",
  "miloA1531": "If BEVERAGE is an instance of distilled alcoholic beverage, then there is at least one REMOVE and WATER for which REMOVE is an instance of removing and WATER is a participant in REMOVE and WATER is an instance of water and BEVERAGE is the origin of REMOVE for every BEVERAGE.",
  "miloA1532": "Beer is a subclass of alcoholic beverage.",
  "miloA1533": "Spinal column is a subclass of organ.",
  "miloA1534": "Spinal column is a subclass of animal anatomical structure.",
  "miloA1535": "If VERT is an instance of corpuscular object, then there is at least one SPINE for which VERT is an instance of animal and SPINE is a component of VERT and SPINE is an instance of spinal column if and only if VERT is an instance of vertebrate for every VERT.",
  "miloA1536": "Spinal cord is a subclass of organ.",
  "miloA1537": "If C is an instance of spinal cord, then there is at least one S for which S is an instance of nervous system and C is a part of S for every C.",
  "miloA1538": "If C is an instance of spinal cord, then there is at least one S for which S is an instance of spinal column and S contains C for every C.",
  "miloA1539": "Tail is a subclass of animal anatomical structure.",
  "miloA1540": "If T is an instance of tail, then there is at least one V for which V is an instance of vertebrate and T is a part of V and V is not an instance of human for every T.",
  "miloA1541": "Wing is a subclass of limb.",
  "miloA1542": "Skin is a subclass of body covering.",
  "miloA1543": "Skin is a subclass of animal anatomical structure.",
  "miloA1544": "If SKIN is an instance of skin, then there is at least one SURFACE and ANIMAL for which SURFACE is an instance of self connected object and SURFACE is a surface of ANIMAL and SKIN is a part of ANIMAL and ANIMAL is an instance of animal and SKIN overlaps with SURFACE  for every SKIN.",
  "miloA1545": "Retina is a subclass of organ.",
  "miloA1546": "Retina is a subclass of animal anatomical structure.",
  "miloA1547": "If R is an instance of retina, then there is at least one E for which E is an instance of eye and R is a part of E for every R.",
  "miloA1548": "Bronchial duct is a subclass of body vessel.",
  "miloA1549": "Bronchial duct is a subclass of animal anatomical structure.",
  "miloA1550": "If DUCT is an instance of bronchial duct, then there is at least one LUNG for which LUNG is an instance of lung and DUCT is located at LUNG for every DUCT.",
  "miloA1551": "Blood vessel is a subclass of body vessel.",
  "miloA1552": "Blood vessel is a subclass of animal anatomical structure.",
  "miloA1553": "If VESSEL is an instance of blood vessel, then there is at least one BLOOD and TRANSFER for which BLOOD is an instance of blood and TRANSFER is an instance of transfer and BLOOD is a participant in TRANSFER and VESSEL is an instrument for TRANSFER for every VESSEL.",
  "miloA1554": "Alveolus is a subclass of body vessel.",
  "miloA1555": "Alveolus is a subclass of animal anatomical structure.",
  "miloA1556": "If A is an instance of alveolus, then there is at least one L for which L is an instance of lung and A is located at L for every A.",
  "miloA1557": "Artery is a subclass of blood vessel.",
  "miloA1558": "If ARTERY is an instance of artery and TRANSFER is an instance of transfer and BLOOD is a participant in TRANSFER and ARTERY is an instrument for TRANSFER and BLOOD is an instance of blood, then there is at least one HEART for which HEART is an instance of heart and HEART is the origin of TRANSFER for every ARTERY, BLOOD and TRANSFER.",
  "miloA1559": "Vein is a subclass of blood vessel.",
  "miloA1561": "If V is an instance of vein and T is an instance of transfer and B is a participant in T and V is an instrument for T and B is an instance of blood, then there is at least one H for which H is an instance of heart and T ends at H for every V, B and T.",
  "miloA1562": "Pulmonary artery is a subclass of artery.",
  "miloA1563": "If ARTERY is an instance of pulmonary artery and TRANSFER is an instance of transfer and BLOOD is a participant in TRANSFER and ARTERY is an instrument for TRANSFER and BLOOD is an instance of blood, then there is at least one LUNG for which LUNG is an instance of lung and TRANSFER ends at LUNG for every ARTERY, BLOOD and TRANSFER.",
  "miloA1564": "Pulmonary vein is a subclass of vein.",
  "miloA1565": "If V is an instance of pulmonary vein and T is an instance of transfer and B is a participant in T and V is an instrument for T and B is an instance of blood, then there is at least one L, H and P for which P is an instance of object and L is an instance of lung and L is the origin of T and V is a part of P and L is a part of P and H is a part of P and H is an instance of heart and T ends at H for every B, V and T.",
  "miloA1566": "Capillary is a subclass of blood vessel.",
  "miloA1567": "If C is an instance of capillary, then there is at least one A and V for which A is an instance of artery and V is an instance of vein and C connects A and V for every C.",
  "miloA1568": "Lung is a subclass of organ.",
  "miloA1569": "Lung is a subclass of animal anatomical structure.",
  "miloA1570": "If ANIMAL is an instance of object and ANIMAL is capable to do breathing in role the predicate experiencer, then there is at least one LUNG for which LUNG is a proper part of ANIMAL and LUNG is an instance of lung for every ANIMAL.",
  "miloA1571": "Kidney is a subclass of organ.",
  "miloA1572": "Kidney is a subclass of animal anatomical structure.",
  "miloA1573": "Spleen is a subclass of organ.",
  "miloA1574": "Spleen is a subclass of animal anatomical structure.",
  "miloA1575": "Inhaling is a subclass of breathing.",
  "miloA1576": "If I is an instance of inhaling, then there is at least one L for which L is an instance of lung and I ends at L for every I.",
  "miloA1577": "Exhaling is a subclass of breathing.",
  "miloA1578": "If E is an instance of exhaling, then there is at least one L for which L is an instance of lung and L is the origin of E for every E.",
  "miloA1579": "Nostril is a subclass of body vessel.",
  "miloA1580": "Nostril is a subclass of animal anatomical structure.",
  "miloA1581": "If NOSE is an instance of nose, then there is at least one N1 and N2 for which N1 is an instance of nostril and N2 is an instance of nostril and N1 is not equal to N2 and N1 is connected to NOSE and N2 is connected to NOSE for every NOSE.",
  "miloA1582": "If NOS is an instance of nostril, then there is at least one N and T for which N is an instance of nose and T is an instance of throat and NOS connects N and T for every NOS.",
  "miloA1583": "Heart is a subclass of organ.",
  "miloA1584": "Heart is a subclass of animal anatomical structure.",
  "miloA1585": "If HEART is an instance of heart, then there is at least one TRANSFER and BLOOD for which TRANSFER is an instance of transfer and BLOOD is an instance of blood and HEART is an instrument for TRANSFER and BLOOD is a participant in TRANSFER for every HEART.",
  "miloA1586": "Liver is a subclass of organ.",
  "miloA1587": "Liver is a subclass of animal anatomical structure.",
  "miloA1588": "Mouth is a subclass of animal anatomical structure.",
  "miloA1589": "Mouth is a subclass of body part.",
  "miloA1590": "If MOUTH is an instance of mouth, then there is at least one FACE for which FACE is an instance of face and MOUTH is a part of FACE for every MOUTH.",
  "miloA1591": "Tongue is a subclass of animal anatomical structure.",
  "miloA1592": "Tongue is a subclass of body part.",
  "miloA1593": "If TONGUE is an instance of tongue, then there is at least one MOUTH for which MOUTH is an instance of mouth and TONGUE is a part of MOUTH for every TONGUE.",
  "miloA1594": "Nervous system is a subclass of organ.",
  "miloA1595": "Nervous system is a subclass of animal anatomical structure.",
  "miloA1596": "If S is an instance of nervous system and S is a part of A and A is an instance of animal, then A is an instance of vertebrate for every S and A.",
  "miloA1597": "Hoof is a subclass of animal anatomical structure.",
  "miloA1598": "Hoof is a subclass of body part.",
  "miloA1599": "If H is an instance of hoof, then there is at least one F and A for which F is an instance of foot and A is an instance of hoofed mammal and H is a part of F and F is a part of A for every H.",
  "miloA1600": "Tooth is a subclass of bone.",
  "miloA1601": "If TOOTH is an instance of tooth, then there is at least one MOUTH for which MOUTH is an instance of mouth and TOOTH is a part of MOUTH for every TOOTH.",
  "miloA1602": "Skull is a subclass of bone.",
  "miloA1603": "If S is an instance of skull, then there is at least one V and H for which V is an instance of vertebrate and H is an instance of head and H is a part of V and S is a part of H for every S.",
  "miloA1604": "Horn is a subclass of bone.",
  "miloA1605": "If H is an instance of horn, then there is at least one M for which M is an instance of hoofed mammal and H is a part of M for every H.",
  "miloA1606": "Ivory is a subclass of bone.",
  "miloA1607": "Animal shell is a subclass of animal anatomical structure.",
  "miloA1608": "Animal shell is a subclass of body part.",
  "miloA1609": "If A is an instance of animal and S is an instance of animal shell and S is a part of A, then A is an instance of invertebrate or A is an instance of reptile for every S and A.",
  "miloA1610": "Ossification is a subclass of organ or tissue process.",
  "miloA1611": "If O is an instance of ossification, then there is at least one B for which B is an instance of bone and B is a result of O for every O.",
  "miloA1612": "Chewing is a subclass of body motion.",
  "miloA1614": "If TOOTH is an instance of physical and CHEW is an instance of chewing and TOOTH is an instrument for CHEW, then TOOTH is an instance of tooth for every CHEW and TOOTH.",
  "miloA1615": "If CHEW is an instance of chewing, then there is at least one EAT for which EAT is an instance of eating and CHEW is a subprocess of EAT for every CHEW.",
  "miloA1616": "Feeding is a subclass of giving.",
  "miloA1618": "If F is an instance of feeding and F ends at A, then A is an instance of animal for every F and A.",
  "miloA1619": "Lip is a subclass of animal anatomical structure.",
  "miloA1620": "Lip is a subclass of body part.",
  "miloA1621": "If LIP is an instance of lip, then there is at least one MOUTH for which MOUTH is an instance of mouth and LIP is a part of MOUTH for every LIP.",
  "miloA1622": "Kissing is a subclass of touching.",
  "miloA1624": "Licking is a subclass of touching.",
  "miloA1625": "If L is an instance of licking, then there is at least one T for which T is an instance of tongue and T is an instrument for L for every L.",
  "miloA1626": "Embracing is a subclass of touching.",
  "miloA1627": "If E is an instance of embracing, then there is at least one P1 and P2 for which P1 is an instance of human and P2 is an instance of human and P1 is not equal to P2 and P1 is the agent of E and P2 is the agent of E for every E.",
  "miloA1628": "Skeleton is a subclass of animal anatomical structure.",
  "miloA1629": "Skeleton is a subclass of body part.",
  "miloA1630": "If ANIMAL is an instance of animal and SKELETON is an instance of skeleton and SKELETON is a part of ANIMAL, then ANIMAL is an instance of vertebrate for every SKELETON and ANIMAL.",
  "miloA1631": "If S is an instance of skeleton, then there is at least one A for which A is an instance of animal and S is an interior part of A for every S.",
  "miloA1632": "Exoskeleton is a subclass of animal anatomical structure.",
  "miloA1633": "Exoskeleton is a subclass of body part.",
  "miloA1634": "If ANIMAL is an instance of animal and SKELETON is an instance of exoskeleton and SKELETON is a part of ANIMAL, then ANIMAL is an instance of invertebrate for every SKELETON and ANIMAL.",
  "miloA1635": "If BONE is an instance of object, then there is at least one SKELETON for which SKELETON is an instance of object and SKELETON is an instance of skeleton or SKELETON is an instance of exoskeleton and BONE is a proper part of SKELETON if and only if BONE is an instance of bone for every BONE.",
  "miloA1636": "If X is an instance of exoskeleton, then there is at least one A for which A is an instance of animal and X is a part of A and PART is not an instance of object or PART is not a proper part of A or PART is not outside to X for every PART for every X.",
  "miloA1637": "Body joint is a subclass of body junction.",
  "miloA1638": "If J is an instance of body joint, then there is at least one S, P1 and P2 for which P1 is an instance of corpuscular object and P2 is an instance of corpuscular object and S is an instance of skeleton and P1 is a component of S and P2 is a component of S and J is a component of S and J connects P1 and P2 for every J.",
  "miloA1639": "Airway is a subclass of transitway.",
  "miloA1640": "Throat is a subclass of animal anatomical structure.",
  "miloA1641": "Throat is a subclass of body vessel.",
  "miloA1642": "Throat is a subclass of airway.",
  "miloA1643": "If THROAT is an instance of throat, then there is at least one MOUTH for which MOUTH is an instance of mouth and THROAT is connected to MOUTH for every THROAT.",
  "miloA1644": "Hair is a subclass of animal anatomical structure.",
  "miloA1646": "Facial hair is a subclass of hair.",
  "miloA1647": "If H is an instance of facial hair, then there is at least one F for which F is an instance of face and H is a part of F for every H.",
  "miloA1648": "Hair removal is a subclass of removing.",
  "miloA1649": "If HAIR is an instance of object and REMOVE is an instance of hair removal and HAIR is a resource for REMOVE, then HAIR is an instance of hair for every REMOVE and HAIR.",
  "miloA1650": "Peeling is a subclass of removing.",
  "miloA1651": "If O is an instance of object and P is an instance of peeling and O is a participant in P, then there is at least one S for which S is an instance of skin and O is a part of S for every P and O.",
  "miloA1652": "Brain is a subclass of organ.",
  "miloA1653": "Brain is a subclass of animal anatomical structure.",
  "miloA1654": "The predicate intelligenceQuotient is an instance of binary predicate.",
  "miloA1655": "The predicate intelligenceQuotient is an instance of single valued relation.",
  "miloA1658": "Stomach is a subclass of organ.",
  "miloA1659": "Stomach is a subclass of animal anatomical structure.",
  "miloA1660": "If S is an instance of stomach, then S is capable to do digesting in role the predicate instrument for every S.",
  "miloA1661": "Intestine is a subclass of body vessel.",
  "miloA1662": "Intestine is a subclass of animal anatomical structure.",
  "miloA1663": "If I is an instance of intestine, then I is capable to do digesting in role the predicate instrument for every I.",
  "miloA1664": "If I is an instance of intestine, then there is at least one S for which S is an instance of stomach and I is connected to S for every I.",
  "miloA1665": "Hypothalamus is a subclass of body part.",
  "miloA1666": "Hypothalamus is a subclass of animal anatomical structure.",
  "miloA1667": "If HYPO is an instance of hypothalamus, then there is at least one BRAIN for which BRAIN is an instance of brain and HYPO is a part of BRAIN for every HYPO.",
  "miloA1668": "Eye is a subclass of organ.",
  "miloA1669": "Eye is a subclass of animal anatomical structure.",
  "miloA1670": "If EYE is an instance of eye, then EYE is capable to do seeing in role the predicate instrument for every EYE.",
  "miloA1671": "If EYE is an instance of eye, then there is at least one HEAD for which HEAD is an instance of head and EYE is a part of HEAD for every EYE.",
  "miloA1672": "Ear is a subclass of organ.",
  "miloA1673": "Ear is a subclass of animal anatomical structure.",
  "miloA1674": "If EAR is an instance of ear, then EAR is capable to do hearing in role the predicate instrument for every EAR.",
  "miloA1675": "If EAR is an instance of ear, then there is at least one HEAD for which HEAD is an instance of head and EAR is a part of HEAD for every EAR.",
  "miloA1676": "Eyelid is a subclass of skin.",
  "miloA1677": "If E is an instance of eyelid, then E is capable to do covering in role the predicate instrument for every E.",
  "miloA1679": "Nose is a subclass of organ.",
  "miloA1680": "Nose is a subclass of animal anatomical structure.",
  "miloA1681": "If NOSE is an instance of nose, then NOSE is capable to do smelling in role the predicate instrument for every NOSE.",
  "miloA1682": "If NOSE is an instance of nose, then there is at least one FACE for which FACE is an instance of face and NOSE is a part of FACE for every NOSE.",
  "miloA1683": "The predicate secretesSubstance is an instance of binary predicate.",
  "miloA1686": "If S is a subclass of natural substance and O is a subclass of organic object and I1 is an instance of object and O secretes substance S and I1 is an instance of O, then there is at least one P and I2 for which P is an instance of biological process and the entire process P is located on I1 and I2 is a result of P and I2 is an instance of S for every O, S and I1.",
  "miloA1687": "Thyroid gland is a subclass of gland.",
  "miloA1688": "Thyroid hormone is a subclass of hormone.",
  "miloA1689": "Pituitary gland is a subclass of gland.",
  "miloA1690": "Hormone tsh is a subclass of hormone.",
  "miloA1691": "If HORMONE is an instance of hormone tsh, then there is at least one PROC and GLAND for which PROC is an instance of process and GLAND is an instance of thyroid gland and GLAND is an instrument for PROC and HORMONE is a result of PROC for every HORMONE.",
  "miloA1692": "Pancreas is a subclass of gland.",
  "miloA1694": "Insulin is a subclass of hormone.",
  "miloA1695": "Arm is a subclass of limb.",
  "miloA1696": "If ARM is an instance of arm, then there is at least one PRIMATE for which PRIMATE is an instance of primate and ARM is a part of PRIMATE for every ARM.",
  "miloA1697": "Hand is a subclass of animal anatomical structure.",
  "miloA1698": "Hand is a subclass of body part.",
  "miloA1699": "If HAND is an instance of hand, then there is at least one ARM for which ARM is an instance of arm and HAND is a part of ARM for every HAND.",
  "miloA1700": "Digit appendage is a subclass of animal anatomical structure.",
  "miloA1701": "Digit appendage is a subclass of body part.",
  "miloA1702": "If DIGIT is an instance of digit appendage, then there is at least one LIMB for which LIMB is an instance of limb and DIGIT is a part of LIMB for every DIGIT.",
  "miloA1703": "Toad is a subclass of amphibian.",
  "miloA1704": "If A is an instance of toad, then T is not an instance of object or T is not an instance of tail or T is not a part of A for every T for every A.",
  "miloA1705": "Digit appendage is an initial part of limb.",
  "miloA1706": "Finger is a subclass of digit appendage.",
  "miloA1707": "If FINGER is an instance of finger, then there is at least one HAND for which HAND is an instance of hand and FINGER is a part of HAND for every FINGER.",
  "miloA1708": "Thumb is a subclass of finger.",
  "miloA1709": "Nail digit is a subclass of animal anatomical structure.",
  "miloA1710": "If N is an instance of nail digit, then there is at least one D for which D is an instance of digit appendage and N is a part of D for every N.",
  "miloA1711": "Fingerprint is a subclass of shape attribute.",
  "miloA1712": "Fingerprint is a subclass of biological attribute.",
  "miloA1713": "If O is an instance of object and O has the attribute P and P is an instance of fingerprint and O is not an instance of finger, then there is at least one PR and F for which PR is an instance of process and F is an instrument for PR and F is an instance of finger and F has the attribute P and O is a participant in PR for every P and O.",
  "miloA1714": "Limb is a subclass of animal anatomical structure.",
  "miloA1715": "Limb is a subclass of body part.",
  "miloA1716": "If LIMB is an instance of limb, then there is at least one VERTEBRATE for which VERTEBRATE is an instance of vertebrate and LIMB is a part of VERTEBRATE for every LIMB.",
  "miloA1717": "Snake is a subclass of reptile.",
  "miloA1718": "If SNAKE is an instance of snake, then LIMB is not an instance of object or LIMB is not an instance of limb or LIMB is not a part of SNAKE for every LIMB for every SNAKE.",
  "miloA1719": "Rattlesnake is a subclass of snake.",
  "miloA1720": "Constrictor snake is a subclass of snake.",
  "miloA1721": "Ant insect is a subclass of insect.",
  "miloA1722": "Anaconda is a subclass of constrictor snake.",
  "miloA1723": "Bee is a subclass of insect.",
  "miloA1724": "Bumble bee is a subclass of bee.",
  "miloA1725": "Fly insect is a subclass of insect.",
  "miloA1726": "Grasshopper is a subclass of insect.",
  "miloA1727": "Moth is a subclass of insect.",
  "miloA1728": "Queen insect is a subclass of insect.",
  "miloA1729": "Queen insect is disjoint from worker insect.",
  "miloA1730": "If INSECT is an instance of queen insect, then INSECT has the attribute female and INSECT is capable to do replication in role the predicate agent for every INSECT.",
  "miloA1731": "If INSECT is an instance of queen insect, then there is at least one GROUP for which GROUP is an instance of group and INSECT is a member of GROUP and MEMBER is not an instance of self connected object or MEMBER is not a member of GROUP or MEMBER is not capable to do replication in role the predicate agent or MEMBER is equal to INSECT for every MEMBER for every INSECT.",
  "miloA1732": "Worker insect is a subclass of insect.",
  "miloA1733": "Leg is a subclass of limb.",
  "miloA1734": "If LEG is an instance of leg, then there is at least one ANIMAL for which ANIMAL is an instance of animal and LEG is a part of ANIMAL for every LEG.",
  "miloA1735": "Foot is a subclass of animal anatomical structure.",
  "miloA1736": "Foot is a subclass of body part.",
  "miloA1737": "If FOOT is an instance of foot, then there is at least one LIMB for which LIMB is an instance of leg and FOOT is a part of LIMB for every FOOT.",
  "miloA1738": "Ankle is a subclass of body joint.",
  "miloA1739": "If A is an instance of ankle, then there is at least one L for which L is an instance of leg and A is a part of L for every A.",
  "miloA1740": "Elbow is a subclass of body joint.",
  "miloA1741": "If E is an instance of elbow, then there is at least one A for which A is an instance of arm and E is a part of A for every E.",
  "miloA1742": "Wrist is a subclass of body joint.",
  "miloA1743": "If W is an instance of wrist, then there is at least one A for which A is an instance of arm and W is a part of A for every W.",
  "miloA1744": "Toe is a subclass of animal anatomical structure.",
  "miloA1745": "Toe is a subclass of body part.",
  "miloA1746": "Toe is a subclass of digit appendage.",
  "miloA1747": "If TOE is an instance of toe, then there is at least one FOOT for which FOOT is an instance of foot and TOE is a part of FOOT for every TOE.",
  "miloA1748": "Knee is a subclass of body joint.",
  "miloA1749": "If KNEE is an instance of knee, then there is at least one LEG for which LEG is an instance of leg and KNEE is a part of LEG for every KNEE.",
  "miloA1750": "Shoulder is a subclass of animal anatomical structure.",
  "miloA1751": "Shoulder is a subclass of body part.",
  "miloA1752": "If SHOULDER is an instance of shoulder, then there is at least one PRIMATE for which PRIMATE is an instance of primate and SHOULDER is a part of PRIMATE for every SHOULDER.",
  "miloA1753": "Knuckle is a subclass of body joint.",
  "miloA1754": "If KNUCKLE is an instance of knuckle, then there is at least one FINGER for which FINGER is an instance of finger and KNUCKLE is a part of FINGER for every KNUCKLE.",
  "miloA1755": "Torso is a subclass of animal anatomical structure.",
  "miloA1756": "Torso is a subclass of body part.",
  "miloA1757": "If TORSO is an instance of torso and LIMB is an instance of limb, then TORSO does not overlap with LIMB  for every TORSO and LIMB.",
  "miloA1758": "Breast is a subclass of animal anatomical structure.",
  "miloA1759": "Breast is a subclass of organ.",
  "miloA1760": "If B is an instance of breast, then there is at least one T for which T is an instance of torso and B is a part of the front of T for every B.",
  "miloA1761": "If B is an instance of breast, then there is at least one P for which P is an instance of primate and B is a part of P for every B.",
  "miloA1762": "Head is a subclass of animal anatomical structure.",
  "miloA1763": "Head is a subclass of body part.",
  "miloA1764": "Neck is a subclass of animal anatomical structure.",
  "miloA1765": "Neck is a subclass of body part.",
  "miloA1766": "If NECK is an instance of neck, then there is at least one HEAD for which HEAD is an instance of head and NECK is connected to HEAD for every NECK.",
  "miloA1767": "Face is a subclass of animal anatomical structure.",
  "miloA1768": "Face is a subclass of body part.",
  "miloA1769": "If FACE is an instance of face, then there is at least one HEAD for which HEAD is an instance of head and FACE is a part of HEAD for every FACE.",
  "miloA1770": "If FACE is an instance of face, then there is at least one VERTEBRATE for which VERTEBRATE is an instance of vertebrate and FACE is a part of VERTEBRATE for every FACE.",
  "miloA1771": "Chin is a subclass of animal anatomical structure.",
  "miloA1772": "Chin is a subclass of body part.",
  "miloA1773": "If CHIN is an instance of chin, then there is at least one FACE for which FACE is an instance of face and CHIN is a part of FACE for every CHIN.",
  "miloA1774": "If FACE is an instance of object and PART is an instance of object and CHIN is an instance of chin and PART is a part of FACE and PART is not a part of CHIN, then PART is below to CHIN for every FACE, CHIN and PART.",
  "miloA1776": "Expressing is disjointly decomposed into expressing approval and expressing disapproval.",
  "miloA1777": "Expressing approval is a subclass of expressing.",
  "miloA1778": "If AGENT is an instance of cognitive agent and THING is an instance of formula and EXPRESS is an instance of expressing approval and AGENT is the agent of EXPRESS and THING is a participant in EXPRESS, then AGENT wants THING or AGENT desires THING for every EXPRESS, AGENT and THING.",
  "miloA1779": "Expressing disapproval is a subclass of expressing.",
  "miloA1780": "If AGENT is an instance of cognitive agent and THING is an instance of object and THING is an instance of formula and EXPRESS is an instance of expressing disapproval and AGENT is the agent of EXPRESS and THING is a participant in EXPRESS, then AGENT dislikes THING or AGENT disapproves THING for every EXPRESS, AGENT and THING.",
  "miloA1781": "Regretting is a subclass of expressing disapproval.",
  "miloA1782": "If R is an instance of regretting and T is a participant in R and T is an instance of sentence, then the truth value of T is true for every R and T.",
  "miloA1783": "Expressing farewell is a subclass of expressing.",
  "miloA1784": "Congratulating is a subclass of expressing approval.",
  "miloA1785": "If C is an instance of congratulating, then there is at least one P, A and D for which D is an instance of agent and P is an instance of process and A is an instance of cognitive agent and C ends at D and D is the agent of P and A is the agent of C and A wants P and C refers to P for every C.",
  "miloA1786": "Facial expression is a subclass of gesture.",
  "miloA1787": "If AGENT is an instance of agent and EXPRESS is an instance of facial expression and AGENT is the agent of EXPRESS, then there is at least one FACE for which FACE is a part of AGENT and FACE is an instance of face and FACE is an instrument for EXPRESS for every AGENT and EXPRESS.",
  "miloA1788": "Smiling is a subclass of facial expression.",
  "miloA1790": "Frowning is a subclass of facial expression.",
  "miloA1792": "Laughing is a subclass of vocalizing.",
  "miloA1793": "Laughing is a subclass of facial expression.",
  "miloA1794": "If LAUGH is an instance of laughing, then there is at least one SMILE for which SMILE is an instance of smiling and SMILE is a subprocess of LAUGH for every LAUGH.",
  "miloA1795": "Weeping is a subclass of facial expression.",
  "miloA1797": "Nodding is a subclass of gesture.",
  "miloA1798": "If NOD is an instance of nodding and HEAD is a participant in NOD, then HEAD is an instance of head for every NOD and HEAD.",
  "miloA1799": "Hand gesture is a subclass of gesture.",
  "miloA1800": "If HG is an instance of hand gesture, then there is at least one H for which H is an instance of hand and H is a participant in HG for every HG.",
  "miloA1801": "Waving is a subclass of hand gesture.",
  "miloA1802": "If WAVE is an instance of waving and HAND is a participant in WAVE, then HAND is an instance of hand for every WAVE and HAND.",
  "miloA1803": "Clapping is a subclass of hand gesture.",
  "miloA1804": "Clapping is a subclass of radiating sound.",
  "miloA1805": "Clapping is a subclass of impacting.",
  "miloA1806": "Inclining is a subclass of body motion.",
  "miloA1807": "Inclining is a subclass of motion downward.",
  "miloA1808": "Bowing is a subclass of gesture.",
  "miloA1809": "Bowing is a subclass of inclining.",
  "miloA1810": "Bowing is a subclass of motion downward.",
  "miloA1811": "Sinking is a subclass of falling.",
  "miloA1812": "If S is an instance of sinking, then there is at least one W for which W is an instance of water area and the entire process S is located on W for every S.",
  "miloA1813": "Ducking is a subclass of intentional process.",
  "miloA1814": "Ducking is a subclass of body motion.",
  "miloA1815": "Ducking is a subclass of motion downward.",
  "miloA1817": "Expressing in language is a subclass of expressing.",
  "miloA1818": "Expressing in language is a subclass of linguistic communication.",
  "miloA1819": "Tonal language is a subclass of spoken human language.",
  "miloA1820": "Thanking is a subclass of expressing in language.",
  "miloA1821": "Thanking is a subclass of expressing approval.",
  "miloA1823": "If T is an instance of thanking and T ends at P, then P is an instance of human for every T and P.",
  "miloA1824": "Greeting is a subclass of expressing.",
  "miloA1825": "The predicate half is a subrelation of the predicate part.",
  "miloA1826": "If WHOLE is an instance of object and HALF is an instance of object and HALF is half of WHOLE, then there is at least one OTHER for which OTHER is an instance of object and OTHER is half of WHOLE and OTHER is not equal to HALF and WHOLE is equal to the mereological sum of HALF and OTHER for every WHOLE and HALF.",
  "miloA1827": "The predicate third is a subrelation of the predicate part.",
  "miloA1828": "If W is an instance of object and T is an instance of object and T is a third of W, then there is at least one O1 and O2 for which O1 is an instance of object and O2 is an instance of object and O1 is a third of W and O2 is a third of W and O1 is not equal to T and O2 is not equal to T and O1 is not equal to O2 and W is equal to the mereological sum of T and the mereological sum of O1 and O2 for every W and T.",
  "miloA1829": "The predicate quarter is a subrelation of the predicate part.",
  "miloA1830": "If W is an instance of object and Q is an instance of object, then there is at least one H for which H is an instance of object and H is half of W and Q is half of H if and only if Q is a quarter of W for every W and Q.",
  "miloA1831": "The predicate most is a subrelation of the predicate part.",
  "miloA1832": "If WHOLE is an instance of object and MOST is an instance of object and MOST is the largest part of WHOLE, then there is at least one HALF, NUMBER1, NUMBER2 and UNIT for which HALF is an instance of object and UNIT is an instance of unit of measure and NUMBER1 is an instance of real number and NUMBER2 is an instance of real number and HALF is half of WHOLE and HALF is measured by NUMBER1 measured in UNIT and MOST is measured by NUMBER2 measured in UNIT and NUMBER2 is greater than NUMBER1 for every WHOLE and MOST.",
  "miloA1833": "Blueprint is a subclass of icon.",
  "miloA1835": "Chart is a subclass of icon.",
  "miloA1836": "If CHART is an instance of chart, then there is at least one QUANTITY for which QUANTITY is an instance of physical quantity and CHART refers to QUANTITY for every CHART.",
  "miloA1837": "Flag is a subclass of icon.",
  "miloA1838": "If FLAG is an instance of object and FLAG is an instance of flag, then there is at least one FABRIC for which FABRIC is an instance of fabric and FABRIC is a part of FLAG for every FLAG.",
  "miloA1839": "National flag is a subclass of flag.",
  "miloA1840": "If F is an instance of national flag, then there is at least one N for which N is an instance of nation and F refers to N for every F.",
  "miloA1841": "Graph diagram is a subclass of icon.",
  "miloA1842": "If G is an instance of graph diagram, then there is at least one Q for which Q is an instance of physical quantity and G refers to Q for every G.",
  "miloA1843": "Arrow icon is a subclass of icon.",
  "miloA1844": "Map is a subclass of icon.",
  "miloA1845": "If M is an instance of map, then there is at least one A for which A is an instance of geographic area and M represents A for every M.",
  "miloA1846": "Photograph is a subclass of image.",
  "miloA1847": "Photograph is a subclass of recording.",
  "miloA1848": "Photographing is a subclass of content development.",
  "miloA1849": "If SHOOT is an instance of photographing, then there is at least one PHOTO and CAMERA for which PHOTO is an instance of photograph and PHOTO is a result of SHOOT and CAMERA is an instrument for SHOOT and CAMERA is an instance of camera for every SHOOT.",
  "miloA1850": "Camera is a subclass of device.",
  "miloA1851": "If CAMERA is an instance of camera, then CAMERA is capable to do photographing in role the predicate instrument for every CAMERA.",
  "miloA1852": "Ton mass is an instance of unit of mass.",
  "miloA1853": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in ton mass is equal to NUMBER multiplied by 2000 measured in pound mass for every NUMBER.",
  "miloA1854": "Metric ton is an instance of unit of mass.",
  "miloA1855": "1 measured in metric ton is equal to 2205 measured in pound mass.",
  "miloA1857": "Long ton is an instance of unit of mass.",
  "miloA1858": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in long ton is equal to NUMBER multiplied by 2240 measured in pound mass for every NUMBER.",
  "miloA1859": "Cubic foot is an instance of unit of volume.",
  "miloA1860": "1 measured in cubic foot is equal to 1 measured in foot length multiplied by 1 measured in foot length multiplied by 1 measured in foot length.",
  "miloA1861": "If N3 is an instance of real number and N2 is an instance of real number and N1 is an instance of real number and N4 is an instance of real number and QUANT is an instance of physical quantity and N4 is equal to N1 multiplied by N2 multiplied by N3 and QUANT is equal to N1 measured in foot length multiplied by N2 measured in foot length multiplied by N3 measured in foot length, then QUANT is equal to N4 measured in cubic foot for every N1, N2, N3, QUANT and N4.",
  "miloA1862": "Registry ton is an instance of unit of volume.",
  "miloA1863": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in registry ton is equal to NUMBER multiplied by 100 measured in cubic foot for every NUMBER.",
  "miloA1864": "Page is an instance of unit of information.",
  "miloA1865": "Liquor shot is an instance of unit of volume.",
  "miloA1866": "Millennium duration is an instance of unit of duration.",
  "miloA1867": "If N is an instance of real number and N is equal to 1 multiplied by N, then N measured in millennium duration is equal to N multiplied by 1000 measured in year duration for every N.",
  "miloA1868": "Acre is an instance of unit of area.",
  "miloA1869": "Square mile is an instance of unit of area.",
  "miloA1870": "1 measured in square mile is equal to 1 measured in mile per 1 measured in mile.",
  "miloA1871": "Square yard is an instance of unit of area.",
  "miloA1872": "1 measured in square yard is equal to 1 measured in yard length per 1 measured in yard length.",
  "miloA1873": "The predicate creator is an instance of binary predicate.",
  "miloA1876": "If AGENT is an instance of agent and AGENT is the creator of ENTITY, then there is at least one CREATION for which CREATION is an instance of creation and AGENT is the agent of CREATION and ENTITY is a result of CREATION for every AGENT and ENTITY.",
  "miloA1877": "Music is a subclass of proposition.",
  "miloA1878": "If MUSIC is an instance of process and MC is an instance of music and MUSIC realizes the content of MC, then MUSIC is an instance of making music for every MC and MUSIC.",
  "miloA1879": "Musical composition is a subclass of music.",
  "miloA1880": "Song is a subclass of music.",
  "miloA1881": "Lyrical content is a subclass of proposition.",
  "miloA1883": "If L is an instance of lyrical content, then there is at least one W and I for which I is an instance of proposition and W is an instance of word and W contains information I and I is a sub-proposition of L for every L.",
  "miloA1884": "Legislative bill is an instance of deontic attribute.",
  "miloA1886": "Passing a bill is a subclass of political process.",
  "miloA1887": "Passing a bill is a subclass of declaring.",
  "miloA1889": "International law is a subattribute of law.",
  "miloA1890": "Illegal is a subattribute of prohibition.",
  "miloA1891": "Nothing can simultaneously be illegal and legal.",
  "miloA1892": "Legal is a subattribute of permission.",
  "miloA1893": "Criminal action is a subclass of intentional process.",
  "miloA1894": "If ACTION is an instance of criminal action, then there is at least one LAW, CONTENT and CRIME for which LAW is an instance of formula and CONTENT is an instance of proposition and CRIME is an instance of proposition and the statement LAW has the modal force of law and LAW contains information CONTENT and ACTION realizes the content of CRIME and CONTENT is not consistent with CRIME for every ACTION.",
  "miloA1895": "Political crime is a subclass of criminal action.",
  "miloA1896": "Political crime is a subclass of political process.",
  "miloA1897": "Political revolution is a subclass of political process.",
  "miloA1898": "Political revolution is a subclass of violent contest.",
  "miloA1899": "If R is an instance of political revolution and A is a participant in R, then A is an instance of geopolitical area for every R and A.",
  "miloA1901": "Law enforcement is a subclass of political process.",
  "miloA1902": "Law enforcement is a subclass of regulatory process.",
  "miloA1903": "If AGENT is an instance of agent and P is an instance of self connected object and L is an instance of law enforcement and AGENT is the agent of L, then P is an instance of police organization or there is at least one O for which O is an instance of police organization and P is a member of O for every L, AGENT and P.",
  "miloA1904": "Imprisoning is a subclass of confining.",
  "miloA1905": "If I is an instance of imprisoning, then there is at least one P for which P is an instance of prison and the entire process I is located on P for every I.",
  "miloA1906": "Espionage is a subclass of political process.",
  "miloA1907": "Espionage is a subclass of investigating.",
  "miloA1908": "If S is an instance of espionage, then there is at least one GOV1 and GOV2 for which GOV1 is an instance of government and GOV2 is an instance of government and GOV1 is the agent of S and GOV2 is a participant in S and GOV1 is not equal to GOV2 for every S.",
  "miloA1909": "Polling is a subclass of investigating.",
  "miloA1910": "Military infiltration is a subclass of military process.",
  "miloA1911": "Military infiltration is a subclass of translocation.",
  "miloA1912": "Agreement is a subclass of proposition.",
  "miloA1913": "If COMPACT is an instance of agreement, then there is at least one COMM for which COMM is an instance of committing and COMM represents COMPACT for every COMPACT.",
  "miloA1914": "If AGREEMENT is an instance of agreement, then there is at least one AGENT1 and AGENT2 for which AGENT1 is an instance of cognitive agent and AGENT2 is an instance of cognitive agent and AGENT1 is a party to the agreement AGREEMENT and AGENT2 is a party to the agreement AGREEMENT and AGENT1 is not equal to AGENT2 for every AGREEMENT.",
  "miloA1915": "The predicate partyToAgreement is an instance of binary predicate.",
  "miloA1918": "If CONTENT is an instance of agreement and AGENT is an instance of cognitive agent and AGENT is a party to the agreement CONTENT, then there is at least one C for which C is an instance of committing and AGENT is the agent of C and CONTENT is a participant in C for every AGENT and CONTENT.",
  "miloA1919": "The predicate agreementPeriod is an instance of binary predicate.",
  "miloA1923": "The predicate agreementEffectiveDate is an instance of binary predicate.",
  "miloA1926": "The function TimePeriodFn is an instance of binary function.",
  "miloA1930": "If INTERVAL is an instance of time interval and PERIOD is an instance of time duration and T1 is an instance of time point and T2 is an instance of time point and INTERVAL is equal to the time interval between T1 and T2 and INTERVAL has a duration of PERIOD, then INTERVAL is equal to the time period starting at T1 and ending after PERIOD for every T2, INTERVAL, T1 and PERIOD.",
  "miloA1931": "The predicate agreementExpirationDate is an instance of binary predicate.",
  "miloA1935": "The predicate agreementClause is an instance of quaternary predicate.",
  "miloA1940": "If AGENT is an instance of cognitive agent and AGREEMENT is an instance of agreement and ATTR is an instance of deontic attribute and PROP is an instance of proposition and AGENT is responsible for the PROP with the attribute ATTR in the agreement AGREEMENT, then there is at least one CLAUSE for which CLAUSE is an instance of content bearing physical and CLAUSE contains information PROP and AGENT is a party to the agreement AGREEMENT for every ATTR, PROP, AGENT and AGREEMENT.",
  "miloA1944": "Active agreement is an instance of relational attribute.",
  "miloA1945": "If AGREEMENT has the property active agreement, then AGREEMENT is an instance of agreement for every AGREEMENT.",
  "miloA1947": "If ENTITY has the property promise, then ENTITY has the property contract or ENTITY has the property naked promise for every ENTITY.",
  "miloA1948": "Naked promise is a subattribute of promise.",
  "miloA1949": "Contract is a subattribute of active agreement.",
  "miloA1950": "Contract is a subattribute of promise.",
  "miloA1951": "Nothing can simultaneously be naked promise and contract.",
  "miloA1953": "Marriage contract is a subattribute of contract.",
  "miloA1954": "If C is an instance of agreement and C has the property marriage contract, then there is at least one P1 and P2 for which P1 is an instance of human and P2 is an instance of human and P1 is a party to the agreement C and P2 is a party to the agreement C and P1 is the spouse of P2 for every C.",
  "miloA1955": "Purchase contract is a subattribute of contract.",
  "miloA1956": "If C is an instance of agreement and C has the property purchase contract, then there is at least one S, SELLER and BUYER for which SELLER is an instance of cognitive agent and BUYER is an instance of cognitive agent and S is an instance of selling and SELLER is the origin of S and S ends at BUYER and S realizes the content of C and SELLER is a party to the agreement C and BUYER is a party to the agreement C for every C.",
  "miloA1957": "Service contract is a subattribute of contract.",
  "miloA1958": "If C is an instance of agreement and C has the property service contract, then there is at least one SP, SERVICE and CUST for which SERVICE is an instance of cognitive agent and CUST is an instance of cognitive agent and SP is an instance of service process and SP realizes the content of C and SERVICE is the supplier of the service provided in SP and CUST is the receiver of the service provided in SP and SERVICE is a party to the agreement C and CUST is a party to the agreement C for every C.",
  "miloA1959": "Warranty is a subattribute of service contract.",
  "miloA1960": "Treaty is a subattribute of contract.",
  "miloA1961": "If T is an instance of agreement and T has the property treaty, then there is at least one N1 and N2 for which N1 is an instance of cognitive agent and N2 is an instance of cognitive agent and N1 is a party to the agreement T and N2 is a party to the agreement T and N1 is an instance of nation and N2 is an instance of nation and N1 is not equal to N2 for every T.",
  "miloA1962": "Sentence is disjointly decomposed into statement, supposition, question, request and order.",
  "miloA1963": "Statement is a subclass of sentence.",
  "miloA1964": "If STATE is an instance of stating and SENTENCE is a result of STATE and SENTENCE is an instance of sentence, then SENTENCE is an instance of statement for every STATE and SENTENCE.",
  "miloA1965": "Fact is a subclass of statement.",
  "miloA1966": "If FACT is an instance of fact, then the truth value of FACT is true for every FACT.",
  "miloA1967": "Question is a subclass of sentence.",
  "miloA1968": "If QUESTION is an instance of questioning and SENTENCE is a result of QUESTION and SENTENCE is an instance of sentence, then SENTENCE is an instance of question for every QUESTION and SENTENCE.",
  "miloA1969": "Supposition is a subclass of sentence.",
  "miloA1970": "If SUPPOSE is an instance of supposing and SENTENCE is a result of SUPPOSE and SENTENCE is an instance of sentence, then SENTENCE is an instance of supposition for every SUPPOSE and SENTENCE.",
  "miloA1971": "Request is a subclass of sentence.",
  "miloA1972": "If REQUEST is an instance of requesting and SENTENCE is a result of REQUEST and SENTENCE is an instance of sentence, then SENTENCE is an instance of request for every REQUEST and SENTENCE.",
  "miloA1973": "Order is a subclass of sentence.",
  "miloA1974": "If ORDER is an instance of ordering and SENTENCE is a result of ORDER and SENTENCE is an instance of sentence, then SENTENCE is an instance of order for every ORDER and SENTENCE.",
  "miloA1975": "Audio recording is a subclass of recording.",
  "miloA1976": "If X is an instance of audio recording, then there is at least one EV for which EV is an instance of radiating sound and X represents EV and X is capable to do radiating sound in role the predicate patient for every X.",
  "miloA1977": "If RECORD is an instance of audio recording, then there is at least one INFO and SOUND for which INFO is an instance of proposition and RECORD contains information INFO and SOUND realizes the content of INFO and SOUND is an instance of radiating sound for every RECORD.",
  "miloA1978": "The predicate record is a subrelation of the predicate represents.",
  "miloA1981": "If PHYS is an instance of content bearing physical and REC is an instance of content bearing object and REC is recorded on PHYS, then REC is equivalent to PHYS for every REC and PHYS.",
  "miloA1982": "If PHYS is an instance of physical and REC is an instance of content bearing object and REC is recorded on PHYS, then there is at least one DS for which DS is an instance of data storage device and REC is stored on DS for every PHYS and REC.",
  "miloA1983": "The predicate stored is an instance of binary predicate.",
  "miloA1984": "The predicate stored is an instance of antisymmetric relation.",
  "miloA1985": "The predicate stored is an instance of transitive relation.",
  "miloA1988": "If D is an instance of data storage device and O is an instance of content bearing object and O is stored on D, then there is at least one P for which P is an instance of writing and P ends at D and O is a participant in P for every D and O.",
  "miloA1990": "Blank is an instance of relational attribute.",
  "miloA1991": "If DSTORE is an instance of data storage device and DSTORE has the attribute blank, then DATA is not an instance of content bearing object or DATA is not stored on DSTORE for every DATA for every DSTORE.",
  "miloA1992": "Recording is a subclass of content bearing object.",
  "miloA1993": "If R is an instance of recording, then there is at least one P for which P is an instance of process and R is recorded on P for every R.",
  "miloA1994": "Music recording is a subclass of audio recording.",
  "miloA1995": "If M is an instance of music recording, then there is at least one P for which P is an instance of making music and M is recorded on P for every M.",
  "miloA1996": "Sheet music is a subclass of content bearing object.",
  "miloA1997": "If SM is an instance of sheet music, then there is at least one MC for which MC is an instance of musical composition and SM contains information MC for every SM.",
  "miloA1998": "Music text is a subclass of text.",
  "miloA1999": "If X is an instance of music text, then X is capable to do making music in role the predicate patient for every X.",
  "miloA2000": "Video recording is a subclass of recording.",
  "miloA2001": "If X is an instance of video recording, then there is at least one EV for which EV is an instance of process and X represents EV and X is capable to do radiating light in role the predicate patient for every X.",
  "miloA2003": "Media system is a subclass of collection.",
  "miloA2005": "Label is a subclass of text.",
  "miloA2006": "If LABEL is an instance of label, then there is at least one OBJ for which OBJ is an instance of self connected object and LABEL is connected to OBJ and LABEL refers to OBJ for every LABEL.",
  "miloA2007": "Form text is a subclass of text.",
  "miloA2008": "Test form is a subclass of form text.",
  "miloA2009": "Test form is a subclass of measuring device.",
  "miloA2010": "Ballot is a subclass of form text.",
  "miloA2012": "Application is a subclass of form text.",
  "miloA2014": "Announcement is a subclass of factual text.",
  "miloA2015": "If A is an instance of announcement, then there is at least one CD and I for which CD is an instance of content development and A is a result of CD and A refers to I and I is an instance of social interaction and the time when CD takes place occurs earlier than the time when I takes place for every A.",
  "miloA2016": "Performance program is a subclass of factual text.",
  "miloA2017": "If PROG is an instance of performance program, then there is at least one PERF and PROP for which PROP is an instance of proposition and PROG contains information PROP and PERF realizes the content of PROP and PERF is an instance of performance for every PROG.",
  "miloA2018": "Motion picture shot is a subclass of motion picture.",
  "miloA2019": "If SHOT is an instance of motion picture shot, then there is at least one MOVIE for which MOVIE is an instance of motion picture and MOVIE subsumes the content of SHOT for every SHOT.",
  "miloA2020": "Motion picture scene is a subclass of motion picture.",
  "miloA2021": "If MOVIE is an instance of content bearing physical and S is an instance of motion picture scene, then there is at least one M for which M is an instance of motion picture and MOVIE subsumes the content of S for every MOVIE and S.",
  "miloA2022": "Documentary is a subclass of motion picture.",
  "miloA2023": "Documentary is a subclass of factual text.",
  "miloA2024": "Broadcast program is a subclass of series.",
  "miloA2025": "If PROGRAM is an instance of broadcast program, then there is at least one BROADCAST for which BROADCAST is an instance of broadcasting and PROGRAM is a participant in BROADCAST for every PROGRAM.",
  "miloA2026": "News program is a subclass of broadcast program.",
  "miloA2027": "If NUMBER is an instance of positive integer and EPISODE is a subclass of text and PROGRAM is a subclass of news program and EPISODE is equal to the volume NUMBER in the series PROGRAM, then there is at least one DISSEMINATE for which DISSEMINATE is an instance of disseminating and EPISODE is a participant in DISSEMINATE for every PROGRAM, NUMBER and EPISODE.",
  "miloA2028": "The function SeriesVolumeFn is an instance of binary function.",
  "miloA2029": "The function SeriesVolumeFn is an instance of partial valued relation.",
  "miloA2033": "If INT1 is an instance of positive integer and VOLUME1 is a subclass of text and INT2 is an instance of positive integer and VOLUME2 is a subclass of text and DATE1 is an instance of day and DATE2 is an instance of day and TEXT is a subclass of periodical and the volume INT1 in the series TEXT is equal to VOLUME1 and the volume INT2 in the series TEXT is equal to VOLUME2 and INT2 is greater than INT1 and PUB1 is an instance of publication and PUB2 is an instance of publication and CBO1 is an instance of VOLUME1 and CBO2 is an instance of VOLUME2 and CBO1 is a participant in PUB1 and CBO2 is a participant in PUB2 and DATE1 is the date of PUB1 and DATE2 is the date of PUB2, then the end of the interval DATE1 occurs before the end of the interval DATE2 for every TEXT, INT2, INT1, VOLUME1, VOLUME2, CBO1, CBO2, PUB1, PUB2, DATE1 and DATE2.",
  "miloA2034": "If NUMBER is an instance of positive integer and SERIES is a subclass of series and VOLUME is a subclass of text and the volume NUMBER in the series SERIES is equal to VOLUME, then SERIES subsumes the content of VOLUME for every NUMBER, SERIES and VOLUME.",
  "miloA2035": "Series is a subclass of text.",
  "miloA2036": "If SERIES is an instance of series, then there is at least one BOOK1 and BOOK2 for which BOOK1 is an instance of book and BOOK2 is an instance of book and SERIES subsumes the content of BOOK1 and SERIES subsumes the content of BOOK2 and BOOK1 is not equal to BOOK2 for every SERIES.",
  "miloA2037": "The function PeriodicalIssueFn is an instance of binary function.",
  "miloA2038": "The function PeriodicalIssueFn is an instance of partial valued relation.",
  "miloA2042": "If NUMBER is an instance of positive integer and PERIODICAL is a subclass of periodical and ISSUE is a subclass of periodical and the periodical issue number NUMBER of PERIODICAL is equal to ISSUE, then PERIODICAL subsumes the content of ISSUE for every NUMBER, PERIODICAL and ISSUE.",
  "miloA2043": "Periodical is a subclass of series.",
  "miloA2044": "Article is a subclass of text.",
  "miloA2045": "Article is disjoint from book.",
  "miloA2046": "If ARTICLE1 is an instance of article and BOOK is an instance of book and BOOK subsumes the content of ARTICLE1, then there is at least one ARTICLE2 for which ARTICLE2 is an instance of article and ARTICLE2 is not equal to ARTICLE1 and BOOK subsumes the content of ARTICLE2 for every ARTICLE1 and BOOK.",
  "miloA2047": "Chapter is a subclass of article.",
  "miloA2048": "If CHAPTER is an instance of chapter, then there is at least one BOOK for which BOOK is an instance of book and BOOK subsumes the content of CHAPTER for every CHAPTER.",
  "miloA2049": "The predicate titles is a subrelation of the predicate names.",
  "miloA2052": "The predicate formerName is a subrelation of the predicate names.",
  "miloA2053": "The predicate familyName is an instance of binary predicate.",
  "miloA2054": "The predicate familyName is an instance of asymmetric relation.",
  "miloA2057": "The predicate familyName is a subrelation of the predicate names.",
  "miloA2058": "The predicate middleName is an instance of binary predicate.",
  "miloA2059": "The predicate middleName is an instance of asymmetric relation.",
  "miloA2062": "The predicate middleName is a subrelation of the predicate names.",
  "miloA2063": "The predicate givenName is an instance of binary predicate.",
  "miloA2064": "The predicate givenName is an instance of asymmetric relation.",
  "miloA2065": "The predicate givenName is a subrelation of the predicate names.",
  "miloA2068": "The predicate localLongName is an instance of binary predicate.",
  "miloA2071": "The predicate localLongName is a subrelation of the predicate names.",
  "miloA2072": "The predicate localShortName is a subrelation of the predicate names.",
  "miloA2073": "The predicate localShortName is an instance of binary predicate.",
  "miloA2076": "Message is a subclass of factual text.",
  "miloA2077": "Report is a subclass of factual text.",
  "miloA2078": "Report is a subclass of article.",
  "miloA2079": "Newspaper is a subclass of periodical.",
  "miloA2080": "If PAPER is an instance of newspaper, then there is at least one REPORT for which REPORT is an instance of report and PAPER subsumes the content of REPORT for every PAPER.",
  "miloA2081": "If PAPER is a subclass of newspaper and WEEK is an instance of week, then there is at least one PUBLICATION and ISSUE for which PUBLICATION is an instance of publication and the time when PUBLICATION takes place is a temporal part of WEEK and ISSUE is a result of PUBLICATION and ISSUE is an instance of PAPER for every WEEK and PAPER.",
  "miloA2082": "Magazine is a subclass of periodical.",
  "miloA2083": "Letter is a subclass of factual text.",
  "miloA2084": "Holiday is a subclass of time interval.",
  "miloA2085": "Fixed holiday is a subclass of holiday.",
  "miloA2086": "Moveable holiday is a subclass of holiday.",
  "miloA2087": "Holiday card is a subclass of content bearing object.",
  "miloA2089": "If C is an instance of holiday card, then there is at least one H for which H is an instance of holiday and C refers to H for every C.",
  "miloA2090": "Historical account is a subclass of narrative text.",
  "miloA2091": "Historical account is a subclass of factual text.",
  "miloA2092": "If ACCOUNT is an instance of historical account, then there is at least one EVENT for which EVENT is an instance of physical and ACCOUNT represents EVENT and the time when EVENT takes place occurs earlier than the time when ACCOUNT takes place for every ACCOUNT.",
  "miloA2093": "Biography is a subclass of historical account.",
  "miloA2094": "If B is an instance of biography, then there is at least one H for which H is an instance of human and B refers to H for every B.",
  "miloA2095": "Financial text is a subclass of report.",
  "miloA2096": "Financial bill is a subclass of financial text.",
  "miloA2097": "Reference book is a subclass of book.",
  "miloA2098": "Reference book is a subclass of factual text.",
  "miloA2099": "Dictionary is a subclass of reference book.",
  "miloA2100": "Narrative text is a subclass of text.",
  "miloA2102": "Short story is a subclass of fictional text.",
  "miloA2103": "Short story is a subclass of article.",
  "miloA2104": "Mystery story is a subclass of fictional text.",
  "miloA2105": "If S is an instance of mystery story, then there is at least one C for which C is an instance of criminal action and S refers to C for every S.",
  "miloA2106": "Novel is a subclass of fictional text.",
  "miloA2107": "Novel is a subclass of book.",
  "miloA2108": "Dramatic play is a subclass of fictional text.",
  "miloA2110": "Opera is a subclass of dramatic play.",
  "miloA2111": "French language is an instance of spoken human language.",
  "miloA2112": "French language is an instance of natural language.",
  "miloA2113": "German language is an instance of spoken human language.",
  "miloA2114": "German language is an instance of natural language.",
  "miloA2115": "Greek language is an instance of spoken human language.",
  "miloA2116": "Greek language is an instance of natural language.",
  "miloA2117": "Latin language is an instance of spoken human language.",
  "miloA2118": "Latin language is an instance of natural language.",
  "miloA2119": "Russian language is an instance of spoken human language.",
  "miloA2120": "Russian language is an instance of natural language.",
  "miloA2121": "Spanish language is an instance of spoken human language.",
  "miloA2122": "Spanish language is an instance of natural language.",
  "miloA2124": "Literacy attribute is a subclass of trait attribute.",
  "miloA2125": "Industry is a subclass of collection.",
  "miloA2126": "Chimney is a subclass of stationary artifact.",
  "miloA2127": "Chimney is a subclass of device.",
  "miloA2129": "Curb is a subclass of stationary artifact.",
  "miloA2130": "If C is an instance of self connected object and C is an instance of curb, then there is at least one S and R for which S is an instance of self connected object and S is an instance of sidewalk and R is an instance of roadway and C connects S and R for every C.",
  "miloA2131": "Paved is an instance of attribute.",
  "miloA2132": "Unpaved is an instance of attribute.",
  "miloA2133": "Stairway is a subclass of stationary artifact.",
  "miloA2134": "If S is an instance of stairway, then S is capable to do motion upward in role the predicate instrument and S is capable to do motion downward in role the predicate instrument for every S.",
  "miloA2136": "Steps is a subclass of stationary artifact.",
  "miloA2137": "If STEPS is an instance of steps, then STEPS is capable to do motion upward in role the predicate instrument and STEPS is capable to do motion downward in role the predicate instrument for every STEPS.",
  "miloA2138": "If LEVEL1 is an instance of self connected object and LEVEL2 is an instance of self connected object and LEVEL1 is an instance of building level and LEVEL2 is an instance of building level and LEVEL1 is not equal to LEVEL2 and BUILDING is an instance of building and LEVEL1 is a part of BUILDING and LEVEL2 is a part of BUILDING, then there is at least one STEPS for which STEPS is an instance of self connected object and STEPS is an instance of steps and STEPS connects LEVEL1 and LEVEL2 for every BUILDING, LEVEL1 and LEVEL2.",
  "miloA2139": "Ladder is a subclass of artifact.",
  "miloA2140": "If LADDER is an instance of ladder, then LADDER is capable to do motion upward in role the predicate instrument and LADDER is capable to do motion downward in role the predicate instrument for every LADDER.",
  "miloA2141": "Transparent is an instance of internal attribute.",
  "miloA2143": "Curtain is a subclass of window covering.",
  "miloA2144": "Curtain is a subclass of fabric.",
  "miloA2145": "Window is a subclass of artifact.",
  "miloA2146": "If W is an instance of window, then there is at least one A for which A is an instance of object and W is a part of A and A is an instance of building or A is an instance of room or A is an instance of vehicle for every W.",
  "miloA2147": "If W is an instance of window, then W has the attribute transparent for every W.",
  "miloA2148": "Skylight is a subclass of window.",
  "miloA2149": "If W is an instance of skylight, then there is at least one C for which C is an instance of ceiling and W is a part of C for every W.",
  "miloA2150": "Rear window is a subclass of vehicle window.",
  "miloA2151": "If W is an instance of rear window, then there is at least one A for which A is an instance of self connected object and A is an instance of road vehicle and W is a part of the back of A for every W.",
  "miloA2152": "Window covering is a subclass of artifact.",
  "miloA2154": "Adjoining room is an instance of relational attribute.",
  "miloA2155": "If X is an instance of object and X has the attribute adjoining room, then X is an instance of room for every X.",
  "miloA2156": "If X is an instance of object and X has the attribute adjoining room, then there is at least one ROOM, WALL and DOOR for which ROOM is an instance of object and ROOM has the attribute adjoining room and ROOM is not equal to X and X is adjacent to ROOM and WALL is an instance of wall and WALL is a part of ROOM and WALL is a part of X and DOOR is an instance of door and DOOR is a part of WALL for every X.",
  "miloA2157": "Transitway obstacle is a subclass of object.",
  "miloA2158": "Door is a subclass of transitway obstacle.",
  "miloA2159": "Door is a subclass of device.",
  "miloA2160": "If DOOR is an instance of door, then there is at least one WAY for which DOOR is a part of WAY and WAY is an instance of doorway for every DOOR.",
  "miloA2161": "Hinge is a subclass of engineering component.",
  "miloA2163": "Doorway is a subclass of stationary artifact.",
  "miloA2164": "If WAY is an instance of doorway, then there is at least one ARTIFACT for which ARTIFACT is an instance of object and WAY is a part of ARTIFACT and ARTIFACT is an instance of building or ARTIFACT is an instance of room for every WAY.",
  "miloA2165": "If DOOR is an instance of door, then there is at least one ARTIFACT for which ARTIFACT is an instance of object and DOOR is a part of ARTIFACT and ARTIFACT is an instance of building or ARTIFACT is an instance of room for every DOOR.",
  "miloA2166": "Wall is a subclass of stationary artifact.",
  "miloA2167": "If WALL is an instance of wall, then there is at least one ARTIFACT for which ARTIFACT is an instance of object and WALL is a part of ARTIFACT and ARTIFACT is an instance of building or ARTIFACT is an instance of room for every WALL.",
  "miloA2168": "Floor is a subclass of stationary artifact.",
  "miloA2169": "If FLOOR is an instance of floor, then there is at least one ARTIFACT for which FLOOR is a part of ARTIFACT and ARTIFACT is an instance of room for every FLOOR.",
  "miloA2170": "Ceiling is a subclass of stationary artifact.",
  "miloA2171": "If C is an instance of self connected object and C is an instance of ceiling, then there is at least one R for which R is an instance of self connected object and C is the top of R and R is an instance of room for every C.",
  "miloA2172": "Roof is a subclass of stationary artifact.",
  "miloA2173": "If ROOF is an instance of self connected object and ROOF is an instance of roof, then there is at least one BUILDING for which BUILDING is an instance of self connected object and BUILDING is an instance of building and ROOF is the top of BUILDING for every ROOF.",
  "miloA2174": "Fireplace is a subclass of stationary artifact.",
  "miloA2175": "Fireplace is a subclass of device.",
  "miloA2177": "If F is an instance of fireplace, then there is at least one C for which C is an instance of chimney and F is connected to C for every F.",
  "miloA2178": "If F is an instance of fireplace, then there is at least one B for which B is an instance of building and F is a part of B for every F.",
  "miloA2179": "Balcony is a subclass of stationary artifact.",
  "miloA2180": "If BALCONY is an instance of balcony, then there is at least one WALL and LANDAREA for which WALL is an instance of object and WALL meets BALCONY and LANDAREA is an instance of land area and WALL is located at LANDAREA and BALCONY is above to LANDAREA for every BALCONY.",
  "miloA2181": "Building level is a subclass of stationary artifact.",
  "miloA2182": "If LEVEL is an instance of building level, then there is at least one BUILDING for which BUILDING is an instance of building and LEVEL is a part of BUILDING for every LEVEL.",
  "miloA2183": "Basement is a subclass of building level.",
  "miloA2184": "If BASEMENT is an instance of basement, then LEVEL is not an instance of object or BUILDING is not an instance of object or LEVEL is not an instance of building level or BUILDING is not an instance of building or LEVEL is not a part of BUILDING or BASEMENT is not a part of BUILDING or LEVEL is equal to BASEMENT or LEVEL is not below to BASEMENT for every LEVEL and BUILDING for every BASEMENT.",
  "miloA2185": "Elevator is a subclass of transportation device.",
  "miloA2187": "If E is an instance of elevator, then E is capable to do motion upward in role the predicate instrument and E is capable to do motion downward in role the predicate instrument for every E.",
  "miloA2188": "Pump is a subclass of transportation device.",
  "miloA2189": "If T is an instance of transportation and D is an instrument for T and D is an instance of pump, then there is at least one F for which F is an instance of object and F is an instrument for T and F has the attribute fluid for every D and T.",
  "miloA2190": "Oar is a subclass of transportation device.",
  "miloA2192": "Garage is a subclass of stationary artifact.",
  "miloA2194": "If GARAGE is an instance of garage, then there is at least one BUILDING for which BUILDING is an instance of building and GARAGE is a part of BUILDING for every GARAGE.",
  "miloA2195": "Bathroom is a subclass of room.",
  "miloA2196": "If B is an instance of bathroom, then there is at least one W for which W is an instance of wash basin and W is located at B for every B.",
  "miloA2197": "Closet is a subclass of room.",
  "miloA2199": "Dressing room is a subclass of room.",
  "miloA2201": "Sitting area is a subclass of region.",
  "miloA2202": "If AREA is an instance of sitting area, then there is at least one SEAT for which SEAT is an instance of seat and SEAT is located at AREA for every AREA.",
  "miloA2203": "Kitchen area is a subclass of region.",
  "miloA2205": "Kitchen is a subclass of room.",
  "miloA2206": "Kitchen is a subclass of kitchen area.",
  "miloA2208": "Dining area is a subclass of region.",
  "miloA2210": "Dining room is a subclass of room.",
  "miloA2211": "Dining room is a subclass of dining area.",
  "miloA2212": "Bedroom is a subclass of room.",
  "miloA2213": "If ROOM is an instance of bedroom, then there is at least one BED for which BED is an instance of bed and BED is located at ROOM for every ROOM.",
  "miloA2214": "Classroom is a subclass of room.",
  "miloA2215": "If R is an instance of classroom, then there is at least one S for which S is an instance of school and R is a part of S for every R.",
  "miloA2217": "Porch is a subclass of stationary artifact.",
  "miloA2218": "If PORCH is an instance of porch, then there is at least one BUILDING for which BUILDING is an instance of building and PORCH is connected to BUILDING for every PORCH.",
  "miloA2219": "Sidewalk is a subclass of stationary artifact.",
  "miloA2221": "If SIDE is an instance of sidewalk, then there is at least one ROAD for which ROAD is an instance of roadway and SIDE is near to ROAD for every SIDE.",
  "miloA2222": "Fence is a subclass of stationary artifact.",
  "miloA2223": "Sports ground is a subclass of stationary artifact.",
  "miloA2225": "Industrial plant is a subclass of stationary artifact.",
  "miloA2226": "If PLANT is an instance of industrial plant, then PLANT is an instance of building or there is at least one BUILDING for which BUILDING is an instance of building and BUILDING is located at PLANT for every PLANT.",
  "miloA2228": "Laboratory is a subclass of stationary artifact.",
  "miloA2229": "If LAB is an instance of laboratory, then there is at least one EXPERIMENT for which EXPERIMENT is an instance of experimenting and the entire process EXPERIMENT is located on LAB for every LAB.",
  "miloA2230": "The predicate experimentalControl is an instance of case role.",
  "miloA2233": "The predicate experimentalControl is a subrelation of the predicate patient.",
  "miloA2234": "Military installation is a subclass of stationary artifact.",
  "miloA2235": "Military installation is a subclass of military artifact.",
  "miloA2236": "Farm is a subclass of stationary artifact.",
  "miloA2237": "Barn is a subclass of building.",
  "miloA2238": "Barn is disjoint from residential building.",
  "miloA2239": "If BARN is an instance of barn, then there is at least one FARM for which FARM is an instance of farm and BARN is located at FARM for every BARN.",
  "miloA2240": "Performance stage is a subclass of stationary artifact.",
  "miloA2242": "If STAGE is an instance of performance stage, then there is at least one AUDITORIUM for which AUDITORIUM is an instance of auditorium and STAGE is a part of AUDITORIUM for every STAGE.",
  "miloA2243": "Performance stage wing is a subclass of stationary artifact.",
  "miloA2244": "If W is an instance of performance stage wing, then there is at least one S for which S is an instance of performance stage and W is a part of S for every W.",
  "miloA2245": "Magnetism is a subclass of radiating electromagnetic.",
  "miloA2246": "Radio emission is a subclass of radiating electromagnetic.",
  "miloA2247": "Broadcasting is a subclass of disseminating.",
  "miloA2248": "Broadcasting is a subclass of radio emission.",
  "miloA2249": "If BROADCAST is an instance of broadcasting, then there is at least one DEVICE for which DEVICE is an instance of communication device and DEVICE is an instrument for BROADCAST for every BROADCAST.",
  "miloA2250": "Radio broadcasting is a subclass of broadcasting.",
  "miloA2251": "If RADIO is an instance of radio receiver, then RADIO is capable to do radio broadcasting in role the predicate patient for every RADIO.",
  "miloA2252": "Television broadcasting is a subclass of broadcasting.",
  "miloA2253": "Periodical publisher is a subclass of publisher.",
  "miloA2254": "If C is an instance of periodical publisher, then there is at least one PUBLISH and PERIODICAL for which PUBLISH is an instance of publication and C is the agent of PUBLISH and PERIODICAL is a participant in PUBLISH and PERIODICAL is an instance of periodical for every C.",
  "miloA2255": "Antenna is a subclass of communication device.",
  "miloA2256": "If ANTENNA is an instance of antenna, then ANTENNA is capable to do radio emission in role the predicate instrument for every ANTENNA.",
  "miloA2257": "Explosion is a subclass of radiating.",
  "miloA2258": "If EXPLOSION is an instance of explosion, then there is at least one PROC for which PROC is an instance of chemical process and PROC causes EXPLOSION for every EXPLOSION.",
  "miloA2259": "Performance is a subclass of demonstrating.",
  "miloA2260": "If PERFORMANCE is an instance of performance, then there is at least one SUB for which SUB is an instance of process and SUB is a subprocess of PERFORMANCE and SUB is an instance of dramatic acting or SUB is an instance of making music for every PERFORMANCE.",
  "miloA2261": "If PERFORMANCE is an instance of performance, then there is at least one STAGE for which STAGE is an instance of performance stage and the entire process PERFORMANCE is located on STAGE for every PERFORMANCE.",
  "miloA2262": "Performance act is a subclass of performance.",
  "miloA2263": "Lecture is a subclass of demonstrating.",
  "miloA2264": "Lecture is a subclass of speaking.",
  "miloA2265": "Proclaiming is a subclass of lecture.",
  "miloA2266": "Proclaiming is a subclass of declaring.",
  "miloA2267": "Commenting is a subclass of intentional process.",
  "miloA2268": "If COMMENTING is an instance of commenting and PROCESS is an instance of process and PROCESS is a participant in COMMENTING, then there is at least one AGENT, SPEAKING and LOOKING for which AGENT is an instance of agent and SPEAKING is an instance of speaking and LOOKING is an instance of looking and AGENT is the agent of SPEAKING and AGENT is the agent of LOOKING and PROCESS is a participant in LOOKING and SPEAKING refers to PROCESS for every COMMENTING and PROCESS.",
  "miloA2269": "The predicate commentator is an instance of binary predicate.",
  "miloA2272": "If PROCESS is an instance of process and AGENT is an instance of agent and AGENT is the commentator of PROCESS, then there is at least one COMMENTING for which COMMENTING is an instance of commenting and AGENT is the agent of COMMENTING and PROCESS is a participant in COMMENTING for every AGENT and PROCESS.",
  "miloA2273": "Reciting is a subclass of speaking.",
  "miloA2274": "If R is an instance of reciting, then there is at least one P and T for which P is an instance of proposition and R realizes the content of P and T contains information P and T is an instance of text for every R.",
  "miloA2275": "Musical performance is a subclass of performance.",
  "miloA2276": "If M is an instance of process and P is an instance of musical performance and M is a subprocess of P, then M is an instance of making music for every P and M.",
  "miloA2277": "Sermon is a subclass of lecture.",
  "miloA2278": "If SERMON is an instance of sermon, then there is at least one SERVICE for which SERVICE is an instance of religious service and SERMON is a subprocess of SERVICE for every SERMON.",
  "miloA2279": "Dramatic acting is a subclass of pretending.",
  "miloA2280": "Dramatic performance is a subclass of performance.",
  "miloA2281": "If A is an instance of process and P is an instance of dramatic performance and A is a subprocess of P, then A is an instance of dramatic acting for every P and A.",
  "miloA2282": "Dramatic cast is a subclass of group of people.",
  "miloA2283": "If CAST is an instance of dramatic cast, then there is at least one TEXT, PROP and PROC for which PROP is an instance of proposition and PROC is an instance of process and TEXT is an instance of fictional text and TEXT contains information PROP and PROC realizes the content of PROP and if MEMBER is an instance of self connected object and MEMBER is an instance of agent and MEMBER is a member of CAST, then there is at least one SUB for which SUB is an instance of dramatic acting and MEMBER is the agent of SUB and SUB is a subprocess of PROC for every MEMBER for every CAST.",
  "miloA2284": "Social party is a subclass of meeting.",
  "miloA2285": "Social party is a subclass of recreation or exercise.",
  "miloA2286": "Formal meeting is a subclass of meeting.",
  "miloA2287": "Formal meeting is disjoint from social party.",
  "miloA2288": "If MEETING is an instance of formal meeting, then there is at least one PLANNING for which PLANNING is an instance of planning and MEETING is a result of PLANNING and the time when PLANNING takes place occurs earlier than the time when MEETING takes place for every MEETING.",
  "miloA2289": "Funeral is a subclass of ceremony.",
  "miloA2290": "Funeral is a subclass of formal meeting.",
  "miloA2291": "If F is an instance of funeral, then there is at least one D for which D is an instance of death and F refers to D for every F.",
  "miloA2292": "Interviewing is a subclass of formal meeting.",
  "miloA2293": "Choreographing is a subclass of planning.",
  "miloA2294": "If P is an instance of proposition and D is an instance of process and G is an instance of choreographing and P is a result of G and D realizes the content of P, then D is an instance of dancing for every G, P and D.",
  "miloA2295": "Resolution is a subclass of deciding.",
  "miloA2296": "If RESOLUTION is an instance of resolution, then there is at least one AGENT and MEETING for which AGENT is an instance of organization and AGENT is the agent of RESOLUTION and RESOLUTION is a subprocess of MEETING and MEETING is an instance of formal meeting for every RESOLUTION.",
  "miloA2297": "Smoking is a subclass of recreation or exercise.",
  "miloA2298": "If SMOKING is an instance of smoking, then there is at least one BURN, BREATHE and SMOKE for which BURN is a subprocess of SMOKING and BURN is an instance of combustion and SMOKE is a result of BURN and SMOKE is a participant in BREATHE and BREATHE is an instance of breathing and BREATHE is a subprocess of SMOKING for every SMOKING.",
  "miloA2299": "Jury is a subclass of group of people.",
  "miloA2301": "Criminal gang is a subclass of group of people.",
  "miloA2303": "Legal charge is a subclass of legal action.",
  "miloA2304": "If CHARGE is an instance of legal charge, then there is at least one GOV for which GOV is an instance of government and GOV is the agent of CHARGE for every CHARGE.",
  "miloA2305": "Legal appeal is a subclass of requesting.",
  "miloA2306": "Legal appeal is a subclass of judicial process.",
  "miloA2307": "Pleading is a subclass of stating.",
  "miloA2308": "If P is an instance of pleading, then there is at least one J for which J is an instance of judicial process and P is a subprocess of J for every P.",
  "miloA2309": "If P is an instance of pleading, then there is at least one C for which C is an instance of criminal action and P refers to C for every P.",
  "miloA2310": "The predicate describes is an instance of binary predicate.",
  "miloA2313": "If OBJECT is an instance of object and FORMULA is an instance of formula and FORMULA describes OBJECT, then there is at least one STATING and AGENT for which AGENT is an instance of agent and STATING is an instance of stating and AGENT is the agent of STATING and FORMULA is a participant in STATING and STATING refers to OBJECT for every FORMULA and OBJECT.",
  "miloA2314": "Testifying is a subclass of stating.",
  "miloA2315": "If TESTIFY is an instance of testifying, then there is at least one PROC for which PROC is an instance of judicial process and TESTIFY is a subprocess of PROC for every TESTIFY.",
  "miloA2316": "Court room is a subclass of room.",
  "miloA2317": "If PROCESS is an instance of judicial process, then there is at least one ROOM for which ROOM is an instance of court room and the entire process PROCESS is located on ROOM for every PROCESS.",
  "miloA2318": "Legal opinion is a subclass of argument.",
  "miloA2319": "If OPINION is an instance of legal opinion, then there is at least one DECISION, TEXT and PROPOSITION for which TEXT is an instance of content bearing physical and PROPOSITION is an instance of argument and DECISION is an instance of legal decision and TEXT is a result of DECISION and TEXT contains information PROPOSITION and PROPOSITION is the conclusion of OPINION for every OPINION.",
  "miloA2320": "Legal award is a subclass of legal decision.",
  "miloA2322": "Legal conviction is a subclass of legal decision.",
  "miloA2323": "Legal dismissal is a subclass of legal decision.",
  "miloA2324": "Legal summons is a subclass of ordering.",
  "miloA2325": "Legal summons is a subclass of judicial process.",
  "miloA2327": "Legal aquittal is a subclass of legal decision.",
  "miloA2328": "Sentencing is a subclass of legal decision.",
  "miloA2329": "If S is an instance of sentencing and P is a participant in S, then there is at least one C for which C causes S and C is an instance of legal conviction and P is a participant in C and the time when C takes place occurs earlier than the time when S takes place for every P and S.",
  "miloA2332": "The predicate defendant is a subrelation of the predicate patient.",
  "miloA2335": "The predicate plaintiff is a subrelation of the predicate agent.",
  "miloA2336": "Game call is a subclass of deciding.",
  "miloA2337": "Game call is a subclass of declaring.",
  "miloA2338": "If CALL is an instance of game call, then there is at least one GAME for which GAME is an instance of game and CALL refers to GAME for every CALL.",
  "miloA2339": "Beginning operations is a subclass of organizational process.",
  "miloA2340": "Beginning operations is disjoint from ceasing operations.",
  "miloA2341": "Organizational merging is a subclass of organizational process.",
  "miloA2343": "Ceasing operations is a subclass of organizational process.",
  "miloA2344": "Becoming drunk is a subclass of psychological process.",
  "miloA2345": "Becoming drunk is disjoint from sobering up.",
  "miloA2347": "Sober is an instance of consciousness attribute.",
  "miloA2348": "Sobering up is a subclass of psychological process.",
  "miloA2350": "Falling asleep is a subclass of psychological process.",
  "miloA2351": "Falling asleep is disjoint from waking up.",
  "miloA2353": "Waking up is a subclass of psychological process.",
  "miloA2355": "Gaining consciousness is a subclass of psychological process.",
  "miloA2357": "Losing consciousness is a subclass of psychological process.",
  "miloA2358": "Losing consciousness is disjoint from gaining consciousness.",
  "miloA2360": "The predicate issuedBy is an instance of binary predicate.",
  "miloA2363": "If AGENT is an instance of cognitive agent and CERT is an instance of certificate and CERT is issued by AGENT, then there is at least one P for which P is an instance of intentional process and AGENT is the agent of P and CERT is a result of P for every AGENT and CERT.",
  "miloA2364": "Academic degree is a subclass of certificate.",
  "miloA2365": "If AGENT is an instance of agent and DEGREE is an instance of academic degree and AGENT possesses DEGREE, then there is at least one PROGRAM and STUDY for which STUDY is an instance of process and PROGRAM is an instance of educational program and STUDY realizes the content of PROGRAM and AGENT experiences STUDY for every DEGREE and AGENT.",
  "miloA2366": "License is a subclass of certificate.",
  "miloA2367": "If L is an instance of license, then there is at least one ORG for which ORG is an instance of cognitive agent and ORG is an instance of government organization and L is issued by ORG for every L.",
  "miloA2368": "Ticket is a subclass of certificate.",
  "miloA2370": "Passport is a subclass of license.",
  "miloA2372": "Pass certificate is a subclass of certificate.",
  "miloA2374": "Testament is a subclass of certificate.",
  "miloA2375": "If T is an instance of testament, then there is at least one B for which B is an instance of bequeathing and T refers to B for every T.",
  "miloA2376": "The predicate registeredItem is an instance of binary predicate.",
  "miloA2379": "The predicate registeredItem is a subrelation of the predicate refers.",
  "miloA2380": "Educational program is a subclass of plan.",
  "miloA2381": "If PROGRAM is an instance of educational program, then there is at least one COURSE1 and COURSE2 for which COURSE1 is an instance of educational course and COURSE2 is an instance of educational course and COURSE1 is not equal to COURSE2 and COURSE1 is a sub-plan of PROGRAM and COURSE2 is a sub-plan of PROGRAM for every PROGRAM.",
  "miloA2382": "Educational course is a subclass of educational program.",
  "miloA2383": "If COURSE is an instance of educational course, then there is at least one CLASS and ORG for which CLASS realizes the content of COURSE and CLASS is an instance of educational process and the entire process CLASS is located on ORG and ORG is an instance of educational organization for every COURSE.",
  "miloA2384": "Sports play is a subclass of plan.",
  "miloA2385": "If P is an instance of process and SP is an instance of sports play and P realizes the content of SP, then there is at least one S for which S is an instance of team sport and P is an instance of maneuver and P is a subprocess of S for every SP and P.",
  "miloA2386": "School is a subclass of educational organization.",
  "miloA2387": "Public school is a subclass of school.",
  "miloA2388": "Public school is a subclass of government organization.",
  "miloA2389": "Private school is a subclass of school.",
  "miloA2390": "Private school is disjoint from government organization.",
  "miloA2391": "High school is a subclass of school.",
  "miloA2392": "If ENTER is an instance of matriculation and COLLEGE is the agent of ENTER and STUDENT is a participant in ENTER and COLLEGE is an instance of college, then there is at least one GRAD and SCHOOL for which GRAD is an instance of graduation and SCHOOL is the agent of GRAD and STUDENT is a participant in GRAD and SCHOOL is an instance of high school and the time when GRAD takes place occurs earlier than the time when ENTER takes place for every COLLEGE, STUDENT and ENTER.",
  "miloA2393": "Secondary school is a subclass of school.",
  "miloA2394": "If E is an instance of matriculation and C is the agent of E and P is a participant in E and C is an instance of college, then there is at least one G and S for which G is an instance of graduation and S is the agent of G and P is a participant in G and S is an instance of secondary school and the time when G takes place occurs earlier than the time when E takes place for every C, P and E.",
  "miloA2395": "Vocational school is a subclass of school.",
  "miloA2397": "Post secondary school is a subclass of school.",
  "miloA2398": "Post secondary school is exhaustively partitioned into junior college, college and university.",
  "miloA2399": "Junior college is a subclass of post secondary school.",
  "miloA2400": "College is a subclass of post secondary school.",
  "miloA2401": "University is a subclass of post secondary school.",
  "miloA2402": "Graduate school is a subclass of post secondary school.",
  "miloA2403": "If S is an instance of graduate school, then there is at least one U for which U is an instance of university and S is a part of U for every S.",
  "miloA2404": "Medical school is a subclass of graduate school.",
  "miloA2405": "Art school is a subclass of school.",
  "miloA2406": "If AS is an instance of art school and P is an instance of educational process and the entire process P is located on AS, then there is at least one M and ART for which M is an instance of making and ART is a participant in M and ART is an instance of art work and P refers to M for every AS and P.",
  "miloA2407": "Day school is a subclass of school.",
  "miloA2408": "If DS is an instance of permanent residence and DS is an instance of day school, then S is not an instance of human or S is not a student at DS or DS is not the home of S for every S for every DS.",
  "miloA2409": "The predicate student is a subrelation of the predicate member.",
  "miloA2412": "If ORG is an instance of educational organization and AGENT is an instance of cognitive agent and AGENT is a student at ORG, then there is at least one PROCESS for which PROCESS is an instance of educational process and the entire process PROCESS is located on ORG and PROCESS ends at AGENT for every ORG and AGENT.",
  "miloA2413": "The predicate teacher is a subrelation of the predicate member.",
  "miloA2416": "If ORG is an instance of educational organization and AGENT is an instance of cognitive agent and AGENT is a teacher at ORG, then there is at least one PROCESS for which PROCESS is an instance of educational process and the entire process PROCESS is located on ORG and AGENT is the agent of PROCESS for every ORG and AGENT.",
  "miloA2417": "Drivers license is a subclass of license.",
  "miloA2419": "Insurance policy is a subclass of certificate.",
  "miloA2420": "Economic relation is a subclass of binary relation.",
  "miloA2421": "If CLASS is an instance of set or class and REL is an instance of economic relation and the 1th argument of REL is an instance of CLASS, then CLASS is a subclass of geopolitical area for every REL and CLASS.",
  "miloA2422": "Labor striking is a subclass of organizational process.",
  "miloA2423": "If STRIKE is an instance of labor striking and PERSON is the agent of STRIKE and PERSON is an instance of human and ORG is a participant in STRIKE and ORG is an instance of organization, then ORG employs PERSON for every STRIKE, ORG and PERSON.",
  "miloA2424": "Employment firing is a subclass of terminating employment.",
  "miloA2425": "Resigning is a subclass of terminating employment.",
  "miloA2426": "If A is an instance of cognitive agent and R is an instance of resigning and A is the agent of R, then A wants R for every A and R.",
  "miloA2427": "Retiring is a subclass of resigning.",
  "miloA2428": "Transferring position is a subclass of organizational process.",
  "miloA2430": "The predicate monetaryWage is an instance of quaternary predicate.",
  "miloA2435": "If MONEY is an instance of currency measure and TIME is an instance of time duration and PERSON is an instance of human and ORG is an instance of organization and ORG employs PERSON and pays them MONEY per TIME, then ORG employs PERSON for every TIME, MONEY, ORG and PERSON.",
  "miloA2436": "Game artifact is a subclass of artifact.",
  "miloA2437": "Game artifact is disjointly decomposed into game board and game piece.",
  "miloA2438": "If ARTIFACT is an instance of game artifact, then there is at least one GAME for which GAME is a subclass of game and ARTIFACT is capable to do GAME in role the predicate instrument for every ARTIFACT.",
  "miloA2439": "Game board is a subclass of game artifact.",
  "miloA2441": "Game piece is a subclass of game artifact.",
  "miloA2442": "Game die is a subclass of game piece.",
  "miloA2443": "Ball is a subclass of game piece.",
  "miloA2445": "Shot ball is a subclass of ball.",
  "miloA2446": "Game shot is a subclass of impelling.",
  "miloA2447": "Game shot is a subclass of maneuver.",
  "miloA2448": "If SHOT is an instance of game shot, then there is at least one PIECE for which PIECE is an instance of game piece and PIECE is a participant in SHOT for every SHOT.",
  "miloA2449": "If SHOT is an instance of game shot, then there is at least one GAME for which GAME is an instance of game and SHOT is a subprocess of GAME for every SHOT.",
  "miloA2451": "Score is a subclass of game shot.",
  "miloA2452": "Game goal is a subclass of game artifact.",
  "miloA2454": "Sport serve is a subclass of game shot.",
  "miloA2455": "If SS is an instance of sport serve, then there is at least one S for which S is an instance of sport and SS is a subprocess of S and the time when SS takes place starts the time when S takes place for every SS.",
  "miloA2456": "Throwing is a subclass of impelling.",
  "miloA2457": "Throwing is a subclass of body motion.",
  "miloA2458": "If THROW is an instance of throwing, then there is at least one ARM for which ARM is an instance of arm and ARM is an instrument for THROW for every THROW.",
  "miloA2459": "Pitching is a subclass of throwing.",
  "miloA2460": "Pitching is a subclass of game shot.",
  "miloA2461": "If PITCH is an instance of pitching and BALL is a participant in PITCH, then BALL is an instance of ball for every PITCH and BALL.",
  "miloA2462": "Catching is a subclass of touching.",
  "miloA2463": "Catching is a subclass of maneuver.",
  "miloA2464": "If CATCH is an instance of catching and BALL is a participant in CATCH, then BALL is an instance of ball for every CATCH and BALL.",
  "miloA2466": "Sign is a subclass of content bearing object.",
  "miloA2467": "Sign is a subclass of display artifact.",
  "miloA2468": "Playing card is a subclass of game artifact.",
  "miloA2469": "Playing card is a subclass of content bearing object.",
  "miloA2471": "Stretching is a subclass of motion.",
  "miloA2472": "Stretching is a subclass of lengthening.",
  "miloA2473": "Accelerating is a subclass of translocation.",
  "miloA2474": "Accelerating is a subclass of increasing.",
  "miloA2476": "Decelerating is a subclass of translocation.",
  "miloA2477": "Decelerating is a subclass of decreasing.",
  "miloA2479": "If T is an instance of time interval and E is an instance of agent and A is an instance of accelerating and T is equal to the time when A takes place and E experiences A, then D is not an instance of process or D is not an instance of decelerating or E does not experience D or T is not equal to the time when D takes place for every D for every A, E and T.",
  "miloA2480": "Shortening is a subclass of decreasing.",
  "miloA2482": "Flying is a subclass of translocation.",
  "miloA2483": "If FLY is an instance of flying, then there is at least one REGION for which REGION is an instance of atmospheric region and the entire process FLY is located on REGION for every FLY.",
  "miloA2484": "Taking off is a subclass of translocation.",
  "miloA2486": "Landing is a subclass of translocation.",
  "miloA2488": "Returning is a subclass of translocation.",
  "miloA2490": "Escaping is a subclass of translocation.",
  "miloA2491": "If AGENT is an instance of agent and ESCAPE is an instance of escaping and AGENT is the agent of ESCAPE, then there is at least one CONFINE for which CONFINE is an instance of confining and AGENT is a participant in CONFINE and the time when CONFINE takes place meets the time when ESCAPE takes place for every AGENT and ESCAPE.",
  "miloA2493": "Leaving is a subclass of translocation.",
  "miloA2494": "If LEAVE is an instance of leaving, then there is at least one GO for which GO is an instance of translocation and LEAVE is a subprocess of GO and the time when LEAVE takes place starts the time when GO takes place for every LEAVE.",
  "miloA2495": "Arriving is a subclass of translocation.",
  "miloA2496": "If ARRIVE is an instance of arriving, then there is at least one GO for which GO is an instance of translocation and ARRIVE is a subprocess of GO and the time when ARRIVE takes place finishes the time when GO takes place for every ARRIVE.",
  "miloA2497": "Immigrating is a subclass of translocation.",
  "miloA2499": "If A is an instance of agent and I is an instance of immigrating and A is the agent of I, then A is an instance of human for every I and A.",
  "miloA2500": "Boarding is a subclass of translocation.",
  "miloA2501": "If B is an instance of boarding and V is a participant in B, then V is an instance of vehicle for every B and V.",
  "miloA2505": "The predicate onboard is a subrelation of the predicate located.",
  "miloA2506": "If V is an instance of vehicle and V is an instance of self connected object and O is an instance of self connected object and O is on board of V, then V contains O for every V and O.",
  "miloA2507": "If V is an instance of vehicle and O is an instance of self connected object and O is on board of V and V is an instrument for T and T is an instance of transportation, then O is a participant in T for every V, T and O.",
  "miloA2508": "Deboarding is a subclass of translocation.",
  "miloA2510": "If B is an instance of deboarding and VEHICLE is a participant in B, then VEHICLE is an instance of vehicle for every B and VEHICLE.",
  "miloA2512": "Rotating is a subclass of motion.",
  "miloA2514": "Tremor is a subclass of rotating.",
  "miloA2515": "The predicate axis is an instance of binary predicate.",
  "miloA2518": "If OBJ is an instance of agent and AXIS is an instance of agent and AXIS is the axis of rotation of OBJ, then there is at least one R for which R is an instance of rotating and AXIS is a part of OBJ and OBJ experiences R and R2 is not an instance of process or R2 is not an instance of rotating or R2 is not a subprocess of R or AXIS does not experience R2 for every R2 for every OBJ and AXIS.",
  "miloA2519": "Centrifugal motion is a subclass of rotating.",
  "miloA2520": "Centrifugal motion is disjoint from centripetal motion.",
  "miloA2521": "If CM is an instance of centrifugal motion, then there is at least one R, A, O1 and O2 for which O1 is an instance of agent and A is an instance of object and O2 is an instance of agent and R is an instance of rotating and A is the axis of rotation of O1 and A is the origin of CM and O1 experiences R and O2 experiences CM and R causes CM for every CM.",
  "miloA2522": "Centripetal motion is a subclass of rotating.",
  "miloA2523": "If CM is an instance of centripetal motion, then there is at least one R, A, O1 and O2 for which O1 is an instance of agent and A is an instance of object and O2 is an instance of agent and R is an instance of rotating and A is the axis of rotation of O1 and CM ends at A and O1 experiences R and O2 experiences CM and R causes CM for every CM.",
  "miloA2524": "Reversing is a subclass of motion.",
  "miloA2526": "Dripping is a subclass of liquid motion.",
  "miloA2527": "Stirring is a subclass of liquid motion.",
  "miloA2528": "Stirring is a subclass of combining.",
  "miloA2529": "Pouring is a subclass of liquid motion.",
  "miloA2530": "Pouring is a subclass of transfer.",
  "miloA2531": "If POUR is an instance of pouring, then there is at least one LIQUID, CONTAINER1 and CONTAINER2 for which CONTAINER1 is the origin of POUR and POUR ends at CONTAINER2 and CONTAINER1 is an instance of container and CONTAINER2 is an instance of container and CONTAINER1 is not equal to CONTAINER2 and LIQUID is a participant in POUR and LIQUID has the attribute liquid and LIQUID is an instance of substance for every POUR.",
  "miloA2532": "Water wave is a subclass of liquid motion.",
  "miloA2533": "If WAVE is an instance of water wave, then there is at least one AREA for which AREA is an instance of water area and the entire process WAVE is located on AREA for every WAVE.",
  "miloA2534": "The predicate waterDepth is an instance of binary predicate.",
  "miloA2537": "The predicate waterDepth is a subrelation of the predicate length.",
  "miloA2538": "If DEPTH is an instance of length measure and AREA is an instance of water area and AREA is an instance of self connected object and the depth of water at AREA is DEPTH, then there is at least one BOTTOM and TOP for which BOTTOM is an instance of self connected object and TOP is an instance of self connected object and the difference in depth between TOP and BOTTOM is DEPTH and TOP is the top of AREA and BOTTOM is the bottom of AREA for every DEPTH and AREA.",
  "miloA2539": "Flooding is a subclass of liquid motion.",
  "miloA2541": "Spraying is a subclass of liquid motion.",
  "miloA2542": "Spraying is a subclass of transfer.",
  "miloA2543": "Pulling is a subclass of motion.",
  "miloA2544": "Submarine is a subclass of water vehicle.",
  "miloA2545": "Air transportation is a subclass of transportation.",
  "miloA2546": "If TRANSPORT is an instance of air transportation, then there is at least one CRAFT and REGION for which CRAFT is an instance of aircraft and REGION is an instance of atmospheric region and CRAFT is an instrument for TRANSPORT and the entire process TRANSPORT is located on REGION for every TRANSPORT.",
  "miloA2547": "Space transportation is a subclass of transportation.",
  "miloA2548": "If TRANSPORT is an instance of space transportation, then there is at least one CRAFT and REGION for which CRAFT is an instance of spacecraft and REGION is an instance of space region and CRAFT is an instrument for TRANSPORT and the entire process TRANSPORT is located on REGION for every TRANSPORT.",
  "miloA2549": "Spacecraft is a subclass of vehicle.",
  "miloA2550": "If CRAFT is an instance of spacecraft, then CRAFT is capable to do space transportation in role the predicate instrument for every CRAFT.",
  "miloA2551": "Rocket is a subclass of spacecraft.",
  "miloA2552": "Missile is a subclass of projectile.",
  "miloA2553": "Missile is a subclass of self powered device.",
  "miloA2554": "If M is an instance of missile, then there is at least one B for which B is an instance of bomb and B is a part of M for every M.",
  "miloA2555": "Ballistic missile is a subclass of missile.",
  "miloA2556": "Water transportation is a subclass of transportation.",
  "miloA2557": "If TRANSPORT is an instance of water transportation, then there is at least one CRAFT and AREA for which CRAFT is an instance of water vehicle and AREA is an instance of water area and CRAFT is an instrument for TRANSPORT and the entire process TRANSPORT is located on AREA for every TRANSPORT.",
  "miloA2558": "If CRAFT is an instance of water vehicle, then CRAFT is capable to do water transportation in role the predicate instrument for every CRAFT.",
  "miloA2559": "Rowing is a subclass of water transportation.",
  "miloA2560": "If R is an instance of rowing, then there is at least one O for which O is an instance of oar and O is an instrument for R for every R.",
  "miloA2561": "Land transportation is a subclass of transportation.",
  "miloA2562": "If LAND is an instance of land transportation, then there is at least one CRAFT and AREA for which CRAFT is an instance of land vehicle and AREA is an instance of land area and CRAFT is an instrument for LAND and CRAFT is located at AREA for every LAND.",
  "miloA2563": "If VEHICLE is an instance of land vehicle, then VEHICLE is capable to do land transportation in role the predicate instrument for every VEHICLE.",
  "miloA2564": "If P is an instance of object and T is an instance of land transportation and P is the path which T follows, then P is an instance of land transitway for every T and P.",
  "miloA2565": "Transport via road vehicle is a subclass of transportation.",
  "miloA2566": "Transport via road vehicle is a subclass of land transportation.",
  "miloA2567": "Flying aircraft is a subclass of driving.",
  "miloA2568": "If FLY is an instance of flying aircraft, then there is at least one CRAFT for which CRAFT is an instance of aircraft and CRAFT is a participant in FLY for every FLY.",
  "miloA2569": "If FLY is an instance of flying aircraft, then there is at least one FLIGHT for which FLIGHT is an instance of air transportation and FLY is a subprocess of FLIGHT for every FLY.",
  "miloA2570": "Aircraft is a subclass of vehicle.",
  "miloA2571": "If CRAFT is an instance of aircraft, then CRAFT is capable to do air transportation in role the predicate instrument for every CRAFT.",
  "miloA2572": "Helicopter is a subclass of aircraft.",
  "miloA2573": "Military artifact is a subclass of artifact.",
  "miloA2575": "Explosive device is a subclass of device.",
  "miloA2577": "Explosive mine is a subclass of explosive device.",
  "miloA2578": "Explosive mine is a subclass of weapon.",
  "miloA2579": "Explosive substance is a subclass of substance.",
  "miloA2580": "If S is an instance of explosive substance, then S is capable to do explosion in role the predicate instrument for every S.",
  "miloA2581": "If D is an instance of explosive device, then there is at least one S for which S is an instance of explosive substance and S is a part of D for every D.",
  "miloA2582": "Driveway is a subclass of roadway.",
  "miloA2583": "The function OperatingFn is an instance of unary function.",
  "miloA2586": "Installing is a subclass of putting.",
  "miloA2587": "If INSTALL is an instance of installing and DEVICE is a participant in INSTALL, then DEVICE is an instance of device for every INSTALL and DEVICE.",
  "miloA2589": "Rock is a subclass of substance.",
  "miloA2590": "If Rock is an instance of rock, then Rock has the attribute solid for every Rock.",
  "miloA2591": "If Rock is an instance of rock, then there is at least one Mineral for which Mineral is an instance of mineral and Mineral is a part of Rock for every Rock.",
  "miloA2592": "Soil is a subclass of mixture.",
  "miloA2593": "If Soil is an instance of soil, then there is at least one Humus and Mineral for which Humus is an instance of humus and Mineral is an instance of mineral and Humus is a part of Soil and Mineral is a part of Soil for every Soil.",
  "miloA2594": "Clay is a subclass of soil.",
  "miloA2595": "Humus is a subclass of mixture.",
  "miloA2596": "If Humus is an instance of humus, then there is at least one Soil for which Soil is an instance of soil and Humus is a part of Soil for every Humus.",
  "miloA2597": "Burying is a subclass of putting.",
  "miloA2598": "Burying is a subclass of digging.",
  "miloA2599": "If B is an instance of burying, then there is at least one C and S for which C is an instance of covering and S is an instrument for C and S is an instance of soil and C is a subprocess of B for every B.",
  "miloA2600": "Digging is a subclass of intentional process.",
  "miloA2601": "Digging is a subclass of surface change.",
  "miloA2602": "If D is an instance of digging, then there is at least one S for which S is a participant in D and S is an instance of soil for every D.",
  "miloA2603": "Tilling is a subclass of digging.",
  "miloA2604": "Tilling is a subclass of intentional process.",
  "miloA2605": "Tilling is a subclass of surface change.",
  "miloA2606": "If TILL is an instance of tilling and SOIL is a participant in TILL, then SOIL is an instance of soil for every TILL and SOIL.",
  "miloA2607": "If T is an instance of tilling, then there is at least one A for which A is an instance of agriculture and T is a subprocess of A for every T.",
  "miloA2608": "Entombing is a subclass of putting.",
  "miloA2609": "If E is an instance of entombing and C is a participant in E, then C is an instance of human corpse for every E and C.",
  "miloA2610": "If E is an instance of entombing and E ends at T, then T is an instance of tomb for every E and T.",
  "miloA2611": "Moving residence is a subclass of transfer.",
  "miloA2613": "Harvesting is a subclass of removing.",
  "miloA2614": "If H is an instance of harvesting, then there is at least one A for which A is an instance of agriculture and H is a subprocess of A for every H.",
  "miloA2615": "If H is an instance of harvesting and C is a result of H, then C is an instance of plant anatomical structure or C is an instance of plant substance for every H and C.",
  "miloA2616": "Drilling is a subclass of intentional process.",
  "miloA2617": "Drilling is a subclass of surface change.",
  "miloA2619": "Drill is a subclass of cutting device.",
  "miloA2621": "Saw is a subclass of cutting device.",
  "miloA2623": "Paper shredder is a subclass of cutting device.",
  "miloA2626": "Memorizing is a subclass of learning.",
  "miloA2627": "If M is an instance of memorizing and T is a participant in M, then T is an instance of text for every M and T.",
  "miloA2628": "Imagining is a subclass of psychological process.",
  "miloA2629": "Dreaming is a subclass of imagining.",
  "miloA2630": "Dreaming is disjoint from intentional process.",
  "miloA2632": "Frightening is a subclass of psychological process.",
  "miloA2634": "Execution is a subclass of killing.",
  "miloA2635": "If E is an instance of execution, then there is at least one P for which P is a participant in E and P is an instance of human for every E.",
  "miloA2636": "Suicide is a subclass of killing.",
  "miloA2637": "If S is an instance of suicide, then there is at least one A for which A is an instance of agent and A is the agent of S and A experiences S for every S.",
  "miloA2638": "Trespassing is a subclass of criminal action.",
  "miloA2639": "Trespassing is a subclass of translocation.",
  "miloA2641": "Protecting is a subclass of maintaining.",
  "miloA2643": "Murder is a subclass of killing.",
  "miloA2644": "Murder is a subclass of criminal action.",
  "miloA2645": "If MURDER is an instance of murder, then there is at least one PERSON for which PERSON is a participant in MURDER and PERSON is an instance of human for every MURDER.",
  "miloA2646": "Suffocating is a subclass of killing.",
  "miloA2648": "Hanging is a subclass of suffocating.",
  "miloA2650": "Starving is a subclass of killing.",
  "miloA2651": "Musical conducting is a subclass of guiding.",
  "miloA2652": "If CONDUCT is an instance of musical conducting, then there is at least one MUSIC for which MUSIC is an instance of musical performance and CONDUCT is a subprocess of MUSIC for every CONDUCT.",
  "miloA2654": "Orchestral conducting is a subclass of musical conducting.",
  "miloA2655": "If CONDUCT is an instance of orchestral conducting and GRP is a participant in CONDUCT, then GRP is an instance of orchestra for every CONDUCT and GRP.",
  "miloA2656": "Musical group is a subclass of group of people.",
  "miloA2657": "Orchestra is a subclass of musical group.",
  "miloA2659": "Dramatic directing is a subclass of guiding.",
  "miloA2660": "If DIRECT is an instance of dramatic directing and ACT is a participant in DIRECT, then ACT is an instance of dramatic acting for every DIRECT and ACT.",
  "miloA2661": "Sharing is a subclass of change of possession.",
  "miloA2662": "If AGENT1 is an instance of agent and OBJ is an instance of object and SHARE is an instance of sharing and AGENT1 is the agent of SHARE and SHARE ends at AGENT2 and OBJ is a participant in SHARE, then there is at least one GIVE and PART for which PART is an instance of object and GIVE is an instance of giving and GIVE is a subprocess of SHARE and PART is a participant in GIVE and PART is a proper part of OBJ and AGENT1 is the agent of GIVE and GIVE ends at AGENT2 for every SHARE, OBJ, AGENT1 and AGENT2.",
  "miloA2663": "Stealing is a subclass of unilateral getting.",
  "miloA2664": "Stealing is a subclass of criminal action.",
  "miloA2666": "Robbing is a subclass of stealing.",
  "miloA2668": "Inheriting is a subclass of unilateral getting.",
  "miloA2670": "Awarding is a subclass of unilateral giving.",
  "miloA2671": "If A is an instance of awarding, then there is at least one RECIPIENT, GIVER, PROCESS and AWARD for which RECIPIENT is an instance of agent and GIVER is an instance of agent and PROCESS is an instance of process and AWARD is an instance of object and RECIPIENT is the agent of PROCESS and GIVER is the agent of A and AWARD is a participant in A and A ends at RECIPIENT and PROCESS causes A for every A.",
  "miloA2672": "The predicate hasAward is an instance of binary predicate.",
  "miloA2675": "If AWARD is an instance of object and RECIPIENT is an instance of agent and RECIPIENT has the award AWARD, then there is at least one A for which A is an instance of awarding and A ends at RECIPIENT and AWARD is a participant in A for every RECIPIENT and AWARD.",
  "miloA2676": "Bequeathing is a subclass of unilateral giving.",
  "miloA2678": "Seizing property is a subclass of unilateral getting.",
  "miloA2680": "Position is exhaustively partitioned into full time position and part time position.",
  "miloA2681": "Full time position is a subclass of position.",
  "miloA2682": "Part time position is a subclass of position.",
  "miloA2683": "College freshman is an instance of college student position.",
  "miloA2685": "College junior is an instance of college student position.",
  "miloA2687": "College senior is an instance of college student position.",
  "miloA2689": "College sophomore is an instance of college student position.",
  "miloA2691": "College student position is a subclass of position.",
  "miloA2692": "Comedian is an instance of entertainment profession.",
  "miloA2693": "If P is an instance of agent and P has the attribute comedian, then there is at least one PERF and L for which PERF is an instance of performance and P is the agent of PERF and L is an instance of laughing and PERF causes L for every P.",
  "miloA2694": "Treasurer is an instance of skilled occupation.",
  "miloA2695": "Sales position is a subclass of skilled occupation.",
  "miloA2696": "Clerical secretary is an instance of skilled occupation.",
  "miloA2697": "Service position is a subclass of skilled occupation.",
  "miloA2698": "Dentist is an instance of profession.",
  "miloA2699": "If P is an instance of agent and P has the attribute dentist, then there is at least one D and T for which D is an instance of diagnostic process and P is the agent of D and T is an instance of tooth and T is a participant in D for every P.",
  "miloA2700": "Pharmacist is an instance of profession.",
  "miloA2701": "Researcher is an instance of profession.",
  "miloA2702": "If P is an instance of human and P has the attribute researcher, then there is at least one S for which S is an instance of science and P has the expertise to do S for every P.",
  "miloA2703": "Teacher is an instance of profession.",
  "miloA2706": "Entertainment profession is a subclass of skilled occupation.",
  "miloA2708": "Sports position is a subclass of skilled occupation.",
  "miloA2709": "If O is an instance of organization and H is an instance of human and H holds the position of P in O and P is an instance of sports position, then O is an instance of sports team for every H, P and O.",
  "miloA2710": "Government position is a subclass of profession.",
  "miloA2711": "If ORG is an instance of organization and P is an instance of human and O is an instance of government position and P holds the position of O in ORG, then ORG is an instance of government organization for every P, O and ORG.",
  "miloA2712": "Journalist is an instance of profession.",
  "miloA2714": "Modelling position is a subclass of position.",
  "miloA2715": "Soldier is an instance of government position.",
  "miloA2716": "Confederate soldier is an instance of government position.",
  "miloA2717": "Confederate soldier is a subattribute of soldier.",
  "miloA2718": "Sailor is an instance of skilled occupation.",
  "miloA2719": "Ship captain is a subattribute of sailor.",
  "miloA2720": "Ship officer is a subattribute of sailor.",
  "miloA2721": "Ship mate is a subattribute of sailor.",
  "miloA2722": "Military private is an instance of government position.",
  "miloA2723": "Military private is a subattribute of soldier.",
  "miloA2724": "Military officer is a subattribute of soldier.",
  "miloA2725": "Military officer is an instance of government position.",
  "miloA2727": "Military general is a subattribute of military officer.",
  "miloA2728": "Major general is a subattribute of military general.",
  "miloA2729": "Major general is an instance of government position.",
  "miloA2730": "Brigadier general is a subattribute of military general.",
  "miloA2731": "Brigadier general is an instance of government position.",
  "miloA2732": "Lieutenant is a subattribute of military officer.",
  "miloA2733": "Lieutenant is an instance of government position.",
  "miloA2734": "Captain officer is a subattribute of military officer.",
  "miloA2735": "Captain officer is an instance of government position.",
  "miloA2736": "Colonel is a subattribute of military officer.",
  "miloA2737": "Colonel is an instance of government position.",
  "miloA2738": "Sergeant is a subattribute of military officer.",
  "miloA2739": "Sergeant is an instance of government position.",
  "miloA2740": "Corporal is a subattribute of military officer.",
  "miloA2741": "Corporal is an instance of government position.",
  "miloA2742": "Century duration is an instance of unit of duration.",
  "miloA2743": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in century duration is equal to NUMBER multiplied by 100 measured in year duration for every NUMBER.",
  "miloA2744": "Decade duration is an instance of unit of duration.",
  "miloA2745": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in decade duration is equal to NUMBER multiplied by 10 measured in year duration for every NUMBER.",
  "miloA2746": "Yard length is an instance of unit of length.",
  "miloA2747": "If NUMBER is an instance of real number and NUMBER is equal to 1 multiplied by NUMBER, then NUMBER measured in yard length is equal to 3 multiplied by NUMBER measured in foot length for every NUMBER.",
  "miloA2748": "Nanometer is an instance of unit of length.",
  "miloA2749": "Night time is a subclass of time interval.",
  "miloA2750": "If NIGHT is an instance of night time, then there is at least one DAY1 and DAY2 for which DAY1 is an instance of day time and DAY2 is an instance of day time and NIGHT meets DAY1 and DAY2 meets NIGHT for every NIGHT.",
  "miloA2751": "If NIGHT is an instance of night time, then there is at least one RISE and SET for which RISE is an instance of sunrise and SET is an instance of sunset and SET starts NIGHT and RISE finishes NIGHT for every NIGHT.",
  "miloA2752": "Day time is a subclass of time interval.",
  "miloA2753": "If DAY is an instance of day time, then there is at least one NIGHT1 and NIGHT2 for which NIGHT1 is an instance of night time and NIGHT2 is an instance of night time and DAY meets NIGHT1 and NIGHT2 meets DAY for every DAY.",
  "miloA2754": "If DAY is an instance of day time, then there is at least one RISE and SET for which RISE is an instance of sunrise and SET is an instance of sunset and RISE starts DAY and SET finishes DAY for every DAY.",
  "miloA2755": "Morning is a subclass of day time.",
  "miloA2757": "Ante meridiem is a subclass of time interval.",
  "miloA2759": "Post meridiem is a subclass of time interval.",
  "miloA2761": "Afternoon is a subclass of day time.",
  "miloA2763": "Sunrise is a subclass of time interval.",
  "miloA2764": "Sunset is a subclass of time interval.",
  "miloA2765": "Weekend is a subclass of time interval.",
  "miloA2766": "If WEEKEND is an instance of weekend, then there is at least one SATURDAY and SUNDAY for which SATURDAY is an instance of saturday and SUNDAY is an instance of sunday and SATURDAY starts WEEKEND and SUNDAY finishes WEEKEND and SATURDAY meets SUNDAY for every WEEKEND.",
  "miloA2767": "Season of year is a subclass of time interval.",
  "miloA2768": "Season of year is exhaustively partitioned into winter season, spring season, summer season and fall season.",
  "miloA2769": "Winter season is a subclass of season of year.",
  "miloA2770": "If WINTER is an instance of winter season, then there is at least one SPRING for which SPRING is an instance of spring season and WINTER meets SPRING for every WINTER.",
  "miloA2771": "If WINTER is an instance of winter season, then there is at least one AUTUMN for which AUTUMN is an instance of fall season and AUTUMN meets WINTER for every WINTER.",
  "miloA2772": "Spring season is a subclass of season of year.",
  "miloA2773": "If SPRING is an instance of spring season, then there is at least one SUMMER for which SUMMER is an instance of summer season and SPRING meets SUMMER for every SPRING.",
  "miloA2774": "If SPRING is an instance of spring season, then there is at least one WINTER for which WINTER is an instance of winter season and WINTER meets SPRING for every SPRING.",
  "miloA2775": "Summer season is a subclass of season of year.",
  "miloA2776": "If SUMMER is an instance of summer season, then there is at least one SPRING for which SPRING is an instance of spring season and SPRING meets SUMMER for every SUMMER.",
  "miloA2777": "If SUMMER is an instance of summer season, then there is at least one AUTUMN for which AUTUMN is an instance of fall season and SUMMER meets AUTUMN for every SUMMER.",
  "miloA2778": "Fall season is a subclass of season of year.",
  "miloA2779": "If AUTUMN is an instance of fall season, then there is at least one SUMMER for which SUMMER is an instance of summer season and SUMMER meets AUTUMN for every AUTUMN.",
  "miloA2780": "If AUTUMN is an instance of fall season, then there is at least one WINTER for which WINTER is an instance of winter season and AUTUMN meets WINTER for every AUTUMN.",
  "miloA2781": "Upstairs is an instance of positional attribute.",
  "miloA2782": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is upstairs to OBJ2, then there is at least one LEVEL1, LEVEL2 and BUILDING for which LEVEL1 is an instance of building level and LEVEL2 is an instance of building level and BUILDING is an instance of building and LEVEL1 is a part of BUILDING and LEVEL2 is a part of BUILDING and OBJ1 is located at LEVEL1 and OBJ2 is located at LEVEL2 and LEVEL1 is above to LEVEL2 for every OBJ1 and OBJ2.",
  "miloA2783": "Downstairs is an instance of positional attribute.",
  "miloA2784": "If OBJ2 is an instance of object and OBJ1 is an instance of object and OBJ1 is downstairs to OBJ2, then there is at least one LEVEL1, LEVEL2 and BUILDING for which LEVEL1 is an instance of building level and LEVEL2 is an instance of building level and BUILDING is an instance of building and LEVEL1 is a part of BUILDING and LEVEL2 is a part of BUILDING and OBJ1 is located at LEVEL1 and OBJ2 is located at LEVEL2 and LEVEL1 is below to LEVEL2 for every OBJ1 and OBJ2.",
  "miloA2785": "Linguistic attribute is a subclass of internal attribute.",
  "miloA2786": "Happiness is an instance of emotional state.",
  "miloA2787": "If PERSON is an instance of cognitive agent and PERSON has the attribute happiness, then PROP is not an instance of formula or PERSON does not fear that PROP will be true for every PROP for every PERSON.",
  "miloA2788": "Satisfaction is a subattribute of happiness.",
  "miloA2789": "Tranquility is a subattribute of happiness.",
  "miloA2790": "Nothing can simultaneously be tranquility and anxiety.",
  "miloA2791": "Unhappiness is an instance of emotional state.",
  "miloA2792": "Nothing can simultaneously be unhappiness and happiness.",
  "miloA2793": "Excitement is a subattribute of happiness.",
  "miloA2794": "Anxiety is a subattribute of unhappiness.",
  "miloA2795": "If PERSON is an instance of cognitive agent and PERSON has the attribute anxiety, then there is at least one PROP for which PROP is an instance of formula and PERSON fears that PROP will be true for every PERSON.",
  "miloA2796": "Anger is a subattribute of unhappiness.",
  "miloA2797": "If PERSON is an instance of cognitive agent and PERSON has the attribute anger, then there is at least one PROP for which PROP is an instance of formula and PERSON disapproves PROP for every PERSON.",
  "miloA2798": "Pain is a subattribute of unhappiness.",
  "miloA2799": "Headache is a subattribute of pain.",
  "miloA2800": "If E is an instance of object and E has the attribute headache, then there is at least one H for which H is an instance of head and H is a proper part of E and H has the attribute pain for every E.",
  "miloA2801": "Surprise is an instance of emotional state.",
  "miloA2803": "The predicate structure is an instance of binary predicate.",
  "miloA2804": "The predicate structure is an instance of irreflexive relation.",
  "miloA2805": "The predicate structure is an instance of asymmetric relation.",
  "miloA2806": "The predicate structure is a subrelation of the predicate attribute.",
  "miloA2809": "The predicate color is a subrelation of the predicate attribute.",
  "miloA2813": "Secondary color is a subclass of color attribute.",
  "miloA2814": "If OBJ is an instance of object and COLOR is an instance of secondary color and OBJ has the attribute COLOR, then there is at least one PROCESS, RESOURCE1, RESOURCE2, PRIMARY1 and PRIMARY2 for which PROCESS is an instance of process and RESOURCE1 is an instance of object and RESOURCE2 is an instance of object and OBJ is a result of PROCESS and RESOURCE1 is a resource for PROCESS and RESOURCE2 is a resource for PROCESS and RESOURCE1 has the attribute PRIMARY1 and RESOURCE2 has the attribute PRIMARY2 and PRIMARY1 is an instance of primary color and PRIMARY2 is an instance of primary color and PRIMARY1 is not equal to PRIMARY2 for every COLOR and OBJ.",
  "miloA2815": "Gray color is an instance of secondary color.",
  "miloA2816": "Pink is an instance of secondary color.",
  "miloA2817": "Brown is an instance of secondary color.",
  "miloA2818": "Orange color is an instance of secondary color.",
  "miloA2819": "Green is an instance of secondary color.",
  "miloA2820": "Purple is an instance of secondary color.",
  "miloA2821": "Line formation is an instance of shape attribute.",
  "miloA2822": "If COLLECTION is an instance of object and COLLECTION has the attribute line formation, then COLLECTION is an instance of collection for every COLLECTION.",
  "miloA2823": "Stressed is an instance of sound attribute.",
  "miloA2824": "If SYLLABLE is an instance of object and SYLLABLE has the attribute stressed, then SYLLABLE is an instance of syllable for every SYLLABLE.",
  "miloA2825": "If SYLLABLE is an instance of object and WORD is an instance of object and SYLLABLE has the attribute stressed and WORD is an instance of word and SYLLABLE is a part of WORD, then SYLLABLE2 is not an instance of object or SYLLABLE2 is not an instance of syllable or SYLLABLE2 is not a part of WORD or SYLLABLE2 does not have the attribute stressed or SYLLABLE2 is equal to SYLLABLE for every SYLLABLE2 for every WORD and SYLLABLE.",
  "miloA2826": "Syllable is a subclass of symbolic string.",
  "miloA2827": "If WORD is an instance of object and WORD is an instance of word, then there is at least one SYLLABLE for which SYLLABLE is an instance of syllable and SYLLABLE is a part of WORD for every WORD.",
  "miloA2828": "Alphabetic character is a subclass of character.",
  "miloA2829": "Digit character is a subclass of character.",
  "miloA2830": "Consonant is a subclass of alphabetic character.",
  "miloA2831": "Vowel is a subclass of alphabetic character.",
  "miloA2832": "Lost is an instance of contest attribute.",
  "miloA2833": "Nothing can simultaneously be lost and won.",
  "miloA2834": "Won is an instance of contest attribute.",
  "miloA2835": "Tie score is an instance of contest attribute.",
  "miloA2836": "Game attribute is a subclass of contest attribute.",
  "miloA2837": "Sports attribute is a subclass of game attribute.",
  "miloA2838": "Foul is an instance of sports attribute.",
  "miloA2839": "Sports out is an instance of sports attribute.",
  "miloA2840": "Politico economic attribute is a subclass of relational attribute.",
  "miloA2841": "Politico economic attribute is exhaustively partitioned into form of government and economic attribute.",
  "miloA2842": "If GOVERNMENT is an instance of object and ATTRIBUTE is an instance of politico economic attribute and GOVERNMENT has the attribute ATTRIBUTE, then GOVERNMENT is an instance of government for every ATTRIBUTE and GOVERNMENT.",
  "miloA2843": "Economic attribute is a subclass of politico economic attribute.",
  "miloA2844": "Form of government is a subclass of politico economic attribute.",
  "miloA2845": "Chemical reduction is a subclass of chemical synthesis.",
  "miloA2846": "Chemical reduction is disjoint from oxidation.",
  "miloA2848": "Oxidation is a subclass of chemical decomposition.",
  "miloA2850": "Dialysis is a subclass of separating.",
  "miloA2851": "If DIALYSIS is an instance of dialysis, then there is at least one SOLUTION, SUBSTANCE1 and SUBSTANCE2 for which SOLUTION is a resource for DIALYSIS and SOLUTION is an instance of solution and SUBSTANCE1 is a result of DIALYSIS and SUBSTANCE1 is an instance of pure substance and SUBSTANCE2 is a result of DIALYSIS and SUBSTANCE2 is an instance of pure substance and SUBSTANCE1 is not equal to SUBSTANCE2 for every DIALYSIS.",
  "miloA2852": "Diluting is a subclass of putting.",
  "miloA2853": "If D is an instance of diluting, then there is at least one S for which S is a participant in D and S is an instance of solution and S has the attribute liquid for every D.",
  "miloA2854": "Chemical equilibrium is an instance of internal attribute.",
  "miloA2855": "If PROCESS has the property chemical equilibrium, then PROCESS is an instance of chemical process for every PROCESS.",
  "miloA2857": "Chromatography is a subclass of separating.",
  "miloA2858": "If C is an instance of chromatography, then there is at least one M for which M is an instance of object and M is a resource for C and M is an instance of liquid mixture or M is an instance of gas mixture for every C.",
  "miloA2859": "If C is an instance of chromatography, then there is at least one S for which S is an instance of pure substance and S is a result of C for every C.",
  "miloA2860": "Breakability attribute is a subclass of internal attribute.",
  "miloA2861": "Fragile is an instance of breakability attribute.",
  "miloA2862": "Unbreakable is an instance of breakability attribute.",
  "miloA2863": "Nothing can simultaneously be unbreakable and fragile.",
  "miloA2864": "The predicate contestParticipant is a subrelation of the predicate agent.",
  "miloA2865": "The predicate contestParticipant is an instance of total valued relation.",
  "miloA2868": "Civil war is a subclass of war.",
  "miloA2869": "If WAR is an instance of civil war, then there is at least one NATION for which NATION is an instance of nation and if AGENT is an instance of geopolitical area and AGENT is a participant in the contest WAR, then AGENT is a geopolitical subdivision of NATION for every AGENT for every WAR.",
  "miloA2870": "Debating is a subclass of contest.",
  "miloA2871": "Debating is a subclass of linguistic communication.",
  "miloA2872": "Negotiating is a subclass of contest.",
  "miloA2873": "Negotiating is a subclass of linguistic communication.",
  "miloA2875": "Business competition is a subclass of contest.",
  "miloA2876": "If AGENT is an instance of agent and CONTEST is an instance of business competition and AGENT is a participant in the contest CONTEST, then AGENT is an instance of corporation for every CONTEST and AGENT.",
  "miloA2877": "Visual acuity attribute is a subclass of biological attribute.",
  "miloA2878": "Color blind is an instance of visual acuity attribute.",
  "miloA2879": "Disability is a subclass of disease or syndrome.",
  "miloA2880": "Physical disability is a subclass of disability.",
  "miloA2881": "Sensory disability is a subclass of disability.",
  "miloA2882": "Blind is an instance of visual acuity attribute.",
  "miloA2883": "Blind is an instance of sensory disability.",
  "miloA2884": "If AGENT is an instance of object and AGENT has the attribute blind, then AGENT is not capable to do seeing in role the predicate agent for every AGENT.",
  "miloA2885": "Deaf is an instance of sensory disability.",
  "miloA2886": "If A is an instance of object and A has the attribute deaf, then A is not capable to do hearing in role the predicate agent for every A.",
  "miloA2887": "Hungry is an instance of biological attribute.",
  "miloA2889": "Pregnant is an instance of biological attribute.",
  "miloA2890": "If H is an instance of object and H has the attribute pregnant, then H has the attribute female for every H.",
  "miloA2891": "Puberty is a subattribute of non fully formed.",
  "miloA2892": "Fist is an instance of body position.",
  "miloA2893": "If HAND is an instance of object and HAND has the attribute fist, then HAND is an instance of hand for every HAND.",
  "miloA2894": "Lying down is a subclass of body motion.",
  "miloA2895": "Lying down is a subclass of motion downward.",
  "miloA2897": "Handstand is an instance of body position.",
  "miloA2898": "Kneeling is an instance of body position.",
  "miloA2899": "Splitting is an instance of body position.",
  "miloA2900": "Squatting is a subattribute of sitting.",
  "miloA2901": "Sitting down is a subclass of body motion.",
  "miloA2902": "Sitting down is a subclass of motion downward.",
  "miloA2904": "Standing up is a subclass of body motion.",
  "miloA2905": "Standing up is a subclass of motion upward.",
  "miloA2907": "Eye motion is a subclass of body motion.",
  "miloA2908": "If A is an instance of agent and EM is an instance of eye motion and A is the agent of EM, then there is at least one E for which E is an instance of eyelid and E is a part of A and E is a participant in EM for every A and EM.",
  "miloA2909": "Opening eyes is a subclass of eye motion.",
  "miloA2910": "Opening eyes is a subclass of opening.",
  "miloA2911": "Opening eyes is disjoint from closing eyes.",
  "miloA2912": "Closing eyes is a subclass of eye motion.",
  "miloA2913": "Closing eyes is a subclass of closing.",
  "miloA2914": "Winking is a subclass of closing eyes.",
  "miloA2915": "Winking is a subclass of gesture.",
  "miloA2916": "Shrugging is a subclass of body motion.",
  "miloA2917": "Shrugging is a subclass of gesture.",
  "miloA2918": "If SHRUG is an instance of shrugging and SHOULDER is a participant in SHRUG, then SHOULDER is an instance of shoulder for every SHRUG and SHOULDER.",
  "miloA2919": "Trembling is a subclass of body motion.",
  "miloA2920": "Trembling is a subclass of autonomic process.",
  "miloA2921": "Trembling is a subclass of tremor.",
  "miloA2922": "Trembling is disjoint from intentional process.",
  "miloA2923": "Reflexive process is a subclass of autonomic process.",
  "miloA2924": "If P is an instance of reflexive process, then there is at least one M for which M is an instance of muscle and M is a participant in P for every P.",
  "miloA2925": "Dismounting is a subclass of body motion.",
  "miloA2927": "Domestic animal is a subclass of animal.",
  "miloA2928": "Domestic animal is disjoint from human.",
  "miloA2929": "If ANIMAL is an instance of domestic animal, then there is at least one KEEP and PERSON for which KEEP is an instance of keeping and PERSON is the agent of KEEP and PERSON is an instance of human and ANIMAL is a participant in KEEP for every ANIMAL.",
  "miloA2931": "Fodder is a subclass of organic object.",
  "miloA2933": "Herbivore is a subclass of mammal.",
  "miloA2934": "Herbivore is disjoint from carnivore.",
  "miloA2935": "If A is an instance of herbivore and A is the agent of E and E is an instance of eating and F is a participant in E, then F is an instance of plant for every A, E and F.",
  "miloA2936": "Antelope is a subclass of hoofed mammal.",
  "miloA2937": "Buffalo is a subclass of hoofed mammal.",
  "miloA2938": "Domestic cat is a subclass of domestic animal.",
  "miloA2939": "Domestic cat is a subclass of feline.",
  "miloA2940": "Domestic dog is a subclass of domestic animal.",
  "miloA2941": "Domestic dog is a subclass of canine.",
  "miloA2942": "Fox is a subclass of canine.",
  "miloA2943": "Elephant is a subclass of herbivore.",
  "miloA2944": "Horse is a subclass of hoofed mammal.",
  "miloA2945": "Pig is a subclass of hoofed mammal.",
  "miloA2946": "Donkey is a subclass of hoofed mammal.",
  "miloA2947": "Gastropod is a subclass of mollusk.",
  "miloA2948": "Mule is a subclass of hoofed mammal.",
  "miloA2949": "Mule is a subclass of domestic animal.",
  "miloA2950": "If MULE is an instance of mule, then there is at least one DONKEY and HORSE for which MULE is the father of DONKEY and DONKEY is an instance of donkey and MULE is the mother of HORSE and HORSE is an instance of horse for every MULE.",
  "miloA2951": "If MULE is an instance of mule, then MULE is not capable to do sexual reproduction in role the predicate agent for every MULE.",
  "miloA2952": "Sheep is a subclass of hoofed mammal.",
  "miloA2953": "Sheep is a subclass of domestic animal.",
  "miloA2954": "Lamb is a subclass of sheep.",
  "miloA2955": "If L is an instance of object, then L is an instance of sheep and L has the attribute non fully formed if and only if L is an instance of lamb for every L.",
  "miloA2956": "Cow is a subclass of hoofed mammal.",
  "miloA2957": "Cow is a subclass of domestic animal.",
  "miloA2958": "Calf is a subclass of cow.",
  "miloA2959": "If C is an instance of object, then C is an instance of cow and C has the attribute non fully formed if and only if C is an instance of calf for every C.",
  "miloA2960": "Bull is a subclass of cow.",
  "miloA2961": "If B is an instance of object, then B is an instance of cow and B has the attribute male if and only if B is an instance of bull for every B.",
  "miloA2962": "Female cow is a subclass of cow.",
  "miloA2963": "If COW is an instance of object, then COW is an instance of cow and COW has the attribute female if and only if COW is an instance of female cow for every COW.",
  "miloA2964": "Poultry is a subclass of bird.",
  "miloA2965": "Chicken is a subclass of poultry.",
  "miloA2966": "Hen is a subclass of chicken.",
  "miloA2967": "If H is an instance of object, then H is an instance of chicken and H has the attribute female if and only if H is an instance of hen for every H.",
  "miloA2968": "Rooster is a subclass of chicken.",
  "miloA2969": "If R is an instance of object, then R is an instance of chicken and R has the attribute male if and only if R is an instance of rooster for every R.",
  "miloA2970": "Duck is a subclass of poultry.",
  "miloA2971": "Goose is a subclass of poultry.",
  "miloA2972": "Owl is a subclass of bird.",
  "miloA2973": "Pigeon is a subclass of bird.",
  "miloA2974": "Vulture is a subclass of bird.",
  "miloA2975": "Feather is a subclass of animal anatomical structure.",
  "miloA2976": "Feather is a subclass of body part.",
  "miloA2977": "If F is an instance of feather, then there is at least one B for which B is an instance of bird and F is a part of B for every F.",
  "miloA2978": "The predicate meatOfAnimal is an instance of binary predicate.",
  "miloA2982": "Beef is a subclass of meat.",
  "miloA2983": "Beef is the meat of the animal cow.",
  "miloA2984": "Chicken meat is a subclass of meat.",
  "miloA2985": "Chicken meat is the meat of the animal chicken.",
  "miloA2986": "Pork is a subclass of meat.",
  "miloA2987": "Pork is the meat of the animal pig.",
  "miloA2988": "Mouse is a subclass of rodent.",
  "miloA2989": "Rat is a subclass of rodent.",
  "miloA2990": "Rabbit is a subclass of rodent.",
  "miloA2991": "Squirrel is a subclass of rodent.",
  "miloA2992": "Hay is a subclass of fodder.",
  "miloA2993": "If HAY is an instance of hay, then there is at least one MAKE and GRASS for which MAKE is an instance of making and GRASS is a resource for MAKE and GRASS is an instance of grass and HAY is a result of MAKE for every HAY.",
  "miloA2994": "Copying is a subclass of making.",
  "miloA2995": "If THING1 is an instance of object and THING2 is an instance of object and COPY is an instance of copying and THING1 is a resource for COPY and THING2 is a result of COPY, then THING1 is a exact copy of THING2 for every COPY, THING1 and THING2.",
  "miloA2996": "Vacationing is a subclass of recreation or exercise.",
  "miloA2997": "If VACATION is an instance of vacationing and WORK is an instance of working and PERSON is the agent of VACATION and PERSON is the agent of WORK and PERSON is an instance of human, then the time when VACATION takes place does not overlap the time when WORK takes place for every PERSON, VACATION and WORK.",
  "miloA2998": "The function OccupationFn is an instance of unary function.",
  "miloA3001": "The predicate occupation is an instance of binary predicate.",
  "miloA3004": "Working is a subclass of financial transaction.",
  "miloA3005": "Farming is a subclass of working.",
  "miloA3007": "Serving is a subclass of working.",
  "miloA3008": "Sales is a subclass of working.",
  "miloA3009": "Retired is a subattribute of unemployed.",
  "miloA3010": "Housewife is a subattribute of unemployed.",
  "miloA3011": "If W is an instance of woman and W has the attribute housewife, then there is at least one H for which H is an instance of man and W is the wife of H for every W.",
  "miloA3012": "Waiter is an instance of service position.",
  "miloA3013": "If X is an instance of object and X has the attribute waiter, then X is an instance of human for every X.",
  "miloA3015": "Maid is an instance of service position.",
  "miloA3017": "Janitor is a subclass of unskilled occupation.",
  "miloA3019": "Theater profession is a subclass of entertainment profession.",
  "miloA3020": "Film director is an instance of film making profession.",
  "miloA3021": "Film making is a subclass of content development.",
  "miloA3022": "If FM is an instance of film making, then there is at least one M and F for which M is an instance of motion picture and M is a result of FM and F is an instance of photographic film and F is a resource for FM for every FM.",
  "miloA3023": "Film making profession is a subclass of entertainment profession.",
  "miloA3025": "Film producer is an instance of film making profession.",
  "miloA3026": "Coach is an instance of skilled occupation.",
  "miloA3027": "Game referee is an instance of skilled occupation.",
  "miloA3028": "Carpenter is an instance of occupational trade.",
  "miloA3029": "If P is an instance of agent and P has the attribute carpenter, then carpentry has the skill to do P for every P.",
  "miloA3030": "Carpentry is a subclass of making.",
  "miloA3031": "If C is an instance of carpentry, then there is at least one B and W for which B is an instance of building and W is an instance of wood and W is a part of B and B is a result of C for every C.",
  "miloA3032": "The predicate constructionPeriod is an instance of binary predicate.",
  "miloA3036": "The predicate contractor is an instance of binary predicate.",
  "miloA3040": "Agriculture is a subclass of maintaining.",
  "miloA3041": "If AGRO is an instance of agriculture, then there is at least one GROWTH for which GROWTH is an instance of growth and GROWTH is a subprocess of AGRO for every AGRO.",
  "miloA3042": "Farm hand is an instance of occupational trade.",
  "miloA3043": "If P is an instance of agent and P has the attribute farm hand, then there is at least one F for which F is an instance of agriculture and P is the agent of F for every P.",
  "miloA3044": "Plumber is an instance of occupational trade.",
  "miloA3045": "Potter is an instance of occupational trade.",
  "miloA3046": "If H is an instance of agent and H has the attribute potter, then there is at least one M and P for which P is an instance of pottery and M is an instance of making and H is the agent of M and P is a result of M for every H.",
  "miloA3047": "Religious position is a subclass of position.",
  "miloA3048": "If O is an instance of organization and H is an instance of human and H holds the position of P in O and P is an instance of religious position, then O is an instance of religious organization for every H, P and O.",
  "miloA3049": "Cleric is an instance of profession.",
  "miloA3050": "Cleric is an instance of religious position.",
  "miloA3051": "Deacon is an instance of religious position.",
  "miloA3052": "Deacon is an instance of part time position.",
  "miloA3054": "Police officer is an instance of skilled occupation.",
  "miloA3055": "Police officer is an instance of government position.",
  "miloA3056": "If P is an instance of agent and P has the attribute police officer, then placing under arrest has the skill to do P for every P.",
  "miloA3057": "Police captain is a subattribute of police officer.",
  "miloA3058": "Police sergeant is a subattribute of police officer.",
  "miloA3059": "Sheriff is a subattribute of police officer.",
  "miloA3060": "Marshal is a subattribute of police officer.",
  "miloA3061": "Deputy is a subattribute of police officer.",
  "miloA3062": "Coroner is an instance of government position.",
  "miloA3063": "Police detective is a subattribute of police officer.",
  "miloA3064": "Private detective is an instance of profession.",
  "miloA3065": "Nothing can simultaneously be private detective and police detective.",
  "miloA3066": "Lawyer is an instance of profession.",
  "miloA3067": "Attorney is a subattribute of lawyer.",
  "miloA3068": "If P is an instance of human and P has the attribute lawyer, then P has the expertise to do field of law for every P.",
  "miloA3069": "Attorney general is a subattribute of attorney.",
  "miloA3070": "Attorney general is an instance of government position.",
  "miloA3071": "Public defender is a subattribute of attorney.",
  "miloA3072": "Public defender is an instance of government position.",
  "miloA3073": "Public prosecutor is a subattribute of attorney.",
  "miloA3074": "Public prosecutor is an instance of government position.",
  "miloA3075": "Judge is a subattribute of attorney.",
  "miloA3076": "Judge is an instance of government position.",
  "miloA3079": "Professor is a subattribute of teacher.",
  "miloA3081": "Medical doctor is an instance of profession.",
  "miloA3082": "If DOCTOR is an instance of object and DOCTOR has the attribute medical doctor, then there is at least one PROCESS1 and PROCESS2 for which PROCESS1 is a subclass of diagnostic process and PROCESS2 is a subclass of therapeutic process and DOCTOR is capable to do PROCESS1 in role the predicate agent and DOCTOR is capable to do PROCESS2 in role the predicate agent for every DOCTOR.",
  "miloA3083": "Surgeon is a subattribute of medical doctor.",
  "miloA3084": "Circumision is a subclass of removing.",
  "miloA3085": "Circumision is a subclass of surgery.",
  "miloA3086": "News reporter is an instance of profession.",
  "miloA3087": "If H is an instance of agent and H has the attribute news reporter, then there is at least one T and EV for which T is a subclass of text and EV is an instance of process and the time when EV takes place overlaps the time when H takes place and H is the author of T and T refers to EV for every H.",
  "miloA3088": "Art critic is a subattribute of journalist.",
  "miloA3089": "If H is an instance of agent and H has the attribute art critic, then there is at least one T and AW for which T is a subclass of text and AW is an instance of art work and H is the author of T and T refers to AW for every H.",
  "miloA3090": "Accountant is an instance of profession.",
  "miloA3091": "If X is an instance of object and X has the attribute accountant, then X is capable to do calculating in role the predicate agent for every X.",
  "miloA3092": "Literature is an instance of field of study.",
  "miloA3093": "Mathematics is an instance of field of study.",
  "miloA3094": "Interior design is an instance of field of study.",
  "miloA3095": "Science is a subclass of field of study.",
  "miloA3096": "Social science is a subclass of science.",
  "miloA3097": "Political science is an instance of social science.",
  "miloA3098": "Anthropology is an instance of social science.",
  "miloA3099": "Architecture is an instance of field of study.",
  "miloA3100": "If H is an instance of human and H has the expertise to do architecture, then there is at least one D, P and B for which D is an instance of content development and H is the agent of D and P is a result of D and P is an instance of blueprint and P represents B and B is an instance of building for every H.",
  "miloA3101": "Economics is an instance of social science.",
  "miloA3102": "Linguistics is an instance of social science.",
  "miloA3103": "Psychology is an instance of social science.",
  "miloA3104": "Biology is an instance of science.",
  "miloA3105": "Physiology is a sub-field of biology.",
  "miloA3106": "Physiology is an instance of science.",
  "miloA3107": "Medical science is a sub-field of biology.",
  "miloA3108": "Medical science is an instance of science.",
  "miloA3109": "Chemistry is an instance of science.",
  "miloA3110": "Physics is an instance of science.",
  "miloA3111": "Engineering is an instance of science.",
  "miloA3112": "Electronics is a sub-field of physics.",
  "miloA3113": "Electronics is a sub-field of engineering.",
  "miloA3114": "Electronics is an instance of field of study.",
  "miloA3115": "Theology is an instance of field of study.",
  "miloA3117": "Military science is an instance of field of study.",
  "miloA3118": "History is an instance of field of study.",
  "miloA3119": "Philosophy is an instance of field of study.",
  "miloA3120": "Field of law is an instance of field of study.",
  "miloA3121": "The predicate subField is a subrelation of the predicate subProposition.",
  "miloA3122": "The predicate subField is an instance of transitive relation.",
  "miloA3123": "The predicate subField is an instance of irreflexive relation.",
  "miloA3126": "The predicate hasExpertise is an instance of binary predicate.",
  "miloA3129": "If FIELD is an instance of field of study and PERSON is an instance of human and PERSON has the expertise to do FIELD, then there is at least one LEARN for which LEARN is an instance of learning and PERSON is the agent of LEARN and LEARN realizes the content of FIELD for every PERSON and FIELD.",
  "miloA3130": "The predicate hasOccupation is an instance of binary predicate.",
  "miloA3133": "If WORK is a subclass of intentional process and PERSON is an instance of human and PERSON has the occupation WORK, then there is at least one INST for which INST is an instance of WORK and INST is an instance of working and PERSON is the agent of INST for every WORK and PERSON.",
  "miloA3134": "Bleeding is a subclass of autonomic process.",
  "miloA3135": "If BLEED is an instance of bleeding, then there is at least one INJURY for which INJURY is an instance of injuring and INJURY causes BLEED for every BLEED.",
  "miloA3136": "If ANIMAL is an instance of agent and BLEED is an instance of bleeding and ANIMAL experiences BLEED, then ANIMAL is an instance of animal for every BLEED and ANIMAL.",
  "miloA3138": "Blushing is a subclass of autonomic process.",
  "miloA3140": "Aborting is a subclass of removing.",
  "miloA3142": "Closing contract is a subclass of committing.",
  "miloA3143": "If AGENT is an instance of cognitive agent and CONTRACT is an instance of agreement and CLOSE is an instance of closing contract and AGENT is the agent of CLOSE and CLOSE ends at CONTRACT, then AGENT is a party to the agreement CONTRACT for every CLOSE, AGENT and CONTRACT.",
  "miloA3144": "Opening is a subclass of motion.",
  "miloA3146": "Closing is a subclass of motion.",
  "miloA3147": "Diet is a subclass of plan.",
  "miloA3148": "If P is an instance of process and D is an instance of diet and P realizes the content of D, then there is at least one E for which E is a subprocess of P and E is an instance of eating for every D and P.",
  "miloA3149": "Prepared food is a subclass of object.",
  "miloA3151": "If X is an instance of prepared food, then there is at least one PROC for which PROC is an instance of intentional process and X is a result of PROC for every X.",
  "miloA3152": "Solid food is a subclass of prepared food.",
  "miloA3153": "If X is an instance of solid food, then there is at least one ING for which ING is an instance of object and ING is a part of X and ING has the attribute solid for every X.",
  "miloA3154": "Liquid food is a subclass of prepared food.",
  "miloA3155": "If X is an instance of liquid food, then ING is not an instance of object or ING is not a part of X or ING does not have the attribute solid for every ING for every X.",
  "miloA3156": "Beverage is a subclass of liquid food.",
  "miloA3157": "Beverage is a subclass of substance.",
  "miloA3158": "Meat is disjoint from beverage.",
  "miloA3159": "If BEV is an instance of beverage, then BEV has the attribute liquid for every BEV.",
  "miloA3160": "If DRINK is an instance of drinking and BEV is a participant in DRINK, then BEV is an instance of beverage for every DRINK and BEV.",
  "miloA3161": "Cooked attribute is an instance of relational attribute.",
  "miloA3162": "If FOOD is an instance of object and FOOD has the attribute cooked attribute, then there is at least one PROC for which PROC is an instance of cooking and FOOD is a result of PROC for every FOOD.",
  "miloA3163": "Raw attribute is an instance of relational attribute.",
  "miloA3165": "If FOOD is an instance of object and FOOD has the attribute raw attribute, then PROC is not an instance of process or PROC is not an instance of cooking or FOOD is not a result of PROC for every PROC for every FOOD.",
  "miloA3166": "Baking is a subclass of cooking.",
  "miloA3167": "Baking is a subclass of heating.",
  "miloA3168": "If B is an instance of baking, then there is at least one O for which O is an instance of oven and O is an instrument for B for every B.",
  "miloA3169": "Bread or biscuit is a subclass of prepared food.",
  "miloA3170": "If B is an instance of bread or biscuit, then there is at least one D and BAKE for which D is an instance of dough and BAKE is an instance of baking and D is a resource for BAKE and B is a result of BAKE for every B.",
  "miloA3171": "Sandwich is a subclass of prepared food.",
  "miloA3173": "Dough is a subclass of prepared food.",
  "miloA3174": "Dough is a subclass of mixture.",
  "miloA3175": "If D is an instance of dough, then there is at least one F and W for which F is an instance of flour and W is an instance of water and F is a part of D and W is a part of D for every D.",
  "miloA3176": "Butter is a subclass of prepared food.",
  "miloA3177": "If B is an instance of butter, then there is at least one C and M for which C is an instance of cooking and M is a resource for C and M is an instance of milk and B is a result of C for every B.",
  "miloA3178": "Cereal grain is a subclass of seed.",
  "miloA3179": "Rice grain is a subclass of cereal grain.",
  "miloA3180": "Wheat grain is a subclass of cereal grain.",
  "miloA3181": "Pea is a subclass of seed.",
  "miloA3183": "Flour is a subclass of prepared food.",
  "miloA3184": "Flour is a subclass of powder.",
  "miloA3185": "If F is an instance of flour, then there is at least one P and C for which P is an instance of intentional process and C is a resource for P and C is an instance of cereal grain and F is a result of P for every F.",
  "miloA3186": "Honey is a subclass of animal substance.",
  "miloA3188": "If H is an instance of honey, then there is at least one P and B for which P is an instance of physiologic process and B is the agent of P and B is an instance of bee and H is a result of P for every H.",
  "miloA3189": "Coconut is a subclass of fruit or vegetable.",
  "miloA3191": "Maize grain is a subclass of cereal grain.",
  "miloA3192": "Soup stock is a subclass of prepared food.",
  "miloA3193": "Coffee is a subclass of beverage.",
  "miloA3194": "Coffee is a subclass of prepared food.",
  "miloA3195": "Apple is a subclass of fruit or vegetable.",
  "miloA3197": "Date fruit is a subclass of fruit or vegetable.",
  "miloA3199": "Pear fruit is a subclass of fruit or vegetable.",
  "miloA3201": "Avocado is a subclass of fruit or vegetable.",
  "miloA3203": "Ion is a subclass of pure substance.",
  "miloA3204": "Free atom is a subclass of atom.",
  "miloA3205": "If A is an instance of free atom, then M is not an instance of object or M is not an instance of molecule or A is not a part of M for every M for every A.",
  "miloA3206": "The predicate protonNumber is an instance of binary predicate.",
  "miloA3207": "The predicate protonNumber is an instance of single valued relation.",
  "miloA3208": "The predicate protonNumber is an instance of total valued relation.",
  "miloA3212": "The predicate electronNumber is an instance of binary predicate.",
  "miloA3213": "The predicate electronNumber is an instance of single valued relation.",
  "miloA3214": "The predicate electronNumber is an instance of total valued relation.",
  "miloA3218": "Atomic group is a subclass of compound substance.",
  "miloA3219": "If G is an instance of atomic group, then there is at least one ATOM1 and ATOM2 for which ATOM1 is an instance of atom and ATOM2 is an instance of atom and ATOM1 is not equal to ATOM2 and ATOM1 is a part of G and ATOM2 is a part of G for every G.",
  "miloA3220": "If G is an instance of atomic group, then there is at least one M for which M is an instance of molecule and G is a part of M for every G.",
  "miloA3221": "Ambush is a subclass of maneuver.",
  "miloA3223": "Blockade is a subclass of maneuver.",
  "miloA3225": "Military maneuver is a subclass of maneuver.",
  "miloA3226": "If M is an instance of military maneuver, then there is at least one B for which B is an instance of battle and M is a subprocess of B for every M.",
  "miloA3227": "Fire is a subclass of combustion.",
  "miloA3228": "Arson is a subclass of fire.",
  "miloA3229": "Arson is a subclass of destruction.",
  "miloA3230": "Bombing is a subclass of destruction.",
  "miloA3231": "Bomb is a subclass of weapon.",
  "miloA3232": "Bomb is a subclass of explosive device.",
  "miloA3233": "If X is an instance of bombing, then there is at least one BOMB for which BOMB is an instance of bomb and BOMB is an instrument for X for every X.",
  "miloA3234": "Car bombing is a subclass of bombing.",
  "miloA3235": "If X is an instance of car bombing, then there is at least one BOMB and CAR for which BOMB is an instance of bomb and CAR is an instance of transportation device and CAR is an instrument for X and BOMB is an instrument for X and CAR is connected to BOMB for every X.",
  "miloA3236": "Chemical attack is a subclass of violent contest.",
  "miloA3237": "If X is an instance of chemical attack, then there is at least one CHEM for which CHEM is an instance of substance and CHEM is an instrument for X for every X.",
  "miloA3238": "Handgrenade attack is a subclass of bombing.",
  "miloA3239": "Hand grenade is a subclass of bomb.",
  "miloA3240": "If X is an instance of hand grenade, then there is at least one N for which N is an instance of real number and X is measured by N measured in pound mass and N is less than 10 for every X.",
  "miloA3241": "If X is an instance of handgrenade attack, then there is at least one HG for which HG is an instance of hand grenade and HG is an instrument for X for every X.",
  "miloA3242": "Hijacking is a subclass of robbing.",
  "miloA3243": "If H is an instance of hijacking, then there is at least one V for which V is an instance of vehicle and V is a participant in H for every H.",
  "miloA3244": "If H is an instance of hijacking, then there is at least one D for which D is a subprocess of H and D is an instance of driving for every H.",
  "miloA3246": "Hostage taking is a subclass of unilateral getting.",
  "miloA3247": "If X is an instance of hostage taking, then there is at least one A for which A is an instance of sentient agent and A is a participant in X for every X.",
  "miloA3248": "Incendiary device attack is a subclass of combustion.",
  "miloA3249": "Incendiary device attack is a subclass of violent contest.",
  "miloA3250": "Infiltration is a subclass of joining an organization.",
  "miloA3251": "Kidnapping is a subclass of robbing.",
  "miloA3252": "If N is an instance of integer and X is an instance of kidnapping and G is an instance of group of people and there is a total N of members in G and G is a participant in X, then N is less than 3 for every X, G and N.",
  "miloA3254": "Knife attack is a subclass of violent contest.",
  "miloA3255": "Knife is a subclass of cutting device.",
  "miloA3256": "Cutting device is a subclass of device.",
  "miloA3258": "If X is an instance of knife attack, then there is at least one HG for which HG is an instance of knife and HG is an instrument for X for every X.",
  "miloA3259": "Blade is a subclass of cutting device.",
  "miloA3260": "If B is an instance of blade, then there is at least one CD for which CD is an instance of cutting device and B is a part of CD for every B.",
  "miloA3261": "If B is an instance of blade and CUT is an instance of cutting and OBJ is an instance of object and B is an instrument for CUT and OBJ is a participant in CUT and B is not equal to OBJ, then B meets OBJ for every CUT, B and OBJ.",
  "miloA3262": "Letter bomb attack is a subclass of bombing.",
  "miloA3263": "Lynching is a subclass of killing.",
  "miloA3264": "Mortar attack is a subclass of bombing.",
  "miloA3265": "Mortar is a subclass of weapon.",
  "miloA3266": "If X is an instance of mortar attack, then there is at least one MA for which MA is an instance of mortar and MA is an instrument for X for every X.",
  "miloA3267": "Rocket missile attack is a subclass of bombing.",
  "miloA3268": "Rocket is a subclass of projectile.",
  "miloA3269": "Stoning is a subclass of violent contest.",
  "miloA3270": "If X is an instance of stoning, then there is at least one ST for which ST is an instance of rock and ST is an instrument for X for every X.",
  "miloA3271": "Suicide bombing is a subclass of bombing.",
  "miloA3272": "Suicide bombing is a subclass of killing.",
  "miloA3275": "Vandalism is a subclass of destruction.",
  "miloA3276": "If X is an instance of vandalism, then A is not an instance of agent or A is not a participant in X for every A for every X.",
  "miloA3277": "Vehicle attack is a subclass of violent contest.",
  "miloA3278": "If X is an instance of vehicle attack, then there is at least one V for which V is an instance of transportation device and V is an instrument for X for every X.",
  "miloA3279": "Business person is an instance of occupational role.",
  "miloA3280": "Business executive is a subattribute of business person.",
  "miloA3281": "If X is an instance of agent and X has the attribute business executive, then there is at least one BUSINESS and MANAGE for which MANAGE is an instance of managing and BUSINESS is an instance of organization and BUSINESS is a participant in MANAGE and X is the agent of MANAGE for every X.",
  "miloA3282": "Celebrity is an instance of social role.",
  "miloA3284": "Knight is an instance of social role.",
  "miloA3285": "Musician is an instance of social role.",
  "miloA3286": "If X is an instance of agent and X has the attribute musician, then musical performance has the skill to do X for every X.",
  "miloA3287": "Veteran is an instance of social role.",
  "miloA3289": "Road is a subclass of region.",
  "miloA3290": "Road is a subclass of roadway.",
  "miloA3292": "Nothing can simultaneously be civilian and military person.",
  "miloA3293": "Occupational role is a subclass of position.",
  "miloA3294": "Civilian is an instance of social role.",
  "miloA3296": "Widowed is an instance of social role.",
  "miloA3298": "Convoy is a subclass of collection.",
  "miloA3300": "If VEH is an instance of self connected object and C is an instance of convoy and VEH is a member of C, then there is at least one DRIVE for which DRIVE is an instance of driving and the time when DRIVE takes place overlaps the time when C takes place and VEH is a participant in DRIVE for every C and VEH.",
  "miloA3301": "If C is an instance of convoy, then C has the attribute line formation for every C.",
  "miloA3302": "Diplomat is an instance of occupational role.",
  "miloA3303": "Diplomat is a subattribute of government person.",
  "miloA3304": "Dissident is an instance of social role.",
  "miloA3305": "Embassy building is a subclass of government building.",
  "miloA3306": "If X is an instance of embassy building, then there is at least one EGOV and OTHERGOV for which EGOV is an instance of nation and OTHERGOV is an instance of nation and EGOV is not equal to OTHERGOV and EGOV possesses X and X is located at OTHERGOV for every X.",
  "miloA3307": "Entertainment building is a subclass of building.",
  "miloA3309": "Government building is a subclass of building.",
  "miloA3310": "If X is an instance of government building, then there is at least one G for which G is an instance of government and G possesses X for every X.",
  "miloA3311": "Government person is an instance of occupational role.",
  "miloA3313": "Renting is a subclass of financial transaction.",
  "miloA3314": "Renting is a subclass of borrowing.",
  "miloA3316": "Marketplace is a subclass of geographic area.",
  "miloA3318": "Store owner is an instance of occupational role.",
  "miloA3319": "Store owner is a subattribute of business person.",
  "miloA3320": "Militant is an instance of social role.",
  "miloA3321": "Military person is an instance of occupational role.",
  "miloA3324": "Office building is a subclass of building.",
  "miloA3325": "Peace keeping mission is a subclass of military organization.",
  "miloA3326": "Place of worship is a subclass of building.",
  "miloA3328": "Police facility is a subclass of building.",
  "miloA3329": "Police person is an instance of occupational role.",
  "miloA3330": "Police person is a subattribute of government person.",
  "miloA3331": "Political figure is a subattribute of celebrity.",
  "miloA3332": "If X is an instance of agent and X has the attribute political figure, then there is at least one EV for which X is the agent of EV and EV is an instance of political process for every X.",
  "miloA3334": "Religious figure is a subattribute of celebrity.",
  "miloA3335": "Restaurant building is a subclass of building.",
  "miloA3337": "Educational facility is a subclass of stationary artifact.",
  "miloA3338": "If X is an instance of educational facility, then there is at least one ORG for which ORG is an instance of educational organization and ORG possesses X for every X.",
  "miloA3340": "Student is an instance of social role.",
  "miloA3341": "If X is an instance of object and X has the attribute student, then there is at least one EV for which EV is an instance of educational process and X is a participant in EV for every X.",
  "miloA3342": "Subway is a subclass of hole.",
  "miloA3345": "Tourist is an instance of social role.",
  "miloA3346": "Tourist site is a subclass of geographic area.",
  "miloA3347": "Terrorist organization is a subclass of political organization.",
  "miloA3348": "If X is an instance of terrorist organization, then there is at least one EV for which EV is an instance of violent contest and X is the agent of EV for every X.",
  "miloA3349": "The predicate memberCount is an instance of binary predicate.",
  "miloA3353": "The predicate memberType is an instance of binary predicate.",
  "miloA3356": "If TYPE is an instance of set or class and GROUP is an instance of collection and MEMBER is an instance of self connected object and the members of GROUP belong to the class TYPE and MEMBER is a member of GROUP, then MEMBER is an instance of TYPE for every GROUP, MEMBER and TYPE.",
  "miloA3357": "The predicate memberTypeCount is an instance of ternary predicate.",
  "miloA3361": "If NUMBER is an instance of nonnegative integer and TYPE is an instance of set or class and GROUP is an instance of collection and GROUP has NUMBER members of the kind TYPE and NUMBER is greater than 0, then there is at least one SUBGROUP for which SUBGROUP is an instance of collection and SUBGROUP is a proper sub-collection of GROUP and there is a total NUMBER of members in SUBGROUP and the members of SUBGROUP belong to the class TYPE for every GROUP, NUMBER and TYPE.",
  "miloA3362": "If NUMBER1 is an instance of integer and GROUP is an instance of collection and NUMBER2 is an instance of nonnegative integer and TYPE is an instance of set or class and there is a total NUMBER1 of members in GROUP and GROUP has NUMBER2 members of the kind TYPE, then NUMBER1 is greater than or equal to NUMBER2 for every GROUP, TYPE, NUMBER1 and NUMBER2.",
  "miloA3363": "If NUMBER is an instance of nonnegative integer and TYPE is an instance of set or class and GROUP is an instance of collection and GROUP has NUMBER members of the kind TYPE and NUMBER is equal to 0, then ITEM is not an instance of self connected object or ITEM is not an instance of TYPE or ITEM is not a member of GROUP for every ITEM for every NUMBER, TYPE and GROUP.",
  "miloA3364": "The predicate memberAtTime is an instance of ternary predicate.",
  "miloA3369": "If PLACE is an instance of object and TIME is an instance of time position and COLLECTION is an instance of collection and OBJ is an instance of self connected object and COLLECTION is at PLACE during TIME and OBJ is a member of COLLECTION dureing the time period TIME, then OBJ is at PLACE during TIME for every COLLECTION, OBJ, TIME and PLACE.",
  "miloA3370": "The predicate inventory is an instance of binary predicate.",
  "miloA3373": "If C is an instance of collection and O is an instance of content bearing object and I is an instance of self connected object and O has C in its inventory and I is a member of C, then O refers to I for every C, O and I.",
  "miloA3374": "The predicate subordinateInOrganization is an instance of ternary predicate.",
  "miloA3378": "If PERSON2 is an instance of human and PERSON1 is an instance of human and ORG is an instance of organization and PERSON1 is subordinate to PERSON2 in organization ORG, then ORG employs PERSON1 for every PERSON2, ORG and PERSON1.",
  "miloA3379": "If PERSON2 is an instance of human and PERSON1 is an instance of human and ORG is an instance of organization and PERSON1 is subordinate to PERSON2 in organization ORG, then ORG employs PERSON2 for every PERSON1, ORG and PERSON2.",
  "miloA3380": "The predicate subordinatePosition is an instance of ternary predicate.",
  "miloA3384": "If ROLE2 is an instance of position and ROLE1 is an instance of position and ORG is an instance of organization and PERSON1 is an instance of human and the role ROLE1 is subordinate to the role ROLE2 in the organization ORG and PERSON1 holds the position of ROLE1 in ORG, then there is at least one PERSON2 for which PERSON2 is an instance of human and PERSON2 holds the position of ROLE2 in ORG and PERSON1 is subordinate to PERSON2 in organization ORG for every ROLE1, ROLE2, ORG and PERSON1.",
  "miloA3385": "The predicate operator is an instance of binary predicate.",
  "miloA3386": "The predicate operator is an instance of asymmetric relation.",
  "miloA3387": "The predicate operator is an instance of irreflexive relation.",
  "miloA3390": "Classification scheme is a subclass of proposition.",
  "miloA3391": "Taxonomy is a subclass of classification scheme.",
  "miloA3392": "The predicate abstractPart is an instance of partial ordering relation.",
  "miloA3395": "Ontology is a subclass of classification scheme.",
  "miloA3396": "If ONT is an instance of ontology, then there is at least one TAX for which TAX is an instance of taxonomy and TAX is an abstract part of ONT for every ONT.",
  "miloA3397": "The predicate transported is an instance of binary predicate.",
  "miloA3398": "The predicate transported is an instance of asymmetric relation.",
  "miloA3401": "The predicate transported is a subrelation of the predicate patient.",
  "miloA3402": "The predicate cargo is an instance of binary predicate.",
  "miloA3403": "The predicate cargo is an instance of asymmetric relation.",
  "miloA3406": "The predicate cargo is a subrelation of the predicate transported.",
  "miloA3407": "The predicate serviceProvider is an instance of binary predicate.",
  "miloA3408": "The predicate serviceProvider is an instance of asymmetric relation.",
  "miloA3409": "The predicate serviceProvider is an instance of intentional relation.",
  "miloA3412": "The predicate serviceProvider is a subrelation of the predicate agent.",
  "miloA3413": "The predicate serviceRecipient is an instance of binary predicate.",
  "miloA3414": "The predicate serviceRecipient is an instance of asymmetric relation.",
  "miloA3415": "The predicate serviceRecipient is an instance of intentional relation.",
  "miloA3418": "The predicate serviceRecipient is a subrelation of the predicate experiencer.",
  "miloA3419": "If EVENT is an instance of service process, then there is at least one PROVIDER for which PROVIDER is an instance of cognitive agent and PROVIDER is the supplier of the service provided in EVENT for every EVENT.",
  "miloA3420": "If EVENT is an instance of service process, then there is at least one RECEIVER for which RECEIVER is an instance of cognitive agent and RECEIVER is the receiver of the service provided in EVENT for every EVENT.",
  "miloA3421": "The predicate benefits is an instance of binary predicate.",
  "miloA3422": "The predicate benefits is an instance of asymmetric relation.",
  "miloA3425": "If PROCESS is an instance of process and PROCESSSTART is an instance of time point and AGENT is an instance of agent and AGENTEND is an instance of time point and PROCESSSTART is equal to the beginning of the interval the time when PROCESS takes place and AGENTEND is equal to the end of the interval the time when AGENT takes place and PROCESS benefits AGENT, then PROCESSSTART occurs before AGENTEND for every PROCESS, AGENT, PROCESSSTART and AGENTEND.",
  "miloA3426": "The predicate areaOfResponsibility is an instance of ternary predicate.",
  "miloA3430": "The predicate friend is an instance of binary predicate.",
  "miloA3431": "The predicate friend is an instance of symmetric relation.",
  "miloA3432": "The predicate friend is an instance of intentional relation.",
  "miloA3435": "The predicate friend is a subrelation of the predicate mutualAcquaintance.",
  "miloA3436": "The predicate coworker is an instance of binary predicate.",
  "miloA3437": "The predicate coworker is an instance of symmetric relation.",
  "miloA3440": "The predicate coworker is a subrelation of the predicate mutualAcquaintance.",
  "miloA3442": "The predicate cohabitant is an instance of binary predicate.",
  "miloA3443": "The predicate cohabitant is an instance of symmetric relation.",
  "miloA3444": "The predicate cohabitant is an instance of intentional relation.",
  "miloA3447": "The predicate cohabitant is a subrelation of the predicate mutualAcquaintance.",
  "miloA3450": "The predicate grandparent is an instance of binary predicate.",
  "miloA3451": "The predicate grandparent is an instance of asymmetric relation.",
  "miloA3454": "The predicate grandmother is a subrelation of the predicate grandparent.",
  "miloA3455": "The predicate grandfather is a subrelation of the predicate grandparent.",
  "miloA3456": "The predicate grandparent is a subrelation of the predicate ancestor.",
  "miloA3457": "If CHILD is an instance of organism and CHILD is a parent of PARENT and PARENT is an instance of man, then CHILD is the father of PARENT for every CHILD and PARENT.",
  "miloA3458": "If PARENT is an instance of organism and CHILD is a parent of PARENT and CHILD is an instance of man, then CHILD is the son of PARENT for every CHILD and PARENT.",
  "miloA3459": "If PARENT is an instance of organism and CHILD is a parent of PARENT and CHILD is an instance of woman, then CHILD is the daughter of PARENT for every CHILD and PARENT.",
  "miloA3462": "The predicate aunt is a subrelation of the predicate familyRelation.",
  "miloA3463": "If H is an instance of human and A is an instance of woman, then there is at least one P for which P is an instance of human and A is the sister of P and H is a parent of P if and only if A is the aunt of H for every A and H.",
  "miloA3466": "The predicate cousin is a subrelation of the predicate familyRelation.",
  "miloA3467": "If P2 is an instance of human and P1 is an instance of human, then there is at least one G1 and G2 for which G1 is an instance of woman and G2 is an instance of man and P1 is the grandmother of G1 and P1 is the grandfather of G2 and P2 is the grandmother of G1 and P2 is the grandfather of G2 and M is not an instance of organism or F is not an instance of organism or P1 is not the mother of M or P1 is not the father of F or P2 is not the mother of M or P2 is not the father of F for every M and F if and only if P1 is the cousin of P2 for every P1 and P2.",
  "miloA3470": "The predicate grandfather is a subrelation of the predicate familyRelation.",
  "miloA3471": "If P is an instance of man and H is an instance of human and H is the grandfather of P, then there is at least one C for which C is an instance of organism and C is the father of P and H is a parent of C for every P and H.",
  "miloA3474": "The predicate grandmother is a subrelation of the predicate familyRelation.",
  "miloA3475": "If P is an instance of woman and H is an instance of human and H is the grandmother of P, then there is at least one C for which C is an instance of organism and C is the mother of P and H is a parent of C for every P and H.",
  "miloA3478": "The predicate nephew is a subrelation of the predicate familyRelation.",
  "miloA3479": "If H is an instance of human and N is an instance of man, then there is at least one S for which S is an instance of organism and S is the sibling of H and N is the son of S if and only if N is the nephew of H for every H and N.",
  "miloA3482": "The predicate niece is a subrelation of the predicate familyRelation.",
  "miloA3483": "If H is an instance of human and N is an instance of woman, then there is at least one S for which S is an instance of organism and S is the sibling of H and N is the daughter of S if and only if N is the niece of H for every H and N.",
  "miloA3486": "The predicate uncle is a subrelation of the predicate familyRelation.",
  "miloA3487": "If H is an instance of human and U is an instance of man, then there is at least one P for which P is an instance of human and U is the brother of P and H is a parent of P if and only if U is the uncle of H for every U and H.",
  "miloA3490": "The predicate stepfather is a subrelation of the predicate legalRelation.",
  "miloA3491": "If F is an instance of man and P is an instance of human, then there is at least one M for which M is an instance of human and P is the mother of M and F is the spouse of M and P is not the father of F if and only if P is the stepfather of F for every P and F.",
  "miloA3494": "The predicate stepmother is a subrelation of the predicate legalRelation.",
  "miloA3495": "If M is an instance of woman and P is an instance of human, then there is at least one F for which F is an instance of human and P is the father of F and M is the spouse of F and P is not the mother of M if and only if P is the stepmother of M for every P and M.",
  "miloA3496": "Nuclear family is a subclass of family group.",
  "miloA3497": "Nuclear family is a subclass of social unit.",
  "miloA3499": "The predicate alias is an instance of binary predicate.",
  "miloA3500": "The predicate alias is an instance of asymmetric relation.",
  "miloA3503": "The predicate alias is a subrelation of the predicate names.",
  "miloA3504": "The predicate workAddress is an instance of binary predicate.",
  "miloA3505": "The predicate workAddress is an instance of asymmetric relation.",
  "miloA3506": "The predicate workAddress is a subrelation of the predicate postContactSite.",
  "miloA3509": "The predicate homeAddress is an instance of binary predicate.",
  "miloA3510": "The predicate homeAddress is an instance of asymmetric relation.",
  "miloA3513": "The predicate homeAddress is a subrelation of the predicate postContactSite.",
  "miloA3514": "The predicate playsRoleInEvent is an instance of ternary predicate.",
  "miloA3518": "If EVENT is an instance of process and ROLE is an instance of case role and OBJ is an instance of object and OBJ plays the role ROLE in the process EVENT, then ROLE holds with the arguments EVENT and OBJ for every ROLE, EVENT and OBJ.",
  "miloA3519": "If EVENT is an instance of process and ROLE is an instance of case role and OBJ is an instance of object and ROLE2 is an instance of case role and OBJ plays the role ROLE in the process EVENT and ROLE is a subrelation of ROLE2, then OBJ plays the role ROLE2 in the process EVENT for every ROLE, OBJ, ROLE2 and EVENT.",
  "miloA3520": "If ROLE holds with the arguments EVENT and OBJ and ROLE is an instance of case role and EVENT is an instance of process and OBJ is an instance of object, then OBJ plays the role ROLE in the process EVENT for every OBJ, ROLE and EVENT.",
  "miloA3521": "If EVENT is an instance of process and ROLE is an instance of case role and OBJ is an instance of object and TIME is an instance of time position and PLACE is an instance of object and OBJ plays the role ROLE in the process EVENT and EVENT is an instance of CLASS and CLASS is a subclass of process and EVENT exists during TIME and the entire process EVENT is located on PLACE, then OBJ plays the role ROLE in CLASS, which occurs at TIME and PLACE for every EVENT, OBJ, ROLE, CLASS, TIME and PLACE.",
  "miloA3522": "The predicate playsRoleInEventOfType is an instance of quintary predicate.",
  "miloA3528": "If PLACE is an instance of object and TIME is an instance of time position and TYPE is a subclass of process and ROLE is an instance of case role and OBJ is an instance of object and OBJ plays the role ROLE in TYPE, which occurs at TIME and PLACE, then there is at least one EVENT for which EVENT is an instance of process and EVENT is an instance of TYPE and EVENT exists during TIME and the entire process EVENT is located on PLACE and OBJ plays the role ROLE in the process EVENT for every TYPE, TIME, PLACE, OBJ and ROLE.",
  "miloA3529": "If EVENT is an instance of process and ROLE is an instance of case role and OBJ is an instance of object and TIME is an instance of time position and PLACE is an instance of object and OBJ plays the role ROLE in the process EVENT and EVENT is an instance of TYPE and TYPE is a subclass of process and EVENT exists during TIME and the entire process EVENT is located on PLACE, then OBJ plays the role ROLE in TYPE, which occurs at TIME and PLACE for every EVENT, OBJ, ROLE, TYPE, TIME and PLACE.",
  "miloA3530": "The predicate locatedAtTime is an instance of ternary predicate.",
  "miloA3535": "If EVENT is an instance of process and ROLE is an instance of case role and OBJ is an instance of object and TIME is an instance of time position and PLACE is an instance of object and OBJ plays the role ROLE in the process EVENT and EVENT exists during TIME and the entire process EVENT is located on PLACE, then OBJ is at PLACE during TIME for every ROLE, EVENT, OBJ, TIME and PLACE.",
  "miloA3536": "The predicate deceptiveIdentifier is an instance of binary predicate.",
  "miloA3537": "The predicate deceptiveIdentifier is an instance of asymmetric relation.",
  "miloA3540": "The predicate deceptiveIdentifier is a subrelation of the predicate refers.",
  "miloA3541": "The predicate alias is a subrelation of the predicate deceptiveIdentifier.",
  "miloA3542": "The predicate stranger is an instance of binary predicate.",
  "miloA3545": "The predicate stranger and the predicate acquaintance are disjoint.",
  "miloA3546": "The predicate mutualStranger is an instance of binary predicate.",
  "miloA3547": "The predicate mutualStranger is an instance of symmetric relation.",
  "miloA3550": "The predicate mutualStranger is a subrelation of the predicate stranger.",
  "miloA3551": "The predicate mutualStranger and the predicate mutualAcquaintance are disjoint.",
  "miloA3552": "The predicate domesticPartner is an instance of binary predicate.",
  "miloA3553": "The predicate domesticPartner is an instance of symmetric relation.",
  "miloA3554": "The predicate domesticPartner is an instance of intentional relation.",
  "miloA3557": "The predicate spouse and the predicate domesticPartner are disjoint.",
  "miloA3558": "The predicate domesticPartner is a subrelation of the predicate cohabitant.",
  "miloA3559": "The predicate legalGuardian is an instance of binary predicate.",
  "miloA3560": "The predicate legalGuardian is an instance of antisymmetric relation.",
  "miloA3563": "If PLACE is an instance of geographic area and TIME is an instance of time position and OBJ is an instance of object and REGION is an instance of geographic area and OBJ is at PLACE during TIME and PLACE is a geographic subregion of REGION, then OBJ is at REGION during TIME for every PLACE, OBJ, TIME and REGION.",
  "miloA3564": "Seating is a subclass of guiding.",
  "miloA3565": "If S is an instance of seating, then there is at least one P and H for which H experiences S and H is an instance of human and S ends at P and P is an instance of seat for every S.",
  "miloA3566": "Signalling is a subclass of guiding.",
  "miloA3567": "Achieving control is a subclass of guiding.",
  "miloA3568": "The predicate controlled is an instance of case role.",
  "miloA3569": "The predicate controlled is a subrelation of the predicate patient.",
  "miloA3572": "The predicate gainsControl is an instance of case role.",
  "miloA3573": "The predicate gainsControl is a subrelation of the predicate agent.",
  "miloA3576": "Change of control is a subclass of achieving control.",
  "miloA3577": "The predicate losesControl is an instance of case role.",
  "miloA3578": "The predicate losesControl is a subrelation of the predicate experiencer.",
  "miloA3581": "Capturing is a subclass of change of control.",
  "miloA3582": "If OBJ is an instance of object and CAPTURE is an instance of capturing and OBJ is controlled by CAPTURE, then OBJ is an instance of agent for every CAPTURE and OBJ.",
  "miloA3583": "Placing under arrest is a subclass of capturing.",
  "miloA3584": "Placing under arrest is a subclass of law enforcement.",
  "miloA3585": "Placing under arrest is a subclass of social interaction.",
  "miloA3586": "Placing under arrest is a subclass of legal action.",
  "miloA3587": "The predicate arrested is an instance of case role.",
  "miloA3590": "The predicate arrested is a subrelation of the predicate controlled.",
  "miloA3591": "If AGENT is an instance of agent and ARREST is an instance of placing under arrest and AGENT is the agent of ARREST, then AGENT is an instance of cognitive agent for every ARREST and AGENT.",
  "miloA3592": "If OBJ is an instance of agent and ARREST is an instance of placing under arrest and ARREST is arrested by OBJ, then OBJ is an instance of human or OBJ is an instance of group of people for every ARREST and OBJ.",
  "miloA3593": "If MEMBER is an instance of self connected object and MEMBER is an instance of agent and ARREST is an instance of placing under arrest and ARREST is arrested by AGENT and AGENT is an instance of group of people and MEMBER is a member of AGENT, then there is at least one ARREST1 for which ARREST1 is an instance of placing under arrest and ARREST1 is arrested by MEMBER and ARREST1 is a subprocess of ARREST for every AGENT, MEMBER and ARREST.",
  "miloA3594": "If LOC is an instance of object and SUB is an instance of process and PROC is an instance of process and the entire process PROC is located on LOC and SUB is a subprocess of PROC, then the entire process SUB is located on LOC for every PROC, SUB and LOC.",
  "miloA3595": "If IMPRISON is an instance of imprisoning and AGENT is detained by IMPRISON and AGENT is an instance of human and IMPRISON exists during INTERVAL and INTERVAL is an instance of time interval, then there is at least one ARREST and TIME for which TIME is an instance of time interval and ARREST exists during TIME and TIME occurs earlier than INTERVAL and ARREST is an instance of placing under arrest and ARREST is arrested by AGENT for every IMPRISON, INTERVAL and AGENT.",
  "miloA3596": "The predicate conveyance is an instance of case role.",
  "miloA3597": "The predicate conveyance is a subrelation of the predicate instrument.",
  "miloA3600": "If TRANSPORT is an instance of transportation and VEHICLE is an instrument for TRANSPORT and VEHICLE is an instance of road vehicle, then TRANSPORT is an instance of transport via road vehicle for every VEHICLE and TRANSPORT.",
  "miloA3601": "If VEHICLE is an instance of transportation device and TRANSPORT is an instance of transport via road vehicle and VEHICLE is the transportation device used in TRANSPORT, then VEHICLE is an instance of road vehicle for every TRANSPORT and VEHICLE.",
  "miloA3602": "If TRANSPORT is an instance of transport via road vehicle, then there is at least one DRIVING for which DRIVING is an instance of driving and TRANSPORT is a subprocess of DRIVING for every TRANSPORT.",
  "miloA3603": "If TRANSPORT is an instance of transportation and TRANSPORT is a subprocess of DRIVE and DRIVE is an instance of driving and VEHICLE is an instrument for TRANSPORT and VEHICLE is an instance of transportation device, then VEHICLE is a participant in DRIVE for every TRANSPORT, DRIVE and VEHICLE.",
  "miloA3604": "If DRIVE is an instance of driving and VEHICLE is a participant in DRIVE and VEHICLE is an instance of road vehicle, then there is at least one TRANSPORT for which TRANSPORT is an instance of transport via road vehicle and TRANSPORT is a subprocess of DRIVE for every VEHICLE and DRIVE.",
  "miloA3605": "If DRIVER is an instance of agent and DRIVING is an instance of driving and TRANSPORT is a subprocess of DRIVING and TRANSPORT is an instance of transportation and DRIVER is the agent of DRIVING, then TRANSPORT is transported by DRIVER for every DRIVING, TRANSPORT and DRIVER.",
  "miloA3606": "If DRIVING is an instance of driving and TRANSPORT is a subprocess of DRIVING and TRANSPORT is an instance of transportation and DRIVING ends at DEST, then TRANSPORT ends at DEST for every DRIVING, TRANSPORT and DEST.",
  "miloA3607": "If DRIVING is an instance of driving and TRANSPORT is a subprocess of DRIVING and TRANSPORT is an instance of transportation and VEHICLE is an instance of vehicle and VEHICLE is a participant in DRIVING, then VEHICLE is the transportation device used in TRANSPORT for every DRIVING, TRANSPORT and VEHICLE.",
  "miloA3608": "Gasoline engine is a subclass of internal combustion engine.",
  "miloA3610": "Diesel engine is a subclass of internal combustion engine.",
  "miloA3612": "The predicate typicalPart is an instance of binary predicate.",
  "miloA3613": "The predicate typicalPart is an instance of spatial relation.",
  "miloA3614": "The predicate typicalPart is internally related to the predicate part.",
  "miloA3617": "If WHOLE is a subclass of object and PART is a subclass of object and PART is a typical part of , then there is at least one X and Y for which X is an instance of object and Y is an instance of object and X is an instance of WHOLE and Y is an instance of PART and Y is a part of X for every WHOLE and PART.",
  "miloA3619": "The predicate typicallyContainsPart is an instance of binary predicate.",
  "miloA3620": "The predicate typicallyContainsPart is an instance of spatial relation.",
  "miloA3621": "The predicate typicallyContainsPart is internally related to the predicate part.",
  "miloA3624": "If WHOLE is a subclass of object and PART is a subclass of object and WHOLE typically contains PART, then there is at least one X and Y for which X is an instance of object and Y is an instance of object and X is an instance of WHOLE and Y is an instance of PART and Y is a part of X for every WHOLE and PART.",
  "miloA3626": "The predicate initialPart is an instance of binary predicate.",
  "miloA3627": "The predicate initialPart is an instance of spatial relation.",
  "miloA3628": "The predicate initialPart is internally related to the predicate part.",
  "miloA3632": "Animal anatomical structure is an initial part of animal.",
  "miloA3633": "The predicate initiallyContainsPart is an instance of binary predicate.",
  "miloA3634": "The predicate initiallyContainsPart is an instance of spatial relation.",
  "miloA3635": "The predicate initiallyContainsPart is internally related to the predicate part.",
  "miloA3639": "Causing happiness is a subclass of process.",
  "miloA3641": "Causing pain is a subclass of causing unhappiness.",
  "miloA3642": "Causing unhappiness is a subclass of process.",
  "miloA3644": "Lengthening is a subclass of increasing.",
  "miloA3646": "Saving is a subclass of increasing.",
  "miloA3650": "The predicate financialAsset is a subrelation of the predicate possesses.",
  "miloA3651": "If A is an instance of object and P is an instance of agent and A is the financial asset of P, then there is at least one V for which V is an instance of currency measure and A has a monetary value of V for every P and A.",
  "miloA3652": "Barking is a subclass of radiating sound.",
  "miloA3653": "If B is an instance of barking, then there is at least one D for which D is an instance of canine and D is the agent of B for every B.",
  "miloA3654": "Menstruation is a subclass of organ or tissue process.",
  "miloA3655": "Organification is a subclass of organ or tissue process.",
  "miloA3656": "If P is an instance of organification, then there is at least one O for which O is an instance of organ and O is a result of P for every P.",
  "miloA3657": "Biological conception is a subclass of organ or tissue process.",
  "miloA3661": "If SR is an instance of sexual reproduction, then there is at least one C for which C is an instance of biological conception and C is a subprocess of SR for every SR.",
  "miloA3662": "Contraceptive device is a subclass of device.",
  "miloA3664": "Bird egg is a subclass of egg.",
  "miloA3665": "If E is an instance of bird egg, then there is at least one SR and B for which SR is an instance of sexual reproduction and B is the agent of SR and B is an instance of bird and E is a result of SR for every E.",
  "miloA3666": "Biopsy is a subclass of diagnostic process.",
  "miloA3667": "Biopsy is a subclass of removing.",
  "miloA3668": "If B is an instance of biopsy and BS is a participant in B, then BS is an instance of body substance for every B and BS.",
  "miloA3669": "Mating is a subclass of organism process.",
  "miloA3670": "Raping is a subclass of mating.",
  "miloA3671": "Raping is a subclass of criminal action.",
  "miloA3672": "If R is an instance of raping, then there is at least one A for which A is an instance of cognitive agent and A experiences R and A does not want R for every R.",
  "miloA3673": "Laying eggs is a subclass of organism process.",
  "miloA3675": "If A is an instance of agent and L is an instance of laying eggs and A experiences L, then A is an instance of animal and A has the attribute female for every L and A.",
  "miloA3676": "The predicate affiliatedOrganization is an instance of binary predicate.",
  "miloA3679": "The predicate ideologicalAffiliationOfOrganization is an instance of binary predicate.",
  "miloA3682": "The predicate religiousAffiliationOfOrganization is an instance of binary predicate.",
  "miloA3685": "The predicate allegiance is an instance of binary predicate.",
  "miloA3688": "The predicate ancestorOrganization is an instance of binary predicate.",
  "miloA3689": "The predicate ancestorOrganization is an instance of transitive relation.",
  "miloA3690": "The predicate ancestorOrganization is an instance of irreflexive relation.",
  "miloA3693": "The predicate ancestorOrganization and the predicate subOrganization are disjoint.",
  "miloA3694": "The predicate anniversary is an instance of binary predicate.",
  "miloA3695": "The predicate anniversary is an instance of temporal relation.",
  "miloA3700": "The predicate birthday is a subrelation of the predicate anniversary.",
  "miloA3701": "The predicate birthplace is an instance of binary predicate.",
  "miloA3704": "If PLACE is an instance of object and INDIV is an instance of animal and PLACE is the birthplace of INDIV, then there is at least one BIRTH for which BIRTH is an instance of birth and INDIV experiences BIRTH and the entire process BIRTH is located on PLACE for every INDIV and PLACE.",
  "miloA3705": "The predicate birthdate is an instance of binary predicate.",
  "miloA3708": "If D is an instance of day and P is an instance of human and D is the birthdate of P, then there is at least one B for which B is an instance of birth and P experiences B and D is the date of B for every P and D.",
  "miloA3711": "The predicate deathdate is an instance of binary predicate.",
  "miloA3712": "If T is an instance of day and P is an instance of human and T is the deathdate of P, then there is at least one D for which D is an instance of death and P experiences D and T is the date of D for every P and T.",
  "miloA3713": "The predicate deathplace is an instance of binary predicate.",
  "miloA3716": "If L is an instance of object and P is an instance of animal and L is the deathplace of P, then there is at least one D for which D is an instance of death and P experiences D and the entire process D is located on L for every P and L.",
  "miloA3717": "The predicate equipmentCount is an instance of ternary predicate.",
  "miloA3721": "The predicate equipmentType is an instance of binary predicate.",
  "miloA3724": "If T is an instance of device and O is an instance of artifact and O is equipped with a device of type T, then there is at least one D for which D is an instance of object and D is an instance of T and D is a part of O or D is connected to O for every T and O.",
  "miloA3725": "The predicate grammaticalRelation is an instance of binary predicate.",
  "miloA3728": "The predicate distanceOnPath is an instance of binary predicate.",
  "miloA3731": "The predicate inString is an instance of binary predicate.",
  "miloA3734": "The predicate inString is a subrelation of the predicate part.",
  "miloA3735": "If STRING is an instance of symbolic string and CHAR is a part of STRING and CHAR is an instance of character, then CHAR is in string STRING for every CHAR and STRING.",
  "miloA3736": "The predicate subString is an instance of antisymmetric relation.",
  "miloA3737": "The predicate subString is an instance of reflexive relation.",
  "miloA3738": "The predicate subString is an instance of binary predicate.",
  "miloA3741": "The predicate subString is a subrelation of the predicate part.",
  "miloA3742": "If S2 is an instance of symbolic string and S1 is an instance of symbolic string and L1 is an instance of nonnegative integer and L2 is an instance of nonnegative integer and S1 is a sub string in S2 and L1 is equal to the length of the string S1 and L2 is equal to the length of the string S2, then L1 is less than or equal to L2 for every S1, S2, L1 and L2.",
  "miloA3743": "If S2 is an instance of symbolic string and S1 is an instance of symbolic string and CH is an instance of character and S1 is a sub string in S2 and CH is in string S1, then CH is in string S2 for every S1, CH and S2.",
  "miloA3744": "The function SubstringFn is an instance of ternary function.",
  "miloA3745": "The function SubstringFn is an instance of partial valued relation.",
  "miloA3746": "The function SubstringFn is an instance of single valued relation.",
  "miloA3751": "The function StringLengthFn is an instance of unary function.",
  "miloA3752": "The function StringLengthFn is an instance of total valued relation.",
  "miloA3753": "The function StringLengthFn is an instance of single valued relation.",
  "miloA3756": "The predicate stringLength is an instance of binary predicate.",
  "miloA3757": "The predicate stringLength is an instance of total valued relation.",
  "miloA3758": "The predicate stringLength is an instance of single valued relation.",
  "miloA3759": "The predicate stringLength is an instance of asymmetric relation.",
  "miloA3762": "If STRING is an instance of symbolic string and INT is an instance of nonnegative integer, then INT is equal to the length of the string STRING if and only if INT is the length of the string STRING for every INT and STRING.",
  "miloA3763": "The function StringConcatenateFn is an instance of binary function.",
  "miloA3764": "The function StringConcatenateFn is an instance of total valued relation.",
  "miloA3765": "The function StringConcatenateFn is an instance of single valued relation.",
  "miloA3769": "The predicate stringConcatenation is an instance of ternary predicate.",
  "miloA3770": "The predicate stringConcatenation is an instance of total valued relation.",
  "miloA3771": "The predicate stringConcatenation is an instance of single valued relation.",
  "miloA3775": "If S3 is an instance of symbolic string and S1 is an instance of symbolic string and S2 is an instance of symbolic string, then S3 is equal to the concatenation of strings S1 and S2 if and only if S3 is the concatenation of the strings S1 and S1 for every S3, S1 and S2.",
  "miloA3776": "The predicate precedesInString is an instance of ternary predicate.",
  "miloA3780": "The predicate stringConcatenation is a subrelation of the predicate precedesInString.",
  "miloA3781": "If S3 is an instance of symbolic string and S2 is an instance of symbolic string and S1 is an instance of symbolic string and S1 precedes S2 in S3, then S1 is a sub string in S3 and S2 is a sub string in S3 for every S1, S2 and S3.",
  "miloA3782": "If S4 is an instance of symbolic string and S2 is an instance of symbolic string and S1 is an instance of symbolic string and S3 is an instance of symbolic string and S1 precedes S2 in S4 and S2 precedes S3 in S4, then S1 precedes S3 in S4 for every S2, S1, S3 and S4.",
  "miloA3783": "Descriptor is a subclass of content bearing object.",
  "miloA3784": "Name is a subclass of descriptor.",
  "miloA3785": "Identifier is a subclass of name.",
  "miloA3786": "Place descriptor is a subclass of descriptor.",
  "miloA3787": "Descriptor part is a subclass of content bearing object.",
  "miloA3788": "Name part is a subclass of descriptor part.",
  "miloA3789": "Identifier part is a subclass of name part.",
  "miloA3790": "Place id is a subclass of place descriptor.",
  "miloA3791": "Localizable place id is a subclass of place id.",
  "miloA3792": "Place address is a subclass of place id.",
  "miloA3793": "Contact site is a subclass of object.",
  "miloA3794": "Telephony device is a subclass of contact site.",
  "miloA3795": "Telephony device is a subclass of communication device.",
  "miloA3796": "Telephony device is a subclass of electric device.",
  "miloA3797": "Telephone is a subclass of telephony device.",
  "miloA3798": "The predicate canonicalPlaceName is an instance of ternary predicate.",
  "miloA3802": "If STR is an instance of symbolic string and LANG is an instance of language and PLACE is an instance of region and STR is a canonical name for PLACE in the language LANG, then STR names PLACE for every LANG, STR and PLACE.",
  "miloA3803": "Postal place is a subclass of stationary artifact.",
  "miloA3804": "Postal place is a subclass of localizable place.",
  "miloA3805": "Postal place is a subclass of contact site.",
  "miloA3806": "Military installation is a subclass of postal place.",
  "miloA3807": "Residence is a subclass of postal place.",
  "miloA3808": "Place of commerce is a subclass of postal place.",
  "miloA3809": "The predicate siteForContact is an instance of asymmetric relation.",
  "miloA3810": "The predicate siteForContact is an instance of binary predicate.",
  "miloA3813": "The predicate postContactSite is an instance of asymmetric relation.",
  "miloA3814": "The predicate postContactSite is an instance of binary predicate.",
  "miloA3817": "The predicate postContactSite is a subrelation of the predicate siteForContact.",
  "miloA3818": "The predicate unitNumber is an instance of binary predicate.",
  "miloA3821": "The predicate floorCode is an instance of binary predicate.",
  "miloA3824": "If PLACE is an instance of postal place and UNITSTR is an instance of symbolic string and FLRCODE is an instance of symbolic string and PLACE is located in unit UNITSTR and PLACE is located on floor FLRCODE, then there is at least one UNIT and FLOOR for which FLOOR is an instance of building level and UNIT is an instance of room and UNIT is located at FLOOR and FLOOR is a part of PLACE and UNITSTR names UNIT and FLRCODE names FLOOR for every PLACE, UNITSTR and FLRCODE.",
  "miloA3825": "If PLACE is an instance of postal place and UNITSTR is an instance of symbolic string and BLDG is an instance of object and PLACE is located in unit UNITSTR and FLR is not an instance of symbolic string or PLACE is not located on floor FLR for every FLR, then there is at least one UNIT for which UNIT is an instance of room and UNITSTR names UNIT and UNIT is located at BLDG for every PLACE, UNITSTR and BLDG.",
  "miloA3826": "Neighborhood is a subclass of geographic area.",
  "miloA3827": "If PLACE is an instance of neighborhood, then there is at least one AREA for which AREA is an instance of geographic area and PLACE is a geographic subregion of AREA for every PLACE.",
  "miloA3828": "The predicate postNeighborhood is an instance of binary predicate.",
  "miloA3829": "The predicate postNeighborhood is an instance of asymmetric relation.",
  "miloA3830": "The predicate postNeighborhood is a subrelation of the predicate located.",
  "miloA3833": "If GEO is an instance of neighborhood and PLACE is an instance of postal place, then PLACE is the postal place of the neighborhood GEO if and only if PLACE is located at GEO and PLACE is an instance of postal place and GEO is an instance of neighborhood for every PLACE and GEO.",
  "miloA3834": "If NEIGHBORHOOD is an instance of neighborhood and PLACE is an instance of postal place and PLACE is the postal place of the neighborhood NEIGHBORHOOD and NEIGHBORHOOD is a geographic subregion of CITY and CITY is an instance of city, then PLACE is the postal place of the city CITY for every NEIGHBORHOOD, PLACE and CITY.",
  "miloA3835": "If NEIGHBORHOOD is an instance of neighborhood and PLACE is an instance of postal place and PLACE is the postal place of the neighborhood NEIGHBORHOOD and NEIGHBORHOOD is a geographic subregion of STATE and STATE is an instance of state or province, then PLACE is the postal place of the district STATE for every NEIGHBORHOOD, PLACE and STATE.",
  "miloA3836": "The predicate postCountry is an instance of asymmetric relation.",
  "miloA3837": "The predicate postCountry is an instance of binary predicate.",
  "miloA3840": "The predicate postCountry is a subrelation of the predicate located.",
  "miloA3841": "If COUNTRY is an instance of geopolitical area and PLACE is an instance of postal place and PLACE is the postal place of the country COUNTRY, then COUNTRY is an instance of nation or COUNTRY is an instance of dependency or special sovereignty area for every PLACE and COUNTRY.",
  "miloA3842": "If GEO is an instance of geopolitical area and PLACE is an instance of postal place, then PLACE is the postal place of the country GEO if and only if PLACE is located at GEO and PLACE is an instance of postal place and GEO is an instance of nation or GEO is an instance of dependency or special sovereignty area for every PLACE and GEO.",
  "miloA3843": "If CITY is an instance of city and PLACE is an instance of postal place and PLACE is the postal place of the city CITY and CITY is a geographic subregion of AREA and AREA is an instance of state or province, then PLACE is the postal place of the district AREA for every CITY, PLACE and AREA.",
  "miloA3844": "If CITY is an instance of city and PLACE is an instance of postal place and AREA is an instance of geopolitical area and PLACE is the postal place of the city CITY and CITY is a geographic subregion of AREA and AREA is an instance of nation or AREA is an instance of dependency or special sovereignty area, then PLACE is the postal place of the country AREA for every CITY, PLACE and AREA.",
  "miloA3845": "The predicate postDistrict is an instance of asymmetric relation.",
  "miloA3846": "The predicate postDistrict is an instance of binary predicate.",
  "miloA3849": "The predicate postDistrict is a subrelation of the predicate located.",
  "miloA3850": "If GEO is an instance of state or province and PLACE is an instance of postal place, then PLACE is the postal place of the district GEO if and only if PLACE is located at GEO and PLACE is an instance of postal place and GEO is an instance of state or province for every PLACE and GEO.",
  "miloA3851": "The predicate postCity is an instance of asymmetric relation.",
  "miloA3852": "The predicate postCity is an instance of binary predicate.",
  "miloA3855": "The predicate postCity is a subrelation of the predicate located.",
  "miloA3856": "If GEO is an instance of city and PLACE is an instance of postal place, then PLACE is the postal place of the city GEO if and only if PLACE is located at GEO and PLACE is an instance of postal place and GEO is an instance of city for every PLACE and GEO.",
  "miloA3857": "Postcode area is a subclass of localizable place.",
  "miloA3858": "If AREA is an instance of postcode area, then there is at least one GEO for which GEO is an instance of geographic area and AREA is a geographic subregion of GEO for every AREA.",
  "miloA3859": "The predicate postPostcodeArea is an instance of asymmetric relation.",
  "miloA3860": "The predicate postPostcodeArea is an instance of binary predicate.",
  "miloA3863": "The predicate postPostcodeArea is a subrelation of the predicate located.",
  "miloA3864": "If AREA is an instance of postcode area and PLACE is an instance of postal place, then PLACE is the postal place of the postcode area AREA if and only if PLACE is located at AREA and PLACE is an instance of postal place and AREA is an instance of postcode area for every PLACE and AREA.",
  "miloA3865": "If AREA is an instance of postcode area and PLACE is an instance of postal place and PLACE is the postal place of the postcode area AREA and AREA is a geographic subregion of CITY and CITY is an instance of city, then PLACE is the postal place of the city CITY for every AREA, PLACE and CITY.",
  "miloA3866": "If AREA is an instance of postcode area and PLACE is an instance of postal place and PLACE is the postal place of the postcode area AREA and AREA is a geographic subregion of GEO and GEO is an instance of state or province, then PLACE is the postal place of the district GEO for every AREA, PLACE and GEO.",
  "miloA3867": "The predicate postStreet is an instance of asymmetric relation.",
  "miloA3868": "The predicate postStreet is an instance of binary predicate.",
  "miloA3871": "If ROADWAY is an instance of roadway and POSTPLACE is an instance of postal place and POSTPLACE is the postal place of the street ROADWAY, then POSTPLACE is adjacent to ROADWAY for every POSTPLACE and ROADWAY.",
  "miloA3872": "The predicate postStreetNumber is an instance of asymmetric relation.",
  "miloA3873": "The predicate postStreetNumber is an instance of binary predicate.",
  "miloA3876": "The predicate postPostOfficeBox is an instance of asymmetric relation.",
  "miloA3877": "The predicate postPostOfficeBox is an instance of binary predicate.",
  "miloA3880": "Postal address text is a subclass of place address.",
  "miloA3881": "Postal address text is a subclass of localizable place id.",
  "miloA3882": "Postal address text is a subclass of symbolic string.",
  "miloA3883": "Postal address text is a subclass of linguistic expression.",
  "miloA3884": "The predicate postAddressText is an instance of asymmetric relation.",
  "miloA3885": "The predicate postAddressText is an instance of binary predicate.",
  "miloA3888": "The predicate telecomContactDevice is an instance of asymmetric relation.",
  "miloA3889": "The predicate telecomContactDevice is an instance of binary predicate.",
  "miloA3892": "The predicate telecomContactDevice is a subrelation of the predicate siteForContact.",
  "miloA3893": "Virtual place id is a subclass of place id.",
  "miloA3894": "Virtual address is a subclass of place address.",
  "miloA3895": "Virtual address is a subclass of virtual place id.",
  "miloA3896": "Telecom number is a subclass of virtual address.",
  "miloA3897": "Telecom number is a subclass of symbolic string.",
  "miloA3898": "Telecom number is a subclass of contact site.",
  "miloA3899": "The predicate deviceTelecomNumber is an instance of binary predicate.",
  "miloA3900": "The predicate deviceTelecomNumber is an instance of asymmetric relation.",
  "miloA3903": "The predicate telecomCoreNumber is an instance of binary predicate.",
  "miloA3904": "The predicate telecomCoreNumber is an instance of asymmetric relation.",
  "miloA3907": "The predicate telecomCoreNumber is a subrelation of the predicate subString.",
  "miloA3908": "The predicate telecomCountryCode is an instance of binary predicate.",
  "miloA3909": "The predicate telecomCountryCode is an instance of asymmetric relation.",
  "miloA3912": "The predicate telecomCountryCode is a subrelation of the predicate subString.",
  "miloA3913": "The predicate telecomAreaCode is an instance of binary predicate.",
  "miloA3914": "The predicate telecomAreaCode is an instance of asymmetric relation.",
  "miloA3917": "The predicate telecomAreaCode is a subrelation of the predicate subString.",
  "miloA3918": "The predicate telecomCode2 is an instance of binary predicate.",
  "miloA3919": "The predicate telecomCode2 is an instance of asymmetric relation.",
  "miloA3922": "The predicate telecomCode2 is a subrelation of the predicate subString.",
  "miloA3923": "The predicate telecomExtension is an instance of binary predicate.",
  "miloA3924": "The predicate telecomExtension is an instance of asymmetric relation.",
  "miloA3927": "If WHOLE is an instance of telecom number and CN is an instance of symbolic string and AC is an instance of symbolic string and CN is the telecom core number of WHOLE and AC is the telecom area code of WHOLE, then AC precedes CN in WHOLE for every AC, CN and WHOLE.",
  "miloA3928": "If WHOLE is an instance of telecom number and CN is an instance of symbolic string and CC is an instance of symbolic string and CN is the telecom core number of WHOLE and CC is the telecom country code of WHOLE, then CC precedes CN in WHOLE for every CC, CN and WHOLE.",
  "miloA3929": "If WHOLE is an instance of telecom number and AC is an instance of symbolic string and CC is an instance of symbolic string and AC is the telecom area code of WHOLE and CC is the telecom country code of WHOLE, then CC precedes AC in WHOLE for every CC, AC and WHOLE.",
  "miloA3930": "If WHOLE is an instance of telecom number and CN is an instance of symbolic string and EX is an instance of symbolic string and CN is the telecom core number of WHOLE and EX is the telecom extension of WHOLE, then CN precedes EX in WHOLE for every CN, EX and WHOLE.",
  "miloA3931": "If WHOLE is an instance of telecom number and C2 is an instance of symbolic string and AC is an instance of symbolic string and C2 is the telecom code of WHOLE and AC is the telecom area code of WHOLE, then AC precedes C2 in WHOLE for every AC, C2 and WHOLE.",
  "miloA3932": "If WHOLE is an instance of telecom number and C2 is an instance of symbolic string and CC is an instance of symbolic string and C2 is the telecom code of WHOLE and CC is the telecom country code of WHOLE, then CC precedes C2 in WHOLE for every CC, C2 and WHOLE.",
  "miloA3933": "The predicate telephoneNumber is an instance of binary predicate.",
  "miloA3934": "The predicate telephoneNumber is an instance of asymmetric relation.",
  "miloA3937": "If AGENT is an instance of agent and NUMBER is an instance of telecom number and NUMBER is the telephone number of AGENT, then NUMBER is the site at which AGENT can be contacted for every NUMBER and AGENT.",
  "miloA3938": "The predicate personalPhoneNumber is an instance of binary predicate.",
  "miloA3939": "The predicate personalPhoneNumber is an instance of asymmetric relation.",
  "miloA3942": "The predicate personalPhoneNumber is a subrelation of the predicate telephoneNumber.",
  "miloA3944": "The predicate homePhoneNumber is an instance of binary predicate.",
  "miloA3945": "The predicate homePhoneNumber is an instance of asymmetric relation.",
  "miloA3948": "The predicate homePhoneNumber is a subrelation of the predicate telephoneNumber.",
  "miloA3951": "The predicate workPhoneNumber is an instance of binary predicate.",
  "miloA3952": "The predicate workPhoneNumber is an instance of asymmetric relation.",
  "miloA3955": "The predicate workPhoneNumber is a subrelation of the predicate telephoneNumber.",
  "miloA3956": "Fixed phone is a subclass of telephone.",
  "miloA3957": "Mobile cell phone is a subclass of receiver device.",
  "miloA3958": "Mobile cell phone is a subclass of telephone.",
  "miloA3959": "The predicate mobilePhoneNumber is an instance of binary predicate.",
  "miloA3960": "The predicate mobilePhoneNumber is an instance of asymmetric relation.",
  "miloA3963": "The predicate mobilePhoneNumber is a subrelation of the predicate telephoneNumber.",
  "miloA3967": "The predicate faxNumber is an instance of binary predicate.",
  "miloA3968": "The predicate faxNumber is an instance of asymmetric relation.",
  "miloA3973": "Fabric iron is a subclass of device.",
  "miloA3974": "If IRON is an instance of self connected object and IRON is an instance of fabric iron, then there is at least one BASE for which BASE is an instance of corpuscular object and BASE is the bottom of IRON and BASE is made out of metal and BASE has the attribute flat for every IRON.",
  "miloA3975": "Ironing board is a subclass of device.",
  "miloA3977": "Smoothing is a subclass of surface change.",
  "miloA3979": "Ironing is a subclass of smoothing.",
  "miloA3980": "If OBJ is an instance of object and I is an instance of ironing and OBJ is a participant in I, then there is at least one HEAT, IRON and PART for which PART is an instance of object and IRON is an instance of physical and PART is a superficial part of OBJ and HEAT is an instance of heating and IRON is a participant in HEAT and PART is a participant in I and IRON is an instrument for I for every OBJ and I.",
  "miloA3981": "If OBJ is an instance of object and I is an instance of ironing and OBJ is a participant in I and FABRIC is a part of OBJ and FABRIC is an instance of fabric, then there is at least one IRON and HEAT for which HEAT is an instance of heating and IRON is a participant in HEAT and IRON is an instance of fabric iron and IRON is an instrument for I for every OBJ, FABRIC and I.",
  "miloA3982": "Whirlpool tub is a subclass of fluid container.",
  "miloA3984": "Hot tub is a subclass of whirlpool tub.",
  "miloA3986": "Size attribute is a subclass of relational attribute.",
  "miloA3987": "If X is an instance of object and X has the attribute ATTR and ATTR is an instance of size attribute, then X is an instance of object for every ATTR and X.",
  "miloA3988": "Double size is an instance of size attribute.",
  "miloA3990": "Kennel is a subclass of trap or cage.",
  "miloA3992": "Drying device is a subclass of device.",
  "miloA3994": "Clothes dryer is a subclass of drying device.",
  "miloA3995": "Clothes washing machine is a subclass of washing device.",
  "miloA3996": "Hair dryer is a subclass of drying device.",
  "miloA3997": "Hair dryer is a subclass of electric device.",
  "miloA3999": "Self service laundry is a subclass of room.",
  "miloA4001": "If ROOM is an instance of self service laundry, then ROOM has the attribute communal attribute for every ROOM.",
  "miloA4002": "Microwave is a subclass of electric device.",
  "miloA4004": "If M is an instance of microwave and M has the attribute device on, then there is at least one PROC for which PROC is an instance of radiating electromagnetic and M is an instrument for PROC for every M.",
  "miloA4005": "Smoke detector is a subclass of device.",
  "miloA4007": "Sprinkler is a subclass of device.",
  "miloA4008": "Water sprinkler is a subclass of sprinkler.",
  "miloA4010": "Fire sprinkler system is a subclass of collection.",
  "miloA4011": "If X is an instance of fire sprinkler system, then there is at least one DETECT and SPRINKLER for which DETECT is an instance of self connected object and SPRINKLER is an instance of self connected object and DETECT is an instance of smoke detector and SPRINKLER is an instance of water sprinkler and DETECT is a member of X and SPRINKLER is a member of X for every X.",
  "miloA4012": "If X is an instance of fire sprinkler system, then there is at least one FIRE, DISCOVER and WM for which DISCOVER is an instance of discovering and FIRE is an instance of fire and X is an instrument for DISCOVER and FIRE is a participant in DISCOVER and WM is an instance of water motion and X is the origin of WM and DISCOVER causes WM for every X.",
  "miloA4013": "Fire extinguisher is a subclass of device.",
  "miloA4015": "If FE is an instance of fire extinguisher, then there is at least one PERSON, CARRYING and CARRY for which CARRY is an instance of process and PERSON is an instance of human and CARRYING is a subclass of carrying and CARRY is an instance of CARRYING and FE is a participant in CARRY and PERSON is capable to do CARRYING in role the predicate instrument for every FE.",
  "miloA4016": "Ice machine is a subclass of machine.",
  "miloA4018": "Alarm clock is a subclass of clock.",
  "miloA4020": "Amfm alarm clock is a subclass of alarm clock.",
  "miloA4021": "Amfm alarm clock is a subclass of radio receiver.",
  "miloA4022": "Electric coffee maker is a subclass of electric device.",
  "miloA4024": "Clean is an instance of subjective assessment attribute.",
  "miloA4025": "Dirty is an instance of subjective assessment attribute.",
  "miloA4026": "If X is an instance of object and X has the attribute clean, then X is an instance of object for every X.",
  "miloA4027": "If X is an instance of object and X has the attribute dirty, then X is an instance of object for every X.",
  "miloA4028": "Nothing can simultaneously be dirty and clean.",
  "miloA4029": "Data storage device is a subclass of device.",
  "miloA4030": "Whiteboard is a subclass of data storage device.",
  "miloA4031": "Whiteboard is a subclass of display artifact.",
  "miloA4032": "If OBJ is an instance of whiteboard, then OBJ has the color white for every OBJ.",
  "miloA4033": "If OBJ is an instance of whiteboard, then the structure of OBJ is flat for every OBJ.",
  "miloA4035": "Steam is a subclass of water.",
  "miloA4036": "If STEAM is an instance of steam, then there is at least one BOIL and WATER for which BOIL is an instance of boiling and WATER is an instance of water and WATER is a participant in BOIL and STEAM is a result of BOIL and STEAM has the attribute gas for every STEAM.",
  "miloA4037": "Water heater is a subclass of heating device.",
  "miloA4041": "The predicate airTemperature is a subrelation of the predicate measure.",
  "miloA4042": "Temperature attribute is a subclass of subjective assessment attribute.",
  "miloA4043": "Cold temperature is an instance of temperature attribute.",
  "miloA4044": "Cold temperature is a successor attribute of hot temperature.",
  "miloA4045": "Cool temperature is an instance of temperature attribute.",
  "miloA4046": "Cold temperature is an immediate successor attribute of cool temperature.",
  "miloA4047": "Warm temperature is an instance of temperature attribute.",
  "miloA4048": "Cool temperature is an immediate successor attribute of warm temperature.",
  "miloA4049": "Hot temperature is an instance of temperature attribute.",
  "miloA4050": "Warm temperature is an immediate successor attribute of hot temperature.",
  "miloA4051": "If X is an instance of object and Y is an instance of object and X is an instance of CLASS and Y is an instance of CLASS and X has the attribute cold temperature and Y has the attribute hot temperature, then there is at least one TEMPX and TEMPY for which X is measured by TEMPX and TEMPX is an instance of temperature measure and Y is measured by TEMPY and TEMPY is an instance of temperature measure and TEMPY is greater than TEMPX for every CLASS, X and Y.",
  "miloA4052": "Multilingual is an instance of relational attribute.",
  "miloA4053": "If X is an instance of object and X has the attribute multilingual, then X is an instance of human for every X.",
  "miloA4055": "Recreational vehicle is a subclass of vehicle.",
  "miloA4056": "Recreational vehicle is a subclass of mobile residence.",
  "miloA4058": "Electronic lock is a subclass of lock.",
  "miloA4060": "Running track is a subclass of stationary artifact.",
  "miloA4061": "Running track is a subclass of land transitway.",
  "miloA4063": "Knock light is a subclass of device.",
  "miloA4066": "Prayer mat is a subclass of rug.",
  "miloA4068": "Video game is a subclass of game.",
  "miloA4069": "If GAME is an instance of video game, then there is at least one VIDEO for which VIDEO is an instance of video recording and VIDEO represents GAME for every GAME.",
  "miloA4070": "Video game player is a subclass of media system.",
  "miloA4072": "Electrical outlet is a subclass of device.",
  "miloA4075": "Electrical plug is a subclass of plug.",
  "miloA4076": "If X is an instance of corpuscular object and X is an instance of electrical plug, then X is made out of metal for every X.",
  "miloA4078": "If PLUG is an instance of engineering component and DEVICE is an instance of engineering component and OUTLET is an instance of hole and OUTLET is an instance of engineering component and POWER is an instance of engineering component and PLUG is an instance of electrical plug and DEVICE is an instance of electric device and OUTLET is an instance of electrical outlet and DEVICE is connected to PLUG and PLUG completely fills OUTLET and POWER is an instance of power source and POWER is connected to OUTLET, then there is at least one RE for which RE is an instance of radiating electromagnetic and POWER is the origin of RE and RE ends at DEVICE for every PLUG, OUTLET, POWER and DEVICE.",
  "miloA4079": "Outlet adapter is a subclass of device.",
  "miloA4082": "Air conditioner is a subclass of electric device.",
  "miloA4084": "Surrounded is an instance of positional attribute.",
  "miloA4085": "If OBJ2 is an instance of object and OBJ1 is an instance of self connected object and X is an instance of self connected object and OBJ1 is surrounded to OBJ2 and X is a side of OBJ1, then X meets OBJ2 for every OBJ1, OBJ2 and X.",
  "miloA4086": "Courtyard is a subclass of stationary artifact.",
  "miloA4087": "If X is an instance of self connected object and X is an instance of courtyard, then ROOF is not an instance of self connected object or ROOF is not an instance of roof or ROOF is not the top of X for every ROOF and there is at least one BLDG for which BLDG is an instance of building and X is surrounded to BLDG for every X.",
  "miloA4088": "Speaker device is a subclass of electric device.",
  "miloA4090": "Earphone is a subclass of device.",
  "miloA4092": "Public is a subclass of group of people.",
  "miloA4094": "Public address system is a subclass of communication system.",
  "miloA4097": "Wheelchair is a subclass of transportation device.",
  "miloA4098": "If X is an instance of wheelchair, then there is at least one WHEEL and SEAT for which SEAT is an instance of seat and WHEEL is an instance of wheel and SEAT is a part of X and WHEEL is a part of X for every X.",
  "miloA4100": "Wheelchair accessible is an instance of objective norm.",
  "miloA4101": "If X is an instance of object and X has the attribute wheelchair accessible, then X has the attribute handicapped friendly for every X.",
  "miloA4103": "Handicapped friendly is an instance of subjective assessment attribute.",
  "miloA4104": "If X is an instance of object and X has the attribute handicapped friendly, then X is an instance of object for every X.",
  "miloA4105": "If X is an instance of object and X has the attribute handicapped friendly, then there is at least one ATTR and PERSON for which ATTR is an instance of disability and PERSON is an instance of human and PERSON has the attribute ATTR and PERSON is interested in X for every X.",
  "miloA4106": "Recliner is a subclass of seat.",
  "miloA4108": "Visual content bearing physical is a subclass of content bearing physical.",
  "miloA4109": "Visual content bearing object is a subclass of content bearing physical.",
  "miloA4110": "Visual content bearing object is a subclass of visual content bearing physical.",
  "miloA4111": "Image is a subclass of visual content bearing object.",
  "miloA4112": "Multimedia projector is a subclass of media system.",
  "miloA4114": "Audio recorder is a subclass of device.",
  "miloA4116": "Video display is a subclass of electric device.",
  "miloA4118": "Tdd phone is a subclass of telephone.",
  "miloA4120": "Photocopier is a subclass of electric device.",
  "miloA4123": "Photocopying is a subclass of making.",
  "miloA4124": "If COPY is an instance of photocopying, then there is at least one OBJ1 and OBJ2 for which OBJ1 is an instance of object and OBJ2 is an instance of visual content bearing object and OBJ1 is a participant in COPY and OBJ2 is a result of COPY and OBJ2 represents OBJ1 for every COPY.",
  "miloA4125": "Sail is a subclass of artifact.",
  "miloA4127": "Ac power source is a subclass of power source.",
  "miloA4128": "Single phase power source is a subclass of ac power source.",
  "miloA4129": "Three phase power source is a subclass of ac power source.",
  "miloA4130": "The predicate voltageMeasure is an instance of binary predicate.",
  "miloA4133": "If MEAS is an instance of physical quantity and OBJ is an instance of power source and QUANT is an instance of real number and OBJ is the amount of electricity generated by MEAS, then MEAS is equal to QUANT measured in volt for every OBJ, MEAS and QUANT.",
  "miloA4134": "If MEAS is an instance of physical quantity and OBJ is an instance of power source and OBJ is the amount of electricity generated by MEAS, then there is at least one ELEC and PROC for which ELEC is an instance of electricity and PROC is an instance of process and OBJ is an instrument for PROC and ELEC is a result of PROC and ELEC is measured by MEAS for every OBJ and MEAS.",
  "miloA4135": "Document is a subclass of content bearing object.",
  "miloA4136": "Document is a subclass of artifact.",
  "miloA4138": "Book is a subclass of document.",
  "miloA4139": "Guide book is a subclass of book.",
  "miloA4140": "If X is an instance of guide book, then there is at least one LOC for which LOC is an instance of geographic area and X refers to LOC for every X.",
  "miloA4141": "Dining guide is a subclass of guide book.",
  "miloA4142": "If X is an instance of dining guide, then there is at least one LOC and REST for which LOC is an instance of geographic area and X refers to LOC and REST is an instance of restaurant and REST is located at LOC and X refers to REST for every X.",
  "miloA4143": "Telephone handset is a subclass of device.",
  "miloA4144": "If X is an instance of telephone handset, then there is at least one EARPHONE and MIC for which EARPHONE is an instance of earphone and MIC is an instance of microphone and EARPHONE is a part of X and MIC is a part of X for every X.",
  "miloA4145": "Fire alarm is a subclass of device.",
  "miloA4147": "Grab bar is a subclass of artifact.",
  "miloA4150": "High rise is a subclass of building.",
  "miloA4151": "If X is an instance of high rise, then there is at least one LEVELS and NUM for which NUM is an instance of integer and LEVELS is an instance of collection and if FLR is an instance of self connected object and FLR is an instance of building level and FLR is a part of X, then FLR is a member of LEVELS for every FLR and there is a total NUM of members in LEVELS and NUM is greater than or equal to 10 for every X.",
  "miloA4152": "Soaking is a subclass of wetting.",
  "miloA4154": "Grecian tub is a subclass of bath tub.",
  "miloA4156": "Hemisphere figure is a subclass of three dimensional figure.",
  "miloA4158": "Dome is a subclass of ceiling.",
  "miloA4159": "If X is an instance of dome, then there is at least one HEMI for which X has the attribute HEMI and HEMI is an instance of hemisphere figure for every X.",
  "miloA4160": "Historical is an instance of relational attribute.",
  "miloA4161": "If X is an instance of object and X has the attribute historical, then X is an instance of physical for every X.",
  "miloA4162": "If X is an instance of object and X has the attribute historical, then history refers to X for every X.",
  "miloA4163": "Rural is an instance of relational attribute.",
  "miloA4164": "Suburban is an instance of relational attribute.",
  "miloA4165": "Urban is an instance of relational attribute.",
  "miloA4166": "Patio is a subclass of region.",
  "miloA4168": "Lanai is a subclass of patio.",
  "miloA4169": "Lanai is a subclass of stationary artifact.",
  "miloA4171": "The predicate hasUniform is an instance of binary predicate.",
  "miloA4175": "Uniform clothing is a subclass of clothing.",
  "miloA4176": "If X is a subclass of uniform clothing, then there is at least one GRP for which GRP is an instance of group and GRP has the uniform X for every X.",
  "miloA4177": "If X is an instance of uniform clothing, then there is at least one PROC and DESIGN for which PROC is an instance of intentional process and DESIGN is a result of PROC and X represents DESIGN for every X.",
  "miloA4178": "Tripod is a subclass of device.",
  "miloA4179": "If X is an instance of tripod, then there is at least one LEG1, LEG2 and LEG3 for which LEG1 is an instance of object and LEG2 is an instance of object and LEG3 is an instance of object and LEG1 is a part of X and LEG2 is a part of X and LEG3 is a part of X and LEG1 meets LEG2 and LEG2 meets LEG3 and LEG1 meets LEG3 for every X.",
  "miloA4181": "Easel is a subclass of tripod.",
  "miloA4183": "Solarium is a subclass of room.",
  "miloA4184": "If X is an instance of solarium, then there is at least one WALL for which WALL is an instance of wall and WALL is a part of X and WALL has the attribute transparent for every X.",
  "miloA4185": "Exercise center is a subclass of sports facility.",
  "miloA4187": "Game room is a subclass of room.",
  "miloA4189": "Nursery is a subclass of room.",
  "miloA4190": "If X is an instance of nursery, then there is at least one CRIB for which CRIB is an instance of crib and CRIB is located at X for every X.",
  "miloA4191": "Steam bath is a subclass of room.",
  "miloA4192": "If X is an instance of steam bath, then there is at least one STEAM for which STEAM is an instance of steam and STEAM is located at X for every X.",
  "miloA4194": "Heated pool is a subclass of swimming pool.",
  "miloA4195": "If X is an instance of self connected object and X is an instance of heated pool and X contains WATER and WATER is an instance of water and X is a part of HEATER and HEATER is an instance of water heater and HEATER has the attribute device on, then WATER has the attribute warm temperature for every X, HEATER and WATER.",
  "miloA4196": "Room heater is a subclass of heating device.",
  "miloA4198": "Dance hall is a subclass of stationary artifact.",
  "miloA4200": "Night club is a subclass of dance hall.",
  "miloA4201": "If X is an instance of night club, then there is at least one BAR for which BAR is an instance of tavern and BAR is located at X for every X.",
  "miloA4202": "Scuba diving is a subclass of swimming.",
  "miloA4203": "Americans with disabilities act is an instance of proposition.",
  "miloA4204": "The predicate conforms is a subrelation of the predicate represents.",
  "miloA4207": "If OBJ is an instance of object and OBJ conforms to americans with disabilities act, then OBJ has the attribute handicapped friendly for every OBJ.",
  "miloA4208": "Usfema is an instance of government organization.",
  "miloA4209": "The predicate approves is a subrelation of the predicate inScopeOfInterest.",
  "miloA4213": "Wet bar is a subclass of artifact.",
  "miloA4215": "Surveillance system is a subclass of collection.",
  "miloA4219": "Artifact mediated communication is a subclass of communication.",
  "miloA4220": "If X is an instance of artifact mediated communication, then there is at least one OBJ for which OBJ is an instance of artifact and OBJ is an instrument for X for every X.",
  "miloA4221": "Telephone communication is a subclass of artifact mediated communication.",
  "miloA4222": "If X is an instance of telephone communication, then there is at least one TEL1, TEL2, ORIGIN and DEST for which ORIGIN is an instance of contact site and DEST is an instance of contact site and TEL1 is an instance of agent and TEL2 is an instance of agent and ORIGIN is the origin of X and X ends at DEST and ORIGIN is the site at which TEL1 can be contacted and DEST is the site at which TEL2 can be contacted and TEL1 is an instance of telephone and TEL2 is an instance of telephone and TEL1 is an instrument for X and TEL2 is an instrument for X for every X.",
  "miloA4223": "Operator assisted telephone communication is a subclass of telephone communication.",
  "miloA4225": "Direct dial telephone communication is a subclass of telephone communication.",
  "miloA4227": "Voice mail is a subclass of audio recording.",
  "miloA4228": "If X is an instance of voice mail, then there is at least one TEL for which TEL is an instance of telephone communication and X is a participant in TEL for every X.",
  "miloA4229": "Local is an instance of relational attribute.",
  "miloA4230": "Domestic is an instance of relational attribute.",
  "miloA4231": "International is an instance of relational attribute.",
  "miloA4232": "Communal attribute is an instance of relational attribute.",
  "miloA4233": "Private attribute is an instance of relational attribute.",
  "miloA4234": "If X is an instance of object and X has the attribute communal attribute, then X is an instance of object for every X.",
  "miloA4237": "Policy is a subclass of proposition.",
  "miloA4238": "If POLICY is an instance of policy, then there is at least one ORG for which ORG is an instance of organization and ORG is the owner of the policy POLICY for every POLICY.",
  "miloA4239": "The predicate policyOwner is an instance of binary predicate.",
  "miloA4242": "If POLICY is an instance of policy and AGENT is an instance of organization and AGENT is the owner of the policy POLICY, then there is at least one CREATE for which CREATE is an instance of creation and AGENT is the agent of CREATE and POLICY is a result of CREATE for every AGENT and POLICY.",
  "miloA4243": "Hydrogen is a subclass of elemental substance.",
  "miloA4244": "1 is the atomic number of hydrogen.",
  "miloA4245": "Helium is a subclass of elemental substance.",
  "miloA4246": "2 is the atomic number of helium.",
  "miloA4247": "Lithium is a subclass of elemental substance.",
  "miloA4248": "3 is the atomic number of lithium.",
  "miloA4249": "Beryllium is a subclass of elemental substance.",
  "miloA4250": "4 is the atomic number of beryllium.",
  "miloA4251": "Boron is a subclass of elemental substance.",
  "miloA4252": "5 is the atomic number of boron.",
  "miloA4253": "Carbon is a subclass of elemental substance.",
  "miloA4254": "6 is the atomic number of carbon.",
  "miloA4255": "Nitrogen is a subclass of elemental substance.",
  "miloA4256": "7 is the atomic number of nitrogen.",
  "miloA4257": "Oxygen is a subclass of elemental substance.",
  "miloA4258": "8 is the atomic number of oxygen.",
  "miloA4259": "Fluorine is a subclass of elemental substance.",
  "miloA4260": "9 is the atomic number of fluorine.",
  "miloA4261": "Neon is a subclass of elemental substance.",
  "miloA4262": "10 is the atomic number of neon.",
  "miloA4263": "Sodium is a subclass of elemental substance.",
  "miloA4264": "11 is the atomic number of sodium.",
  "miloA4265": "Magnesium is a subclass of elemental substance.",
  "miloA4266": "12 is the atomic number of magnesium.",
  "miloA4267": "Aluminum is a subclass of elemental substance.",
  "miloA4268": "13 is the atomic number of aluminum.",
  "miloA4269": "Silicon is a subclass of elemental substance.",
  "miloA4270": "14 is the atomic number of silicon.",
  "miloA4271": "Phosphorus is a subclass of elemental substance.",
  "miloA4272": "15 is the atomic number of phosphorus.",
  "miloA4273": "Sulphur is a subclass of elemental substance.",
  "miloA4274": "16 is the atomic number of sulphur.",
  "miloA4275": "Chlorine is a subclass of elemental substance.",
  "miloA4276": "17 is the atomic number of chlorine.",
  "miloA4277": "Argon is a subclass of elemental substance.",
  "miloA4278": "18 is the atomic number of argon.",
  "miloA4279": "Potassium is a subclass of elemental substance.",
  "miloA4280": "19 is the atomic number of potassium.",
  "miloA4281": "Calcium is a subclass of elemental substance.",
  "miloA4282": "20 is the atomic number of calcium.",
  "miloA4283": "Scandium is a subclass of elemental substance.",
  "miloA4284": "21 is the atomic number of scandium.",
  "miloA4285": "Titanium is a subclass of elemental substance.",
  "miloA4286": "22 is the atomic number of titanium.",
  "miloA4287": "Vanadium is a subclass of elemental substance.",
  "miloA4288": "23 is the atomic number of vanadium.",
  "miloA4289": "Chromium is a subclass of elemental substance.",
  "miloA4290": "24 is the atomic number of chromium.",
  "miloA4291": "Manganese is a subclass of elemental substance.",
  "miloA4292": "25 is the atomic number of manganese.",
  "miloA4293": "Iron is a subclass of elemental substance.",
  "miloA4294": "26 is the atomic number of iron.",
  "miloA4295": "Cobalt is a subclass of elemental substance.",
  "miloA4296": "27 is the atomic number of cobalt.",
  "miloA4297": "Nickel is a subclass of elemental substance.",
  "miloA4298": "28 is the atomic number of nickel.",
  "miloA4299": "Copper is a subclass of elemental substance.",
  "miloA4300": "29 is the atomic number of copper.",
  "miloA4301": "Zinc is a subclass of elemental substance.",
  "miloA4302": "30 is the atomic number of zinc.",
  "miloA4303": "Gallium is a subclass of elemental substance.",
  "miloA4304": "31 is the atomic number of gallium.",
  "miloA4305": "Germanium is a subclass of elemental substance.",
  "miloA4306": "32 is the atomic number of germanium.",
  "miloA4307": "Arsenic is a subclass of elemental substance.",
  "miloA4308": "33 is the atomic number of arsenic.",
  "miloA4309": "Selenium is a subclass of elemental substance.",
  "miloA4310": "34 is the atomic number of selenium.",
  "miloA4311": "Bromine is a subclass of elemental substance.",
  "miloA4312": "35 is the atomic number of bromine.",
  "miloA4313": "Krypton is a subclass of elemental substance.",
  "miloA4314": "36 is the atomic number of krypton.",
  "miloA4315": "Rubidium is a subclass of elemental substance.",
  "miloA4316": "37 is the atomic number of rubidium.",
  "miloA4317": "Strontium is a subclass of elemental substance.",
  "miloA4318": "38 is the atomic number of strontium.",
  "miloA4319": "Yttrium is a subclass of elemental substance.",
  "miloA4320": "39 is the atomic number of yttrium.",
  "miloA4321": "Zirconium is a subclass of elemental substance.",
  "miloA4322": "40 is the atomic number of zirconium.",
  "miloA4323": "Niobium is a subclass of elemental substance.",
  "miloA4324": "41 is the atomic number of niobium.",
  "miloA4325": "Molybdenum is a subclass of elemental substance.",
  "miloA4326": "42 is the atomic number of molybdenum.",
  "miloA4327": "Technetium is a subclass of elemental substance.",
  "miloA4328": "43 is the atomic number of technetium.",
  "miloA4329": "If ATOM is an instance of technetium and ATOM is an instance of atom, then ATOM is measured by 98 measured in amu for every ATOM.",
  "miloA4330": "Ruthenium is a subclass of elemental substance.",
  "miloA4331": "44 is the atomic number of ruthenium.",
  "miloA4332": "Rhodium is a subclass of elemental substance.",
  "miloA4333": "45 is the atomic number of rhodium.",
  "miloA4334": "Palladium is a subclass of elemental substance.",
  "miloA4335": "46 is the atomic number of palladium.",
  "miloA4336": "Silver is a subclass of elemental substance.",
  "miloA4337": "47 is the atomic number of silver.",
  "miloA4338": "Cadmium is a subclass of elemental substance.",
  "miloA4339": "48 is the atomic number of cadmium.",
  "miloA4340": "Indium is a subclass of elemental substance.",
  "miloA4341": "49 is the atomic number of indium.",
  "miloA4342": "Tin is a subclass of elemental substance.",
  "miloA4343": "50 is the atomic number of tin.",
  "miloA4344": "Antimony is a subclass of elemental substance.",
  "miloA4345": "51 is the atomic number of antimony.",
  "miloA4346": "Tellurium is a subclass of elemental substance.",
  "miloA4347": "52 is the atomic number of tellurium.",
  "miloA4348": "Iodine is a subclass of elemental substance.",
  "miloA4349": "53 is the atomic number of iodine.",
  "miloA4350": "Xenon is a subclass of elemental substance.",
  "miloA4351": "54 is the atomic number of xenon.",
  "miloA4352": "Caesium is a subclass of elemental substance.",
  "miloA4353": "55 is the atomic number of caesium.",
  "miloA4354": "Barium is a subclass of elemental substance.",
  "miloA4355": "56 is the atomic number of barium.",
  "miloA4356": "Lanthanum is a subclass of elemental substance.",
  "miloA4357": "57 is the atomic number of lanthanum.",
  "miloA4358": "Cerium is a subclass of elemental substance.",
  "miloA4359": "58 is the atomic number of cerium.",
  "miloA4360": "Praseodymium is a subclass of elemental substance.",
  "miloA4361": "59 is the atomic number of praseodymium.",
  "miloA4362": "Neodymium is a subclass of elemental substance.",
  "miloA4363": "60 is the atomic number of neodymium.",
  "miloA4364": "Promethium is a subclass of elemental substance.",
  "miloA4365": "61 is the atomic number of promethium.",
  "miloA4366": "If ATOM is an instance of promethium and ATOM is an instance of atom, then ATOM is measured by 147 measured in amu for every ATOM.",
  "miloA4367": "Samarium is a subclass of elemental substance.",
  "miloA4368": "62 is the atomic number of samarium.",
  "miloA4369": "Europium is a subclass of elemental substance.",
  "miloA4370": "63 is the atomic number of europium.",
  "miloA4371": "Gadolinium is a subclass of elemental substance.",
  "miloA4372": "64 is the atomic number of gadolinium.",
  "miloA4373": "Terbium is a subclass of elemental substance.",
  "miloA4374": "65 is the atomic number of terbium.",
  "miloA4375": "Dysprosium is a subclass of elemental substance.",
  "miloA4376": "66 is the atomic number of dysprosium.",
  "miloA4377": "Holmium is a subclass of elemental substance.",
  "miloA4378": "67 is the atomic number of holmium.",
  "miloA4379": "Erbium is a subclass of elemental substance.",
  "miloA4380": "68 is the atomic number of erbium.",
  "miloA4381": "Thulium is a subclass of elemental substance.",
  "miloA4382": "69 is the atomic number of thulium.",
  "miloA4383": "Ytterbium is a subclass of elemental substance.",
  "miloA4384": "70 is the atomic number of ytterbium.",
  "miloA4385": "Lutetium is a subclass of elemental substance.",
  "miloA4386": "71 is the atomic number of lutetium.",
  "miloA4387": "Hafnium is a subclass of elemental substance.",
  "miloA4388": "72 is the atomic number of hafnium.",
  "miloA4389": "Tantalum is a subclass of elemental substance.",
  "miloA4390": "73 is the atomic number of tantalum.",
  "miloA4391": "Tungsten is a subclass of elemental substance.",
  "miloA4392": "74 is the atomic number of tungsten.",
  "miloA4393": "Rhenium is a subclass of elemental substance.",
  "miloA4394": "75 is the atomic number of rhenium.",
  "miloA4395": "Osmium is a subclass of elemental substance.",
  "miloA4396": "76 is the atomic number of osmium.",
  "miloA4397": "Iridium is a subclass of elemental substance.",
  "miloA4398": "77 is the atomic number of iridium.",
  "miloA4399": "Platinum is a subclass of elemental substance.",
  "miloA4400": "78 is the atomic number of platinum.",
  "miloA4401": "Gold is a subclass of elemental substance.",
  "miloA4402": "79 is the atomic number of gold.",
  "miloA4403": "Mercury is a subclass of elemental substance.",
  "miloA4404": "80 is the atomic number of mercury.",
  "miloA4405": "Thallium is a subclass of elemental substance.",
  "miloA4406": "81 is the atomic number of thallium.",
  "miloA4407": "Lead is a subclass of elemental substance.",
  "miloA4408": "82 is the atomic number of lead.",
  "miloA4409": "Bismuth is a subclass of elemental substance.",
  "miloA4410": "83 is the atomic number of bismuth.",
  "miloA4411": "Polonium is a subclass of elemental substance.",
  "miloA4412": "84 is the atomic number of polonium.",
  "miloA4413": "If ATOM is an instance of polonium and ATOM is an instance of atom, then ATOM is measured by 210 measured in amu for every ATOM.",
  "miloA4414": "Astatine is a subclass of elemental substance.",
  "miloA4415": "85 is the atomic number of astatine.",
  "miloA4416": "If ATOM is an instance of astatine and ATOM is an instance of atom, then ATOM is measured by 210 measured in amu for every ATOM.",
  "miloA4417": "Radon is a subclass of elemental substance.",
  "miloA4418": "86 is the atomic number of radon.",
  "miloA4419": "If ATOM is an instance of radon and ATOM is an instance of atom, then ATOM is measured by 222 measured in amu for every ATOM.",
  "miloA4420": "Francium is a subclass of elemental substance.",
  "miloA4421": "87 is the atomic number of francium.",
  "miloA4422": "If ATOM is an instance of francium and ATOM is an instance of atom, then ATOM is measured by 223 measured in amu for every ATOM.",
  "miloA4423": "Radium is a subclass of elemental substance.",
  "miloA4424": "88 is the atomic number of radium.",
  "miloA4425": "If ATOM is an instance of radium and ATOM is an instance of atom, then ATOM is measured by 226 measured in amu for every ATOM.",
  "miloA4426": "Actinium is a subclass of elemental substance.",
  "miloA4427": "89 is the atomic number of actinium.",
  "miloA4428": "If ATOM is an instance of actinium and ATOM is an instance of atom, then ATOM is measured by 227 measured in amu for every ATOM.",
  "miloA4429": "Thorium is a subclass of elemental substance.",
  "miloA4430": "90 is the atomic number of thorium.",
  "miloA4431": "Protactinium is a subclass of elemental substance.",
  "miloA4432": "91 is the atomic number of protactinium.",
  "miloA4433": "If ATOM is an instance of protactinium and ATOM is an instance of atom, then ATOM is measured by 231 measured in amu for every ATOM.",
  "miloA4434": "Uranium is a subclass of elemental substance.",
  "miloA4435": "92 is the atomic number of uranium.",
  "miloA4436": "If ATOM is an instance of uranium and ATOM is an instance of atom, then ATOM is measured by 231 measured in amu for every ATOM.",
  "miloA4437": "Neptunium is a subclass of elemental substance.",
  "miloA4438": "93 is the atomic number of neptunium.",
  "miloA4439": "If ATOM is an instance of neptunium and ATOM is an instance of atom, then ATOM is measured by 237 measured in amu for every ATOM.",
  "miloA4440": "Plutonium is a subclass of elemental substance.",
  "miloA4441": "94 is the atomic number of plutonium.",
  "miloA4442": "If ATOM is an instance of plutonium and ATOM is an instance of atom, then ATOM is measured by 242 measured in amu for every ATOM.",
  "miloA4443": "Americium is a subclass of elemental substance.",
  "miloA4444": "95 is the atomic number of americium.",
  "miloA4445": "If ATOM is an instance of americium and ATOM is an instance of atom, then ATOM is measured by 243 measured in amu for every ATOM.",
  "miloA4446": "Curium is a subclass of elemental substance.",
  "miloA4447": "96 is the atomic number of curium.",
  "miloA4448": "If ATOM is an instance of curium and ATOM is an instance of atom, then ATOM is measured by 247 measured in amu for every ATOM.",
  "miloA4449": "Berkelium is a subclass of elemental substance.",
  "miloA4450": "97 is the atomic number of berkelium.",
  "miloA4451": "If ATOM is an instance of berkelium and ATOM is an instance of atom, then ATOM is measured by 247 measured in amu for every ATOM.",
  "miloA4452": "Californium is a subclass of elemental substance.",
  "miloA4453": "98 is the atomic number of californium.",
  "miloA4454": "If ATOM is an instance of californium and ATOM is an instance of atom, then ATOM is measured by 249 measured in amu for every ATOM.",
  "miloA4455": "Einsteinium is a subclass of elemental substance.",
  "miloA4456": "99 is the atomic number of einsteinium.",
  "miloA4457": "If ATOM is an instance of einsteinium and ATOM is an instance of atom, then ATOM is measured by 254 measured in amu for every ATOM.",
  "miloA4458": "Fermium is a subclass of elemental substance.",
  "miloA4459": "100 is the atomic number of fermium.",
  "miloA4460": "If ATOM is an instance of fermium and ATOM is an instance of atom, then ATOM is measured by 253 measured in amu for every ATOM.",
  "miloA4461": "Mendelevium is a subclass of elemental substance.",
  "miloA4462": "101 is the atomic number of mendelevium.",
  "miloA4463": "If ATOM is an instance of mendelevium and ATOM is an instance of atom, then ATOM is measured by 256 measured in amu for every ATOM.",
  "miloA4464": "Nobelium is a subclass of elemental substance.",
  "miloA4465": "102 is the atomic number of nobelium.",
  "miloA4466": "If ATOM is an instance of nobelium and ATOM is an instance of atom, then ATOM is measured by 254 measured in amu for every ATOM.",
  "miloA4467": "Lawrencium is a subclass of elemental substance.",
  "miloA4468": "103 is the atomic number of lawrencium.",
  "miloA4469": "If ATOM is an instance of lawrencium and ATOM is an instance of atom, then ATOM is measured by 262 measured in amu for every ATOM.",
  "miloA4470": "Unnilquadium is a subclass of elemental substance.",
  "miloA4471": "104 is the atomic number of unnilquadium.",
  "miloA4472": "If ATOM is an instance of unnilquadium and ATOM is an instance of atom, then ATOM is measured by 261 measured in amu for every ATOM.",
  "miloA4473": "Unnilpentium is a subclass of elemental substance.",
  "miloA4474": "105 is the atomic number of unnilpentium.",
  "miloA4475": "If ATOM is an instance of unnilpentium and ATOM is an instance of atom, then ATOM is measured by 262 measured in amu for every ATOM.",
  "miloA4476": "Unnilhexium is a subclass of elemental substance.",
  "miloA4477": "106 is the atomic number of unnilhexium.",
  "miloA4478": "If ATOM is an instance of unnilhexium and ATOM is an instance of atom, then ATOM is measured by 263 measured in amu for every ATOM.",
  "miloA4479": "Unnilseptium is a subclass of elemental substance.",
  "miloA4480": "107 is the atomic number of unnilseptium.",
  "miloA4481": "If ATOM is an instance of unnilseptium and ATOM is an instance of atom, then ATOM is measured by 262 measured in amu for every ATOM.",
  "miloA4482": "Unniloctium is a subclass of elemental substance.",
  "miloA4483": "108 is the atomic number of unniloctium.",
  "miloA4484": "If ATOM is an instance of unniloctium and ATOM is an instance of atom, then ATOM is measured by 265 measured in amu for every ATOM.",
  "miloA4485": "Meitnerium is a subclass of elemental substance.",
  "miloA4486": "109 is the atomic number of meitnerium.",
  "miloA4487": "If ATOM is an instance of meitnerium and ATOM is an instance of atom, then ATOM is measured by 266 measured in amu for every ATOM.",
  "miloA4488": "Unnildecium is a subclass of elemental substance.",
  "miloA4489": "110 is the atomic number of unnildecium.",
  "miloA4490": "If ATOM is an instance of unnildecium and ATOM is an instance of atom, then ATOM is measured by 272 measured in amu for every ATOM.",
  "miloA4633": "Vehicle door is a subclass of device.",
  "miloA4639": "Device normal is an instance of internal attribute.",
  "miloA4640": "If D is an instance of object and F is an instance of formula and D has the attribute device normal and D has the purpose of F, then the statement F has the modal force of possibility for every D and F.",
  "miloA4641": "Device damaged is an instance of internal attribute.",
  "miloA4642": "Nothing can simultaneously be device damaged and device normal.",
  "miloA4643": "If D is an instance of object and F is an instance of formula and D has the attribute device damaged and D has the purpose of F, then the statement F does not have the modal force of possibility for every D and F.",
  "miloA4644": "Vending is a subclass of financial transaction.",
  "miloA4645": "If V is an instance of vending, then there is at least one VM for which VM is an instance of vending machine and VM is the origin of V for every V.",
  "miloA4646": "Vending machine is a subclass of machine.",
  "miloA4649": "Coin operated is an instance of attribute.",
  "miloA4650": "If M is an instance of object and M has the attribute coin operated, then M is an instance of machine for every M.",
  "miloA4652": "Fish tank is a subclass of fluid container.",
  "miloA4654": "Collectible is an instance of relational attribute.",
  "miloA4656": "Trading card is a subclass of icon.",
  "miloA4657": "If TC is an instance of object and TC is an instance of trading card, then TC has the attribute collectible for every TC.",
  "miloA4666": "Smart phone is a subclass of mobile cell phone.",
  "miloA4668": "The predicate suffers is an instance of case role.",
  "miloA4669": "The predicate suffers is an instance of binary relation.",
  "miloA4672": "If B is an instance of agent and A is an instance of process and B suffers from A, then A does not benefit B for every A and B.",
  "miloA4673": "If B is an instance of agent and A is an instance of process and A benefits B, then B does not suffer from A for every A and B.",
  "miloA4674": "If PROCESS is an instance of process and PROCESSSTART is an instance of time point and AGENT is an instance of agent and AGENTEND is an instance of time point and PROCESSSTART is equal to the beginning of the interval the time when PROCESS takes place and AGENTEND is equal to the end of the interval the time when AGENT takes place and AGENT suffers from PROCESS, then PROCESSSTART occurs before AGENTEND for every PROCESS, AGENT, PROCESSSTART and AGENTEND.",
  "miloA4675": "If B is an instance of cognitive agent and A is an instance of process and A benefits B, then B wants A for every B and A.",
  "miloA4676": "If B is an instance of cognitive agent and A is an instance of process and B suffers from A, then B does not want A for every B and A.",
  "miloA4677": "Apologizing is a subclass of stating.",
  "miloA4679": "Confirming is a subclass of stating.",
  "miloA4681": "Elaborating is a subclass of linguistic communication.",
  "miloA4682": "Restating is a subclass of linguistic communication.",
  "miloA4683": "Correcting is a subclass of stating.",
  "miloA4684": "If CS is an instance of proposition and C is an instance of correcting, then there is at least one D, S, SP and CP for which SP is an instance of proposition and CP is an instance of proposition and D is an instance of disagreeing and C is a subprocess of D and S is an instance of stating and S contains information SP and C contains information CP and CP refers to SP and CS is not consistent with SP for every C and CS.",
  "miloA4685": "Prompting is a subclass of requesting.",
  "miloA4687": "The function CoveringFn is an instance of unary function.",
  "miloA4691": "The predicate covers is an instance of binary predicate.",
  "miloA4692": "The predicate covers is an instance of transitive relation.",
  "miloA4693": "The predicate covers is an instance of spatial relation.",
  "miloA4696": "If B is an instance of object and A is an instance of object and S is an instance of object and A covers B and S is a superficial part of B, then A meets S for every B, A and S.",
  "miloA4702": "The predicate beforeOnPath is an instance of quaternary predicate.",
  "miloA4703": "The predicate beforeOnPath is an instance of spatial relation.",
  "miloA4704": "If PATH is an instance of object and O3 is an instance of object and O2 is an instance of object and O1 is an instance of object and O2 is located between O1 and O3 on the path PATH and T is an instance of transfer and PATH is the path which T follows and O1 is the origin of T and T ends at O3, then O1 is located before O2 on the path PATH with respect to T and O2 is located before O3 on the path PATH with respect to T for every O1, O2, O3, PATH and T.",
  "miloA4709": "The predicate approximateValue is an instance of binary predicate.",
  "schemaBinaryRelationA1": "If VAR2 is an instance of set or class and VAR1 is an instance of set or class, then VAR1 is a subclass of VAR2 if and only if the predicate subclass holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA2": "If VAR2 is an instance of relation and VAR1 is an instance of relation, then VAR1 is a subrelation of VAR2 if and only if the predicate subrelation holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA3": "If VAR2 is an instance of attribute and VAR1 is an instance of attribute, then VAR1 is a subattribute of VAR2 if and only if the predicate subAttribute holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA4": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is a part of VAR2 if and only if the predicate part holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA5": "If VAR2 is an instance of collection and VAR1 is an instance of collection, then VAR1 is a proper sub-collection of VAR2 if and only if the predicate subCollection holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA6": "If VAR2 is an instance of quantity and VAR1 is an instance of quantity, then VAR1 is less than or equal to VAR2 if and only if the predicate lessThanOrEqualTo holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA7": "If VAR2 is an instance of quantity and VAR1 is an instance of quantity, then VAR1 is greater than or equal to VAR2 if and only if the predicate greaterThanOrEqualTo holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA8": "If VAR2 is an instance of list and VAR1 is an instance of list, then VAR1 is a sublist of VAR2 if and only if the predicate subList holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA9": "If VAR2 is an instance of list and VAR1 is an instance of list, then VAR1 starts the list VAR2 if and only if the predicate initialList holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA10": "If VAR2 is a subclass of content bearing physical and VAR1 is a subclass of content bearing physical, then VAR1 subsumes the content of VAR2 if and only if the predicate subsumesContentClass holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA11": "If VAR2 is an instance of content bearing physical and VAR1 is an instance of content bearing physical, then VAR1 subsumes the content of VAR2 if and only if the predicate subsumesContentInstance holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA12": "If VAR2 is an instance of time position and VAR1 is an instance of time position, then VAR1 is a temporal part of VAR2 if and only if the predicate temporalPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA13": "If VAR2 is an instance of time point and VAR1 is an instance of time point, then VAR1 occurs before or at VAR2 if and only if the predicate beforeOrEqual holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA14": "If VAR2 is an instance of process and VAR1 is an instance of process, then VAR1 is a subprocess of VAR2 if and only if the predicate subProcess holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA15": "If VAR2 is an instance of organization and VAR1 is an instance of organization, then VAR1 is a part of the organization VAR2 if and only if the predicate subOrganization holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA16": "If VAR2 is an instance of geometric figure and VAR1 is an instance of geometric figure, then VAR1 is a geometric part of VAR2 if and only if the predicate geometricPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA17": "If VAR2 is an instance of abstract and VAR1 is an instance of abstract, then VAR1 is an abstract part of VAR2 if and only if the predicate abstractPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA18": "VAR1 is equal to VAR2 if and only if the predicate equal holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA19": "VAR1 is internally related to VAR2 if and only if the predicate relatedInternalConcept holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA20": "If VAR2 is an instance of list and VAR1 is an instance of list, then VAR1 has identical items as list VAR2 if and only if the predicate identicalListItems holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA21": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is a exact copy of VAR2 if and only if the predicate copy holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA22": "If VAR2 is a subclass of content bearing physical and VAR1 is a subclass of content bearing physical, then VAR1 is equivalent to VAR2 if and only if the predicate equivalentContentClass holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA23": "If VAR2 is an instance of content bearing physical and VAR1 is an instance of content bearing physical, then VAR1 is equivalent to VAR2 if and only if the predicate equivalentContentInstance holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA24": "If VAR2 is an instance of physical and VAR1 is an instance of physical, then VAR1 occurs at the same time as VAR2 if and only if the predicate cooccur holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA25": "If VAR2 is an instance of organism and VAR1 is an instance of organism, then VAR1 is related to VAR2 if and only if the predicate familyRelation holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA26": "If VAR2 is an instance of graph and VAR1 is an instance of graph, then VAR1 is a subgraph of VAR2 if and only if the predicate subGraph holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA27": "If VAR2 is an instance of time interval and VAR1 is an instance of time interval, then VAR1 overlaps VAR2 if and only if the predicate overlapsTemporally holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA28": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is connected to VAR2 if and only if the predicate connected holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA29": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 overlaps with VAR2  if and only if the predicate overlapsSpatially holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA30": "If VAR2 is an instance of symbolic string and VAR1 is an instance of symbolic string, then VAR1 is a sub string in VAR2 if and only if the predicate subString holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA31": "If VAR2 is an instance of agent and VAR1 is an instance of process, then VAR2 is the agent of VAR1 if and only if the predicate agent holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA32": "If VAR1 is an instance of process, then VAR1 ends at VAR2 if and only if the predicate destination holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA33": "If VAR2 is an instance of agent and VAR1 is an instance of process, then VAR2 experiences VAR1 if and only if the predicate experiencer holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA34": "If VAR2 is an instance of object and VAR1 is an instance of process, then VAR2 is the origin of VAR1 if and only if the predicate origin holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA35": "If VAR1 is an instance of process, then VAR2 is a participant in VAR1 if and only if the predicate patient holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA36": "If VAR2 is an instance of object and VAR1 is an instance of process, then the process VAR1 is partly located on VAR2 if and only if the predicate eventPartlyLocated holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA37": "If VAR2 is an instance of object and VAR1 is an instance of motion, then VAR1 moves VAR2 if and only if the predicate moves holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA38": "If VAR2 is an instance of object and VAR1 is an instance of translocation, then VAR1 changes the location of VAR2 if and only if the predicate changesLocation holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA39": "If VAR2 is an instance of object and VAR1 is an instance of motion, then VAR2 is the path which VAR1 follows if and only if the predicate path holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA40": "If VAR2 is an instance of positional attribute and VAR1 is an instance of process, then entities in the process VAR1 are moving VAR2 if and only if the predicate direction holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA41": "If VAR2 is an instance of animal and VAR1 is an instance of confining, then VAR2 is detained by VAR1 if and only if the predicate detainee holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA42": "If VAR2 is an instance of object and VAR1 is an instance of process, then VAR2 is a target in the attack VAR1 if and only if the predicate targetInAttack holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA43": "If VAR2 is an instance of object and VAR1 is an instance of experimenting, then VAR2 serves as a control in VAR1 if and only if the predicate experimentalControl holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA44": "If VAR2 is an instance of object and VAR1 is an instance of achieving control, then VAR2 is controlled by VAR1 if and only if the predicate controlled holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA45": "If VAR2 is an instance of agent and VAR1 is an instance of achieving control, then VAR1 gains control over VAR2 if and only if the predicate gainsControl holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA46": "If VAR2 is an instance of agent and VAR1 is an instance of change of control, then VAR1 loses control over VAR2 if and only if the predicate losesControl holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA47": "If VAR2 is an instance of agent and VAR1 is an instance of placing under arrest, then VAR1 is arrested by VAR2 if and only if the predicate arrested holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA48": "If VAR2 is an instance of transportation device and VAR1 is an instance of transportation, then VAR2 is the transportation device used in VAR1 if and only if the predicate conveyance holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA49": "If VAR2 is an instance of agent and VAR1 is an instance of process, then VAR2 suffers from VAR1 if and only if the predicate suffers holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA50": "If VAR2 is an instance of formula and VAR1 is an instance of cognitive agent, then VAR1 desires VAR2 if and only if the predicate desires holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA51": "If VAR2 is an instance of formula and VAR1 is an instance of cognitive agent, then VAR1 considers VAR2 if and only if the predicate considers holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA52": "If VAR2 is an instance of formula and VAR1 is an instance of cognitive agent, then VAR1 believes VAR2 if and only if the predicate believes holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA53": "If VAR2 is an instance of formula and VAR1 is an instance of cognitive agent, then VAR1 knows VAR2 if and only if the predicate knows holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA54": "If VAR2 is an instance of formula and VAR1 is an instance of cognitive agent, then VAR1 doubts VAR2 if and only if the predicate doubts holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA55": "If VAR2 is an instance of formula and VAR1 is an instance of cognitive agent, then VAR1 disapproves VAR2 if and only if the predicate disapproves holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA56": "If VAR2 is an instance of set or class, then VAR1 is an immediate instance of VAR2 if and only if the predicate immediateInstance holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA57": "If VAR2 is an instance of set or class and VAR1 is an instance of set or class, then VAR1 is an immediate subclass of VAR2 if and only if the predicate immediateSubclass holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA58": "If VAR2 is an instance of set or class and VAR1 is an instance of function, then the range of VAR1 is an instance of VAR2 if and only if the predicate range holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA59": "If VAR2 is a subclass of set or class and VAR1 is an instance of function, then the values returned by VAR1 are subclasses of VAR2 if and only if the predicate rangeSubclass holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA60": "If VAR2 is an instance of positive integer and VAR1 is an instance of relation, then VAR1 has a valence of VAR2 if and only if the predicate valence holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA61": "If VAR2 is an instance of attribute and VAR1 is an instance of attribute, then VAR1 is an immediate successor attribute of VAR2 if and only if the predicate successorAttribute holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA62": "If VAR1 is an instance of self connected object, then the front of VAR1 is VAR2 if and only if the function FrontFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA63": "If VAR1 is an instance of self connected object, then the back of VAR1 is VAR2 if and only if the function BackFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA64": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is a proper part of VAR2 if and only if the predicate properPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA65": "If VAR2 is an instance of object and VAR1 is an instance of self connected object, then VAR1 contains VAR2 if and only if the predicate contains holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA66": "If VAR2 is an instance of collection and VAR1 is an instance of self connected object, then VAR1 is a member of VAR2 if and only if the predicate member holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA67": "If VAR2 is an instance of proposition and VAR1 is an instance of content bearing physical, then VAR1 contains information VAR2 if and only if the predicate containsInformation holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA68": "If VAR2 is an instance of human and VAR1 is an instance of agent, then VAR2 is the leader of VAR1 if and only if the predicate leader holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA69": "If VAR2 is an instance of attribute and VAR1 is an instance of object, then VAR1 has the attribute VAR2 if and only if the predicate attribute holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA70": "If VAR2 is an instance of attribute and VAR1 is an instance of process, then VAR1 is performed in the manner of VAR2 if and only if the predicate manner holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA71": "If VAR1 is an instance of process, then VAR2 is involved in VAR1 if and only if the predicate involvedInEvent holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA72": "If VAR1 is an instance of formula, then the probability of VAR1 is VAR2 if and only if the function ProbabilityFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA73": "If VAR2 is an instance of list, then VAR1 is in list VAR2 if and only if the predicate inList holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA74": "If VAR2 is an instance of set or class and VAR1 is an instance of function, then VAR1 is closed on VAR2 if and only if the predicate closedOn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA75": "If VAR2 is an instance of set or class and VAR1 is an instance of binary relation, then VAR1 is reflexive on VAR2 if and only if the predicate reflexiveOn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA76": "If VAR2 is an instance of set or class and VAR1 is an instance of binary relation, then VAR1 is irreflexive on VAR2 if and only if the predicate irreflexiveOn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA77": "If VAR2 is an instance of set or class and VAR1 is an instance of binary relation, then VAR1 is a partial ordering on VAR2 if and only if the predicate partialOrderingOn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA78": "If VAR2 is an instance of set or class and VAR1 is an instance of binary relation, then VAR1 is a total ordering on VAR2 if and only if the predicate totalOrderingOn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA79": "If VAR2 is an instance of set or class and VAR1 is an instance of binary relation, then VAR1 is trichotomizing on VAR2 if and only if the predicate trichotomizingOn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA80": "If VAR2 is an instance of set or class and VAR1 is an instance of binary relation, then VAR1 is an equivalence relation on VAR2 if and only if the predicate equivalenceRelationOn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA81": "If VAR2 is an instance of process and VAR1 is an instance of process, then VAR1 causes VAR2 if and only if the predicate causes holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA82": "If VAR2 is a subclass of process and VAR1 is a subclass of process, then VAR1 causes subclass VAR2 if and only if the predicate causesSubclass holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA83": "If VAR2 is an instance of formula and VAR1 is an instance of formula, then VAR1 causes proposition VAR2 if and only if the predicate causesProposition holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA84": "If VAR2 is an instance of time position and VAR1 is an instance of physical, then VAR1 exists during VAR2 if and only if the predicate time holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA85": "If VAR2 is an instance of formula and VAR1 is an instance of time position, then VAR2 holds during VAR1 if and only if the predicate holdsDuring holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA86": "If VAR2 is an instance of agent and VAR1 is an instance of object, then VAR1 exploits VAR2 if and only if the predicate exploits holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA87": "If VAR2 is an instance of formula and VAR1 is an instance of physical, then VAR1 has the purpose of VAR2 if and only if the predicate hasPurpose holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA88": "If VAR2 is an instance of agent and VAR1 is a subclass of process, then VAR1 has the skill to do VAR2 if and only if the predicate hasSkill holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA89": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 crosses VAR2 if and only if the predicate crosses holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA90": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 penetrates VAR2 if and only if the predicate penetrates holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA91": "If VAR2 is an instance of object and VAR1 is an instance of agent, then VAR1 possesses VAR2 if and only if the predicate possesses holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA92": "If VAR2 is a subclass of process and VAR1 is a subclass of process, then VAR1 is a precondition of VAR2 if and only if the predicate precondition holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA93": "If VAR2 is an instance of proposition and VAR1 is an instance of process, then VAR1 realizes the content of VAR2 if and only if the predicate realization holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA94": "If VAR2 is an instance of language and VAR1 is an instance of linguistic expression, then VAR1 is expressed in the language VAR2 if and only if the predicate expressedInLanguage holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA95": "If VAR2 is an instance of agent and VAR1 is an instance of object, then VAR1 uses VAR2 if and only if the predicate uses holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA96": "If VAR1 is an instance of binary function, then VAR2 is the identity element of VAR1 if and only if the predicate identityElement holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA97": "If VAR2 is an instance of set, then VAR1 is an element of VAR2 if and only if the predicate element holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA98": "The cardinality of VAR1 is VAR2 if and only if the function CardinalityFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA99": "If VAR2 is an instance of graph and VAR1 is an instance of graph element, then VAR1 is part of the graph VAR2 if and only if the predicate graphPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA100": "If VAR2 is an instance of positive integer and VAR1 is an instance of graph path, then the path VAR1 has a length of VAR2 if and only if the predicate pathLength holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA101": "If VAR2 is an instance of physical quantity and VAR1 is an instance of object, then VAR1 is measured by VAR2 if and only if the predicate measure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA102": "If VAR2 is an instance of unit of atmospheric pressure and VAR1 is an instance of object, then the barometric pressure of VAR1 is VAR2 if and only if the predicate barometricPressure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA103": "If VAR2 is an instance of time duration and VAR1 is an instance of time interval, then VAR1 has a duration of VAR2 if and only if the predicate duration holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA104": "If VAR2 is an instance of time duration and VAR1 is a subclass of process, then VAR1 occurs every VAR2 if and only if the predicate frequency holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA105": "If VAR2 is an instance of time interval and VAR1 is an instance of time interval, then VAR1 meets VAR2 if and only if the predicate meetsTemporally holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA106": "If VAR2 is an instance of day and VAR1 is an instance of physical, then VAR2 is the date of VAR1 if and only if the predicate date holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA107": "If VAR2 is an instance of self connected object and VAR1 is an instance of self connected object, then VAR1 is a surface of VAR2 if and only if the predicate surface holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA108": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is an interior part of VAR2 if and only if the predicate interiorPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA109": "If VAR2 is an instance of self connected object and VAR1 is an instance of hole, then VAR1 is a hole in VAR2 if and only if the predicate hole holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA110": "If VAR1 is an instance of hole, then the principle host of the hole VAR1 is VAR2 if and only if the function HoleHostFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA111": "If VAR2 is an instance of hole and VAR1 is an instance of object, then VAR1 partially fills VAR2 if and only if the predicate partiallyFills holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA112": "If VAR2 is an instance of hole and VAR1 is an instance of object, then VAR1 properly fills VAR2 if and only if the predicate properlyFills holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA113": "If VAR2 is an instance of hole and VAR1 is an instance of object, then VAR1 completely fills VAR2 if and only if the predicate completelyFills holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA114": "If VAR2 is an instance of hole and VAR1 is an instance of object, then VAR1 fills VAR2 if and only if the predicate fills holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA115": "If VAR1 is an instance of hole, then VAR1 is a hole in the skin VAR2 if and only if the function HoleSkinFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA116": "If VAR2 is an instance of positive integer and VAR1 is a subclass of elemental substance, then VAR2 is the atomic number of VAR1 if and only if the predicate atomicNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA117": "If VAR2 is an instance of geographic area and VAR1 is an instance of geographic area, then VAR1 is a geographic subregion of VAR2 if and only if the predicate geographicSubregion holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA118": "If VAR2 is an instance of geopolitical area and VAR1 is an instance of geopolitical area, then VAR1 is a geopolitical subdivision of VAR2 if and only if the predicate geopoliticalSubdivision holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA119": "If VAR2 is an instance of developmental attribute and VAR1 is an instance of organic object, then VAR2 is an earlier stage in the development of VAR1 if and only if the predicate developmentalForm holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA120": "If VAR2 is an instance of object and VAR1 is an instance of organism, then VAR1 lives in VAR2 if and only if the predicate inhabits holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA121": "If VAR2 is a subclass of text and VAR1 is an instance of agent, then VAR1 is the author of VAR2 if and only if the predicate authors holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA122": "If VAR2 is a subclass of text and VAR1 is an instance of agent, then VAR1 is the editor of VAR2 if and only if the predicate editor holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA123": "If VAR2 is a subclass of text and VAR1 is an instance of organization, then VAR1 publishes VAR2 if and only if the predicate publishes holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA124": "If VAR2 is a subclass of artifact and VAR1 is a subclass of artifact, then VAR1 is a version of VAR2 if and only if the predicate version holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA125": "If VAR2 is an instance of organism and VAR1 is an instance of organism, then VAR1 is a parent of VAR2 if and only if the predicate parent holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA126": "If VAR2 is an instance of woman and VAR1 is an instance of man, then VAR1 is the husband of VAR2 if and only if the predicate husband holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA127": "If VAR2 is an instance of man and VAR1 is an instance of woman, then VAR1 is the wife of VAR2 if and only if the predicate wife holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA128": "If VAR2 is an instance of nation and VAR1 is an instance of human, then VAR1 is a citizen of VAR2 if and only if the predicate citizen holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA129": "If VAR2 is an instance of normative attribute and VAR1 is an instance of formula, then the statement VAR1 has the modal force of VAR2 if and only if the predicate modalAttribute holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA130": "If VAR2 is an instance of cognitive agent and VAR1 is an instance of formula, then VAR2 has the right to perform VAR1 if and only if the predicate holdsRight holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA131": "If VAR2 is an instance of cognitive agent and VAR1 is an instance of formula, then VAR2 is obliged to perform tasks of the type VAR1 if and only if the predicate holdsObligation holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA132": "If VAR2 is an instance of integer and VAR1 is an instance of organization, then VAR1 is founded in the year VAR2 if and only if the predicate yearOfFounding holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA133": "If VAR2 is an instance of artifact and VAR1 is an instance of device, then VAR1 is the power-producing component of VAR2 if and only if the predicate powerPlant holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA134": "If VAR2 is an instance of organization and VAR1 is an instance of proposition, then VAR1 is insured by VAR2 if and only if the predicate insured holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA135": "If VAR2 is an instance of currency measure and VAR1 is an instance of financial transaction, then VAR1 has a loss of VAR2 if and only if the predicate loss holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA136": "If VAR2 is an instance of currency measure and VAR1 is an instance of financial transaction, then VAR1 has a profit of VAR2 if and only if the predicate profit holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA137": "If VAR2 is an instance of cognitive agent and VAR1 is an instance of cognitive agent, then VAR1 is a customer of VAR2 if and only if the predicate customer holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA138": "If VAR2 is an instance of human and VAR1 is an instance of symbolic string, then VAR1 is the family name of VAR2 if and only if the predicate familyName holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA139": "If VAR2 is an instance of human and VAR1 is an instance of symbolic string, then VAR1 is the middle name of VAR2 if and only if the predicate middleName holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA140": "If VAR2 is an instance of human and VAR1 is an instance of symbolic string, then VAR1 is the given name of VAR2 if and only if the predicate givenName holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA141": "If VAR2 is an instance of structure attribute and VAR1 is an instance of object, then the structure of VAR1 is VAR2 if and only if the predicate structure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA142": "If VAR2 is an instance of agent and VAR1 is an instance of object, then VAR2 is operating VAR1 if and only if the predicate operator holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA143": "If VAR2 is an instance of object and VAR1 is an instance of transportation, then VAR1 is transported by VAR2 if and only if the predicate transported holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA144": "If VAR2 is an instance of object and VAR1 is an instance of shipping, then VAR2 is cargo on VAR1 if and only if the predicate cargo holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA145": "If VAR2 is an instance of cognitive agent and VAR1 is an instance of service process, then VAR2 is the supplier of the service provided in VAR1 if and only if the predicate serviceProvider holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA146": "If VAR2 is an instance of cognitive agent and VAR1 is an instance of service process, then VAR2 is the receiver of the service provided in VAR1 if and only if the predicate serviceRecipient holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA147": "If VAR2 is an instance of agent and VAR1 is an instance of process, then VAR1 benefits VAR2 if and only if the predicate benefits holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA148": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is a grandparent of VAR2 if and only if the predicate grandparent holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA149": "If VAR2 is an instance of agent and VAR1 is an instance of symbolic string, then VAR1 is an alias of VAR2 if and only if the predicate alias holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA150": "If VAR2 is an instance of postal place and VAR1 is an instance of cognitive agent, then VAR1 is the work address of VAR2 if and only if the predicate workAddress holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA151": "If VAR2 is an instance of human and VAR1 is an instance of permanent residence, then VAR1 is the home address of VAR2 if and only if the predicate homeAddress holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA152": "If VAR2 is an instance of agent and VAR1 is an instance of content bearing object, then VAR1 is a deceptive representation of VAR2 if and only if the predicate deceptiveIdentifier holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA153": "If VAR2 is an instance of symbolic string and VAR1 is an instance of nonnegative integer, then VAR1 is the length of the string VAR2 if and only if the predicate stringLength holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA154": "If VAR2 is an instance of agent and VAR1 is an instance of contact site, then VAR1 is the site at which VAR2 can be contacted if and only if the predicate siteForContact holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA155": "If VAR2 is an instance of agent and VAR1 is an instance of postal place, then VAR1 is the post contact site of VAR2 if and only if the predicate postContactSite holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA156": "If VAR2 is an instance of neighborhood and VAR1 is an instance of postal place, then VAR1 is the postal place of the neighborhood VAR2 if and only if the predicate postNeighborhood holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA157": "If VAR2 is an instance of geopolitical area and VAR1 is an instance of postal place, then VAR1 is the postal place of the country VAR2 if and only if the predicate postCountry holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA158": "If VAR2 is an instance of state or province and VAR1 is an instance of postal place, then VAR1 is the postal place of the district VAR2 if and only if the predicate postDistrict holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA159": "If VAR2 is an instance of city and VAR1 is an instance of postal place, then VAR1 is the postal place of the city VAR2 if and only if the predicate postCity holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA160": "If VAR2 is an instance of postcode area and VAR1 is an instance of postal place, then VAR1 is the postal place of the postcode area VAR2 if and only if the predicate postPostcodeArea holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA161": "If VAR2 is an instance of roadway and VAR1 is an instance of postal place, then VAR1 is the postal place of the street VAR2 if and only if the predicate postStreet holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA162": "If VAR2 is an instance of postal place and VAR1 is an instance of symbolic string, then VAR1 is the street number of the postal place VAR2 if and only if the predicate postStreetNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA163": "If VAR2 is an instance of postal place and VAR1 is an instance of symbolic string, then VAR1 is the post office box of the postal place VAR2 if and only if the predicate postPostOfficeBox holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA164": "If VAR2 is an instance of postal place and VAR1 is an instance of postal address text, then VAR1 is the post addresss text of the postal place VAR2 if and only if the predicate postAddressText holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA165": "If VAR2 is an instance of agent and VAR1 is an instance of telephony device, then VAR1 is the telecom contact device of VAR2 if and only if the predicate telecomContactDevice holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA166": "If VAR2 is an instance of telephony device and VAR1 is an instance of telecom number, then VAR1 is the device telecom number of VAR2 if and only if the predicate deviceTelecomNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA167": "If VAR2 is an instance of telecom number and VAR1 is an instance of symbolic string, then VAR1 is the telecom core number of VAR2 if and only if the predicate telecomCoreNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA168": "If VAR2 is an instance of telecom number and VAR1 is an instance of symbolic string, then VAR1 is the telecom country code of VAR2 if and only if the predicate telecomCountryCode holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA169": "If VAR2 is an instance of telecom number and VAR1 is an instance of symbolic string, then VAR1 is the telecom area code of VAR2 if and only if the predicate telecomAreaCode holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA170": "If VAR2 is an instance of telecom number and VAR1 is an instance of symbolic string, then VAR1 is the telecom code of VAR2 if and only if the predicate telecomCode2 holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA171": "If VAR2 is an instance of telecom number and VAR1 is an instance of symbolic string, then VAR1 is the telecom extension of VAR2 if and only if the predicate telecomExtension holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA172": "If VAR2 is an instance of agent and VAR1 is an instance of telecom number, then VAR1 is the telephone number of VAR2 if and only if the predicate telephoneNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA173": "If VAR2 is an instance of human and VAR1 is an instance of telecom number, then VAR1 is the personal phone number of VAR2 if and only if the predicate personalPhoneNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA174": "If VAR2 is an instance of human and VAR1 is an instance of telecom number, then VAR1 is the home phone number of VAR2 if and only if the predicate homePhoneNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA175": "If VAR2 is an instance of agent and VAR1 is an instance of telecom number, then VAR1 is the work phone number of VAR2 if and only if the predicate workPhoneNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA176": "If VAR2 is an instance of agent and VAR1 is an instance of telecom number, then VAR1 is the mobile phone number of VAR2 if and only if the predicate mobilePhoneNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA177": "If VAR2 is an instance of agent and VAR1 is an instance of telecom number, then VAR1 is the fax number of VAR2 if and only if the predicate faxNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA178": "If VAR2 is an instance of binary relation and VAR1 is an instance of binary relation, then VAR1 is an inverse of VAR2 if and only if the predicate inverse holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA179": "If VAR2 is an instance of relation and VAR1 is an instance of relation, then VAR1 and VAR2 are disjoint if and only if the predicate disjointRelation holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA180": "If VAR2 is an instance of attribute and VAR1 is an instance of attribute, then VAR1 is a successor attribute of VAR2 if and only if the predicate successorAttributeClosure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA181": "If VAR2 is an instance of quantity and VAR1 is an instance of quantity, then VAR1 is less than VAR2 if and only if the predicate lessThan holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA182": "If VAR2 is an instance of quantity and VAR1 is an instance of quantity, then VAR1 is greater than VAR2 if and only if the predicate greaterThan holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA183": "If VAR2 is an instance of formula and VAR1 is an instance of formula, then VAR1 increases the likelihood of VAR2 if and only if the predicate increasesLikelihood holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA184": "If VAR2 is an instance of formula and VAR1 is an instance of formula, then VAR1 decreases the likelihood of VAR2 if and only if the predicate decreasesLikelihood holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA185": "If VAR2 is a subclass of process and VAR1 is a subclass of process, then VAR1 hinders subclass VAR2 if and only if the predicate hindersSubclass holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA186": "If VAR2 is a subclass of process and VAR1 is a subclass of process, then VAR1 prevents subclass VAR2 if and only if the predicate preventsSubclass holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA187": "If VAR2 is a subclass of process and VAR1 is an instance of process, then VAR1 prevents VAR2 if and only if the predicate prevents holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA188": "If VAR2 is a subclass of process and VAR1 is an instance of process, then VAR1 hinders VAR2 if and only if the predicate hinders holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA189": "If VAR2 is an instance of proposition and VAR1 is an instance of proposition, then VAR1 is a sub-proposition of VAR2 if and only if the predicate subProposition holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA190": "If VAR2 is an instance of plan and VAR1 is an instance of plan, then VAR1 is a sub-plan of VAR2 if and only if the predicate subPlan holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA191": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is larger than VAR2 if and only if the predicate larger holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA192": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is smaller than VAR2 if and only if the predicate smaller holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA193": "If VAR2 is an instance of time interval and VAR1 is an instance of time interval, then VAR1 starts VAR2 if and only if the predicate starts holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA194": "If VAR2 is an instance of time interval and VAR1 is an instance of time interval, then VAR1 finishes VAR2 if and only if the predicate finishes holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA195": "If VAR2 is an instance of time point and VAR1 is an instance of time point, then VAR1 occurs before VAR2 if and only if the predicate before holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA196": "If VAR2 is an instance of time interval and VAR1 is an instance of time interval, then VAR1 takes place during VAR2 if and only if the predicate during holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA197": "If VAR2 is an instance of time interval and VAR1 is an instance of time interval, then VAR1 occurs earlier than VAR2 if and only if the predicate earlier holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA198": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 meets VAR2 if and only if the predicate meetsSpatially holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA199": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 partially overlaps with VAR2 if and only if the predicate overlapsPartially holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA200": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is a superficial part of VAR2 if and only if the predicate superficialPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA201": "If VAR2 is an instance of engineering component and VAR1 is an instance of engineering component, then VAR1 is connected to VAR2 if and only if the predicate connectedEngineeringComponents holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA202": "If VAR2 is an instance of organism and VAR1 is an instance of organism, then VAR1 is an ancestor of VAR2 if and only if the predicate ancestor holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA203": "If VAR2 is an instance of organism and VAR1 is an instance of organism, then VAR1 is the sibling of VAR2 if and only if the predicate sibling holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA204": "If VAR2 is an instance of human and VAR1 is an instance of man, then VAR1 is the brother of VAR2 if and only if the predicate brother holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA205": "If VAR2 is an instance of human and VAR1 is an instance of woman, then VAR1 is the sister of VAR2 if and only if the predicate sister holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA206": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is the spouse of VAR2 if and only if the predicate spouse holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA207": "If VAR2 is an instance of compound substance and VAR1 is an instance of compound substance, then VAR1 and VAR2 are conjugated if and only if the predicate conjugate holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA208": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is a neighbor of VAR2 if and only if the predicate neighbor holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA209": "If VAR2 is an instance of military unit and VAR1 is an instance of military unit, then VAR1 is a force hostile to VAR2 if and only if the predicate hostileForces holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA210": "If VAR2 is an instance of field of study and VAR1 is an instance of field of study, then VAR1 is a sub-field of VAR2 if and only if the predicate subField holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA211": "If VAR2 is an instance of organization and VAR1 is an instance of organization, then VAR1 is the ancestor organization of VAR2 if and only if the predicate ancestorOrganization holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA212": "If VAR2 is an instance of set or class and VAR1 is an instance of set or class, then VAR1 is disjoint from VAR2 if and only if the predicate disjoint holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA213": "If VAR2 is an instance of formula and VAR1 is an instance of formula, then the probabilities of VAR1 and VAR2 being true are independent if and only if the predicate independentProbability holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA214": "If VAR2 is an instance of process and VAR1 is an instance of process, then VAR1 and VAR2 are related events if and only if the predicate relatedEvent holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA215": "If VAR2 is an instance of organism and VAR1 is an instance of organism, then VAR1 is a relative of VAR2 if and only if the predicate relative holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA216": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is legally realted to VAR2 if and only if the predicate legalRelation holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA217": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is a mutal acquaintance of VAR2 if and only if the predicate mutualAcquaintance holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA218": "If VAR2 is an instance of proposition and VAR1 is an instance of proposition, then VAR1 is consistent with VAR2 if and only if the predicate consistent holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA219": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is a friend of VAR2 if and only if the predicate friend holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA220": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is a coworker of VAR2 if and only if the predicate coworker holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA221": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is a cohabitant of VAR2 if and only if the predicate cohabitant holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA222": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 and VAR2 are strangers to each other if and only if the predicate mutualStranger holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA223": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is a domestic partner of VAR2 if and only if the predicate domesticPartner holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA224": "If VAR2 is an instance of object and VAR1 is an instance of physical, then VAR1 is located at VAR2 if and only if the predicate located holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA225": "If VAR2 is an instance of data storage device and VAR1 is an instance of content bearing object, then VAR1 is stored on VAR2 if and only if the predicate stored holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA226": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is the legal guardian of VAR2 if and only if the predicate legalGuardian holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA227": "If VAR2 is an instance of integer and VAR1 is an instance of integer, then VAR1 is a multiplicative factor of VAR2 if and only if the predicate multiplicativeFactor holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA228": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 covers VAR2 if and only if the predicate covers holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA229": "If VAR1 is an instance of unit of measure, then VAR2 is one thousand VAR1s if and only if the function KiloFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA230": "If VAR1 is an instance of unit of measure, then VAR2 is one million VAR1s if and only if the function MegaFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA231": "If VAR1 is an instance of unit of measure, then VAR2 is one billion VAR1s if and only if the function GigaFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA232": "If VAR1 is an instance of unit of measure, then VAR2 is one trillion VAR1s if and only if the function TeraFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA233": "If VAR1 is an instance of unit of measure, then VAR2 is one thousandth VAR1 if and only if the function MilliFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA234": "If VAR1 is an instance of unit of measure, then VAR2 is one millionth of VAR1 if and only if the function MicroFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA235": "If VAR1 is an instance of unit of measure, then VAR2 is one billionth of VAR1 if and only if the function NanoFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA236": "If VAR1 is an instance of unit of measure, then VAR2 is one trillionth of VAR1 if and only if the function PicoFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA237": "If VAR1 is an instance of set or class, then VAR2 is the set of all subclasses of VAR1 if and only if the function PowerSetFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA238": "If VAR1 is an instance of attribute, then VAR1 is the condition for membership in the class VAR2 if and only if the function ExtensionFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA239": "If VAR1 is an instance of list, then the length of the list VAR1 is VAR2 if and only if the function ListLengthFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA240": "If VAR1 is an instance of agent, then the property of VAR1 is VAR2 if and only if the function PropertyFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA241": "If VAR1 is an instance of real number, then the absolute value of VAR1 is VAR2 if and only if the function AbsoluteValueFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA242": "If VAR1 is an instance of real number, then the smallest integer greater than or equal to VAR1 is VAR2 if and only if the function CeilingFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA243": "If VAR1 is an instance of plane angle measure, then the cosine of VAR1 is VAR2 if and only if the function CosineFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA244": "If VAR1 is an instance of real number, then the denominator of VAR1 is VAR2 if and only if the function DenominatorFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA245": "If VAR1 is an instance of real number, then the largest integer less than or equal to VAR1 is VAR2 if and only if the function FloorFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA246": "If VAR1 is an instance of complex number, then the imaginary part of VAR1 is VAR2 if and only if the function ImaginaryPartFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA247": "If VAR1 is an instance of real number, then the integer square root of VAR1 is VAR2 if and only if the function IntegerSquareRootFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA248": "If VAR1 is an instance of real number, then the numerator of VAR1 is VAR2 if and only if the function NumeratorFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA249": "If VAR1 is an instance of number, then the rational representation of VAR1 is VAR2 if and only if the function RationalNumberFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA250": "If VAR1 is an instance of number, then the real part of VAR1 is VAR2 if and only if the function RealNumberFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA251": "If VAR1 is an instance of quantity, then the reciprocal of VAR1 is VAR2 if and only if the function ReciprocalFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA252": "If VAR1 is an instance of quantity, then the nearest integer to VAR1 is VAR2 if and only if the function RoundFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA253": "If VAR1 is an instance of real number, then the sign of VAR1 is VAR2 if and only if the function SignumFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA254": "If VAR1 is an instance of plane angle measure, then the sine of VAR1 is VAR2 if and only if the function SineFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA255": "If VAR1 is an instance of real number, then the square root of VAR1 is VAR2 if and only if the function SquareRootFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA256": "If VAR1 is an instance of plane angle measure, then the tangent of VAR1 is VAR2 if and only if the function TangentFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA257": "If VAR1 is an instance of integer, then the successor of VAR1 is VAR2 if and only if the function SuccessorFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA258": "If VAR1 is an instance of integer, then the predecessor of VAR1 is VAR2 if and only if the function PredecessorFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA259": "If VAR1 is an instance of set or class, then the complement of VAR1 is VAR2 if and only if the function ComplementFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA260": "If VAR1 is a subclass of set or class, then the generalized union of VAR1 is VAR2 if and only if the function GeneralizedUnionFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA261": "If VAR1 is a subclass of set or class, then the generalized intersection of VAR1 is VAR2 if and only if the function GeneralizedIntersectionFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA262": "If VAR1 is an instance of graph arc, then the starting node of VAR1 is VAR2 if and only if the function InitialNodeFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA263": "If VAR1 is an instance of graph arc, then the terminal node of VAR1 is VAR2 if and only if the function TerminalNodeFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA264": "If VAR1 is an instance of graph path, then the beginning of VAR1 is VAR2 if and only if the function BeginNodeFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA265": "If VAR1 is an instance of graph path, then the end of VAR1 is VAR2 if and only if the function EndNodeFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA266": "If VAR1 is an instance of graph path, then the weight of the path VAR1 is VAR2 if and only if the function PathWeightFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA267": "If VAR1 is an instance of graph, then the set of paths that partition VAR1 into two separate graphs is VAR2 if and only if the function CutSetFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA268": "If VAR1 is an instance of graph, then the set of minimal paths that partition VAR1 into two separate graphs is VAR2 if and only if the function MinimalCutSetFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA269": "If VAR1 is an instance of physical quantity, then the magnitude of VAR1 is VAR2 if and only if the function MagnitudeFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA270": "If VAR1 is an instance of physical quantity, then the unit of VAR1 is VAR2 if and only if the function UnitFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA271": "If VAR1 is an instance of circle, then the center of the circle VAR1 is VAR2 if and only if the function CenterOfCircleFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA272": "If VAR1 is an instance of agent, then the wealth of VAR1 is VAR2 if and only if the function WealthFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA273": "If VAR1 is an instance of time interval, then the beginning of the interval VAR1 is VAR2 if and only if the function BeginFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA274": "If VAR1 is an instance of time interval, then the end of the interval VAR1 is VAR2 if and only if the function EndFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA275": "If VAR1 is an instance of physical, then the time when VAR1 takes place is VAR2 if and only if the function WhenFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA276": "If VAR1 is an instance of time position, then VAR2 is the time intervall starting at negative infinity up until VAR1 if and only if the function PastFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA277": "If VAR1 is an instance of time position, then VAR2 occurs immediately before VAR1 if and only if the function ImmediatePastFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA278": "If VAR1 is an instance of time position, then VAR2 is the time intervall starting at VAR1 up until positive infinity if and only if the function FutureFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA279": "If VAR1 is an instance of time position, then VAR2 occurs immediately after VAR1 if and only if the function ImmediateFutureFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA280": "If VAR1 is an instance of integer, then VAR2 is the year VAR1 if and only if the function YearFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA281": "If VAR1 is an instance of object, then the mereological complement of VAR1 is VAR2 if and only if the function MereologicalComplementFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA282": "If VAR1 is a subclass of organism, then VAR2 is food for VAR1 if and only if the function FoodForFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA283": "If VAR1 is an instance of human, then the immediate family of VAR1 is VAR2 if and only if the function ImmediateFamilyFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA284": "If VAR1 is an instance of geopolitical area, then the government of VAR1 is VAR2 if and only if the function GovernmentFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA285": "If VAR1 is an instance of argument, then the complete set of premises of the argument VAR1 is VAR2 if and only if the function PremisesFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA286": "If VAR1 is a subclass of organism, then the remains of VAR1 are VAR2 if and only if the function DeadFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA287": "If VAR1 is an instance of process, then VAR2 needs to happen for VAR1 to start if and only if the function StartFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA288": "If VAR1 is an instance of process, then VAR2 needs to happen for VAR1 to stop if and only if the function StopFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA289": "If VAR1 is an instance of circle, then the diameter of VAR1 is VAR2 if and only if the function DiameterFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA290": "If VAR1 is an instance of circle, then the radius of VAR1 is VAR2 if and only if the function RadiusFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA291": "If VAR1 is an instance of list, then the last item in the list VAR1 is VAR2 if and only if the function LastFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA292": "If VAR1 is an instance of list, then the first item in the list VAR1 is VAR2 if and only if the function FirstFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA293": "If VAR1 is an instance of human, then the descendants of VAR1 is VAR2 if and only if the function DescendantsFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA294": "If VAR1 is an instance of geopolitical area, then the residents of VAR1 is VAR2 if and only if the function ResidentFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA295": "If VAR1 is an instance of device, then VAR1 is operated during VAR2 if and only if the function OperatingFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA296": "If VAR1 is an instance of intentional process, then VAR2 is the set of possible occupations for the process VAR1 if and only if the function OccupationFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA297": "If VAR1 is an instance of symbolic string, then the length of the string VAR1 is VAR2 if and only if the function StringLengthFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA298": "If VAR1 is a subclass of body part, then VAR2 is intended to be used to cover VAR1 if and only if the function CoveringFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA299": "If VAR2 is an instance of set or class, then VAR1 is an instance of VAR2 if and only if the predicate instance holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA300": "If VAR2 is an instance of symbolic string, then the image at VAR2 exemplifies VAR1 if and only if the predicate externalImage holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA301": "If VAR2 is an instance of formula and VAR1 is an instance of formula, then VAR1 entails VAR2 if and only if the predicate entails holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA302": "If VAR2 is an instance of corpuscular object and VAR1 is a subclass of substance, then VAR2 is made out of VAR1 if and only if the predicate material holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA303": "If VAR2 is an instance of attribute, then VAR1 has the property VAR2 if and only if the predicate property holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA304": "If VAR1 is an instance of cognitive agent, then VAR1 is interested in VAR2 if and only if the predicate inScopeOfInterest holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA305": "If VAR2 is an instance of physical and VAR1 is an instance of cognitive agent, then VAR1 needs VAR2 if and only if the predicate needs holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA306": "If VAR2 is an instance of physical and VAR1 is an instance of cognitive agent, then VAR1 wants VAR2 if and only if the predicate wants holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA307": "If VAR2 is an instance of binary function and VAR1 is an instance of binary function, then VAR1 is distributive over VAR2 if and only if the predicate distributes holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA308": "If VAR2 is an instance of object and VAR1 is an instance of physical, then VAR1 is partly located at VAR2 if and only if the predicate partlyLocated holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA309": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 traverses VAR2 if and only if the predicate traverses holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA310": "VAR1 refers to VAR2 if and only if the predicate refers holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA311": "If VAR2 is an instance of real number and VAR1 is an instance of list, then VAR2 is the average of VAR1 if and only if the predicate average holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA312": "If VAR2 is an instance of quantity and VAR1 is an instance of graph arc, then the arc VAR1 has a weight of VAR2 if and only if the predicate arcWeight holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA313": "If VAR2 is an instance of physical and VAR1 is an instance of abstract, then VAR1 is the abstract counterpart of VAR2 if and only if the predicate abstractCounterpart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA314": "If VAR2 is an instance of physical system and VAR1 is an instance of physical system, then VAR1 is a sub-system of VAR2 if and only if the predicate subSystem holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA315": "If VAR2 is an instance of physical system and VAR1 is an instance of physical, then VAR1 is a part of the system VAR2 if and only if the predicate systemPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA316": "If VAR2 is an instance of unit of measure and VAR1 is an instance of graph, then VAR2 is the measure for the arc weight of VAR1 if and only if the predicate graphMeasure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA317": "If VAR2 is an instance of mass measure and VAR1 is an instance of self connected object, then VAR1 has a weight of VAR2 if and only if the predicate weight holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA318": "If VAR2 is an instance of length measure and VAR1 is an instance of circle, then VAR1 has a radius of VAR2 if and only if the predicate radius holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA319": "If VAR2 is an instance of length measure and VAR1 is an instance of circle, then VAR1 has a diameter of VAR2 if and only if the predicate diameter holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA320": "If VAR2 is an instance of currency measure and VAR1 is an instance of financial transaction, then VAR1 is a transaction with an amount of VAR2 if and only if the predicate transactionAmount holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA321": "If VAR2 is an instance of temperature measure and VAR1 is a subclass of pure substance, then VAR2 is the boiling point of VAR1 if and only if the predicate boilingPoint holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA322": "If VAR2 is an instance of temperature measure and VAR1 is a subclass of pure substance, then VAR2 is the melting point of VAR1 if and only if the predicate meltingPoint holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA323": "If VAR2 is an instance of wearable item and VAR1 is an instance of animal, then VAR1 wears VAR2 if and only if the predicate wears holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA324": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is an acquanintance of VAR2 if and only if the predicate acquaintance holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA325": "If VAR2 is an instance of cognitive agent and VAR1 is an instance of organization, then VAR1 employs VAR2 if and only if the predicate employs holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA326": "If VAR2 is an instance of proposition and VAR1 is an instance of argument, then VAR2 is a premise of VAR1 if and only if the predicate premise holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA327": "If VAR2 is an instance of proposition and VAR1 is an instance of argument, then VAR1 is the conclusion of VAR2 if and only if the predicate conclusion holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA328": "If VAR2 is an instance of directional attribute and VAR1 is an instance of object, then VAR1 faces VAR2 if and only if the predicate faces holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA329": "If VAR2 is an instance of one dimensional figure and VAR1 is an instance of one dimensional figure, then VAR1 is parallel to VAR2 if and only if the predicate parallel holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA330": "If VAR2 is an instance of plane angle measure and VAR1 is an instance of two dimensional angle, then the angle VAR1 is equal to VAR2 if and only if the predicate angularMeasure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA331": "If VAR2 is an instance of length measure and VAR1 is an instance of one dimensional figure, then the line VAR1 has a length of VAR2 if and only if the predicate lineMeasure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA332": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is older than VAR2 if and only if the predicate older holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA333": "If VAR2 is an instance of language and VAR1 is an instance of sentient agent, then VAR1 speaks the language VAR2 if and only if the predicate speaksLanguage holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA334": "If VAR2 is an instance of function quantity and VAR1 is an instance of musical tone, then VAR1 has a sound frequency of VAR2 if and only if the predicate soundFrequency holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA335": "If VAR2 is a subclass of time position and VAR1 is an instance of physical, then VAR1 is established at the timepostition VAR2 if and only if the predicate dateEstablished holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA336": "If VAR2 is an instance of length measure and VAR1 is an instance of device, then VAR1 has an effective range of VAR2 if and only if the predicate effectiveRange holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA337": "If VAR2 is an instance of device state attribute and VAR1 is an instance of object, then VAR1 has the device state VAR2 if and only if the predicate deviceState holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA338": "If VAR2 is an instance of object and VAR1 is an instance of agent, then VAR1 discovers VAR2 if and only if the predicate discovers holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA339": "If VAR2 is an instance of constant quantity and VAR1 is an instance of measuring device, then VAR2 is the measurement taken with VAR1 if and only if the predicate measurementReading holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA340": "If VAR2 is an instance of agent and VAR1 is an instance of symbolic string, then VAR1 is the email address of VAR2 if and only if the predicate emailAddress holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA341": "If VAR2 is an instance of real number and VAR1 is an instance of solution, then VAR1 has a pH value of VAR2 if and only if the predicate potentialOfHydrogen holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA342": "If VAR2 is an instance of integer and VAR1 is an instance of agent, then VAR1 has a fleet size of VAR2 if and only if the predicate fleetSize holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA343": "If VAR2 is an instance of object and VAR1 is an instance of agent, then VAR1 carries VAR2 if and only if the predicate carries holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA344": "If VAR2 is an instance of two dimensional figure and VAR1 is an instance of one dimensional figure, then VAR1 is tangent to VAR2 if and only if the predicate tangent holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA345": "If VAR2 is an instance of corpuscular object and VAR1 is an instance of two dimensional object, then VAR1 is a slice of the figure VAR2 if and only if the predicate sliceOfFigure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA346": "If VAR2 is an instance of cognitive agent and VAR1 is an instance of human, then VAR1 is the patient of the doctor VAR2 if and only if the predicate patientMedical holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA347": "If VAR2 is an instance of organism and VAR1 is an instance of organism, then VAR1 is a parasite of VAR2 if and only if the predicate parasite holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA348": "If VAR2 is an instance of constant quantity and VAR1 is an instance of self connected object, then VAR1 has a capacity of VAR2 if and only if the predicate capacity holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA349": "If VAR2 is an instance of positive integer and VAR1 is an instance of stationary artifact, then VAR1 has a human capacity of VAR2 if and only if the predicate humanCapacity holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA350": "If VAR2 is an instance of permanent residence and VAR1 is an instance of agent, then VAR1 is the landlord of VAR2 if and only if the predicate landlord holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA351": "If VAR2 is an instance of residence and VAR1 is an instance of agent, then VAR1 is a tenant of VAR2 if and only if the predicate tenant holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA352": "If VAR2 is an instance of formula and VAR1 is an instance of cognitive agent, then VAR1 expects VAR2 if and only if the predicate expects holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA353": "If VAR2 is an instance of care organization and VAR1 is an instance of human, then VAR1 is a medical patient of VAR2 if and only if the predicate medicalPatient holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA354": "If VAR2 is an instance of rational number and VAR1 is an instance of human, then VAR1 has an intelligence quotient of VAR2 if and only if the predicate intelligenceQuotient holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA355": "If VAR2 is a subclass of natural substance and VAR1 is a subclass of organic object, then VAR1 secretes substance VAR2 if and only if the predicate secretesSubstance holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA356": "If VAR1 is an instance of agent, then VAR1 is the creator of VAR2 if and only if the predicate creator holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA357": "If VAR2 is an instance of agreement and VAR1 is an instance of cognitive agent, then VAR1 is a party to the agreement VAR2 if and only if the predicate partyToAgreement holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA358": "If VAR2 is an instance of time interval and VAR1 is an instance of agreement, then the agreement VAR1 is valid during the time period VAR2 if and only if the predicate agreementPeriod holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA359": "If VAR2 is an instance of time point and VAR1 is an instance of agreement, then the agreement VAR1 becomes effective at VAR2 if and only if the predicate agreementEffectiveDate holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA360": "If VAR2 is an instance of time point and VAR1 is an instance of agreement, then VAR2 is the expiration date of the agreement VAR1 if and only if the predicate agreementExpirationDate holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA361": "If VAR1 is an instance of symbolic string, then VAR1 is the local long name of VAR2 if and only if the predicate localLongName holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA362": "If VAR1 is an instance of symbolic string, then VAR1 is the local short name of VAR2 if and only if the predicate localShortName holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA363": "If VAR2 is an instance of process and VAR1 is an instance of agent, then VAR1 is the commentator of VAR2 if and only if the predicate commentator holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA364": "If VAR2 is an instance of object and VAR1 is an instance of formula, then VAR1 describes VAR2 if and only if the predicate describes holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA365": "If VAR2 is an instance of cognitive agent and VAR1 is an instance of certificate, then VAR1 is issued by VAR2 if and only if the predicate issuedBy holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA366": "If VAR2 is an instance of physical and VAR1 is an instance of text, then VAR1 contains an official record of VAR2 if and only if the predicate registeredItem holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA367": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is the axis of rotation of VAR2 if and only if the predicate axis holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA368": "If VAR2 is an instance of length measure and VAR1 is an instance of water area, then the depth of water at VAR1 is VAR2 if and only if the predicate waterDepth holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA369": "If VAR2 is an instance of object and VAR1 is an instance of agent, then VAR1 has the award VAR2 if and only if the predicate hasAward holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA370": "If VAR2 is a subclass of animal and VAR1 is a subclass of meat, then VAR1 is the meat of the animal VAR2 if and only if the predicate meatOfAnimal holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA371": "If VAR2 is an instance of financial transaction and VAR1 is an instance of human, then the occupation of VAR1 is VAR2 if and only if the predicate occupation holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA372": "If VAR2 is an instance of time interval and VAR1 is an instance of stationary artifact, then VAR1 is constructed during VAR2 if and only if the predicate constructionPeriod holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA373": "If VAR2 is an instance of agent and VAR1 is an instance of stationary artifact, then VAR1 is a contractor for VAR2 if and only if the predicate contractor holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA374": "If VAR2 is an instance of field of study and VAR1 is an instance of human, then VAR1 has the expertise to do VAR2 if and only if the predicate hasExpertise holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA375": "If VAR2 is a subclass of intentional process and VAR1 is an instance of human, then VAR1 has the occupation VAR2 if and only if the predicate hasOccupation holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA376": "If VAR2 is an instance of positive integer and VAR1 is an instance of pure substance, then the number of protons in VAR1 is VAR2 if and only if the predicate protonNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA377": "If VAR2 is an instance of positive integer and VAR1 is an instance of pure substance, then the number of electrons in VAR1 is VAR2 if and only if the predicate electronNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA378": "If VAR2 is an instance of integer and VAR1 is an instance of collection, then there is a total VAR2 of members in VAR1 if and only if the predicate memberCount holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA379": "If VAR2 is an instance of set or class and VAR1 is an instance of collection, then the members of VAR1 belong to the class VAR2 if and only if the predicate memberType holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA380": "If VAR2 is an instance of collection and VAR1 is an instance of content bearing object, then VAR1 has VAR2 in its inventory if and only if the predicate inventory holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA381": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is a stranger to VAR2 if and only if the predicate stranger holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA382": "If VAR2 is a subclass of object and VAR1 is a subclass of object, then VAR1 is a typical part of  if and only if the predicate typicalPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA383": "If VAR2 is a subclass of object and VAR1 is a subclass of object, then VAR2 typically contains VAR1 if and only if the predicate typicallyContainsPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA384": "If VAR2 is a subclass of object and VAR1 is a subclass of object, then VAR1 is an initial part of VAR2 if and only if the predicate initialPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA385": "If VAR2 is a subclass of object and VAR1 is a subclass of object, then VAR2 initially contains VAR1 if and only if the predicate initiallyContainsPart holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA386": "If VAR2 is an instance of organization and VAR1 is an instance of organization, then VAR1 is affiliated to organization VAR2 if and only if the predicate affiliatedOrganization holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA387": "If VAR2 is an instance of form of government and VAR1 is an instance of organization, then organization VAR1 has an ideological affiliation to VAR2 if and only if the predicate ideologicalAffiliationOfOrganization holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA388": "If VAR2 is an instance of belief group and VAR1 is an instance of organization, then organization VAR1 has a religious affiliation to VAR2 if and only if the predicate religiousAffiliationOfOrganization holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA389": "If VAR2 is an instance of cognitive agent and VAR1 is an instance of cognitive agent, then VAR1 is in allegiance to VAR2 if and only if the predicate allegiance holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA390": "If VAR2 is an instance of time interval and VAR1 is an instance of physical, then VAR2 is the anniversary of VAR1 if and only if the predicate anniversary holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA391": "If VAR2 is an instance of object and VAR1 is an instance of animal, then VAR2 is the birthplace of VAR1 if and only if the predicate birthplace holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA392": "If VAR2 is an instance of day and VAR1 is an instance of human, then VAR2 is the birthdate of VAR1 if and only if the predicate birthdate holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA393": "If VAR2 is an instance of day and VAR1 is an instance of human, then VAR2 is the deathdate of VAR1 if and only if the predicate deathdate holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA394": "If VAR2 is an instance of object and VAR1 is an instance of animal, then VAR2 is the deathplace of VAR1 if and only if the predicate deathplace holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA395": "If VAR2 is an instance of device and VAR1 is an instance of artifact, then VAR1 is equipped with a device of type VAR2 if and only if the predicate equipmentType holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA396": "If VAR2 is an instance of sentence and VAR1 is an instance of phrase, then VAR1 has a grammatical relation to VAR2 if and only if the predicate grammaticalRelation holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA397": "If VAR2 is an instance of transitway and VAR1 is an instance of constant quantity, then VAR1 is a distance on the path VAR2 if and only if the predicate distanceOnPath holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA398": "If VAR2 is an instance of symbolic string and VAR1 is an instance of character, then VAR1 is in string VAR2 if and only if the predicate inString holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA399": "If VAR2 is an instance of postal place and VAR1 is an instance of symbolic string, then VAR2 is located in unit VAR1 if and only if the predicate unitNumber holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA400": "If VAR2 is an instance of postal place and VAR1 is an instance of symbolic string, then VAR2 is located on floor VAR1 if and only if the predicate floorCode holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA401": "If VAR2 is an instance of physical quantity and VAR1 is an instance of power source, then VAR1 is the amount of electricity generated by VAR2 if and only if the predicate voltageMeasure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA402": "If VAR2 is a subclass of uniform clothing and VAR1 is an instance of group, then VAR1 has the uniform VAR2 if and only if the predicate hasUniform holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA403": "If VAR2 is an instance of policy and VAR1 is an instance of organization, then VAR1 is the owner of the policy VAR2 if and only if the predicate policyOwner holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA404": "If VAR2 is an instance of real number and VAR1 is an instance of real number, then VAR1 is the approximated value of VAR2 if and only if the predicate approximateValue holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA405": "If VAR1 is an instance of geopolitical area, then VAR2 are citizens of VAR1 if and only if the function CitizenryFn holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA406": "If VAR2 is an instance of set and VAR1 is an instance of set, then VAR1 is a subset of VAR2 if and only if the predicate subset holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA407": "If VAR2 is an instance of substance and VAR1 is an instance of substance, then VAR1 is a piece of VAR2 if and only if the predicate piece holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA408": "If VAR2 is an instance of corpuscular object and VAR1 is an instance of corpuscular object, then VAR1 is a component of VAR2 if and only if the predicate component holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA409": "If VAR2 is an instance of self connected object and VAR1 is an instance of self connected object, then VAR1 is the bottom of VAR2 if and only if the predicate bottom holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA410": "If VAR2 is an instance of self connected object and VAR1 is an instance of self connected object, then VAR1 is the top of VAR2 if and only if the predicate top holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA411": "If VAR2 is an instance of self connected object and VAR1 is an instance of self connected object, then VAR1 is a side of VAR2 if and only if the predicate side holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA412": "If VAR2 is an instance of engineering component and VAR1 is an instance of engineering component, then VAR1 is a component of VAR2 if and only if the predicate engineeringSubcomponent holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA413": "If VAR2 is an instance of group of people and VAR1 is an instance of human, then VAR1 is a member of the group VAR2 if and only if the predicate groupMember holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA414": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is half of VAR2 if and only if the predicate half holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA415": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is a third of VAR2 if and only if the predicate third holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA416": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is a quarter of VAR2 if and only if the predicate quarter holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA417": "If VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is the largest part of VAR2 if and only if the predicate most holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA418": "If VAR2 is an instance of educational organization and VAR1 is an instance of cognitive agent, then VAR1 is a student at VAR2 if and only if the predicate student holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA419": "If VAR2 is an instance of educational organization and VAR1 is an instance of cognitive agent, then VAR1 is a teacher at VAR2 if and only if the predicate teacher holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA420": "If VAR2 is an instance of geometric figure and VAR1 is an instance of geometric point, then VAR1 is a point of the figure VAR2 if and only if the predicate pointOfFigure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA421": "If VAR2 is an instance of geometric figure and VAR1 is an instance of two dimensional angle, then VAR1 is an angle of the figure VAR2 if and only if the predicate angleOfFigure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA422": "If VAR2 is an instance of geometric figure and VAR1 is an instance of one dimensional figure, then VAR1 is a side of the figure VAR2 if and only if the predicate sideOfFigure holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA423": "If VAR2 is an instance of organism and VAR1 is an instance of organism, then VAR1 is the mother of VAR2 if and only if the predicate mother holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA424": "If VAR2 is an instance of organism and VAR1 is an instance of organism, then VAR1 is the father of VAR2 if and only if the predicate father holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA425": "If VAR2 is an instance of organism and VAR1 is an instance of organism, then VAR1 is the daughter of VAR2 if and only if the predicate daughter holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA426": "If VAR2 is an instance of organism and VAR1 is an instance of organism, then VAR1 is the son of VAR2 if and only if the predicate son holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA427": "If VAR2 is an instance of woman and VAR1 is an instance of human, then VAR1 is the grandmother of VAR2 if and only if the predicate grandmother holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA428": "If VAR2 is an instance of man and VAR1 is an instance of human, then VAR1 is the grandfather of VAR2 if and only if the predicate grandfather holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA429": "If VAR2 is an instance of human and VAR1 is an instance of woman, then VAR1 is the aunt of VAR2 if and only if the predicate aunt holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA430": "If VAR2 is an instance of human and VAR1 is an instance of human, then VAR1 is the cousin of VAR2 if and only if the predicate cousin holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA431": "If VAR2 is an instance of human and VAR1 is an instance of man, then VAR1 is the nephew of VAR2 if and only if the predicate nephew holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA432": "If VAR2 is an instance of human and VAR1 is an instance of woman, then VAR1 is the niece of VAR2 if and only if the predicate niece holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA433": "If VAR2 is an instance of human and VAR1 is an instance of man, then VAR1 is the uncle of VAR2 if and only if the predicate uncle holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA434": "If VAR2 is an instance of object and VAR1 is an instance of animal, then VAR1 grasps VAR2 if and only if the predicate grasps holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA435": "If VAR2 is an instance of cognitive agent and VAR1 is an instance of legal action, then VAR2 is the plaintiff in VAR1 if and only if the predicate plaintiff holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA436": "If VAR2 is an instance of agent and VAR1 is an instance of contest, then VAR2 is a participant in the contest VAR1 if and only if the predicate contestParticipant holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA437": "If VAR2 is an instance of human and VAR1 is an instance of demonstrating, then VAR2 attends VAR1 if and only if the predicate attends holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA438": "If VAR2 is an instance of physical and VAR1 is an instance of process, then VAR2 is an instrument for VAR1 if and only if the predicate instrument holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA439": "If VAR2 is an instance of object and VAR1 is an instance of process, then VAR2 is a resource for VAR1 if and only if the predicate resource holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA440": "If VAR1 is an instance of process, then VAR2 is a result of VAR1 if and only if the predicate result holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA441": "If VAR2 is an instance of substance and VAR1 is an instance of chemical process, then VAR1 is a reactant in VAR2 if and only if the predicate reactant holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA442": "If VAR2 is an instance of substance and VAR1 is an instance of chemical process, then VAR1 is a reagent in VAR2 if and only if the predicate reagent holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA443": "If VAR2 is an instance of legal action and VAR1 is an instance of cognitive agent, then VAR1 is the defendant in VAR2 if and only if the predicate defendant holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA444": "If VAR2 is an instance of object and VAR1 is an instance of process, then the entire process VAR1 is located on VAR2 if and only if the predicate eventLocated holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA445": "If VAR2 is an instance of color attribute and VAR1 is an instance of object, then VAR1 has the color VAR2 if and only if the predicate color holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA446": "If VAR2 is an instance of object and VAR1 is an instance of agent, then VAR2 is the financial asset of VAR1 if and only if the predicate financialAsset holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA447": "If VAR2 is an instance of time duration and VAR1 is an instance of object, then VAR1 is the age of VAR2 if and only if the predicate age holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA448": "If VAR2 is an instance of length measure and VAR1 is an instance of object, then VAR1 has a linear extent of VAR2 if and only if the predicate linearExtent holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA449": "If VAR2 is an instance of length measure and VAR1 is an instance of object, then VAR1 has a width of VAR2 if and only if the predicate width holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA450": "If VAR2 is an instance of length measure and VAR1 is an instance of self connected object, then VAR1 has a height of VAR2 if and only if the predicate height holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA451": "If VAR2 is an instance of length measure and VAR1 is an instance of object, then VAR1 has a length of VAR2 if and only if the predicate length holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA452": "If VAR2 is an instance of currency measure and VAR1 is an instance of physical, then VAR1 has a monetary value of VAR2 if and only if the predicate monetaryValue holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA453": "If VAR2 is an instance of length measure and VAR1 is an instance of radiating, then VAR1 has a wavelength of VAR2 if and only if the predicate wavelength holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA454": "If VAR2 is an instance of temperature measure and VAR1 is an instance of object, then the air temperature of VAR1 is VAR2 if and only if the predicate airTemperature holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA455": "If VAR2 is an instance of permanent residence and VAR1 is an instance of human, then VAR2 is the home of VAR1 if and only if the predicate home holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA456": "If VAR2 is an instance of temporary residence and VAR1 is an instance of human, then VAR1 stays in VAR2 if and only if the predicate stays holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA457": "If VAR2 is an instance of man and VAR1 is an instance of human, then VAR1 is the stepfather of VAR2 if and only if the predicate stepfather holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA458": "If VAR2 is an instance of woman and VAR1 is an instance of human, then VAR1 is the stepmother of VAR2 if and only if the predicate stepmother holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA459": "If VAR2 is an instance of object and VAR1 is an instance of physical, then VAR1 is exactly located at VAR2 if and only if the predicate exactlyLocated holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA460": "If VAR2 is an instance of geopolitical area and VAR1 is an instance of organization, then the headquarters of the organization VAR1 is in VAR2 if and only if the predicate headquartersOfOrganization holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA461": "If VAR2 is an instance of vehicle and VAR1 is an instance of self connected object, then VAR1 is on board of VAR2 if and only if the predicate onboard holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA462": "If VAR2 is an instance of truth value and VAR1 is an instance of sentence, then the truth value of VAR1 is VAR2 if and only if the predicate truth holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA463": "If VAR1 is an instance of cognitive agent, then VAR1 enjoys VAR2 if and only if the predicate enjoys holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA464": "If VAR2 is an instance of object and VAR1 is an instance of cognitive agent, then VAR1 dislikes VAR2 if and only if the predicate dislikes holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA465": "If VAR2 is an instance of physical and VAR1 is an instance of cognitive agent, then VAR1 lacks VAR2 if and only if the predicate lacks holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA466": "If VAR2 is an instance of cognitive agent and VAR1 is an instance of cognitive agent, then VAR1 approves of VAR2 if and only if the predicate approves holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA467": "If VAR1 is an instance of symbolic string, then VAR1 names VAR2 if and only if the predicate names holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA468": "If VAR1 is an instance of symbolic string, then VAR1 is an unique identifier for VAR2 if and only if the predicate uniqueIdentifier holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA469": "VAR1 represents VAR2 if and only if the predicate represents holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA470": "If VAR2 is an instance of physical and VAR1 is an instance of content bearing object, then VAR1 is recorded on VAR2 if and only if the predicate record holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA471": "If VAR1 is an instance of symbolic string, then VAR1 is the title of VAR2 if and only if the predicate titles holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA472": "If VAR1 is an instance of symbolic string, then VAR1 is the former name of VAR2 if and only if the predicate formerName holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA473": "If VAR2 is an instance of proposition and VAR1 is an instance of object, then VAR1 conforms to VAR2 if and only if the predicate conforms holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA474": "If VAR2 is an instance of formula and VAR1 is an instance of cognitive agent, then VAR1 fears that VAR2 will be true if and only if the predicate fears holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA475": "If VAR2 is an instance of formula and VAR1 is an instance of cognitive agent, then VAR1 hopes that VAR2 will be true if and only if the predicate hopes holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA476": "If VAR2 is an instance of day and VAR1 is an instance of human, then VAR2 is the birthday of VAR1 if and only if the predicate birthday holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA477": "If VAR2 is an instance of sentence and VAR1 is an instance of noun phrase, then VAR1 is the object in the sentence VAR2 if and only if the predicate sententialObject holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaBinaryRelationA478": "If VAR2 is an instance of sentence and VAR1 is an instance of noun phrase, then VAR1 is the subject in the sentence VAR2 if and only if the predicate sententialSubject holds with the arguments VAR1 and VAR2 for every VAR1 and VAR2.",
  "schemaTernaryRelationA1": "If VAR2 is an instance of quantity and VAR1 is an instance of quantity, then VAR1 multiplied by VAR2 is VAR3 if and only if the function MultiplicationFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA2": "If VAR2 is an instance of quantity and VAR1 is an instance of quantity, then VAR1 plus VAR2 is VAR3 if and only if the function AdditionFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA3": "If VAR2 is an instance of quantity and VAR1 is an instance of quantity, then VAR1 minus VAR2 is VAR3 if and only if the function SubtractionFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA4": "If VAR2 is an instance of quantity and VAR1 is an instance of quantity, then VAR1 divided by VAR2 is VAR3 if and only if the function DivisionFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA5": "If VAR2 is an instance of quantity and VAR1 is an instance of quantity, then the larger of VAR1 and VAR2 is VAR3 if and only if the function MaxFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA6": "If VAR2 is an instance of quantity and VAR1 is an instance of quantity, then the smaller of VAR1 and VAR2 is VAR3 if and only if the function MinFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA7": "If VAR2 is an instance of positive integer and VAR1 is an instance of list, then the value at the index VAR2 in list VAR1 is VAR3 if and only if the function ListOrderFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA8": "If VAR2 is an instance of list and VAR1 is an instance of list, then the concatenation of the two lists VAR1 and VAR2 is VAR3 if and only if the function ListConcatenateFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA9": "If VAR2 is an instance of time point and VAR1 is an instance of physical, then the place where VAR1 takes place at VAR2 is VAR3 if and only if the function WhereFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA10": "If VAR2 is an instance of integer and VAR1 is an instance of quantity, then VAR1 raised to the power of VAR2 is VAR3 if and only if the function ExponentiationFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA11": "If VAR2 is an instance of positive integer and VAR1 is an instance of real number, then the logarithm of VAR1 to the base VAR2 is VAR3 if and only if the function LogFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA12": "If VAR2 is an instance of quantity and VAR1 is an instance of quantity, then the remainder of VAR1 divided by VAR2 is VAR3 if and only if the function RemainderFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA13": "If VAR2 is an instance of set or class and VAR1 is an instance of set or class, then the union of VAR1 and VAR2 is VAR3 if and only if the function UnionFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA14": "If VAR2 is an instance of set or class and VAR1 is an instance of set or class, then the intersection of VAR1 and VAR2 is VAR3 if and only if the function IntersectionFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA15": "If VAR2 is an instance of set or class and VAR1 is an instance of set or class, then the relative complement of VAR1 and VAR2 is VAR3 if and only if the function RelativeComplementFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA16": "If VAR2 is an instance of formula and VAR1 is an instance of symbolic string, then the kappa function with the arguments VAR1 and VAR2 returns VAR3 if and only if the function KappaFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA17": "If VAR2 is an instance of graph node and VAR1 is an instance of graph node, then the minimal weighted path between VAR1 and VAR2 is VAR3 if and only if the function MinimalWeightedPathFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA18": "If VAR2 is an instance of graph node and VAR1 is an instance of graph node, then the maximal weighted path between VAR1 and VAR2 is VAR3 if and only if the function MaximalWeightedPathFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA19": "If VAR2 is an instance of graph node and VAR1 is an instance of graph node, then the set of paths between VAR1 and VAR2 is VAR3 if and only if the function GraphPathFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA20": "If VAR2 is an instance of unit of measure and VAR1 is an instance of real number, then VAR1 measured in VAR2 is VAR3 if and only if the function MeasureFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA21": "If VAR2 is an instance of constant quantity and VAR1 is an instance of constant quantity, then the interval from VAR1 to VAR2 is VAR3 if and only if the function IntervalFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA22": "If VAR2 is an instance of physical quantity and VAR1 is an instance of physical quantity, then VAR1 per VAR2 is VAR3 if and only if the function PerFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA23": "If VAR2 is an instance of time point and VAR1 is an instance of time point, then the time interval between VAR1 and VAR2 is VAR3 if and only if the function TimeIntervalFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA24": "If VAR2 is a subclass of time interval and VAR1 is a subclass of time interval, then the recurring period from VAR1 to VAR2 is VAR3 if and only if the function RecurrentTimeIntervalFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA25": "If VAR2 is a subclass of year and VAR1 is a subclass of month, then VAR3 is the class of every moth of VAR1 of VAR2 if and only if the function MonthFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA26": "If VAR2 is a subclass of month and VAR1 is an instance of positive integer, then VAR3 is the class of every VAR1th day of VAR2 if and only if the function DayFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA27": "If VAR2 is a subclass of day and VAR1 is an instance of nonnegative integer, then VAR3 is the class of every VAR1th hour of VAR2 if and only if the function HourFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA28": "If VAR2 is a subclass of hour and VAR1 is an instance of nonnegative integer, then VAR3 is the class of every VAR1th minute of VAR2 if and only if the function MinuteFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA29": "If VAR2 is a subclass of minute and VAR1 is an instance of positive real number, then VAR3 is the class of every VAR1th second of VAR2 if and only if the function SecondFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA30": "If VAR2 is a subclass of time interval and VAR1 is an instance of time interval, then VAR3 is the class of VAR2 that make up VAR1 if and only if the function TemporalCompositionFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA31": "If VAR2 is an instance of object and VAR1 is an instance of object, then the union of the parts VAR1 and VAR2 is VAR3 if and only if the function MereologicalSumFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA32": "If VAR2 is an instance of object and VAR1 is an instance of object, then the intersection of the parts VAR1 and VAR2 is VAR3 if and only if the function MereologicalProductFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA33": "If VAR2 is an instance of object and VAR1 is an instance of object, then the difference between the parts VAR1 and VAR2 is VAR3 if and only if the function MereologicalDifferenceFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA34": "If VAR2 is an instance of positive integer and VAR1 is a subclass of content bearing object, then the edition VAR2 of VAR1 is VAR3 if and only if the function EditionFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA35": "If VAR2 is an instance of time zone and VAR1 is an instance of time position, then VAR3 is the time VAR1 in zone VAR2 if and only if the function RelativeTimeFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA36": "If VAR2 is an instance of geopolitical area and VAR1 is an instance of quantity, then the average amount of VAR1 possessed by a resident of VAR2 is VAR3 if and only if the function PerCapitaFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA37": "If VAR2 is an instance of time duration and VAR1 is an instance of time point, then the time period starting at VAR1 and ending after VAR2 is VAR3 if and only if the function TimePeriodFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA38": "If VAR2 is an instance of positive integer and VAR1 is a subclass of series, then the volume VAR2 in the series VAR1 is VAR3 if and only if the function SeriesVolumeFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA39": "If VAR2 is an instance of positive integer and VAR1 is a subclass of periodical, then the periodical issue number VAR2 of VAR1 is VAR3 if and only if the function PeriodicalIssueFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA40": "If VAR2 is an instance of symbolic string and VAR1 is an instance of symbolic string, then the concatenation of strings VAR1 and VAR2 is VAR3 if and only if the function StringConcatenateFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA41": "If VAR3 is an instance of set or class and VAR2 is an instance of positive integer and VAR1 is an instance of relation, then the VAR2th argument of VAR1 is an instance of VAR3 if and only if the predicate domain holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA42": "If VAR3 is an instance of set or class and VAR2 is an instance of positive integer and VAR1 is an instance of relation, then the VAR2th argument of VAR1 is a subclass of VAR3 if and only if the predicate domainSubclass holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA43": "If VAR3 is an instance of symbolic string and VAR2 is an instance of human language, then VAR3 is the documentation of VAR1 in the language VAR2 if and only if the predicate documentation holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA44": "If VAR3 is an instance of symbolic string and VAR1 is an instance of language, then VAR2 is presented as VAR3 in the language VAR1 if and only if the predicate format holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA45": "If VAR3 is an instance of symbolic string and VAR1 is an instance of language, then the term VAR2 is presented as VAR3 in the language VAR1 if and only if the predicate termFormat holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA46": "If VAR3 is an instance of language and VAR1 is an instance of symbolic string, then the concept of VAR1 in language VAR3 is related to the concept of VAR2 if and only if the predicate relatedExternalConcept holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA47": "If VAR3 is an instance of attribute, then VAR1 has more of VAR3 than VAR2 if and only if the predicate greaterThanByQuality holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA48": "If VAR3 is an instance of real number and VAR2 is an instance of formula and VAR1 is an instance of formula, then the probability of VAR2 provided that VAR1 holds is VAR3 if and only if the predicate conditionalProbability holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA49": "If VAR3 is an instance of formula and VAR2 is an instance of formula and VAR1 is an instance of cognitive agent, then VAR1 prefers VAR2 over VAR3 if and only if the predicate prefers holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA50": "If VAR3 is an instance of object and VAR2 is an instance of case role and VAR1 is a subclass of process, then VAR3 is capable to do VAR1 in role VAR2 if and only if the predicate capability holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA51": "If VAR3 is an instance of cognitive agent and VAR2 is an instance of formula and VAR1 is an instance of physical, then VAR1 has the purpose of VAR2 for VAR3 if and only if the predicate hasPurposeForAgent holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA52": "If VAR3 is an instance of objective norm and VAR2 is an instance of formula, then VAR1 brings it about that VAR2 has the norm VAR3 if and only if the predicate confersNorm holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA53": "If VAR3 is an instance of objective norm and VAR2 is an instance of formula, then VAR1 brings it about that VAR2 does not have the norm VAR3 if and only if the predicate deprivesNorm holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA54": "If VAR3 is an instance of object and VAR2 is an instance of object and VAR1 is an instance of object, then VAR2 is between VAR1 and VAR3 if and only if the predicate between holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA55": "If VAR3 is an instance of agent, then VAR3 uses VAR2 to represent VAR1 if and only if the predicate representsForAgent holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA56": "If VAR3 is an instance of language and VAR1 is an instance of linguistic expression, then VAR1 represents VAR2 in the language VAR3 if and only if the predicate representsInLanguage holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA57": "If VAR3 is an instance of graph arc and VAR2 is an instance of graph node and VAR1 is an instance of graph node, then VAR3 links VAR1 and VAR2 if and only if the predicate links holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA58": "If VAR3 is an instance of length measure and VAR2 is an instance of physical and VAR1 is an instance of physical, then VAR3 is the distance between VAR1 and VAR2 if and only if the predicate distance holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA59": "If VAR3 is an instance of time point and VAR2 is an instance of time point and VAR1 is an instance of time point, then VAR2 occurs between VAR1 and VAR3 if and only if the predicate temporallyBetween holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA60": "If VAR3 is an instance of time point and VAR2 is an instance of time point and VAR1 is an instance of time point, then VAR2 occurs between or at VAR1 and VAR2 if and only if the predicate temporallyBetweenOrEqual holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA61": "If VAR3 is an instance of self connected object and VAR2 is an instance of self connected object and VAR1 is an instance of self connected object, then VAR1 connects VAR2 and VAR3 if and only if the predicate connects holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA62": "If VAR3 is an instance of positional attribute and VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is VAR3 to VAR2 if and only if the predicate orientation holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA63": "If VAR3 is an instance of organization and VAR2 is an instance of position and VAR1 is an instance of human, then VAR1 holds the position of VAR2 in VAR3 if and only if the predicate occupiesPosition holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA64": "If VAR3 is an instance of cognitive agent and VAR1 is an instance of formula, then VAR2 authorizes VAR3 to perform tasks of the type VAR1 if and only if the predicate confersRight holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA65": "If VAR3 is an instance of cognitive agent and VAR1 is an instance of formula, then VAR2 obligates VAR3 to perform tasks of the type VAR1 if and only if the predicate confersObligation holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA66": "If VAR3 is an instance of geometric point and VAR2 is an instance of one dimensional figure and VAR1 is an instance of one dimensional figure, then VAR1 and VAR2 intersect at the point VAR3 if and only if the predicate pointOfIntersection holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA67": "If VAR3 is an instance of length measure and VAR2 is an instance of geometric point and VAR1 is an instance of geometric point, then the distance between the two points VAR1 and VAR2 is VAR3 if and only if the predicate geometricDistance holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA68": "If VAR3 is an instance of symbolic string and VAR2 is an instance of symbolic string, then VAR2 is a comment on VAR1 by VAR3 if and only if the predicate comment holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA69": "If VAR3 is an instance of agent and VAR2 is an instance of time point and VAR1 is an instance of object, then VAR1 is used by VAR3 at the timepoint VAR2 if and only if the predicate dateUsed holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA70": "If VAR3 is an instance of agent and VAR2 is an instance of currency measure and VAR1 is an instance of physical, then VAR3 pays VAR2 for VAR1 if and only if the predicate price holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA71": "If VAR3 is an instance of nonnegative integer and VAR2 is an instance of set or class and VAR1 is an instance of collection, then VAR1 has VAR3 members of the kind VAR2 if and only if the predicate memberTypeCount holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA72": "If VAR3 is an instance of time position and VAR2 is an instance of collection and VAR1 is an instance of self connected object, then VAR1 is a member of VAR2 dureing the time period VAR3 if and only if the predicate memberAtTime holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA73": "If VAR3 is an instance of human and VAR2 is an instance of human and VAR1 is an instance of organization, then VAR2 is subordinate to VAR3 in organization VAR1 if and only if the predicate subordinateInOrganization holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA74": "If VAR3 is an instance of position and VAR2 is an instance of position and VAR1 is an instance of organization, then the role VAR2 is subordinate to the role VAR3 in the organization VAR1 if and only if the predicate subordinatePosition holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA75": "If VAR3 is an instance of geographic area and VAR2 is a subclass of process and VAR1 is an instance of agent, then VAR1 is responsible for actions of type VAR2 in VAR3 if and only if the predicate areaOfResponsibility holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA76": "If VAR3 is an instance of process and VAR2 is an instance of case role and VAR1 is an instance of object, then VAR1 plays the role VAR2 in the process VAR3 if and only if the predicate playsRoleInEvent holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA77": "If VAR3 is an instance of object and VAR2 is an instance of time position and VAR1 is an instance of object, then VAR1 is at VAR3 during VAR2 if and only if the predicate locatedAtTime holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA78": "If VAR3 is an instance of quantity and VAR2 is a subclass of device and VAR1 is an instance of object, then VAR1 is equipped with VAR3 devices of the type VAR2 if and only if the predicate equipmentCount holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA79": "If VAR3 is an instance of symbolic string and VAR2 is an instance of symbolic string and VAR1 is an instance of symbolic string, then VAR3 is the concatenation of the strings VAR1 and VAR2 if and only if the predicate stringConcatenation holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA80": "If VAR3 is an instance of symbolic string and VAR2 is an instance of symbolic string and VAR1 is an instance of symbolic string, then VAR1 precedes VAR2 in VAR3 if and only if the predicate precedesInString holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA81": "If VAR3 is an instance of symbolic string and VAR2 is an instance of language and VAR1 is an instance of region, then VAR3 is a canonical name for VAR1 in the language VAR2 if and only if the predicate canonicalPlaceName holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA82": "If VAR2 is an instance of volume measure and VAR1 is an instance of mass measure, then VAR1 per VAR2 is VAR3 if and only if the function DensityFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA83": "If VAR2 is an instance of time duration and VAR1 is an instance of length measure, then VAR1 per VAR2 is VAR3 if and only if the function SpeedFn holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA84": "If VAR3 is an instance of length measure and VAR2 is an instance of physical and VAR1 is an instance of physical, then the difference in height between VAR1 and VAR2 is VAR3 if and only if the predicate altitude holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA85": "If VAR3 is an instance of length measure and VAR2 is an instance of physical and VAR1 is an instance of physical, then the difference in depth between VAR1 and VAR2 is VAR3 if and only if the predicate depth holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA86": "If VAR3 is an instance of engineering component and VAR2 is an instance of engineering component and VAR1 is an instance of engineering connection, then VAR1 connects VAR2 and VAR3 if and only if the predicate connectsEngineeringComponents holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA87": "If VAR3 is an instance of language and VAR1 is an instance of symbolic string, then the concept of VAR1 in language VAR3 is synonymous with the concept of VAR2 if and only if the predicate synonymousExternalConcept holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA88": "If VAR3 is an instance of language and VAR1 is an instance of symbolic string, then the concept of VAR1 in language VAR3 subsumes the concept of VAR2 if and only if the predicate subsumingExternalConcept holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaTernaryRelationA89": "If VAR3 is an instance of language and VAR1 is an instance of symbolic string, then the concept of VAR1 in language VAR3 is subsumed by the concept of VAR2 if and only if the predicate subsumedExternalConcept holds with the arguments VAR1, VAR2 and VAR3 for every VAR1, VAR2 and VAR3.",
  "schemaQuaternaryRelationA1": "If VAR3 is an instance of nonnegative integer and VAR2 is an instance of nonnegative integer and VAR1 is an instance of symbolic string, then the substring of VAR1 starting at index VAR2 and ending at index VAR3 minus one is VAR4 if and only if the function SubstringFn holds with the arguments VAR1, VAR2, VAR3 and VAR4 for every VAR1, VAR2, VAR3 and VAR4.",
  "schemaQuaternaryRelationA2": "If VAR4 is an instance of object and VAR3 is an instance of object and VAR2 is an instance of object and VAR1 is an instance of object, then VAR2 is located between VAR1 and VAR3 on the path VAR4 if and only if the predicate betweenOnPath holds with the arguments VAR1, VAR2, VAR3 and VAR4 for every VAR1, VAR2, VAR3 and VAR4.",
  "schemaQuaternaryRelationA3": "If VAR4 is an instance of cognitive agent and VAR3 is an instance of agreement and VAR2 is an instance of deontic attribute and VAR1 is an instance of proposition, then VAR4 is responsible for the VAR1 with the attribute VAR2 in the agreement VAR3 if and only if the predicate agreementClause holds with the arguments VAR1, VAR2, VAR3 and VAR4 for every VAR1, VAR2, VAR3 and VAR4.",
  "schemaQuaternaryRelationA4": "If VAR4 is an instance of currency measure and VAR3 is an instance of time duration and VAR2 is an instance of human and VAR1 is an instance of organization, then VAR1 employs VAR2 and pays them VAR4 per VAR3 if and only if the predicate monetaryWage holds with the arguments VAR1, VAR2, VAR3 and VAR4 for every VAR1, VAR2, VAR3 and VAR4.",
  "schemaQuaternaryRelationA5": "If VAR4 is an instance of transfer and VAR3 is an instance of object and VAR2 is an instance of object and VAR1 is an instance of object, then VAR1 is located before VAR2 on the path VAR3 with respect to VAR4 if and only if the predicate beforeOnPath holds with the arguments VAR1, VAR2, VAR3 and VAR4 for every VAR1, VAR2, VAR3 and VAR4.",
  "schemaQuintaryRelationA1": "If VAR4 is an instance of directional attribute and VAR3 is an instance of region and VAR2 is an instance of time duration and VAR1 is an instance of length measure, then VAR1 per VAR2 in VAR3 in the direction VAR4 is VAR5 if and only if the function VelocityFn holds with the arguments VAR1, VAR2, VAR3, VAR4 and VAR5 for every VAR1, VAR2, VAR3, VAR4 and VAR5.",
  "schemaQuintaryRelationA2": "If VAR4 is an instance of nation and VAR3 is an instance of city and VAR2 is an instance of roadway and VAR1 is an instance of stationary artifact, then the agent that resides at VAR1 VAR2 VAR3 VAR4 is VAR5 if and only if the function StreetAddressFn holds with the arguments VAR1, VAR2, VAR3, VAR4 and VAR5 for every VAR1, VAR2, VAR3, VAR4 and VAR5.",
  "schemaQuintaryRelationA3": "If VAR5 is an instance of object and VAR4 is an instance of time position and VAR3 is a subclass of process and VAR2 is an instance of case role and VAR1 is an instance of object, then VAR1 plays the role VAR2 in VAR3, which occurs at VAR4 and VAR5 if and only if the predicate playsRoleInEventOfType holds with the arguments VAR1, VAR2, VAR3, VAR4 and VAR5 for every VAR1, VAR2, VAR3, VAR4 and VAR5.",
  "typeA1": "If X1 is a subrelation of X2, then X2 is an instance of relation and X1 is an instance of relation for every X1 and X2.",
  "typeA2": "If X1 is a subattribute of X2, then X2 is an instance of attribute and X1 is an instance of attribute for every X1 and X2.",
  "typeA3": "If X1 holds with the arguments X2 and X3, then X1 is an instance of binary relation for every X1, X2 and X3.",
  "typeA4": "If X1 is a subclass of X2, then X2 is an instance of set or class and X1 is an instance of set or class for every X1 and X2.",
  "typeA5": "If X1 is a part of X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA6": "If X1 is a proper sub-collection of X2, then X2 is an instance of collection and X1 is an instance of collection for every X1 and X2.",
  "typeA7": "If X1 is less than or equal to X2, then X2 is an instance of quantity and X1 is an instance of quantity for every X1 and X2.",
  "typeA8": "If X1 is greater than or equal to X2, then X2 is an instance of quantity and X1 is an instance of quantity for every X1 and X2.",
  "typeA9": "If X1 is a sublist of X2, then X2 is an instance of list and X1 is an instance of list for every X1 and X2.",
  "typeA10": "If X1 starts the list X2, then X2 is an instance of list and X1 is an instance of list for every X1 and X2.",
  "typeA11": "If X1 subsumes the content of X2, then X2 is a subclass of content bearing physical and X1 is a subclass of content bearing physical for every X1 and X2.",
  "typeA12": "If X1 subsumes the content of X2, then X2 is an instance of content bearing physical and X1 is an instance of content bearing physical for every X1 and X2.",
  "typeA13": "If X1 is a temporal part of X2, then X2 is an instance of time position and X1 is an instance of time position for every X1 and X2.",
  "typeA14": "If X1 occurs before or at X2, then X2 is an instance of time point and X1 is an instance of time point for every X1 and X2.",
  "typeA15": "If X1 is a subprocess of X2, then X2 is an instance of process and X1 is an instance of process for every X1 and X2.",
  "typeA16": "If X1 is a part of the organization X2, then X2 is an instance of organization and X1 is an instance of organization for every X1 and X2.",
  "typeA17": "If X1 is a geometric part of X2, then X2 is an instance of geometric figure and X1 is an instance of geometric figure for every X1 and X2.",
  "typeA18": "If X1 is an abstract part of X2, then X2 is an instance of abstract and X1 is an instance of abstract for every X1 and X2.",
  "typeA19": "If X1 has identical items as list X2, then X2 is an instance of list and X1 is an instance of list for every X1 and X2.",
  "typeA20": "If X1 is a exact copy of X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA21": "If X1 is equivalent to X2, then X2 is a subclass of content bearing physical and X1 is a subclass of content bearing physical for every X1 and X2.",
  "typeA22": "If X1 is equivalent to X2, then X2 is an instance of content bearing physical and X1 is an instance of content bearing physical for every X1 and X2.",
  "typeA23": "If X1 occurs at the same time as X2, then X2 is an instance of physical and X1 is an instance of physical for every X1 and X2.",
  "typeA24": "If X1 is related to X2, then X2 is an instance of organism and X1 is an instance of organism for every X1 and X2.",
  "typeA25": "If X1 is a subgraph of X2, then X2 is an instance of graph and X1 is an instance of graph for every X1 and X2.",
  "typeA26": "If X1 overlaps X2, then X2 is an instance of time interval and X1 is an instance of time interval for every X1 and X2.",
  "typeA27": "If X1 is connected to X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA28": "If X1 overlaps with X2 , then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA29": "If X1 is a sub string in X2, then X2 is an instance of symbolic string and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA30": "If X2 is the agent of X1, then X2 is an instance of agent and X1 is an instance of process for every X1 and X2.",
  "typeA31": "If X1 ends at X2, then X1 is an instance of process for every X1 and X2.",
  "typeA32": "If X2 experiences X1, then X2 is an instance of agent and X1 is an instance of process for every X1 and X2.",
  "typeA33": "If X2 is the origin of X1, then X2 is an instance of object and X1 is an instance of process for every X1 and X2.",
  "typeA34": "If X2 is a participant in X1, then X1 is an instance of process for every X1 and X2.",
  "typeA35": "If the process X1 is partly located on X2, then X2 is an instance of object and X1 is an instance of process for every X1 and X2.",
  "typeA36": "If X1 moves X2, then X2 is an instance of object and X1 is an instance of motion for every X1 and X2.",
  "typeA37": "If X1 changes the location of X2, then X2 is an instance of object and X1 is an instance of translocation for every X1 and X2.",
  "typeA38": "If X2 is the path which X1 follows, then X2 is an instance of object and X1 is an instance of motion for every X1 and X2.",
  "typeA39": "If entities in the process X1 are moving X2, then X2 is an instance of positional attribute and X1 is an instance of process for every X1 and X2.",
  "typeA40": "If X2 is detained by X1, then X2 is an instance of animal and X1 is an instance of confining for every X1 and X2.",
  "typeA41": "If X2 is a target in the attack X1, then X2 is an instance of object and X1 is an instance of process for every X1 and X2.",
  "typeA42": "If X2 serves as a control in X1, then X2 is an instance of object and X1 is an instance of experimenting for every X1 and X2.",
  "typeA43": "If X2 is controlled by X1, then X2 is an instance of object and X1 is an instance of achieving control for every X1 and X2.",
  "typeA44": "If X1 gains control over X2, then X2 is an instance of agent and X1 is an instance of achieving control for every X1 and X2.",
  "typeA45": "If X1 loses control over X2, then X2 is an instance of agent and X1 is an instance of change of control for every X1 and X2.",
  "typeA46": "If X1 is arrested by X2, then X2 is an instance of agent and X1 is an instance of placing under arrest for every X1 and X2.",
  "typeA47": "If X2 is the transportation device used in X1, then X2 is an instance of transportation device and X1 is an instance of transportation for every X1 and X2.",
  "typeA48": "If X2 suffers from X1, then X2 is an instance of agent and X1 is an instance of process for every X1 and X2.",
  "typeA49": "If X1 desires X2, then X2 is an instance of formula and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA50": "If X1 considers X2, then X2 is an instance of formula and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA51": "If X1 believes X2, then X2 is an instance of formula and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA52": "If X1 knows X2, then X2 is an instance of formula and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA53": "If X1 doubts X2, then X2 is an instance of formula and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA54": "If X1 disapproves X2, then X2 is an instance of formula and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA55": "If X1 is an immediate instance of X2, then X2 is an instance of set or class for every X1 and X2.",
  "typeA56": "If X1 is an immediate subclass of X2, then X2 is an instance of set or class and X1 is an instance of set or class for every X1 and X2.",
  "typeA57": "If the range of X1 is an instance of X2, then X2 is an instance of set or class and X1 is an instance of function for every X1 and X2.",
  "typeA58": "If the values returned by X1 are subclasses of X2, then X2 is a subclass of set or class and X1 is an instance of function for every X1 and X2.",
  "typeA59": "If X1 has a valence of X2, then X2 is an instance of positive integer and X1 is an instance of relation for every X1 and X2.",
  "typeA60": "If X1 is an immediate successor attribute of X2, then X2 is an instance of attribute and X1 is an instance of attribute for every X1 and X2.",
  "typeA61": "If the front of X1 is X2, then X1 is an instance of self connected object for every X1 and X2.",
  "typeA62": "If the back of X1 is X2, then X1 is an instance of self connected object for every X1 and X2.",
  "typeA63": "If X1 is a proper part of X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA64": "If X1 contains X2, then X2 is an instance of object and X1 is an instance of self connected object for every X1 and X2.",
  "typeA65": "If X1 is a member of X2, then X2 is an instance of collection and X1 is an instance of self connected object for every X1 and X2.",
  "typeA66": "If X1 contains information X2, then X2 is an instance of proposition and X1 is an instance of content bearing physical for every X1 and X2.",
  "typeA67": "If X2 is the leader of X1, then X2 is an instance of human and X1 is an instance of agent for every X1 and X2.",
  "typeA68": "If X1 has the attribute X2, then X2 is an instance of attribute and X1 is an instance of object for every X1 and X2.",
  "typeA69": "If X1 is performed in the manner of X2, then X2 is an instance of attribute and X1 is an instance of process for every X1 and X2.",
  "typeA70": "If X2 is involved in X1, then X1 is an instance of process for every X1 and X2.",
  "typeA71": "If the probability of X1 is X2, then X1 is an instance of formula for every X1 and X2.",
  "typeA72": "If X1 is in list X2, then X2 is an instance of list for every X1 and X2.",
  "typeA73": "If X1 is closed on X2, then X2 is an instance of set or class and X1 is an instance of function for every X1 and X2.",
  "typeA74": "If X1 is reflexive on X2, then X2 is an instance of set or class and X1 is an instance of binary relation for every X1 and X2.",
  "typeA75": "If X1 is irreflexive on X2, then X2 is an instance of set or class and X1 is an instance of binary relation for every X1 and X2.",
  "typeA76": "If X1 is a partial ordering on X2, then X2 is an instance of set or class and X1 is an instance of binary relation for every X1 and X2.",
  "typeA77": "If X1 is a total ordering on X2, then X2 is an instance of set or class and X1 is an instance of binary relation for every X1 and X2.",
  "typeA78": "If X1 is trichotomizing on X2, then X2 is an instance of set or class and X1 is an instance of binary relation for every X1 and X2.",
  "typeA79": "If X1 is an equivalence relation on X2, then X2 is an instance of set or class and X1 is an instance of binary relation for every X1 and X2.",
  "typeA80": "If X1 causes X2, then X2 is an instance of process and X1 is an instance of process for every X1 and X2.",
  "typeA81": "If X1 causes subclass X2, then X2 is a subclass of process and X1 is a subclass of process for every X1 and X2.",
  "typeA82": "If X1 causes proposition X2, then X2 is an instance of formula and X1 is an instance of formula for every X1 and X2.",
  "typeA83": "If X1 exists during X2, then X2 is an instance of time position and X1 is an instance of physical for every X1 and X2.",
  "typeA84": "If X2 holds during X1, then X2 is an instance of formula and X1 is an instance of time position for every X1 and X2.",
  "typeA85": "If X1 exploits X2, then X2 is an instance of agent and X1 is an instance of object for every X1 and X2.",
  "typeA86": "If X1 has the purpose of X2, then X2 is an instance of formula and X1 is an instance of physical for every X1 and X2.",
  "typeA87": "If X1 has the skill to do X2, then X2 is an instance of agent and X1 is a subclass of process for every X1 and X2.",
  "typeA88": "If X1 crosses X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA89": "If X1 penetrates X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA90": "If X1 possesses X2, then X2 is an instance of object and X1 is an instance of agent for every X1 and X2.",
  "typeA91": "If X1 is a precondition of X2, then X2 is a subclass of process and X1 is a subclass of process for every X1 and X2.",
  "typeA92": "If X1 realizes the content of X2, then X2 is an instance of proposition and X1 is an instance of process for every X1 and X2.",
  "typeA93": "If X1 is expressed in the language X2, then X2 is an instance of language and X1 is an instance of linguistic expression for every X1 and X2.",
  "typeA94": "If X1 uses X2, then X2 is an instance of agent and X1 is an instance of object for every X1 and X2.",
  "typeA95": "If X2 is the identity element of X1, then X1 is an instance of binary function for every X1 and X2.",
  "typeA96": "If X1 is an element of X2, then X2 is an instance of set for every X1 and X2.",
  "typeA97": "If X1 is part of the graph X2, then X2 is an instance of graph and X1 is an instance of graph element for every X1 and X2.",
  "typeA98": "If the path X1 has a length of X2, then X2 is an instance of positive integer and X1 is an instance of graph path for every X1 and X2.",
  "typeA99": "If X1 is measured by X2, then X2 is an instance of physical quantity and X1 is an instance of object for every X1 and X2.",
  "typeA100": "If the barometric pressure of X1 is X2, then X2 is an instance of unit of atmospheric pressure and X1 is an instance of object for every X1 and X2.",
  "typeA101": "If X1 has a duration of X2, then X2 is an instance of time duration and X1 is an instance of time interval for every X1 and X2.",
  "typeA102": "If X1 occurs every X2, then X2 is an instance of time duration and X1 is a subclass of process for every X1 and X2.",
  "typeA103": "If X1 meets X2, then X2 is an instance of time interval and X1 is an instance of time interval for every X1 and X2.",
  "typeA104": "If X2 is the date of X1, then X2 is an instance of day and X1 is an instance of physical for every X1 and X2.",
  "typeA105": "If X1 is a surface of X2, then X2 is an instance of self connected object and X1 is an instance of self connected object for every X1 and X2.",
  "typeA106": "If X1 is an interior part of X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA107": "If X1 is a hole in X2, then X2 is an instance of self connected object and X1 is an instance of hole for every X1 and X2.",
  "typeA108": "If the principle host of the hole X1 is X2, then X1 is an instance of hole for every X1 and X2.",
  "typeA109": "If X1 partially fills X2, then X2 is an instance of hole and X1 is an instance of object for every X1 and X2.",
  "typeA110": "If X1 properly fills X2, then X2 is an instance of hole and X1 is an instance of object for every X1 and X2.",
  "typeA111": "If X1 completely fills X2, then X2 is an instance of hole and X1 is an instance of object for every X1 and X2.",
  "typeA112": "If X1 fills X2, then X2 is an instance of hole and X1 is an instance of object for every X1 and X2.",
  "typeA113": "If X1 is a hole in the skin X2, then X1 is an instance of hole for every X1 and X2.",
  "typeA114": "If X2 is the atomic number of X1, then X2 is an instance of positive integer and X1 is a subclass of elemental substance for every X1 and X2.",
  "typeA115": "If X1 is a geographic subregion of X2, then X2 is an instance of geographic area and X1 is an instance of geographic area for every X1 and X2.",
  "typeA116": "If X1 is a geopolitical subdivision of X2, then X2 is an instance of geopolitical area and X1 is an instance of geopolitical area for every X1 and X2.",
  "typeA117": "If X2 is an earlier stage in the development of X1, then X2 is an instance of developmental attribute and X1 is an instance of organic object for every X1 and X2.",
  "typeA118": "If X1 lives in X2, then X2 is an instance of object and X1 is an instance of organism for every X1 and X2.",
  "typeA119": "If X1 is the author of X2, then X2 is a subclass of text and X1 is an instance of agent for every X1 and X2.",
  "typeA120": "If X1 is the editor of X2, then X2 is a subclass of text and X1 is an instance of agent for every X1 and X2.",
  "typeA121": "If X1 publishes X2, then X2 is a subclass of text and X1 is an instance of organization for every X1 and X2.",
  "typeA122": "If X1 is a version of X2, then X2 is a subclass of artifact and X1 is a subclass of artifact for every X1 and X2.",
  "typeA123": "If X1 is a parent of X2, then X2 is an instance of organism and X1 is an instance of organism for every X1 and X2.",
  "typeA124": "If X1 is the husband of X2, then X2 is an instance of woman and X1 is an instance of man for every X1 and X2.",
  "typeA125": "If X1 is the wife of X2, then X2 is an instance of man and X1 is an instance of woman for every X1 and X2.",
  "typeA126": "If X1 is a citizen of X2, then X2 is an instance of nation and X1 is an instance of human for every X1 and X2.",
  "typeA127": "If the statement X1 has the modal force of X2, then X2 is an instance of normative attribute and X1 is an instance of formula for every X1 and X2.",
  "typeA128": "If X2 has the right to perform X1, then X2 is an instance of cognitive agent and X1 is an instance of formula for every X1 and X2.",
  "typeA129": "If X2 is obliged to perform tasks of the type X1, then X2 is an instance of cognitive agent and X1 is an instance of formula for every X1 and X2.",
  "typeA130": "If X1 is founded in the year X2, then X2 is an instance of integer and X1 is an instance of organization for every X1 and X2.",
  "typeA131": "If X1 is the power-producing component of X2, then X2 is an instance of artifact and X1 is an instance of device for every X1 and X2.",
  "typeA132": "If X1 is insured by X2, then X2 is an instance of organization and X1 is an instance of proposition for every X1 and X2.",
  "typeA133": "If X1 has a loss of X2, then X2 is an instance of currency measure and X1 is an instance of financial transaction for every X1 and X2.",
  "typeA134": "If X1 has a profit of X2, then X2 is an instance of currency measure and X1 is an instance of financial transaction for every X1 and X2.",
  "typeA135": "If X1 is a customer of X2, then X2 is an instance of cognitive agent and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA136": "If X1 is the family name of X2, then X2 is an instance of human and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA137": "If X1 is the middle name of X2, then X2 is an instance of human and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA138": "If X1 is the given name of X2, then X2 is an instance of human and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA139": "If the structure of X1 is X2, then X2 is an instance of structure attribute and X1 is an instance of object for every X1 and X2.",
  "typeA140": "If X2 is operating X1, then X2 is an instance of agent and X1 is an instance of object for every X1 and X2.",
  "typeA141": "If X1 is transported by X2, then X2 is an instance of object and X1 is an instance of transportation for every X1 and X2.",
  "typeA142": "If X2 is cargo on X1, then X2 is an instance of object and X1 is an instance of shipping for every X1 and X2.",
  "typeA143": "If X2 is the supplier of the service provided in X1, then X2 is an instance of cognitive agent and X1 is an instance of service process for every X1 and X2.",
  "typeA144": "If X2 is the receiver of the service provided in X1, then X2 is an instance of cognitive agent and X1 is an instance of service process for every X1 and X2.",
  "typeA145": "If X1 benefits X2, then X2 is an instance of agent and X1 is an instance of process for every X1 and X2.",
  "typeA146": "If X1 is a grandparent of X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA147": "If X1 is an alias of X2, then X2 is an instance of agent and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA148": "If X1 is the work address of X2, then X2 is an instance of postal place and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA149": "If X1 is the home address of X2, then X2 is an instance of human and X1 is an instance of permanent residence for every X1 and X2.",
  "typeA150": "If X1 is a deceptive representation of X2, then X2 is an instance of agent and X1 is an instance of content bearing object for every X1 and X2.",
  "typeA151": "If X1 is the length of the string X2, then X2 is an instance of symbolic string and X1 is an instance of nonnegative integer for every X1 and X2.",
  "typeA152": "If X1 is the site at which X2 can be contacted, then X2 is an instance of agent and X1 is an instance of contact site for every X1 and X2.",
  "typeA153": "If X1 is the post contact site of X2, then X2 is an instance of agent and X1 is an instance of postal place for every X1 and X2.",
  "typeA154": "If X1 is the postal place of the neighborhood X2, then X2 is an instance of neighborhood and X1 is an instance of postal place for every X1 and X2.",
  "typeA155": "If X1 is the postal place of the country X2, then X2 is an instance of geopolitical area and X1 is an instance of postal place for every X1 and X2.",
  "typeA156": "If X1 is the postal place of the district X2, then X2 is an instance of state or province and X1 is an instance of postal place for every X1 and X2.",
  "typeA157": "If X1 is the postal place of the city X2, then X2 is an instance of city and X1 is an instance of postal place for every X1 and X2.",
  "typeA158": "If X1 is the postal place of the postcode area X2, then X2 is an instance of postcode area and X1 is an instance of postal place for every X1 and X2.",
  "typeA159": "If X1 is the postal place of the street X2, then X2 is an instance of roadway and X1 is an instance of postal place for every X1 and X2.",
  "typeA160": "If X1 is the street number of the postal place X2, then X2 is an instance of postal place and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA161": "If X1 is the post office box of the postal place X2, then X2 is an instance of postal place and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA162": "If X1 is the post addresss text of the postal place X2, then X2 is an instance of postal place and X1 is an instance of postal address text for every X1 and X2.",
  "typeA163": "If X1 is the telecom contact device of X2, then X2 is an instance of agent and X1 is an instance of telephony device for every X1 and X2.",
  "typeA164": "If X1 is the device telecom number of X2, then X2 is an instance of telephony device and X1 is an instance of telecom number for every X1 and X2.",
  "typeA165": "If X1 is the telecom core number of X2, then X2 is an instance of telecom number and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA166": "If X1 is the telecom country code of X2, then X2 is an instance of telecom number and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA167": "If X1 is the telecom area code of X2, then X2 is an instance of telecom number and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA168": "If X1 is the telecom code of X2, then X2 is an instance of telecom number and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA169": "If X1 is the telecom extension of X2, then X2 is an instance of telecom number and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA170": "If X1 is the telephone number of X2, then X2 is an instance of agent and X1 is an instance of telecom number for every X1 and X2.",
  "typeA171": "If X1 is the personal phone number of X2, then X2 is an instance of human and X1 is an instance of telecom number for every X1 and X2.",
  "typeA172": "If X1 is the home phone number of X2, then X2 is an instance of human and X1 is an instance of telecom number for every X1 and X2.",
  "typeA173": "If X1 is the work phone number of X2, then X2 is an instance of agent and X1 is an instance of telecom number for every X1 and X2.",
  "typeA174": "If X1 is the mobile phone number of X2, then X2 is an instance of agent and X1 is an instance of telecom number for every X1 and X2.",
  "typeA175": "If X1 is the fax number of X2, then X2 is an instance of agent and X1 is an instance of telecom number for every X1 and X2.",
  "typeA176": "If X1 is an inverse of X2, then X2 is an instance of binary relation and X1 is an instance of binary relation for every X1 and X2.",
  "typeA177": "If X1 and X2 are disjoint, then X2 is an instance of relation and X1 is an instance of relation for every X1 and X2.",
  "typeA178": "If X1 is a successor attribute of X2, then X2 is an instance of attribute and X1 is an instance of attribute for every X1 and X2.",
  "typeA179": "If X1 is less than X2, then X2 is an instance of quantity and X1 is an instance of quantity for every X1 and X2.",
  "typeA180": "If X1 is greater than X2, then X2 is an instance of quantity and X1 is an instance of quantity for every X1 and X2.",
  "typeA181": "If X1 increases the likelihood of X2, then X2 is an instance of formula and X1 is an instance of formula for every X1 and X2.",
  "typeA182": "If X1 decreases the likelihood of X2, then X2 is an instance of formula and X1 is an instance of formula for every X1 and X2.",
  "typeA183": "If X1 hinders subclass X2, then X2 is a subclass of process and X1 is a subclass of process for every X1 and X2.",
  "typeA184": "If X1 prevents subclass X2, then X2 is a subclass of process and X1 is a subclass of process for every X1 and X2.",
  "typeA185": "If X1 prevents X2, then X2 is a subclass of process and X1 is an instance of process for every X1 and X2.",
  "typeA186": "If X1 hinders X2, then X2 is a subclass of process and X1 is an instance of process for every X1 and X2.",
  "typeA187": "If X1 is a sub-proposition of X2, then X2 is an instance of proposition and X1 is an instance of proposition for every X1 and X2.",
  "typeA188": "If X1 is a sub-plan of X2, then X2 is an instance of plan and X1 is an instance of plan for every X1 and X2.",
  "typeA189": "If X1 is larger than X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA190": "If X1 is smaller than X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA191": "If X1 starts X2, then X2 is an instance of time interval and X1 is an instance of time interval for every X1 and X2.",
  "typeA192": "If X1 finishes X2, then X2 is an instance of time interval and X1 is an instance of time interval for every X1 and X2.",
  "typeA193": "If X1 occurs before X2, then X2 is an instance of time point and X1 is an instance of time point for every X1 and X2.",
  "typeA194": "If X1 takes place during X2, then X2 is an instance of time interval and X1 is an instance of time interval for every X1 and X2.",
  "typeA195": "If X1 occurs earlier than X2, then X2 is an instance of time interval and X1 is an instance of time interval for every X1 and X2.",
  "typeA196": "If X1 meets X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA197": "If X1 partially overlaps with X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA198": "If X1 is a superficial part of X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA199": "If X1 is connected to X2, then X2 is an instance of engineering component and X1 is an instance of engineering component for every X1 and X2.",
  "typeA200": "If X1 is an ancestor of X2, then X2 is an instance of organism and X1 is an instance of organism for every X1 and X2.",
  "typeA201": "If X1 is the sibling of X2, then X2 is an instance of organism and X1 is an instance of organism for every X1 and X2.",
  "typeA202": "If X1 is the brother of X2, then X2 is an instance of human and X1 is an instance of man for every X1 and X2.",
  "typeA203": "If X1 is the sister of X2, then X2 is an instance of human and X1 is an instance of woman for every X1 and X2.",
  "typeA204": "If X1 is the spouse of X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA205": "If X1 and X2 are conjugated, then X2 is an instance of compound substance and X1 is an instance of compound substance for every X1 and X2.",
  "typeA206": "If X1 is a neighbor of X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA207": "If X1 is a force hostile to X2, then X2 is an instance of military unit and X1 is an instance of military unit for every X1 and X2.",
  "typeA208": "If X1 is a sub-field of X2, then X2 is an instance of field of study and X1 is an instance of field of study for every X1 and X2.",
  "typeA209": "If X1 is the ancestor organization of X2, then X2 is an instance of organization and X1 is an instance of organization for every X1 and X2.",
  "typeA210": "If X1 is disjoint from X2, then X2 is an instance of set or class and X1 is an instance of set or class for every X1 and X2.",
  "typeA211": "If the probabilities of X1 and X2 being true are independent, then X2 is an instance of formula and X1 is an instance of formula for every X1 and X2.",
  "typeA212": "If X1 and X2 are related events, then X2 is an instance of process and X1 is an instance of process for every X1 and X2.",
  "typeA213": "If X1 is a relative of X2, then X2 is an instance of organism and X1 is an instance of organism for every X1 and X2.",
  "typeA214": "If X1 is legally realted to X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA215": "If X1 is a mutal acquaintance of X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA216": "If X1 is consistent with X2, then X2 is an instance of proposition and X1 is an instance of proposition for every X1 and X2.",
  "typeA217": "If X1 is a friend of X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA218": "If X1 is a coworker of X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA219": "If X1 is a cohabitant of X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA220": "If X1 and X2 are strangers to each other, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA221": "If X1 is a domestic partner of X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA222": "If X1 is located at X2, then X2 is an instance of object and X1 is an instance of physical for every X1 and X2.",
  "typeA223": "If X1 is stored on X2, then X2 is an instance of data storage device and X1 is an instance of content bearing object for every X1 and X2.",
  "typeA224": "If X1 is the legal guardian of X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA225": "If X1 is a multiplicative factor of X2, then X2 is an instance of integer and X1 is an instance of integer for every X1 and X2.",
  "typeA226": "If X1 covers X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA227": "If X2 is one thousand X1s, then X1 is an instance of unit of measure for every X1 and X2.",
  "typeA228": "If X2 is one million X1s, then X1 is an instance of unit of measure for every X1 and X2.",
  "typeA229": "If X2 is one billion X1s, then X1 is an instance of unit of measure for every X1 and X2.",
  "typeA230": "If X2 is one trillion X1s, then X1 is an instance of unit of measure for every X1 and X2.",
  "typeA231": "If X2 is one thousandth X1, then X1 is an instance of unit of measure for every X1 and X2.",
  "typeA232": "If X2 is one millionth of X1, then X1 is an instance of unit of measure for every X1 and X2.",
  "typeA233": "If X2 is one billionth of X1, then X1 is an instance of unit of measure for every X1 and X2.",
  "typeA234": "If X2 is one trillionth of X1, then X1 is an instance of unit of measure for every X1 and X2.",
  "typeA235": "If X2 is the set of all subclasses of X1, then X1 is an instance of set or class for every X1 and X2.",
  "typeA236": "If X1 is the condition for membership in the class X2, then X1 is an instance of attribute for every X1 and X2.",
  "typeA237": "If the length of the list X1 is X2, then X1 is an instance of list for every X1 and X2.",
  "typeA238": "If the property of X1 is X2, then X1 is an instance of agent for every X1 and X2.",
  "typeA239": "If the absolute value of X1 is X2, then X1 is an instance of real number for every X1 and X2.",
  "typeA240": "If the smallest integer greater than or equal to X1 is X2, then X1 is an instance of real number for every X1 and X2.",
  "typeA241": "If the cosine of X1 is X2, then X1 is an instance of plane angle measure for every X1 and X2.",
  "typeA242": "If the denominator of X1 is X2, then X1 is an instance of real number for every X1 and X2.",
  "typeA243": "If the largest integer less than or equal to X1 is X2, then X1 is an instance of real number for every X1 and X2.",
  "typeA244": "If the imaginary part of X1 is X2, then X1 is an instance of complex number for every X1 and X2.",
  "typeA245": "If the integer square root of X1 is X2, then X1 is an instance of real number for every X1 and X2.",
  "typeA246": "If the numerator of X1 is X2, then X1 is an instance of real number for every X1 and X2.",
  "typeA247": "If the rational representation of X1 is X2, then X1 is an instance of number for every X1 and X2.",
  "typeA248": "If the real part of X1 is X2, then X1 is an instance of number for every X1 and X2.",
  "typeA249": "If the reciprocal of X1 is X2, then X1 is an instance of quantity for every X1 and X2.",
  "typeA250": "If the nearest integer to X1 is X2, then X1 is an instance of quantity for every X1 and X2.",
  "typeA251": "If the sign of X1 is X2, then X1 is an instance of real number for every X1 and X2.",
  "typeA252": "If the sine of X1 is X2, then X1 is an instance of plane angle measure for every X1 and X2.",
  "typeA253": "If the square root of X1 is X2, then X1 is an instance of real number for every X1 and X2.",
  "typeA254": "If the tangent of X1 is X2, then X1 is an instance of plane angle measure for every X1 and X2.",
  "typeA255": "If the successor of X1 is X2, then X1 is an instance of integer for every X1 and X2.",
  "typeA256": "If the predecessor of X1 is X2, then X1 is an instance of integer for every X1 and X2.",
  "typeA257": "If the complement of X1 is X2, then X1 is an instance of set or class for every X1 and X2.",
  "typeA258": "If the generalized union of X1 is X2, then X1 is a subclass of set or class for every X1 and X2.",
  "typeA259": "If the generalized intersection of X1 is X2, then X1 is a subclass of set or class for every X1 and X2.",
  "typeA260": "If the starting node of X1 is X2, then X1 is an instance of graph arc for every X1 and X2.",
  "typeA261": "If the terminal node of X1 is X2, then X1 is an instance of graph arc for every X1 and X2.",
  "typeA262": "If the beginning of X1 is X2, then X1 is an instance of graph path for every X1 and X2.",
  "typeA263": "If the end of X1 is X2, then X1 is an instance of graph path for every X1 and X2.",
  "typeA264": "If the weight of the path X1 is X2, then X1 is an instance of graph path for every X1 and X2.",
  "typeA265": "If the set of paths that partition X1 into two separate graphs is X2, then X1 is an instance of graph for every X1 and X2.",
  "typeA266": "If the set of minimal paths that partition X1 into two separate graphs is X2, then X1 is an instance of graph for every X1 and X2.",
  "typeA267": "If the magnitude of X1 is X2, then X1 is an instance of physical quantity for every X1 and X2.",
  "typeA268": "If the unit of X1 is X2, then X1 is an instance of physical quantity for every X1 and X2.",
  "typeA269": "If the center of the circle X1 is X2, then X1 is an instance of circle for every X1 and X2.",
  "typeA270": "If the wealth of X1 is X2, then X1 is an instance of agent for every X1 and X2.",
  "typeA271": "If the beginning of the interval X1 is X2, then X1 is an instance of time interval for every X1 and X2.",
  "typeA272": "If the end of the interval X1 is X2, then X1 is an instance of time interval for every X1 and X2.",
  "typeA273": "If the time when X1 takes place is X2, then X1 is an instance of physical for every X1 and X2.",
  "typeA274": "If X2 is the time intervall starting at negative infinity up until X1, then X1 is an instance of time position for every X1 and X2.",
  "typeA275": "If X2 occurs immediately before X1, then X1 is an instance of time position for every X1 and X2.",
  "typeA276": "If X2 is the time intervall starting at X1 up until positive infinity, then X1 is an instance of time position for every X1 and X2.",
  "typeA277": "If X2 occurs immediately after X1, then X1 is an instance of time position for every X1 and X2.",
  "typeA278": "If X2 is the year X1, then X1 is an instance of integer for every X1 and X2.",
  "typeA279": "If the mereological complement of X1 is X2, then X1 is an instance of object for every X1 and X2.",
  "typeA280": "If X2 is food for X1, then X1 is a subclass of organism for every X1 and X2.",
  "typeA281": "If the immediate family of X1 is X2, then X1 is an instance of human for every X1 and X2.",
  "typeA282": "If the government of X1 is X2, then X1 is an instance of geopolitical area for every X1 and X2.",
  "typeA283": "If the complete set of premises of the argument X1 is X2, then X1 is an instance of argument for every X1 and X2.",
  "typeA284": "If the remains of X1 are X2, then X1 is a subclass of organism for every X1 and X2.",
  "typeA285": "If X2 needs to happen for X1 to start, then X1 is an instance of process for every X1 and X2.",
  "typeA286": "If X2 needs to happen for X1 to stop, then X1 is an instance of process for every X1 and X2.",
  "typeA287": "If the diameter of X1 is X2, then X1 is an instance of circle for every X1 and X2.",
  "typeA288": "If the radius of X1 is X2, then X1 is an instance of circle for every X1 and X2.",
  "typeA289": "If the last item in the list X1 is X2, then X1 is an instance of list for every X1 and X2.",
  "typeA290": "If the first item in the list X1 is X2, then X1 is an instance of list for every X1 and X2.",
  "typeA291": "If the descendants of X1 is X2, then X1 is an instance of human for every X1 and X2.",
  "typeA292": "If the residents of X1 is X2, then X1 is an instance of geopolitical area for every X1 and X2.",
  "typeA293": "If X1 is operated during X2, then X1 is an instance of device for every X1 and X2.",
  "typeA294": "If X2 is the set of possible occupations for the process X1, then X1 is an instance of intentional process for every X1 and X2.",
  "typeA295": "If the length of the string X1 is X2, then X1 is an instance of symbolic string for every X1 and X2.",
  "typeA296": "If X2 is intended to be used to cover X1, then X1 is a subclass of body part for every X1 and X2.",
  "typeA297": "If X1 is an instance of X2, then X2 is an instance of set or class for every X1 and X2.",
  "typeA298": "If the image at X2 exemplifies X1, then X2 is an instance of symbolic string for every X1 and X2.",
  "typeA299": "If X1 entails X2, then X2 is an instance of formula and X1 is an instance of formula for every X1 and X2.",
  "typeA300": "If X2 is made out of X1, then X2 is an instance of corpuscular object and X1 is a subclass of substance for every X1 and X2.",
  "typeA301": "If X1 has the property X2, then X2 is an instance of attribute for every X1 and X2.",
  "typeA302": "If X1 is interested in X2, then X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA303": "If X1 needs X2, then X2 is an instance of physical and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA304": "If X1 wants X2, then X2 is an instance of physical and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA305": "If X1 is distributive over X2, then X2 is an instance of binary function and X1 is an instance of binary function for every X1 and X2.",
  "typeA306": "If X1 is partly located at X2, then X2 is an instance of object and X1 is an instance of physical for every X1 and X2.",
  "typeA307": "If X1 traverses X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA308": "If X2 is the average of X1, then X2 is an instance of real number and X1 is an instance of list for every X1 and X2.",
  "typeA309": "If the arc X1 has a weight of X2, then X2 is an instance of quantity and X1 is an instance of graph arc for every X1 and X2.",
  "typeA310": "If X1 is the abstract counterpart of X2, then X2 is an instance of physical and X1 is an instance of abstract for every X1 and X2.",
  "typeA311": "If X1 is a sub-system of X2, then X2 is an instance of physical system and X1 is an instance of physical system for every X1 and X2.",
  "typeA312": "If X1 is a part of the system X2, then X2 is an instance of physical system and X1 is an instance of physical for every X1 and X2.",
  "typeA313": "If X2 is the measure for the arc weight of X1, then X2 is an instance of unit of measure and X1 is an instance of graph for every X1 and X2.",
  "typeA314": "If X1 has a weight of X2, then X2 is an instance of mass measure and X1 is an instance of self connected object for every X1 and X2.",
  "typeA315": "If X1 has a radius of X2, then X2 is an instance of length measure and X1 is an instance of circle for every X1 and X2.",
  "typeA316": "If X1 has a diameter of X2, then X2 is an instance of length measure and X1 is an instance of circle for every X1 and X2.",
  "typeA317": "If X1 is a transaction with an amount of X2, then X2 is an instance of currency measure and X1 is an instance of financial transaction for every X1 and X2.",
  "typeA318": "If X2 is the boiling point of X1, then X2 is an instance of temperature measure and X1 is a subclass of pure substance for every X1 and X2.",
  "typeA319": "If X2 is the melting point of X1, then X2 is an instance of temperature measure and X1 is a subclass of pure substance for every X1 and X2.",
  "typeA320": "If X1 wears X2, then X2 is an instance of wearable item and X1 is an instance of animal for every X1 and X2.",
  "typeA321": "If X1 is an acquanintance of X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA322": "If X1 employs X2, then X2 is an instance of cognitive agent and X1 is an instance of organization for every X1 and X2.",
  "typeA323": "If X2 is a premise of X1, then X2 is an instance of proposition and X1 is an instance of argument for every X1 and X2.",
  "typeA324": "If X1 is the conclusion of X2, then X2 is an instance of proposition and X1 is an instance of argument for every X1 and X2.",
  "typeA325": "If X1 faces X2, then X2 is an instance of directional attribute and X1 is an instance of object for every X1 and X2.",
  "typeA326": "If X1 is parallel to X2, then X2 is an instance of one dimensional figure and X1 is an instance of one dimensional figure for every X1 and X2.",
  "typeA327": "If the angle X1 is equal to X2, then X2 is an instance of plane angle measure and X1 is an instance of two dimensional angle for every X1 and X2.",
  "typeA328": "If the line X1 has a length of X2, then X2 is an instance of length measure and X1 is an instance of one dimensional figure for every X1 and X2.",
  "typeA329": "If X1 is older than X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA330": "If X1 speaks the language X2, then X2 is an instance of language and X1 is an instance of sentient agent for every X1 and X2.",
  "typeA331": "If X1 has a sound frequency of X2, then X2 is an instance of function quantity and X1 is an instance of musical tone for every X1 and X2.",
  "typeA332": "If X1 is established at the timepostition X2, then X2 is a subclass of time position and X1 is an instance of physical for every X1 and X2.",
  "typeA333": "If X1 has an effective range of X2, then X2 is an instance of length measure and X1 is an instance of device for every X1 and X2.",
  "typeA334": "If X1 has the device state X2, then X2 is an instance of device state attribute and X1 is an instance of object for every X1 and X2.",
  "typeA335": "If X1 discovers X2, then X2 is an instance of object and X1 is an instance of agent for every X1 and X2.",
  "typeA336": "If X2 is the measurement taken with X1, then X2 is an instance of constant quantity and X1 is an instance of measuring device for every X1 and X2.",
  "typeA337": "If X1 is the email address of X2, then X2 is an instance of agent and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA338": "If X1 has a pH value of X2, then X2 is an instance of real number and X1 is an instance of solution for every X1 and X2.",
  "typeA339": "If X1 has a fleet size of X2, then X2 is an instance of integer and X1 is an instance of agent for every X1 and X2.",
  "typeA340": "If X1 carries X2, then X2 is an instance of object and X1 is an instance of agent for every X1 and X2.",
  "typeA341": "If X1 is tangent to X2, then X2 is an instance of two dimensional figure and X1 is an instance of one dimensional figure for every X1 and X2.",
  "typeA342": "If X1 is a slice of the figure X2, then X2 is an instance of corpuscular object and X1 is an instance of two dimensional object for every X1 and X2.",
  "typeA343": "If X1 is the patient of the doctor X2, then X2 is an instance of cognitive agent and X1 is an instance of human for every X1 and X2.",
  "typeA344": "If X1 is a parasite of X2, then X2 is an instance of organism and X1 is an instance of organism for every X1 and X2.",
  "typeA345": "If X1 has a capacity of X2, then X2 is an instance of constant quantity and X1 is an instance of self connected object for every X1 and X2.",
  "typeA346": "If X1 has a human capacity of X2, then X2 is an instance of positive integer and X1 is an instance of stationary artifact for every X1 and X2.",
  "typeA347": "If X1 is the landlord of X2, then X2 is an instance of permanent residence and X1 is an instance of agent for every X1 and X2.",
  "typeA348": "If X1 is a tenant of X2, then X2 is an instance of residence and X1 is an instance of agent for every X1 and X2.",
  "typeA349": "If X1 expects X2, then X2 is an instance of formula and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA350": "If X1 is a medical patient of X2, then X2 is an instance of care organization and X1 is an instance of human for every X1 and X2.",
  "typeA351": "If X1 has an intelligence quotient of X2, then X2 is an instance of rational number and X1 is an instance of human for every X1 and X2.",
  "typeA352": "If X1 secretes substance X2, then X2 is a subclass of natural substance and X1 is a subclass of organic object for every X1 and X2.",
  "typeA353": "If X1 is the creator of X2, then X1 is an instance of agent for every X1 and X2.",
  "typeA354": "If X1 is a party to the agreement X2, then X2 is an instance of agreement and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA355": "If the agreement X1 is valid during the time period X2, then X2 is an instance of time interval and X1 is an instance of agreement for every X1 and X2.",
  "typeA356": "If the agreement X1 becomes effective at X2, then X2 is an instance of time point and X1 is an instance of agreement for every X1 and X2.",
  "typeA357": "If X2 is the expiration date of the agreement X1, then X2 is an instance of time point and X1 is an instance of agreement for every X1 and X2.",
  "typeA358": "If X1 is the local long name of X2, then X1 is an instance of symbolic string for every X1 and X2.",
  "typeA359": "If X1 is the local short name of X2, then X1 is an instance of symbolic string for every X1 and X2.",
  "typeA360": "If X1 is the commentator of X2, then X2 is an instance of process and X1 is an instance of agent for every X1 and X2.",
  "typeA361": "If X1 describes X2, then X2 is an instance of object and X1 is an instance of formula for every X1 and X2.",
  "typeA362": "If X1 is issued by X2, then X2 is an instance of cognitive agent and X1 is an instance of certificate for every X1 and X2.",
  "typeA363": "If X1 contains an official record of X2, then X2 is an instance of physical and X1 is an instance of text for every X1 and X2.",
  "typeA364": "If X1 is the axis of rotation of X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA365": "If the depth of water at X1 is X2, then X2 is an instance of length measure and X1 is an instance of water area for every X1 and X2.",
  "typeA366": "If X1 has the award X2, then X2 is an instance of object and X1 is an instance of agent for every X1 and X2.",
  "typeA367": "If X1 is the meat of the animal X2, then X2 is a subclass of animal and X1 is a subclass of meat for every X1 and X2.",
  "typeA368": "If the occupation of X1 is X2, then X2 is an instance of financial transaction and X1 is an instance of human for every X1 and X2.",
  "typeA369": "If X1 is constructed during X2, then X2 is an instance of time interval and X1 is an instance of stationary artifact for every X1 and X2.",
  "typeA370": "If X1 is a contractor for X2, then X2 is an instance of agent and X1 is an instance of stationary artifact for every X1 and X2.",
  "typeA371": "If X1 has the expertise to do X2, then X2 is an instance of field of study and X1 is an instance of human for every X1 and X2.",
  "typeA372": "If X1 has the occupation X2, then X2 is a subclass of intentional process and X1 is an instance of human for every X1 and X2.",
  "typeA373": "If the number of protons in X1 is X2, then X2 is an instance of positive integer and X1 is an instance of pure substance for every X1 and X2.",
  "typeA374": "If the number of electrons in X1 is X2, then X2 is an instance of positive integer and X1 is an instance of pure substance for every X1 and X2.",
  "typeA375": "If there is a total X2 of members in X1, then X2 is an instance of integer and X1 is an instance of collection for every X1 and X2.",
  "typeA376": "If the members of X1 belong to the class X2, then X2 is an instance of set or class and X1 is an instance of collection for every X1 and X2.",
  "typeA377": "If X1 has X2 in its inventory, then X2 is an instance of collection and X1 is an instance of content bearing object for every X1 and X2.",
  "typeA378": "If X1 is a stranger to X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA379": "If X1 is a typical part of , then X2 is a subclass of object and X1 is a subclass of object for every X1 and X2.",
  "typeA380": "If X2 typically contains X1, then X2 is a subclass of object and X1 is a subclass of object for every X1 and X2.",
  "typeA381": "If X1 is an initial part of X2, then X2 is a subclass of object and X1 is a subclass of object for every X1 and X2.",
  "typeA382": "If X2 initially contains X1, then X2 is a subclass of object and X1 is a subclass of object for every X1 and X2.",
  "typeA383": "If X1 is affiliated to organization X2, then X2 is an instance of organization and X1 is an instance of organization for every X1 and X2.",
  "typeA384": "If organization X1 has an ideological affiliation to X2, then X2 is an instance of form of government and X1 is an instance of organization for every X1 and X2.",
  "typeA385": "If organization X1 has a religious affiliation to X2, then X2 is an instance of belief group and X1 is an instance of organization for every X1 and X2.",
  "typeA386": "If X1 is in allegiance to X2, then X2 is an instance of cognitive agent and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA387": "If X2 is the anniversary of X1, then X2 is an instance of time interval and X1 is an instance of physical for every X1 and X2.",
  "typeA388": "If X2 is the birthplace of X1, then X2 is an instance of object and X1 is an instance of animal for every X1 and X2.",
  "typeA389": "If X2 is the birthdate of X1, then X2 is an instance of day and X1 is an instance of human for every X1 and X2.",
  "typeA390": "If X2 is the deathdate of X1, then X2 is an instance of day and X1 is an instance of human for every X1 and X2.",
  "typeA391": "If X2 is the deathplace of X1, then X2 is an instance of object and X1 is an instance of animal for every X1 and X2.",
  "typeA392": "If X1 is equipped with a device of type X2, then X2 is an instance of device and X1 is an instance of artifact for every X1 and X2.",
  "typeA393": "If X1 has a grammatical relation to X2, then X2 is an instance of sentence and X1 is an instance of phrase for every X1 and X2.",
  "typeA394": "If X1 is a distance on the path X2, then X2 is an instance of transitway and X1 is an instance of constant quantity for every X1 and X2.",
  "typeA395": "If X1 is in string X2, then X2 is an instance of symbolic string and X1 is an instance of character for every X1 and X2.",
  "typeA396": "If X2 is located in unit X1, then X2 is an instance of postal place and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA397": "If X2 is located on floor X1, then X2 is an instance of postal place and X1 is an instance of symbolic string for every X1 and X2.",
  "typeA398": "If X1 is the amount of electricity generated by X2, then X2 is an instance of physical quantity and X1 is an instance of power source for every X1 and X2.",
  "typeA399": "If X1 has the uniform X2, then X2 is a subclass of uniform clothing and X1 is an instance of group for every X1 and X2.",
  "typeA400": "If X1 is the owner of the policy X2, then X2 is an instance of policy and X1 is an instance of organization for every X1 and X2.",
  "typeA401": "If X1 is the approximated value of X2, then X2 is an instance of real number and X1 is an instance of real number for every X1 and X2.",
  "typeA402": "If X2 are citizens of X1, then X1 is an instance of geopolitical area for every X1 and X2.",
  "typeA403": "If X1 is a subset of X2, then X2 is an instance of set and X1 is an instance of set for every X1 and X2.",
  "typeA404": "If X1 is a piece of X2, then X2 is an instance of substance and X1 is an instance of substance for every X1 and X2.",
  "typeA405": "If X1 is a component of X2, then X2 is an instance of corpuscular object and X1 is an instance of corpuscular object for every X1 and X2.",
  "typeA406": "If X1 is the bottom of X2, then X2 is an instance of self connected object and X1 is an instance of self connected object for every X1 and X2.",
  "typeA407": "If X1 is the top of X2, then X2 is an instance of self connected object and X1 is an instance of self connected object for every X1 and X2.",
  "typeA408": "If X1 is a side of X2, then X2 is an instance of self connected object and X1 is an instance of self connected object for every X1 and X2.",
  "typeA409": "If X1 is a component of X2, then X2 is an instance of engineering component and X1 is an instance of engineering component for every X1 and X2.",
  "typeA410": "If X1 is a member of the group X2, then X2 is an instance of group of people and X1 is an instance of human for every X1 and X2.",
  "typeA411": "If X1 is half of X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA412": "If X1 is a third of X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA413": "If X1 is a quarter of X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA414": "If X1 is the largest part of X2, then X2 is an instance of object and X1 is an instance of object for every X1 and X2.",
  "typeA415": "If X1 is a student at X2, then X2 is an instance of educational organization and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA416": "If X1 is a teacher at X2, then X2 is an instance of educational organization and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA417": "If X1 is a point of the figure X2, then X2 is an instance of geometric figure and X1 is an instance of geometric point for every X1 and X2.",
  "typeA418": "If X1 is an angle of the figure X2, then X2 is an instance of geometric figure and X1 is an instance of two dimensional angle for every X1 and X2.",
  "typeA419": "If X1 is a side of the figure X2, then X2 is an instance of geometric figure and X1 is an instance of one dimensional figure for every X1 and X2.",
  "typeA420": "If X1 is the mother of X2, then X2 is an instance of organism and X1 is an instance of organism for every X1 and X2.",
  "typeA421": "If X1 is the father of X2, then X2 is an instance of organism and X1 is an instance of organism for every X1 and X2.",
  "typeA422": "If X1 is the daughter of X2, then X2 is an instance of organism and X1 is an instance of organism for every X1 and X2.",
  "typeA423": "If X1 is the son of X2, then X2 is an instance of organism and X1 is an instance of organism for every X1 and X2.",
  "typeA424": "If X1 is the grandmother of X2, then X2 is an instance of woman and X1 is an instance of human for every X1 and X2.",
  "typeA425": "If X1 is the grandfather of X2, then X2 is an instance of man and X1 is an instance of human for every X1 and X2.",
  "typeA426": "If X1 is the aunt of X2, then X2 is an instance of human and X1 is an instance of woman for every X1 and X2.",
  "typeA427": "If X1 is the cousin of X2, then X2 is an instance of human and X1 is an instance of human for every X1 and X2.",
  "typeA428": "If X1 is the nephew of X2, then X2 is an instance of human and X1 is an instance of man for every X1 and X2.",
  "typeA429": "If X1 is the niece of X2, then X2 is an instance of human and X1 is an instance of woman for every X1 and X2.",
  "typeA430": "If X1 is the uncle of X2, then X2 is an instance of human and X1 is an instance of man for every X1 and X2.",
  "typeA431": "If X1 grasps X2, then X2 is an instance of object and X1 is an instance of animal for every X1 and X2.",
  "typeA432": "If X2 is the plaintiff in X1, then X2 is an instance of cognitive agent and X1 is an instance of legal action for every X1 and X2.",
  "typeA433": "If X2 is a participant in the contest X1, then X2 is an instance of agent and X1 is an instance of contest for every X1 and X2.",
  "typeA434": "If X2 attends X1, then X2 is an instance of human and X1 is an instance of demonstrating for every X1 and X2.",
  "typeA435": "If X2 is an instrument for X1, then X2 is an instance of physical and X1 is an instance of process for every X1 and X2.",
  "typeA436": "If X2 is a resource for X1, then X2 is an instance of object and X1 is an instance of process for every X1 and X2.",
  "typeA437": "If X2 is a result of X1, then X1 is an instance of process for every X1 and X2.",
  "typeA438": "If X1 is a reactant in X2, then X2 is an instance of substance and X1 is an instance of chemical process for every X1 and X2.",
  "typeA439": "If X1 is a reagent in X2, then X2 is an instance of substance and X1 is an instance of chemical process for every X1 and X2.",
  "typeA440": "If X1 is the defendant in X2, then X2 is an instance of legal action and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA441": "If the entire process X1 is located on X2, then X2 is an instance of object and X1 is an instance of process for every X1 and X2.",
  "typeA442": "If X1 has the color X2, then X2 is an instance of color attribute and X1 is an instance of object for every X1 and X2.",
  "typeA443": "If X2 is the financial asset of X1, then X2 is an instance of object and X1 is an instance of agent for every X1 and X2.",
  "typeA444": "If X1 is the age of X2, then X2 is an instance of time duration and X1 is an instance of object for every X1 and X2.",
  "typeA445": "If X1 has a linear extent of X2, then X2 is an instance of length measure and X1 is an instance of object for every X1 and X2.",
  "typeA446": "If X1 has a width of X2, then X2 is an instance of length measure and X1 is an instance of object for every X1 and X2.",
  "typeA447": "If X1 has a height of X2, then X2 is an instance of length measure and X1 is an instance of self connected object for every X1 and X2.",
  "typeA448": "If X1 has a length of X2, then X2 is an instance of length measure and X1 is an instance of object for every X1 and X2.",
  "typeA449": "If X1 has a monetary value of X2, then X2 is an instance of currency measure and X1 is an instance of physical for every X1 and X2.",
  "typeA450": "If X1 has a wavelength of X2, then X2 is an instance of length measure and X1 is an instance of radiating for every X1 and X2.",
  "typeA451": "If the air temperature of X1 is X2, then X2 is an instance of temperature measure and X1 is an instance of object for every X1 and X2.",
  "typeA452": "If X2 is the home of X1, then X2 is an instance of permanent residence and X1 is an instance of human for every X1 and X2.",
  "typeA453": "If X1 stays in X2, then X2 is an instance of temporary residence and X1 is an instance of human for every X1 and X2.",
  "typeA454": "If X1 is the stepfather of X2, then X2 is an instance of man and X1 is an instance of human for every X1 and X2.",
  "typeA455": "If X1 is the stepmother of X2, then X2 is an instance of woman and X1 is an instance of human for every X1 and X2.",
  "typeA456": "If X1 is exactly located at X2, then X2 is an instance of object and X1 is an instance of physical for every X1 and X2.",
  "typeA457": "If the headquarters of the organization X1 is in X2, then X2 is an instance of geopolitical area and X1 is an instance of organization for every X1 and X2.",
  "typeA458": "If X1 is on board of X2, then X2 is an instance of vehicle and X1 is an instance of self connected object for every X1 and X2.",
  "typeA459": "If the truth value of X1 is X2, then X2 is an instance of truth value and X1 is an instance of sentence for every X1 and X2.",
  "typeA460": "If X1 enjoys X2, then X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA461": "If X1 dislikes X2, then X2 is an instance of object and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA462": "If X1 lacks X2, then X2 is an instance of physical and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA463": "If X1 approves of X2, then X2 is an instance of cognitive agent and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA464": "If X1 names X2, then X1 is an instance of symbolic string for every X1 and X2.",
  "typeA465": "If X1 is an unique identifier for X2, then X1 is an instance of symbolic string for every X1 and X2.",
  "typeA466": "If X1 is recorded on X2, then X2 is an instance of physical and X1 is an instance of content bearing object for every X1 and X2.",
  "typeA467": "If X1 is the title of X2, then X1 is an instance of symbolic string for every X1 and X2.",
  "typeA468": "If X1 is the former name of X2, then X1 is an instance of symbolic string for every X1 and X2.",
  "typeA469": "If X1 conforms to X2, then X2 is an instance of proposition and X1 is an instance of object for every X1 and X2.",
  "typeA470": "If X1 fears that X2 will be true, then X2 is an instance of formula and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA471": "If X1 hopes that X2 will be true, then X2 is an instance of formula and X1 is an instance of cognitive agent for every X1 and X2.",
  "typeA472": "If X2 is the birthday of X1, then X2 is an instance of day and X1 is an instance of human for every X1 and X2.",
  "typeA473": "If X1 is the object in the sentence X2, then X2 is an instance of sentence and X1 is an instance of noun phrase for every X1 and X2.",
  "typeA474": "If X1 is the subject in the sentence X2, then X2 is an instance of sentence and X1 is an instance of noun phrase for every X1 and X2.",
  "typeA475": "If X1 holds with the arguments X2, X3 and X4, then X1 is an instance of ternary relation for every X1, X2, X3 and X4.",
  "typeA476": "If X1 multiplied by X2 is X3, then X2 is an instance of quantity and X1 is an instance of quantity for every X1, X2 and X3.",
  "typeA477": "If X1 plus X2 is X3, then X2 is an instance of quantity and X1 is an instance of quantity for every X1, X2 and X3.",
  "typeA478": "If X1 minus X2 is X3, then X2 is an instance of quantity and X1 is an instance of quantity for every X1, X2 and X3.",
  "typeA479": "If X1 divided by X2 is X3, then X2 is an instance of quantity and X1 is an instance of quantity for every X1, X2 and X3.",
  "typeA480": "If the larger of X1 and X2 is X3, then X2 is an instance of quantity and X1 is an instance of quantity for every X1, X2 and X3.",
  "typeA481": "If the smaller of X1 and X2 is X3, then X2 is an instance of quantity and X1 is an instance of quantity for every X1, X2 and X3.",
  "typeA482": "If the value at the index X2 in list X1 is X3, then X2 is an instance of positive integer and X1 is an instance of list for every X1, X2 and X3.",
  "typeA483": "If the concatenation of the two lists X1 and X2 is X3, then X2 is an instance of list and X1 is an instance of list for every X1, X2 and X3.",
  "typeA484": "If the place where X1 takes place at X2 is X3, then X2 is an instance of time point and X1 is an instance of physical for every X1, X2 and X3.",
  "typeA485": "If X1 raised to the power of X2 is X3, then X2 is an instance of integer and X1 is an instance of quantity for every X1, X2 and X3.",
  "typeA486": "If the logarithm of X1 to the base X2 is X3, then X2 is an instance of positive integer and X1 is an instance of real number for every X1, X2 and X3.",
  "typeA487": "If the remainder of X1 divided by X2 is X3, then X2 is an instance of quantity and X1 is an instance of quantity for every X1, X2 and X3.",
  "typeA488": "If the union of X1 and X2 is X3, then X2 is an instance of set or class and X1 is an instance of set or class for every X1, X2 and X3.",
  "typeA489": "If the intersection of X1 and X2 is X3, then X2 is an instance of set or class and X1 is an instance of set or class for every X1, X2 and X3.",
  "typeA490": "If the relative complement of X1 and X2 is X3, then X2 is an instance of set or class and X1 is an instance of set or class for every X1, X2 and X3.",
  "typeA491": "If the kappa function with the arguments X1 and X2 returns X3, then X2 is an instance of formula and X1 is an instance of symbolic string for every X1, X2 and X3.",
  "typeA492": "If the minimal weighted path between X1 and X2 is X3, then X2 is an instance of graph node and X1 is an instance of graph node for every X1, X2 and X3.",
  "typeA493": "If the maximal weighted path between X1 and X2 is X3, then X2 is an instance of graph node and X1 is an instance of graph node for every X1, X2 and X3.",
  "typeA494": "If the set of paths between X1 and X2 is X3, then X2 is an instance of graph node and X1 is an instance of graph node for every X1, X2 and X3.",
  "typeA495": "If X1 measured in X2 is X3, then X2 is an instance of unit of measure and X1 is an instance of real number for every X1, X2 and X3.",
  "typeA496": "If the interval from X1 to X2 is X3, then X2 is an instance of constant quantity and X1 is an instance of constant quantity for every X1, X2 and X3.",
  "typeA497": "If X1 per X2 is X3, then X2 is an instance of physical quantity and X1 is an instance of physical quantity for every X1, X2 and X3.",
  "typeA498": "If the time interval between X1 and X2 is X3, then X2 is an instance of time point and X1 is an instance of time point for every X1, X2 and X3.",
  "typeA499": "If the recurring period from X1 to X2 is X3, then X2 is a subclass of time interval and X1 is a subclass of time interval for every X1, X2 and X3.",
  "typeA500": "If X3 is the class of every moth of X1 of X2, then X2 is a subclass of year and X1 is a subclass of month for every X1, X2 and X3.",
  "typeA501": "If X3 is the class of every X1th day of X2, then X2 is a subclass of month and X1 is an instance of positive integer for every X1, X2 and X3.",
  "typeA502": "If X3 is the class of every X1th hour of X2, then X2 is a subclass of day and X1 is an instance of nonnegative integer for every X1, X2 and X3.",
  "typeA503": "If X3 is the class of every X1th minute of X2, then X2 is a subclass of hour and X1 is an instance of nonnegative integer for every X1, X2 and X3.",
  "typeA504": "If X3 is the class of every X1th second of X2, then X2 is a subclass of minute and X1 is an instance of positive real number for every X1, X2 and X3.",
  "typeA505": "If X3 is the class of X2 that make up X1, then X2 is a subclass of time interval and X1 is an instance of time interval for every X1, X2 and X3.",
  "typeA506": "If the union of the parts X1 and X2 is X3, then X2 is an instance of object and X1 is an instance of object for every X1, X2 and X3.",
  "typeA507": "If the intersection of the parts X1 and X2 is X3, then X2 is an instance of object and X1 is an instance of object for every X1, X2 and X3.",
  "typeA508": "If the difference between the parts X1 and X2 is X3, then X2 is an instance of object and X1 is an instance of object for every X1, X2 and X3.",
  "typeA509": "If the edition X2 of X1 is X3, then X2 is an instance of positive integer and X1 is a subclass of content bearing object for every X1, X2 and X3.",
  "typeA510": "If X3 is the time X1 in zone X2, then X2 is an instance of time zone and X1 is an instance of time position for every X1, X2 and X3.",
  "typeA511": "If the average amount of X1 possessed by a resident of X2 is X3, then X2 is an instance of geopolitical area and X1 is an instance of quantity for every X1, X2 and X3.",
  "typeA512": "If the time period starting at X1 and ending after X2 is X3, then X2 is an instance of time duration and X1 is an instance of time point for every X1, X2 and X3.",
  "typeA513": "If the volume X2 in the series X1 is X3, then X2 is an instance of positive integer and X1 is a subclass of series for every X1, X2 and X3.",
  "typeA514": "If the periodical issue number X2 of X1 is X3, then X2 is an instance of positive integer and X1 is a subclass of periodical for every X1, X2 and X3.",
  "typeA515": "If the concatenation of strings X1 and X2 is X3, then X2 is an instance of symbolic string and X1 is an instance of symbolic string for every X1, X2 and X3.",
  "typeA516": "If the X2th argument of X1 is an instance of X3, then X3 is an instance of set or class and X2 is an instance of positive integer and X1 is an instance of relation for every X1, X2 and X3.",
  "typeA517": "If the X2th argument of X1 is a subclass of X3, then X3 is an instance of set or class and X2 is an instance of positive integer and X1 is an instance of relation for every X1, X2 and X3.",
  "typeA518": "If X3 is the documentation of X1 in the language X2, then X3 is an instance of symbolic string and X2 is an instance of human language for every X1, X2 and X3.",
  "typeA519": "If X2 is presented as X3 in the language X1, then X3 is an instance of symbolic string and X1 is an instance of language for every X1, X2 and X3.",
  "typeA520": "If the term X2 is presented as X3 in the language X1, then X3 is an instance of symbolic string and X1 is an instance of language for every X1, X2 and X3.",
  "typeA521": "If the concept of X1 in language X3 is related to the concept of X2, then X3 is an instance of language and X1 is an instance of symbolic string for every X1, X2 and X3.",
  "typeA522": "If X1 has more of X3 than X2, then X3 is an instance of attribute for every X1, X2 and X3.",
  "typeA523": "If the probability of X2 provided that X1 holds is X3, then X3 is an instance of real number and X2 is an instance of formula and X1 is an instance of formula for every X1, X2 and X3.",
  "typeA524": "If X1 prefers X2 over X3, then X3 is an instance of formula and X2 is an instance of formula and X1 is an instance of cognitive agent for every X1, X2 and X3.",
  "typeA525": "If X3 is capable to do X1 in role X2, then X3 is an instance of object and X2 is an instance of case role and X1 is a subclass of process for every X1, X2 and X3.",
  "typeA526": "If X1 has the purpose of X2 for X3, then X3 is an instance of cognitive agent and X2 is an instance of formula and X1 is an instance of physical for every X1, X2 and X3.",
  "typeA527": "If X1 brings it about that X2 has the norm X3, then X3 is an instance of objective norm and X2 is an instance of formula for every X1, X2 and X3.",
  "typeA528": "If X1 brings it about that X2 does not have the norm X3, then X3 is an instance of objective norm and X2 is an instance of formula for every X1, X2 and X3.",
  "typeA529": "If X2 is between X1 and X3, then X3 is an instance of object and X2 is an instance of object and X1 is an instance of object for every X1, X2 and X3.",
  "typeA530": "If X3 uses X2 to represent X1, then X3 is an instance of agent for every X1, X2 and X3.",
  "typeA531": "If X1 represents X2 in the language X3, then X3 is an instance of language and X1 is an instance of linguistic expression for every X1, X2 and X3.",
  "typeA532": "If X3 links X1 and X2, then X3 is an instance of graph arc and X2 is an instance of graph node and X1 is an instance of graph node for every X1, X2 and X3.",
  "typeA533": "If X3 is the distance between X1 and X2, then X3 is an instance of length measure and X2 is an instance of physical and X1 is an instance of physical for every X1, X2 and X3.",
  "typeA534": "If X2 occurs between X1 and X3, then X3 is an instance of time point and X2 is an instance of time point and X1 is an instance of time point for every X1, X2 and X3.",
  "typeA535": "If X2 occurs between or at X1 and X2, then X3 is an instance of time point and X2 is an instance of time point and X1 is an instance of time point for every X1, X2 and X3.",
  "typeA536": "If X1 connects X2 and X3, then X3 is an instance of self connected object and X2 is an instance of self connected object and X1 is an instance of self connected object for every X1, X2 and X3.",
  "typeA537": "If X1 is X3 to X2, then X3 is an instance of positional attribute and X2 is an instance of object and X1 is an instance of object for every X1, X2 and X3.",
  "typeA538": "If X1 holds the position of X2 in X3, then X3 is an instance of organization and X2 is an instance of position and X1 is an instance of human for every X1, X2 and X3.",
  "typeA539": "If X2 authorizes X3 to perform tasks of the type X1, then X3 is an instance of cognitive agent and X1 is an instance of formula for every X1, X2 and X3.",
  "typeA540": "If X2 obligates X3 to perform tasks of the type X1, then X3 is an instance of cognitive agent and X1 is an instance of formula for every X1, X2 and X3.",
  "typeA541": "If X1 and X2 intersect at the point X3, then X3 is an instance of geometric point and X2 is an instance of one dimensional figure and X1 is an instance of one dimensional figure for every X1, X2 and X3.",
  "typeA542": "If the distance between the two points X1 and X2 is X3, then X3 is an instance of length measure and X2 is an instance of geometric point and X1 is an instance of geometric point for every X1, X2 and X3.",
  "typeA543": "If X2 is a comment on X1 by X3, then X3 is an instance of symbolic string and X2 is an instance of symbolic string for every X1, X2 and X3.",
  "typeA544": "If X1 is used by X3 at the timepoint X2, then X3 is an instance of agent and X2 is an instance of time point and X1 is an instance of object for every X1, X2 and X3.",
  "typeA545": "If X3 pays X2 for X1, then X3 is an instance of agent and X2 is an instance of currency measure and X1 is an instance of physical for every X1, X2 and X3.",
  "typeA546": "If X1 has X3 members of the kind X2, then X3 is an instance of nonnegative integer and X2 is an instance of set or class and X1 is an instance of collection for every X1, X2 and X3.",
  "typeA547": "If X1 is a member of X2 dureing the time period X3, then X3 is an instance of time position and X2 is an instance of collection and X1 is an instance of self connected object for every X1, X2 and X3.",
  "typeA548": "If X2 is subordinate to X3 in organization X1, then X3 is an instance of human and X2 is an instance of human and X1 is an instance of organization for every X1, X2 and X3.",
  "typeA549": "If the role X2 is subordinate to the role X3 in the organization X1, then X3 is an instance of position and X2 is an instance of position and X1 is an instance of organization for every X1, X2 and X3.",
  "typeA550": "If X1 is responsible for actions of type X2 in X3, then X3 is an instance of geographic area and X2 is a subclass of process and X1 is an instance of agent for every X1, X2 and X3.",
  "typeA551": "If X1 plays the role X2 in the process X3, then X3 is an instance of process and X2 is an instance of case role and X1 is an instance of object for every X1, X2 and X3.",
  "typeA552": "If X1 is at X3 during X2, then X3 is an instance of object and X2 is an instance of time position and X1 is an instance of object for every X1, X2 and X3.",
  "typeA553": "If X1 is equipped with X3 devices of the type X2, then X3 is an instance of quantity and X2 is a subclass of device and X1 is an instance of object for every X1, X2 and X3.",
  "typeA554": "If X3 is the concatenation of the strings X1 and X2, then X3 is an instance of symbolic string and X2 is an instance of symbolic string and X1 is an instance of symbolic string for every X1, X2 and X3.",
  "typeA555": "If X1 precedes X2 in X3, then X3 is an instance of symbolic string and X2 is an instance of symbolic string and X1 is an instance of symbolic string for every X1, X2 and X3.",
  "typeA556": "If X3 is a canonical name for X1 in the language X2, then X3 is an instance of symbolic string and X2 is an instance of language and X1 is an instance of region for every X1, X2 and X3.",
  "typeA557": "If X1 per X2 is X3, then X2 is an instance of volume measure and X1 is an instance of mass measure for every X1, X2 and X3.",
  "typeA558": "If X1 per X2 is X3, then X2 is an instance of time duration and X1 is an instance of length measure for every X1, X2 and X3.",
  "typeA559": "If the difference in height between X1 and X2 is X3, then X3 is an instance of length measure and X2 is an instance of physical and X1 is an instance of physical for every X1, X2 and X3.",
  "typeA560": "If the difference in depth between X1 and X2 is X3, then X3 is an instance of length measure and X2 is an instance of physical and X1 is an instance of physical for every X1, X2 and X3.",
  "typeA561": "If X1 connects X2 and X3, then X3 is an instance of engineering component and X2 is an instance of engineering component and X1 is an instance of engineering connection for every X1, X2 and X3.",
  "typeA562": "If the concept of X1 in language X3 is synonymous with the concept of X2, then X3 is an instance of language and X1 is an instance of symbolic string for every X1, X2 and X3.",
  "typeA563": "If the concept of X1 in language X3 subsumes the concept of X2, then X3 is an instance of language and X1 is an instance of symbolic string for every X1, X2 and X3.",
  "typeA564": "If the concept of X1 in language X3 is subsumed by the concept of X2, then X3 is an instance of language and X1 is an instance of symbolic string for every X1, X2 and X3.",
  "typeA565": "If X1 holds with the arguments X2, X3, X4 and X5, then X1 is an instance of quaternary relation for every X1, X2, X3, X4 and X5.",
  "typeA566": "If the substring of X1 starting at index X2 and ending at index X3 minus one is X4, then X3 is an instance of nonnegative integer and X2 is an instance of nonnegative integer and X1 is an instance of symbolic string for every X1, X2, X3 and X4.",
  "typeA567": "If X2 is located between X1 and X3 on the path X4, then X4 is an instance of object and X3 is an instance of object and X2 is an instance of object and X1 is an instance of object for every X1, X2, X3 and X4.",
  "typeA568": "If X4 is responsible for the X1 with the attribute X2 in the agreement X3, then X4 is an instance of cognitive agent and X3 is an instance of agreement and X2 is an instance of deontic attribute and X1 is an instance of proposition for every X1, X2, X3 and X4.",
  "typeA569": "If X1 employs X2 and pays them X4 per X3, then X4 is an instance of currency measure and X3 is an instance of time duration and X2 is an instance of human and X1 is an instance of organization for every X1, X2, X3 and X4.",
  "typeA570": "If X1 is located before X2 on the path X3 with respect to X4, then X4 is an instance of transfer and X3 is an instance of object and X2 is an instance of object and X1 is an instance of object for every X1, X2, X3 and X4.",
  "typeA571": "If X1 holds with the arguments X2, X3, X4, X5 and X6, then X1 is an instance of quintary relation for every X1, X2, X3, X4, X5 and X6.",
  "typeA572": "If X1 per X2 in X3 in the direction X4 is X5, then X4 is an instance of directional attribute and X3 is an instance of region and X2 is an instance of time duration and X1 is an instance of length measure for every X1, X2, X3, X4 and X5.",
  "typeA573": "If the agent that resides at X1 X2 X3 X4 is X5, then X4 is an instance of nation and X3 is an instance of city and X2 is an instance of roadway and X1 is an instance of stationary artifact for every X1, X2, X3, X4 and X5.",
  "typeA574": "If X1 plays the role X2 in X3, which occurs at X4 and X5, then X5 is an instance of object and X4 is an instance of time position and X3 is a subclass of process and X2 is an instance of case role and X1 is an instance of object for every X1, X2, X3, X4 and X5.",
  "typeA575": "If X2 is the only instance of X1, then X1 is an instance of attribute for every X1 and X2.",
  "typeA576": "If X1 is an exhaustive decomposition, then X1 is an instance of class for every X1.",
  "typeA577": "If X1 is a disjoint decomposition, then X1 is an instance of class for every X1.",
  "typeA578": "If X1 is a partition, then X1 is an instance of class for every X1.",
  "typeA579": "If the result of the function X1 is X2, then X1 is an instance of function for every X1 and X2."
}