% ($comment 
% ;; In this file, we include all the relations and macros that are used to define
% ;; the ontology, being their meaning independent from the ontology.
% ;;
% ;; We use the standard kif syntax, plus the following notation for multi-length
% ;; list @(...), wich accepts tuples of elements of any arity. From now on, we will
% ;; always assume that every row variable represents a multi-length list.
% ;;
% ;; Besides, we use two macros for dealing with row variables and multi-length list:
% ;; @or/3 and @and/3
% ;;
% ;; Usage:
% ;;
% ;; (@or(@ROW,?HEAD,@TAIL)
% ;;		F)
% ;;
% ;; (@and(@ROW,?HEAD,@TAIL)
% ;;		F)
% ;;
% ;; where:	- @ROW is a row variables or a multi-length list
% ;;			- ?HEAD is the item in the multi-length list
% ;;			- @TAIL is the multi-length list containing the remaining
% ;;				elements of @ROW after removing ?HEAD
% ;;			- F is a KIF-formula where the variables ?HEAD and @TAIL
% ;;				occur free (if they occur)
% ;;
% ;; The resulting formula is a disjuntion/conjunction of n formulas F1 ... Fn, where
% ;; n is the number of elements in @ROW, such that for each Fi the variables ?HEAD
% ;; and @TAIL have been replaced with the i-th head and the i-th tail in @ROW. Note
% ;; that the use of @or/3 and @and/3 can be nested
% ;;
% ;; The ontology is defined on the basis of two meta-classes ---$class and $object---,
% ;; which denote the classical partition of concepts in an ontology into classes
% ;; and objects. That is, every concept that we define in our ontology is either
% ;; a meta-class or a meta-object. However, this definition is implicit in the ontology,
% ;; as we will see. The meta-predicates $isClass/1 and $isObject/1 explicitly define
% ;; meta-classes and meta-objects.
% )

% 	($domain $isClass 1 $class)

% 	($domain $isObject 1 $object)

% 	($domain $isObjectOrClass 1 $objectOrclass)

% ($comment 
% ;; The predicates that are using for defining the ontology are:
% ;;
% ;; 1.	$subclass/2	-> its are used to construct the
% ;;				ontology hierarchy and allows to state if a $class
% ;;				is a $subclass of another $class
% ;;				in the hierarchy
% ;; 2.	$instance/2	-> it is used to provide $instances of $classes
% ;;
% ;; $classes on tops of the ontology are distinguished. For this purpose, we
% ;; use the meta-predicate $topClass/1. From tops, we can infer meta-classes
% ;; and meta-objects.
% )

% 	($domain $topClass 1 $class)


% ($documentation $topClass "(&%$topClass ?CLASS) means that ?CLASS is a class on 
% the top of the ontology. Note that an ontology may have several tops.")


% 	($domain $subclass 1 $class)

% 	($domain $subclass 2 $class)


% ($documentation $subclass "(&%$subclass ?CLASS1 ?CLASS2) means that ?CLASS1 is a
% $subclass of ?CLASS2, i.e. every $instance of ?CLASS1 is also an $instance of ?CLASS2.
% A $class may have multiple $superclasses and $subclasses.")


% ($comment 
% ;; $subclass/2 is reflexive
% )

fof( predefinitionsA7, axiom,
	(![X]: 
		(
			p__d__subclass(X,X)
		)
	)
).


% ($comment 
% ;; $subclass/2 is transitive
% )

fof( predefinitionsA8, axiom,
	(![X,Y,Z]: 
		(
			(
				(
					(
						p__d__subclass(X,Y)
					)
				 &
					(
						p__d__subclass(Y,Z)
					)
				)
			)
			=>
			(
				p__d__subclass(X,Z)
			)
		)
	)
).


% ($comment 
% ;; $subclass/2 is antisymmetric
% )

fof( predefinitionsA9, axiom,
	(![X,Y]: 
		(
			(
				(
					(
						p__d__subclass(X,Y)
					)
				 &
					(
						p__d__subclass(Y,X)
					)
				)
			)
			=>
			(
				( X = Y )
			)
		)
	)
).


% 	($domain $instance 1 $object)

% 	($domain $instance 2 $class)


% ($documentation $instance "An object is an &%$instance of a &%$Class if it is included
% in that &%$Class.  An individual may be an $instance of many $classes, some of
% which may be $subclasses of others.  Thus, there is no assumption in the meaning
% of &%$instance about specificity or uniqueness.")


% ($comment 
% ;; Transitivity of $instance/2 over $subclass/2
% )

fof( predefinitionsA12, axiom,
	(![X,Y,Z]: 
		(
			(
				(
					(
						p__d__instance(X,Y)
					)
				 &
					(
						p__d__subclass(Y,Z)
					)
				)
			)
			=>
			(
				p__d__instance(X,Z)
			)
		)
	)
).


% 	($domain $disjoint 1 $class)

% 	($domain $disjoint 2 $class)


% ($documentation $disjoint "A set of $classes C is &%$disjoint if the $classes in
% C share no $instances")


fof( predefinitionsA15, axiom,
	(![CLASS1,CLASS2]: 
		(
			(
				p__d__disjoint(CLASS1,CLASS2)
			)
			<=>
			(
				(![INST]: 
					(
						(
							~ (
								p__d__instance(INST,CLASS1)
							)
						 |
							~ (
								p__d__instance(INST,CLASS2)
							)
						)
					)
				)
			)
		)
	)
).


% 	($domain $partition 1 $class)

% 	($domain $partition 2 @$class)


% ($documentation $partition "A &%$partition of a $class C is a set of 
% mutually &%d$isjoint $classes (a $subclass $partition) which covers C.  
% Every $instance of C is an $instance of exactly one of the $subclasses 
% in the $partition.")


fof( predefinitionsA18, axiom,
	(
		(
			(![CLASS,ROW1,ROW2]: 
				(
					(
						p__d__partition3(CLASS,ROW1,ROW2)
					)
					<=>
					(
						(
							(
								p__d__exhaustiveDecomposition3(CLASS,ROW1,ROW2)
							)
						 &
							(
								p__d__disjointDecomposition3(CLASS,ROW1,ROW2)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3]: 
				(
					(
						p__d__partition4(CLASS,ROW1,ROW2,ROW3)
					)
					<=>
					(
						(
							(
								p__d__exhaustiveDecomposition4(CLASS,ROW1,ROW2,ROW3)
							)
						 &
							(
								p__d__disjointDecomposition4(CLASS,ROW1,ROW2,ROW3)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3,ROW4]: 
				(
					(
						p__d__partition5(CLASS,ROW1,ROW2,ROW3,ROW4)
					)
					<=>
					(
						(
							(
								p__d__exhaustiveDecomposition5(CLASS,ROW1,ROW2,ROW3,ROW4)
							)
						 &
							(
								p__d__disjointDecomposition5(CLASS,ROW1,ROW2,ROW3,ROW4)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3,ROW4,ROW5]: 
				(
					(
						p__d__partition6(CLASS,ROW1,ROW2,ROW3,ROW4,ROW5)
					)
					<=>
					(
						(
							(
								p__d__exhaustiveDecomposition6(CLASS,ROW1,ROW2,ROW3,ROW4,ROW5)
							)
						 &
							(
								p__d__disjointDecomposition6(CLASS,ROW1,ROW2,ROW3,ROW4,ROW5)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6]: 
				(
					(
						p__d__partition7(CLASS,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6)
					)
					<=>
					(
						(
							(
								p__d__exhaustiveDecomposition7(CLASS,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6)
							)
						 &
							(
								p__d__disjointDecomposition7(CLASS,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6)
							)
						)
					)
				)
			)
		)
	)
).


% 	($domain $exhaustiveDecomposition 1 $class)

% 	($domain $exhaustiveDecomposition 2 @$class)


% ($documentation $exhaustiveDecomposition "An &%exhaustiveDecomposition of a 
% &%$class C is a set of $subclasses of C such that every $instance of C is an 
% $instance of one of the $subclasses in the set.")


fof( predefinitionsA21, axiom,
	(
		(
			(![CLASS,ROW1,ROW2]: 
				(
					(
						p__d__exhaustiveDecomposition3(CLASS,ROW1,ROW2)
					)
					<=>
					(
						(![X]: 
							(
								(
									p__d__instance(X,CLASS)
								)
								=>
								(
									(
										p__d__instance(X,ROW1)
									 |
										p__d__instance(X,ROW2)
									)
								)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3]: 
				(
					(
						p__d__exhaustiveDecomposition4(CLASS,ROW1,ROW2,ROW3)
					)
					<=>
					(
						(![X]: 
							(
								(
									p__d__instance(X,CLASS)
								)
								=>
								(
									(
										p__d__instance(X,ROW1)
									 |
										p__d__instance(X,ROW2)
									 |
										p__d__instance(X,ROW3)
									)
								)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3,ROW4]: 
				(
					(
						p__d__exhaustiveDecomposition5(CLASS,ROW1,ROW2,ROW3,ROW4)
					)
					<=>
					(
						(![X]: 
							(
								(
									p__d__instance(X,CLASS)
								)
								=>
								(
									(
										p__d__instance(X,ROW1)
									 |
										p__d__instance(X,ROW2)
									 |
										p__d__instance(X,ROW3)
									 |
										p__d__instance(X,ROW4)
									)
								)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3,ROW4,ROW5]: 
				(
					(
						p__d__exhaustiveDecomposition6(CLASS,ROW1,ROW2,ROW3,ROW4,ROW5)
					)
					<=>
					(
						(![X]: 
							(
								(
									p__d__instance(X,CLASS)
								)
								=>
								(
									(
										p__d__instance(X,ROW1)
									 |
										p__d__instance(X,ROW2)
									 |
										p__d__instance(X,ROW3)
									 |
										p__d__instance(X,ROW4)
									 |
										p__d__instance(X,ROW5)
									)
								)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6]: 
				(
					(
						p__d__exhaustiveDecomposition7(CLASS,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6)
					)
					<=>
					(
						(![X]: 
							(
								(
									p__d__instance(X,CLASS)
								)
								=>
								(
									(
										p__d__instance(X,ROW1)
									 |
										p__d__instance(X,ROW2)
									 |
										p__d__instance(X,ROW3)
									 |
										p__d__instance(X,ROW4)
									 |
										p__d__instance(X,ROW5)
									 |
										p__d__instance(X,ROW6)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


% 	($domain $disjointDecomposition 1 $class)

% 	($domain $disjointDecomposition 2 @$class)


% ($documentation $disjointDecomposition "A &%$disjointDecomposition of a &%$class 
% C is a set of $subclasses of C that are mutually &%$disjoint.")


fof( predefinitionsA24, axiom,
	(
		(
			(![CLASS,ROW1,ROW2]: 
				(
					(
						p__d__disjointDecomposition3(CLASS,ROW1,ROW2)
					)
					<=>
					(
						p__d__disjoint(ROW1,ROW2)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3]: 
				(
					(
						p__d__disjointDecomposition4(CLASS,ROW1,ROW2,ROW3)
					)
					<=>
					(
						(
							(
								p__d__disjoint(ROW1,ROW2)
							)
						 &
							(
								p__d__disjoint(ROW1,ROW3)
							)
						 &
							(
								p__d__disjoint(ROW2,ROW3)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3,ROW4]: 
				(
					(
						p__d__disjointDecomposition5(CLASS,ROW1,ROW2,ROW3,ROW4)
					)
					<=>
					(
						(
							(
								p__d__disjoint(ROW1,ROW2)
							)
						 &
							(
								p__d__disjoint(ROW1,ROW3)
							)
						 &
							(
								p__d__disjoint(ROW1,ROW4)
							)
						 &
							(
								p__d__disjoint(ROW2,ROW3)
							)
						 &
							(
								p__d__disjoint(ROW2,ROW4)
							)
						 &
							(
								p__d__disjoint(ROW3,ROW4)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3,ROW4,ROW5]: 
				(
					(
						p__d__disjointDecomposition6(CLASS,ROW1,ROW2,ROW3,ROW4,ROW5)
					)
					<=>
					(
						(
							(
								p__d__disjoint(ROW1,ROW2)
							)
						 &
							(
								p__d__disjoint(ROW1,ROW3)
							)
						 &
							(
								p__d__disjoint(ROW1,ROW4)
							)
						 &
							(
								p__d__disjoint(ROW1,ROW5)
							)
						 &
							(
								p__d__disjoint(ROW2,ROW3)
							)
						 &
							(
								p__d__disjoint(ROW2,ROW4)
							)
						 &
							(
								p__d__disjoint(ROW2,ROW5)
							)
						 &
							(
								p__d__disjoint(ROW3,ROW4)
							)
						 &
							(
								p__d__disjoint(ROW3,ROW5)
							)
						 &
							(
								p__d__disjoint(ROW4,ROW5)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![CLASS,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6]: 
				(
					(
						p__d__disjointDecomposition7(CLASS,ROW1,ROW2,ROW3,ROW4,ROW5,ROW6)
					)
					<=>
					(
						(
							(
								p__d__disjoint(ROW1,ROW2)
							)
						 &
							(
								p__d__disjoint(ROW1,ROW3)
							)
						 &
							(
								p__d__disjoint(ROW1,ROW4)
							)
						 &
							(
								p__d__disjoint(ROW1,ROW5)
							)
						 &
							(
								p__d__disjoint(ROW1,ROW6)
							)
						 &
							(
								p__d__disjoint(ROW2,ROW3)
							)
						 &
							(
								p__d__disjoint(ROW2,ROW4)
							)
						 &
							(
								p__d__disjoint(ROW2,ROW5)
							)
						 &
							(
								p__d__disjoint(ROW2,ROW6)
							)
						 &
							(
								p__d__disjoint(ROW3,ROW4)
							)
						 &
							(
								p__d__disjoint(ROW3,ROW5)
							)
						 &
							(
								p__d__disjoint(ROW3,ROW6)
							)
						 &
							(
								p__d__disjoint(ROW4,ROW5)
							)
						 &
							(
								p__d__disjoint(ROW4,ROW6)
							)
						 &
							(
								p__d__disjoint(ROW5,ROW6)
							)
						)
					)
				)
			)
		)
	)
).



% ($comment 
% ;; The compiler checks whether the same symbol is used as constant and as relation,
% ;; and returns an error when such a symbol exists whithout using $schema. That
% ;; is, the use of a symbol as both a constant and a relation is only allowed when
% ;; $schema is used.
% ;;
% ;; In the ontology, all the axioms must be closed. That is, all the variables must
% ;; quantified. Otherwise, the compiler reports an error. 
% ;;
% ;; Variables may have associated a type defined in the ontology. Type information
% ;; is provided using $domain/3. If the type starts by "@", then the argument is a
% ;; multi-length list. This type information is used for typing axioms in the
% ;; following way:
% ;;
% ;;	Assuming that ?X is of type t
% ;;		(forall (?X) F) --> (forall (?X) (=> ($instance ?X t) F))
% ;;		(exists (?X) F) --> (exists (?X) (and ($instance ?X t) F))
% ;;
% ;;
% ;; Finally, some variables are excluding from typing. Those variables are quantified
% ;; using forall* and exists* instead of forall and exists.
% ;;
% ;; $domain/3 axioms are not translated. That is, there is no axiom $domain/3 in
% ;; tptp/tstp files
% )
% ($comment 
% ;; ================================================
% ;;      SUMO (Suggested Upper Merged Ontology)
% ;; ================================================                                            
% ;;
% ;; The original versions of SUMO incorporated elements from many public sources
% ;; which are documented at http://www.ontologyportal.org/SUMOhistory/
% ;;
% ;; The SUMO is freely available, subject to the following IEEE license.  
% ;;
% ;; ----------------------
% ;; Copyright @ 2004 by the Institute of Electrical and Electronics Engineers, Inc.
% ;; Three Park Avenue
% ;; New York, NY 10016-5997, USA
% ;; All rights reserved.
% ;;
% ;; 1. COPYRIGHT                                                                                                                                                                                                                                                      
% ;; The Institute of Electrical and Electronics Engineers, Inc., ("IEEE") owns the         
% ;; copyright to this Document in all forms of media. Copyright in the text retrieved,     
% ;; displayed or output from this Document is owned by IEEE and is protected by the        
% ;; copyright laws of the United States and by international treaties. The IEEE reserves   
% ;; all rights not expressly granted herein.                                               
% ;;
% ;; 2. ROYALTIES                                                                                                                                                                                                                                                     
% ;; The IEEE is providing the Document at no charge. However, the Document is not to be    
% ;; considered "Public Domain," as the IEEE is, and at all times shall remain, the sole    
% ;; copyright holder in the Document. The IEEE intends to revise the Document from time to 
% ;; time; the latest version shall be available at http://standards.ieee.org/catalog/      
% ;;
% ;; 3. TERMS OF USE                                                                                                                                                                                                                                                        
% ;; The IEEE hereby grants Licensee a perpetual, non-exclusive, royalty-free, world-wide   
% ;; right and license to copy, publish and distribute the Document in any way, and to      
% ;; prepare derivative works that are based on or incorporate all or part of the Document  
% ;; provided that the IEEE is appropriately acknowledged as the source and copyright owner 
% ;; in each and every use.                                                                                                                                                         
% ;;
% ;; 4. LIMITED WARRANTIES & LIMITATIONS OF REMEDIES                                                                                                                                                                                                                        
% ;; LICENSOR Does not warrant or represent the accuracy or content of the document and     
% ;; Expressly Disclaims any Express or Implied Warranty, including any Implied Warranty of 
% ;; Merchantability or Fitness for a Specific Purpose or that the use of the document is   
% ;; free from patent infringement. The document is supplied ONLY "AS IS."                  
% ;; ----------------------
% ;;
% ;; The SUMO was initially developed at Teknowledge Corp.
% ;;
% ;; Any questions or comments about this ontology can be directed to the
% ;; Technical editor, Adam Pease, apease [at] articulatesoftware [dot] com  
% ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
% ;;
% ;; The knowledge representation language in which the SUMO is expressed is SUO-KIF, 
% ;; which stands for "Standard Upper Ontology - Knowledge Interchange Format".  SUO-KIF 
% ;; is a simplified form of the popular KIF knowledge representation language.  A 
% ;; specification of SUO-KIF can be found at:  http://www.ontologyportal.org
% ;;
% ;; The SUMO is a modular ontology.  That is, the ontology is divided into 
% ;; self-contained subontologies.  Each subontology is indicated by a section 
% ;; header, and the dependencies between the subontologies are specified with 
% ;; statements of the form ";; INCLUDES '<SUBONTOLOGY>'".  These statements are 
% ;; found at the beginning of each section.  
% ;;
% ;; We ask the people using or referencing SUMO cite our primary paper:
% ;;
% ;; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In 
% ;; Proceedings of the 2nd International Conference on Formal Ontology in 
% ;; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds, 
% ;; Ogunquit, Maine, October 17-19, 2001.  Also see http://www.ontologyportal.org
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
% ;;   STRUCTURAL ONTOLOGY   ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
% ;;
% ;; INCLUDES 'BASE ONTOLOGY'
% ;;
% ;; The Structural Ontology consists of definitions of certain syntactic 
% ;; abbreviations that can be both heuristically useful and computationally 
% ;; advantageous.
% )

fof( mergeA1, axiom,
	p__d__instance(c__instance,c__BinaryPredicate)
).


% 	($domain instance 1 Entity)

% 	($domain instance 2 SetOrClass)


% ($documentation instance EnglishLanguage "An object is an &%instance of a &%SetOrClass if 
% it is included in that &%SetOrClass.  An individual may be an instance of many 
% classes, some of which may be subclasses of others.  Thus, there is no 
% assumption in the meaning of &%instance about specificity or uniqueness.")


fof( mergeA4, axiom,
	p__subrelation(c__immediateInstance,c__instance)
).


fof( mergeA5, axiom,
	p__d__instance(c__immediateInstance,c__AsymmetricRelation)
).


fof( mergeA6, axiom,
	p__d__instance(c__immediateInstance,c__IntransitiveRelation)
).



% ($documentation immediateInstance EnglishLanguage "An object is an &%immediateInstance of 
% a &%SetOrClass if it is an instance of the &%SetOrClass and it is not an 
% instance of a proper subclass of &%SetOrClass.")


fof( mergeA7, axiom,
	(![CLASS,ENTITY]: 
		(
			(
				(
					(
						p__d__instance(CLASS,c__SetOrClass)
					)
				 &
					(
						p__immediateInstance(ENTITY,CLASS)
					)
				)
			)
			=>
			(
				(![SUBCLASS]: 
					(
						(
							~ (
								p__d__instance(SUBCLASS,c__SetOrClass)
							)
						 |
							~ (
								p__subclass(SUBCLASS,CLASS)
							)
						 |
							( SUBCLASS = CLASS )
						 |
							~ (
								p__instance(ENTITY,SUBCLASS)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA8, axiom,
	p__d__instance(c__inverse,c__BinaryPredicate)
).


fof( mergeA9, axiom,
	p__d__instance(c__inverse,c__IrreflexiveRelation)
).


fof( mergeA10, axiom,
	p__d__instance(c__inverse,c__IntransitiveRelation)
).


fof( mergeA11, axiom,
	p__d__instance(c__inverse,c__SymmetricRelation)
).


% 	($domain inverse 1 BinaryRelation)

% 	($domain inverse 2 BinaryRelation)


% ($documentation inverse EnglishLanguage "The inverse of a &%BinaryRelation is a relation 
% in which all the tuples of the original relation are reversed.  In 
% other words, one &%BinaryRelation is the inverse of another if they are 
% equivalent when their arguments are swapped.")


fof( mergeA14, axiom,
	(![REL1,REL2,INST1,INST2]: 
		(
			(
				(
					(
						p__d__instance(REL2,c__BinaryRelation)
					)
				 &
					(
						p__d__instance(REL1,c__BinaryRelation)
					)
				 &
					(
						p__inverse(REL1,REL2)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(REL1,INST1,INST2)
				)
				<=>
				(
					p__d__holds3(REL2,INST2,INST1)
				)
			)
		)
	)
).


fof( mergeA15, axiom,
	p__d__instance(c__subclass,c__BinaryPredicate)
).


fof( mergeA16, axiom,
	p__d__instance(c__subclass,c__PartialOrderingRelation)
).


% 	($domain subclass 1 SetOrClass)

% 	($domain subclass 2 SetOrClass)


% ($documentation subclass EnglishLanguage "(&%subclass ?CLASS1 ?CLASS2) means that ?CLASS1 is 
% a subclass of ?CLASS2, i.e. every instance of ?CLASS1 is also an instance of 
% ?CLASS2.  A class may have multiple superclasses and subclasses.")


% 	(forall (?X ?Y)
% 		(=> 
% 			(subclass ?X ?Y)
% 			(and 
% 				(instance ?X SetOrClass)
% 				(instance ?Y SetOrClass)
% 			)
% 		)
% 	)

fof( mergeA20, axiom,
	(![X,Z,Y]: 
		(
			(
				(
					(
						p__d__instance(Y,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X,c__SetOrClass)
					)
				 &
					(
						p__subclass(X,Y)
					)
				 &
					(
						p__instance(Z,X)
					)
				)
			)
			=>
			(
				p__instance(Z,Y)
			)
		)
	)
).


fof( mergeA21, axiom,
	p__subrelation(c__immediateSubclass,c__subclass)
).


fof( mergeA22, axiom,
	p__d__instance(c__immediateSubclass,c__AsymmetricRelation)
).


fof( mergeA23, axiom,
	p__d__instance(c__immediateSubclass,c__IntransitiveRelation)
).



% ($documentation immediateSubclass EnglishLanguage "A &%SetOrClass ?CLASS1 is an &%immediateSubclass 
% of another &%SetOrClass ?CLASS2 just in case ?CLASS1 is a subclass of ?CLASS2 and 
% there is no other subclass of ?CLASS2 such that ?CLASS1 is also a subclass of it.")


fof( mergeA24, axiom,
	(![CLASS2,CLASS1]: 
		(
			(
				(
					(
						p__d__instance(CLASS2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(CLASS1,c__SetOrClass)
					)
				 &
					(
						p__immediateSubclass(CLASS1,CLASS2)
					)
				)
			)
			=>
			(
				(![CLASS3]: 
					(
						(
							~ (
								p__d__instance(CLASS3,c__SetOrClass)
							)
						 |
							~ (
								p__subclass(CLASS3,CLASS2)
							)
						 |
							~ (
								p__subclass(CLASS1,CLASS3)
							)
						 |
							( CLASS2 = CLASS3 )
						 |
							( CLASS1 = CLASS3 )
						)
					)
				)
			)
		)
	)
).


fof( mergeA25, axiom,
	p__d__instance(c__subrelation,c__BinaryPredicate)
).


fof( mergeA26, axiom,
	p__d__instance(c__subrelation,c__PartialOrderingRelation)
).


% 	($domain subrelation 1 Relation)

% 	($domain subrelation 2 Relation)


% ($documentation subrelation EnglishLanguage "(&%subrelation ?REL1 ?REL2) means that 
% every tuple of ?REL1 is also a tuple of ?REL2.  In other words, if 
% the &%Relation ?REL1 holds for some arguments arg_1, arg_2, ... arg_n, 
% then the &%Relation ?REL2 holds for the same arguments.  A consequence 
% of this is that a &%Relation and its subrelations must have the same 
% &%valence.")


fof( mergeA29, axiom,
	(![PRED1,PRED2,NUMBER]: 
		(
			(
				(
					(
						p__d__instance(PRED2,c__Relation)
					)
				 &
					(
						p__d__instance(PRED1,c__Relation)
					)
				 &
					(
						p__d__instance(NUMBER,c__PositiveInteger)
					)
				 &
					(
						p__subrelation(PRED1,PRED2)
					)
				 &
					(
						p__valence(PRED1,NUMBER)
					)
				)
			)
			=>
			(
				p__valence(PRED2,NUMBER)
			)
		)
	)
).


% ($comment 
% ;; (=>
% ;;    (and
% ;;       (subrelation ?PRED1 ?PRED2)
% ;;       (domain ?PRED2 ?NUMBER ?CLASS1))
% ;;    (domain ?PRED1 ?NUMBER ?CLASS1))
% ;;
% ;; (=>
% ;;   (and
% ;;       (subrelation ?REL1 ?REL2)
% ;;       (?REL1 @ROW))
% ;;    (?REL2 @ROW))
% )

fof( mergeA30, axiom,
	(![REL1,REL2]: 
		(
			(
				(
					(
						p__subrelation(REL1,REL2)
					)
				 &
					(
						p__d__instance(REL2,c__BinaryRelation)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(REL1,c__BinaryRelation)
					)
				 &
					(
						(![INST1,INST2]: 
							(
								(
									p__d__holds3(REL1,INST1,INST2)
								)
								=>
								(
									p__d__holds3(REL2,INST1,INST2)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA31, axiom,
	(![REL1,REL2]: 
		(
			(
				(
					(
						p__subrelation(REL1,REL2)
					)
				 &
					(
						p__d__instance(REL2,c__TernaryRelation)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(REL1,c__TernaryRelation)
					)
				 &
					(
						(![INST1,INST2,INST3]: 
							(
								(
									p__d__holds4(REL1,INST1,INST2,INST3)
								)
								=>
								(
									p__d__holds4(REL2,INST1,INST2,INST3)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA32, axiom,
	(![REL1,REL2]: 
		(
			(
				(
					(
						p__subrelation(REL1,REL2)
					)
				 &
					(
						p__d__instance(REL2,c__QuaternaryRelation)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(REL1,c__QuaternaryRelation)
					)
				 &
					(
						(![INST1,INST2,INST3,INST4]: 
							(
								(
									p__d__holds5(REL1,INST1,INST2,INST3,INST4)
								)
								=>
								(
									p__d__holds5(REL2,INST1,INST2,INST3,INST4)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA33, axiom,
	(![REL1,REL2]: 
		(
			(
				(
					(
						p__subrelation(REL1,REL2)
					)
				 &
					(
						p__d__instance(REL2,c__QuintaryRelation)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(REL1,c__QuintaryRelation)
					)
				 &
					(
						(![INST1,INST2,INST3,INST4,INST5]: 
							(
								(
									p__d__holds6(REL1,INST1,INST2,INST3,INST4,INST5)
								)
								=>
								(
									p__d__holds6(REL2,INST1,INST2,INST3,INST4,INST5)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA34, axiom,
	(![CLASS,PRED1,PRED2]: 
		(
			(
				(
					(
						p__subrelation(PRED1,PRED2)
					)
				 &
					(
						p__d__instance(PRED2,CLASS)
					)
				 &
					(
						p__d__instance(CLASS,c__InheritableRelation)
					)
				)
			)
			=>
			(
				p__d__instance(PRED1,CLASS)
			)
		)
	)
).


fof( mergeA35, axiom,
	p__d__instance(c__domain,c__TernaryPredicate)
).


% 	($domain domain 1 Relation)

% 	($domain domain 2 PositiveInteger)

% 	($domain domain 3 SetOrClass)


% ($documentation domain EnglishLanguage "Provides a computationally and heuristically
% convenient mechanism for declaring the argument types of a given relation.  
% The formula (&%domain ?REL ?INT ?CLASS) means that the ?INT'th element of each 
% tuple in the relation ?REL must be an instance of ?CLASS.  Specifying argument
% types is very helpful in maintaining ontologies.  Representation systems can 
% use these specifications to classify terms and check integrity constraints.  
% If the restriction on the argument type of a &%Relation is not captured by a 
% &%SetOrClass already defined in the ontology, one can specify a &%SetOrClass 
% compositionally with the functions &%UnionFn, &%IntersectionFn, etc.")


% ($comment 
% ;; (=>
% ;;    (and
% ;;       (domain ?REL ?NUMBER ?CLASS1)
% ;;       (domain ?REL ?NUMBER ?CLASS2))
% ;;    (or
% ;;       (subclass ?CLASS1 ?CLASS2)
% ;;       (subclass ?CLASS2 ?CLASS1)))
% )

fof( mergeA39, axiom,
	p__d__instance(c__domainSubclass,c__TernaryPredicate)
).


% 	($domain domainSubclass 1 Relation)

% 	($domain domainSubclass 2 PositiveInteger)

% 	($domain domainSubclass 3 SetOrClass)


% ($documentation domainSubclass EnglishLanguage "&%Predicate used to specify argument 
% type restrictions of &%Predicates.  The formula (&%domainSubclass 
% ?REL ?INT ?CLASS) means that the ?INT'th element of each tuple in the 
% relation ?REL must be a subclass of ?CLASS.")


% ($comment 
% ;; (=>
% ;;    (and
% ;;       (subrelation ?REL1 ?REL2)
% ;;       (domainSubclass ?REL2 ?NUMBER ?CLASS1))
% ;;    (domainSubclass ?REL1 ?NUMBER ?CLASS1))
% ;;
% ;; (=>
% ;;    (and
% ;;       (domainSubclass ?REL ?NUMBER ?CLASS1)
% ;;       (domainSubclass ?REL ?NUMBER ?CLASS2))
% ;;    (or
% ;;       (subclass ?CLASS1 ?CLASS2)
% ;;       (subclass ?CLASS2 ?CLASS1)))
% )

fof( mergeA43, axiom,
	p__d__instance(c__equal,c__BinaryPredicate)
).


fof( mergeA44, axiom,
	p__d__instance(c__equal,c__EquivalenceRelation)
).


fof( mergeA45, axiom,
	p__d__instance(c__equal,c__RelationExtendedToQuantities)
).


% 	($domain equal 1 Entity)

% 	($domain equal 2 Entity)


% ($documentation equal EnglishLanguage "(equal ?ENTITY1 ?ENTITY2) is true just in case 
% ?ENTITY1 is identical with ?ENTITY2.")


% ($comment 
% ;; (=>
% ;;    (equal ?THING1 ?THING2)
% ;;    (forall (?ATTR)
% ;;       (<=>
% ;;          (property ?THING1 ?ATTR)
% ;;          (property ?THING2 ?ATTR))))
% ;;
% ;; (=>
% ;;    (equal ?ATTR1 ?ATTR2)
% ;;    (forall (?THING)
% ;;       (<=>
% ;;          (property ?THING ?ATTR1)
% ;;          (property ?THING ?ATTR2))))
% ;;
% ;; (=>
% ;;    (equal ?THING1 ?THING2)
% ;;    (forall (?CLASS)
% ;;       (<=>
% ;;          (instance ?THING1 ?CLASS)
% ;;          (instance ?THING2 ?CLASS))))
% ;;
% ;; (=>
% ;;    (equal ?CLASS1 ?CLASS2)
% ;;    (forall (?THING)
% ;;       (<=>
% ;;          (instance ?THING ?CLASS1)
% ;;          (instance ?THING ?CLASS2))))
% ;;
% ;;(=>
% ;;   (equal ?REL1 ?REL2)
% ;;   (forall (@ROW)
% ;;      (<=>
% ;;         (?REL1 @ROW)
% ;;         (?REL2 @ROW))))
% ;;
% ;; (=>
% ;;    (equal ?LIST1 ?LIST2)
% ;;       (=>
% ;;          (and
% ;;             (equal ?LIST1 (ListFn @ROW1))
% ;;             (equal ?LIST2 (ListFn @ROW2)))
% ;;          (forall (?NUMBER)
% ;;             (equal (ListOrderFn (ListFn @ROW1) ?NUMBER) (ListOrderFn (ListFn @ROW2) ?NUMBER)))))
% )

fof( mergeA48, axiom,
	p__d__instance(c__range,c__BinaryPredicate)
).


fof( mergeA49, axiom,
	p__d__instance(c__range,c__AsymmetricRelation)
).


% 	($domain range 1 Function)

% 	($domain range 2 SetOrClass)


% ($documentation range EnglishLanguage "Gives the range of a function.  In other words, 
% (&%range ?FUNCTION ?CLASS) means that all of the values assigned by 
% ?FUNCTION are &%instances of ?CLASS.") 


% ($comment 
% ;; (=>
% ;;    (and
% ;;       (range ?FUNCTION ?CLASS)
% ;;       (equal (AssignmentFn ?FUNCTION @ROW) ?VALUE))
% ;;    (instance ?VALUE ?CLASS))
% ;;
% ;; (=>
% ;;    (and
% ;;       (subrelation ?REL1 ?REL2)
% ;;       (range ?REL2 ?CLASS1))
% ;;    (range ?REL1 ?CLASS1))
% ;;
% ;; (=>
% ;;    (and
% ;;       (range ?REL ?CLASS1)
% ;;       (range ?REL ?CLASS2))
% ;;    (or
% ;;       (subclass ?CLASS1 ?CLASS2)
% ;;       (subclass ?CLASS2 ?CLASS1)))
% )

fof( mergeA52, axiom,
	p__d__instance(c__rangeSubclass,c__BinaryPredicate)
).


fof( mergeA53, axiom,
	p__d__instance(c__rangeSubclass,c__AsymmetricRelation)
).


% 	($domain rangeSubclass 1 Function)

% 	($domainSubclass rangeSubclass 2 SetOrClass)


% ($documentation rangeSubclass EnglishLanguage "(&%rangeSubclass ?FUNCTION ?CLASS) means that 
% all of the values assigned by ?FUNCTION are &%subclasses of ?CLASS.")


% ($comment 
% ;; (=>
% ;;    (and
% ;;       (rangeSubclass ?FUNCTION ?CLASS)
% ;;       (equal (AssignmentFn ?FUNCTION @ROW) ?VALUE))
% ;;    (subclass ?VALUE ?CLASS))
% ;;
% ;; (=>
% ;;    (and
% ;;       (subrelation ?REL1 ?REL2)
% ;;       (rangeSubclass ?REL2 ?CLASS1))
% ;;    (rangeSubclass ?REL1 ?CLASS1))
% ;;
% ;; (=>
% ;;    (and
% ;;       (rangeSubclass ?REL ?CLASS1)
% ;;       (rangeSubclass ?REL ?CLASS2))
% ;;    (or
% ;;       (subclass ?CLASS1 ?CLASS2)
% ;;       (subclass ?CLASS2 ?CLASS1)))
% )

fof( mergeA56, axiom,
	p__d__instance(c__valence,c__BinaryPredicate)
).


fof( mergeA57, axiom,
	p__d__instance(c__valence,c__AsymmetricRelation)
).


fof( mergeA58, axiom,
	p__d__instance(c__valence,c__SingleValuedRelation)
).


% 	($domain valence 1 Relation)

% 	($domain valence 2 PositiveInteger)


% ($documentation valence EnglishLanguage "Specifies the number of arguments that a 
% relation can take.  If a relation does not have a fixed number of 
% arguments, it does not have a valence and it is an instance of 
% &%VariableArityRelation.")


fof( mergeA61, axiom,
	p__d__instance(c__documentation,c__TernaryPredicate)
).


% 	($domain documentation 1 Entity)

% 	($domain documentation 2 HumanLanguage)

% 	($domain documentation 3 SymbolicString)


% ($documentation documentation EnglishLanguage "A relation between objects 
% in the domain of discourse and strings of natural language text stated in 
% a particular &%HumanLanguage.  The domain of &%documentation is not 
% constants (names), but the objects themselves.  This means that one does 
% not quote the names when associating them with their documentation.") 


fof( mergeA65, axiom,
	p__d__instance(c__format,c__TernaryPredicate)
).


% 	($domain format 1 Language)

% 	($domain format 2 Entity)

% 	($domain format 3 SymbolicString)


% ($documentation format EnglishLanguage "A relation that specifies how
% to present an expression in a natural language format.")


fof( mergeA69, axiom,
	p__d__instance(c__termFormat,c__TernaryPredicate)
).


% 	($domain termFormat 1 Language)

% 	($domain termFormat 2 Entity)

% 	($domain termFormat 3 SymbolicString)


% ($documentation termFormat EnglishLanguage "A relation that specifies how
% to present a term in a natural language format.")


fof( mergeA73, axiom,
	p__d__instance(c__disjoint,c__BinaryPredicate)
).


fof( mergeA74, axiom,
	p__d__instance(c__disjoint,c__SymmetricRelation)
).


% 	($domain disjoint 1 SetOrClass)

% 	($domain disjoint 2 SetOrClass)


% ($documentation disjoint EnglishLanguage "&%Classes are &%disjoint only if they share no 
% instances, i.e. just in case the result of applying &%IntersectionFn to
% them is empty.")


fof( mergeA77, axiom,
	(![CLASS1,CLASS2]: 
		(
			(
				(
					(
						p__d__instance(CLASS2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(CLASS1,c__SetOrClass)
					)
				)
			)
			=>
			(
				(
					p__disjoint(CLASS1,CLASS2)
				)
				<=>
				(
					(![INST]: 
						(
							(
								~ (
									p__instance(INST,CLASS1)
								)
							 |
								~ (
									p__instance(INST,CLASS2)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA78, axiom,
	p__d__instance(c__disjointRelation,c__BinaryPredicate)
).


fof( mergeA79, axiom,
	p__d__instance(c__disjointRelation,c__IrreflexiveRelation)
).


% 	($domain disjointRelation 1 Relation)

% 	($domain disjointRelation 2 Relation)

fof( mergeA82, axiom,
	p__relatedInternalConcept(c__disjointRelation,c__disjoint)
).



% ($documentation disjointRelation EnglishLanguage "This predicate relates two &%Relations.  
% (&%disjointRelation ?REL1 ?REL2) means that the two relations have no tuples in 
% common.")


% ($comment 
% ;; (=>
% ;;    (and
% ;;       (domain ?REL1 ?NUMBER ?CLASS1)
% ;;       (domain ?REL2 ?NUMBER ?CLASS2)
% ;;       (disjoint ?CLASS1 ?CLASS2))
% ;;    (disjointRelation ?REL1 ?REL2))
% ;;
% ;; (=>
% ;;    (and
% ;;       (domainSubclass ?REL1 ?NUMBER ?CLASS1)
% ;;       (domainSubclass ?REL2 ?NUMBER ?CLASS2)
% ;;       (disjoint ?CLASS1 ?CLASS2))
% ;;    (disjointRelation ?REL1 ?REL2))
% ;;
% ;; (=>
% ;;    (and
% ;;       (range ?REL1 ?CLASS1)
% ;;       (range ?REL2 ?CLASS2)
% ;;       (disjoint ?CLASS1 ?CLASS2))
% ;;    (disjointRelation ?REL1 ?REL2))
% ;;
% ;; (=>
% ;;    (and
% ;;       (rangeSubclass ?REL1 ?CLASS1)
% ;;       (rangeSubclass ?REL2 ?CLASS2)
% ;;       ($disjoint ?CLASS1 ?CLASS2))
% ;;    (disjointRelation ?REL1 ?REL2))
% ;;
% ;; (=>
% ;;    (and
% ;;       (instance ?REL1 Predicate)
% ;;       (instance ?REL2 Predicate)
% ;;       (disjointRelation ?REL1 ?REL2)
% ;;       (not (equal ?REL1 ?REL2))
% ;;       (?REL1 @ROW2))
% ;;    (not (?REL2 @ROW2)))
% )

fof( mergeA83, axiom,
	(![INST1,INST2,REL1,REL2]: 
		(
			(
				(
					(
						p__d__instance(REL1,c__BinaryRelation)
					)
				 &
					(
						p__d__instance(REL2,c__BinaryRelation)
					)
				 &
					(
						p__disjointRelation(REL1,REL2)
					)
				)
			)
			=>
			(
				(
					~ (
						p__d__holds3(REL1,INST1,INST2)
					)
				 |
					~ (
						p__d__holds3(REL2,INST1,INST2)
					)
				)
			)
		)
	)
).


fof( mergeA84, axiom,
	(![INST1,INST2,INST3,REL1,REL2]: 
		(
			(
				(
					(
						p__d__instance(REL1,c__TernaryRelation)
					)
				 &
					(
						p__d__instance(REL2,c__TernaryRelation)
					)
				 &
					(
						p__disjointRelation(REL1,REL2)
					)
				)
			)
			=>
			(
				(
					~ (
						p__d__holds4(REL1,INST1,INST2,INST3)
					)
				 |
					~ (
						p__d__holds4(REL2,INST1,INST2,INST3)
					)
				)
			)
		)
	)
).


fof( mergeA85, axiom,
	(![INST1,INST2,INST3,INST4,REL1,REL2]: 
		(
			(
				(
					(
						p__d__instance(REL1,c__QuaternaryRelation)
					)
				 &
					(
						p__d__instance(REL2,c__QuaternaryRelation)
					)
				 &
					(
						p__disjointRelation(REL1,REL2)
					)
				)
			)
			=>
			(
				(
					~ (
						p__d__holds5(REL1,INST1,INST2,INST3,INST4)
					)
				 |
					~ (
						p__d__holds5(REL2,INST1,INST2,INST3,INST4)
					)
				)
			)
		)
	)
).


fof( mergeA86, axiom,
	(![INST1,INST2,INST3,INST4,INST5,REL1,REL2]: 
		(
			(
				(
					(
						p__d__instance(REL1,c__QuintaryRelation)
					)
				 &
					(
						p__d__instance(REL2,c__QuintaryRelation)
					)
				 &
					(
						p__disjointRelation(REL1,REL2)
					)
				)
			)
			=>
			(
				(
					~ (
						p__d__holds6(REL1,INST1,INST2,INST3,INST4,INST5)
					)
				 |
					~ (
						p__d__holds6(REL2,INST1,INST2,INST3,INST4,INST5)
					)
				)
			)
		)
	)
).


fof( mergeA87, axiom,
	p__d__instance(c__contraryAttribute,c__Predicate)
).


fof( mergeA88, axiom,
	p__d__instance(c__contraryAttribute,c__VariableArityRelation)
).


% 	($domain contraryAttribute 1 @Attribute)


% ($documentation contraryAttribute EnglishLanguage "A &%contraryAttribute is a set of &%Attributes 
% such that something can not simultaneously have more than one of these &%Attributes.  
% For example, (&%contraryAttribute &%Pliable &%Rigid) means that nothing can be both 
% &%Pliable and &%Rigid.")


% ($comment 
% ;;  JA: removed (AdimenSUMO 2.4)
% ;;
% ;;(forall (@ROW ?OBJ)
% ;;	(<=>
% ;;		(contraryAttribute @ROW)
% ;;		(@and(@ROW,?ATTR1,@TAIL)
% ;;			(@and(@TAIL,?ATTR2,@_)
% ;;				(and
% ;;					(=>
% ;;						(attribute ?OBJ ?ATTR1)
% ;;						(not
% ;;							(attribute ?OBJ ?ATTR2)))
% ;;					(=>
% ;;						(attribute ?OBJ ?ATTR2)
% ;;						(not
% ;;							(attribute ?OBJ ?ATTR1))))))))
% )

% ($comment 
% ;;  JA: added (AdimenSUMO 2.4)
% )

fof( mergeA90, axiom,
	(
		(
			(![ROW1,ROW2]: 
				(
					(
						(
							(
								p__d__instance(ROW2,c__Attribute)
							)
						 &
							(
								p__d__instance(ROW1,c__Attribute)
							)
						)
					)
					=>
					(
						(
							p__contraryAttribute2(ROW1,ROW2)
						)
						<=>
						(
							(
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW1)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW2)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW2)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW1)
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![ROW1,ROW2,ROW3,ROW4]: 
				(
					(
						(
							(
								p__d__instance(ROW4,c__Attribute)
							)
						 &
							(
								p__d__instance(ROW3,c__Attribute)
							)
						 &
							(
								p__d__instance(ROW2,c__Attribute)
							)
						 &
							(
								p__d__instance(ROW1,c__Attribute)
							)
						)
					)
					=>
					(
						(
							p__contraryAttribute4(ROW1,ROW2,ROW3,ROW4)
						)
						<=>
						(
							(
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW1)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW2)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW2)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW1)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW1)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW3)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW3)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW1)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW1)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW4)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW4)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW1)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW2)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW3)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW3)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW2)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW2)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW4)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW4)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW2)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW3)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW4)
												)
											)
										)
									)
								)
							 &
								(
									(![OBJ]: 
										(
											(
												(
													(
														p__d__instance(OBJ,c__Object)
													)
												 &
													(
														p__attribute(OBJ,ROW4)
													)
												)
											)
											=>
											(
												~ (
													p__attribute(OBJ,ROW3)
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (@ROW ?ELEMENT)
% 		(=> 
% 			(contraryAttribute @ROW)
% 			(=> 
% 				(inList ?ELEMENT (ListFn @ROW))
% 				(instance ?ELEMENT Attribute)
% 			)
% 		)
% 	)

% 	(forall (@ROW1 @ROW2)
% 		(=> 
% 			(and 
% 				(contraryAttribute @ROW1)
% 				(identicalListItems (ListFn @ROW1) (ListFn @ROW2))
% 			)
% 			(contraryAttribute @ROW2)
% 		)
% 	)

% 	(forall (@ROW ?NUMBER1 ?NUMBER2 ?OBJ)
% 		(=> 
% 			(contraryAttribute @ROW)
% 			(forall (?ATTR1 ?ATTR2)
% 				(=> 
% 					(and 
% 						(equal ?ATTR1 (ListOrderFn (ListFn @ROW) ?NUMBER1))
% 						(equal ?ATTR2 (ListOrderFn (ListFn @ROW) ?NUMBER2))
% 						(not 
% 							(equal ?NUMBER1 ?NUMBER2)
% 						)
% 					)
% 					(=> 
% 						(property ?OBJ ?ATTR1)
% 						(not 
% 							(property ?OBJ ?ATTR2)
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA94, axiom,
	p__d__instance(c__exhaustiveAttribute,c__Predicate)
).


fof( mergeA95, axiom,
	p__d__instance(c__exhaustiveAttribute,c__VariableArityRelation)
).


% 	($domain exhaustiveAttribute 1 Attribute)

% 	($domain exhaustiveAttribute 2 @Attribute)


% ($documentation exhaustiveAttribute EnglishLanguage "This predicate relates a &%Class to a 
% set of &%Attributes, and it means that the elements of this set exhaust the 
% instances of the &%Class.  For example, (&%exhaustiveAttribute &%PhysicalState 
% &%Solid &%Fluid &%Liquid &%Gas &%Plasma) means that there are only five instances of 
% the class &%PhysicalState, viz. &%Solid, &%Fluid, &%Liquid, &%Gas and &%Plasma.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;;
% ;;(forall (?ATTR @ROW ?OBJ)
% ;;	(<=>
% ;;		(exhaustiveAttribute ?ATTR @ROW)
% ;;		(=>
% ;;			(attribute ?OBJ ?ATTR)
% ;;			(@or(@ROW,?SUBATTR,@_)
% ;;				(attribute ?OBJ ?SUBATTR)))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA98, axiom,
	(
		(
			(![ATTR,ROW1,ROW2]: 
				(
					(
						(
							(
								p__d__instance(ROW2,c__Attribute)
							)
						 &
							(
								p__d__instance(ROW1,c__Attribute)
							)
						 &
							(
								p__d__instance(ATTR,c__Attribute)
							)
						)
					)
					=>
					(
						(
							p__exhaustiveAttribute3(ATTR,ROW1,ROW2)
						)
						<=>
						(
							(![OBJ]: 
								(
									(
										(
											(
												p__d__instance(OBJ,c__Object)
											)
										 &
											(
												p__attribute(OBJ,ATTR)
											)
										)
									)
									=>
									(
										(
											p__attribute(OBJ,ROW1)
										 |
											p__attribute(OBJ,ROW2)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	 &
		(
			(![ATTR,ROW1,ROW2,ROW3,ROW4,ROW5]: 
				(
					(
						(
							(
								p__d__instance(ROW5,c__Attribute)
							)
						 &
							(
								p__d__instance(ROW4,c__Attribute)
							)
						 &
							(
								p__d__instance(ROW3,c__Attribute)
							)
						 &
							(
								p__d__instance(ROW2,c__Attribute)
							)
						 &
							(
								p__d__instance(ROW1,c__Attribute)
							)
						 &
							(
								p__d__instance(ATTR,c__Attribute)
							)
						)
					)
					=>
					(
						(
							p__exhaustiveAttribute6(ATTR,ROW1,ROW2,ROW3,ROW4,ROW5)
						)
						<=>
						(
							(![OBJ]: 
								(
									(
										(
											(
												p__d__instance(OBJ,c__Object)
											)
										 &
											(
												p__attribute(OBJ,ATTR)
											)
										)
									)
									=>
									(
										(
											p__attribute(OBJ,ROW1)
										 |
											p__attribute(OBJ,ROW2)
										 |
											p__attribute(OBJ,ROW3)
										 |
											p__attribute(OBJ,ROW4)
										 |
											p__attribute(OBJ,ROW5)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?CLASS @ROW ?ATTR)
% 		(=> 
% 			(exhaustiveAttribute ?CLASS @ROW)
% 			(=> 
% 				(inList ?ATTR (ListFn @ROW))
% 				(instance ?ATTR Attribute)
% 			)
% 		)
% 	)

% 	(forall (?CLASS @ROW)
% 		(=> 
% 			(exhaustiveAttribute ?CLASS @ROW)
% 			(forall (?ATTR1)
% 				(=> 
% 					(instance ?ATTR1 ?CLASS)
% 					(exists (?ATTR2)
% 						(and 
% 							(inList ?ATTR2 (ListFn @ROW))
% 							(equal ?ATTR1 ?ATTR2)
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?ATTRCLASS @ROW)
% 		(=> 
% 			(exhaustiveAttribute ?ATTRCLASS @ROW)
% 			(not 
% 				(exists (?EL)
% 					(and 
% 						(instance ?EL ?ATTRCLASS)
% 						(not 
% 							(exists (?ATTR ?NUMBER)
% 								(and 
% 									(equal ?EL ?ATTR)
% 									(equal ?ATTR (ListOrderFn (ListFn @ROW) ?NUMBER))
% 								)
% 							)
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA102, axiom,
	p__d__instance(c__exhaustiveDecomposition,c__Predicate)
).


fof( mergeA103, axiom,
	p__d__instance(c__exhaustiveDecomposition,c__VariableArityRelation)
).


% 	($domain exhaustiveDecomposition 1 Class)

fof( mergeA105, axiom,
	p__relatedInternalConcept(c__exhaustiveDecomposition,c__partition)
).



% ($documentation exhaustiveDecomposition EnglishLanguage "An &%exhaustiveDecomposition of a 
% &%Class C is a set of subclasses of C such that every instance of C is an 
% instance of one of the subclasses in the set.  Note:  this does not necessarily 
% mean that the elements of the set are disjoint (see &%partition - a &%partition 
% is a disjoint exhaustive decomposition).")


% 	(forall (@ROW ?ELEMENT)
% 		(=> 
% 			(exhaustiveDecomposition @ROW)
% 			(=> 
% 				(inList ?ELEMENT (ListFn @ROW))
% 				(instance ?ELEMENT Class)
% 			)
% 		)
% 	)

fof( mergeA107, axiom,
	p__d__instance(c__disjointDecomposition,c__Predicate)
).


fof( mergeA108, axiom,
	p__d__instance(c__disjointDecomposition,c__VariableArityRelation)
).


% 	($domain disjointDecomposition 1 Class)

fof( mergeA110, axiom,
	p__relatedInternalConcept(c__disjointDecomposition,c__exhaustiveDecomposition)
).


fof( mergeA111, axiom,
	p__relatedInternalConcept(c__disjointDecomposition,c__disjoint)
).



% ($documentation disjointDecomposition EnglishLanguage "A &%disjointDecomposition of a &%Class 
% C is a set of subclasses of C that are mutually &%disjoint.")


% 	(forall (@ROW ?ELEMENT)
% 		(=> 
% 			(disjointDecomposition @ROW)
% 			(=> 
% 				(inList ?ELEMENT (ListFn @ROW))
% 				(instance ?ELEMENT Class)
% 			)
% 		)
% 	)

fof( mergeA113, axiom,
	p__d__instance(c__partition,c__Predicate)
).


fof( mergeA114, axiom,
	p__d__instance(c__partition,c__VariableArityRelation)
).


% 	($domain partition 1 Class)


% ($documentation partition EnglishLanguage "A &%partition of a class C
% is a set of mutually &%disjoint classes (a subclass partition) which
% covers C.  Every instance of C is an instance of exactly one of the
% subclasses in the partition.")

% 	(<=> 
% 		(partition @ROW)
% 		(and 
% 			(exhaustiveDecomposition @ROW)
% 			(disjointDecomposition @ROW)
% 		)
% 	)

fof( mergeA117, axiom,
	p__d__instance(c__relatedInternalConcept,c__BinaryPredicate)
).


fof( mergeA118, axiom,
	p__d__instance(c__relatedInternalConcept,c__EquivalenceRelation)
).


% 	($domain relatedInternalConcept 1 Entity)

% 	($domain relatedInternalConcept 2 Entity)


% ($documentation relatedInternalConcept EnglishLanguage "Means that the two arguments are 
% related concepts within the SUMO, i.e. there is a significant similarity 
% of meaning between them.  To indicate a meaning relation between a SUMO 
% concept and a concept from another source, use the Predicate 
% &%relatedExternalConcept.")


fof( mergeA121, axiom,
	p__d__instance(c__relatedExternalConcept,c__TernaryPredicate)
).


% 	($domain relatedExternalConcept 1 SymbolicString)

% 	($domain relatedExternalConcept 2 Entity)

% 	($domain relatedExternalConcept 3 Language)

fof( mergeA125, axiom,
	p__relatedInternalConcept(c__relatedExternalConcept,c__relatedInternalConcept)
).



% ($documentation relatedExternalConcept EnglishLanguage "Used to signify a three-place 
% relation between a concept in an external knowledge source, a concept 
% in the SUMO, and the name of the other knowledge source.")


fof( mergeA126, axiom,
	p__subrelation(c__synonymousExternalConcept,c__relatedExternalConcept)
).


fof( mergeA127, axiom,
	p__disjointRelation(c__synonymousExternalConcept,c__subsumedExternalConcept)
).


fof( mergeA128, axiom,
	p__disjointRelation(c__synonymousExternalConcept,c__subsumingExternalConcept)
).


fof( mergeA129, axiom,
	p__disjointRelation(c__subsumedExternalConcept,c__subsumingExternalConcept)
).



% ($documentation synonymousExternalConcept EnglishLanguage "(&%synonymousExternalConcept 
% ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING has the 
% same meaning as ?STRING in ?LANGUAGE.")


fof( mergeA130, axiom,
	p__subrelation(c__subsumingExternalConcept,c__relatedExternalConcept)
).



% ($documentation subsumingExternalConcept EnglishLanguage "(&%subsumingExternalConcept 
% ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING subsumes 
% the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is broader 
% in meaning than ?STRING.")


fof( mergeA131, axiom,
	p__subrelation(c__subsumedExternalConcept,c__relatedExternalConcept)
).



% ($documentation subsumedExternalConcept EnglishLanguage "(&%subsumedExternalConcept 
% ?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING is subsumed 
% by the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is narrower 
% in meaning than ?STRING.")


fof( mergeA132, axiom,
	p__d__instance(c__externalImage,c__BinaryPredicate)
).



% ($documentation externalImage EnglishLanguage "A link between an Entity and a
% URL that represents or exemplifies the term in some way.")


% 	($domain externalImage 1 Entity)

% 	($domain externalImage 2 SymbolicString)

fof( mergeA135, axiom,
	p__d__instance(c__subAttribute,c__BinaryPredicate)
).


fof( mergeA136, axiom,
	p__d__instance(c__subAttribute,c__PartialOrderingRelation)
).


% 	($domain subAttribute 1 Attribute)

% 	($domain subAttribute 2 Attribute)

fof( mergeA139, axiom,
	p__disjointRelation(c__subAttribute,c__successorAttribute)
).



% ($documentation subAttribute EnglishLanguage "Means that the second argument can be 
% ascribed to everything which has the first argument ascribed to it.")


fof( mergeA140, axiom,
	(![ATTR1,ATTR2,OBJ]: 
		(
			(
				(
					(
						p__d__instance(ATTR2,c__Attribute)
					)
				 &
					(
						p__d__instance(ATTR1,c__Attribute)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__subAttribute(ATTR1,ATTR2)
					)
				 &
					(
						p__attribute(OBJ,ATTR1)
					)
				)
			)
			=>
			(
				p__attribute(OBJ,ATTR2)
			)
		)
	)
).


fof( mergeA141, axiom,
	(![CLASS,ATTR1,ATTR2]: 
		(
			(
				(
					(
						p__subAttribute(ATTR1,ATTR2)
					)
				 &
					(
						p__d__instance(ATTR2,CLASS)
					)
				)
			)
			=>
			(
				p__d__instance(ATTR1,CLASS)
			)
		)
	)
).


fof( mergeA142, axiom,
	p__d__instance(c__successorAttribute,c__BinaryPredicate)
).


fof( mergeA143, axiom,
	p__d__instance(c__successorAttribute,c__AsymmetricRelation)
).


% 	($domain successorAttribute 1 Attribute)

% 	($domain successorAttribute 2 Attribute)


% ($documentation successorAttribute EnglishLanguage "(&%successorAttribute ?ATTR1 ?ATTR2) 
% means that ?ATTR2 is the &%Attribute that comes immediately after ?ATTR1 
% on the scale that they share.")


% 	(forall (?ATTR2 ?TIME1 ?ENTITY ?ATTR1)
% 		(=> 
% 			(and 
% 				(successorAttribute ?ATTR1 ?ATTR2)
% 				(holdsDuring ?TIME1 (property ?ENTITY ?ATTR2))
% 			)
% 			(exists (?TIME2)
% 				(and 
% 					(temporalPart ?TIME2 (PastFn ?TIME1))
% 					(holdsDuring ?TIME2 (property ?ENTITY ?ATTR1))
% 				)
% 			)
% 		)
% 	)

fof( mergeA147, axiom,
	p__d__instance(c__successorAttributeClosure,c__BinaryPredicate)
).


fof( mergeA148, axiom,
	p__d__instance(c__successorAttributeClosure,c__TransitiveRelation)
).


fof( mergeA149, axiom,
	p__d__instance(c__successorAttributeClosure,c__IrreflexiveRelation)
).


% 	($domain successorAttributeClosure 1 Attribute)

% 	($domain successorAttributeClosure 2 Attribute)

fof( mergeA152, axiom,
	p__relatedInternalConcept(c__successorAttributeClosure,c__successorAttribute)
).



% ($documentation successorAttributeClosure EnglishLanguage "The transitive closure of 
% &%successorAttribute.  (&%successorAttributeClosure ?ATTR1 ?ATTR2) means 
% that there is a chain of &%successorAttribute assertions connecting 
% ?ATTR1 and ?ATTR2.") 


fof( mergeA153, axiom,
	(![ATTR1,ATTR2]: 
		(
			(
				(
					(
						p__d__instance(ATTR2,c__Attribute)
					)
				 &
					(
						p__d__instance(ATTR1,c__Attribute)
					)
				 &
					(
						p__successorAttribute(ATTR1,ATTR2)
					)
				)
			)
			=>
			(
				p__successorAttributeClosure(ATTR1,ATTR2)
			)
		)
	)
).


fof( mergeA154, axiom,
	p__d__instance(c__greaterThanByQuality,c__TernaryPredicate)
).



% ($documentation greaterThanByQuality EnglishLanguage "(greaterThanByQuality 
% ?ENTITY1 ?ENTITY2 ?ATT) means that ?ENTITY1 has more of the given
% quality ?ATT than ?ENTITY2)")


% 	($domain greaterThanByQuality 1 Entity)

% 	($domain greaterThanByQuality 2 Entity)

% 	($domain greaterThanByQuality 3 Attribute)

fof( mergeA158, axiom,
	(![E2,E1,E3,ATT]: 
		(
			(
				(
					(
						p__d__instance(ATT,c__Attribute)
					)
				 &
					(
						p__greaterThanByQuality(E1,E2,ATT)
					)
				 &
					(
						p__greaterThanByQuality(E2,E3,ATT)
					)
				)
			)
			=>
			(
				p__greaterThanByQuality(E1,E3,ATT)
			)
		)
	)
).


fof( mergeA159, axiom,
	(![E2,E1,ATT]: 
		(
			(
				(
					(
						p__d__instance(ATT,c__Attribute)
					)
				 &
					(
						p__greaterThanByQuality(E1,E2,ATT)
					)
				)
			)
			=>
			(
				~ (
					p__greaterThanByQuality(E2,E1,ATT)
				)
			)
		)
	)
).


fof( mergeA160, axiom,
	(![ATT,E2,E1]: 
		(
			(
				(
					(
						p__d__instance(ATT,c__Attribute)
					)
				 &
					(
						p__greaterThanByQuality(E1,E2,ATT)
					)
				)
			)
			=>
			(
				~ (
					( E2 = E1 )
				)
			)
		)
	)
).


fof( mergeA161, axiom,
	p__d__instance(c__entails,c__BinaryPredicate)
).


% 	($domain entails 1 Formula)

% 	($domain entails 2 Formula)


% ($documentation entails EnglishLanguage "The operator of logical entailment.  (&%entails 
% ?FORMULA1 ?FORMULA2) means that ?FORMULA2 can be derived from ?FORMULA1 
% by means of the proof theory of SUO-KIF.")


% ($comment 
% ;; The following axiom is commented out, because it is rejected by the 
% ;; inference engine parser.
% ;;
% ;;(=>
% ;;   (entails ?FORMULA1 ?FORMULA2)
% ;;   (=> ?FORMULA1 ?FORMULA2))
% )

fof( mergeA164, axiom,
	p__d__instance(c__AssignmentFn,c__Function)
).


fof( mergeA165, axiom,
	p__d__instance(c__AssignmentFn,c__VariableArityRelation)
).


% 	($domain AssignmentFn 1 Function)

% 	($range AssignmentFn Entity)


% ($documentation AssignmentFn EnglishLanguage "If F is a &%Function with a value for the 
% objects denoted by N1,..., NK, then (&%AssignmentFn F N1 ... NK) is the 
% value of applying F to the objects denoted by N1,..., NK.  Otherwise, 
% the value is undefined.")


fof( mergeA168, axiom,
	p__d__instance(c__PowerSetFn,c__UnaryFunction)
).


fof( mergeA169, axiom,
	p__d__instance(c__PowerSetFn,c__TotalValuedRelation)
).


% 	($domain PowerSetFn 1 SetOrClass)

% 	($rangeSubclass PowerSetFn SetOrClass)


% ($documentation PowerSetFn EnglishLanguage "(&%PowerSetFn ?CLASS) maps the &%SetOrClass 
% ?CLASS to the &%SetOrClass of all &%subclasses of ?CLASS.")


% ($comment 
% ;; END FILE
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;;;;;
% ;;   BASE ONTOLOGY   ;;
% ;;;;;;;;;;;;;;;;;;;;;;;
% ;;
% ;; INCLUDES 'STRUCTURAL ONTOLOGY'
% ;;
% ;; The following hierarchy incorporates content from Sowa, Russell & Norvig, 
% ;; and the top-level ontology from ITBM-CNR. 
% )


fof( mergeA172, axiom,
	p__d__topClass(c__Entity)
).


fof( mergeA173, axiom,
	p__d__partition3(c__Entity,c__Physical,c__Abstract)
).



% ($documentation Entity EnglishLanguage "The universal class of individuals.  This is the root 
% node of the ontology.")


fof( mergeA174, axiom,
	(![THING]: 
		(
			p__d__instance(THING,c__Entity)
		)
	)
).


fof( mergeA175, axiom,
	(?[THING]: 
		(
			p__d__instance(THING,c__Entity)
		)
	)
).


% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA176, axiom,
	(![CLASS]: 
		(
			(
				p__d__subclass(CLASS,c__Entity)
			)
			=>
			(
				(?[THING]: 
					(
						p__d__instance(THING,CLASS)
					)
				)
			)
		)
	)
).


fof( mergeA177, axiom,
	(![CLASS]: 
		(
			(
				p__d__instance(CLASS,c__Class)
			)
			<=>
			(
				p__d__subclass(CLASS,c__Entity)
			)
		)
	)
).


fof( mergeA178, axiom,
	p__d__subclass(c__Physical,c__Entity)
).


fof( mergeA179, axiom,
	p__d__partition3(c__Physical,c__Object,c__Process)
).



% ($documentation Physical EnglishLanguage "An entity that has a location in space-time.  
% Note that locations are themselves understood to have a location in 
% space-time.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of located and time is already Physical (the reverse implication is a tautology)
% ;;
% ;;(<=> 
% ;;  ($instance ?PHYS Physical)
% ;;  (exists (?LOC ?TIME)
% ;;    (and 
% ;;      (located ?PHYS ?LOC)
% ;;      (time ?PHYS ?TIME))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA180, axiom,
	(![PHYS]: 
		(
			(
				p__d__instance(PHYS,c__Physical)
			)
			=>
			(
				(?[LOC,TIME]: 
					(
						(
							(
								p__d__instance(LOC,c__Object)
							)
						 &
							(
								p__d__instance(TIME,c__TimePosition)
							)
						 &
							(
								p__located(PHYS,LOC)
							)
						 &
							(
								p__time(PHYS,TIME)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA181, axiom,
	p__d__subclass(c__Object,c__Physical)
).



% ($documentation Object EnglishLanguage "Corresponds roughly to the class of ordinary 
% objects.  Examples include normal physical objects, geographical regions, 
% and locations of &%Processes, the complement of &%Objects in the &%Physical 
% class.  In a 4D ontology, an &%Object is something whose spatiotemporal 
% extent is thought of as dividing into spatial parts roughly parallel to the 
% time-axis.")


fof( mergeA182, axiom,
	p__d__subclass(c__SelfConnectedObject,c__Object)
).



% ($documentation SelfConnectedObject EnglishLanguage "A &%SelfConnectedObject is any 
% &%Object that does not consist of two or more disconnected parts.")


fof( mergeA183, axiom,
	p__d__subclass(c__OrganicThing,c__SelfConnectedObject)
).



% ($documentation OrganicThing EnglishLanguage "A &%SelfConnectedObject that is
% produced by a non-intentional process from an &%Organism.  Note that this
% refers only to the primary cause.  That is, a &%PlantAgriculturalProduct
% is firstly produced by a &%Plant, and only secondarily by a &%Human that is
% tending the plant.")


fof( mergeA184, axiom,
	p__d__instance(c__FrontFn,c__SpatialRelation)
).


fof( mergeA185, axiom,
	p__d__instance(c__FrontFn,c__PartialValuedRelation)
).


fof( mergeA186, axiom,
	p__d__instance(c__FrontFn,c__UnaryFunction)
).


fof( mergeA187, axiom,
	p__d__instance(c__FrontFn,c__AsymmetricRelation)
).


fof( mergeA188, axiom,
	p__d__instance(c__FrontFn,c__IrreflexiveRelation)
).


% 	($domain FrontFn 1 SelfConnectedObject)

% 	($range FrontFn SelfConnectedObject)


% ($documentation FrontFn EnglishLanguage "A &%Function that maps an &%Object to the side 
% that generally receives the most attention or that typically faces the 
% direction in which the &%Object moves.  Note that this is a partial 
% function, since some &%Objects do not have sides, e.g. apples and 
% spheres.  Note too that the &%range of this &%Function is indefinite in 
% much the way that &%ImmediateFutureFn and &%ImmediatePastFn are indefinite.  
% Although this indefiniteness is undesirable from a theoretical standpoint, 
% it does not have significant practical implications, since there is 
% widespread intersubjective agreement about the most common cases.")


fof( mergeA191, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__SelfConnectedObject)
			)
			=>
			(
				p__side(f__FrontFn1(OBJ),OBJ)
			)
		)
	)
).


fof( mergeA192, axiom,
	p__d__instance(c__BackFn,c__SpatialRelation)
).


fof( mergeA193, axiom,
	p__d__instance(c__BackFn,c__PartialValuedRelation)
).


fof( mergeA194, axiom,
	p__d__instance(c__BackFn,c__UnaryFunction)
).


fof( mergeA195, axiom,
	p__d__instance(c__BackFn,c__AsymmetricRelation)
).


fof( mergeA196, axiom,
	p__d__instance(c__BackFn,c__IrreflexiveRelation)
).


% 	($domain BackFn 1 SelfConnectedObject)

% 	($range BackFn SelfConnectedObject)


% ($documentation BackFn EnglishLanguage "A &%Function that maps an &%Object to the side 
% that is opposite the &%FrontFn of the &%Object.  Note that this is a 
% partial function, since some &%Objects do not have sides, e.g. apples 
% and spheres.  Note too that the &%range of this &%Function is indefinite in 
% much the way that &%ImmediateFutureFn and &%ImmediatePastFn are indefinite.  
% Although this indefiniteness is undesirable from a theoretical standpoint, 
% it does not have significant practical implications, since there is 
% widespread intersubjective agreement about the most common cases.")


fof( mergeA199, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__SelfConnectedObject)
			)
			=>
			(
				p__side(f__BackFn1(OBJ),OBJ)
			)
		)
	)
).


fof( mergeA200, axiom,
	p__d__instance(c__part,c__SpatialRelation)
).


fof( mergeA201, axiom,
	p__d__instance(c__part,c__PartialOrderingRelation)
).


% 	($domain part 1 Object)

% 	($domain part 2 Object)


% ($documentation part EnglishLanguage "The basic mereological relation.  All other 
% mereological relations are defined in terms of this one.  
% (&%part ?PART ?WHOLE) simply means that the &%Object ?PART is part
% of the &%Object ?WHOLE.  Note that, since &%part is a 
% &%ReflexiveRelation, every &%Object is a part of itself.")

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% ;; Taken from "Mereotopology: A Theory of Parts and Boundaries" Barry Smith
% )

fof( mergeA204, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__part(OBJ1,OBJ2)
				)
				<=>
				(
					(![PART]: 
						(
							(
								(
									(
										p__d__instance(PART,c__Object)
									)
								 &
									(
										p__overlapsSpatially(PART,OBJ1)
									)
								)
							)
							=>
							(
								p__overlapsSpatially(PART,OBJ2)
							)
						)
					)
				)
			)
		)
	)
).



fof( mergeA205, axiom,
	p__d__instance(c__properPart,c__AsymmetricRelation)
).


fof( mergeA206, axiom,
	p__d__instance(c__properPart,c__TransitiveRelation)
).


fof( mergeA207, axiom,
	p__subrelation(c__properPart,c__part)
).



% ($documentation properPart EnglishLanguage "(&%properPart ?OBJ1 ?OBJ2) means that 
% ?OBJ1 is a part of ?OBJ2 other than ?OBJ2 itself. This is a 
% &%TransitiveRelation and &%AsymmetricRelation (hence an 
% &%IrreflexiveRelation).")


fof( mergeA208, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__properPart(OBJ1,OBJ2)
				)
				<=>
				(
					(
						(
							p__part(OBJ1,OBJ2)
						)
					 &
						(
							~ (
								p__part(OBJ2,OBJ1)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA209, axiom,
	p__subrelation(c__piece,c__part)
).


% 	($domain piece 1 Substance)

% 	($domain piece 2 Substance)


% ($documentation piece EnglishLanguage "A specialized common sense notion of part for 
% arbitrary parts of &%Substances.  Quasi-synonyms are: chunk, hunk, bit, 
% etc.  Compare &%component, another subrelation of &%part.")


fof( mergeA212, axiom,
	(![SUBSTANCE1,SUBSTANCE2,CLASS]: 
		(
			(
				(
					(
						p__d__instance(SUBSTANCE2,c__Substance)
					)
				 &
					(
						p__d__instance(SUBSTANCE1,c__Substance)
					)
				 &
					(
						p__piece(SUBSTANCE1,SUBSTANCE2)
					)
				 &
					(
						p__d__instance(SUBSTANCE1,CLASS)
					)
				)
			)
			=>
			(
				p__d__instance(SUBSTANCE2,CLASS)
			)
		)
	)
).


fof( mergeA213, axiom,
	p__subrelation(c__component,c__part)
).


% 	($domain component 1 CorpuscularObject)

% 	($domain component 2 CorpuscularObject)


% ($documentation component EnglishLanguage "A specialized common sense notion of part 
% for heterogeneous parts of complexes. (&%component ?COMPONENT ?WHOLE) 
% means that ?COMPONENT is a component of ?WHOLE. Examples of component 
% include the doors and walls of a house, the states or provinces of a 
% country, or the limbs and organs of an animal.  Compare &%piece, which 
% is also a subrelation of &%part.")


fof( mergeA216, axiom,
	p__d__instance(c__material,c__BinaryPredicate)
).


% 	($domainSubclass material 1 Substance)

% 	($domain material 2 CorpuscularObject)


% ($documentation material EnglishLanguage "(&%material ?SUBSTANCE ?OBJECT) means that 
% ?OBJECT is structurally made up in part of ?SUBSTANCE. This relation 
% encompasses the concepts of 'composed of', 'made of', and 'formed of'.  
% For example, plastic is a &%material of my computer monitor.  Compare 
% &%part and its subrelations, viz &%component and &%piece.")


fof( mergeA219, axiom,
	p__subrelation(c__contains,c__partlyLocated)
).


fof( mergeA220, axiom,
	p__d__instance(c__contains,c__SpatialRelation)
).


fof( mergeA221, axiom,
	p__d__instance(c__contains,c__AsymmetricRelation)
).


fof( mergeA222, axiom,
	p__disjointRelation(c__contains,c__part)
).


% 	($domain contains 1 SelfConnectedObject)

% 	($domain contains 2 Object)


% ($documentation contains EnglishLanguage "The relation of spatial containment for two 
% separable objects.  When the two objects are not separable (e.g. an 
% automobile and one of its seats), the relation of &%part should be used.  
% (&%contains ?OBJ1 ?OBJ2) means that the &%SelfConnectedObject ?OBJ1 has 
% a space (i.e. a &%Hole) which is at least partially filled by ?OBJ2.")


fof( mergeA225, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__contains(OBJ1,OBJ2)
				)
				<=>
				(
					(?[HOLE]: 
						(
							(
								(
									p__d__instance(HOLE,c__Hole)
								)
							 &
								(
									p__hole(HOLE,OBJ1)
								)
							 &
								(
									p__properlyFills(OBJ2,HOLE)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA226, axiom,
	p__d__subclass(c__Substance,c__SelfConnectedObject)
).


fof( mergeA227, axiom,
	p__d__partition3(c__Substance,c__PureSubstance,c__Mixture)
).


fof( mergeA228, axiom,
	p__d__partition3(c__Substance,c__SyntheticSubstance,c__NaturalSubstance)
).



% ($documentation Substance EnglishLanguage "An &%Object in which every part is similar to 
% every other in every relevant respect.  More precisely, something is a 
% &%Substance when it has only arbitrary pieces as parts - any parts have 
% properties which are similar to those of the whole.  Note that a &%Substance 
% may nonetheless have physical properties that vary.  For example, the 
% temperature, chemical constitution, density, etc. may change from one part 
% to another.  An example would be a body of water.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: PureSubstance and Mixture are disjoint and some PureSubstance's are part of Mixture, thus instance cannot be inherited
% ;;
% ;;(=>
% ;;   (and
% ;;      ($subclass ?OBJECTTYPE Substance)
% ;;      ($instance ?OBJECT ?OBJECTTYPE)
% ;;      (part ?PART ?OBJECT))
% ;;   ($instance ?PART ?OBJECTTYPE))
% )


fof( mergeA229, axiom,
	(![OBJ,PART,ATTR]: 
		(
			(
				(
					(
						p__d__instance(ATTR,c__Attribute)
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				 &
					(
						p__d__instance(OBJ,c__Substance)
					)
				 &
					(
						p__attribute(OBJ,ATTR)
					)
				 &
					(
						p__part(PART,OBJ)
					)
				)
			)
			=>
			(
				p__attribute(PART,ATTR)
			)
		)
	)
).


fof( mergeA230, axiom,
	p__d__subclass(c__SyntheticSubstance,c__Substance)
).



% ($documentation SyntheticSubstance EnglishLanguage "Any &%Substance that is the result of an 
% &%IntentionalProcess, i.e. any substance that is created by &%Humans.")


fof( mergeA231, axiom,
	(![SUBSTANCE]: 
		(
			(
				p__d__instance(SUBSTANCE,c__SyntheticSubstance)
			)
			<=>
			(
				(?[PROCESS]: 
					(
						(
							(
								p__d__instance(PROCESS,c__IntentionalProcess)
							)
						 &
							(
								p__result(PROCESS,SUBSTANCE)
							)
						 &
							(
								p__d__instance(SUBSTANCE,c__Substance)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA232, axiom,
	p__d__subclass(c__NaturalSubstance,c__Substance)
).



% ($documentation NaturalSubstance EnglishLanguage "Any &%Substance that is not the result of 
% an &%IntentionalProcess, i.e. any substance that occurs naturally.")


fof( mergeA233, axiom,
	p__d__subclass(c__PureSubstance,c__Substance)
).


fof( mergeA234, axiom,
	p__d__partition3(c__PureSubstance,c__CompoundSubstance,c__ElementalSubstance)
).



% ($documentation PureSubstance EnglishLanguage "The &%Class of &%Substances with constant 
% composition.  A &%PureSubstance can be either an element (&%ElementalSubstance) 
% or a compound of elements (&%CompoundSubstance).  Examples: Table salt 
% (sodium chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), water (H_2O), 
% iron (Fe), copper (Cu), and oxygen (O_2).") 


% ($comment 
% ;; JA: to be added (in the future)
% ;;(=>
% ;;   (and
% ;;      ($instance ?PURE PureSubstance)
% ;;      (part ?SUBSTANCE ?PURE))
% ;;   (equal ?SUBSTANCE ?PURE))
% )

fof( mergeA235, axiom,
	p__d__subclass(c__ElementalSubstance,c__PureSubstance)
).



% ($documentation ElementalSubstance EnglishLanguage "The &%Class of &%PureSubstances that 
% cannot be separated into two or more &%Substances by ordinary chemical 
% (or physical) means. This excludes nuclear reactions. &%ElementalSubstances 
% are composed of only one kind of atom. Examples: Iron (Fe), copper (Cu), 
% and oxygen (O_2).  &%ElementalSubstances are the simplest 
% &%PureSubstances.")


fof( mergeA236, axiom,
	p__d__subclass(c__Metal,c__ElementalSubstance)
).



% ($documentation Metal EnglishLanguage "A &%Metal is an &%ElementalSubstance that conducts heat 
% and electricity, is shiny and reflects many colors of light, and can be hammered 
% into sheets or drawn into wire.  About 80% of the known chemical elements 
% (&%ElementalSubstances) are metals.")


fof( mergeA237, axiom,
	p__d__subclass(c__Atom,c__ElementalSubstance)
).



% ($documentation Atom EnglishLanguage "An extremely small unit of matter that retains its 
% identity in Chemical reactions.  It consists of an &%AtomicNucleus and 
% &%Electrons surrounding the &%AtomicNucleus.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: both arguments of component are instance of CorpuscularObject, whereas Atom is instance of ElementalSubstance (CorpuscularObject and Substance are disjoint) (Proton and Electron are instance of SubatomicParticle, which is subclass of ElementalSubstance)
% ;;
% ;;(=>
% ;;   ($instance ?ATOM Atom)
% ;;   (exists (?PROTON ?ELECTRON)
% ;;      (and
% ;;         (component ?PROTON ?ATOM)
% ;;         (component ?ELECTRON ?ATOM)
% ;;         ($instance ?PROTON Proton)
% ;;         ($instance ?ELECTRON Electron))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA238, axiom,
	(![ATOM]: 
		(
			(
				p__d__instance(ATOM,c__Atom)
			)
			=>
			(
				(?[PROTON,ELECTRON]: 
					(
						(
							(
								p__part(PROTON,ATOM)
							)
						 &
							(
								p__part(ELECTRON,ATOM)
							)
						 &
							(
								p__d__instance(PROTON,c__Proton)
							)
						 &
							(
								p__d__instance(ELECTRON,c__Electron)
							)
						)
					)
				)
			)
		)
	)
).



% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: both arguments of component are instance of CorpuscularObject, whereas Atom is instance of ElementalSubstance (CorpuscularObject and Substance are disjoint) (AtomicNucleus is instance of SubatomicParticle, which is subclass of ElementalSubstance)
% ;;
% ;;(=>
% ;;   ($instance ?ATOM Atom)
% ;;   (forall (?NUCLEUS1 ?NUCLEUS2)
% ;;      (=>
% ;;         (and
% ;;            (component ?NUCLEUS1 ?ATOM)
% ;;            (component ?NUCLEUS2 ?ATOM)
% ;;            ($instance ?NUCLEUS1 AtomicNucleus)
% ;;            ($instance ?NUCLEUS2 AtomicNucleus))
% ;;         (equal ?NUCLEUS1 ?NUCLEUS2))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA239, axiom,
	(![ATOM,NUCLEUS1,NUCLEUS2]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Atom)
					)
				 &
					(
						p__part(NUCLEUS1,ATOM)
					)
				 &
					(
						p__part(NUCLEUS2,ATOM)
					)
				 &
					(
						p__d__instance(NUCLEUS1,c__AtomicNucleus)
					)
				 &
					(
						p__d__instance(NUCLEUS2,c__AtomicNucleus)
					)
				)
			)
			=>
			(
				( NUCLEUS1 = NUCLEUS2 )
			)
		)
	)
).



fof( mergeA240, axiom,
	p__d__subclass(c__SubatomicParticle,c__ElementalSubstance)
).



% ($documentation SubatomicParticle EnglishLanguage "The class of &%ElementalSubstances that 
% are smaller than &%Atoms and compose &%Atoms.")


fof( mergeA241, axiom,
	(![PARTICLE]: 
		(
			(
				p__d__instance(PARTICLE,c__SubatomicParticle)
			)
			=>
			(
				(?[ATOM]: 
					(
						(
							(
								p__d__instance(ATOM,c__Atom)
							)
						 &
							(
								p__part(PARTICLE,ATOM)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA242, axiom,
	p__d__subclass(c__AtomicNucleus,c__SubatomicParticle)
).



% ($documentation AtomicNucleus EnglishLanguage "The core of the &%Atom.  It is composed of 
% &%Protons and &%Neutrons.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: both arguments of component are instance of CorpuscularObject, whereas Atom is instance of ElementalSubstance (CorpuscularObject and Substance are disjoint) (Neutron and Proton are instance of SubatomicParticle, which is subclass of ElementalSubstance)
% ;;
% ;;(=>
% ;;   ($instance ?NUCLEUS AtomicNucleus)
% ;;   (exists (?NEUTRON ?PROTON)
% ;;      (and
% ;;         (component ?NEUTRON ?NUCLEUS)
% ;;         (component ?PROTON ?NUCLEUS)
% ;;         ($instance ?NEUTRON Neutron)
% ;;         ($instance ?PROTON Proton))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA243, axiom,
	(![NUCLEUS]: 
		(
			(
				p__d__instance(NUCLEUS,c__AtomicNucleus)
			)
			=>
			(
				(?[NEUTRON,PROTON]: 
					(
						(
							(
								p__part(NEUTRON,NUCLEUS)
							)
						 &
							(
								p__part(PROTON,NUCLEUS)
							)
						 &
							(
								p__d__instance(NEUTRON,c__Neutron)
							)
						 &
							(
								p__d__instance(PROTON,c__Proton)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA244, axiom,
	p__d__subclass(c__Electron,c__SubatomicParticle)
).



% ($documentation Electron EnglishLanguage "&%SubatomicParticles that surround the 
% &%AtomicNucleus.  They have a negative charge.")


fof( mergeA245, axiom,
	p__d__subclass(c__Proton,c__SubatomicParticle)
).



% ($documentation Proton EnglishLanguage "Components of the &%AtomicNucleus.  They have a 
% positive charge.")


fof( mergeA246, axiom,
	p__d__subclass(c__Neutron,c__SubatomicParticle)
).



% ($documentation Neutron EnglishLanguage "Components of the &%AtomicNucleus.  They have no 
% charge.")


fof( mergeA247, axiom,
	p__d__subclass(c__CompoundSubstance,c__PureSubstance)
).



% ($documentation CompoundSubstance EnglishLanguage "The &%Class of &%Substances that contain 
% two or more elements (&%ElementalSubstances), in definite proportion by weight. 
% The composition of a pure compound will be invariant, regardless of the method 
% of preparation. Compounds are composed of more than one kind of atom (element). 
% The term molecule is often used for the smallest unit of a compound that still 
% retains all of the properties of the compound.  Examples: Table salt (sodium 
% chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), and water (H_2O). ") 


fof( mergeA248, axiom,
	p__d__subclass(c__Mixture,c__Substance)
).



% ($documentation Mixture EnglishLanguage "A &%Mixture is two or more &%PureSubstances, 
% combined in varying proportions - each retaining its own specific properties. 
% The components of a &%Mixture can be separated by physical means, i.e. without 
% the making and breaking of chemical bonds. Examples: Air, table salt thoroughly 
% dissolved in water, milk, wood, and concrete. ") 


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: part is reflexive, whereas Mixture and PureSubstance are disjoint
% ;; If we replace part with properPart, the problem remains because of the inheritance of instance of Substance through part
% ;; See:
% ;;		(=>
% ;;			(and
% ;;				($subclass ?OBJECTTYPE Substance)
% ;;				($instance ?OBJECT ?OBJECTTYPE)
% ;;				(part ?PART ?OBJECT))
% ;;			($instance ?PART ?OBJECTTYPE))
% )

fof( mergeA249, axiom,
	(![MIXTURE]: 
		(
			(
				p__d__instance(MIXTURE,c__Mixture)
			)
			=>
			(
				(?[PURE1,PURE2]: 
					(
						(
							(
								p__d__instance(PURE1,c__PureSubstance)
							)
						 &
							(
								p__d__instance(PURE2,c__PureSubstance)
							)
						 &
							(
								~ (
									( PURE1 = PURE2 )
								)
							)
						 &
							(
								p__part(PURE1,MIXTURE)
							)
						 &
							(
								p__part(PURE2,MIXTURE)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: inheritance of instance of Substance through part
% ;; See:
% ;;		(=>
% ;;			(and
% ;;				($subclass ?OBJECTTYPE Substance)
% ;;				($instance ?OBJECT ?OBJECTTYPE)
% ;;				(part ?PART ?OBJECT))
% ;;			($instance ?PART ?OBJECTTYPE))
% )

fof( mergeA250, axiom,
	(![MIXTURE,SUBSTANCE]: 
		(
			(
				(
					(
						p__d__instance(SUBSTANCE,c__Object)
					)
				 &
					(
						p__d__instance(MIXTURE,c__Mixture)
					)
				 &
					(
						p__part(SUBSTANCE,MIXTURE)
					)
				 &
					(
						~ (
							p__d__instance(SUBSTANCE,c__Mixture)
						)
					)
				)
			)
			=>
			(
				p__d__instance(SUBSTANCE,c__PureSubstance)
			)
		)
	)
).



fof( mergeA251, axiom,
	p__d__subclass(c__CorpuscularObject,c__SelfConnectedObject)
).


fof( mergeA252, axiom,
	p__d__disjoint(c__CorpuscularObject,c__Substance)
).



% ($documentation CorpuscularObject EnglishLanguage "A &%SelfConnectedObject whose parts have 
% properties that are not shared by the whole.")


fof( mergeA253, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__CorpuscularObject)
			)
			=>
			(
				(?[SUBSTANCE1,SUBSTANCE2]: 
					(
						(
							(
								p__d__subclass(SUBSTANCE1,c__Substance)
							)
						 &
							(
								p__d__subclass(SUBSTANCE2,c__Substance)
							)
						 &
							(
								p__material(SUBSTANCE1,OBJ)
							)
						 &
							(
								p__material(SUBSTANCE2,OBJ)
							)
						 &
							(
								~ (
									( SUBSTANCE1 = SUBSTANCE2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA254, axiom,
	p__d__subclass(c__Region,c__Object)
).



% ($documentation Region EnglishLanguage "A topographic location.  &%Regions encompass 
% surfaces of &%Objects, imaginary places, and &%GeographicAreas.  Note 
% that a &%Region is the only kind of &%Object which can be located at 
% itself.  Note too that &%Region is not a subclass of &%SelfConnectedObject, 
% because some &%Regions, e.g. archipelagos, have &%parts which are not 
% &%connected with one another.")


fof( mergeA255, axiom,
	(![REGION]: 
		(
			(
				p__d__instance(REGION,c__Region)
			)
			=>
			(
				(?[PHYS]: 
					(
						(
							(
								p__d__instance(PHYS,c__Physical)
							)
						 &
							(
								p__located(PHYS,REGION)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA256, axiom,
	p__d__subclass(c__Collection,c__Object)
).


fof( mergeA257, axiom,
	p__d__disjoint(c__Collection,c__SelfConnectedObject)
).



% ($documentation Collection EnglishLanguage "Collections have &%members like &%Classes, but, 
% unlike &%Classes, they have a position in space-time and &%members can be 
% added and subtracted without thereby changing the identity of the 
% &%Collection.  Some examples are toolkits, football teams, and flocks 
% of sheep.")


fof( mergeA258, axiom,
	(![COLL]: 
		(
			(
				p__d__instance(COLL,c__Collection)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__SelfConnectedObject)
							)
						 &
							(
								p__member(OBJ,COLL)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA259, axiom,
	p__subrelation(c__member,c__part)
).


fof( mergeA260, axiom,
	p__d__instance(c__member,c__AsymmetricRelation)
).


fof( mergeA261, axiom,
	p__d__instance(c__member,c__IntransitiveRelation)
).


% 	($domain member 1 SelfConnectedObject)

% 	($domain member 2 Collection)

fof( mergeA264, axiom,
	p__relatedInternalConcept(c__member,c__instance)
).


fof( mergeA265, axiom,
	p__relatedInternalConcept(c__member,c__element)
).



% ($documentation member EnglishLanguage "A specialized common sense notion of part for 
% uniform parts of &%Collections.  For example, each sheep in a flock of 
% sheep would have the relationship of member to the flock.")


fof( mergeA266, axiom,
	p__d__instance(c__subCollection,c__BinaryPredicate)
).


fof( mergeA267, axiom,
	p__d__instance(c__subCollection,c__PartialOrderingRelation)
).


% 	($domain subCollection 1 Collection)

% 	($domain subCollection 2 Collection)


% ($documentation subCollection EnglishLanguage "(&%subCollection ?COLL1 ?COLL2) means that 
% the &%Collection ?COLL1 is a proper part of the &%Collection ?COLL2.")


fof( mergeA270, axiom,
	p__subrelation(c__subCollection,c__part)
).


fof( mergeA271, axiom,
	(![COLL1,COLL2]: 
		(
			(
				(
					(
						p__d__instance(COLL2,c__Collection)
					)
				 &
					(
						p__d__instance(COLL1,c__Collection)
					)
				)
			)
			=>
			(
				(
					p__subCollection(COLL1,COLL2)
				)
				<=>
				(
					(![MEMBER]: 
						(
							(
								(
									(
										p__d__instance(MEMBER,c__SelfConnectedObject)
									)
								 &
									(
										p__member(MEMBER,COLL1)
									)
								)
							)
							=>
							(
								p__member(MEMBER,COLL2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA272, axiom,
	p__d__subclass(c__ContentBearingPhysical,c__Physical)
).



% ($documentation ContentBearingPhysical EnglishLanguage "Any &%Object or &%Process that
% expresses content.  This covers &%Objects that contain a &%Proposition,
% such as a book, as well as &%ManualSignLanguage, which may similarly
% contain a &%Proposition.")


fof( mergeA273, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__ContentBearingPhysical)
			)
			=>
			(
				(?[THING]: 
					(
						p__represents(OBJ,THING)
					)
				)
			)
		)
	)
).


fof( mergeA274, axiom,
	p__d__subclass(c__ContentBearingProcess,c__ContentBearingPhysical)
).


% ($comment 
% ;; NS: add.  Missing!
% )

fof( mergeA275, axiom,
	p__d__subclass(c__ContentBearingProcess,c__Process)
).


% ($comment 
% ;; NS: cf.  Note that &%ManualHumanLanguage is not a subclass of
% ;; &%Process, despite the documentation statement below.
% )


% ($documentation ContentBearingProcess EnglishLanguage "Any &%Process, for example 
% &%ManualHumanLanguage, which may contain a &%Proposition.") 


fof( mergeA276, axiom,
	p__d__subclass(c__ContentBearingObject,c__CorpuscularObject)
).


fof( mergeA277, axiom,
	p__d__subclass(c__ContentBearingObject,c__ContentBearingPhysical)
).


% 	(relatedInternalConcept ContentBearingObject containsInformation)


% ($documentation ContentBearingObject EnglishLanguage "Any &%SelfConnectedObject that expresses 
% content.  This content may be a &%Proposition, e.g. when the &%ContentBearingObject 
% is a &%Sentence or &%Text, or it may be a representation of an abstract or 
% physical object, as with an &%Icon, a &%Word or a &%Phrase.")


fof( mergeA279, axiom,
	p__d__subclass(c__SymbolicString,c__ContentBearingObject)
).



% ($documentation SymbolicString EnglishLanguage "The &%Class of alphanumeric sequences.")


fof( mergeA280, axiom,
	p__d__subclass(c__Character,c__SymbolicString)
).



% ($documentation Character EnglishLanguage "An element of an alphabet, a set of numerals, etc.  
% Note that a &%Character may or may not be part of a &%Language.  &%Character 
% is a subclass of &%SymbolicString, because every instance of &%Character is 
% an alphanumeric sequence consisting of a single element.")


fof( mergeA281, axiom,
	(![STRING]: 
		(
			(
				p__d__instance(STRING,c__SymbolicString)
			)
			=>
			(
				(?[PART]: 
					(
						(
							(
								p__part(PART,STRING)
							)
						 &
							(
								p__d__instance(PART,c__Character)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA282, axiom,
	p__d__instance(c__containsInformation,c__BinaryPredicate)
).


fof( mergeA283, axiom,
	p__d__instance(c__containsInformation,c__AsymmetricRelation)
).


fof( mergeA284, axiom,
	p__subrelation(c__containsInformation,c__represents)
).


% 	($domain containsInformation 1 ContentBearingPhysical)

% 	($domain containsInformation 2 Proposition)


% ($documentation containsInformation EnglishLanguage "A subrelation of &%represents.  This 
% predicate relates a &%ContentBearingPhysical to the &%Proposition that is 
% expressed by the &%ContentBearingPhysical. Examples include the relationships 
% between a physical novel and its story and between a printed score and its 
% musical content.")


fof( mergeA287, axiom,
	p__d__subclass(c__Icon,c__ContentBearingPhysical)
).



% ($documentation Icon EnglishLanguage "This is the subclass of &%ContentBearingPhysical 
% which are not part of a &%Language and which have some sort of similarity 
% with the &%Objects that they represent.  This &%Class would include symbolic 
% roadway signs, representational art works, photographs, etc.")


fof( mergeA288, axiom,
	p__d__subclass(c__MotionPicture,c__Text)
).



% ($documentation MotionPicture EnglishLanguage "A &%ContentBearingObject which depicts motion 
% (and which may have an audio or text component as well).  This &%Class covers 
% films, videos, etc.")


fof( mergeA289, axiom,
	p__d__subclass(c__LinguisticExpression,c__ContentBearingPhysical)
).


fof( mergeA290, axiom,
	p__d__disjoint(c__LinguisticExpression,c__Icon)
).



% ($documentation LinguisticExpression EnglishLanguage "This is the subclass of 
% &%ContentBearingPhysical which are language-related.  Note that this &%Class 
% encompasses both &%Language and the the elements of &%Languages, 
% e.g. &%Words.")


fof( mergeA291, axiom,
	p__d__subclass(c__Language,c__LinguisticExpression)
).


fof( mergeA292, axiom,
	p__d__disjointDecomposition4(c__Language,c__AnimalLanguage,c__HumanLanguage,c__ComputerLanguage)
).



% ($documentation Language EnglishLanguage "A system of signs for expressing thought.  The 
% system can be either natural or artificial, i.e. something that emerges 
% gradually as a cultural artifact or something that is intentionally created 
% by a person or group of people.")


fof( mergeA293, axiom,
	p__d__subclass(c__AnimalLanguage,c__Language)
).



% ($documentation AnimalLanguage EnglishLanguage "The &%subclass of &%Languages used by 
% &%Animals other than &%Humans.")


fof( mergeA294, axiom,
	(![PROC,LANG,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(PROC,c__Process)
					)
				 &
					(
						p__d__instance(LANG,c__AnimalLanguage)
					)
				 &
					(
						p__agent(PROC,AGENT)
					)
				 &
					(
						p__instrument(PROC,LANG)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(AGENT,c__Animal)
					)
				 &
					(
						~ (
							p__d__instance(AGENT,c__Human)
						)
					)
				)
			)
		)
	)
).


fof( mergeA295, axiom,
	p__d__subclass(c__ArtificialLanguage,c__Language)
).



% ($documentation ArtificialLanguage EnglishLanguage "The &%subclass of &%Languages that are 
% designed by &%Humans.")


fof( mergeA296, axiom,
	p__d__subclass(c__ComputerLanguage,c__ArtificialLanguage)
).



% ($documentation ComputerLanguage EnglishLanguage "The class of &%Languages designed for 
% and interpreted by a computer.")


fof( mergeA297, axiom,
	(![PROC,LANG,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(PROC,c__Process)
					)
				 &
					(
						p__d__instance(LANG,c__ComputerLanguage)
					)
				 &
					(
						p__agent(PROC,AGENT)
					)
				 &
					(
						p__instrument(PROC,LANG)
					)
				)
			)
			=>
			(
				p__d__instance(AGENT,c__Machine)
			)
		)
	)
).


fof( mergeA298, axiom,
	p__d__subclass(c__HumanLanguage,c__Language)
).


fof( mergeA299, axiom,
	p__d__partition3(c__HumanLanguage,c__NaturalLanguage,c__ConstructedLanguage)
).


fof( mergeA300, axiom,
	p__d__partition3(c__HumanLanguage,c__SpokenHumanLanguage,c__ManualHumanLanguage)
).



% ($documentation HumanLanguage EnglishLanguage "The &%subclass of &%Languages used by 
% &%Humans.")


fof( mergeA301, axiom,
	(![PROC,LANG,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(PROC,c__Process)
					)
				 &
					(
						p__d__instance(LANG,c__HumanLanguage)
					)
				 &
					(
						p__agent(PROC,AGENT)
					)
				 &
					(
						p__instrument(PROC,LANG)
					)
				)
			)
			=>
			(
				p__d__instance(AGENT,c__Human)
			)
		)
	)
).


fof( mergeA302, axiom,
	p__d__subclass(c__ConstructedLanguage,c__HumanLanguage)
).


fof( mergeA303, axiom,
	p__d__subclass(c__ConstructedLanguage,c__ArtificialLanguage)
).



% ($documentation ConstructedLanguage EnglishLanguage "An &%ConstructedLanguage is a 
% &%HumanLanguage that did not evolve spontaneously within a language
% community, but rather had its core grammar and vocabulary invented by 
% one or more language experts, often with an aim to produce a more 
% grammatically regular language than any language that has evolved 
% naturally.  This &%Class includes languages like Esperanto that were 
% created to facilitate international communication")


fof( mergeA304, axiom,
	(![LANG]: 
		(
			(
				p__d__instance(LANG,c__ConstructedLanguage)
			)
			=>
			(
				(?[PLAN]: 
					(
						(
							(
								p__d__instance(PLAN,c__Planning)
							)
						 &
							(
								p__result(PLAN,LANG)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA305, axiom,
	p__d__subclass(c__NaturalLanguage,c__HumanLanguage)
).



% ($documentation NaturalLanguage EnglishLanguage "The &%subclass of &%HumanLanguages which 
% are not designed and which evolve from generation to generation.  This 
% &%Class includes all of the national languages, e.g. English, Spanish, 
% Japanese, etc.  Note that this class includes dialects of natural 
% languages.")


fof( mergeA306, axiom,
	p__d__subclass(c__ManualHumanLanguage,c__HumanLanguage)
).



% ($documentation ManualHumanLanguage EnglishLanguage "A &%ManualHumanLanguage is a
% &%HumanLanguage which has as its medium gestures and movement, such 
% as the shape, position, and movement of the hands.")


fof( mergeA307, axiom,
	p__d__subclass(c__SpokenHumanLanguage,c__HumanLanguage)
).



% ($documentation SpokenHumanLanguage EnglishLanguage "A &%SpokenHumanLanguage is a
% &%HumanLanguage which has as its medium the human voice. It can also 
% berepresented visually through writing, although not all 
% &%SpokenHumanLanguages have a codified written form.")


fof( mergeA308, axiom,
	p__d__instance(c__EnglishLanguage,c__NaturalLanguage)
).


fof( mergeA309, axiom,
	p__d__instance(c__EnglishLanguage,c__SpokenHumanLanguage)
).



% ($documentation EnglishLanguage EnglishLanguage "A Germanic language that incorporates many roots 
% from the Romance languages.  It is the official language of the &%UnitedStates, 
% the &%UnitedKingdom, and many other countries.")


fof( mergeA310, axiom,
	p__d__subclass(c__Word,c__LinguisticExpression)
).



% ($documentation Word EnglishLanguage "A term of a &%Language that represents a concept.")


fof( mergeA311, axiom,
	p__d__subclass(c__Formula,c__Sentence)
).



% ($documentation Formula EnglishLanguage "A syntactically well-formed formula in the 
% SUO-KIF knowledge representation language.")


% ($comment 
% ;; The following ground facts incorporate the 'Agent' hierarchy from the 
% ;; corresponding ontology on the Ontolingua server.  It also includes 
% ;; predicates defined in the ITBM-CNR ontology "Actors".
% )

fof( mergeA312, axiom,
	p__d__subclass(c__Agent,c__Object)
).



% ($documentation Agent EnglishLanguage "Something or someone that can act on its own and 
% produce changes in the world.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of agent is already Agent (the reverse implication is a tautology)
% ;;
% ;;(<=>
% ;;  ($instance ?AGENT Agent)
% ;;  (exists (?PROC)
% ;;    (agent ?PROC ?AGENT)))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA313, axiom,
	(![AGENT]: 
		(
			(
				p__d__instance(AGENT,c__Agent)
			)
			=>
			(
				(?[PROC]: 
					(
						(
							(
								p__d__instance(PROC,c__Process)
							)
						 &
							(
								p__agent(PROC,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA314, axiom,
	p__d__subclass(c__SentientAgent,c__Agent)
).


% ($comment 
% ;; NS: delete.
% ;; (documentation SentientAgent EnglishLanguage "An &%Agent that has rights but may or may 
% ;; not have responsibilities and the ability to reason.  If the latter are 
% ;; present, then the &%Agent is also an instance of &%CognitiveAgent.  
% ;; Domesticated animals are an example of &%SentientAgents that are not 
% ;; also &%CognitiveAgents.")
% )

% ($comment 
% ;; NS: add.
% )


% ($documentation SentientAgent EnglishLanguage "A &%SentientAgent is an
% &%Agent that is capable of &%Perception and experiences some level of
% consciousness (see &%ConsciousnessAttribute).  If the &%Agent is able
% to reason at a comparatively high level (evinced by the ability to
% learn, plan, and feel emotions), then it is also an instance of
% &%CognitiveAgent.  A &%DomesticAnimal is a &%SentientAgent, but may or
% may not be a &%CognitiveAgent, depending on the type of &%Animal.")


fof( mergeA315, axiom,
	p__d__subclass(c__CognitiveAgent,c__SentientAgent)
).


% ($comment 
% ;; NS: delete.
% ;; (documentation CognitiveAgent EnglishLanguage "A &%SentientAgent with
% ;; responsibilities and the ability to reason, deliberate, make plans,
% ;; etc.  This is essentially the legal/ethical notion of a person.  Note
% ;; that, although &%Human is a subclass of &%CognitiveAgent, there may be
% ;; instances of &%CognitiveAgent which are not also instances of &%Human.
% ;; For example, chimpanzees, gorillas, dolphins, whales, and some
% ;; extraterrestrials
% ;; (if they exist) may be &%CognitiveAgents.")
% )

% ($comment 
% ;; NS: add.
% )


% ($documentation CognitiveAgent EnglishLanguage "A &%CognitiveAgent is
% an &%Agent that has the ability to reason, deliberate, make plans, and
% experience emotions.  Although &%Human is a subclass of
% &%CognitiveAgent, there may be instances of &%CognitiveAgent which are
% not also instances of &%Human.  For example, &%Primates, dolphins,
% whales, and some extraterrestrials (if they exist) might be considered &%CognitiveAgents.")


% ($comment 
% ;; NS: new.  Since an Entity might or might not be considered a
% ;; LegalAgent for its entire existence, depending on the
% ;; circumstances, it might be better to represent &%LegalAgent as a
% ;; &%RelationalAttribute.
% )

fof( mergeA316, axiom,
	p__d__subclass(c__LegalAgent,c__Agent)
).


% ($comment 
% ;; NS: add.
% )


% ($documentation LegalAgent EnglishLanguage "A &%LegalAgent is an
% &%Agent that is allowed by law to to act and be treated as a legal
% person for certain purposes, such as being a party to a lawsuit,
% owning property, and entering into a contract.  Typically, a
% &%LegalAgent is either an adult &%Human or some type of
% &%Organization.  Depending on the prevailing legal system in a given
% time and location, &%Humans in general, as well as other
% &%CognitiveAgents, typically will have additional legal rights and
% obligations beyond those accorded to &%LegalAgents.  See the Wikipedia
% description of <a
% href=http://en.wikipedia.org/wiki/Juristic_person>Juristic
% person</a>.")


% ($comment 
% ;; NS: add.
% )

% 	(forall (?TIME ?AGENT)
% 		(<=> 
% 			(holdsDuring ?TIME ($instance ?AGENT LegalAgent))
% 			(holdsDuring ?TIME (or ([|] (capability LegalAction agent ?AGENT) ([|] (capability LegalAction patient ?AGENT) []))))
% 		)
% 	)

fof( mergeA318, axiom,
	p__d__instance(c__leader,c__BinaryPredicate)
).


fof( mergeA319, axiom,
	p__d__instance(c__leader,c__AsymmetricRelation)
).


fof( mergeA320, axiom,
	p__d__instance(c__leader,c__SingleValuedRelation)
).


% 	($domain leader 1 Agent)

% 	($domain leader 2 Human)


% ($documentation leader EnglishLanguage "(&%leader ?INSTITUTION ?PERSON)
% means that the leader of ?INSTITUTION is ?PERSON.")


% 	(forall (?X ?TIME ?Y)
% 		(=> 
% 			(holdsDuring ?TIME (leader ?X ?Y))
% 			(holdsDuring ?TIME (attribute ?Y Living))
% 		)
% 	)

fof( mergeA324, axiom,
	p__d__subclass(c__Process,c__Physical)
).



% ($documentation Process EnglishLanguage "The class of things that happen 
% and have temporal parts or stages.  Examples include extended events 
% like a football match or a race, actions like &%Pursuing and &%Reading, 
% and biological processes. The formal definition is: anything that occurs in
% time but is not an &%Object.  Note that a &%Process may have 
% participants 'inside' it which are &%Objects, such as the players 
% in a football match.  In a 4D ontology, a &%Process is something whose 
% spatiotemporal extent is thought of as dividing into temporal stages 
% roughly perpendicular to the time-axis.")


fof( mergeA325, axiom,
	p__d__subclass(c__DualObjectProcess,c__Process)
).



% ($documentation DualObjectProcess EnglishLanguage "Any &%Process that requires two, 
% nonidentical &%patients.")


fof( mergeA326, axiom,
	(![PROCESS]: 
		(
			(
				p__d__instance(PROCESS,c__DualObjectProcess)
			)
			=>
			(
				(?[OBJ1,OBJ2]: 
					(
						(
							(
								p__patient(PROCESS,OBJ1)
							)
						 &
							(
								p__patient(PROCESS,OBJ2)
							)
						 &
							(
								~ (
									( OBJ1 = OBJ2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA327, axiom,
	p__d__subclass(c__SingleAgentProcess,c__Process)
).



% ($documentation SingleAgentProcess EnglishLanguage "&%SingleAgentProcess 
% is the &%Class of all &%Processes that require exactly one &%agent in order to occur.")


fof( mergeA328, axiom,
	(![PROC]: 
		(
			(
				p__d__instance(PROC,c__SingleAgentProcess)
			)
			=>
			(
				(?[AGENT]: 
					(
						(
							(
								p__d__instance(AGENT,c__Agent)
							)
						 &
							(
								p__agent(PROC,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA329, axiom,
	(![PROC,AGENT_1,AGENT_2]: 
		(
			(
				(
					(
						p__d__instance(AGENT_1,c__Agent)
					)
				 &
					(
						p__d__instance(AGENT_2,c__Agent)
					)
				 &
					(
						p__d__instance(PROC,c__SingleAgentProcess)
					)
				 &
					(
						p__agent(PROC,AGENT_1)
					)
				 &
					(
						p__agent(PROC,AGENT_2)
					)
				)
			)
			=>
			(
				( AGENT_1 = AGENT_2 )
			)
		)
	)
).


fof( mergeA330, axiom,
	p__d__subclass(c__Abstract,c__Entity)
).


fof( mergeA331, axiom,
	p__d__disjointDecomposition6(c__Abstract,c__Quantity,c__Attribute,c__SetOrClass,c__Relation,c__Proposition)
).



% ($documentation Abstract EnglishLanguage "Properties or qualities as distinguished from any 
% particular embodiment of the properties/qualities in a physical medium.  
% Instances of Abstract can be said to exist in the same sense as mathematical 
% objects such as sets and relations, but they cannot exist at a particular 
% place and time without some physical encoding or embodiment.")


% ($comment 
% ;; Something is Abstract just in case it has neither a spatial nor temporal 
% ;; location.
% )

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of located and time is Physical, which is disjoint with Abstract
% ;;
% ;;(<=> 
% ;;   ($instance ?ABS Abstract)
% ;;   (not 
% ;;      (exists (?LOC ?TIME) 
% ;;         (or 
% ;;            (located ?ABS ?LOC)
% ;;            (time ?ABS ?TIME)))))
% )

fof( mergeA332, axiom,
	p__d__subclass(c__Quantity,c__Abstract)
).



% ($documentation Quantity EnglishLanguage "Any specification of how many or how much of 
% something there is.  Accordingly, there are two subclasses of &%Quantity:  
% &%Number (how many) and &%PhysicalQuantity (how much).")


fof( mergeA333, axiom,
	p__d__subclass(c__Attribute,c__Abstract)
).


fof( mergeA334, axiom,
	p__d__partition4(c__Attribute,c__InternalAttribute,c__RelationalAttribute,c__PerceptualAttribute)
).



% ($documentation Attribute EnglishLanguage "Qualities which we cannot or choose not to 
% reify into subclasses of &%Object.")


fof( mergeA335, axiom,
	p__d__instance(c__property,c__BinaryPredicate)
).


% 	($domain property 1 Entity)

% 	($domain property 2 Attribute)


% ($documentation property EnglishLanguage "This &%Predicate holds between an instance of 
% &%Entity and an instance of &%Attribute.  (&%property ?ENTITY ?ATTR) 
% means that ?ENTITY has the &%Attribute ?ATTR.")


fof( mergeA338, axiom,
	p__d__instance(c__attribute,c__AsymmetricRelation)
).


fof( mergeA339, axiom,
	p__d__instance(c__attribute,c__IrreflexiveRelation)
).


fof( mergeA340, axiom,
	p__subrelation(c__attribute,c__property)
).


% 	($domain attribute 1 Object)


% ($documentation attribute EnglishLanguage "(&%attribute ?OBJECT ?PROPERTY) means that 
% ?PROPERTY is a &%Attribute of ?OBJECT.  For example, 
% (&%attribute &%MyLittleRedWagon &%Red).")


fof( mergeA342, axiom,
	p__d__instance(c__manner,c__AsymmetricRelation)
).


fof( mergeA343, axiom,
	p__d__instance(c__manner,c__IrreflexiveRelation)
).


fof( mergeA344, axiom,
	p__subrelation(c__manner,c__property)
).


% 	($domain manner 1 Process)

fof( mergeA346, axiom,
	p__disjointRelation(c__manner,c__attribute)
).



% ($documentation manner EnglishLanguage "(&%manner ?PROCESS ?MANNER) means that the 
% &%Process ?PROCESS is qualified by the &%Attribute ?MANNER.  The &%Attributes 
% of &%Processes are usually denoted by adverbs and include things like the 
% speed of the wind, the style of a dance, or the intensity of a sports 
% competition.")


% ($comment 
% ;; Seldom used function that appears to cause a very complex contradiction
% ;;
% ;; ($instance AbstractionFn UnaryFunction)
% ;; ($instance AbstractionFn PartialValuedRelation)
% ;; (domain AbstractionFn 1 Class)
% ;; (range AbstractionFn Attribute)
% ;; (documentation AbstractionFn EnglishLanguage "A &%UnaryFunction that maps a &%Class into 
% ;; the instance of &%Attribute that specifies the condition(s) for membership 
% ;; in the &%Class.")
% ;;
% ;; (<=>
% ;;   (equal (AbstractionFn ?CLASS) ?ATTR)
% ;;    (forall (?INST)
% ;;       (<=>
% ;;          ($instance ?INST ?CLASS)
% ;;          (property ?INST ?ATTR))))
% )

fof( mergeA347, axiom,
	p__d__instance(c__ExtensionFn,c__UnaryFunction)
).


fof( mergeA348, axiom,
	p__d__instance(c__ExtensionFn,c__PartialValuedRelation)
).


% 	($domain ExtensionFn 1 Attribute)

% 	($range ExtensionFn Class)


% ($documentation ExtensionFn EnglishLanguage "A &%UnaryFunction that maps an &%Attribute 
% into the &%Class whose condition for membership is the &%Attribute.")

% ($comment 
% ;; (<=>
% ;;    (equal (ExtensionFn ?ATTRIBUTE) ?CLASS)
% ;;    (equal (AbstractionFn ?CLASS) ?ATTRIBUTE))
% )

fof( mergeA351, axiom,
	p__d__subclass(c__InternalAttribute,c__Attribute)
).



% ($documentation InternalAttribute EnglishLanguage "Any &%Attribute of an &%Entity that is an 
% internal property of the &%Entity, e.g. its shape, its color, its fragility, 
% etc.")



% ($documentation PhysicalAttribute EnglishLanguage "An &%InternalAttribute given by physical
% properties of the object.")


fof( mergeA352, axiom,
	p__d__subclass(c__PhysicalAttribute,c__InternalAttribute)
).


fof( mergeA353, axiom,
	p__d__subclass(c__RelationalAttribute,c__Attribute)
).



% ($documentation RelationalAttribute EnglishLanguage "Any &%Attribute that an &%Entity has by 
% virtue of a relationship that it bears to another &%Entity or set of &%Entities, 
% e.g. &%SocialRoles and &%PositionalAttributes.") 


% ($comment 
% ;; The following formulas incorporate the Number hierarchy from the 
% ;; ontology 'kif-numbers' on the Ontolingua server.
% )

fof( mergeA354, axiom,
	p__d__subclass(c__Number,c__Quantity)
).


fof( mergeA355, axiom,
	p__d__partition4(c__Number,c__RealNumber,c__ImaginaryNumber,c__ComplexNumber)
).



% ($documentation Number EnglishLanguage "A measure of how many things there are, or how
% much there is, of a certain kind.  &%Numbers are subclassed into 
% &%RealNumber, &%ComplexNumber, and &%ImaginaryNumber.")


fof( mergeA356, axiom,
	p__d__instance(c__lessThan,c__BinaryPredicate)
).


fof( mergeA357, axiom,
	p__d__instance(c__lessThan,c__TransitiveRelation)
).


fof( mergeA358, axiom,
	p__d__instance(c__lessThan,c__IrreflexiveRelation)
).


fof( mergeA359, axiom,
	p__d__instance(c__lessThan,c__RelationExtendedToQuantities)
).


% 	(trichotomizingOn lessThan RealNumber)

% 	($domain lessThan 1 Quantity)

% 	($domain lessThan 2 Quantity)


% ($documentation lessThan EnglishLanguage "(&%lessThan ?NUMBER1 ?NUMBER2) is true just 
% in case the &%Quantity ?NUMBER1 is less than the &%Quantity ?NUMBER2.")


fof( mergeA363, axiom,
	p__d__instance(c__greaterThan,c__BinaryPredicate)
).


fof( mergeA364, axiom,
	p__d__instance(c__greaterThan,c__TransitiveRelation)
).


fof( mergeA365, axiom,
	p__d__instance(c__greaterThan,c__IrreflexiveRelation)
).


fof( mergeA366, axiom,
	p__d__instance(c__greaterThan,c__RelationExtendedToQuantities)
).


% 	(trichotomizingOn greaterThan RealNumber)

% 	($domain greaterThan 1 Quantity)

% 	($domain greaterThan 2 Quantity)

fof( mergeA370, axiom,
	p__inverse(c__greaterThan,c__lessThan)
).



% ($documentation greaterThan EnglishLanguage "(&%greaterThan ?NUMBER1 ?NUMBER2) is true 
% just in case the &%Quantity ?NUMBER1 is greater than the &%Quantity 
% ?NUMBER2.")


fof( mergeA371, axiom,
	p__d__instance(c__lessThanOrEqualTo,c__BinaryPredicate)
).


fof( mergeA372, axiom,
	p__d__instance(c__lessThanOrEqualTo,c__PartialOrderingRelation)
).


fof( mergeA373, axiom,
	p__d__instance(c__lessThanOrEqualTo,c__RelationExtendedToQuantities)
).


% 	(trichotomizingOn lessThanOrEqualTo RealNumber)

% 	($domain lessThanOrEqualTo 1 Quantity)

% 	($domain lessThanOrEqualTo 2 Quantity)


% ($documentation lessThanOrEqualTo EnglishLanguage "(&%lessThanOrEqualTo ?NUMBER1 ?NUMBER2) 
% is true just in case the &%Quantity ?NUMBER1 is less than or equal to 
% the &%Quantity ?NUMBER2.")


fof( mergeA377, axiom,
	(![NUMBER1,NUMBER2]: 
		(
			(
				(
					(
						p__d__instance(NUMBER2,c__Quantity)
					)
				 &
					(
						p__d__instance(NUMBER1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__lessThanOrEqualTo(NUMBER1,NUMBER2)
				)
				<=>
				(
					(
						( NUMBER1 = NUMBER2 )
					 |
						p__lessThan(NUMBER1,NUMBER2)
					)
				)
			)
		)
	)
).


fof( mergeA378, axiom,
	p__d__instance(c__greaterThanOrEqualTo,c__BinaryPredicate)
).


fof( mergeA379, axiom,
	p__d__instance(c__greaterThanOrEqualTo,c__PartialOrderingRelation)
).


fof( mergeA380, axiom,
	p__d__instance(c__greaterThanOrEqualTo,c__RelationExtendedToQuantities)
).


% 	(trichotomizingOn greaterThanOrEqualTo RealNumber)

% 	($domain greaterThanOrEqualTo 1 Quantity)

% 	($domain greaterThanOrEqualTo 2 Quantity)

fof( mergeA384, axiom,
	p__inverse(c__greaterThanOrEqualTo,c__lessThanOrEqualTo)
).



% ($documentation greaterThanOrEqualTo EnglishLanguage "(&%greaterThanOrEqualTo ?NUMBER1 
% ?NUMBER2) is true just in case the &%Quantity ?NUMBER1 is greater 
% than the &%Quantity ?NUMBER2.")


fof( mergeA385, axiom,
	(![NUMBER1,NUMBER2]: 
		(
			(
				(
					(
						p__d__instance(NUMBER2,c__Quantity)
					)
				 &
					(
						p__d__instance(NUMBER1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__greaterThanOrEqualTo(NUMBER1,NUMBER2)
				)
				<=>
				(
					(
						( NUMBER1 = NUMBER2 )
					 |
						p__greaterThan(NUMBER1,NUMBER2)
					)
				)
			)
		)
	)
).


fof( mergeA386, axiom,
	p__d__subclass(c__RealNumber,c__Number)
).


fof( mergeA387, axiom,
	p__d__partition3(c__RealNumber,c__NegativeRealNumber,c__NonnegativeRealNumber)
).


fof( mergeA388, axiom,
	p__d__partition3(c__RealNumber,c__RationalNumber,c__IrrationalNumber)
).



% ($documentation RealNumber EnglishLanguage "Any &%Number that can be expressed as a 
% (possibly infinite) decimal, i.e. any &%Number that has a position 
% on the number line.")


fof( mergeA389, axiom,
	p__d__subclass(c__ImaginaryNumber,c__Number)
).



% ($documentation ImaginaryNumber EnglishLanguage "Any &%Number that is the result of 
% multiplying a &%RealNumber by the square root of -1.")


% ($comment 
% ;; (=>
% ;;    ($instance ?NUMBER ImaginaryNumber)
% ;;    (exists (?REAL)
% ;;       (and
% ;;          ($instance ?REAL RealNumber)
% ;;          (equal ?NUMBER (MultiplicationFn ?REAL (SquareRootFn -1))))))
% )

fof( mergeA390, axiom,
	p__d__subclass(c__RationalNumber,c__RealNumber)
).



% ($documentation RationalNumber EnglishLanguage "Any &%RealNumber that is the product of 
% dividing two &%Integers.")


fof( mergeA391, axiom,
	p__d__subclass(c__IrrationalNumber,c__RealNumber)
).



% ($documentation IrrationalNumber EnglishLanguage "Any &%RealNumber that is not also a 
% &%RationalNumber.")


fof( mergeA392, axiom,
	p__d__subclass(c__NonnegativeRealNumber,c__RealNumber)
).



% ($documentation NonnegativeRealNumber EnglishLanguage "A &%RealNumber that is greater than 
% or equal to zero.")


fof( mergeA393, axiom,
	(![NUMBER]: 
		(
			(
				p__d__instance(NUMBER,c__Quantity)
			)
			=>
			(
				(
					p__d__instance(NUMBER,c__NonnegativeRealNumber)
				)
				<=>
				(
					(
						(
							p__greaterThanOrEqualTo(NUMBER,c__0)
						)
					 &
						(
							p__d__instance(NUMBER,c__RealNumber)
						)
					)
				)
			)
		)
	)
).


fof( mergeA394, axiom,
	p__d__subclass(c__PositiveRealNumber,c__NonnegativeRealNumber)
).



% ($documentation PositiveRealNumber EnglishLanguage "A &%RealNumber that is greater than 
% zero.")


fof( mergeA395, axiom,
	(![NUMBER]: 
		(
			(
				p__d__instance(NUMBER,c__Quantity)
			)
			=>
			(
				(
					p__d__instance(NUMBER,c__PositiveRealNumber)
				)
				<=>
				(
					(
						(
							p__greaterThan(NUMBER,c__0)
						)
					 &
						(
							p__d__instance(NUMBER,c__RealNumber)
						)
					)
				)
			)
		)
	)
).


fof( mergeA396, axiom,
	p__d__subclass(c__NegativeRealNumber,c__RealNumber)
).



% ($documentation NegativeRealNumber EnglishLanguage "A &%RealNumber that is less than 
% zero.")


fof( mergeA397, axiom,
	(![NUMBER]: 
		(
			(
				p__d__instance(NUMBER,c__Quantity)
			)
			=>
			(
				(
					p__d__instance(NUMBER,c__NegativeRealNumber)
				)
				<=>
				(
					(
						(
							p__lessThan(NUMBER,c__0)
						)
					 &
						(
							p__d__instance(NUMBER,c__RealNumber)
						)
					)
				)
			)
		)
	)
).


fof( mergeA398, axiom,
	p__d__subclass(c__Integer,c__RationalNumber)
).


fof( mergeA399, axiom,
	p__d__partition3(c__Integer,c__OddInteger,c__EvenInteger)
).


fof( mergeA400, axiom,
	p__d__partition3(c__Integer,c__NegativeInteger,c__NonnegativeInteger)
).



% ($documentation Integer EnglishLanguage "A negative or nonnegative whole number.")


fof( mergeA401, axiom,
	p__d__instance(c__0,c__Integer)
).


fof( mergeA402, axiom,
	p__d__subclass(c__EvenInteger,c__Integer)
).



% ($documentation EvenInteger EnglishLanguage "An &%Integer that is evenly divisible 
% by 2.")


fof( mergeA403, axiom,
	p__d__subclass(c__OddInteger,c__Integer)
).



% ($documentation OddInteger EnglishLanguage "An &%Integer that is not evenly divisible 
% by 2.")


fof( mergeA404, axiom,
	p__d__subclass(c__PrimeNumber,c__Integer)
).



% ($documentation PrimeNumber EnglishLanguage "An &%Integer that is evenly divisible only 
% by itself and 1.")


fof( mergeA405, axiom,
	p__d__subclass(c__NonnegativeInteger,c__Integer)
).


fof( mergeA406, axiom,
	p__d__subclass(c__NonnegativeInteger,c__NonnegativeRealNumber)
).



% ($documentation NonnegativeInteger EnglishLanguage "An &%Integer that is greater than 
% or equal to zero.")


% ($comment 
% ;; (=>
% ;;   ($instance ?X NonnegativeInteger)
% ;;   (greaterThan ?X -1))
% )

fof( mergeA407, axiom,
	p__d__subclass(c__NegativeInteger,c__Integer)
).


fof( mergeA408, axiom,
	p__d__subclass(c__NegativeInteger,c__NegativeRealNumber)
).



% ($documentation NegativeInteger EnglishLanguage "An &%Integer that is less than zero.")


fof( mergeA409, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__NegativeInteger)
			)
			=>
			(
				p__greaterThan(c__0,X)
			)
		)
	)
).


fof( mergeA410, axiom,
	p__d__subclass(c__PositiveInteger,c__NonnegativeInteger)
).


fof( mergeA411, axiom,
	p__d__subclass(c__PositiveInteger,c__PositiveRealNumber)
).



% ($documentation PositiveInteger EnglishLanguage "An &%Integer that is greater than zero.")


fof( mergeA412, axiom,
	p__d__instance(c__1,c__PositiveInteger)
).


fof( mergeA413, axiom,
	p__d__instance(c__2,c__PositiveInteger)
).


fof( mergeA414, axiom,
	p__d__instance(c__3,c__PositiveInteger)
).


fof( mergeA415, axiom,
	p__d__instance(c__4,c__PositiveInteger)
).


fof( mergeA416, axiom,
	p__d__instance(c__5,c__PositiveInteger)
).


fof( mergeA417, axiom,
	p__d__instance(c__6,c__PositiveInteger)
).


fof( mergeA418, axiom,
	p__d__instance(c__7,c__PositiveInteger)
).


fof( mergeA419, axiom,
	p__d__instance(c__8,c__PositiveInteger)
).


fof( mergeA420, axiom,
	p__d__instance(c__9,c__PositiveInteger)
).


fof( mergeA421, axiom,
	p__d__instance(c__10,c__PositiveInteger)
).


fof( mergeA422, axiom,
	p__d__instance(c__11,c__PositiveInteger)
).


fof( mergeA423, axiom,
	p__d__instance(c__12,c__PositiveInteger)
).


fof( mergeA424, axiom,
	p__d__instance(c__13,c__PositiveInteger)
).


fof( mergeA425, axiom,
	p__d__instance(c__14,c__PositiveInteger)
).


fof( mergeA426, axiom,
	p__d__instance(c__15,c__PositiveInteger)
).


fof( mergeA427, axiom,
	p__d__instance(c__16,c__PositiveInteger)
).


fof( mergeA428, axiom,
	p__d__instance(c__17,c__PositiveInteger)
).


fof( mergeA429, axiom,
	p__d__instance(c__18,c__PositiveInteger)
).


fof( mergeA430, axiom,
	p__d__instance(c__19,c__PositiveInteger)
).


fof( mergeA431, axiom,
	p__d__instance(c__20,c__PositiveInteger)
).


fof( mergeA432, axiom,
	p__d__instance(c__21,c__PositiveInteger)
).


fof( mergeA433, axiom,
	p__d__instance(c__22,c__PositiveInteger)
).


fof( mergeA434, axiom,
	p__d__instance(c__23,c__PositiveInteger)
).


fof( mergeA435, axiom,
	p__d__instance(c__24,c__PositiveInteger)
).


fof( mergeA436, axiom,
	p__d__instance(c__25,c__PositiveInteger)
).


fof( mergeA437, axiom,
	p__d__instance(c__26,c__PositiveInteger)
).


fof( mergeA438, axiom,
	p__d__instance(c__27,c__PositiveInteger)
).


fof( mergeA439, axiom,
	p__d__instance(c__28,c__PositiveInteger)
).


fof( mergeA440, axiom,
	p__d__instance(c__29,c__PositiveInteger)
).


fof( mergeA441, axiom,
	p__d__instance(c__30,c__PositiveInteger)
).


fof( mergeA442, axiom,
	p__d__instance(c__31,c__PositiveInteger)
).


fof( mergeA443, axiom,
	p__d__instance(c__32,c__PositiveInteger)
).


fof( mergeA444, axiom,
	p__d__instance(c__33,c__PositiveInteger)
).


fof( mergeA445, axiom,
	p__d__instance(c__34,c__PositiveInteger)
).


fof( mergeA446, axiom,
	p__d__instance(c__35,c__PositiveInteger)
).


fof( mergeA447, axiom,
	p__d__instance(c__36,c__PositiveInteger)
).


fof( mergeA448, axiom,
	p__d__instance(c__37,c__PositiveInteger)
).


fof( mergeA449, axiom,
	p__d__instance(c__38,c__PositiveInteger)
).


fof( mergeA450, axiom,
	p__d__instance(c__39,c__PositiveInteger)
).


fof( mergeA451, axiom,
	p__d__instance(c__40,c__PositiveInteger)
).


fof( mergeA452, axiom,
	p__d__instance(c__41,c__PositiveInteger)
).


fof( mergeA453, axiom,
	p__d__instance(c__42,c__PositiveInteger)
).


fof( mergeA454, axiom,
	p__d__instance(c__43,c__PositiveInteger)
).


fof( mergeA455, axiom,
	p__d__instance(c__44,c__PositiveInteger)
).


fof( mergeA456, axiom,
	p__d__instance(c__45,c__PositiveInteger)
).


fof( mergeA457, axiom,
	p__d__instance(c__46,c__PositiveInteger)
).


fof( mergeA458, axiom,
	p__d__instance(c__47,c__PositiveInteger)
).


fof( mergeA459, axiom,
	p__d__instance(c__48,c__PositiveInteger)
).


fof( mergeA460, axiom,
	p__d__instance(c__49,c__PositiveInteger)
).


fof( mergeA461, axiom,
	p__d__instance(c__50,c__PositiveInteger)
).


fof( mergeA462, axiom,
	p__d__instance(c__51,c__PositiveInteger)
).


fof( mergeA463, axiom,
	p__d__instance(c__52,c__PositiveInteger)
).


fof( mergeA464, axiom,
	p__d__instance(c__53,c__PositiveInteger)
).


fof( mergeA465, axiom,
	p__d__instance(c__54,c__PositiveInteger)
).


fof( mergeA466, axiom,
	p__d__instance(c__55,c__PositiveInteger)
).


fof( mergeA467, axiom,
	p__d__instance(c__56,c__PositiveInteger)
).


fof( mergeA468, axiom,
	p__d__instance(c__57,c__PositiveInteger)
).


fof( mergeA469, axiom,
	p__d__instance(c__58,c__PositiveInteger)
).


fof( mergeA470, axiom,
	p__d__instance(c__59,c__PositiveInteger)
).


fof( mergeA471, axiom,
	p__d__instance(c__60,c__PositiveInteger)
).


fof( mergeA472, axiom,
	p__d__instance(c__61,c__PositiveInteger)
).


fof( mergeA473, axiom,
	p__d__instance(c__62,c__PositiveInteger)
).


fof( mergeA474, axiom,
	p__d__instance(c__63,c__PositiveInteger)
).


fof( mergeA475, axiom,
	p__d__instance(c__64,c__PositiveInteger)
).


fof( mergeA476, axiom,
	p__d__instance(c__65,c__PositiveInteger)
).


fof( mergeA477, axiom,
	p__d__instance(c__66,c__PositiveInteger)
).


fof( mergeA478, axiom,
	p__d__instance(c__67,c__PositiveInteger)
).


fof( mergeA479, axiom,
	p__d__instance(c__68,c__PositiveInteger)
).


fof( mergeA480, axiom,
	p__d__instance(c__69,c__PositiveInteger)
).


fof( mergeA481, axiom,
	p__d__instance(c__70,c__PositiveInteger)
).


fof( mergeA482, axiom,
	p__d__instance(c__71,c__PositiveInteger)
).


fof( mergeA483, axiom,
	p__d__instance(c__72,c__PositiveInteger)
).


fof( mergeA484, axiom,
	p__d__instance(c__73,c__PositiveInteger)
).


fof( mergeA485, axiom,
	p__d__instance(c__74,c__PositiveInteger)
).


fof( mergeA486, axiom,
	p__d__instance(c__75,c__PositiveInteger)
).


fof( mergeA487, axiom,
	p__d__instance(c__76,c__PositiveInteger)
).


fof( mergeA488, axiom,
	p__d__instance(c__77,c__PositiveInteger)
).


fof( mergeA489, axiom,
	p__d__instance(c__78,c__PositiveInteger)
).


fof( mergeA490, axiom,
	p__d__instance(c__79,c__PositiveInteger)
).


fof( mergeA491, axiom,
	p__d__instance(c__80,c__PositiveInteger)
).


fof( mergeA492, axiom,
	p__d__instance(c__81,c__PositiveInteger)
).


fof( mergeA493, axiom,
	p__d__instance(c__82,c__PositiveInteger)
).


fof( mergeA494, axiom,
	p__d__instance(c__83,c__PositiveInteger)
).


fof( mergeA495, axiom,
	p__d__instance(c__84,c__PositiveInteger)
).


fof( mergeA496, axiom,
	p__d__instance(c__85,c__PositiveInteger)
).


fof( mergeA497, axiom,
	p__d__instance(c__86,c__PositiveInteger)
).


fof( mergeA498, axiom,
	p__d__instance(c__87,c__PositiveInteger)
).


fof( mergeA499, axiom,
	p__d__instance(c__88,c__PositiveInteger)
).


fof( mergeA500, axiom,
	p__d__instance(c__89,c__PositiveInteger)
).


fof( mergeA501, axiom,
	p__d__instance(c__90,c__PositiveInteger)
).


fof( mergeA502, axiom,
	p__d__instance(c__91,c__PositiveInteger)
).


fof( mergeA503, axiom,
	p__d__instance(c__92,c__PositiveInteger)
).


fof( mergeA504, axiom,
	p__d__instance(c__93,c__PositiveInteger)
).


fof( mergeA505, axiom,
	p__d__instance(c__94,c__PositiveInteger)
).


fof( mergeA506, axiom,
	p__d__instance(c__95,c__PositiveInteger)
).


fof( mergeA507, axiom,
	p__d__instance(c__96,c__PositiveInteger)
).


fof( mergeA508, axiom,
	p__d__instance(c__97,c__PositiveInteger)
).


fof( mergeA509, axiom,
	p__d__instance(c__98,c__PositiveInteger)
).


fof( mergeA510, axiom,
	p__d__instance(c__99,c__PositiveInteger)
).


fof( mergeA511, axiom,
	p__d__instance(c__100,c__PositiveInteger)
).


fof( mergeA512, axiom,
	p__d__instance(c__101,c__PositiveInteger)
).


fof( mergeA513, axiom,
	p__d__instance(c__102,c__PositiveInteger)
).


fof( mergeA514, axiom,
	p__d__instance(c__103,c__PositiveInteger)
).


fof( mergeA515, axiom,
	p__d__instance(c__104,c__PositiveInteger)
).


fof( mergeA516, axiom,
	p__d__instance(c__105,c__PositiveInteger)
).


fof( mergeA517, axiom,
	p__d__instance(c__106,c__PositiveInteger)
).


fof( mergeA518, axiom,
	p__d__instance(c__107,c__PositiveInteger)
).


fof( mergeA519, axiom,
	p__d__instance(c__108,c__PositiveInteger)
).


fof( mergeA520, axiom,
	p__d__instance(c__109,c__PositiveInteger)
).


fof( mergeA521, axiom,
	p__d__instance(c__110,c__PositiveInteger)
).


fof( mergeA522, axiom,
	p__d__instance(c__147,c__PositiveInteger)
).


fof( mergeA523, axiom,
	p__d__instance(c__180,c__PositiveInteger)
).


fof( mergeA524, axiom,
	p__d__instance(c__210,c__PositiveInteger)
).


fof( mergeA525, axiom,
	p__d__instance(c__222,c__PositiveInteger)
).


fof( mergeA526, axiom,
	p__d__instance(c__223,c__PositiveInteger)
).


fof( mergeA527, axiom,
	p__d__instance(c__226,c__PositiveInteger)
).


fof( mergeA528, axiom,
	p__d__instance(c__227,c__PositiveInteger)
).


fof( mergeA529, axiom,
	p__d__instance(c__231,c__PositiveInteger)
).


fof( mergeA530, axiom,
	p__d__instance(c__237,c__PositiveInteger)
).


fof( mergeA531, axiom,
	p__d__instance(c__242,c__PositiveInteger)
).


fof( mergeA532, axiom,
	p__d__instance(c__243,c__PositiveInteger)
).


fof( mergeA533, axiom,
	p__d__instance(c__247,c__PositiveInteger)
).


fof( mergeA534, axiom,
	p__d__instance(c__249,c__PositiveInteger)
).


fof( mergeA535, axiom,
	p__d__instance(c__253,c__PositiveInteger)
).


fof( mergeA536, axiom,
	p__d__instance(c__254,c__PositiveInteger)
).


fof( mergeA537, axiom,
	p__d__instance(c__256,c__PositiveInteger)
).


fof( mergeA538, axiom,
	p__d__instance(c__261,c__PositiveInteger)
).


fof( mergeA539, axiom,
	p__d__instance(c__262,c__PositiveInteger)
).


fof( mergeA540, axiom,
	p__d__instance(c__263,c__PositiveInteger)
).


fof( mergeA541, axiom,
	p__d__instance(c__265,c__PositiveInteger)
).


fof( mergeA542, axiom,
	p__d__instance(c__266,c__PositiveInteger)
).


fof( mergeA543, axiom,
	p__d__instance(c__267,c__PositiveInteger)
).


fof( mergeA544, axiom,
	p__d__instance(c__272,c__PositiveInteger)
).


fof( mergeA545, axiom,
	p__d__instance(c__360,c__PositiveInteger)
).


fof( mergeA546, axiom,
	p__d__instance(c__365,c__PositiveInteger)
).


fof( mergeA547, axiom,
	p__d__instance(c__400,c__PositiveInteger)
).


fof( mergeA548, axiom,
	p__d__instance(c__746,c__PositiveInteger)
).


fof( mergeA549, axiom,
	p__d__instance(c__1000,c__PositiveInteger)
).


fof( mergeA550, axiom,
	p__d__instance(c__1024,c__PositiveInteger)
).


fof( mergeA551, axiom,
	p__d__instance(c__2000,c__PositiveInteger)
).


fof( mergeA552, axiom,
	p__d__instance(c__2205,c__PositiveInteger)
).


fof( mergeA553, axiom,
	p__d__instance(c__2240,c__PositiveInteger)
).


fof( mergeA554, axiom,
	p__d__instance(c__1000000,c__PositiveInteger)
).


fof( mergeA555, axiom,
	p__d__instance(c__1000000000,c__PositiveInteger)
).


fof( mergeA556, axiom,
	p__d__instance(c__1000000000000,c__PositiveInteger)
).


fof( mergeA557, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__PositiveInteger)
			)
			=>
			(
				p__greaterThan(X,c__0)
			)
		)
	)
).


fof( mergeA558, axiom,
	p__d__subclass(c__BinaryNumber,c__RealNumber)
).



% ($documentation BinaryNumber EnglishLanguage "Elements from the number system with base 2.  
% Every &%BinaryNumber is expressed as a sequence of the digits 1 and 0.")


fof( mergeA559, axiom,
	p__d__subclass(c__ComplexNumber,c__Number)
).


fof( mergeA560, axiom,
	p__d__disjoint(c__ComplexNumber,c__RealNumber)
).



% ($documentation ComplexNumber EnglishLanguage "A &%Number that has the form: x + yi, where x 
% and y are &%RealNumbers and i is the square root of -1.")


% ($comment 
% ;; (=>
% ;;    ($instance ?NUMBER ComplexNumber)
% ;;    (exists (?REAL1 ?REAL2)
% ;;       (and
% ;;          ($instance ?REAL1 RealNumber)
% ;;          ($instance ?REAL2 RealNumber)
% ;;          (equal ?NUMBER 
% ;;            (AdditionFn ?REAL1 
% ;;              (MultiplicationFn ?REAL2 
% ;;                (SquareRootFn -1)))))))
% )

fof( mergeA561, axiom,
	p__d__subclass(c__PhysicalQuantity,c__Quantity)
).


fof( mergeA562, axiom,
	p__d__partition3(c__PhysicalQuantity,c__ConstantQuantity,c__FunctionQuantity)
).



% ($documentation PhysicalQuantity EnglishLanguage "A &%PhysicalQuantity is a measure of 
% some quantifiable aspect of the modeled world, such as 'the earth's 
% diameter' (a constant length) and 'the stress in a loaded deformable 
% solid' (a measure of stress, which is a function of three spatial 
% coordinates).  Every &%PhysicalQuantity is either a &%ConstantQuantity
% or &%FunctionQuantity.  Instances of &%ConstantQuantity are dependent 
% on a &%UnitOfMeasure, while instances of &%FunctionQuantity are 
% &%Functions that map instances of &%ConstantQuantity to other instances 
% of &%ConstantQuantity (e.g., a &%TimeDependentQuantity is a
% &%FunctionQuantity).  Although the name and definition of 
% &%PhysicalQuantity is borrowed from physics, a &%PhysicalQuantity need 
% not be material.  Aside from the dimensions of length, time, velocity, 
% etc., nonphysical dimensions such as currency are also possible.  
% Accordingly, amounts of money would be instances of &%PhysicalQuantity.  
% A &%PhysicalQuantity is  distinguished from a pure &%Number by the fact that 
% the former is associated with a dimension of measurement.")


fof( mergeA563, axiom,
	p__d__subclass(c__ConstantQuantity,c__PhysicalQuantity)
).



% ($documentation ConstantQuantity EnglishLanguage "A &%ConstantQuantity
% is a &%PhysicalQuantity that has a constant value, e.g. 3 &%Meters and
% 5 &%HourDurations.  The magnitude (see &%MagnitudeFn) of every
% &%ConstantQuantity is a &%RealNumber.  &%ConstantQuantity is
% distinguished from &%FunctionQuantity, in that each instance of the
% latter is formed through the mapping of one &%PhysicalQuantity to
% another &%PhysicalQuantity.  Each instance of &%ConstantQuantity is
% expressed with the &%BinaryFunction &%MeasureFn, which takes a
% &%Number and a &%UnitOfMeasure as arguments.  For example, 3 &%Meters
% is expressed as (&%MeasureFn 3 &%Meter).  Instances of
% &%ConstantQuantity form a partial order (see
% &%PartialOrderingRelation) with the &%lessThan relation, since
% &%lessThan is a &%RelationExtendedToQuantities and &%lessThan is
% defined over the &%RealNumbers.  The &%lessThan relation is not a
% total order (see &%TotalOrderingRelation) over the class
% &%ConstantQuantity since elements of some subclasses of
% &%ConstantQuantity (such as length quantities) are incomparable to
% elements of other subclasses of &%ConstantQuantity
% (such as mass quantities).")


fof( mergeA564, axiom,
	p__d__subclass(c__TimeMeasure,c__ConstantQuantity)
).



% ($documentation TimeMeasure EnglishLanguage "The class of temporal durations (instances 
% of &%TimeDuration) and positions of &%TimePoints and &%TimeIntervals along 
% the universal timeline (instances of &%TimePosition).")


fof( mergeA565, axiom,
	p__d__subclass(c__TimeDuration,c__TimeMeasure)
).



% ($documentation TimeDuration EnglishLanguage "Any measure of length of time, 
% with or without respect to the universal timeline.")


fof( mergeA566, axiom,
	p__d__subclass(c__TimePosition,c__TimeMeasure)
).


fof( mergeA567, axiom,
	p__d__partition3(c__TimePosition,c__TimeInterval,c__TimePoint)
).



% ($documentation TimePosition EnglishLanguage "Any &%TimePoint or &%TimeInterval 
% along the universal timeline from &%NegativeInfinity to 
% &%PositiveInfinity.")


fof( mergeA568, axiom,
	p__d__subclass(c__TimeInterval,c__TimePosition)
).



% ($documentation TimeInterval EnglishLanguage "An interval of time.
% Note that a &%TimeInterval has both an extent and a location on the
% universal timeline.  Note too that a &%TimeInterval has no gaps,
% i.e. this class contains only convex time intervals.")


fof( mergeA569, axiom,
	p__d__subclass(c__TimePoint,c__TimePosition)
).



% ($documentation TimePoint EnglishLanguage "An extensionless point on
% the universal timeline.  The &%TimePoints at which &%Processes occur
% can be known with various degrees of precision and approximation, but
% conceptually &%TimePoints are point-like and not interval-like.  That
% is, it doesn't make sense to talk about how long a &%TimePoint
% lasts.")


fof( mergeA570, axiom,
	p__d__subclass(c__FunctionQuantity,c__PhysicalQuantity)
).



% ($documentation FunctionQuantity EnglishLanguage "A &%FunctionQuantity
% is a &%PhysicalQuantity that is returned by a &%Function that maps
% from one or more instances of &%ConstantQuantity to another instance
% of &%ConstantQuantity.  For example, the velocity of a particle would
% be represented by a &%FunctionQuantity relating values of time (which
% are instances of &%ConstantQuantity) to values of distance
% (also instances of &%ConstantQuantity).  Note that all elements of the
% range of the &%Function corresponding to a &%FunctionQuantity have the
% same physical dimension as the &%FunctionQuantity itself.")


fof( mergeA571, axiom,
	p__d__subclass(c__UnaryConstantFunctionQuantity,c__FunctionQuantity)
).



% ($documentation UnaryConstantFunctionQuantity EnglishLanguage "A
% &%subclass of &%FunctionQuantity, instances of which are returned by
% &%UnaryFunctions that map from one instance of the &%Class
% &%ConstantQuantity to another instance of the &%Class
% &%ConstantQuantity.")


fof( mergeA572, axiom,
	p__d__subclass(c__TimeDependentQuantity,c__UnaryConstantFunctionQuantity)
).



% ($documentation TimeDependentQuantity EnglishLanguage "A
% &%UnaryConstantFunctionQuantity of continuous time.  All instances of
% this &%Class are returned by &%Functions that map a time quantity into
% another &%ConstantQuantity such as temperature.  For example, 'the
% temperature at the top of the Empire State Building' is a
% &%TimeDependentQuantity, since its value depends on the time.")


fof( mergeA573, axiom,
	p__d__subclass(c__SetOrClass,c__Abstract)
).


fof( mergeA574, axiom,
	p__d__partition3(c__SetOrClass,c__Set,c__Class)
).



% ($documentation SetOrClass EnglishLanguage "The &%SetOrClass of &%Sets
% and &%Classes, i.e. any instance of &%Abstract that has &%elements or
% &%instances.")


fof( mergeA575, axiom,
	p__d__subclass(c__Class,c__SetOrClass)
).



% ($documentation Class EnglishLanguage "&%Classes differ from &%Sets in three important respects.  
% First, &%Classes are not assumed to be extensional.  That is, distinct 
% &%Classes might well have exactly the same instances.  Second, &%Classes typically 
% have an associated `condition' that determines the instances of the &%Class.  So, 
% for example, the condition `human' determines the &%Class of &%Humans.  Note that 
% some &%Classes might satisfy their own condition (e.g., the &%Class of &%Abstract 
% things is &%Abstract) and hence be instances of themselves.  Third, the instances 
% of a class may occur only once within the class, i.e. a class cannot contain 
% duplicate instances.")


fof( mergeA576, axiom,
	p__d__subclass(c__Set,c__SetOrClass)
).



% ($documentation Set EnglishLanguage "A &%SetOrClass that satisfies extensionality as well as
% other constraints specified by some choice of set theory.  &%Sets differ 
% from &%Classes in two important respects.  First, &%Sets are extensional - 
% two &%Sets with the same &%elements are identical.  Second, a &%Set can be 
% an arbitrary stock of objects.  That is, there is no requirement that &%Sets 
% have an associated condition that determines their membership.  Note that &%Sets 
% are not assumed to be unique sets, i.e. &%elements of a &%Set may occur more 
% than once in the &%Set.")


fof( mergeA577, axiom,
	p__d__subclass(c__Relation,c__Abstract)
).


fof( mergeA578, axiom,
	p__d__disjointDecomposition6(c__Relation,c__BinaryRelation,c__TernaryRelation,c__QuaternaryRelation,c__QuintaryRelation,c__VariableArityRelation)
).


fof( mergeA579, axiom,
	p__d__partition4(c__Relation,c__Predicate,c__Function,c__List)
).


fof( mergeA580, axiom,
	p__d__partition3(c__Relation,c__TotalValuedRelation,c__PartialValuedRelation)
).



% ($documentation Relation EnglishLanguage "The &%Class of relations.  There are three kinds 
% of &%Relation:  &%Predicate, &%Function, and &%List.  &%Predicates and 
% &%Functions both denote sets of ordered n-tuples.  The difference between 
% these two &%Classes is that &%Predicates cover formula-forming operators, while 
% &%Functions cover term-forming operators.  A &%List, on the other hand, is a 
% particular ordered n-tuple.")


% ($comment 
% ;; The following part of the ontology covers the various classes under 
% ;; 'Relation'.  Most of the content here is taken from frame-ontology, 
% ;; abstract-algebra, kif-relations, and kif-extensions (ontologies 
% ;; available on the Ontolingua server).
% )

fof( mergeA581, axiom,
	p__d__subclass(c__SingleValuedRelation,c__Relation)
).


% ($comment 
% ;; ($subclass SingleValuedRelation InheritableRelation)
% )


% ($documentation SingleValuedRelation EnglishLanguage "A &%Relation is a &%SingleValuedRelation 
% just in case an assignment of values to every argument position except the last 
% one determines at most one assignment for the last argument position.  Note 
% that not all &%SingleValuedRelations are &%TotalValuedRelations.")


% ($comment 
% ;; (=>
% ;;    ($instance ?REL SingleValuedRelation)
% ;;    (forall (@ROW ?ITEM1 ?ITEM2)
% ;;       (=>
% ;;          (and
% ;;             (?REL @ROW ?ITEM1)
% ;;             (?REL @ROW ?ITEM2))
% ;;          (equal ?ITEM1 ?ITEM2))))
% )

fof( mergeA582, axiom,
	p__d__subclass(c__TotalValuedRelation,c__Relation)
).


% ($comment 
% ;; ($subclass TotalValuedRelation InheritableRelation)
% )


% ($documentation TotalValuedRelation EnglishLanguage "A &%Relation is a &%TotalValuedRelation 
% just in case there exists an assignment for the last argument position of the 
% &%Relation given any assignment of values to every argument position except 
% the last one.  Note that declaring a &%Relation to be both a &%TotalValuedRelation 
% and a &%SingleValuedRelation means that it is a total function.")


% ($comment 
% ;; (<=>
% ;;    ($instance ?REL TotalValuedRelation)
% ;;    (exists (?VALENCE)
% ;;       (and
% ;;          ($instance ?REL Relation)
% ;;          (valence ?REL ?VALENCE)
% ;;          (=>
% ;;             (forall (?NUMBER ?ELEMENT ?CLASS)
% ;;                (=>
% ;;                   (and
% ;;                      (lessThan ?NUMBER ?VALENCE)
% ;;                      (domain ?REL ?NUMBER ?CLASS)
% ;;                      (equal ?ELEMENT (ListOrderFn (ListFn @ROW) ?NUMBER)))
% ;;                   ($instance ?ELEMENT ?CLASS)))
% ;;             (exists (?ITEM)
% ;;                (?REL @ROW ?ITEM))))))
% )

fof( mergeA583, axiom,
	p__d__subclass(c__PartialValuedRelation,c__Relation)
).



% ($documentation PartialValuedRelation EnglishLanguage "A &%Relation is a &%PartialValuedRelation 
% just in case it is not a &%TotalValuedRelation, i.e. just in case assigning values 
% to every argument position except the last one does not necessarily mean that there 
% is a value assignment for the last argument position.  Note that, if a &%Relation 
% is both a &%PartialValuedRelation and a &%SingleValuedRelation, then it is a partial 
% function.")


fof( mergeA584, axiom,
	p__d__subclass(c__BinaryRelation,c__Relation)
).


% ($comment 
% ;; ($subclass BinaryRelation InheritableRelation)
% )

% 	($domain BinaryRelation 1 $ObjectOrClass)

% 	($domain BinaryRelation 2 $ObjectOrClass)

% 	($domain $holds3 1 BinaryRelation)

% 	($domain $holds3 2 $ObjectOrClass)

% 	($domain $holds3 3 $ObjectOrClass)

% 	($schema BinaryRelation $holds3 2 !REL (forall ([|] ?VAR1 ([|] ?VAR2 [])) (equiv ($holds3 !REL ?VAR1 ?VAR2) (!REL ?VAR1 ?VAR2))))


% ($documentation BinaryRelation EnglishLanguage "&%BinaryRelations are relations that are 
% true only of pairs of things.  &%BinaryRelations are represented as slots 
% in frame systems.")


fof( mergeA591, axiom,
	p__d__subclass(c__ReflexiveRelation,c__BinaryRelation)
).



% ($documentation ReflexiveRelation EnglishLanguage "&%Relation ?REL is reflexive iff 
% (?REL ?INST ?INST) for all ?INST.")


fof( mergeA592, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__BinaryRelation)
			)
			=>
			(
				(
					p__d__instance(REL,c__ReflexiveRelation)
				)
				<=>
				(
					(![INST]: 
						(
							p__d__holds3(REL,INST,INST)
						)
					)
				)
			)
		)
	)
).


fof( mergeA593, axiom,
	p__d__subclass(c__IrreflexiveRelation,c__BinaryRelation)
).



% ($documentation IrreflexiveRelation EnglishLanguage "&%Relation ?REL is irreflexive 
% iff (?REL ?INST ?INST) holds for no value of ?INST.")


fof( mergeA594, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__BinaryRelation)
			)
			=>
			(
				(
					p__d__instance(REL,c__IrreflexiveRelation)
				)
				<=>
				(
					(![INST]: 
						(
							~ (
								p__d__holds3(REL,INST,INST)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA595, axiom,
	p__d__subclass(c__SymmetricRelation,c__BinaryRelation)
).



% ($documentation SymmetricRelation EnglishLanguage "A &%BinaryRelation ?REL is
% symmetric just iff (?REL ?INST1 ?INST2) imples (?REL 
% ?INST2 ?INST1), for all ?INST1 and ?INST2.")


fof( mergeA596, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__BinaryRelation)
			)
			=>
			(
				(
					p__d__instance(REL,c__SymmetricRelation)
				)
				<=>
				(
					(![INST1,INST2]: 
						(
							(
								p__d__holds3(REL,INST1,INST2)
							)
							=>
							(
								p__d__holds3(REL,INST2,INST1)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA597, axiom,
	p__d__subclass(c__AsymmetricRelation,c__IrreflexiveRelation)
).


fof( mergeA598, axiom,
	p__d__subclass(c__AsymmetricRelation,c__AntisymmetricRelation)
).



% ($documentation AsymmetricRelation EnglishLanguage "A &%BinaryRelation is asymmetric if and only 
% if it is both an &%AntisymmetricRelation and an &%IrreflexiveRelation.")


fof( mergeA599, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__AsymmetricRelation)
			)
			<=>
			(
				(
					(
						p__d__instance(REL,c__AntisymmetricRelation)
					)
				 &
					(
						p__d__instance(REL,c__IrreflexiveRelation)
					)
				)
			)
		)
	)
).


fof( mergeA600, axiom,
	p__d__subclass(c__AntisymmetricRelation,c__BinaryRelation)
).



% ($documentation AntisymmetricRelation EnglishLanguage "&%BinaryRelation ?REL is an 
% &%AntisymmetricRelation if for distinct ?INST1 and ?INST2, (?REL ?INST1 
% ?INST2) implies not (?REL ?INST2 ?INST1).  In other words, for all ?INST1 
% and ?INST2, (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST1) imply that ?INST1 
% and ?INST2 are identical.  Note that it is possible for an 
% &%AntisymmetricRelation to be a &%ReflexiveRelation.")


fof( mergeA601, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__BinaryRelation)
			)
			=>
			(
				(
					p__d__instance(REL,c__AntisymmetricRelation)
				)
				<=>
				(
					(![INST1,INST2]: 
						(
							(
								(
									(
										p__d__holds3(REL,INST1,INST2)
									)
								 &
									(
										p__d__holds3(REL,INST2,INST1)
									)
								)
							)
							=>
							(
								( INST1 = INST2 )
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA602, axiom,
	p__d__subclass(c__TrichotomizingRelation,c__BinaryRelation)
).



% ($documentation TrichotomizingRelation EnglishLanguage "A &%BinaryRelation ?REL is a 
% &%TrichotomizingRelation just in case all ordered pairs consisting of 
% distinct individuals are elements of ?REL.") 


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check
% ;;
% ;;(<=>
% ;;	($instance ?REL TrichotomizingRelation)
% ;;	(forall (?INST1 ?INST2)
% ;;		(or
% ;;			(and
% ;;				($holds3 ?REL ?INST1 ?INST2)
% ;;				(not 
% ;;					(equal ?INST1 ?INST2))
% ;;				(not 
% ;;					($holds3 ?REL ?INST2 ?INST1)))
% ;;			(and
% ;;				(not 
% ;;					($holds3 ?REL ?INST1 ?INST2))
% ;;	    		(equal ?INST1 ?INST2)
% ;;	    		(not 
% ;;	    			($holds3 ?REL ?INST2 ?INST1)))
% ;;			(and
% ;;				(not 
% ;;					($holds3 ?REL ?INST1 ?INST2))
% ;;				(not 
% ;;					(equal ?INST1 ?INST2))
% ;;				($holds3 ?REL ?INST2 ?INST1)))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA603, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__BinaryRelation)
			)
			=>
			(
				(
					p__d__instance(REL,c__TrichotomizingRelation)
				)
				<=>
				(
					(![INST1,INST2]: 
						(
							(
								p__d__holds3(REL,INST1,INST2)
							 |
								( INST1 = INST2 )
							 |
								p__d__holds3(REL,INST2,INST1)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA604, axiom,
	p__d__subclass(c__TransitiveRelation,c__BinaryRelation)
).



% ($documentation TransitiveRelation EnglishLanguage "A &%BinaryRelation ?REL is transitive 
% if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply (?REL ?INST1 ?INST3), 
% for all ?INST1, ?INST2, and ?INST3.")


fof( mergeA605, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__BinaryRelation)
			)
			=>
			(
				(
					p__d__instance(REL,c__TransitiveRelation)
				)
				<=>
				(
					(![INST1,INST2,INST3]: 
						(
							(
								(
									(
										p__d__holds3(REL,INST1,INST2)
									)
								 &
									(
										p__d__holds3(REL,INST2,INST3)
									)
								)
							)
							=>
							(
								p__d__holds3(REL,INST1,INST3)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA606, axiom,
	p__d__subclass(c__IntransitiveRelation,c__BinaryRelation)
).



% ($documentation IntransitiveRelation EnglishLanguage "A &%BinaryRelation ?REL is 
% intransitive only if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply not 
% (?REL ?INST1 ?INST3), for all ?INST1, ?INST2, and ?INST3.")


fof( mergeA607, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__BinaryRelation)
			)
			=>
			(
				(
					p__d__instance(REL,c__IntransitiveRelation)
				)
				<=>
				(
					(![INST1,INST2,INST3]: 
						(
							(
								(
									(
										p__d__holds3(REL,INST1,INST2)
									)
								 &
									(
										p__d__holds3(REL,INST2,INST3)
									)
								)
							)
							=>
							(
								~ (
									p__d__holds3(REL,INST1,INST3)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA608, axiom,
	p__d__subclass(c__PartialOrderingRelation,c__TransitiveRelation)
).


fof( mergeA609, axiom,
	p__d__subclass(c__PartialOrderingRelation,c__AntisymmetricRelation)
).


fof( mergeA610, axiom,
	p__d__subclass(c__PartialOrderingRelation,c__ReflexiveRelation)
).



% ($documentation PartialOrderingRelation EnglishLanguage "A &%BinaryRelation is a partial 
% ordering if it is a &%ReflexiveRelation, an &%AntisymmetricRelation, and 
% a &%TransitiveRelation.")


fof( mergeA611, axiom,
	p__d__subclass(c__TotalOrderingRelation,c__PartialOrderingRelation)
).


fof( mergeA612, axiom,
	p__d__subclass(c__TotalOrderingRelation,c__TrichotomizingRelation)
).



% ($documentation TotalOrderingRelation EnglishLanguage  "A &%BinaryRelation is a 
% &%TotalOrderingRelation if it is a &%PartialOrderingRelation 
% and a &%TrichotomizingRelation.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check
% ;;
% ;;(<=>
% ;;	($instance ?REL TotalOrderingRelation)
% ;;	(forall (?INST1 ?INST2)
% ;;		(and
% ;;			(or
% ;;				($holds3 ?REL ?INST1 ?INST2)
% ;;				($holds3 ?REL ?INST2 ?INST1))
% ;;			(or
% ;;				(not 
% ;;					($holds3 ?REL ?INST1 ?INST2))
% ;;				(not 
% ;;					($holds3 ?REL ?INST2 ?INST1))))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA613, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__BinaryRelation)
			)
			=>
			(
				(
					p__d__instance(REL,c__TotalOrderingRelation)
				)
				<=>
				(
					(![INST1,INST2]: 
						(
							(
								p__d__holds3(REL,INST1,INST2)
							 |
								p__d__holds3(REL,INST2,INST1)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA614, axiom,
	p__d__subclass(c__EquivalenceRelation,c__TransitiveRelation)
).


fof( mergeA615, axiom,
	p__d__subclass(c__EquivalenceRelation,c__SymmetricRelation)
).


fof( mergeA616, axiom,
	p__d__subclass(c__EquivalenceRelation,c__ReflexiveRelation)
).



% ($documentation EquivalenceRelation EnglishLanguage "A &%BinaryRelation is an equivalence 
% relation if it is a &%ReflexiveRelation, a &%SymmetricRelation, and a 
% &%TransitiveRelation.")


fof( mergeA617, axiom,
	p__d__subclass(c__CaseRole,c__BinaryPredicate)
).


fof( mergeA618, axiom,
	p__d__subclass(c__CaseRole,c__InheritableRelation)
).


fof( mergeA619, axiom,
	p__d__subclass(c__CaseRole,c__AsymmetricRelation)
).



% ($documentation CaseRole EnglishLanguage "The &%Class of &%Predicates relating the 
% spatially distinguished parts of a &%Process. &%CaseRoles include, for 
% example, the &%agent, &%patient or &%destination of an action, the flammable 
% substance in a burning process, or the water that falls in rain.")



% ($documentation involvedInEvent EnglishLanguage "(involvedInEvent ?EVENT ?THING) means 
% that in the &%Process ?EVENT, the &%Entity ?THING plays some &%CaseRole.")


fof( mergeA620, axiom,
	p__d__instance(c__involvedInEvent,c__BinaryPredicate)
).


fof( mergeA621, axiom,
	p__d__instance(c__involvedInEvent,c__AsymmetricRelation)
).


% 	($domain involvedInEvent 1 Process)

% 	($domain involvedInEvent 2 Entity)

% ($comment 
% ;; AP - this axiom below seems questionable, what about relations we just haven't 
% ;; "discovered" yet.
% ;;(=>
% ;;  (involvedInEvent ?E ?T)
% ;;  (exists (?R)
% ;;    (and
% ;;      ($instance ?R CaseRole)
% ;;      (subrelation ?R involvedInEvent)
% ;;      (?R ?E ?T))))
% )

fof( mergeA624, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__CaseRole)
			)
			=>
			(
				p__subrelation(R,c__involvedInEvent)
			)
		)
	)
).


fof( mergeA625, axiom,
	p__d__instance(c__agent,c__CaseRole)
).


% 	($domain agent 1 Process)

% 	($domain agent 2 Agent)

fof( mergeA628, axiom,
	p__subrelation(c__agent,c__involvedInEvent)
).



% ($documentation agent EnglishLanguage "(&%agent ?PROCESS ?AGENT) means that ?AGENT is 
% an active determinant, either animate or inanimate, of the &%Process 
% ?PROCESS, with or without voluntary intention.  For example, Eve is an 
% &%agent in the following proposition: Eve bit an apple.")


fof( mergeA629, axiom,
	p__d__instance(c__destination,c__CaseRole)
).


% 	($domain destination 1 Process)

% 	($domain destination 2 Entity)

fof( mergeA632, axiom,
	p__subrelation(c__destination,c__involvedInEvent)
).



% ($documentation destination EnglishLanguage "(destination ?PROCESS ?GOAL) means that 
% ?GOAL is the target or goal of the Process ?PROCESS.  For example, 
% Danbury would be the destination in the following proposition:  Bob went 
% to Danbury.  Note that this is a very general &%CaseRole and, in 
% particular, that it covers the concepts of 'recipient' and 'beneficiary'.  
% Thus, John would be the &%destination in the following proposition:  
% Tom gave a book to John.")


fof( mergeA633, axiom,
	p__d__instance(c__experiencer,c__CaseRole)
).


% 	($domain experiencer 1 Process)

% 	($domain experiencer 2 Agent)

fof( mergeA636, axiom,
	p__subrelation(c__experiencer,c__involvedInEvent)
).



% ($documentation experiencer EnglishLanguage "(&%experiencer ?PROCESS ?AGENT) means 
% that ?AGENT experiences the &%Process ?PROCESS.  For example, Yojo 
% is the &%experiencer of seeing in the following proposition:  Yojo 
% sees the fish.  Note that &%experiencer, unlike &%agent, does 
% not entail a causal relation between its arguments.")


fof( mergeA637, axiom,
	p__subrelation(c__instrument,c__patient)
).


% 	($domain instrument 1 Process)

% 	($domain instrument 2 Physical)


% ($documentation instrument EnglishLanguage "(instrument ?EVENT ?TOOL) means that ?TOOL 
% is used by an agent in bringing about ?EVENT and that ?TOOL is not 
% changed by ?EVENT.  For example, the key is an &%instrument in the 
% following proposition: The key opened the door.  Note that &%instrument 
% and &%resource cannot be satisfied by the same ordered pair.")


fof( mergeA640, axiom,
	p__d__instance(c__origin,c__CaseRole)
).


% 	($domain origin 1 Process)

% 	($domain origin 2 Object)

fof( mergeA643, axiom,
	p__subrelation(c__origin,c__involvedInEvent)
).



% ($documentation origin EnglishLanguage "(&%origin ?PROCESS ?SOURCE) means that ?SOURCE 
% indicates where the ?Process began.  Note that this relation implies 
% that ?SOURCE is present at the beginning of the process, but need not 
% participate throughout the process.  For example, the submarine is the 
% &%origin in the following proposition: the missile was launched from a 
% submarine.")


fof( mergeA644, axiom,
	p__d__instance(c__patient,c__CaseRole)
).


% 	($domain patient 1 Process)

% 	($domain patient 2 Entity)

fof( mergeA647, axiom,
	p__subrelation(c__patient,c__involvedInEvent)
).



% ($documentation patient EnglishLanguage "(&%patient ?PROCESS ?ENTITY) means that ?ENTITY 
% is a participant in ?PROCESS that may be moved, said, experienced, etc.  
% For example, the direct objects in the sentences 'The cat swallowed the 
% canary' and 'Billy likes the beer' would be examples of &%patients.  Note 
% that the &%patient of a &%Process may or may not undergo structural 
% change as a result of the &%Process.  The &%CaseRole of &%patient is used 
% when one wants to specify as broadly as possible the object of a 
% &%Process.")


fof( mergeA648, axiom,
	p__subrelation(c__resource,c__patient)
).


% 	($domain resource 1 Process)

% 	($domain resource 2 Object)

fof( mergeA651, axiom,
	p__disjointRelation(c__resource,c__result)
).


fof( mergeA652, axiom,
	p__disjointRelation(c__resource,c__instrument)
).


fof( mergeA653, axiom,
	p__disjointRelation(c__result,c__instrument)
).



% ($documentation resource EnglishLanguage "(&%resource ?PROCESS ?RESOURCE) means that 
% ?RESOURCE is present at the beginning of ?PROCESS, is used by ?PROCESS, 
% and as a consequence is changed by ?PROCESS.  For example, soap is a 
% &%resource in the following proposition:  the gun was carved out of soap.  
% Note that &%resource differs from &%instrument, another subrelation of 
% &%patient, in that its internal or physical properties are altered in 
% some way by the &%Process.")


fof( mergeA654, axiom,
	p__subrelation(c__result,c__patient)
).


% 	($domain result 1 Process)

% 	($domain result 2 Entity)


% ($documentation result EnglishLanguage "(result ?ACTION ?OUTPUT) means that ?OUTPUT is 
% a product of ?ACTION.  For example, house is a &%result in the 
% following proposition: Eric built a house.")


fof( mergeA657, axiom,
	p__d__subclass(c__InheritableRelation,c__Relation)
).



% ($documentation InheritableRelation EnglishLanguage "The class of &%Relations whose 
% properties can be inherited downward in the class hierarchy via the 
% &%subrelation &%Predicate.")


fof( mergeA658, axiom,
	p__d__subclass(c__ProbabilityRelation,c__Relation)
).


fof( mergeA659, axiom,
	p__d__subclass(c__ProbabilityRelation,c__InheritableRelation)
).



% ($documentation ProbabilityRelation EnglishLanguage "The &%Class of &%Relations that 
% permit assessment of the probability of an event or situation.")


fof( mergeA660, axiom,
	p__d__instance(c__ProbabilityFn,c__ProbabilityRelation)
).


fof( mergeA661, axiom,
	p__d__instance(c__ProbabilityFn,c__TotalValuedRelation)
).


fof( mergeA662, axiom,
	p__d__instance(c__ProbabilityFn,c__UnaryFunction)
).


% 	($domain ProbabilityFn 1 Formula)

% 	($range ProbabilityFn RealNumber)

fof( mergeA665, axiom,
	p__d__instance(c__ProbabilityFn,c__AsymmetricRelation)
).



% ($documentation ProbabilityFn EnglishLanguage "One of the basic &%ProbabilityRelations, 
% &%ProbabilityFn is used to state the a priori probability of a state of 
% affairs.  (&%ProbabilityFn ?FORMULA) denotes the a priori probability 
% of ?FORMULA.")


fof( mergeA666, axiom,
	p__d__instance(c__conditionalProbability,c__ProbabilityRelation)
).


fof( mergeA667, axiom,
	p__d__instance(c__conditionalProbability,c__TernaryPredicate)
).


% 	($domain conditionalProbability 1 Formula)

% 	($domain conditionalProbability 2 Formula)

% 	($domain conditionalProbability 3 RealNumber)


% ($documentation conditionalProbability EnglishLanguage "One of the basic &%ProbabilityRelations.  
% &%conditionalProbability is used to state the numeric value of a conditional 
% probability.  (&%conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER) means 
% that the probability of ?FORMULA2 being true given that ?FORMULA1 is true is 
% ?NUMBER.") 


fof( mergeA671, axiom,
	p__d__instance(c__increasesLikelihood,c__ProbabilityRelation)
).


fof( mergeA672, axiom,
	p__d__instance(c__increasesLikelihood,c__BinaryPredicate)
).


fof( mergeA673, axiom,
	p__d__instance(c__increasesLikelihood,c__IrreflexiveRelation)
).


% 	($domain increasesLikelihood 1 Formula)

% 	($domain increasesLikelihood 2 Formula)

fof( mergeA676, axiom,
	p__disjointRelation(c__increasesLikelihood,c__decreasesLikelihood)
).


fof( mergeA677, axiom,
	p__disjointRelation(c__increasesLikelihood,c__independentProbability)
).


fof( mergeA678, axiom,
	p__disjointRelation(c__decreasesLikelihood,c__independentProbability)
).



% ($documentation increasesLikelihood EnglishLanguage "One of the basic &%ProbabilityRelations.  
% (&%increasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is more 
% likely to be true if ?FORMULA1 is true.")


fof( mergeA679, axiom,
	(![FORMULA1,FORMULA2,NUMBER2,NUMBER1]: 
		(
			(
				(
					(
						p__d__instance(FORMULA2,c__Formula)
					)
				 &
					(
						p__d__instance(FORMULA1,c__Formula)
					)
				 &
					(
						p__d__instance(NUMBER1,c__RealNumber)
					)
				 &
					(
						p__d__instance(NUMBER2,c__RealNumber)
					)
				 &
					(
						p__increasesLikelihood(FORMULA1,FORMULA2)
					)
				 &
					(
						( f__ProbabilityFn1(FORMULA2) = NUMBER1 )
					)
				 &
					(
						p__conditionalProbability(FORMULA1,FORMULA2,NUMBER2)
					)
				)
			)
			=>
			(
				p__greaterThan(NUMBER2,NUMBER1)
			)
		)
	)
).


fof( mergeA680, axiom,
	p__d__instance(c__decreasesLikelihood,c__ProbabilityRelation)
).


fof( mergeA681, axiom,
	p__d__instance(c__decreasesLikelihood,c__BinaryPredicate)
).


fof( mergeA682, axiom,
	p__d__instance(c__decreasesLikelihood,c__IrreflexiveRelation)
).


% 	($domain decreasesLikelihood 1 Formula)

% 	($domain decreasesLikelihood 2 Formula)


% ($documentation decreasesLikelihood EnglishLanguage "One of the basic &%ProbabilityRelations.  
% (&%decreasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is less 
% likely to be true if ?FORMULA1 is true.")


fof( mergeA685, axiom,
	(![FORMULA1,FORMULA2,NUMBER2,NUMBER1]: 
		(
			(
				(
					(
						p__d__instance(FORMULA2,c__Formula)
					)
				 &
					(
						p__d__instance(FORMULA1,c__Formula)
					)
				 &
					(
						p__d__instance(NUMBER1,c__RealNumber)
					)
				 &
					(
						p__d__instance(NUMBER2,c__RealNumber)
					)
				 &
					(
						p__decreasesLikelihood(FORMULA1,FORMULA2)
					)
				 &
					(
						( f__ProbabilityFn1(FORMULA2) = NUMBER1 )
					)
				 &
					(
						p__conditionalProbability(FORMULA1,FORMULA2,NUMBER2)
					)
				)
			)
			=>
			(
				p__lessThan(NUMBER2,NUMBER1)
			)
		)
	)
).


fof( mergeA686, axiom,
	p__d__instance(c__independentProbability,c__ProbabilityRelation)
).


fof( mergeA687, axiom,
	p__d__instance(c__independentProbability,c__BinaryPredicate)
).


fof( mergeA688, axiom,
	p__d__instance(c__independentProbability,c__SymmetricRelation)
).


% 	($domain independentProbability 1 Formula)

% 	($domain independentProbability 2 Formula)


% ($documentation independentProbability EnglishLanguage "One of the basic &%ProbabilityRelations.  
% (&%independentProbability ?FORMULA1 ?FORMULA2) means that the probabilities of 
% ?FORMULA1 and ?FORMULA2 being true are independent.") 


fof( mergeA691, axiom,
	(![FORMULA1,FORMULA2,NUMBER2,NUMBER1]: 
		(
			(
				(
					(
						p__d__instance(FORMULA2,c__Formula)
					)
				 &
					(
						p__d__instance(FORMULA1,c__Formula)
					)
				 &
					(
						p__d__instance(NUMBER1,c__RealNumber)
					)
				 &
					(
						p__d__instance(NUMBER2,c__RealNumber)
					)
				 &
					(
						p__independentProbability(FORMULA1,FORMULA2)
					)
				 &
					(
						( f__ProbabilityFn1(FORMULA2) = NUMBER1 )
					)
				 &
					(
						p__conditionalProbability(FORMULA1,FORMULA2,NUMBER2)
					)
				)
			)
			=>
			(
				( NUMBER2 = NUMBER1 )
			)
		)
	)
).


fof( mergeA692, axiom,
	(![FORMULA1,FORMULA2]: 
		(
			(
				(
					(
						p__d__instance(FORMULA1,c__Formula)
					)
				 &
					(
						p__d__instance(FORMULA2,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__increasesLikelihood(FORMULA1,FORMULA2)
				 |
					p__decreasesLikelihood(FORMULA1,FORMULA2)
				 |
					p__independentProbability(FORMULA1,FORMULA2)
				)
			)
		)
	)
).


fof( mergeA693, axiom,
	p__d__subclass(c__SpatialRelation,c__Relation)
).


fof( mergeA694, axiom,
	p__d__subclass(c__SpatialRelation,c__InheritableRelation)
).



% ($documentation SpatialRelation EnglishLanguage "The &%Class of &%Relations that are 
% spatial in a wide sense.  This &%Class includes mereological relations 
% and topological relations.")


fof( mergeA695, axiom,
	p__d__subclass(c__TemporalRelation,c__Relation)
).


fof( mergeA696, axiom,
	p__d__subclass(c__TemporalRelation,c__InheritableRelation)
).



% ($documentation TemporalRelation EnglishLanguage "The &%Class of temporal &%Relations.  
% This &%Class includes notions of (temporal) topology of intervals, 
% (temporal) schemata, and (temporal) extension.")


fof( mergeA697, axiom,
	p__d__subclass(c__IntentionalRelation,c__InheritableRelation)
).


fof( mergeA698, axiom,
	p__d__subclass(c__IntentionalRelation,c__Relation)
).



% ($documentation IntentionalRelation EnglishLanguage "The &%Class of &%Relations between 
% an &%Agent and one or more &%Entities, where the &%Relation requires that 
% the &%Agent have awareness of the &%Entity.")


% ($comment 
% ;; (=>
% ;;    (and
% ;;       ($instance ?REL IntentionalRelation)
% ;;       (?REL ?AGENT @ROW)
% ;;       (inList ?OBJ (ListFn @ROW)))
% ;;    (inScopeOfInterest ?AGENT ?OBJ))
% )

fof( mergeA699, axiom,
	p__d__instance(c__prefers,c__TernaryPredicate)
).


fof( mergeA700, axiom,
	p__d__instance(c__prefers,c__IntentionalRelation)
).


% 	($domain prefers 1 CognitiveAgent)

% 	($domain prefers 2 Formula)

% 	($domain prefers 3 Formula)


% ($documentation prefers EnglishLanguage "(&%prefers ?AGENT ?FORMULA1 ?FORMULA2) means that 
% &%CognitiveAgent ?AGENT prefers the state of affairs expressed by ?FORMULA1
% over the state of affairs expressed by ?FORMULA2 all things being equal.") 


fof( mergeA704, axiom,
	p__d__subclass(c__PropositionalAttitude,c__IntentionalRelation)
).


fof( mergeA705, axiom,
	p__d__subclass(c__PropositionalAttitude,c__AsymmetricRelation)
).


fof( mergeA706, axiom,
	p__d__subclass(c__PropositionalAttitude,c__InheritableRelation)
).



% ($documentation PropositionalAttitude EnglishLanguage "The &%Class of 
% &%IntentionalRelations where the &%Agent has awareness of a 
% &%Proposition.")


fof( mergeA707, axiom,
	(![REL,AGENT,FORMULA]: 
		(
			(
				(
					(
						p__d__instance(REL,c__PropositionalAttitude)
					)
				 &
					(
						p__d__holds3(REL,AGENT,FORMULA)
					)
				)
			)
			=>
			(
				p__d__instance(FORMULA,c__Formula)
			)
		)
	)
).


fof( mergeA708, axiom,
	p__d__subclass(c__ObjectAttitude,c__IntentionalRelation)
).


fof( mergeA709, axiom,
	p__d__subclass(c__ObjectAttitude,c__InheritableRelation)
).


fof( mergeA710, axiom,
	p__d__disjoint(c__ObjectAttitude,c__PropositionalAttitude)
).



% ($documentation ObjectAttitude EnglishLanguage "The &%Class of &%IntentionalRelations 
% where the &%Agent has awareness of an instance of &%Physical.")


fof( mergeA711, axiom,
	(![REL,AGENT,THING]: 
		(
			(
				(
					(
						p__d__instance(REL,c__BinaryRelation)
					)
				 &
					(
						p__d__instance(REL,c__ObjectAttitude)
					)
				 &
					(
						p__d__holds3(REL,AGENT,THING)
					)
				)
			)
			=>
			(
				p__d__instance(THING,c__Physical)
			)
		)
	)
).


fof( mergeA712, axiom,
	p__d__instance(c__inScopeOfInterest,c__BinaryPredicate)
).


fof( mergeA713, axiom,
	p__d__instance(c__inScopeOfInterest,c__IntentionalRelation)
).


% 	($domain inScopeOfInterest 1 CognitiveAgent)

% 	($domain inScopeOfInterest 2 Entity)


% ($documentation inScopeOfInterest EnglishLanguage "A very general &%Predicate.  
% (&%inScopeOfInterest ?AGENT ?ENTITY) means that ?ENTITY is within the 
% scope of interest of ?AGENT.  Note that the interest indicated can be 
% either positive or negative, i.e. the ?AGENT can have an interest in 
% avoiding or promoting ?ENTITY.")


fof( mergeA716, axiom,
	(![AGENT,OBJECT]: 
		(
			(
				p__d__instance(AGENT,c__CognitiveAgent)
			)
			=>
			(
				(
					(?[PROCESS]: 
						(
							(
								(
									p__d__instance(PROCESS,c__IntentionalProcess)
								)
							 &
								(
									p__agent(PROCESS,AGENT)
								)
							 &
								(
									p__patient(PROCESS,OBJECT)
								)
							)
						)
					)
				)
				<=>
				(
					p__inScopeOfInterest(AGENT,OBJECT)
				)
			)
		)
	)
).


fof( mergeA717, axiom,
	p__d__instance(c__needs,c__ObjectAttitude)
).


fof( mergeA718, axiom,
	p__d__instance(c__needs,c__BinaryPredicate)
).


fof( mergeA719, axiom,
	p__subrelation(c__needs,c__inScopeOfInterest)
).


% 	($domain needs 1 CognitiveAgent)

% 	($domain needs 2 Physical)


% ($documentation needs EnglishLanguage "(&%needs ?AGENT ?OBJECT) means that ?OBJECT is 
% physically required for the continued existence of ?AGENT.")


fof( mergeA722, axiom,
	(![AGENT,OBJECT]: 
		(
			(
				(
					(
						p__d__instance(OBJECT,c__Physical)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__needs(AGENT,OBJECT)
					)
				)
			)
			=>
			(
				p__wants(AGENT,OBJECT)
			)
		)
	)
).


fof( mergeA723, axiom,
	p__d__instance(c__wants,c__ObjectAttitude)
).


fof( mergeA724, axiom,
	p__d__instance(c__wants,c__BinaryPredicate)
).


fof( mergeA725, axiom,
	p__subrelation(c__wants,c__inScopeOfInterest)
).


fof( mergeA726, axiom,
	p__relatedInternalConcept(c__wants,c__desires)
).


% 	($domain wants 1 CognitiveAgent)

% 	($domain wants 2 Physical)


% ($documentation wants EnglishLanguage "(&%wants ?AGENT ?OBJECT) means that ?OBJECT is desired by ?AGENT, 
% i.e. ?AGENT believes that ?OBJECT will satisfy one of its goals.  Note that there is 
% no implication that what is wanted by an agent is not already possessed by the agent.")


fof( mergeA729, axiom,
	(![OBJ,AGENT]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Physical)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__wants(AGENT,OBJ)
					)
				)
			)
			=>
			(
				(?[PURP]: 
					(
						(
							(
								p__d__instance(PURP,c__Formula)
							)
						 &
							(
								p__hasPurposeForAgent(OBJ,PURP,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?AGENT ?OBJ)
% 		(=> 
% 			(and 
% 				(wants ?AGENT ?OBJ)
% 				($instance ?OBJ Object)
% 			)
% 			(desires ?AGENT (possesses ?AGENT ?OBJ))
% 		)
% 	)

fof( mergeA731, axiom,
	p__d__instance(c__desires,c__PropositionalAttitude)
).


fof( mergeA732, axiom,
	p__d__instance(c__desires,c__BinaryPredicate)
).


fof( mergeA733, axiom,
	p__subrelation(c__desires,c__inScopeOfInterest)
).


fof( mergeA734, axiom,
	p__relatedInternalConcept(c__desires,c__wants)
).


% 	($domain desires 1 CognitiveAgent)

% 	($domain desires 2 Formula)


% ($documentation desires EnglishLanguage "(&%desires ?AGENT ?FORMULA) means that ?AGENT wants 
% to bring about the state of affairs expressed by ?FORMULA.  Note that there 
% is no implication that what is desired by the agent is not already true.  
% Note too that &%desires is distinguished from &%wants only in that the former 
% is a &%PropositionalAttitude, while &%wants is an &%ObjectAttitude.")


fof( mergeA737, axiom,
	p__d__instance(c__considers,c__PropositionalAttitude)
).


fof( mergeA738, axiom,
	p__d__instance(c__considers,c__BinaryPredicate)
).


fof( mergeA739, axiom,
	p__subrelation(c__considers,c__inScopeOfInterest)
).


% 	($domain considers 1 CognitiveAgent)

% 	($domain considers 2 Formula)


% ($documentation considers EnglishLanguage "(&%considers ?AGENT ?FORMULA) means that ?AGENT 
% considers or wonders about the truth of the proposition expressed by 
% ?FORMULA.") 


fof( mergeA742, axiom,
	p__d__instance(c__believes,c__PropositionalAttitude)
).


fof( mergeA743, axiom,
	p__d__instance(c__believes,c__BinaryPredicate)
).


fof( mergeA744, axiom,
	p__subrelation(c__believes,c__inScopeOfInterest)
).


% 	($domain believes 1 CognitiveAgent)

% 	($domain believes 2 Formula)


% ($documentation believes EnglishLanguage "The epistemic predicate of belief.  
% (&%believes ?AGENT ?FORMULA) means that ?AGENT believes the proposition 
% expressed by ?FORMULA.")


% 	(forall (?AGENT ?FORMULA)
% 		(=> 
% 			(believes ?AGENT ?FORMULA)
% 			(exists (?TIME)
% 				(holdsDuring ?TIME (considers ?AGENT ?FORMULA))
% 			)
% 		)
% 	)

fof( mergeA748, axiom,
	p__d__instance(c__knows,c__PropositionalAttitude)
).


fof( mergeA749, axiom,
	p__d__instance(c__knows,c__BinaryPredicate)
).


fof( mergeA750, axiom,
	p__subrelation(c__knows,c__inScopeOfInterest)
).


% 	($domain knows 1 CognitiveAgent)

% 	($domain knows 2 Formula)


% ($documentation knows EnglishLanguage "The epistemic predicate of knowing.  (&%knows 
% ?AGENT ?FORMULA) means that ?AGENT knows the proposition expressed by 
% ?FORMULA.  Note that &%knows entails conscious awareness, so this 
% &%Predicate cannot be used to express tacit or subconscious or 
% unconscious knowledge.")


fof( mergeA753, axiom,
	(![AGENT,FORMULA]: 
		(
			(
				(
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__knows(AGENT,FORMULA)
					)
				)
			)
			=>
			(
				p__believes(AGENT,FORMULA)
			)
		)
	)
).


fof( mergeA754, axiom,
	(![AGENT,FORMULA]: 
		(
			(
				(
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__knows(AGENT,FORMULA)
					)
				)
			)
			=>
			(
				p__truth(FORMULA,c__True)
			)
		)
	)
).


fof( mergeA755, axiom,
	p__d__subclass(c__TernaryRelation,c__Relation)
).


% ($comment 
% ;; ($subclass TernaryRelation InheritableRelation)
% )

% 	($domain TernaryRelation 1 $ObjectOrClass)

% 	($domain TernaryRelation 2 $ObjectOrClass)

% 	($domain TernaryRelation 3 $ObjectOrClass)

% 	($domain $holds4 1 TernaryRelation)

% 	($domain $holds4 2 $ObjectOrClass)

% 	($domain $holds4 3 $ObjectOrClass)

% 	($domain $holds4 4 $ObjectOrClass)

% 	($schema TernaryRelation $holds4 3 !REL (forall ([|] ?VAR1 ([|] ?VAR2 ([|] ?VAR3 []))) (equiv ($holds4 !REL ?VAR1 ?VAR2 ?VAR3) (!REL ?VAR1 ?VAR2 ?VAR3))))


% ($documentation TernaryRelation EnglishLanguage "&%TernaryRelations relate three items.  
% The two &%subclasses of &%TernaryRelation are &%TernaryPredicate and 
% &%BinaryFunction.")


fof( mergeA764, axiom,
	p__d__subclass(c__QuaternaryRelation,c__Relation)
).


% ($comment 
% ;; ($subclass QuaternaryRelation InheritableRelation)
% )

% 	($domain QuaternaryRelation 1 $ObjectOrClass)

% 	($domain QuaternaryRelation 2 $ObjectOrClass)

% 	($domain QuaternaryRelation 3 $ObjectOrClass)

% 	($domain QuaternaryRelation 4 $ObjectOrClass)

% 	($domain $holds5 1 QuaternaryRelation)

% 	($domain $holds5 2 $ObjectOrClass)

% 	($domain $holds5 3 $ObjectOrClass)

% 	($domain $holds5 4 $ObjectOrClass)

% 	($domain $holds5 5 $ObjectOrClass)

% 	($schema QuaternaryRelation $holds5 4 !REL (forall ([|] ?VAR1 ([|] ?VAR2 ([|] ?VAR3 ([|] ?VAR4 [])))) (equiv ($holds5 !REL ?VAR1 ?VAR2 ?VAR3 ?VAR4) (!REL ?VAR1 ?VAR2 ?VAR3 ?VAR4))))


% ($documentation QuaternaryRelation EnglishLanguage "&%QuaternaryRelations relate four 
% items.  The two &%subclasses of &%QuaternaryRelation are 
% &%QuaternaryPredicate and &%TernaryFunction.")


fof( mergeA775, axiom,
	p__d__subclass(c__QuintaryRelation,c__Relation)
).


% ($comment 
% ;; ($subclass QuintaryRelation InheritableRelation)
% )

% 	($domain QuintaryRelation 1 $ObjectOrClass)

% 	($domain QuintaryRelation 2 $ObjectOrClass)

% 	($domain QuintaryRelation 3 $ObjectOrClass)

% 	($domain QuintaryRelation 4 $ObjectOrClass)

% 	($domain QuintaryRelation 5 $ObjectOrClass)

% 	($domain $holds6 1 QuintaryRelation)

% 	($domain $holds6 2 $ObjectOrClass)

% 	($domain $holds6 3 $ObjectOrClass)

% 	($domain $holds6 4 $ObjectOrClass)

% 	($domain $holds6 5 $ObjectOrClass)

% 	($domain $holds6 6 $ObjectOrClass)

% 	($schema QuintaryRelation $holds6 5 !REL (forall ([|] ?VAR1 ([|] ?VAR2 ([|] ?VAR3 ([|] ?VAR4 ([|] ?VAR5 []))))) (equiv ($holds6 !REL ?VAR1 ?VAR2 ?VAR3 ?VAR4 ?VAR5) (!REL ?VAR1 ?VAR2 ?VAR3 ?VAR4 ?VAR5))))


% ($documentation QuintaryRelation EnglishLanguage "&%QuintaryRelations relate five items.  
% The two &%subclasses of &%QuintaryRelation are &%QuintaryPredicate and 
% &%QuaternaryFunction.")


fof( mergeA788, axiom,
	p__d__subclass(c__List,c__Relation)
).



% ($documentation List EnglishLanguage "Every &%List is a particular ordered n-tuple of 
% items.  Generally speaking, &%Lists are created by means of the &%ListFn 
% &%Function, which takes any number of items as arguments and returns a 
% &%List with the items in the same order.  Anything, including other 
% &%Lists, may be an item in a &%List.  Note too that &%Lists are 
% extensional - two lists that have the same items in the same order are 
% identical.  Note too that a &%List may contain no items.  In that case, 
% the &%List is the &%NullList.")


% ($comment 
% ;; (=>
% ;;  (and 
% ;;    ($instance ?LIST List)
% ;;    (not 
% ;;      ($instance ?LIST NullList)))
% ;;  (exists (?NUMBER1 ?ITEM1)
% ;;    (and
% ;;      (not 
% ;;        (equal (ListOrderFn ?LIST ?NUMBER1) ?ITEM1))
% ;;      (forall (?NUMBER2)
% ;;        (=>
% ;;          (and
% ;;            ($instance ?NUMBER2 PositiveInteger)
% ;;            (lessThan ?NUMBER2 ?NUMBER1))
% ;;          (exists (?ITEM2)
% ;;            (equal (ListOrderFn ?LIST ?NUMBER2) ?ITEM2)))))))
% )

fof( mergeA789, axiom,
	p__d__subclass(c__UniqueList,c__List)
).



% ($documentation UniqueList EnglishLanguage "A &%List in which no item appears more than once, 
% i.e. a &%List for which there are no distinct numbers ?NUMBER1 and ?NUMBER2 
% such that (&%ListOrderFn ?LIST ?NUMBER1) and (&%ListOrderFn ?LIST ?NUMBER2) 
% return the same value.")


% 	(forall (?LIST)
% 		(=> 
% 			($instance ?LIST UniqueList)
% 			(forall (?NUMBER1 ?NUMBER2)
% 				(=> 
% 					(equal (ListOrderFn ?LIST ?NUMBER1) (ListOrderFn ?LIST ?NUMBER2))
% 					(equal ?NUMBER1 ?NUMBER2)
% 				)
% 			)
% 		)
% 	)

fof( mergeA791, axiom,
	p__d__instance(c__NullList,c__List)
).



% ($documentation NullList EnglishLanguage "The &%List that has no items.  The uniqueness of 
% &%NullList follows from the extensionality of &%Lists, i.e. the fact that 
% two &%Lists with the same items in the same order are identical.")


fof( mergeA792, axiom,
	(![ITEM]: 
		(
			~ (
				p__inList(ITEM,c__NullList)
			)
		)
	)
).


% ($comment 
% ;; (<=>
% ;;   (equal ?LIST NullList)
% ;;   (and
% ;;      ($instance ?LIST List)
% ;;      (not 
% ;;         (exists (?ITEM)
% ;;            (inList ?ITEM ?LIST)))))
% )

fof( mergeA793, axiom,
	p__d__instance(c__ListFn,c__Function)
).


fof( mergeA794, axiom,
	p__d__instance(c__ListFn,c__VariableArityRelation)
).


% ($comment 
% ;; ($instance ListFn TotalValuedRelation) - appears to be a contradiction with VariableArityRelation
% )

% 	($range ListFn List)


% ($documentation ListFn EnglishLanguage "A &%Function that takes any number of arguments and 
% returns the &%List containing those arguments in exactly the same order.")

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; exhaustiveDecomposition is already defined in predefinitions
% ;;
% ;;(=>
% ;;   (exhaustiveDecomposition ?CLASS @ROW)
% ;;   (forall (?OBJ)
% ;;      (=>
% ;;         ($instance ?OBJ ?CLASS)
% ;;         (exists (?ITEM)
% ;;            (and
% ;;               (inList ?ITEM (ListFn @ROW))
% ;;               ($instance ?OBJ ?ITEM))))))
% )

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; disjointDecomposition is already defined in predefinitions
% ;;
% ;;(=>
% ;;   (disjointDecomposition ?CLASS @ROW)
% ;;   (forall (?ITEM)
% ;;      (=>
% ;;         (inList ?ITEM (ListFn @ROW))
% ;;         ($subclass ?ITEM ?CLASS))))
% )

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; disjointDecomposition is already defined in predefinitions
% ;;
% ;;(=>
% ;;   (disjointDecomposition ?CLASS @ROW)
% ;;   (forall (?ITEM1 ?ITEM2)
% ;;      (=>
% ;;         (and
% ;;            (inList ?ITEM1 (ListFn @ROW))
% ;;            (inList ?ITEM2 (ListFn @ROW))
% ;;            (not
% ;;               (equal ?ITEM1 ?ITEM2)))
% ;;         ($disjoint ?ITEM1 ?ITEM2))))
% )

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; disjointDecomposition is already defined in predefinitions
% ;;
% ;;(<=>
% ;;  (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3)
% ;;  (and
% ;;    ($disjoint ?ROW1 ?ROW2)
% ;;    ($disjoint ?ROW2 ?ROW3)
% ;;    ($disjoint ?ROW3 ?ROW1)))
% )

fof( mergeA796, axiom,
	p__d__instance(c__ListOrderFn,c__BinaryFunction)
).


fof( mergeA797, axiom,
	p__d__instance(c__ListOrderFn,c__PartialValuedRelation)
).


% 	($domain ListOrderFn 1 List)

% 	($domain ListOrderFn 2 PositiveInteger)

% 	($range ListOrderFn Entity)


% ($documentation ListOrderFn EnglishLanguage "(&%ListOrderFn ?LIST ?NUMBER) denotes the item 
% that is in the ?NUMBER position in the &%List ?LIST.  For example, 
% (&%ListOrderFn (&%ListFn &%Monday &%Tuesday &%Wednesday) 2) would return the 
% value &%Tuesday.")


% ($comment 
% ;; (=>
% ;;   (and
% ;;      ($instance ?LIST1 List)
% ;;      (not 
% ;;        (equal ?LIST1 NullList))
% ;;      (not 
% ;;        (equal ?LIST2 NullList))
% ;;      ($instance ?LIST2 List)
% ;;      (forall (?NUMBER)
% ;;         (equal (ListOrderFn ?LIST1 ?NUMBER) (ListOrderFn ?LIST2 ?NUMBER))))
% ;;   (equal ?LIST1 ?LIST2))
% )

% ($comment 
% ;; (=>
% ;;    (and
% ;;       (domain ?REL ?NUMBER ?CLASS)
% ;;       (?REL @ROW))
% ;;    ($instance (ListOrderFn (ListFn @ROW) ?NUMBER) ?CLASS))
% ;;
% ;; (=>
% ;;    (and
% ;;       (domainSubclass ?REL ?NUMBER ?CLASS)
% ;;       (?REL @ROW))
% ;;    ($subclass (ListOrderFn (ListFn @ROW) ?NUMBER) ?CLASS))
% )

fof( mergeA801, axiom,
	p__d__instance(c__ListLengthFn,c__UnaryFunction)
).


fof( mergeA802, axiom,
	p__d__instance(c__ListLengthFn,c__TotalValuedRelation)
).


% 	($domain ListLengthFn 1 List)

% 	($range ListLengthFn NonnegativeInteger)


% ($documentation ListLengthFn EnglishLanguage "A &%Function that takes a &%List as its sole 
% argument and returns the number of items in the &%List.  For example, 
% (&%ListLengthFn (&%ListFn &%Monday &%Tuesday &%Wednesday)) would return the 
% value 3.")


% ($comment 
% ;; (=>
% ;;   (and
% ;;      (equal (ListLengthFn ?LIST) ?NUMBER1)
% ;;      ($instance ?LIST List)
% ;;      (not 
% ;;        (equal ?LIST NullList))
% ;;
% ;;     ($instance ?NUMBER1 PositiveInteger))
% ;;
% ;;   (forall (?NUMBER2)
% ;;      (<=>
% ;;         (exists (?ITEM)
% ;;            (and
% ;;               (equal (ListOrderFn ?LIST ?NUMBER2) ?ITEM)
% ;;               (inList ?ITEM ?LIST)))
% ;;         (lessThanOrEqualTo ?NUMBER2 ?NUMBER1))))
% )

% 	(forall (@ROW ?ITEM)
% 		(equal (ListLengthFn (ListFn @ROW ?ITEM)) (SuccessorFn (ListLengthFn (ListFn @ROW))))
% 	)

% 	(forall (@ROW ?ITEM)
% 		(equal (ListOrderFn (ListFn @ROW ?ITEM) (ListLengthFn (ListFn @ROW ?ITEM))) ?ITEM)
% 	)

% ($comment 
% ;; (=>
% ;;    (valence ?REL ?NUMBER)
% ;;    (forall (@ROW)
% ;;       (=>
% ;;          (?REL @ROW)
% ;;          (equal (ListLengthFn (ListFn @ROW)) ?NUMBER))))
% )

% ($comment 
% ;; (=>
% ;;   (and
% ;;      (equal (ListLengthFn ?LIST1) ?NUMBER)
% ;;      ($instance ?LIST List)
% ;;      (not 
% ;;        (equal ?LIST NullList))
% ;;      ($instance ?NUMBER1 PositiveInteger))
% ;;   (exists (?LIST2 ?ITEM)
% ;;      (and
% ;;         (initialList ?LIST1 ?LIST2)
% ;;         (equal (SuccessorFn ?NUMBER) (ListLengthFn ?LIST2))
% ;;         (equal (ListOrderFn ?LIST2 (SuccessorFn ?NUMBER)) ?ITEM))))
% )

fof( mergeA807, axiom,
	p__d__instance(c__ListConcatenateFn,c__BinaryFunction)
).


fof( mergeA808, axiom,
	p__d__instance(c__ListConcatenateFn,c__TotalValuedRelation)
).


% 	($domain ListConcatenateFn 1 List)

% 	($domain ListConcatenateFn 2 List)

% 	($range ListConcatenateFn List)


% ($documentation ListConcatenateFn EnglishLanguage "A &%Function that returns the concatenation 
% of the two &%Lists that are given as arguments.  For example, the value of 
% (&%ListConcatenateFn (&%ListFn &%Monday &%Tuesday) (&%ListFn &%Wednesday 
% &%Thursday)) would be (&%ListFn &%Monday &%Tuesday &%Wednesday &%Thursday).")


% ($comment 
% ;; removed to solve an obscure contradiction, but needs to be reexamined
% ;;
% ;;(<=>
% ;;   (and 
% ;;     (equal ?LIST3 (ListConcatenateFn ?LIST1 ?LIST2))
% ;;     (not 
% ;;       (equal ?LIST1 NullList))
% ;;     (not 
% ;;       (equal ?LIST2 NullList)))
% ;;   (forall (?NUMBER1 ?NUMBER2)
% ;;      (=>
% ;;         (and
% ;;            (lessThanOrEqualTo ?NUMBER1 (ListLengthFn ?LIST1))
% ;;            (lessThanOrEqualTo ?NUMBER2 (ListLengthFn ?LIST2))
% ;;            ($instance ?NUMBER1 PositiveInteger)
% ;;            ($instance ?NUMBER2 PositiveInteger))
% ;;         (and
% ;;            (equal (ListOrderFn ?LIST3 ?NUMBER1) (ListOrderFn ?LIST1 ?NUMBER1))
% ;;            (equal (ListOrderFn ?LIST3 (AdditionFn (ListLengthFn ?LIST1) ?NUMBER2)) (ListOrderFn ?LIST2 ?NUMBER2))))))
% )

fof( mergeA812, axiom,
	p__d__instance(c__inList,c__BinaryPredicate)
).


fof( mergeA813, axiom,
	p__d__instance(c__inList,c__IrreflexiveRelation)
).


fof( mergeA814, axiom,
	p__d__instance(c__inList,c__AsymmetricRelation)
).


% 	($domain inList 1 Entity)

% 	($domain inList 2 List)


% ($documentation inList EnglishLanguage "The analog of &%element and &%instance for &%Lists.  
% (&%inList ?OBJ ?LIST) means that ?OBJ is in the &%List ?LIST.  For example, 
% (&%inList &%Tuesday (&%ListFn &%Monday &%Tuesday &%Wednesday)) would be true.")


% 	(forall (?LIST ?ITEM)
% 		(=> 
% 			(inList ?ITEM ?LIST)
% 			(exists (?NUMBER)
% 				(equal (ListOrderFn ?LIST ?NUMBER) ?ITEM)
% 			)
% 		)
% 	)

fof( mergeA818, axiom,
	p__d__instance(c__subList,c__BinaryPredicate)
).


fof( mergeA819, axiom,
	p__d__instance(c__subList,c__PartialOrderingRelation)
).


% 	($domain subList 1 List)

% 	($domain subList 2 List)


% ($documentation subList EnglishLanguage "(&%subList ?LIST1 ?LIST2) means that ?LIST1 is a 
% sublist of ?LIST2, i.e. every element of ?LIST1 is an element of ?LIST2 and 
% the elements that are common to both &%Lists have the same order in both 
% &%Lists.  Elements that are common to both Lists and are consecutive in one 
% list must also be consecutive in the other list. (Therefore - the list of 
% prime numbers smaller than 10 [1 2 3 5 7] is not a subList of the 
% natural numbers smaller than 10 [1 2 3 4 5 6 7 8 9]).")


% ($comment 
% ;; (=>
% ;;   (and
% ;;     (subList ?LIST1 ?LIST2)
% ;;     (not 
% ;;       (equal ?LIST1 NullList))
% ;;     (not 
% ;;       (equal ?LIST2 NullList)))
% ;;   (forall (?ITEM)
% ;;      (=>
% ;;         (inList ?ITEM ?LIST1)
% ;;         (inList ?ITEM ?LIST2))))
% ;;
% ;;(=>
% ;;   (and
% ;;     (subList ?LIST1 ?LIST2)
% ;;     (not 
% ;;       (equal ?LIST1 NullList))
% ;;     (not 
% ;;       (equal ?LIST2 NullList)))
% ;;   (exists (?NUMBER3)
% ;;      (forall (?ITEM)
% ;;         (=>
% ;;            (inList ?ITEM ?LIST1)
% ;;            (exists (?NUMBER1 ?NUMBER2)
% ;;               (and
% ;;                  (equal (ListOrderFn ?LIST1 ?NUMBER1) ?ITEM)
% ;;                  (equal (ListOrderFn ?LIST2 ?NUMBER2) ?ITEM)
% ;;                  (equal ?NUMBER2 (AdditionFn ?NUMBER1 ?NUMBER3))))))))
% )

fof( mergeA822, axiom,
	p__d__instance(c__initialList,c__BinaryPredicate)
).


fof( mergeA823, axiom,
	p__d__instance(c__initialList,c__PartialOrderingRelation)
).


fof( mergeA824, axiom,
	p__subrelation(c__initialList,c__subList)
).



% ($documentation initialList EnglishLanguage "(&%initialList ?LIST1 ?LIST2) means that ?LIST1 
% is a &%subList of ?LIST2 and (&%ListOrderFn ?LIST1 ?NUMBER) returns the same 
% value as (&%ListOrderFn ?LIST2 ?NUMBER) for all of the values of ?NUMBER over 
% which (&%ListOrderFn ?LIST1 ?NUMBER) is defined.")


% ($comment 
% ;; (=>
% ;;   (and 
% ;;     (initialList ?LIST1 ?LIST2) 
% ;;     (not 
% ;;       (equal ?LIST1 NullList))
% ;;     (not 
% ;;       (equal ?LIST2 NullList)))
% ;;   (forall (?NUMBER1 ?NUMBER2)
% ;;      (=>
% ;;         (and
% ;;            (equal (ListLengthFn ?LIST1) ?NUMBER1)
% ;;            (lessThanOrEqualTo ?NUMBER2 ?NUMBER1)) 
% ;;         (equal (ListOrderFn ?LIST1 ?NUMBER2) (ListOrderFn ?LIST2 ?NUMBER2)))))
% )

% 	(forall (@ROW ?ITEM)
% 		(initialList (ListFn @ROW) (ListFn @ROW ?ITEM))
% 	)

fof( mergeA826, axiom,
	p__d__instance(c__identicalListItems,c__BinaryPredicate)
).


fof( mergeA827, axiom,
	p__d__instance(c__identicalListItems,c__EquivalenceRelation)
).


% 	($domain identicalListItems 1 List)

% 	($domain identicalListItems 2 List)


% ($documentation identicalListItems EnglishLanguage "(&%identicalListItems ?LIST1 ?LIST2) 
% means that ?LIST1 and ?LIST2 have exactly the same items in their 
% respective lists.  Although ?LIST1 and ?LIST2 are required to share 
% exactly the same items, they may order these items differently.") 


% ($comment 
% ;; (=>
% ;;   (and 
% ;;     (identicalListItems ?LIST1 ?LIST2)
% ;;     (not 
% ;;       (equal ?LIST1 NullList))
% ;;     (not 
% ;;       (equal ?LIST2 NullList)))
% ;;   (<=>
% ;;      (inList ?ITEM ?LIST1)
% ;;      (inList ?ITEM ?LIST2)))
% )

fof( mergeA830, axiom,
	p__d__subclass(c__Predicate,c__Relation)
).


% ($comment 
% ;; ($subclass Predicate InheritableRelation)
% )


% ($documentation Predicate EnglishLanguage "A &%Predicate is a sentence-forming &%Relation.  
% Each tuple in the &%Relation is a finite, ordered sequence of objects.  
% The fact that a particular tuple is an element of a &%Predicate is denoted 
% by '(*predicate* arg_1 arg_2 .. arg_n)', where the arg_i are the 
% objects so related.  In the case of &%BinaryPredicates, the fact can
% be read as `arg_1 is *predicate* arg_2' or `a *predicate* of
% arg_1 is arg_2'.")


fof( mergeA831, axiom,
	p__d__subclass(c__Function,c__SingleValuedRelation)
).


% ($comment 
% ;; ($subclass Function InheritableRelation)
% )


% ($documentation Function EnglishLanguage "A &%Function is a term-forming &%Relation that 
% maps from a n-tuple of arguments to a range and that associates this 
% n-tuple with at most one range element.  Note that the range is a &%SetOrClass, 
% and each element of the range is an instance of the &%SetOrClass.")


fof( mergeA832, axiom,
	p__d__subclass(c__UnaryFunction,c__Function)
).


fof( mergeA833, axiom,
	p__d__subclass(c__UnaryFunction,c__BinaryRelation)
).


% ($comment 
% ;; ($subclass UnaryFunction InheritableRelation)
% )


% ($documentation UnaryFunction EnglishLanguage "The &%Class of &%Functions that require a 
% single argument.")


fof( mergeA834, axiom,
	(![FUNCTION]: 
		(
			(
				p__d__instance(FUNCTION,c__UnaryFunction)
			)
			=>
			(
				p__valence(FUNCTION,c__1)
			)
		)
	)
).


fof( mergeA835, axiom,
	p__d__subclass(c__OneToOneFunction,c__UnaryFunction)
).



% ($documentation OneToOneFunction EnglishLanguage "The &%Class of &%UnaryFunctions which 
% are one to one.  A function F is one to one just in case for all X, Y in the 
% domain of F, if X is not identical to Y, then F(X) is not identical to F(Y).")


% 	(forall (?CLASS ?FUN)
% 		(=> 
% 			($instance ?FUN OneToOneFunction)
% 			(forall (?ARG1 ?ARG2)
% 				(=> 
% 					(and 
% 						(domain ?FUN 1 ?CLASS)
% 						($instance ?ARG1 ?CLASS)
% 						($instance ?ARG2 ?CLASS)
% 						(not 
% 							(equal ?ARG1 ?ARG2)
% 						)
% 					)
% 					(not 
% 						(equal (AssignmentFn ?FUN ?ARG1) (AssignmentFn ?FUN ?ARG2))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA837, axiom,
	p__d__subclass(c__SequenceFunction,c__OneToOneFunction)
).



% ($documentation SequenceFunction EnglishLanguage "The &%Class of &%OneToOneFunctions whose range 
% is a subclass of the &%PositiveIntegers.")


fof( mergeA838, axiom,
	(![SEQ,CLASS]: 
		(
			(
				(
					(
						p__d__instance(CLASS,c__SetOrClass)
					)
				 &
					(
						p__d__instance(SEQ,c__SequenceFunction)
					)
				 &
					(
						p__range(SEQ,CLASS)
					)
				)
			)
			=>
			(
				p__d__subclass(CLASS,c__Integer)
			)
		)
	)
).


fof( mergeA839, axiom,
	p__d__subclass(c__BinaryFunction,c__Function)
).


fof( mergeA840, axiom,
	p__d__subclass(c__BinaryFunction,c__TernaryRelation)
).


% ($comment 
% ;; ($subclass BinaryFunction InheritableRelation)
% )


% ($documentation BinaryFunction EnglishLanguage "The &%Class of &%Functions that require 
% two arguments.")


fof( mergeA841, axiom,
	(![FUNCTION]: 
		(
			(
				p__d__instance(FUNCTION,c__BinaryFunction)
			)
			=>
			(
				p__valence(FUNCTION,c__2)
			)
		)
	)
).


fof( mergeA842, axiom,
	p__d__subclass(c__AssociativeFunction,c__BinaryFunction)
).



% ($documentation AssociativeFunction EnglishLanguage "A &%BinaryFunction is associative if 
% bracketing has no effect on the value returned by the &%Function.  More 
% precisely, a &%Function ?FUNCTION is associative just in case 
% (?FUNCTION ?INST1 (?FUNCTION ?INST2 ?INST3)) is equal to 
% (?FUNCTION (?FUNCTION ?INST1 ?INST2) ?INST3), for all ?INST1, ?INST2, 
% and ?INST3.")


% 	(forall (?CLASS ?FUNCTION)
% 		(=> 
% 			($instance ?FUNCTION AssociativeFunction)
% 			(forall (?INST1 ?INST2 ?INST3)
% 				(=> 
% 					(and 
% 						(domain ?FUNCTION 1 ?CLASS)
% 						($instance ?INST1 ?CLASS)
% 						($instance ?INST2 ?CLASS)
% 						($instance ?INST3 ?CLASS)
% 					)
% 					(equal (AssignmentFn ?FUNCTION ?INST1 (AssignmentFn ?FUNCTION ?INST2 ?INST3)) (AssignmentFn ?FUNCTION (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?INST3))
% 				)
% 			)
% 		)
% 	)

fof( mergeA844, axiom,
	p__d__subclass(c__CommutativeFunction,c__BinaryFunction)
).



% ($documentation CommutativeFunction EnglishLanguage "A &%BinaryFunction is commutative if 
% the ordering of the arguments of the function has no effect on the value 
% returned by the function.  More precisely, a function ?FUNCTION is 
% commutative just in case (?FUNCTION ?INST1 ?INST2) is equal to (?FUNCTION 
% ?INST2 ?INST1), for all ?INST1 and ?INST2.")


% 	(forall (?CLASS ?FUNCTION)
% 		(=> 
% 			($instance ?FUNCTION CommutativeFunction)
% 			(forall (?INST1 ?INST2)
% 				(=> 
% 					(and 
% 						(domain ?FUNCTION 1 ?CLASS)
% 						($instance ?INST1 ?CLASS)
% 						($instance ?INST2 ?CLASS)
% 					)
% 					(equal (AssignmentFn ?FUNCTION ?INST1 ?INST2) (AssignmentFn ?FUNCTION ?INST2 ?INST1))
% 				)
% 			)
% 		)
% 	)

fof( mergeA846, axiom,
	p__d__subclass(c__TernaryFunction,c__Function)
).


fof( mergeA847, axiom,
	p__d__subclass(c__TernaryFunction,c__QuaternaryRelation)
).


% ($comment 
% ;; ($subclass TernaryFunction InheritableRelation)
% )


% ($documentation TernaryFunction EnglishLanguage "The &%Class of &%Functions that require 
% exactly three arguments.")


fof( mergeA848, axiom,
	(![FUNCTION]: 
		(
			(
				p__d__instance(FUNCTION,c__TernaryFunction)
			)
			=>
			(
				p__valence(FUNCTION,c__3)
			)
		)
	)
).


fof( mergeA849, axiom,
	p__d__subclass(c__QuaternaryFunction,c__Function)
).


fof( mergeA850, axiom,
	p__d__subclass(c__QuaternaryFunction,c__QuintaryRelation)
).


% ($comment 
% ;; ($subclass QuaternaryFunction InheritableRelation)
% )


% ($documentation QuaternaryFunction EnglishLanguage "The &%Class of &%Functions that require 
% exactly four arguments.")


fof( mergeA851, axiom,
	(![FUNCTION]: 
		(
			(
				p__d__instance(FUNCTION,c__QuaternaryFunction)
			)
			=>
			(
				p__valence(FUNCTION,c__4)
			)
		)
	)
).


fof( mergeA852, axiom,
	p__d__subclass(c__ContinuousFunction,c__Function)
).



% ($documentation ContinuousFunction EnglishLanguage "&%Functions which are continuous.  
% This concept is taken as primitive until representations for limits 
% are devised.")


fof( mergeA853, axiom,
	p__d__subclass(c__BinaryPredicate,c__Predicate)
).


fof( mergeA854, axiom,
	p__d__subclass(c__BinaryPredicate,c__BinaryRelation)
).


% ($comment 
% ;; ($subclass BinaryPredicate InheritableRelation)
% )


% ($documentation BinaryPredicate EnglishLanguage "A &%Predicate relating two items - its 
% valence is two.")


fof( mergeA855, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__BinaryPredicate)
			)
			=>
			(
				p__valence(REL,c__2)
			)
		)
	)
).


fof( mergeA856, axiom,
	p__d__subclass(c__TernaryPredicate,c__Predicate)
).


fof( mergeA857, axiom,
	p__d__subclass(c__TernaryPredicate,c__TernaryRelation)
).


% ($comment 
% ;; ($subclass TernaryPredicate InheritableRelation)
% )


% ($documentation TernaryPredicate EnglishLanguage "The &%Class of &%Predicates that require 
% exactly three arguments.")


fof( mergeA858, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__TernaryPredicate)
			)
			=>
			(
				p__valence(REL,c__3)
			)
		)
	)
).


fof( mergeA859, axiom,
	p__d__subclass(c__QuaternaryPredicate,c__Predicate)
).


fof( mergeA860, axiom,
	p__d__subclass(c__QuaternaryPredicate,c__QuaternaryRelation)
).


% ($comment 
% ;; ($subclass QuaternaryPredicate InheritableRelation)
% )


% ($documentation QuaternaryPredicate EnglishLanguage "The &%Class of &%Predicates that 
% require four arguments.")


fof( mergeA861, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__QuaternaryPredicate)
			)
			=>
			(
				p__valence(REL,c__4)
			)
		)
	)
).


fof( mergeA862, axiom,
	p__d__subclass(c__QuintaryPredicate,c__Predicate)
).


fof( mergeA863, axiom,
	p__d__subclass(c__QuintaryPredicate,c__QuintaryRelation)
).


% ($comment 
% ;; ($subclass QuintaryPredicate InheritableRelation)
% )


% ($documentation QuintaryPredicate EnglishLanguage "The &%Class of &%Predicates that 
% require five arguments.")


fof( mergeA864, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__QuintaryPredicate)
			)
			=>
			(
				p__valence(REL,c__5)
			)
		)
	)
).


fof( mergeA865, axiom,
	p__d__subclass(c__VariableArityRelation,c__Relation)
).



% ($documentation VariableArityRelation EnglishLanguage "The &%Class of &%Relations that 
% do not have a fixed number of arguments.")


fof( mergeA866, axiom,
	(![REL]: 
		(
			(
				p__d__instance(REL,c__VariableArityRelation)
			)
			=>
			(
				(![INT]: 
					(
						(
							~ (
								p__d__instance(INT,c__PositiveInteger)
							)
						 |
							~ (
								p__valence(REL,INT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA867, axiom,
	p__d__subclass(c__RelationExtendedToQuantities,c__Relation)
).


fof( mergeA868, axiom,
	p__d__subclass(c__RelationExtendedToQuantities,c__InheritableRelation)
).



% ($documentation RelationExtendedToQuantities EnglishLanguage "A 
% &%RelationExtendedToQuantities is a &%Relation that, when it is true on 
% a sequence of arguments that are &%RealNumbers, it is also true on a 
% sequence of instances of &%ConstantQuantity with those magnitudes in some unit of 
% measure.  For example, the &%lessThan relation is extended to quantities.  
% This means that for all pairs of quantities ?QUANTITY1 and ?QUANTITY2, 
% (&%lessThan ?QUANTITY1 ?QUANTITY2) if and only if, for some ?NUMBER1, 
% ?NUMBER2, and ?UNIT, ?QUANTITY1 = (&%MeasureFn ?NUMBER1 ?UNIT), 
% ?QUANTITY2 = (&%MeasureFn ?NUMBER2 ?UNIT), and (&%lessThan ?NUMBER1 ?NUMBER2), 
% for all units ?UNIT on which ?QUANTITY1 and ?QUANTITY2 can be measured.  
% Note that, when a &%RelationExtendedToQuantities is extended from 
% &%RealNumbers to instances of &%ConstantQuantity, the &%ConstantQuantity must be 
% measured along the same physical dimension.")


fof( mergeA869, axiom,
	p__d__subclass(c__LogicalOperator,c__Predicate)
).



% ($documentation LogicalOperator EnglishLanguage "This &%Class comprises all 
% of the logical operators (viz. 'and', 'or', 'not', '=>', and '<=>').")


fof( mergeA870, axiom,
	p__d__subclass(c__Proposition,c__Abstract)
).



% ($documentation Proposition EnglishLanguage "&%Propositions are &%Abstract entities that 
% express a complete thought or a set of such thoughts.  As an example, 
% the formula '($instance Yojo Cat)' expresses the &%Proposition that the 
% entity named Yojo is an element of the &%Class of Cats.  Note that 
% propositions are not restricted to the content expressed by individual 
% sentences of a &%Language.  They may encompass the content expressed by 
% theories, books, and even whole libraries.  It is important to distinguish 
% &%Propositions from the &%ContentBearingObjects that express them.  A 
% &%Proposition is a piece of information, e.g. that the cat is on the mat, 
% but a &%ContentBearingObject is an &%Object that represents this information.  
% A &%Proposition is an abstraction that may have multiple representations: 
% strings, sounds, icons, etc.  For example, the &%Proposition that the cat is 
% on the mat is represented here as a string of graphical characters displayed 
% on a monitor and/or printed on paper, but it can be represented by a sequence 
% of sounds or by some non-latin alphabet or by some cryptographic form")


fof( mergeA871, axiom,
	p__d__instance(c__closedOn,c__BinaryPredicate)
).


fof( mergeA872, axiom,
	p__d__instance(c__closedOn,c__AsymmetricRelation)
).


% 	($domain closedOn 1 Function)

% 	($domain closedOn 2 SetOrClass)


% ($documentation closedOn EnglishLanguage "A &%BinaryFunction is closed on a &%SetOrClass 
% if it is defined for all instances of the &%SetOrClass and its value is 
% always an instance of the &%SetOrClass.")


% 	(forall (?FUNCTION ?CLASS)
% 		(=> 
% 			(and 
% 				(closedOn ?FUNCTION ?CLASS)
% 				($instance ?FUNCTION UnaryFunction)
% 			)
% 			(forall (?INST)
% 				(=> 
% 					($instance ?INST ?CLASS)
% 					($instance (AssignmentFn ?FUNCTION ?INST) ?CLASS)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?FUNCTION ?CLASS)
% 		(=> 
% 			(and 
% 				(closedOn ?FUNCTION ?CLASS)
% 				($instance ?FUNCTION BinaryFunction)
% 			)
% 			(forall (?INST1 ?INST2)
% 				(=> 
% 					(and 
% 						($instance ?INST1 ?CLASS)
% 						($instance ?INST2 ?CLASS)
% 					)
% 					($instance (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?CLASS)
% 				)
% 			)
% 		)
% 	)

fof( mergeA877, axiom,
	p__d__instance(c__reflexiveOn,c__BinaryPredicate)
).


fof( mergeA878, axiom,
	p__d__instance(c__reflexiveOn,c__AsymmetricRelation)
).


% 	($domain reflexiveOn 1 BinaryRelation)

% 	($domain reflexiveOn 2 SetOrClass)


% ($documentation reflexiveOn EnglishLanguage "A &%BinaryRelation is reflexive on a 
% &%SetOrClass only if every instance of the &%SetOrClass bears the relation 
% to itself.")


fof( mergeA881, axiom,
	(![CLASS,RELATION,INST]: 
		(
			(
				(
					(
						p__d__instance(CLASS,c__SetOrClass)
					)
				 &
					(
						p__d__instance(RELATION,c__BinaryRelation)
					)
				 &
					(
						p__reflexiveOn(RELATION,CLASS)
					)
				 &
					(
						p__d__instance(INST,CLASS)
					)
				)
			)
			=>
			(
				p__d__holds3(RELATION,INST,INST)
			)
		)
	)
).


fof( mergeA882, axiom,
	p__d__instance(c__irreflexiveOn,c__BinaryPredicate)
).


fof( mergeA883, axiom,
	p__d__instance(c__irreflexiveOn,c__AsymmetricRelation)
).


% 	($domain irreflexiveOn 1 BinaryRelation)

% 	($domain irreflexiveOn 2 SetOrClass)


% ($documentation irreflexiveOn EnglishLanguage "A &%BinaryRelation is irreflexive on a 
% &%SetOrClass only if no instance of the &%SetOrClass bears the relation to 
% itself.")


fof( mergeA886, axiom,
	(![CLASS,RELATION,INST]: 
		(
			(
				(
					(
						p__d__instance(CLASS,c__SetOrClass)
					)
				 &
					(
						p__d__instance(RELATION,c__BinaryRelation)
					)
				 &
					(
						p__irreflexiveOn(RELATION,CLASS)
					)
				 &
					(
						p__d__instance(INST,CLASS)
					)
				)
			)
			=>
			(
				~ (
					p__d__holds3(RELATION,INST,INST)
				)
			)
		)
	)
).


fof( mergeA887, axiom,
	p__d__instance(c__partialOrderingOn,c__BinaryPredicate)
).


fof( mergeA888, axiom,
	p__d__instance(c__partialOrderingOn,c__AsymmetricRelation)
).


% 	($domain partialOrderingOn 1 BinaryRelation)

% 	($domain partialOrderingOn 2 SetOrClass)


% ($documentation partialOrderingOn EnglishLanguage "A &%BinaryRelation is a partial 
% ordering on a &%SetOrClass only if the relation is &%reflexiveOn the 
% &%SetOrClass, and it is both an &%AntisymmetricRelation, and a 
% &%TransitiveRelation.")


fof( mergeA891, axiom,
	(![CLASS,RELATION]: 
		(
			(
				(
					(
						p__d__instance(CLASS,c__SetOrClass)
					)
				 &
					(
						p__d__instance(RELATION,c__BinaryRelation)
					)
				 &
					(
						p__partialOrderingOn(RELATION,CLASS)
					)
				)
			)
			=>
			(
				(
					(
						p__reflexiveOn(RELATION,CLASS)
					)
				 &
					(
						p__d__instance(RELATION,c__TransitiveRelation)
					)
				 &
					(
						p__d__instance(RELATION,c__AntisymmetricRelation)
					)
				)
			)
		)
	)
).


fof( mergeA892, axiom,
	p__d__instance(c__totalOrderingOn,c__BinaryPredicate)
).


fof( mergeA893, axiom,
	p__d__instance(c__totalOrderingOn,c__AsymmetricRelation)
).


% 	($domain totalOrderingOn 1 BinaryRelation)

% 	($domain totalOrderingOn 2 SetOrClass)


% ($documentation totalOrderingOn EnglishLanguage "A &%BinaryRelation ?REL is a total 
% ordering on a &%SetOrClass only if it is a partial ordering for which either 
% (?REL ?INST1 ?INST2) or (?REL ?INST2 ?INST1) for every ?INST1 and ?INST2 
% in the &%SetOrClass.")


fof( mergeA896, axiom,
	(![RELATION,CLASS]: 
		(
			(
				(
					(
						p__d__instance(CLASS,c__SetOrClass)
					)
				 &
					(
						p__d__instance(RELATION,c__BinaryRelation)
					)
				)
			)
			=>
			(
				(
					p__totalOrderingOn(RELATION,CLASS)
				)
				<=>
				(
					(
						(
							p__partialOrderingOn(RELATION,CLASS)
						)
					 &
						(
							p__trichotomizingOn(RELATION,CLASS)
						)
					)
				)
			)
		)
	)
).


fof( mergeA897, axiom,
	p__d__instance(c__trichotomizingOn,c__BinaryPredicate)
).


fof( mergeA898, axiom,
	p__d__instance(c__trichotomizingOn,c__AsymmetricRelation)
).


% 	($domain trichotomizingOn 1 BinaryRelation)

% 	($domain trichotomizingOn 2 SetOrClass)


% ($documentation trichotomizingOn EnglishLanguage "A &%BinaryRelation ?REL is 
% trichotomizing on a &%SetOrClass only if, for all instances ?INST1 and ?INST2 
% of the &%SetOrClass, at least one of the following holds:  (?REL ?INST1 ?INST2),
% (?REL ?INST2 ?INST1) or (equal ?INST1 ?INST2).")


fof( mergeA901, axiom,
	(![CLASS,RELATION,INST1,INST2]: 
		(
			(
				(
					(
						p__d__instance(CLASS,c__SetOrClass)
					)
				 &
					(
						p__d__instance(RELATION,c__BinaryRelation)
					)
				 &
					(
						p__trichotomizingOn(RELATION,CLASS)
					)
				 &
					(
						p__d__instance(INST1,CLASS)
					)
				 &
					(
						p__d__instance(INST2,CLASS)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(RELATION,INST1,INST2)
				 |
					p__d__holds3(RELATION,INST2,INST1)
				 |
					( INST1 = INST2 )
				)
			)
		)
	)
).


fof( mergeA902, axiom,
	p__d__instance(c__equivalenceRelationOn,c__BinaryPredicate)
).


fof( mergeA903, axiom,
	p__d__instance(c__equivalenceRelationOn,c__AsymmetricRelation)
).


% 	($domain equivalenceRelationOn 1 BinaryRelation)

% 	($domain equivalenceRelationOn 2 SetOrClass)


% ($documentation equivalenceRelationOn EnglishLanguage "A &%BinaryRelation is an 
% &%equivalenceRelationOn a &%SetOrClass only if the relation is &%reflexiveOn 
% the &%SetOrClass and it is both a &%TransitiveRelation and a 
% &%SymmetricRelation.")


fof( mergeA906, axiom,
	(![RELATION,CLASS]: 
		(
			(
				(
					(
						p__d__instance(CLASS,c__SetOrClass)
					)
				 &
					(
						p__d__instance(RELATION,c__BinaryRelation)
					)
				 &
					(
						p__equivalenceRelationOn(RELATION,CLASS)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(RELATION,c__TransitiveRelation)
					)
				 &
					(
						p__d__instance(RELATION,c__SymmetricRelation)
					)
				 &
					(
						p__reflexiveOn(RELATION,CLASS)
					)
				)
			)
		)
	)
).


fof( mergeA907, axiom,
	p__d__instance(c__distributes,c__BinaryPredicate)
).


% 	($domain distributes 1 BinaryFunction)

% 	($domain distributes 2 BinaryFunction)


% ($documentation distributes EnglishLanguage "A &%BinaryFunction ?FUNCTION1 is 
% distributive over another &%BinaryFunction ?FUNCTION2 just in case 
% (?FUNCTION1 ?INST1 (?FUNCTION2 ?INST2 ?INST3)) is equal to 
% (?FUNCTION2 (?FUNCTION1 ?INST1 ?INST2) (?FUNCTION1 ?INST1 ?INST3)), 
% for all ?INST1, ?INST2, and ?INST3.") 


% 	(forall (?CLASS1 ?CLASS2 ?FUNCTION2 ?FUNCTION1)
% 		(=> 
% 			(distributes ?FUNCTION1 ?FUNCTION2)
% 			(forall (?INST1 ?INST2 ?INST3)
% 				(=> 
% 					(and 
% 						(domain ?FUNCTION1 1 ?CLASS1)
% 						($instance ?INST1 ?CLASS1)
% 						($instance ?INST2 ?CLASS1)
% 						($instance ?INST3 ?CLASS1)
% 						(domain ?FUNCTION2 1 ?CLASS2)
% 						($instance ?INST1 ?CLASS2)
% 						($instance ?INST2 ?CLASS2)
% 						($instance ?INST3 ?CLASS2)
% 					)
% 					(equal (AssignmentFn ?FUNCTION1 ?INST1 (AssignmentFn ?FUNCTION2 ?INST2 ?INST3)) (AssignmentFn ?FUNCTION2 (AssignmentFn ?FUNCTION1 ?INST1 ?INST2) (AssignmentFn ?FUNCTION1 ?INST1 ?INST3)))
% 				)
% 			)
% 		)
% 	)


% ($documentation relatedEvent EnglishLanguage "(relatedEvent ?EVENT1 ?EVENT2) means 
% that the &%Process ?EVENT1 is related to the Process ?EVENT2.  The 
% relationship is between separate individual events, not events and 
% their subprocesses.  On the other hand, two &%subProcesses of the same 
% overarching event may be &%relatedEvents.  The argument order does not 
% imply temporal ordering.")


fof( mergeA911, axiom,
	p__d__instance(c__relatedEvent,c__BinaryPredicate)
).


fof( mergeA912, axiom,
	p__d__instance(c__relatedEvent,c__SymmetricRelation)
).


% 	($domain relatedEvent 1 Process)

% 	($domain relatedEvent 2 Process)

fof( mergeA915, axiom,
	(![P,S1,S2]: 
		(
			(
				(
					(
						p__d__instance(P,c__Process)
					)
				 &
					(
						p__d__instance(S1,c__Process)
					)
				 &
					(
						p__d__instance(S2,c__Process)
					)
				 &
					(
						p__subProcess(S1,P)
					)
				 &
					(
						p__subProcess(S2,P)
					)
				)
			)
			=>
			(
				p__relatedEvent(S1,S2)
			)
		)
	)
).


fof( mergeA916, axiom,
	p__d__instance(c__causes,c__BinaryPredicate)
).


fof( mergeA917, axiom,
	p__d__instance(c__causes,c__AsymmetricRelation)
).


% 	($domain causes 1 Process)

% 	($domain causes 2 Process)

fof( mergeA920, axiom,
	p__relatedInternalConcept(c__causes,c__causesSubclass)
).


fof( mergeA921, axiom,
	p__subrelation(c__causes,c__relatedEvent)
).



% ($documentation causes EnglishLanguage "The causation relation between instances of &%Process.  
% (&%causes ?PROCESS1 ?PROCESS2) means that the instance of &%Process ?PROCESS1 
% brings about the instance of &%Process ?PROCESS2.")


fof( mergeA922, axiom,
	(![PROC1]: 
		(
			(
				p__d__instance(PROC1,c__Process)
			)
			=>
			(
				(?[PROC2]: 
					(
						(
							(
								p__d__instance(PROC2,c__Process)
							)
						 &
							(
								p__causes(PROC2,PROC1)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA923, axiom,
	(![P1,P2]: 
		(
			(
				(
					(
						p__d__instance(P2,c__Process)
					)
				 &
					(
						p__d__instance(P1,c__Process)
					)
				 &
					(
						p__causes(P1,P2)
					)
				)
			)
			=>
			(
				p__earlier(f__WhenFn1(P1),f__WhenFn1(P2))
			)
		)
	)
).


fof( mergeA924, axiom,
	p__d__instance(c__causesSubclass,c__BinaryPredicate)
).


fof( mergeA925, axiom,
	p__d__instance(c__causesSubclass,c__AsymmetricRelation)
).


% 	($domainSubclass causesSubclass 1 Process)

% 	($domainSubclass causesSubclass 2 Process)


% ($documentation causesSubclass EnglishLanguage "The causation relation
% between subclasses of &%Process.
% (&%causesSubclass ?PROCESS1 ?PROCESS2) means that the subclass of &%Process ?PROCESS1 
% brings about the subclass of &%Process ?PROCESS2, e.g. (&%causesSubclass &%Killing 
% &%Death).")


fof( mergeA928, axiom,
	(![PROC2,PROC1,INST2]: 
		(
			(
				(
					(
						p__d__subclass(PROC2,c__Process)
					)
				 &
					(
						p__d__subclass(PROC1,c__Process)
					)
				 &
					(
						p__d__instance(INST2,c__Process)
					)
				 &
					(
						p__causesSubclass(PROC1,PROC2)
					)
				 &
					(
						p__d__instance(INST2,PROC2)
					)
				)
			)
			=>
			(
				(?[INST1]: 
					(
						(
							(
								p__d__instance(INST1,c__Process)
							)
						 &
							(
								p__d__instance(INST1,PROC1)
							)
						 &
							(
								p__causes(INST1,INST2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA929, axiom,
	p__d__instance(c__causesProposition,c__BinaryPredicate)
).


fof( mergeA930, axiom,
	p__d__instance(c__causesProposition,c__AsymmetricRelation)
).


% 	($domain causesProposition 1 Formula)

% 	($domain causesProposition 2 Formula)


% ($documentation causesProposition EnglishLanguage "(&%causesProposition ?FORMULA1
% ?FORMULA2) means that the state of affairs described by ?FORMULA1
% causes, or mechanistically brings about, the state of affairs
% described by ?FORMULA2.  Note that unlike &%entails, the time
% during which ?FORMULA2 holds cannot precede the time during which
% ?FORMULA1 holds, although ?FORMULA1 and ?FORMULA2 can hold
% simultaneously.  Note, also, that &%causesProposition is a
% predicate, not a truth function.  The following rule
% (contraposition) does not hold: (=> (causesProp ?FORMULA1
% ?FORMULA2) (causesProp (not ?FORMULA2) (not ?FORMULA1))).")


fof( mergeA933, axiom,
	(![SIT1,SIT2,T1,T2]: 
		(
			(
				(
					(
						p__d__instance(SIT2,c__Formula)
					)
				 &
					(
						p__d__instance(SIT1,c__Formula)
					)
				 &
					(
						p__holdsDuring(T2,SIT2)
					)
				 &
					(
						p__holdsDuring(T1,SIT1)
					)
				 &
					(
						p__d__instance(T1,c__TimeInterval)
					)
				 &
					(
						p__d__instance(T2,c__TimeInterval)
					)
				 &
					(
						p__causesProposition(SIT1,SIT2)
					)
				)
			)
			=>
			(
				p__beforeOrEqual(f__BeginFn1(T1),f__BeginFn1(T2))
			)
		)
	)
).


fof( mergeA934, axiom,
	p__d__instance(c__copy,c__BinaryPredicate)
).


fof( mergeA935, axiom,
	p__d__instance(c__copy,c__EquivalenceRelation)
).


% 	($domain copy 1 Object)

% 	($domain copy 2 Object)


% ($documentation copy EnglishLanguage "relates an &%Object to an exact copy of the 
% &%Object, where an exact copy is indistinguishable from the original 
% with regard to every property except (possibly) spatial and/or temporal 
% location.")


fof( mergeA938, axiom,
	(![OBJ1,OBJ2,ATTR]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(ATTR,c__Attribute)
					)
				 &
					(
						p__copy(OBJ1,OBJ2)
					)
				 &
					(
						p__attribute(OBJ1,ATTR)
					)
				)
			)
			=>
			(
				p__attribute(OBJ2,ATTR)
			)
		)
	)
).


fof( mergeA939, axiom,
	p__d__instance(c__time,c__BinaryPredicate)
).


fof( mergeA940, axiom,
	p__d__instance(c__time,c__TemporalRelation)
).


fof( mergeA941, axiom,
	p__d__instance(c__time,c__AsymmetricRelation)
).


% 	($domain time 1 Physical)

% 	($domain time 2 TimePosition)

fof( mergeA944, axiom,
	p__relatedInternalConcept(c__time,c__located)
).


fof( mergeA945, axiom,
	p__relatedInternalConcept(c__time,c__holdsDuring)
).



% ($documentation time EnglishLanguage "This relation holds between an instance of 
% &%Physical and an instance of &%TimePosition just in case the temporal 
% lifespan of the former includes the latter.  In other words, (&%time
% ?THING ?TIME) means that ?THING existed or occurred at ?TIME.  Note 
% that &%time does for instances of &%Physical what &%holdsDuring does 
% for instances of &%Formula.  The constants &%located and &%time are 
% the basic spatial and temporal predicates, respectively.")


fof( mergeA946, axiom,
	p__d__instance(c__holdsDuring,c__BinaryPredicate)
).


fof( mergeA947, axiom,
	p__d__instance(c__holdsDuring,c__AsymmetricRelation)
).


% 	($domain holdsDuring 1 TimePosition)

% 	($domain holdsDuring 2 Formula)


% ($documentation holdsDuring EnglishLanguage "(&%holdsDuring ?TIME ?FORMULA) means that the 
% proposition denoted by ?FORMULA is true in the time frame ?TIME.  Note 
% that this implies that ?FORMULA is true at every &%TimePoint which is a 
% &%temporalPart of ?TIME.")


fof( mergeA950, axiom,
	(![SITUATION1,TIME,SITUATION2]: 
		(
			(
				(
					(
						p__d__instance(SITUATION1,c__Formula)
					)
				 &
					(
						p__d__instance(TIME,c__TimePosition)
					)
				 &
					(
						p__d__instance(SITUATION2,c__Formula)
					)
				 &
					(
						p__holdsDuring(TIME,SITUATION1)
					)
				 &
					(
						p__entails(SITUATION1,SITUATION2)
					)
				)
			)
			=>
			(
				p__holdsDuring(TIME,SITUATION2)
			)
		)
	)
).


% 	(forall (?TIME ?SITUATION)
% 		(=> 
% 			(holdsDuring ?TIME (not ?SITUATION))
% 			(not 
% 				(holdsDuring ?TIME ?SITUATION)
% 			)
% 		)
% 	)

fof( mergeA952, axiom,
	p__d__instance(c__capability,c__TernaryPredicate)
).


% 	($domainSubclass capability 1 Process)

% 	($domain capability 2 CaseRole)

% 	($domain capability 3 Object)


% ($documentation capability EnglishLanguage "(&%capability ?PROCESS ?ROLE ?OBJ) means 
% that ?OBJ has the ability to play the role of ?ROLE in &%Processes of 
% type ?PROCESS.")


fof( mergeA956, axiom,
	(![ARG1,PROC,ROLE,ARG2]: 
		(
			(
				(
					(
						p__d__instance(ARG2,c__Object)
					)
				 &
					(
						p__d__instance(ROLE,c__CaseRole)
					)
				 &
					(
						p__d__holds3(ROLE,ARG1,ARG2)
					)
				 &
					(
						p__d__instance(ARG1,PROC)
					)
				 &
					(
						p__d__subclass(PROC,c__Process)
					)
				)
			)
			=>
			(
				p__capability(PROC,ROLE,ARG2)
			)
		)
	)
).


fof( mergeA957, axiom,
	p__d__instance(c__exploits,c__BinaryPredicate)
).


fof( mergeA958, axiom,
	p__d__instance(c__exploits,c__AsymmetricRelation)
).


% 	($domain exploits 1 Object)

% 	($domain exploits 2 Agent)


% ($documentation exploits EnglishLanguage "(&%exploits ?OBJ ?AGENT) means that ?OBJ is used 
% by ?AGENT as a &%resource in an unspecified instance of &%Process.  This 
% &%Predicate, as its corresponding axiom indicates, is a composition of the 
% relations &%agent and &%resource.")


fof( mergeA961, axiom,
	(![AGENT,OBJ]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__exploits(OBJ,AGENT)
					)
				)
			)
			=>
			(
				(?[PROCESS]: 
					(
						(
							(
								p__d__instance(PROCESS,c__Process)
							)
						 &
							(
								p__agent(PROCESS,AGENT)
							)
						 &
							(
								p__resource(PROCESS,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA962, axiom,
	p__d__instance(c__hasPurpose,c__BinaryPredicate)
).


fof( mergeA963, axiom,
	p__d__instance(c__hasPurpose,c__AsymmetricRelation)
).


% 	($domain hasPurpose 1 Physical)

% 	($domain hasPurpose 2 Formula)


% ($documentation hasPurpose EnglishLanguage "This &%Predicate expresses the concept of a 
% conventional goal, i.e. a goal with a neutralized agent's intention.  
% Accordingly, (&%hasPurpose ?THING ?FORMULA) means that the instance of 
% &%Physical ?THING has, as its purpose, the &%Proposition expressed by 
% ?FORMULA.  Note that there is an important difference in meaning between 
% the &%Predicates &%hasPurpose and &%result.  Although the second argument 
% of the latter can satisfy the second argument of the former, 
% a conventional goal is an expected and desired outcome, while a result 
% may be neither expected nor desired.  For example, a machine process may 
% have outcomes but no goals, aimless wandering may have an outcome but no 
% goal, a learning process may have goals with no outcomes, and so on.")


fof( mergeA966, axiom,
	p__d__instance(c__hasPurposeForAgent,c__TernaryPredicate)
).


% 	($domain hasPurposeForAgent 1 Physical)

% 	($domain hasPurposeForAgent 2 Formula)

% 	($domain hasPurposeForAgent 3 CognitiveAgent)


% ($documentation hasPurposeForAgent EnglishLanguage "Expresses a cognitive attitude of an 
% agent with respect to a particular instance of Physical.  More precisely, 
% (&%hasPurposeForAgent ?THING ?FORMULA ?AGENT) means that the purpose of 
% ?THING for ?AGENT is the proposition expressed by ?FORMULA.  Very complex 
% issues are involved here.  In particular, the rules of inference of the 
% first order predicate calculus are not truth-preserving for the second 
% argument position of this &%Predicate.")


fof( mergeA970, axiom,
	(![THING,PURPOSE]: 
		(
			(
				(
					(
						p__d__instance(PURPOSE,c__Formula)
					)
				 &
					(
						p__d__instance(THING,c__Physical)
					)
				 &
					(
						p__hasPurpose(THING,PURPOSE)
					)
				)
			)
			=>
			(
				(?[AGENT]: 
					(
						(
							(
								p__d__instance(AGENT,c__CognitiveAgent)
							)
						 &
							(
								p__hasPurposeForAgent(THING,PURPOSE,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA971, axiom,
	p__d__instance(c__hasSkill,c__BinaryPredicate)
).


fof( mergeA972, axiom,
	p__d__instance(c__hasSkill,c__AsymmetricRelation)
).


% 	($domainSubclass hasSkill 1 Process)

% 	($domain hasSkill 2 Agent)


% ($documentation hasSkill EnglishLanguage "Similar to the &%capability &%Predicate 
% with the additional restriction that the ability be practised/
% demonstrated to some measurable degree.")


fof( mergeA975, axiom,
	(![PROC,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__subclass(PROC,c__Process)
					)
				 &
					(
						p__hasSkill(PROC,AGENT)
					)
				)
			)
			=>
			(
				p__capability(PROC,c__agent,AGENT)
			)
		)
	)
).


fof( mergeA976, axiom,
	p__d__instance(c__confersNorm,c__TernaryPredicate)
).


% 	($domain confersNorm 1 Entity)

% 	($domain confersNorm 2 Formula)

% 	($domain confersNorm 3 ObjectiveNorm)


% ($documentation confersNorm EnglishLanguage "Expresses the relationship between a &%Formula, 
% an &%Entity, and an &%ObjectiveNorm when the &%Entity brings it about that 
% the &%Formula has the &%ObjectiveNorm.")


% 	(forall (?ENTITY ?TIME ?FORMULA ?NORM)
% 		(=> 
% 			(holdsDuring ?TIME (confersNorm ?ENTITY ?FORMULA ?NORM))
% 			(and 
% 				(holdsDuring (ImmediatePastFn ?TIME) (not (modalAttribute ?FORMULA ?NORM)))
% 				(holdsDuring (ImmediateFutureFn ?TIME) (modalAttribute ?FORMULA ?NORM))
% 			)
% 		)
% 	)

fof( mergeA981, axiom,
	p__d__instance(c__deprivesNorm,c__TernaryPredicate)
).


fof( mergeA982, axiom,
	p__disjointRelation(c__deprivesNorm,c__confersNorm)
).


% 	($domain deprivesNorm 1 Entity)

% 	($domain deprivesNorm 2 Formula)

% 	($domain deprivesNorm 3 ObjectiveNorm)


% ($documentation deprivesNorm EnglishLanguage "Expresses the relationship between an 
% &%Entity, a &%Formula, and an &%ObjectiveNorm when the &%Entity 
% brings it about that the &%Formula does not have the &%ObjectiveNorm.") 


% 	(forall (?ENTITY ?TIME ?FORMULA ?NORM)
% 		(=> 
% 			(holdsDuring ?TIME (deprivesNorm ?ENTITY ?FORMULA ?NORM))
% 			(and 
% 				(holdsDuring (ImmediatePastFn ?TIME) (modalAttribute ?FORMULA ?NORM))
% 				(holdsDuring (ImmediateFutureFn ?TIME) (not (modalAttribute ?FORMULA ?NORM)))
% 			)
% 		)
% 	)

fof( mergeA987, axiom,
	p__d__instance(c__partlyLocated,c__SpatialRelation)
).


fof( mergeA988, axiom,
	p__d__instance(c__partlyLocated,c__BinaryPredicate)
).


% 	($domain partlyLocated 1 Physical)

% 	($domain partlyLocated 2 Object)


% ($documentation partlyLocated EnglishLanguage "(&%partlyLocated ?OBJ1 ?OBJ2) means 
% that the instance of &%Physical ?OBJ1 is at least partially located at ?OBJ2.  For 
% example, Istanbul is partly located in &%Asia and partly located in &%Europe.  
% Note that &%partlyLocated is the most basic localization relation:  &%located 
% is an immediate &%subrelation of &%partlyLocated and &%exactlyLocated is 
% an immediate &%subrelation of &%located.") 


fof( mergeA991, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__partlyLocated(OBJ1,OBJ2)
					)
				)
			)
			=>
			(
				p__overlapsSpatially(OBJ1,OBJ2)
			)
		)
	)
).


fof( mergeA992, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__partlyLocated(OBJ1,OBJ2)
					)
				)
			)
			=>
			(
				(?[SUB]: 
					(
						(
							(
								p__d__instance(SUB,c__Object)
							)
						 &
							(
								p__part(SUB,OBJ1)
							)
						 &
							(
								p__located(SUB,OBJ2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA993, axiom,
	p__d__instance(c__located,c__AntisymmetricRelation)
).


fof( mergeA994, axiom,
	p__d__instance(c__located,c__TransitiveRelation)
).


fof( mergeA995, axiom,
	p__subrelation(c__located,c__partlyLocated)
).



% ($documentation located EnglishLanguage "(&%located ?OBJ1 ?OBJ2) means that ?OBJ1 is 
% &%partlyLocated at ?OBJ2, and there is no &%part of ?OBJ1 that is not &%located at 
% ?OBJ2.")


fof( mergeA996, axiom,
	(![OBJ1,OBJ2,SUB]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(SUB,c__Object)
					)
				 &
					(
						p__located(OBJ1,OBJ2)
					)
				 &
					(
						p__part(SUB,OBJ1)
					)
				)
			)
			=>
			(
				p__located(SUB,OBJ2)
			)
		)
	)
).


fof( mergeA997, axiom,
	p__d__instance(c__eventPartlyLocated,c__CaseRole)
).


fof( mergeA998, axiom,
	p__subrelation(c__eventPartlyLocated,c__partlyLocated)
).


% 	($domain eventPartlyLocated 1 Process)

% 	($domain eventPartlyLocated 2 Object)


% ($documentation eventPartlyLocated EnglishLanguage "(&%eventPartlyLocated ?PROC ?OBJ)
% means that some &%subProcess of &%Process ?PROC is located in &%Object ?OBJ.")


% (termFormat EnglishLanguage eventPartlyLocated "event partly located")

fof( mergeA1001, axiom,
	(![PROC,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(PROC,c__Process)
					)
				 &
					(
						p__eventPartlyLocated(PROC,OBJ)
					)
				)
			)
			=>
			(
				(?[SUB]: 
					(
						(
							(
								p__d__instance(SUB,c__Process)
							)
						 &
							(
								p__subProcess(SUB,PROC)
							)
						 &
							(
								p__eventLocated(SUB,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1002, axiom,
	(![PROCESS,LOC]: 
		(
			(
				(
					(
						p__d__instance(LOC,c__Object)
					)
				 &
					(
						p__d__instance(PROCESS,c__Process)
					)
				 &
					(
						p__origin(PROCESS,LOC)
					)
				)
			)
			=>
			(
				p__eventPartlyLocated(PROCESS,LOC)
			)
		)
	)
).


fof( mergeA1003, axiom,
	(![PROCESS,LOC]: 
		(
			(
				(
					(
						p__d__instance(LOC,c__Object)
					)
				 &
					(
						p__d__instance(PROCESS,c__Process)
					)
				 &
					(
						p__destination(PROCESS,LOC)
					)
				)
			)
			=>
			(
				p__eventPartlyLocated(PROCESS,LOC)
			)
		)
	)
).


fof( mergeA1004, axiom,
	p__subrelation(c__eventLocated,c__eventPartlyLocated)
).



% ($documentation eventLocated EnglishLanguage "(&%eventLocated ?PROC ?OBJ) means that
% the entire &%Process ?PROC is located on &%Object ?OBJ, meaning that all &%subProcess 
% of ?PROC is located on ?OBJ")


% (termFormat EnglishLanguage eventLocated "event located")

fof( mergeA1005, axiom,
	(![PROCESS,OBJ,SUB]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(PROCESS,c__Process)
					)
				 &
					(
						p__d__instance(SUB,c__Process)
					)
				 &
					(
						p__eventLocated(PROCESS,OBJ)
					)
				 &
					(
						p__subProcess(SUB,PROCESS)
					)
				)
			)
			=>
			(
				p__eventLocated(SUB,OBJ)
			)
		)
	)
).


fof( mergeA1006, axiom,
	p__subrelation(c__exactlyLocated,c__located)
).



% ($documentation exactlyLocated EnglishLanguage "The actual, minimal location of an 
% Object.  This is a subrelation of the more general &%Predicate 
% &%located.")


fof( mergeA1007, axiom,
	(![REGION,OBJ]: 
		(
			(
				(
					(
						p__d__instance(REGION,c__Object)
					)
				 &
					(
						p__d__instance(OBJ,c__Physical)
					)
				 &
					(
						p__exactlyLocated(OBJ,REGION)
					)
				)
			)
			=>
			(
				(![OTHEROBJ]: 
					(
						(
							~ (
								p__d__instance(OTHEROBJ,c__Physical)
							)
						 |
							~ (
								p__exactlyLocated(OTHEROBJ,REGION)
							)
						 |
							( OTHEROBJ = OBJ )
						)
					)
				)
			)
		)
	)
).


fof( mergeA1008, axiom,
	p__d__instance(c__between,c__SpatialRelation)
).


fof( mergeA1009, axiom,
	p__d__instance(c__between,c__TernaryPredicate)
).


% 	($domain between 1 Object)

% 	($domain between 2 Object)

% 	($domain between 3 Object)


% ($documentation between EnglishLanguage "(between ?OBJ1 ?OBJ2 ?OBJ3) means that ?OBJ2 is 
% spatially located between ?OBJ1 and ?OBJ3.  Note that this implies that 
% ?OBJ2 is directly between ?OBJ1 and ?OBJ3, i.e. the projections of ?OBJ1 
% and ?OBJ3 overlap with ?OBJ2.")


fof( mergeA1013, axiom,
	(![END2,MID,END1]: 
		(
			(
				(
					(
						p__d__instance(END2,c__Object)
					)
				 &
					(
						p__d__instance(MID,c__Object)
					)
				 &
					(
						p__d__instance(END1,c__Object)
					)
				 &
					(
						p__between(END1,MID,END2)
					)
				)
			)
			=>
			(
				p__between(END2,MID,END1)
			)
		)
	)
).



% ($documentation betweenOnPath EnglishLanguage "(betweenOnPath ?OBJ1 ?OBJ2 ?OBJ3 ?PATH) 
% means that ?OBJ2 is spatially located between ?OBJ1 and ?OBJ3 on the path 
% ?PATH.  Note that this is a more specialized relation of between since any 
% object that is between others with respect to a particular path is also 
% simply between them.") 


fof( mergeA1014, axiom,
	p__d__instance(c__betweenOnPath,c__SpatialRelation)
).


fof( mergeA1015, axiom,
	p__d__instance(c__betweenOnPath,c__QuaternaryPredicate)
).


% 	($domain betweenOnPath 1 Object)

% 	($domain betweenOnPath 2 Object)

% 	($domain betweenOnPath 3 Object)

% 	($domain betweenOnPath 4 Object)

fof( mergeA1020, axiom,
	(![PATH,OBJ1,OBJ2,OBJ3]: 
		(
			(
				(
					(
						p__d__instance(PATH,c__Object)
					)
				 &
					(
						p__d__instance(OBJ3,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__betweenOnPath(OBJ1,OBJ2,OBJ3,PATH)
					)
				)
			)
			=>
			(
				p__between(OBJ1,OBJ2,OBJ3)
			)
		)
	)
).


fof( mergeA1021, axiom,
	p__d__instance(c__traverses,c__BinaryPredicate)
).


fof( mergeA1022, axiom,
	p__d__instance(c__traverses,c__SpatialRelation)
).


% 	($domain traverses 1 Object)

% 	($domain traverses 2 Object)


% ($documentation traverses EnglishLanguage "(&%traverses ?OBJ1 ?OBJ2) means that ?OBJ1 
% crosses or extends across ?OBJ2.  Note that &%crosses and 
% &%penetrates are subrelations of &%traverses.")


fof( mergeA1025, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__traverses(OBJ1,OBJ2)
					)
				)
			)
			=>
			(
				(
					p__crosses(OBJ1,OBJ2)
				 |
					p__penetrates(OBJ1,OBJ2)
				)
			)
		)
	)
).


fof( mergeA1026, axiom,
	p__subrelation(c__crosses,c__traverses)
).


fof( mergeA1027, axiom,
	p__d__instance(c__crosses,c__AsymmetricRelation)
).


fof( mergeA1028, axiom,
	p__d__instance(c__crosses,c__TransitiveRelation)
).


fof( mergeA1029, axiom,
	p__disjointRelation(c__crosses,c__connected)
).



% ($documentation crosses EnglishLanguage "(crosses ?OBJ1 ?OBJ2) means that 
% &%Object ?OBJ1 &%traverses Object ?OBJ2, without being &%connected 
% to it.")


fof( mergeA1030, axiom,
	p__subrelation(c__penetrates,c__traverses)
).


fof( mergeA1031, axiom,
	p__subrelation(c__penetrates,c__meetsSpatially)
).


fof( mergeA1032, axiom,
	p__d__instance(c__penetrates,c__AsymmetricRelation)
).


fof( mergeA1033, axiom,
	p__d__instance(c__penetrates,c__IntransitiveRelation)
).



% ($documentation penetrates EnglishLanguage "(penetrates ?OBJ1 ?OBJ2) means that 
% ?OBJ1 is &%connected to ?OBJ2 along at least one whole dimension (length, 
% width or depth).") 


fof( mergeA1034, axiom,
	p__d__instance(c__WhereFn,c__BinaryFunction)
).


fof( mergeA1035, axiom,
	p__d__instance(c__WhereFn,c__SpatialRelation)
).


fof( mergeA1036, axiom,
	p__d__instance(c__WhereFn,c__TotalValuedRelation)
).


% 	($domain WhereFn 1 Physical)

% 	($domain WhereFn 2 TimePoint)

% 	($range WhereFn Region)

fof( mergeA1040, axiom,
	p__relatedInternalConcept(c__WhereFn,c__WhenFn)
).



% ($documentation WhereFn EnglishLanguage "Maps an &%Object and a &%TimePoint at which the 
% &%Object exists to the &%Region where the &%Object existed at that 
% &%TimePoint.")


% 	(forall (?TIME ?THING ?REGION)
% 		(<=> 
% 			(equal (WhereFn ?THING ?TIME) ?REGION)
% 			(holdsDuring ?TIME (exactlyLocated ?THING ?REGION))
% 		)
% 	)

fof( mergeA1042, axiom,
	p__d__instance(c__possesses,c__BinaryPredicate)
).


fof( mergeA1043, axiom,
	p__d__instance(c__possesses,c__AsymmetricRelation)
).


% 	($domain possesses 1 Agent)

% 	($domain possesses 2 Object)


% ($documentation possesses EnglishLanguage "&%Relation that holds between an &%Agent and 
% an &%Object when the &%Agent has ownership of the &%Object.")


% 	(forall (?OBJ ?PERSON)
% 		(=> 
% 			(possesses ?PERSON ?OBJ)
% 			(modalAttribute (uses ?OBJ ?PERSON) Permission)
% 		)
% 	)

% 	(forall (?TIME ?OBJ ?AGENT1 ?AGENT2)
% 		(=> 
% 			(and 
% 				($instance ?TIME TimePosition)
% 				(holdsDuring ?TIME (possesses ?AGENT1 ?OBJ))
% 				(holdsDuring ?TIME (possesses ?AGENT2 ?OBJ))
% 			)
% 			(equal ?AGENT1 ?AGENT2)
% 		)
% 	)

fof( mergeA1048, axiom,
	p__d__instance(c__PropertyFn,c__UnaryFunction)
).


fof( mergeA1049, axiom,
	p__d__instance(c__PropertyFn,c__TotalValuedRelation)
).


% 	($domain PropertyFn 1 Agent)

% 	($range PropertyFn Set)


% ($documentation PropertyFn EnglishLanguage "A &%UnaryFunction that maps an &%Agent to the 
% &%Set of &%Objects owned by the &%Agent.")


% 	(forall (?PERSON ?OBJ)
% 		(<=> 
% 			($instance ?OBJ (PropertyFn ?PERSON))
% 			(possesses ?PERSON ?OBJ)
% 		)
% 	)

fof( mergeA1053, axiom,
	p__d__instance(c__precondition,c__BinaryPredicate)
).


fof( mergeA1054, axiom,
	p__d__instance(c__precondition,c__AsymmetricRelation)
).


fof( mergeA1055, axiom,
	p__d__instance(c__precondition,c__TransitiveRelation)
).


% 	($domainSubclass precondition 1 Process)

% 	($domainSubclass precondition 2 Process)


% ($documentation precondition EnglishLanguage "A very general &%Predicate.  (&%precondition 
% ?PROC1 ?PROC2) means that an instance of ?PROC2 can exist only if an 
% instance of ?PROC1 also exists.")


fof( mergeA1058, axiom,
	(![PROC2,PROC1]: 
		(
			(
				(
					(
						p__d__subclass(PROC2,c__Process)
					)
				 &
					(
						p__d__subclass(PROC1,c__Process)
					)
				 &
					(
						p__precondition(PROC1,PROC2)
					)
				 &
					(
						(?[INST2]: 
							(
								p__d__instance(INST2,PROC2)
							)
						)
					)
				)
			)
			=>
			(
				(?[INST1]: 
					(
						p__d__instance(INST1,PROC1)
					)
				)
			)
		)
	)
).


fof( mergeA1059, axiom,
	p__d__instance(c__hindersSubclass,c__BinaryPredicate)
).


fof( mergeA1060, axiom,
	p__d__instance(c__hindersSubclass,c__IrreflexiveRelation)
).


% 	($domainSubclass hindersSubclass 1 Process)

% 	($domainSubclass hindersSubclass 2 Process)


% ($documentation hindersSubclass EnglishLanguage "A very general &%Predicate.  (&%hindersSubclass 
% ?PROC1 ?PROC2) means that the &%Process ?PROC1 hindersSubclass or hinders 
% the occurrence of the &%Process ?PROC2.  For example, obstructing an 
% object hindersSubclass moving it.  Note that this is a relation between types 
% of &%Processes, not between instances.")


% 	(forall (?PROC1 ?INST1 ?PROC2 ?INST2)
% 		(=> 
% 			(hindersSubclass ?PROC1 ?PROC2)
% 			(forall (?TIME ?PLACE)
% 				(decreasesLikelihood (holdsDuring ?TIME (exists ([|] ?INST1 []) (and ([|] ($instance ?INST1 ?PROC1) ([|] (eventLocated ?INST1 ?PLACE) []))))) (holdsDuring ?TIME (exists ([|] ?INST2 []) (and ([|] ($instance ?INST2 ?PROC2) ([|] (eventLocated ?INST2 ?PLACE) []))))))
% 			)
% 		)
% 	)

fof( mergeA1064, axiom,
	p__d__instance(c__preventsSubclass,c__BinaryPredicate)
).


fof( mergeA1065, axiom,
	p__d__instance(c__preventsSubclass,c__IrreflexiveRelation)
).


% 	($domainSubclass preventsSubclass 1 Process)

% 	($domainSubclass preventsSubclass 2 Process)

fof( mergeA1068, axiom,
	p__relatedInternalConcept(c__preventsSubclass,c__hindersSubclass)
).



% ($documentation preventsSubclass EnglishLanguage "A very general &%Predicate.  (preventsSubclass ?PROC1 ?PROC2) means that ?PROC1 preventsSubclass the occurrence of ?PROC2.  In other words, if ?PROC1 is occurring in a particular time and place, ?PROC2 
% cannot occur at the same time and place.  For example, innoculating 
% preventsSubclass contracting disease.  Note that this is a relation between types 
% of &%Processes, not between instances.") 


% 	(forall (?PROC1 ?INST1 ?PROC2 ?INST2)
% 		(=> 
% 			(preventsSubclass ?PROC1 ?PROC2)
% 			(forall (?TIME ?PLACE)
% 				(=> 
% 					(holdsDuring ?TIME (exists ([|] ?INST1 []) (and ([|] ($instance ?INST1 ?PROC1) ([|] (eventLocated ?INST1 ?PLACE) [])))))
% 					(not 
% 						(holdsDuring ?TIME (exists ([|] ?INST2 []) (and ([|] ($instance ?INST2 ?PROC2) ([|] (eventLocated ?INST2 ?PLACE) [])))))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA1070, axiom,
	p__d__instance(c__prevents,c__BinaryPredicate)
).


fof( mergeA1071, axiom,
	p__d__instance(c__prevents,c__IrreflexiveRelation)
).


% 	($domain prevents 1 Process)

% 	($domainSubclass prevents 2 Process)

fof( mergeA1074, axiom,
	p__relatedInternalConcept(c__prevents,c__preventsSubclass)
).


fof( mergeA1075, axiom,
	p__relatedInternalConcept(c__prevents,c__hinders)
).



% ($documentation prevents EnglishLanguage "A very general &%Predicate.  (prevents ?PROC1 ?PROC2) means that an instance of ?PROC1 prevents the occurrence of ?PROC2. Note the difference between this relation and &%preventsSubclass, which is relating classes and not instance-class.")


% 	(forall (?X ?T ?P ?Y ?L)
% 		(=> 
% 			(and 
% 				(prevents ?X ?P)
% 				(equal (WhenFn ?X) ?T)
% 				(eventLocated ?X ?L)
% 			)
% 			(not 
% 				(holdsDuring ?T (exists ([|] ?Y []) (and ([|] ($instance ?Y ?P) ([|] (eventLocated ?Y ?L) [])))))
% 			)
% 		)
% 	)

fof( mergeA1077, axiom,
	p__d__instance(c__hinders,c__BinaryPredicate)
).


fof( mergeA1078, axiom,
	p__d__instance(c__hinders,c__IrreflexiveRelation)
).


% 	($domain hinders 1 Process)

% 	($domainSubclass hinders 2 Process)

fof( mergeA1081, axiom,
	p__relatedInternalConcept(c__hinders,c__hindersSubclass)
).



% ($documentation hinders EnglishLanguage "A genral &%Predicate, where (hinders ?PROC1 ?PROC2) means that an instance of ?PROC1 &%decreasesLikelihood of occurrence of ?PROC2. Compare with &%prevents which is stronger and &%hindersSubclass which relates classes of &%Processes.")


% 	(forall (?X ?T ?PROC ?Y ?L)
% 		(=> 
% 			(hinders ?X ?PROC)
% 			(decreasesLikelihood (and ([|] (equal (WhenFn ?X) ?T) ([|] (eventLocated ?X ?L) []))) (holdsDuring ?T (exists ([|] ?Y []) (and ([|] ($instance ?Y ?PROC) ([|] (eventLocated ?Y ?L) []))))))
% 		)
% 	)

fof( mergeA1083, axiom,
	p__d__instance(c__refers,c__BinaryPredicate)
).


% 	($domain refers 1 Entity)

% 	($domain refers 2 Entity)


% ($documentation refers EnglishLanguage "(&%refers ?OBJ1 ?OBJ2) means that ?OBJ1 
% mentions or includes a reference to ?OBJ2. Note that &%refers is 
% more general in meaning than &%represents, because presumably something 
% can represent something else only if it refers to this other thing.  
% For example, an article whose topic is a recent change in the price of 
% oil may refer to many other things, e.g. the general state of the economy, 
% the weather in California, the prospect of global warming, the options 
% for alternative energy sources, the stock prices of various oil companies, 
% etc.")


fof( mergeA1086, axiom,
	p__subrelation(c__names,c__refers)
).


% 	($domain names 1 SymbolicString)


% ($documentation names EnglishLanguage "(&%names ?STRING ?ENTITY) means that the thing ?ENTITY 
% has the &%SymbolicString ?STRING as its name.  Note that &%names and &%represents 
% are the two immediate &%subrelations of &%refers.  The predicate &%names is used 
% when the referring item is merely a tag without connotative content, while the 
% predicate &%represents is used for referring items that have such content.")


fof( mergeA1088, axiom,
	p__subrelation(c__uniqueIdentifier,c__names)
).


fof( mergeA1089, axiom,
	p__d__instance(c__uniqueIdentifier,c__SingleValuedRelation)
).



% ($documentation uniqueIdentifier EnglishLanguage "The class of &%names that uniquely identify 
% an instance of &%Entity.  Some examples of &%uniqueIdentifiers are the keys 
% of tables in database applications and the ISBN (International Standard Book 
% Number).")


fof( mergeA1090, axiom,
	p__subrelation(c__represents,c__refers)
).



% ($documentation represents EnglishLanguage "A very general semiotics &%Predicate.  
% (&%represents ?THING ?ENTITY) means that ?THING in some way indicates, 
% expresses, connotes, pictures, describes, etc. ?ENTITY.  The &%Predicates 
% &%containsInformation and &%realization are subrelations of &%represents.  
% Note that &%represents is a subrelation of &%refers, since something can 
% represent something else only if it refers to this other thing.  See the 
% documentation string for &%names.") 


fof( mergeA1091, axiom,
	p__d__instance(c__representsForAgent,c__TernaryPredicate)
).


% 	($domain representsForAgent 1 Entity)

% 	($domain representsForAgent 2 Entity)

% 	($domain representsForAgent 3 Agent)


% ($documentation representsForAgent EnglishLanguage "A very general predicate.  
% (&%representsForAgent ?ENTITY1 ?ENTITY2 ?AGENT) means that the ?AGENT 
% chooses to use ?ENTITY1 to 'stand for' ?ENTITY2.")


fof( mergeA1095, axiom,
	(![AGENT,REP,ENTITY]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__representsForAgent(REP,ENTITY,AGENT)
					)
				)
			)
			=>
			(
				p__represents(REP,ENTITY)
			)
		)
	)
).


fof( mergeA1096, axiom,
	p__d__instance(c__representsInLanguage,c__TernaryPredicate)
).


% 	($domain representsInLanguage 1 LinguisticExpression)

% 	($domain representsInLanguage 2 Entity)

% 	($domain representsInLanguage 3 Language)


% ($documentation representsInLanguage EnglishLanguage "A very general predicate.  
% (&%representsInLanguage ?THING ?ENTITY ?LANGUAGE) means that the 
% &%LinguisticExpression ?THING stands for ?ENTITY in the &%Language 
% ?LANGUAGE.")


fof( mergeA1100, axiom,
	(![LANGUAGE,REP,ENTITY]: 
		(
			(
				(
					(
						p__d__instance(LANGUAGE,c__Language)
					)
				 &
					(
						p__d__instance(REP,c__LinguisticExpression)
					)
				 &
					(
						p__representsInLanguage(REP,ENTITY,LANGUAGE)
					)
				)
			)
			=>
			(
				(?[AGENT]: 
					(
						(
							(
								p__d__instance(AGENT,c__Agent)
							)
						 &
							(
								p__representsForAgent(REP,ENTITY,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1101, axiom,
	p__subrelation(c__equivalentContentClass,c__subsumesContentClass)
).


fof( mergeA1102, axiom,
	p__d__instance(c__equivalentContentClass,c__EquivalenceRelation)
).


% 	($domainSubclass equivalentContentClass 1 ContentBearingPhysical)

% 	($domainSubclass equivalentContentClass 2 ContentBearingPhysical)


% ($documentation equivalentContentClass EnglishLanguage "A &%BinaryPredicate that relates two 
% subclasses of &%ContentBearingPhysical.  (&%equivalentContentClass ?CLASS1 
% ?CLASS2) means that the content expressed by each instance of ?CLASS1 is 
% also expressed by each instance of ?CLASS2, and vice versa.  An example 
% would be the relationship between English and Russian editions of Agatha 
% Christie's 'Murder on the Orient Express'.  Note that 
% (&%equivalentContentClass ?CLASS1 ?CLASS2) implies (&%subsumesContentClass 
% ?CLASS1 ?CLASS2) and (&%subsumesContentClass ?CLASS2 ?CLASS1).")


fof( mergeA1105, axiom,
	(![CLASS1,CLASS2]: 
		(
			(
				(
					(
						p__d__subclass(CLASS2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__subclass(CLASS1,c__ContentBearingPhysical)
					)
				)
			)
			=>
			(
				(
					(
						(
							p__subsumesContentClass(CLASS1,CLASS2)
						)
					 &
						(
							p__subsumesContentClass(CLASS2,CLASS1)
						)
					)
				)
				<=>
				(
					p__equivalentContentClass(CLASS1,CLASS2)
				)
			)
		)
	)
).


fof( mergeA1106, axiom,
	p__d__instance(c__subsumesContentClass,c__BinaryPredicate)
).


fof( mergeA1107, axiom,
	p__d__instance(c__subsumesContentClass,c__PartialOrderingRelation)
).


% 	($domainSubclass subsumesContentClass 1 ContentBearingPhysical)

% 	($domainSubclass subsumesContentClass 2 ContentBearingPhysical)


% ($documentation subsumesContentClass EnglishLanguage "A &%BinaryPredicate that relates two 
% subclasses of &%ContentBearingPhysical.  (&%subsumesContentClass ?CLASS1 
% ?CLASS2) means that the content expressed by each instance of ?CLASS2 is 
% also expressed by each instance of ?CLASS1.  Examples include the 
% relationship between a poem and one of its stanzas or between a book and 
% one of its chapters.  Note that this is a relation between subclasses of 
% &%ContentBearingObject, rather than instances.  If one wants to relate 
% instances, the &%Predicate &%subsumesContentInstance can be used.  Note 
% that &%subsumesContentClass is needed in many cases.  Consider, for 
% example, the relation between the King James edition of the Bible and its 
% Book of Genesis.  This relation holds for every copy of this edition and 
% not just for a single instance.")


fof( mergeA1110, axiom,
	(![CLASS2,CLASS1,OBJ2,INFO]: 
		(
			(
				(
					(
						p__d__subclass(CLASS2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__subclass(CLASS1,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(OBJ2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(INFO,c__Proposition)
					)
				 &
					(
						p__subsumesContentClass(CLASS1,CLASS2)
					)
				 &
					(
						p__d__instance(OBJ2,CLASS2)
					)
				 &
					(
						p__containsInformation(OBJ2,INFO)
					)
				)
			)
			=>
			(
				(?[OBJ1]: 
					(
						(
							(
								p__d__instance(OBJ1,c__ContentBearingPhysical)
							)
						 &
							(
								p__d__instance(OBJ1,CLASS1)
							)
						 &
							(
								p__containsInformation(OBJ1,INFO)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1111, axiom,
	p__subrelation(c__equivalentContentInstance,c__subsumesContentInstance)
).


fof( mergeA1112, axiom,
	p__d__instance(c__equivalentContentInstance,c__EquivalenceRelation)
).


% 	($domain equivalentContentInstance 1 ContentBearingPhysical)

% 	($domain equivalentContentInstance 2 ContentBearingPhysical)

fof( mergeA1115, axiom,
	p__relatedInternalConcept(c__equivalentContentInstance,c__equivalentContentClass)
).



% ($documentation equivalentContentInstance EnglishLanguage "A &%BinaryPredicate relating two 
% instances of &%ContentBearingPhysical.  (&%equivalentContentInstance 
% ?OBJ1 ?OBJ2) means that the content expressed by ?OBJ1 is identical to 
% the content expressed by ?OBJ2.  An example would be the relationship 
% between a handwritten draft of a letter to one's lawyer and a typed 
% copy of the same letter.  Note that (&%equivalentContentInstance ?OBJ1 
% ?OBJ2) implies (&%subsumesContentInstance ?OBJ1 ?OBJ2) and 
% (&%subsumesContentInstance ?OBJ2 ?OBJ2).")


fof( mergeA1116, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(OBJ1,c__ContentBearingPhysical)
					)
				)
			)
			=>
			(
				(
					(
						(
							p__subsumesContentInstance(OBJ1,OBJ2)
						)
					 &
						(
							p__subsumesContentInstance(OBJ2,OBJ1)
						)
					)
				)
				<=>
				(
					p__equivalentContentInstance(OBJ1,OBJ2)
				)
			)
		)
	)
).


fof( mergeA1117, axiom,
	p__d__instance(c__subsumesContentInstance,c__BinaryPredicate)
).


fof( mergeA1118, axiom,
	p__d__instance(c__subsumesContentInstance,c__PartialOrderingRelation)
).


% 	($domain subsumesContentInstance 1 ContentBearingPhysical)

% 	($domain subsumesContentInstance 2 ContentBearingPhysical)

fof( mergeA1121, axiom,
	p__relatedInternalConcept(c__subsumesContentInstance,c__subsumesContentClass)
).



% ($documentation subsumesContentInstance EnglishLanguage "A &%BinaryPredicate relating two 
% instances of &%ContentBearingPhysical.  (&%subsumesContentInstance ?OBJ1 ?OBJ2) 
% means that the content expressed by ?OBJ2 is part of the content expressed 
% by ?OBJ1.  An example is the relationship between a handwritten poem and 
% one of its stanzas.  Note that this is a relation between instances, 
% rather than &%Classes.  If one wants to assert a content relationship 
% between &%Classes, e.g. between the version of an intellectual work and a 
% part of that work, the relation &%subsumesContentClass should be used.")


fof( mergeA1122, axiom,
	(![OBJ2,OBJ1,INFO]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(OBJ1,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(INFO,c__Proposition)
					)
				 &
					(
						p__subsumesContentInstance(OBJ1,OBJ2)
					)
				 &
					(
						p__containsInformation(OBJ2,INFO)
					)
				)
			)
			=>
			(
				p__containsInformation(OBJ1,INFO)
			)
		)
	)
).


fof( mergeA1123, axiom,
	p__subrelation(c__realization,c__represents)
).


fof( mergeA1124, axiom,
	p__d__instance(c__realization,c__AsymmetricRelation)
).


% 	($domain realization 1 Process)

% 	($domain realization 2 Proposition)

fof( mergeA1127, axiom,
	p__relatedInternalConcept(c__realization,c__equivalentContentInstance)
).


fof( mergeA1128, axiom,
	p__relatedInternalConcept(c__realization,c__containsInformation)
).



% ($documentation realization EnglishLanguage "A subrelation of &%represents.  
% (&%realization ?PROCESS ?PROP) means that ?PROCESS is a Process which 
% expresses the content of ?PROP. Examples include a particular musical 
% performance, which realizes the content of a musical score, or the 
% reading of a poem.")


fof( mergeA1129, axiom,
	(![PROCESS,PROP]: 
		(
			(
				(
					(
						p__d__instance(PROP,c__Proposition)
					)
				 &
					(
						p__d__instance(PROCESS,c__Process)
					)
				 &
					(
						p__realization(PROCESS,PROP)
					)
				)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__ContentBearingObject)
							)
						 &
							(
								p__containsInformation(OBJ,PROP)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1130, axiom,
	p__d__instance(c__expressedInLanguage,c__BinaryPredicate)
).


fof( mergeA1131, axiom,
	p__d__instance(c__expressedInLanguage,c__AsymmetricRelation)
).


% 	($domain expressedInLanguage 1 LinguisticExpression)

% 	($domain expressedInLanguage 2 Language)


% ($documentation expressedInLanguage EnglishLanguage "(&%expressedInLanguage ?EXPRESS ?LANG) 
% means that the &%LinguisticExpression ?EXPRESS is part of the &%Language 
% ?LANG.")


fof( mergeA1134, axiom,
	(![EXPRESS,LANGUAGE]: 
		(
			(
				(
					(
						p__d__instance(LANGUAGE,c__Language)
					)
				 &
					(
						p__d__instance(EXPRESS,c__LinguisticExpression)
					)
				)
			)
			=>
			(
				(
					p__expressedInLanguage(EXPRESS,LANGUAGE)
				)
				<=>
				(
					(?[PROP]: 
						(
							p__representsInLanguage(EXPRESS,PROP,LANGUAGE)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1135, axiom,
	p__d__instance(c__subProposition,c__BinaryPredicate)
).


fof( mergeA1136, axiom,
	p__d__instance(c__subProposition,c__TransitiveRelation)
).


fof( mergeA1137, axiom,
	p__d__instance(c__subProposition,c__IrreflexiveRelation)
).


% 	($domain subProposition 1 Proposition)

% 	($domain subProposition 2 Proposition)


% ($documentation subProposition EnglishLanguage "(&%subProposition ?PROP1 ?PROP2) means that 
% ?PROP1 is a &%Proposition which is a proper part of the &%Proposition ?PROP2.  
% In other words, &%subProposition is the analogue of &%properPart for chunks 
% of abstract content.")


fof( mergeA1140, axiom,
	(![PROP1,PROP2,OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(PROP2,c__Proposition)
					)
				 &
					(
						p__d__instance(PROP1,c__Proposition)
					)
				 &
					(
						p__d__instance(OBJ1,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(OBJ2,c__ContentBearingPhysical)
					)
				 &
					(
						p__subProposition(PROP1,PROP2)
					)
				 &
					(
						p__containsInformation(OBJ1,PROP1)
					)
				 &
					(
						p__containsInformation(OBJ2,PROP2)
					)
				)
			)
			=>
			(
				p__subsumesContentInstance(OBJ2,OBJ1)
			)
		)
	)
).


fof( mergeA1141, axiom,
	p__subrelation(c__subPlan,c__subProposition)
).


fof( mergeA1142, axiom,
	p__d__instance(c__subPlan,c__TransitiveRelation)
).


fof( mergeA1143, axiom,
	p__d__instance(c__subPlan,c__IrreflexiveRelation)
).


% 	($domain subPlan 1 Plan)

% 	($domain subPlan 2 Plan)


% ($documentation subPlan EnglishLanguage "(&%subPlan ?PLAN1 ?PLAN2) means that ?PLAN1 
% is a &%Plan which is a proper part of ?PLAN2.  This relation is generally 
% used to relate a supporting &%Plan to the overall &%Plan in a particular 
% context.")


fof( mergeA1146, axiom,
	p__d__instance(c__uses,c__BinaryPredicate)
).


fof( mergeA1147, axiom,
	p__d__instance(c__uses,c__AsymmetricRelation)
).


% 	($domain uses 1 Object)

% 	($domain uses 2 Agent)


% ($documentation uses EnglishLanguage "(&%uses ?OBJECT AGENT) means that ?OBJECT is used by 
% ?AGENT as an instrument in an unspecified &%Process.  This &%Predicate, 
% as its corresponding axiom indicates, is a composition of the &%CaseRoles 
% &%agent and &%instrument.")


fof( mergeA1150, axiom,
	(![AGENT,OBJ]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__uses(OBJ,AGENT)
					)
				)
			)
			=>
			(
				(?[PROC]: 
					(
						(
							(
								p__d__instance(PROC,c__Process)
							)
						 &
							(
								p__agent(PROC,AGENT)
							)
						 &
							(
								p__instrument(PROC,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; END FILE
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;;
% ;;  NUMERIC FUNCTIONS   ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;;
% ;;
% ;; INCLUDES 'STRUCTURAL ONTOLOGY'
% ;; INCLUDES 'BASE ONTOLOGY'
% )

fof( mergeA1151, axiom,
	p__d__instance(c__MultiplicationFn,c__BinaryFunction)
).


fof( mergeA1152, axiom,
	p__d__instance(c__MultiplicationFn,c__AssociativeFunction)
).


fof( mergeA1153, axiom,
	p__d__instance(c__MultiplicationFn,c__CommutativeFunction)
).


fof( mergeA1154, axiom,
	p__d__instance(c__MultiplicationFn,c__RelationExtendedToQuantities)
).


fof( mergeA1155, axiom,
	p__d__instance(c__MultiplicationFn,c__TotalValuedRelation)
).


% 	($domain MultiplicationFn 1 Quantity)

% 	($domain MultiplicationFn 2 Quantity)

% 	($range MultiplicationFn Quantity)


% ($documentation MultiplicationFn EnglishLanguage "If ?NUMBER1 and ?NUMBER2 are &%Numbers, 
% then (&%MultiplicationFn ?NUMBER1 ?NUMBER2) is the arithmetical product 
% of these numbers.")


fof( mergeA1159, axiom,
	p__d__instance(c__AdditionFn,c__BinaryFunction)
).


fof( mergeA1160, axiom,
	p__d__instance(c__AdditionFn,c__AssociativeFunction)
).


fof( mergeA1161, axiom,
	p__d__instance(c__AdditionFn,c__CommutativeFunction)
).


fof( mergeA1162, axiom,
	p__d__instance(c__AdditionFn,c__RelationExtendedToQuantities)
).


fof( mergeA1163, axiom,
	p__d__instance(c__AdditionFn,c__TotalValuedRelation)
).


% 	($domain AdditionFn 1 Quantity)

% 	($domain AdditionFn 2 Quantity)

% 	($range AdditionFn Quantity)


% ($documentation AdditionFn EnglishLanguage "If ?NUMBER1 and ?NUMBER2 are &%Numbers, then 
% (&%AdditionFn ?NUMBER1 ?NUMBER2) is the arithmetical sum of these 
% numbers.")


fof( mergeA1167, axiom,
	(![NUMBER]: 
		(
			(
				p__d__instance(NUMBER,c__Integer)
			)
			=>
			(
				( f__SuccessorFn1(NUMBER) = f__AdditionFn2(NUMBER,c__1) )
			)
		)
	)
).


fof( mergeA1168, axiom,
	p__d__instance(c__SubtractionFn,c__BinaryFunction)
).


fof( mergeA1169, axiom,
	p__d__instance(c__SubtractionFn,c__AssociativeFunction)
).


fof( mergeA1170, axiom,
	p__d__instance(c__SubtractionFn,c__RelationExtendedToQuantities)
).


fof( mergeA1171, axiom,
	p__d__instance(c__SubtractionFn,c__TotalValuedRelation)
).


% 	($domain SubtractionFn 1 Quantity)

% 	($domain SubtractionFn 2 Quantity)

% 	($range SubtractionFn Quantity)


% ($documentation SubtractionFn EnglishLanguage "If ?NUMBER1 and ?NUMBER2 are &%Numbers, 
% then (&%SubtractionFn ?NUMBER1 ?NUMBER2) is the arithmetical difference 
% between ?NUMBER1 and ?NUMBER2, i.e. ?NUMBER1 minus ?NUMBER2.  An 
% exception occurs when ?NUMBER1 is equal to 0, in which case 
% (&%SubtractionFn ?NUMBER1 ?NUMBER2) is the negation of ?NUMBER2.")


fof( mergeA1175, axiom,
	(![NUMBER]: 
		(
			(
				p__d__instance(NUMBER,c__Integer)
			)
			=>
			(
				( f__PredecessorFn1(NUMBER) = f__SubtractionFn2(NUMBER,c__1) )
			)
		)
	)
).


fof( mergeA1176, axiom,
	p__d__instance(c__DivisionFn,c__BinaryFunction)
).


fof( mergeA1177, axiom,
	p__d__instance(c__DivisionFn,c__AssociativeFunction)
).


fof( mergeA1178, axiom,
	p__d__instance(c__DivisionFn,c__RelationExtendedToQuantities)
).


fof( mergeA1179, axiom,
	p__d__instance(c__DivisionFn,c__PartialValuedRelation)
).


% 	($domain DivisionFn 1 Quantity)

% 	($domain DivisionFn 2 Quantity)

% 	($range DivisionFn Quantity)


% ($documentation DivisionFn EnglishLanguage "If ?NUMBER1 and ?NUMBER2 are &%Numbers, then 
% (&%DivisionFn ?NUMBER1 ?NUMBER2) is the result of dividing ?NUMBER1 by 
% ?NUMBER2.  Note that when ?NUMBER1 = 1 (&%DivisionFn ?NUMBER1 ?NUMBER2) 
% is the reciprocal of ?NUMBER2.  Note too that (&%DivisionFn ?NUMBER1 
% ?NUMBER2) is undefined when ?NUMBER2 = 0.")


fof( mergeA1183, axiom,
	(![NUMBER]: 
		(
			(
				p__d__instance(NUMBER,c__RationalNumber)
			)
			=>
			(
				(?[INT1,INT2]: 
					(
						(
							(
								p__d__instance(INT1,c__Integer)
							)
						 &
							(
								p__d__instance(INT2,c__Integer)
							)
						 &
							(
								( NUMBER = f__DivisionFn2(INT1,INT2) )
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1184, axiom,
	p__d__instance(c__AbsoluteValueFn,c__UnaryFunction)
).


fof( mergeA1185, axiom,
	p__d__instance(c__AbsoluteValueFn,c__TotalValuedRelation)
).


% 	($domain AbsoluteValueFn 1 RealNumber)

% 	($range AbsoluteValueFn NonnegativeRealNumber)


% ($documentation AbsoluteValueFn EnglishLanguage "The value of (&%AbsoluteValueFn ?NUMBER) 
% is the absolute value of the &%RealNumber ?NUMBER.")


fof( mergeA1188, axiom,
	(![NUMBER2,NUMBER1]: 
		(
			(
				(
					(
						p__d__instance(NUMBER1,c__RealNumber)
					)
				 &
					(
						p__d__instance(NUMBER2,c__NonnegativeRealNumber)
					)
				)
			)
			=>
			(
				(
					(
						(
							( f__AbsoluteValueFn1(NUMBER1) = NUMBER2 )
						)
					 &
						(
							p__d__instance(NUMBER1,c__RealNumber)
						)
					 &
						(
							p__d__instance(NUMBER2,c__RealNumber)
						)
					)
				)
				<=>
				(
					(
						(
							(
								p__d__instance(NUMBER1,c__NonnegativeRealNumber)
							)
						 &
							(
								( NUMBER1 = NUMBER2 )
							)
						)
					 |
						(
							(
								p__d__instance(NUMBER1,c__NegativeRealNumber)
							)
						 &
							(
								( NUMBER2 = f__SubtractionFn2(c__0,NUMBER1) )
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1189, axiom,
	p__d__instance(c__CeilingFn,c__UnaryFunction)
).


fof( mergeA1190, axiom,
	p__d__instance(c__CeilingFn,c__TotalValuedRelation)
).


% 	($domain CeilingFn 1 RealNumber)

% 	($range CeilingFn Integer)


% ($documentation CeilingFn EnglishLanguage "(&%CeilingFn ?NUMBER) returns the smallest 
% &%Integer greater than or equal to the &%RealNumber ?NUMBER.")


fof( mergeA1193, axiom,
	(![NUMBER,INT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(INT,c__Integer)
					)
				 &
					(
						( f__CeilingFn1(NUMBER) = INT )
					)
				)
			)
			=>
			(
				(![OTHERINT]: 
					(
						(
							~ (
								p__d__instance(OTHERINT,c__Quantity)
							)
						 |
							~ (
								p__d__instance(OTHERINT,c__Integer)
							)
						 |
							~ (
								p__greaterThanOrEqualTo(OTHERINT,NUMBER)
							)
						 |
							~ (
								p__lessThan(OTHERINT,INT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1194, axiom,
	p__d__instance(c__CosineFn,c__UnaryFunction)
).


fof( mergeA1195, axiom,
	p__d__instance(c__CosineFn,c__TotalValuedRelation)
).


% 	($domain CosineFn 1 PlaneAngleMeasure)

% 	($range CosineFn RealNumber)


% ($documentation CosineFn EnglishLanguage "(&%CosineFn ?DEGREE) returns the cosine of the 
% &%PlaneAngleMeasure ?DEGREE.  The cosine of ?DEGREE is the ratio of the 
% side next to ?DEGREE to the hypotenuse in a right-angled triangle.")


fof( mergeA1198, axiom,
	p__d__instance(c__DenominatorFn,c__UnaryFunction)
).


fof( mergeA1199, axiom,
	p__d__instance(c__DenominatorFn,c__TotalValuedRelation)
).


% 	($domain DenominatorFn 1 RealNumber)

% 	($range DenominatorFn Integer)


% ($documentation DenominatorFn EnglishLanguage "(&%DenominatorFn ?NUMBER) returns the 
% denominator of the canonical reduced form of the &%RealNumber ?NUMBER.")


fof( mergeA1202, axiom,
	p__d__instance(c__ExponentiationFn,c__BinaryFunction)
).


fof( mergeA1203, axiom,
	p__d__instance(c__ExponentiationFn,c__RelationExtendedToQuantities)
).


fof( mergeA1204, axiom,
	p__d__instance(c__ExponentiationFn,c__TotalValuedRelation)
).


% 	($domain ExponentiationFn 1 Quantity)

% 	($domain ExponentiationFn 2 Integer)

% 	($range ExponentiationFn Quantity)


% ($documentation ExponentiationFn EnglishLanguage "(&%ExponentiationFn ?NUMBER ?INT) returns 
% the &%RealNumber ?NUMBER raised to the power of the &%Integer ?INT.")


fof( mergeA1208, axiom,
	p__d__instance(c__FloorFn,c__UnaryFunction)
).


fof( mergeA1209, axiom,
	p__d__instance(c__FloorFn,c__TotalValuedRelation)
).


% 	($domain FloorFn 1 RealNumber)

% 	($range FloorFn Integer)


% ($documentation FloorFn EnglishLanguage "(&%FloorFn ?NUMBER) returns the largest &%Integer 
% less than or equal to the &%RealNumber ?NUMBER.")


fof( mergeA1212, axiom,
	(![NUMBER,INT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(INT,c__Integer)
					)
				 &
					(
						( f__FloorFn1(NUMBER) = INT )
					)
				)
			)
			=>
			(
				(![OTHERINT]: 
					(
						(
							~ (
								p__d__instance(OTHERINT,c__Quantity)
							)
						 |
							~ (
								p__d__instance(OTHERINT,c__Integer)
							)
						 |
							~ (
								p__lessThanOrEqualTo(OTHERINT,NUMBER)
							)
						 |
							~ (
								p__greaterThan(OTHERINT,INT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1213, axiom,
	p__d__instance(c__GreatestCommonDivisorFn,c__Function)
).


fof( mergeA1214, axiom,
	p__d__instance(c__GreatestCommonDivisorFn,c__VariableArityRelation)
).


fof( mergeA1215, axiom,
	p__d__instance(c__GreatestCommonDivisorFn,c__PartialValuedRelation)
).


% 	($range GreatestCommonDivisorFn Integer)


% ($documentation GreatestCommonDivisorFn EnglishLanguage "(&%GreatestCommonDivisorFn 
% ?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the greatest common divisor of 
% ?NUMBER1 through ?NUMBER.")


% 	(forall (@ROW ?NUMBER)
% 		(=> 
% 			(equal (GreatestCommonDivisorFn @ROW) ?NUMBER)
% 			(forall (?ELEMENT)
% 				(=> 
% 					(inList ?ELEMENT (ListFn @ROW))
% 					(equal (RemainderFn ?ELEMENT ?NUMBER) 0)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?NUMBER @ROW)
% 		(=> 
% 			(equal (GreatestCommonDivisorFn @ROW) ?NUMBER)
% 			(not 
% 				(exists (?GREATER)
% 					(and 
% 						(greaterThan ?GREATER ?NUMBER)
% 						(forall (?ELEMENT)
% 							(=> 
% 								(inList ?ELEMENT (ListFn @ROW))
% 								(equal (RemainderFn ?ELEMENT ?GREATER) 0)
% 							)
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)


% ($documentation multiplicativeFactor EnglishLanguage "(multiplicativeFactor ?NUMBER1 ?NUMBER2) 
% means that ?NUMBER1 is a factor of ?NUMBER2, i.e. ?NUMBER1 can be multiplied by 
% some &%Integer to give ?NUMBER2 as a result.")


fof( mergeA1219, axiom,
	p__d__instance(c__multiplicativeFactor,c__BinaryPredicate)
).


fof( mergeA1220, axiom,
	p__d__instance(c__multiplicativeFactor,c__TransitiveRelation)
).


% 	($domain multiplicativeFactor 1 Integer)

% 	($domain multiplicativeFactor 2 Integer)

fof( mergeA1223, axiom,
	(![N2,N1]: 
		(
			(
				(
					(
						p__d__instance(N2,c__Integer)
					)
				 &
					(
						p__d__instance(N1,c__Integer)
					)
				 &
					(
						p__multiplicativeFactor(N1,N2)
					)
				)
			)
			=>
			(
				(?[I]: 
					(
						(
							(
								p__d__instance(I,c__Integer)
							)
						 &
							(
								( N2 = f__MultiplicationFn2(N1,I) )
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1224, axiom,
	p__d__instance(c__ImaginaryPartFn,c__UnaryFunction)
).


fof( mergeA1225, axiom,
	p__d__instance(c__ImaginaryPartFn,c__TotalValuedRelation)
).


% 	($domain ImaginaryPartFn 1 ComplexNumber)

% 	($range ImaginaryPartFn ImaginaryNumber)


% ($documentation ImaginaryPartFn EnglishLanguage "(&%ImaginaryPartFn ?NUMBER) returns 
% the part of ?NUMBER that has the square root of -1 as its factor.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: equal is reflexive, thus the axiom is a tautology
% ;;
% ;;(=>
% ;;   ($instance ?NUMBER ComplexNumber)
% ;;   (exists (?PART1 ?PART2)
% ;;      (and
% ;;         (equal ?PART1 (RealNumberFn ?NUMBER))
% ;;         (equal ?PART2 (ImaginaryPartFn ?NUMBER)))))
% )

fof( mergeA1228, axiom,
	p__d__instance(c__IntegerSquareRootFn,c__UnaryFunction)
).


fof( mergeA1229, axiom,
	p__d__instance(c__IntegerSquareRootFn,c__PartialValuedRelation)
).


% 	($domain IntegerSquareRootFn 1 RealNumber)

% 	($range IntegerSquareRootFn NonnegativeInteger)


% ($documentation IntegerSquareRootFn EnglishLanguage "(&%IntegerSquareRootFn ?NUMBER) 
% returns the integer square root of ?NUMBER.")


fof( mergeA1232, axiom,
	p__d__instance(c__LeastCommonMultipleFn,c__Function)
).


fof( mergeA1233, axiom,
	p__d__instance(c__LeastCommonMultipleFn,c__PartialValuedRelation)
).


fof( mergeA1234, axiom,
	p__d__instance(c__LeastCommonMultipleFn,c__VariableArityRelation)
).


% 	($range LeastCommonMultipleFn Integer)


% ($documentation LeastCommonMultipleFn EnglishLanguage "(&%LeastCommonMultipleFn 
% ?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the least common multiple of 
% ?NUMBER1 through ?NUMBER.")


% 	(forall (@ROW ?NUMBER)
% 		(=> 
% 			(equal (LeastCommonMultipleFn @ROW) ?NUMBER)
% 			(forall (?ELEMENT)
% 				(=> 
% 					(inList ?ELEMENT (ListFn @ROW))
% 					(equal (RemainderFn ?NUMBER ?ELEMENT) 0)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?NUMBER @ROW)
% 		(=> 
% 			(equal (LeastCommonMultipleFn @ROW) ?NUMBER)
% 			(not 
% 				(exists (?LESS)
% 					(and 
% 						(lessThan ?LESS ?NUMBER)
% 						(forall (?ELEMENT)
% 							(=> 
% 								(inList ?ELEMENT (ListFn @ROW))
% 								(equal (RemainderFn ?LESS ?ELEMENT) 0)
% 							)
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA1238, axiom,
	p__d__instance(c__LogFn,c__BinaryFunction)
).


% 	($domain LogFn 1 RealNumber)

% 	($domain LogFn 2 PositiveInteger)

% 	($range LogFn RealNumber)


% ($documentation LogFn EnglishLanguage "(LogFn ?NUMBER ?INT) returns the logarithm of the 
% &%RealNumber ?NUMBER in the base denoted by the &%Integer ?INT.")


fof( mergeA1242, axiom,
	p__d__instance(c__MaxFn,c__BinaryFunction)
).


fof( mergeA1243, axiom,
	p__d__instance(c__MaxFn,c__AssociativeFunction)
).


fof( mergeA1244, axiom,
	p__d__instance(c__MaxFn,c__CommutativeFunction)
).


fof( mergeA1245, axiom,
	p__d__instance(c__MaxFn,c__RelationExtendedToQuantities)
).


fof( mergeA1246, axiom,
	p__d__instance(c__MaxFn,c__TotalValuedRelation)
).


% 	($domain MaxFn 1 Quantity)

% 	($domain MaxFn 2 Quantity)

% 	($range MaxFn Quantity)


% ($documentation MaxFn EnglishLanguage "(&%MaxFn ?NUMBER1 ?NUMBER2) is the largest of 
% ?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2, 
% &%MaxFn returns one of its arguments.")


fof( mergeA1250, axiom,
	(![NUMBER1,NUMBER,NUMBER2]: 
		(
			(
				(
					(
						p__d__instance(NUMBER2,c__Quantity)
					)
				 &
					(
						p__d__instance(NUMBER1,c__Quantity)
					)
				 &
					(
						p__d__instance(NUMBER,c__Quantity)
					)
				 &
					(
						( f__MaxFn2(NUMBER1,NUMBER2) = NUMBER )
					)
				)
			)
			=>
			(
				(
					(
						(
							( NUMBER = NUMBER1 )
						)
					 &
						(
							p__greaterThan(NUMBER1,NUMBER2)
						)
					)
				 |
					(
						(
							( NUMBER = NUMBER2 )
						)
					 &
						(
							p__greaterThan(NUMBER2,NUMBER1)
						)
					)
				 |
					(
						(
							( NUMBER = NUMBER1 )
						)
					 &
						(
							( NUMBER = NUMBER2 )
						)
					)
				)
			)
		)
	)
).


fof( mergeA1251, axiom,
	p__d__instance(c__MinFn,c__BinaryFunction)
).


fof( mergeA1252, axiom,
	p__d__instance(c__MinFn,c__AssociativeFunction)
).


fof( mergeA1253, axiom,
	p__d__instance(c__MinFn,c__CommutativeFunction)
).


fof( mergeA1254, axiom,
	p__d__instance(c__MinFn,c__RelationExtendedToQuantities)
).


fof( mergeA1255, axiom,
	p__d__instance(c__MinFn,c__TotalValuedRelation)
).


% 	($domain MinFn 1 Quantity)

% 	($domain MinFn 2 Quantity)

% 	($range MinFn Quantity)


% ($documentation MinFn EnglishLanguage "(&%MinFn ?NUMBER1 ?NUMBER2) is the smallest of 
% ?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2, 
% &%MinFn returns one of its arguments.")


fof( mergeA1259, axiom,
	(![NUMBER1,NUMBER,NUMBER2]: 
		(
			(
				(
					(
						p__d__instance(NUMBER2,c__Quantity)
					)
				 &
					(
						p__d__instance(NUMBER1,c__Quantity)
					)
				 &
					(
						p__d__instance(NUMBER,c__Quantity)
					)
				 &
					(
						( f__MinFn2(NUMBER1,NUMBER2) = NUMBER )
					)
				)
			)
			=>
			(
				(
					(
						(
							( NUMBER = NUMBER1 )
						)
					 &
						(
							p__lessThan(NUMBER1,NUMBER2)
						)
					)
				 |
					(
						(
							( NUMBER = NUMBER2 )
						)
					 &
						(
							p__lessThan(NUMBER2,NUMBER1)
						)
					)
				 |
					(
						(
							( NUMBER = NUMBER1 )
						)
					 &
						(
							( NUMBER = NUMBER2 )
						)
					)
				)
			)
		)
	)
).


fof( mergeA1260, axiom,
	p__d__instance(c__NumeratorFn,c__UnaryFunction)
).


fof( mergeA1261, axiom,
	p__d__instance(c__NumeratorFn,c__TotalValuedRelation)
).


% 	($domain NumeratorFn 1 RealNumber)

% 	($range NumeratorFn Integer)


% ($documentation NumeratorFn EnglishLanguage "(&%NumeratorFn ?NUMBER) returns the numerator 
% of the canonical reduced form ?NUMBER.")


fof( mergeA1264, axiom,
	p__d__instance(c__Pi,c__PositiveRealNumber)
).



% ($documentation Pi EnglishLanguage "&%Pi is the &%RealNumber that 
% is the ratio of the perimeter of a circle to its diameter.  It is 
% approximately equal to 3.141592653589793.")


fof( mergeA1265, axiom,
	p__d__instance(c__NumberE,c__PositiveRealNumber)
).



% ($documentation NumberE EnglishLanguage "&%NumberE is the &%RealNumber that is the base for 
% natural logarithms.  It is approximately equal to 2.718282.")


fof( mergeA1266, axiom,
	p__d__instance(c__RationalNumberFn,c__UnaryFunction)
).


% 	($domain RationalNumberFn 1 Number)

% 	($range RationalNumberFn RationalNumber)


% ($documentation RationalNumberFn EnglishLanguage "(&%RationalNumberFn ?NUMBER) returns 
% the rational representation of ?NUMBER.")


fof( mergeA1269, axiom,
	p__d__instance(c__RealNumberFn,c__UnaryFunction)
).


% 	($domain RealNumberFn 1 Number)

% 	($range RealNumberFn RealNumber)


% ($documentation RealNumberFn EnglishLanguage "(RealNumberFn ?NUMBER) returns the part of 
% ?NUMBER that is a &%RealNumber.")


fof( mergeA1272, axiom,
	p__d__instance(c__ReciprocalFn,c__UnaryFunction)
).


fof( mergeA1273, axiom,
	p__d__instance(c__ReciprocalFn,c__RelationExtendedToQuantities)
).


fof( mergeA1274, axiom,
	p__d__instance(c__ReciprocalFn,c__TotalValuedRelation)
).


% 	($domain ReciprocalFn 1 Quantity)

% 	($range ReciprocalFn Quantity)


% ($documentation ReciprocalFn EnglishLanguage "(ReciprocalFn ?NUMBER) is the reciprocal 
% element of ?NUMBER with respect to the multiplication operator 
% (&%MultiplicationFn), i.e. 1/?NUMBER.  Not all numbers have a reciprocal 
% element.  For example the number 0 does not.  If a number ?NUMBER has a 
% reciprocal ?RECIP, then the product of ?NUMBER and ?RECIP will be 
% 1, e.g. 3*1/3 = 1.  The reciprocal of an element is &%equal to 
% applying the &%ExponentiationFn function to the element to the power 
% -1.")


% ($comment 
% ;; (=>
% ;;    ($instance ?NUMBER Quantity)
% ;;    (equal (ReciprocalFn ?NUMBER) (ExponentiationFn ?NUMBER -1)))
% )

fof( mergeA1277, axiom,
	(![NUMBER]: 
		(
			(
				p__d__instance(NUMBER,c__Quantity)
			)
			=>
			(
				( c__1 = f__MultiplicationFn2(NUMBER,f__ReciprocalFn1(NUMBER)) )
			)
		)
	)
).


fof( mergeA1278, axiom,
	p__d__instance(c__RemainderFn,c__BinaryFunction)
).


fof( mergeA1279, axiom,
	p__d__instance(c__RemainderFn,c__RelationExtendedToQuantities)
).


fof( mergeA1280, axiom,
	p__d__instance(c__RemainderFn,c__PartialValuedRelation)
).


% 	($domain RemainderFn 1 Quantity)

% 	($domain RemainderFn 2 Quantity)

% 	($range RemainderFn Quantity)


% ($documentation RemainderFn EnglishLanguage "(RemainderFn ?NUMBER ?DIVISOR) is the 
% remainder of the number ?NUMBER divided by the number ?DIVISOR.  
% The result has the same sign as ?DIVISOR.")


fof( mergeA1284, axiom,
	(![NUMBER2,NUMBER,NUMBER1]: 
		(
			(
				(
					(
						p__d__instance(NUMBER2,c__Quantity)
					)
				 &
					(
						p__d__instance(NUMBER1,c__Quantity)
					)
				 &
					(
						p__d__instance(NUMBER,c__Quantity)
					)
				)
			)
			=>
			(
				(
					( f__RemainderFn2(NUMBER1,NUMBER2) = NUMBER )
				)
				<=>
				(
					( f__AdditionFn2(f__MultiplicationFn2(f__FloorFn1(f__DivisionFn2(NUMBER1,NUMBER2)),NUMBER2),NUMBER) = NUMBER1 )
				)
			)
		)
	)
).


fof( mergeA1285, axiom,
	(![NUMBER1,NUMBER2,NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER2,c__RealNumber)
					)
				 &
					(
						p__d__instance(NUMBER1,c__Quantity)
					)
				 &
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( f__RemainderFn2(NUMBER1,NUMBER2) = NUMBER )
					)
				)
			)
			=>
			(
				( f__SignumFn1(NUMBER2) = f__SignumFn1(NUMBER) )
			)
		)
	)
).


fof( mergeA1286, axiom,
	(![NUMBER]: 
		(
			(
				p__d__instance(NUMBER,c__EvenInteger)
			)
			=>
			(
				( f__RemainderFn2(NUMBER,c__2) = c__0 )
			)
		)
	)
).


fof( mergeA1287, axiom,
	(![NUMBER]: 
		(
			(
				p__d__instance(NUMBER,c__OddInteger)
			)
			=>
			(
				( f__RemainderFn2(NUMBER,c__2) = c__1 )
			)
		)
	)
).


fof( mergeA1288, axiom,
	(![PRIME,NUMBER]: 
		(
			(
				(
					(
						p__d__instance(PRIME,c__PrimeNumber)
					)
				 &
					(
						p__d__instance(NUMBER,c__Quantity)
					)
				 &
					(
						( f__RemainderFn2(PRIME,NUMBER) = c__0 )
					)
				)
			)
			=>
			(
				(
					( NUMBER = c__1 )
				 |
					( NUMBER = PRIME )
				)
			)
		)
	)
).


fof( mergeA1289, axiom,
	p__d__instance(c__RoundFn,c__UnaryFunction)
).


fof( mergeA1290, axiom,
	p__d__instance(c__RoundFn,c__RelationExtendedToQuantities)
).


fof( mergeA1291, axiom,
	p__d__instance(c__RoundFn,c__TotalValuedRelation)
).


% 	($domain RoundFn 1 Quantity)

% 	($range RoundFn Quantity)


% ($documentation RoundFn EnglishLanguage "(&%RoundFn ?NUMBER) is the &%Integer closest 
% to ?NUMBER on the number line.  If ?NUMBER is halfway between two 
% &%Integers (for example 3.5), it denotes the larger &%Integer.")


% ($comment 
% ;; (=>
% ;;    (equal (RoundFn ?NUMBER1) ?NUMBER2)
% ;;    (or
% ;;       (=>
% ;;          (lessThan (SubtractionFn ?NUMBER1 (FloorFn ?NUMBER1)) 0.5)
% ;;          (equal ?NUMBER2 (FloorFn ?NUMBER1)))
% ;;       (=>
% ;;          (greaterThanOrEqualTo (SubtractionFn ?NUMBER1 (FloorFn ?NUMBER1)) 0.5)
% ;;          (equal ?NUMBER2 (CeilingFn ?NUMBER1)))))
% )

fof( mergeA1294, axiom,
	p__d__instance(c__SignumFn,c__UnaryFunction)
).


fof( mergeA1295, axiom,
	p__d__instance(c__SignumFn,c__TotalValuedRelation)
).


% 	($domain SignumFn 1 RealNumber)

% 	($range SignumFn Integer)


% ($documentation SignumFn EnglishLanguage "(SignumFn ?NUMBER) denotes the sign of ?NUMBER.  
% This is one of the following values:  -1, 1, or 0.")


fof( mergeA1298, axiom,
	(![NUMBER]: 
		(
			(
				p__d__instance(NUMBER,c__NonnegativeRealNumber)
			)
			=>
			(
				(
					( f__SignumFn1(NUMBER) = c__1 )
				 |
					( f__SignumFn1(NUMBER) = c__0 )
				)
			)
		)
	)
).


fof( mergeA1299, axiom,
	(![NUMBER]: 
		(
			(
				p__d__instance(NUMBER,c__PositiveRealNumber)
			)
			=>
			(
				( f__SignumFn1(NUMBER) = c__1 )
			)
		)
	)
).


% ($comment 
% ;; (=>
% ;;    ($instance ?NUMBER NegativeRealNumber)
% ;;    (equal (SignumFn ?NUMBER) -1))
% )

fof( mergeA1300, axiom,
	p__d__instance(c__SineFn,c__UnaryFunction)
).


fof( mergeA1301, axiom,
	p__d__instance(c__SineFn,c__TotalValuedRelation)
).


% 	($domain SineFn 1 PlaneAngleMeasure)

% 	($range SineFn RealNumber)


% ($documentation SineFn EnglishLanguage "(&%SineFn ?DEGREE) is the sine of the 
% &%PlaneAngleMeasure ?DEGREE.  The sine of ?DEGREE is the ratio of the side 
% opposite ?DEGREE to the hypotenuse in a right-angled triangle.")


fof( mergeA1304, axiom,
	p__d__instance(c__SquareRootFn,c__UnaryFunction)
).


% 	($domain SquareRootFn 1 RealNumber)

% 	($range SquareRootFn Number)


% ($documentation SquareRootFn EnglishLanguage "(SquareRootFn ?NUMBER) is the principal 
% square root of ?NUMBER.")


fof( mergeA1307, axiom,
	(![NUMBER2,NUMBER1]: 
		(
			(
				(
					(
						p__d__instance(NUMBER1,c__RealNumber)
					)
				 &
					(
						p__d__instance(NUMBER2,c__Number)
					)
				 &
					(
						( f__SquareRootFn1(NUMBER1) = NUMBER2 )
					)
				)
			)
			=>
			(
				( f__MultiplicationFn2(NUMBER2,NUMBER2) = NUMBER1 )
			)
		)
	)
).


fof( mergeA1308, axiom,
	p__d__instance(c__TangentFn,c__UnaryFunction)
).


fof( mergeA1309, axiom,
	p__d__instance(c__TangentFn,c__TotalValuedRelation)
).


% 	($domain TangentFn 1 PlaneAngleMeasure)

% 	($range TangentFn RealNumber)


% ($documentation TangentFn EnglishLanguage "(&%TangentFn ?DEGREE) is the tangent of the 
% &%PlaneAngleMeasure ?DEGREE.  The tangent of ?DEGREE is the ratio of 
% the side opposite ?DEGREE to the side next to ?DEGREE in a right-angled 
% triangle.")


fof( mergeA1312, axiom,
	(![DEGREE]: 
		(
			(
				p__d__instance(DEGREE,c__PlaneAngleMeasure)
			)
			=>
			(
				( f__TangentFn1(DEGREE) = f__DivisionFn2(f__SineFn1(DEGREE),f__CosineFn1(DEGREE)) )
			)
		)
	)
).


fof( mergeA1313, axiom,
	p__d__instance(c__identityElement,c__BinaryPredicate)
).


fof( mergeA1314, axiom,
	p__d__instance(c__identityElement,c__AsymmetricRelation)
).


% 	($domain identityElement 1 BinaryFunction)

% 	($domain identityElement 2 Entity)


% ($documentation identityElement EnglishLanguage "An object ?ID is the identity element 
% for BinaryFunction ?FUNCTION just in case, for every instance ?INST, 
% applying ?FUNCTION to ?INST and ?ID results in ?INST.")


% 	(forall (?CLASS ?FUNCTION ?ID)
% 		(=> 
% 			(identityElement ?FUNCTION ?ID)
% 			(forall (?INST)
% 				(=> 
% 					(and 
% 						(domain ?FUNCTION 1 ?CLASS)
% 						($instance ?INST ?CLASS)
% 					)
% 					(equal (AssignmentFn ?FUNCTION ?ID ?INST) ?INST)
% 				)
% 			)
% 		)
% 	)

fof( mergeA1318, axiom,
	p__identityElement(c__MultiplicationFn,c__1)
).


fof( mergeA1319, axiom,
	p__identityElement(c__AdditionFn,c__0)
).


fof( mergeA1320, axiom,
	p__identityElement(c__SubtractionFn,c__0)
).


fof( mergeA1321, axiom,
	p__identityElement(c__DivisionFn,c__1)
).


fof( mergeA1322, axiom,
	p__d__instance(c__SuccessorFn,c__UnaryFunction)
).


fof( mergeA1323, axiom,
	p__d__instance(c__SuccessorFn,c__TotalValuedRelation)
).


% 	($domain SuccessorFn 1 Integer)

% 	($range SuccessorFn Integer)


% ($documentation SuccessorFn EnglishLanguage "A &%UnaryFunction that maps an &%Integer to 
% its successor, e.g. the successor of 5 is 6.")


fof( mergeA1326, axiom,
	(![INT1,INT2]: 
		(
			(
				(
					(
						p__d__instance(INT1,c__Integer)
					)
				 &
					(
						p__d__instance(INT2,c__Integer)
					)
				 &
					(
						( f__SuccessorFn1(INT1) = f__SuccessorFn1(INT2) )
					)
				)
			)
			=>
			(
				( INT1 = INT2 )
			)
		)
	)
).


fof( mergeA1327, axiom,
	(![INT]: 
		(
			(
				p__d__instance(INT,c__Integer)
			)
			=>
			(
				p__lessThan(INT,f__SuccessorFn1(INT))
			)
		)
	)
).


fof( mergeA1328, axiom,
	(![INT2,INT1]: 
		(
			(
				(
					(
						p__d__instance(INT1,c__Integer)
					)
				 &
					(
						p__d__instance(INT2,c__Integer)
					)
				)
			)
			=>
			(
				(
					~ (
						p__lessThan(INT1,INT2)
					)
				 |
					~ (
						p__lessThan(INT2,f__SuccessorFn1(INT1))
					)
				)
			)
		)
	)
).


fof( mergeA1329, axiom,
	(![INT]: 
		(
			(
				p__d__instance(INT,c__Integer)
			)
			=>
			(
				( INT = f__SuccessorFn1(f__PredecessorFn1(INT)) )
			)
		)
	)
).


fof( mergeA1330, axiom,
	(![INT]: 
		(
			(
				p__d__instance(INT,c__Integer)
			)
			=>
			(
				( INT = f__PredecessorFn1(f__SuccessorFn1(INT)) )
			)
		)
	)
).


fof( mergeA1331, axiom,
	p__d__instance(c__PredecessorFn,c__UnaryFunction)
).


fof( mergeA1332, axiom,
	p__d__instance(c__PredecessorFn,c__TotalValuedRelation)
).


% 	($domain PredecessorFn 1 Integer)

% 	($range PredecessorFn Integer)


% ($documentation PredecessorFn EnglishLanguage "A &%UnaryFunction that maps an &%Integer to 
% its predecessor, e.g. the predecessor of 5 is 4.")


fof( mergeA1335, axiom,
	(![INT1,INT2]: 
		(
			(
				(
					(
						p__d__instance(INT1,c__Integer)
					)
				 &
					(
						p__d__instance(INT2,c__Integer)
					)
				 &
					(
						( f__PredecessorFn1(INT1) = f__PredecessorFn1(INT2) )
					)
				)
			)
			=>
			(
				( INT1 = INT2 )
			)
		)
	)
).


fof( mergeA1336, axiom,
	(![INT]: 
		(
			(
				p__d__instance(INT,c__Integer)
			)
			=>
			(
				p__greaterThan(INT,f__PredecessorFn1(INT))
			)
		)
	)
).


fof( mergeA1337, axiom,
	(![INT1,INT2]: 
		(
			(
				(
					(
						p__d__instance(INT1,c__Integer)
					)
				 &
					(
						p__d__instance(INT2,c__Integer)
					)
				)
			)
			=>
			(
				(
					~ (
						p__lessThan(INT2,INT1)
					)
				 |
					~ (
						p__lessThan(f__PredecessorFn1(INT1),INT2)
					)
				)
			)
		)
	)
).


fof( mergeA1338, axiom,
	p__d__instance(c__average,c__PartialValuedRelation)
).


fof( mergeA1339, axiom,
	p__d__instance(c__average,c__BinaryPredicate)
).


fof( mergeA1340, axiom,
	p__d__instance(c__average,c__SingleValuedRelation)
).


% 	($domain average 1 List)

% 	($domain average 2 RealNumber)

% (termFormat EnglishLanguage average "average")


% ($documentation average EnglishLanguage "A partial function that relates a &%List to a 
% &%RealNumber, provided that the &%List only has list elements that are 
% &%RealNumbers. The &%RealNumber associated with the &%List is equal to the 
% mathematical average of the &%RealNumbers in the &%List divided by the total
% number of list elements.")


fof( mergeA1343, axiom,
	(![AVERAGE,LIST,LISTITEM]: 
		(
			(
				(
					(
						p__d__instance(AVERAGE,c__RealNumber)
					)
				 &
					(
						p__d__instance(LIST,c__List)
					)
				 &
					(
						p__average(LIST,AVERAGE)
					)
				 &
					(
						p__inList(LISTITEM,LIST)
					)
				)
			)
			=>
			(
				p__d__instance(LISTITEM,c__RealNumber)
			)
		)
	)
).


% ($comment 
% ;; END FILE
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
% ;;     SET/CLASS THEORY      ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
% ;;
% ;; INCLUDES 'STRUCTURAL ONTOLOGY'
% ;; INCLUDES 'BASE ONTOLOGY'
% ;;
% ;; The following part of the ontology covers set-theoretic predicates 
% ;; and functions.  Most of the content here is taken from the kif-sets 
% ;; ontology (available on the Ontolingua server).
% )

fof( mergeA1344, axiom,
	p__subrelation(c__subset,c__subclass)
).


% 	($domain subset 1 Set)

% 	($domain subset 2 Set)


% ($documentation subset EnglishLanguage "(subset ?SET1 ?SET2) is true just in case the 
% &%elements of the &%Set ?SET1 are also &%elements of the &%Set ?SET2.")


fof( mergeA1347, axiom,
	(![SUBSET,SET,ELEMENT]: 
		(
			(
				(
					(
						p__d__instance(SET,c__Set)
					)
				 &
					(
						p__d__instance(SUBSET,c__Set)
					)
				 &
					(
						p__subset(SUBSET,SET)
					)
				 &
					(
						p__element(ELEMENT,SUBSET)
					)
				)
			)
			=>
			(
				p__element(ELEMENT,SET)
			)
		)
	)
).


fof( mergeA1348, axiom,
	p__d__instance(c__element,c__BinaryPredicate)
).


fof( mergeA1349, axiom,
	p__d__instance(c__element,c__AsymmetricRelation)
).


fof( mergeA1350, axiom,
	p__subrelation(c__element,c__instance)
).


% 	($domain element 1 Entity)

% 	($domain element 2 Set)


% ($documentation element EnglishLanguage "(element ?ENTITY ?SET) is true just in case 
% ?ENTITY is contained in the &%Set ?SET.  An &%Entity can be an &%element 
% of another &%Entity only if the latter is a &%Set.")


fof( mergeA1353, axiom,
	(![SET1,SET2]: 
		(
			(
				(
					(
						p__d__instance(SET1,c__Set)
					)
				 &
					(
						p__d__instance(SET2,c__Set)
					)
				 &
					(
						(![ELEMENT]: 
							(
								(
									p__element(ELEMENT,SET1)
								)
								<=>
								(
									p__element(ELEMENT,SET2)
								)
							)
						)
					)
				)
			)
			=>
			(
				( SET1 = SET2 )
			)
		)
	)
).


fof( mergeA1354, axiom,
	p__d__instance(c__UnionFn,c__BinaryFunction)
).


fof( mergeA1355, axiom,
	p__d__instance(c__UnionFn,c__TotalValuedRelation)
).


% 	($domain UnionFn 1 SetOrClass)

% 	($domain UnionFn 2 SetOrClass)

% 	($range UnionFn SetOrClass)


% ($documentation UnionFn EnglishLanguage "A &%BinaryFunction that maps two &%SetOrClasses to 
% the union of these &%SetOrClasses.  An object is an &%element of the union 
% of two &%SetOrClasses just in case it is an &%instance of either &%SetOrClass.")


% ($comment 
% ;; (<=>
% ;;  (equal ?U (UnionFn ?C1 ?C2))
% ;;   (forall (?I1 ?I2 ?I3)
% ;;     (=>
% ;;       (and
% ;;         ($instance ?I1 ?C1)
% ;;         ($instance ?I2 ?C2)
% ;;         ($instance ?I3 ?U))
% ;;       (and 
% ;;         ($instance ?I1 ?U)
% ;;         ($instance ?I2 ?U)
% ;;         (or
% ;;           ($instance ?I3 ?C1)
% ;;           ($instance ?I3 ?C2))))))
% )

fof( mergeA1359, axiom,
	p__d__instance(c__IntersectionFn,c__BinaryFunction)
).


fof( mergeA1360, axiom,
	p__d__instance(c__IntersectionFn,c__TotalValuedRelation)
).


% 	($domain IntersectionFn 1 SetOrClass)

% 	($domain IntersectionFn 2 SetOrClass)

% 	($range IntersectionFn SetOrClass)


% ($documentation IntersectionFn EnglishLanguage "A &%BinaryFunction that maps two 
% &%SetOrClasses to the intersection of these &%SetOrClasses.  An object is 
% an instance of the intersection of two &%SetOrClasses just in case it is 
% an instance of both of those &%SetOrClasses.")


fof( mergeA1364, axiom,
	p__d__instance(c__RelativeComplementFn,c__BinaryFunction)
).


fof( mergeA1365, axiom,
	p__d__instance(c__RelativeComplementFn,c__TotalValuedRelation)
).


% 	($domain RelativeComplementFn 1 SetOrClass)

% 	($domain RelativeComplementFn 2 SetOrClass)

% 	($range RelativeComplementFn SetOrClass)


% ($documentation RelativeComplementFn EnglishLanguage "A &%BinaryFunction that maps two 
% &%SetOrClasses to the difference between these &%SetOrClasses.  More 
% precisely, (&%RelativeComplementFn ?CLASS1 ?CLASS2) denotes the instances 
% of ?CLASS1 that are not also instances of ?CLASS2.")


fof( mergeA1369, axiom,
	p__d__instance(c__ComplementFn,c__UnaryFunction)
).


fof( mergeA1370, axiom,
	p__d__instance(c__ComplementFn,c__TotalValuedRelation)
).


% 	($domain ComplementFn 1 SetOrClass)

% 	($range ComplementFn SetOrClass)


% ($documentation ComplementFn EnglishLanguage "The complement of a given &%SetOrClass C is the 
% &%SetOrClass of all things that are not instances of C.  In other words, an 
% object is an instance of the complement of a &%SetOrClass C just in case it 
% is not an instance of C.")


fof( mergeA1373, axiom,
	p__d__instance(c__GeneralizedUnionFn,c__UnaryFunction)
).


fof( mergeA1374, axiom,
	p__d__instance(c__GeneralizedUnionFn,c__TotalValuedRelation)
).


% 	($domainSubclass GeneralizedUnionFn 1 SetOrClass)

% 	($range GeneralizedUnionFn SetOrClass)


% ($documentation GeneralizedUnionFn EnglishLanguage "A &%UnaryFunction that takes a &%SetOrClass 
% of &%Classes as its single argument and returns a &%SetOrClass which is the 
% merge of all of the &%Classes in the original &%SetOrClass, i.e. the &%SetOrClass 
% containing just those instances which are instances of an instance of the 
% original &%SetOrClass.")


fof( mergeA1377, axiom,
	p__d__instance(c__GeneralizedIntersectionFn,c__UnaryFunction)
).


fof( mergeA1378, axiom,
	p__d__instance(c__GeneralizedIntersectionFn,c__TotalValuedRelation)
).


% 	($domainSubclass GeneralizedIntersectionFn 1 SetOrClass)

% 	($range GeneralizedIntersectionFn SetOrClass)


% ($documentation GeneralizedIntersectionFn EnglishLanguage "A &%UnaryFunction that takes a 
% &%SetOrClass of &%Classes as its single argument and returns a &%SetOrClass which 
% is the intersection of all of the &%Classes in the original &%SetOrClass, i.e. 
% the &%SetOrClass containing just those instances which are instances of all 
% instances of the original &%SetOrClass.")


fof( mergeA1381, axiom,
	p__d__instance(c__CardinalityFn,c__UnaryFunction)
).


fof( mergeA1382, axiom,
	p__d__instance(c__CardinalityFn,c__TotalValuedRelation)
).


fof( mergeA1383, axiom,
	p__d__instance(c__CardinalityFn,c__AsymmetricRelation)
).


% 	($domain CardinalityFn 1 (UnionFn SetOrClass Collection))

% 	($range CardinalityFn Number)


% ($documentation CardinalityFn EnglishLanguage "(CardinalityFn ?CLASS) returns the 
% number of instances in the &%SetOrClass ?CLASS or the number of 
% members in the ?CLASS &%Collection.")


fof( mergeA1386, axiom,
	p__d__subclass(c__NullSet,c__SetOrClass)
).



% ($documentation NullSet EnglishLanguage "Any &%SetOrClass that contains no instances.")


fof( mergeA1387, axiom,
	(![SET]: 
		(
			(
				p__d__instance(SET,c__NullSet)
			)
			=>
			(
				(![INST]: 
					(
						~ (
							p__instance(INST,SET)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1388, axiom,
	p__d__subclass(c__NonNullSet,c__SetOrClass)
).



% ($documentation NonNullSet EnglishLanguage "Any &%SetOrClass that contains at least one 
% instance.")


fof( mergeA1389, axiom,
	(![SET]: 
		(
			(
				p__d__instance(SET,c__NonNullSet)
			)
			=>
			(
				(?[INST]: 
					(
						p__instance(INST,SET)
					)
				)
			)
		)
	)
).


fof( mergeA1390, axiom,
	p__d__subclass(c__FiniteSet,c__Set)
).


% ($documentation FiniteSet EnglishLanguage "A &%Set containing a finite number of elements.")


fof( mergeA1391, axiom,
	(![SET]: 
		(
			(
				p__d__instance(SET,c__FiniteSet)
			)
			=>
			(
				(?[NUMBER]: 
					(
						(
							(
								p__d__instance(NUMBER,c__NonnegativeInteger)
							)
						 &
							(
								( NUMBER = f__CardinalityFn1(SET) )
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1392, axiom,
	p__d__subclass(c__PairwiseDisjointClass,c__SetOrClass)
).



% ($documentation PairwiseDisjointClass EnglishLanguage "A &%SetOrClass is a &%PairwiseDisjointClass 
% just in case every instance of the &%SetOrClass is either &%equal to or &%disjoint 
% from every other instance of the &%SetOrClass.")


fof( mergeA1393, axiom,
	(![SUPERCLASS,CLASS1,CLASS2]: 
		(
			(
				(
					(
						p__d__instance(SUPERCLASS,c__PairwiseDisjointClass)
					)
				 &
					(
						p__d__instance(CLASS1,SUPERCLASS)
					)
				 &
					(
						p__d__instance(CLASS2,SUPERCLASS)
					)
				)
			)
			=>
			(
				(
					( CLASS1 = CLASS2 )
				 |
					p__d__disjoint(CLASS1,CLASS2)
				)
			)
		)
	)
).


fof( mergeA1394, axiom,
	p__d__subclass(c__MutuallyDisjointClass,c__SetOrClass)
).



% ($documentation MutuallyDisjointClass EnglishLanguage "A &%SetOrClass is a &%MutuallyDisjointClass 
% just in case there exists nothing which is an instance of all of the instances of 
% the original &%SetOrClass.")


fof( mergeA1395, axiom,
	(![CLASS,INST1,INST2]: 
		(
			(
				(
					(
						p__d__instance(CLASS,c__MutuallyDisjointClass)
					)
				 &
					(
						p__d__instance(INST1,CLASS)
					)
				 &
					(
						p__d__instance(INST2,INST1)
					)
				)
			)
			=>
			(
				(?[INST3]: 
					(
						(
							(
								p__d__instance(INST3,CLASS)
							)
						 &
							(
								~ (
									p__d__instance(INST2,INST3)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1396, axiom,
	p__d__instance(c__KappaFn,c__BinaryFunction)
).


% 	($domain KappaFn 1 SymbolicString)

% 	($domain KappaFn 2 Formula)

% 	($range KappaFn Class)


% ($documentation KappaFn EnglishLanguage "A class-forming operator that takes two 
% arguments:  a variable and a formula containing at least one unbound 
% occurrence of the variable.  The result of applying &%KappaFn to a 
% variable and a formula is the &%SetOrClass of things that satisfy the formula.  
% For example, we can denote the &%SetOrClass of prime numbers that are less 
% than 100 with the following expression:  (KappaFn ?NUMBER 
% (and ($instance ?NUMBER PrimeNumber) (lessThan ?NUMBER 100))).  Note that 
% the use of this function is discouraged, since there is currently no 
% axiomatic support for it.")


% ($comment 
% ;; At some point we may be able to make use of 'KappaFn' by implementing a macro 
% ;; that decomposes every occurrence of 'KappaFn' into a complex formula.  For 
% ;; example the macro might replace every instance of Schema 1 with an instance 
% ;; of Schema 2. 
% ;;
% ;; Schema 1:  (KappaFn <variable> <formula>)
% ;;
% ;; Schema 2: (exists (?LIST)
% ;;             (and
% ;;               ($instance ?LIST UniqueList)
% ;;               (forall (<variable>)
% ;;                 (<=>
% ;;                   (inList <variable> ?LIST)
% ;;                   <formula>))))
% ;;
% )

% ($comment 
% ;; END FILE
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;;;
% ;;  GRAPH THEORY   ;;
% ;;;;;;;;;;;;;;;;;;;;;
% ;;
% ;; INCLUDES 'NUMERIC FUNCTIONS'
% )

fof( mergeA1400, axiom,
	p__d__subclass(c__Graph,c__Abstract)
).



% ($documentation Graph EnglishLanguage "The &%Class of graphs, where a graph is understood 
% to be a set of &%GraphNodes connected by &%GraphArcs.  Note that this 
% &%Class includes only connected graphs, i.e. graphs in which there is a 
% &%GraphPath between any two &%GraphNodes.  Note too that every &%Graph 
% is required to contain at least two &%GraphArcs and three &%GraphNodes.")


fof( mergeA1401, axiom,
	(![GRAPH,NODE2,NODE1]: 
		(
			(
				(
					(
						p__d__instance(GRAPH,c__Graph)
					)
				 &
					(
						p__d__instance(NODE1,c__GraphNode)
					)
				 &
					(
						p__d__instance(NODE2,c__GraphNode)
					)
				 &
					(
						p__graphPart(NODE1,GRAPH)
					)
				 &
					(
						p__graphPart(NODE2,GRAPH)
					)
				 &
					(
						~ (
							( NODE1 = NODE2 )
						)
					)
				)
			)
			=>
			(
				(?[ARC,PATH]: 
					(
						(
							(
								p__d__instance(ARC,c__GraphArc)
							)
						 &
							(
								p__d__instance(PATH,c__GraphPath)
							)
						 &
							(
								(
									p__links(NODE1,NODE2,ARC)
								 |
									(
										(
											p__subGraph(PATH,GRAPH)
										)
									 &
										(
											p__d__instance(PATH,c__GraphPath)
										)
									 &
										(
											(
												(
													(
														( f__BeginNodeFn1(PATH) = NODE1 )
													)
												 &
													(
														( f__EndNodeFn1(PATH) = NODE2 )
													)
												)
											 |
												(
													(
														( f__BeginNodeFn1(PATH) = NODE2 )
													)
												 &
													(
														( f__EndNodeFn1(PATH) = NODE1 )
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1402, axiom,
	(![GRAPH]: 
		(
			(
				p__d__instance(GRAPH,c__Graph)
			)
			=>
			(
				(?[NODE1,NODE2,NODE3,ARC1,ARC2]: 
					(
						(
							(
								p__d__instance(NODE1,c__GraphNode)
							)
						 &
							(
								p__d__instance(NODE2,c__GraphNode)
							)
						 &
							(
								p__d__instance(NODE3,c__GraphNode)
							)
						 &
							(
								p__d__instance(ARC1,c__GraphArc)
							)
						 &
							(
								p__d__instance(ARC2,c__GraphArc)
							)
						 &
							(
								p__graphPart(NODE1,GRAPH)
							)
						 &
							(
								p__graphPart(NODE2,GRAPH)
							)
						 &
							(
								p__graphPart(NODE3,GRAPH)
							)
						 &
							(
								p__graphPart(ARC1,GRAPH)
							)
						 &
							(
								p__graphPart(ARC2,GRAPH)
							)
						 &
							(
								p__links(NODE1,NODE2,ARC1)
							)
						 &
							(
								p__links(NODE2,NODE3,ARC2)
							)
						 &
							(
								~ (
									( NODE1 = NODE2 )
								)
							)
						 &
							(
								~ (
									( NODE2 = NODE3 )
								)
							)
						 &
							(
								~ (
									( NODE1 = NODE3 )
								)
							)
						 &
							(
								~ (
									( ARC1 = ARC2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1403, axiom,
	p__d__subclass(c__DirectedGraph,c__Graph)
).



% ($documentation DirectedGraph EnglishLanguage "The &%Class of directed graphs.  A 
% directed graph is a &%Graph in which all &%GraphArcs
% have direction, i.e. every &%GraphArc has an initial node (see 
% &%InitialNodeFn) and a terminal node (see &%TerminalNodeFn).")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: equal is reflexive, thus the axiom is a tautology
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?GRAPH DirectedGraph)
% ;;      ($instance ?ARC GraphArc)
% ;;      (graphPart ?ARC ?GRAPH))
% ;;   (exists (?NODE1 ?NODE2)
% ;;      (and
% ;;         (equal (InitialNodeFn ?ARC) ?NODE1)
% ;;         (equal (TerminalNodeFn ?ARC) ?NODE2))))
% )

fof( mergeA1404, axiom,
	p__d__subclass(c__Tree,c__DirectedGraph)
).



% ($documentation Tree EnglishLanguage "A Tree is a &%DirectedGraph that has no 
% &%GraphLoops.")


fof( mergeA1405, axiom,
	(![GRAPH]: 
		(
			(
				p__d__instance(GRAPH,c__Tree)
			)
			=>
			(
				(![LOOP]: 
					(
						(
							~ (
								p__d__instance(LOOP,c__GraphElement)
							)
						 |
							~ (
								p__d__instance(LOOP,c__GraphLoop)
							)
						 |
							~ (
								p__graphPart(LOOP,GRAPH)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1406, axiom,
	(![GRAPH]: 
		(
			(
				p__d__instance(GRAPH,c__Tree)
			)
			=>
			(
				(![LOOP]: 
					(
						(
							~ (
								p__d__instance(LOOP,c__GraphElement)
							)
						 |
							~ (
								p__d__instance(LOOP,c__GraphCircuit)
							)
						 |
							~ (
								p__graphPart(LOOP,GRAPH)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1407, axiom,
	(![GRAPH]: 
		(
			(
				p__d__instance(GRAPH,c__Tree)
			)
			=>
			(
				(![ARC1,ARC2,NODE]: 
					(
						(
							~ (
								p__d__instance(ARC1,c__GraphArc)
							)
						 |
							~ (
								p__d__instance(ARC2,c__GraphArc)
							)
						 |
							~ (
								p__d__instance(NODE,c__GraphNode)
							)
						 |
							~ (
								p__graphPart(ARC1,GRAPH)
							)
						 |
							~ (
								p__graphPart(ARC2,GRAPH)
							)
						 |
							~ (
								p__graphPart(NODE,GRAPH)
							)
						 |
							~ (
								( f__TerminalNodeFn1(ARC1) = NODE )
							)
						 |
							~ (
								( f__TerminalNodeFn1(ARC2) = NODE )
							)
						 |
							( ARC1 = ARC2 )
						)
					)
				)
			)
		)
	)
).


fof( mergeA1408, axiom,
	p__d__subclass(c__GraphPath,c__DirectedGraph)
).



% ($documentation GraphPath EnglishLanguage "Informally, a single, directed route between 
% two &%GraphNodes in a &%Graph.  Formally, a &%DirectedGraph that is a 
% &%subGraph of the original &%Graph and such that no two &%GraphArcs in 
% the &%DirectedGraph have the same intial node (see &%InitialNodeFn) or 
% the same terminal node (see &%TerminalNodeFn).")


fof( mergeA1409, axiom,
	(![GRAPH,NODE,ARC]: 
		(
			(
				(
					(
						p__d__instance(NODE,c__GraphNode)
					)
				 &
					(
						p__d__instance(GRAPH,c__GraphPath)
					)
				 &
					(
						p__d__instance(ARC,c__GraphArc)
					)
				 &
					(
						p__graphPart(ARC,GRAPH)
					)
				 &
					(
						( f__InitialNodeFn1(ARC) = NODE )
					)
				)
			)
			=>
			(
				(![OTHER]: 
					(
						(
							~ (
								p__d__instance(OTHER,c__GraphArc)
							)
						 |
							~ (
								( f__InitialNodeFn1(OTHER) = NODE )
							)
						 |
							( OTHER = ARC )
						)
					)
				)
			)
		)
	)
).


fof( mergeA1410, axiom,
	(![GRAPH,NODE,ARC]: 
		(
			(
				(
					(
						p__d__instance(NODE,c__GraphNode)
					)
				 &
					(
						p__d__instance(GRAPH,c__GraphPath)
					)
				 &
					(
						p__d__instance(ARC,c__GraphArc)
					)
				 &
					(
						p__graphPart(ARC,GRAPH)
					)
				 &
					(
						( f__TerminalNodeFn1(ARC) = NODE )
					)
				)
			)
			=>
			(
				(![OTHER]: 
					(
						(
							~ (
								p__d__instance(OTHER,c__GraphArc)
							)
						 |
							~ (
								( f__TerminalNodeFn1(OTHER) = NODE )
							)
						 |
							( OTHER = ARC )
						)
					)
				)
			)
		)
	)
).


fof( mergeA1411, axiom,
	p__d__subclass(c__GraphCircuit,c__GraphPath)
).



% ($documentation GraphCircuit EnglishLanguage "A &%GraphPath that begins (see 
% &%BeginNodeFn) and ends (see &%EndNodeFn) at the same 
% &%GraphNode.")


fof( mergeA1412, axiom,
	(![GRAPH]: 
		(
			(
				p__d__instance(GRAPH,c__GraphPath)
			)
			=>
			(
				(
					p__d__instance(GRAPH,c__GraphCircuit)
				)
				<=>
				(
					(?[NODE]: 
						(
							(
								(
									p__d__instance(NODE,c__GraphNode)
								)
							 &
								(
									( f__BeginNodeFn1(GRAPH) = NODE )
								)
							 &
								(
									( f__EndNodeFn1(GRAPH) = NODE )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1413, axiom,
	p__d__subclass(c__MultiGraph,c__Graph)
).



% ($documentation MultiGraph EnglishLanguage "The &%Class of multigraphs.  A multigraph 
% is a &%Graph containing at least one pair of &%GraphNodes that are 
% connected by more than one &%GraphArc.")


fof( mergeA1414, axiom,
	(![GRAPH]: 
		(
			(
				p__d__instance(GRAPH,c__Graph)
			)
			=>
			(
				(
					p__d__instance(GRAPH,c__MultiGraph)
				)
				<=>
				(
					(?[ARC1,ARC2,NODE1,NODE2]: 
						(
							(
								(
									p__d__instance(ARC1,c__GraphArc)
								)
							 &
								(
									p__d__instance(ARC2,c__GraphArc)
								)
							 &
								(
									p__d__instance(NODE1,c__GraphNode)
								)
							 &
								(
									p__d__instance(NODE2,c__GraphNode)
								)
							 &
								(
									p__graphPart(ARC1,GRAPH)
								)
							 &
								(
									p__graphPart(ARC2,GRAPH)
								)
							 &
								(
									p__graphPart(NODE1,GRAPH)
								)
							 &
								(
									p__graphPart(NODE2,GRAPH)
								)
							 &
								(
									p__links(NODE1,NODE2,ARC1)
								)
							 &
								(
									p__links(NODE1,NODE2,ARC2)
								)
							 &
								(
									~ (
										( ARC1 = ARC2 )
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1415, axiom,
	p__d__subclass(c__PseudoGraph,c__Graph)
).



% ($documentation PseudoGraph EnglishLanguage "The &%Class of pseudographs.  A pseudograph 
% is a &%Graph containing at least one &%GraphLoop.")


fof( mergeA1416, axiom,
	(![GRAPH]: 
		(
			(
				p__d__instance(GRAPH,c__Graph)
			)
			=>
			(
				(
					p__d__instance(GRAPH,c__PseudoGraph)
				)
				<=>
				(
					(?[LOOP]: 
						(
							(
								(
									p__d__instance(LOOP,c__GraphLoop)
								)
							 &
								(
									p__graphPart(LOOP,GRAPH)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1417, axiom,
	p__d__subclass(c__GraphElement,c__Abstract)
).


fof( mergeA1418, axiom,
	p__d__partition3(c__GraphElement,c__GraphNode,c__GraphArc)
).



% ($documentation GraphElement EnglishLanguage "Noncompositional parts of &%Graphs.  
% These parts are restricted to &%GraphNodes and &%GraphArcs.")


fof( mergeA1419, axiom,
	(![PART]: 
		(
			(
				p__d__instance(PART,c__GraphElement)
			)
			=>
			(
				(?[GRAPH]: 
					(
						(
							(
								p__d__instance(GRAPH,c__Graph)
							)
						 &
							(
								p__graphPart(PART,GRAPH)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1420, axiom,
	p__d__subclass(c__GraphNode,c__GraphElement)
).



% ($documentation GraphNode EnglishLanguage "&%Graphs are comprised of &%GraphNodes 
% and &%GraphArcs.  Every &%GraphNode is linked by a &%GraphArc.")


fof( mergeA1421, axiom,
	(![NODE]: 
		(
			(
				p__d__instance(NODE,c__GraphNode)
			)
			=>
			(
				(?[OTHER,ARC]: 
					(
						(
							(
								p__d__instance(ARC,c__GraphArc)
							)
						 &
							(
								p__d__instance(OTHER,c__GraphNode)
							)
						 &
							(
								p__links(NODE,OTHER,ARC)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1422, axiom,
	p__d__subclass(c__GraphArc,c__GraphElement)
).



% ($documentation GraphArc EnglishLanguage "&%Graphs are comprised of &%GraphNodes 
% and &%GraphArcs.  Every &%GraphArc links two &%GraphNodes.")


fof( mergeA1423, axiom,
	(![ARC]: 
		(
			(
				p__d__instance(ARC,c__GraphArc)
			)
			=>
			(
				(?[NODE1,NODE2]: 
					(
						(
							(
								p__d__instance(NODE2,c__GraphNode)
							)
						 &
							(
								p__d__instance(NODE1,c__GraphNode)
							)
						 &
							(
								p__links(NODE1,NODE2,ARC)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1424, axiom,
	p__d__subclass(c__GraphLoop,c__GraphArc)
).



% ($documentation GraphLoop EnglishLanguage "A &%GraphArc in which a &%GraphNode is 
% linked to itself.")


fof( mergeA1425, axiom,
	(![LOOP]: 
		(
			(
				p__d__instance(LOOP,c__GraphArc)
			)
			=>
			(
				(
					p__d__instance(LOOP,c__GraphLoop)
				)
				<=>
				(
					(?[NODE]: 
						(
							(
								(
									p__d__instance(NODE,c__GraphNode)
								)
							 &
								(
									p__links(NODE,NODE,LOOP)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1426, axiom,
	(![NODE,ARC]: 
		(
			(
				(
					(
						p__d__instance(ARC,c__GraphArc)
					)
				 &
					(
						p__d__instance(NODE,c__GraphNode)
					)
				 &
					(
						( f__InitialNodeFn1(ARC) = NODE )
					)
				 &
					(
						( f__TerminalNodeFn1(ARC) = NODE )
					)
				)
			)
			=>
			(
				p__d__instance(ARC,c__GraphLoop)
			)
		)
	)
).


fof( mergeA1427, axiom,
	p__d__instance(c__links,c__TernaryPredicate)
).


% 	($domain links 1 GraphNode)

% 	($domain links 2 GraphNode)

% 	($domain links 3 GraphArc)


% ($documentation links EnglishLanguage "a &%TernaryPredicate that specifies the 
% &%GraphArc connecting two &%GraphNodes.")


fof( mergeA1431, axiom,
	(![NODE2,NODE1,ARC]: 
		(
			(
				(
					(
						p__d__instance(ARC,c__GraphArc)
					)
				 &
					(
						p__d__instance(NODE2,c__GraphNode)
					)
				 &
					(
						p__d__instance(NODE1,c__GraphNode)
					)
				 &
					(
						p__links(NODE1,NODE2,ARC)
					)
				)
			)
			=>
			(
				p__links(NODE2,NODE1,ARC)
			)
		)
	)
).


fof( mergeA1432, axiom,
	p__d__instance(c__graphPart,c__BinaryPredicate)
).


fof( mergeA1433, axiom,
	p__d__instance(c__graphPart,c__AsymmetricRelation)
).


fof( mergeA1434, axiom,
	p__d__instance(c__graphPart,c__IrreflexiveRelation)
).


% 	($domain graphPart 1 GraphElement)

% 	($domain graphPart 2 Graph)


% ($documentation graphPart EnglishLanguage "A basic relation for &%Graphs and their 
% parts.  (&%graphPart ?PART ?GRAPH) means that ?PART is a &%GraphArc 
% or &%GraphNode of the &%Graph ?GRAPH.")


fof( mergeA1437, axiom,
	p__d__instance(c__subGraph,c__BinaryPredicate)
).


fof( mergeA1438, axiom,
	p__d__instance(c__subGraph,c__ReflexiveRelation)
).


fof( mergeA1439, axiom,
	p__d__instance(c__subGraph,c__TransitiveRelation)
).


% 	($domain subGraph 1 Graph)

% 	($domain subGraph 2 Graph)


% ($documentation subGraph EnglishLanguage "The relation between two &%Graphs when one 
% &%Graph is a part of the other. (&%subGraph ?GRAPH1 ?GRAPH2) means 
% that ?GRAPH1 is a part of ?GRAPH2.")


fof( mergeA1442, axiom,
	(![GRAPH1,ELEMENT,GRAPH2]: 
		(
			(
				(
					(
						p__d__instance(GRAPH2,c__Graph)
					)
				 &
					(
						p__d__instance(GRAPH1,c__Graph)
					)
				 &
					(
						p__d__instance(ELEMENT,c__GraphElement)
					)
				 &
					(
						p__subGraph(GRAPH1,GRAPH2)
					)
				 &
					(
						p__graphPart(ELEMENT,GRAPH1)
					)
				)
			)
			=>
			(
				p__graphPart(ELEMENT,GRAPH2)
			)
		)
	)
).


fof( mergeA1443, axiom,
	p__d__instance(c__pathLength,c__BinaryPredicate)
).


fof( mergeA1444, axiom,
	p__d__instance(c__pathLength,c__AsymmetricRelation)
).


fof( mergeA1445, axiom,
	p__d__instance(c__pathLength,c__IrreflexiveRelation)
).


% 	($domain pathLength 1 GraphPath)

% 	($domain pathLength 2 PositiveInteger)


% ($documentation pathLength EnglishLanguage "A &%BinaryPredicate that specifies the 
% length (in number of &%GraphNodes) of a &%GraphPath.
% (&%pathLength ?PATH ?NUMBER) means that there are ?NUMBER nodes in 
% the &%GraphPath ?PATH.")


fof( mergeA1448, axiom,
	p__d__instance(c__InitialNodeFn,c__UnaryFunction)
).


fof( mergeA1449, axiom,
	p__d__instance(c__InitialNodeFn,c__PartialValuedRelation)
).


% 	($domain InitialNodeFn 1 GraphArc)

% 	($range InitialNodeFn GraphNode)


% ($documentation InitialNodeFn EnglishLanguage "A &%UnaryFunction that maps a 
% &%GraphArc to the initial node of the &%GraphArc.  Note
% that this is a partial function.  In particular, the function is 
% undefined for &%GraphArcs that are not part of a &%DirectedGraph.")


fof( mergeA1452, axiom,
	p__d__instance(c__TerminalNodeFn,c__UnaryFunction)
).


fof( mergeA1453, axiom,
	p__d__instance(c__TerminalNodeFn,c__PartialValuedRelation)
).


% 	($domain TerminalNodeFn 1 GraphArc)

% 	($range TerminalNodeFn GraphNode)


% ($documentation TerminalNodeFn EnglishLanguage "A &%UnaryFunction that maps a 
% &%GraphArc to the terminal node of the &%GraphArc.  Note that this 
% is a partial function.  In particular, the function is undefined 
% for &%GraphArcs that are not part of a &%DirectedGraph.")


fof( mergeA1456, axiom,
	p__d__instance(c__BeginNodeFn,c__UnaryFunction)
).


fof( mergeA1457, axiom,
	p__d__instance(c__BeginNodeFn,c__TotalValuedRelation)
).


% 	($domain BeginNodeFn 1 GraphPath)

% 	($range BeginNodeFn GraphNode)

fof( mergeA1460, axiom,
	p__relatedInternalConcept(c__BeginNodeFn,c__InitialNodeFn)
).



% ($documentation BeginNodeFn EnglishLanguage "A &%UnaryFunction that maps a &%GraphPath 
% to the &%GraphNode that is the beginning of the &%GraphPath.  Note that, 
% unlike &%InitialNodeFn (which relates a &%GraphArc to a &%GraphNode),  
% &%BeginNodeFn is a total function - every &%GraphPath has a beginning.")


fof( mergeA1461, axiom,
	p__d__instance(c__EndNodeFn,c__UnaryFunction)
).


fof( mergeA1462, axiom,
	p__d__instance(c__EndNodeFn,c__TotalValuedRelation)
).


% 	($domain EndNodeFn 1 GraphPath)

% 	($range EndNodeFn GraphNode)

fof( mergeA1465, axiom,
	p__relatedInternalConcept(c__EndNodeFn,c__TerminalNodeFn)
).



% ($documentation EndNodeFn EnglishLanguage "A &%UnaryFunction that maps a &%GraphPath 
% to the &%GraphNode that is the end of the &%GraphPath.  Note that, unlike 
% &%TerminalNodeFn (which relates a &%GraphArc to a &%GraphNode),  
% &%EndNodeFn is a total function - every &%GraphPath has a end.")


fof( mergeA1466, axiom,
	p__d__instance(c__arcWeight,c__BinaryPredicate)
).


fof( mergeA1467, axiom,
	p__d__instance(c__arcWeight,c__SingleValuedRelation)
).


% 	($domain arcWeight 1 GraphArc)

% 	($domain arcWeight 2 Quantity)


% ($documentation arcWeight EnglishLanguage "This predicate indicates the value of a 
% &%GraphArc in a &%Graph.  This could map to the length of a road in 
% a road network or the flow rate of a pipe in a plumbing system.")


fof( mergeA1470, axiom,
	p__d__instance(c__PathWeightFn,c__UnaryFunction)
).


% 	($domain PathWeightFn 1 GraphPath)

% 	($range PathWeightFn Quantity)


% ($documentation PathWeightFn EnglishLanguage "A &%UnaryFunction that maps a 
% &%GraphPath to the sum of the &%arcWeights on the &%GraphArcs in 
% the &%GraphPath.")


% ($comment 
% ;; JA: warning
% ;; GraphArc and GraphNode are disjoint. However, any GraphNode belonging to ?PATH and non-belonging to ?SUBPATH is forced to be equal to ?ARC1, which is instance of GraphArc
% )

fof( mergeA1473, axiom,
	(![PATH,ARC1,SUM,SUBPATH,NUMBER1]: 
		(
			(
				(
					(
						p__d__instance(PATH,c__GraphPath)
					)
				 &
					(
						p__d__instance(SUM,c__Quantity)
					)
				 &
					(
						p__d__instance(SUBPATH,c__GraphPath)
					)
				 &
					(
						p__d__instance(ARC1,c__GraphArc)
					)
				 &
					(
						p__d__instance(NUMBER1,c__Quantity)
					)
				 &
					(
						( f__PathWeightFn1(PATH) = SUM )
					)
				 &
					(
						p__subGraph(SUBPATH,PATH)
					)
				 &
					(
						p__graphPart(ARC1,PATH)
					)
				 &
					(
						p__arcWeight(ARC1,NUMBER1)
					)
				 &
					(
						(![ARC2]: 
							(
								(
									(
										(
											p__d__instance(ARC2,c__GraphElement)
										)
									 &
										(
											p__graphPart(ARC2,PATH)
										)
									)
								)
								=>
								(
									(
										p__graphPart(ARC2,SUBPATH)
									 |
										( ARC2 = ARC1 )
									)
								)
							)
						)
					)
				)
			)
			=>
			(
				( SUM = f__AdditionFn2(f__PathWeightFn1(SUBPATH),NUMBER1) )
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; GraphArc and GraphNode are disjoint. However, any GraphNode belonging to ?PATH  is forced to be equal to either ?ARC1 or ?ARC2, which are instance of GraphArc
% ;;
% ;;(=>
% ;;   (and
% ;;      (equal (PathWeightFn ?PATH) ?SUM)
% ;;      (graphPart ?ARC1 ?PATH)
% ;;      (graphPart ?ARC2 ?PATH)
% ;;      (arcWeight ?ARC1 ?NUMBER1)
% ;;      (arcWeight ?ARC2 ?NUMBER2) 
% ;;      (forall (?ARC3)
% ;;         (=>
% ;;            (graphPart ?ARC3 ?PATH)
% ;;            (or
% ;;               (equal ?ARC3 ?ARC1)
% ;;               (equal ?ARC3 ?ARC2)))))
% ;;   (equal (PathWeightFn ?PATH) (AdditionFn ?NUMBER1 ?NUMBER2)))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA1474, axiom,
	(![SUM,ARC1,ARC2,PATH,NUMBER1,NUMBER2]: 
		(
			(
				(
					(
						p__d__instance(PATH,c__GraphPath)
					)
				 &
					(
						p__d__instance(SUM,c__Quantity)
					)
				 &
					(
						p__d__instance(ARC1,c__GraphArc)
					)
				 &
					(
						p__d__instance(ARC2,c__GraphArc)
					)
				 &
					(
						p__d__instance(NUMBER1,c__Quantity)
					)
				 &
					(
						p__d__instance(NUMBER2,c__Quantity)
					)
				 &
					(
						( f__PathWeightFn1(PATH) = SUM )
					)
				 &
					(
						p__graphPart(ARC1,PATH)
					)
				 &
					(
						p__graphPart(ARC2,PATH)
					)
				 &
					(
						p__arcWeight(ARC1,NUMBER1)
					)
				 &
					(
						p__arcWeight(ARC2,NUMBER2)
					)
				 &
					(
						(![ARC3]: 
							(
								(
									(
										(
											p__d__instance(ARC3,c__GraphArc)
										)
									 &
										(
											p__graphPart(ARC3,PATH)
										)
									)
								)
								=>
								(
									(
										( ARC3 = ARC1 )
									 |
										( ARC3 = ARC2 )
									)
								)
							)
						)
					)
				)
			)
			=>
			(
				( f__PathWeightFn1(PATH) = f__AdditionFn2(NUMBER1,NUMBER2) )
			)
		)
	)
).


fof( mergeA1475, axiom,
	p__d__instance(c__MinimalWeightedPathFn,c__BinaryFunction)
).


% 	($domain MinimalWeightedPathFn 1 GraphNode)

% 	($domain MinimalWeightedPathFn 2 GraphNode)

% 	($range MinimalWeightedPathFn GraphPath)


% ($documentation MinimalWeightedPathFn EnglishLanguage "This &%BinaryFunction assigns two 
% &%GraphNodes to the &%GraphPath with the smallest sum of weighted arcs 
% between the two &%GraphNodes.")


% 	(forall (?PATH ?NODE1 ?NODE2)
% 		(=> 
% 			(equal (MinimalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
% 			($instance ?PATH (GraphPathFn ?NODE1 ?NODE2))
% 		)
% 	)

% 	(forall (?PATH ?NUMBER ?NODE1 ?NODE2 ?NUMBER2 ?NUMBER1)
% 		(=> 
% 			(and 
% 				(equal (MinimalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
% 				(equal (PathWeightFn ?PATH) ?NUMBER)
% 			)
% 			(forall (?PATH2)
% 				(=> 
% 					(and 
% 						($instance ?PATH2 (GraphPathFn ?NODE1 ?NODE2))
% 						(equal (PathWeightFn ?PATH2) ?NUMBER2)
% 					)
% 					(greaterThanOrEqualTo ?NUMBER2 ?NUMBER1)
% 				)
% 			)
% 		)
% 	)

fof( mergeA1481, axiom,
	p__d__instance(c__MaximalWeightedPathFn,c__BinaryFunction)
).


% 	($domain MaximalWeightedPathFn 1 GraphNode)

% 	($domain MaximalWeightedPathFn 2 GraphNode)

% 	($range MaximalWeightedPathFn GraphPath)


% ($documentation MaximalWeightedPathFn EnglishLanguage "This &%BinaryFunction assigns two 
% &%GraphNodes to the &%GraphPath with the largest sum of weighted arcs 
% between the two &%GraphNodes.")


% 	(forall (?PATH ?NODE1 ?NODE2)
% 		(=> 
% 			(equal (MaximalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
% 			($instance ?PATH (GraphPathFn ?NODE1 ?NODE2))
% 		)
% 	)

% 	(forall (?PATH ?NUMBER ?NODE1 ?NODE2 ?NUMBER2 ?NUMBER1)
% 		(=> 
% 			(and 
% 				(equal (MaximalWeightedPathFn ?NODE1 ?NODE2) ?PATH)
% 				(equal (PathWeightFn ?PATH) ?NUMBER)
% 			)
% 			(forall (?PATH2)
% 				(=> 
% 					(and 
% 						($instance ?PATH2 (GraphPathFn ?NODE1 ?NODE2))
% 						(equal (PathWeightFn ?PATH2) ?NUMBER2)
% 					)
% 					(lessThanOrEqualTo ?NUMBER2 ?NUMBER1)
% 				)
% 			)
% 		)
% 	)

fof( mergeA1487, axiom,
	p__d__instance(c__GraphPathFn,c__BinaryFunction)
).


fof( mergeA1488, axiom,
	p__d__instance(c__GraphPathFn,c__TotalValuedRelation)
).


% 	($domain GraphPathFn 1 GraphNode)

% 	($domain GraphPathFn 2 GraphNode)

% 	($rangeSubclass GraphPathFn GraphPath)


% ($documentation GraphPathFn EnglishLanguage "A &%BinaryFunction that maps two &%GraphNodes 
% to the &%Class of &%GraphPaths between those two nodes.  Note that the two 
% &%GraphNodes must belong to the same &%Graph.")


fof( mergeA1492, axiom,
	(![GRAPH,NODE2,NODE1,PATH]: 
		(
			(
				(
					(
						p__d__instance(GRAPH,c__Graph)
					)
				 &
					(
						p__d__instance(PATH,c__GraphElement)
					)
				 &
					(
						p__d__subclass(PATH,c__GraphPath)
					)
				 &
					(
						p__d__instance(NODE2,c__GraphNode)
					)
				 &
					(
						p__d__instance(NODE1,c__GraphNode)
					)
				 &
					(
						p__graphPart(PATH,GRAPH)
					)
				 &
					(
						~ (
							p__d__instance(GRAPH,c__DirectedGraph)
						)
					)
				)
			)
			=>
			(
				(
					( f__GraphPathFn2(NODE1,NODE2) = PATH )
				)
				<=>
				(
					( f__GraphPathFn2(NODE2,NODE1) = PATH )
				)
			)
		)
	)
).


fof( mergeA1493, axiom,
	p__d__instance(c__CutSetFn,c__UnaryFunction)
).


% 	($domain CutSetFn 1 Graph)

% 	($rangeSubclass CutSetFn GraphPath)


% ($documentation CutSetFn EnglishLanguage "A &%UnaryFunction that assigns a &%Graph the 
% &%Class of &%GraphPaths that partition the graph into two separate 
% graphs if cut.  There may be more than one cutset for a given graph.")


fof( mergeA1496, axiom,
	p__d__instance(c__MinimalCutSetFn,c__UnaryFunction)
).


% 	($domain MinimalCutSetFn 1 Graph)

% 	($rangeSubclass MinimalCutSetFn GraphPath)

fof( mergeA1499, axiom,
	p__relatedInternalConcept(c__MinimalCutSetFn,c__CutSetFn)
).



% ($documentation MinimalCutSetFn EnglishLanguage "A &%UnaryFunction that assigns a &%Graph 
% the &%Class of &%GraphPaths which comprise cutsets for the &%Graph and 
% which have the least number of &%GraphArcs.")


% 	(forall (?GRAPH)
% 		(=> 
% 			($instance ?GRAPH Graph)
% 			($subclass (MinimalCutSetFn ?GRAPH) (CutSetFn ?GRAPH))
% 		)
% 	)

fof( mergeA1501, axiom,
	(![GRAPH,PATHCLASS]: 
		(
			(
				(
					(
						p__d__instance(GRAPH,c__Graph)
					)
				 &
					(
						p__d__subclass(PATHCLASS,c__GraphPath)
					)
				 &
					(
						( f__MinimalCutSetFn1(GRAPH) = PATHCLASS )
					)
				)
			)
			=>
			(
				(?[NUMBER]: 
					(
						(
							(
								p__d__instance(NUMBER,c__PositiveInteger)
							)
						 &
							(
								(![PATH]: 
									(
										(
											(
												(
													p__d__instance(PATH,c__GraphPath)
												)
											 &
												(
													p__d__instance(PATH,PATHCLASS)
												)
											)
										)
										=>
										(
											p__pathLength(PATH,NUMBER)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?GRAPH ?NUMBER1 ?NUMBER2)
% 		(not 
% 			(exists (?PATH1 ?PATH2)
% 				(and 
% 					($instance ?PATH1 (CutSetFn ?GRAPH))
% 					($instance ?PATH2 (MinimalCutSetFn ?GRAPH))
% 					(pathLength ?PATH1 ?NUMBER1)
% 					(pathLength ?PATH2 ?NUMBER2)
% 					(lessThan ?NUMBER1 ?NUMBER2)
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; link the physical system to the abstract graph
% )

fof( mergeA1503, axiom,
	p__d__instance(c__abstractCounterpart,c__BinaryPredicate)
).


% 	($domain abstractCounterpart 1 Abstract)

% 	($domain abstractCounterpart 2 Physical)

fof( mergeA1506, axiom,
	p__subrelation(c__abstractCounterpart,c__represents)
).



% ($documentation abstractCounterpart EnglishLanguage "(abstractCounterpart ?AB ?PHYS
% relates a &%Physical entity to an &%Abstract one which is an idealized
% model in some dimension of the &%Physical entity.  For example, an
% &%Abstract &%GraphNode could be stated to be the counterpart of an 
% actual &%Computer in a &%ComputerNetwork.")


fof( mergeA1507, axiom,
	p__d__subclass(c__PhysicalSystem,c__Physical)
).



% ($documentation PhysicalSystem EnglishLanguage "&%PhysicalSystem is the class of complex 
% &%Physical things.  A &%PhysicalSystem may have one or more 
% corresponding abstract &%Graph representations.")


fof( mergeA1508, axiom,
	p__d__instance(c__subSystem,c__BinaryPredicate)
).


% 	($domain subSystem 1 PhysicalSystem)

% 	($domain subSystem 2 PhysicalSystem)


% ($documentation subSystem EnglishLanguage "(&%subSystem ?SUB ?SYSTEM) means that the 
% &%PhysicalSystem ?SUB is a part of the &%PhysicalSystem ?SYSTEM.")


fof( mergeA1511, axiom,
	p__d__instance(c__systemPart,c__BinaryPredicate)
).


% 	($domain systemPart 1 Physical)

% 	($domain systemPart 2 PhysicalSystem)


% ($documentation systemPart EnglishLanguage "(&%systemPart ?PART ?SYSTEM) means that 
% the &%Physical thing ?PART is a &%SystemElement in the &%PhysicalSystem 
% ?SYSTEM.")


fof( mergeA1514, axiom,
	(![SUB,PART,SYSTEM]: 
		(
			(
				(
					(
						p__d__instance(SYSTEM,c__PhysicalSystem)
					)
				 &
					(
						p__d__instance(SUB,c__PhysicalSystem)
					)
				 &
					(
						p__d__instance(PART,c__Physical)
					)
				 &
					(
						p__subSystem(SUB,SYSTEM)
					)
				 &
					(
						p__systemPart(PART,SUB)
					)
				)
			)
			=>
			(
				p__systemPart(PART,SYSTEM)
			)
		)
	)
).


fof( mergeA1515, axiom,
	p__d__instance(c__graphMeasure,c__BinaryPredicate)
).


% 	($domain graphMeasure 1 Graph)

% 	($domain graphMeasure 2 UnitOfMeasure)


% ($documentation graphMeasure EnglishLanguage "(graphMeasure ?GRAPH ?MEAS) fixes a 
% &%UnitOfMeasure that is used for the &%arcWeight of a given &%Graph.  Stating 
% such a relationship entails that the components of given graph are the 
% &%abstractCounterparts of sets of &%Physical &%Entity(ies).")


fof( mergeA1518, axiom,
	(![M,G,AC]: 
		(
			(
				(
					(
						p__d__instance(M,c__UnitOfMeasure)
					)
				 &
					(
						p__d__instance(G,c__Graph)
					)
				 &
					(
						p__d__instance(AC,c__GraphElement)
					)
				 &
					(
						p__graphMeasure(G,M)
					)
				)
			)
			=>
			(
				(
					(
						p__graphPart(AC,G)
					)
				 &
					(
						(?[PC]: 
							(
								(
									(
										p__d__instance(PC,c__Physical)
									)
								 &
									(
										p__abstractCounterpart(AC,PC)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1519, axiom,
	(![G,AN,PN,AA,PA,N,M]: 
		(
			(
				(
					(
						p__d__instance(M,c__UnitOfMeasure)
					)
				 &
					(
						p__d__instance(G,c__Graph)
					)
				 &
					(
						p__d__instance(PN,c__Physical)
					)
				 &
					(
						p__d__instance(PA,c__Object)
					)
				 &
					(
						p__d__instance(N,c__RealNumber)
					)
				 &
					(
						p__graphMeasure(G,M)
					)
				 &
					(
						p__d__instance(AN,c__GraphNode)
					)
				 &
					(
						p__d__instance(AA,c__GraphArc)
					)
				 &
					(
						p__abstractCounterpart(AN,PN)
					)
				 &
					(
						p__abstractCounterpart(AA,PA)
					)
				 &
					(
						p__arcWeight(AA,f__MeasureFn2(N,M))
					)
				)
			)
			=>
			(
				p__measure(PA,f__MeasureFn2(N,M))
			)
		)
	)
).


% ($comment 
% ;; END FILE
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;
% ;;  UNITS OF MEASURE   ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;
% ;;
% ;; INCLUDES 'NUMERIC FUNCTIONS'
% ;;
% ;; This section was originally based on the relations in the Quantities 
% ;; ontology (developed by ITBM-CNR) and the units of measure in the 
% ;; "Standard Units" and "Standard Dimensions" ontologies on the Ontolingua 
% ;; server.  This content has been extensively revised by Helena Sofia Pinto 
% ;; of the Instituto Superior Tecnico in Portugal.  The sources for these 
% ;; revisions were: 
% ;; - Barry Taylor, NIST Special Publication 811, Guide for the Use of the
% ;;   International System of Units (SI), 1995.
% ;; - Encyclopaedia Britannica (on-line version at http://www.britannica.com)
% )

fof( mergeA1520, axiom,
	p__d__subclass(c__UnitOfMeasure,c__PhysicalQuantity)
).



% ($documentation UnitOfMeasure EnglishLanguage "A standard of measurement for some dimension. 
% For example, the &%Meter is a &%UnitOfMeasure for the dimension of length, 
% as is the &%Inch.  There is no intrinsic property of a &%UnitOfMeasure that 
% makes it primitive or fundamental, rather, a system of units (e.g. 
% &%SystemeInternationalUnit) defines a set of orthogonal dimensions and 
% assigns units for each.") 


fof( mergeA1521, axiom,
	p__d__subclass(c__CompositeUnitOfMeasure,c__UnitOfMeasure)
).



% ($documentation CompositeUnitOfMeasure EnglishLanguage "Instances
% of this &%Class are &%UnitsOfMeasure defined by the functional
% composition of other units, each of which might be a
% &%CompositeUnitOfMeasure or a &%NonCompositeUnitOfMeasure.")


fof( mergeA1522, axiom,
	p__d__subclass(c__NonCompositeUnitOfMeasure,c__UnitOfMeasure)
).



% ($documentation NonCompositeUnitOfMeasure EnglishLanguage "Instances of
% this &%Class are &%UnitsOfMeasure that are applied to a single
% dimension, and so are not intrinsically defined by the functional
% composition of other units.")


fof( mergeA1523, axiom,
	p__d__partition3(c__UnitOfMeasure,c__CompositeUnitOfMeasure,c__NonCompositeUnitOfMeasure)
).


% 	(forall (?N ?UNIT ?QUANT)
% 		(=> 
% 			(and 
% 				($instance ?QUANT (MeasureFn ?N ?UNIT))
% 				($instance ?UNIT CompositeUnitOfMeasure)
% 			)
% 			($instance ?QUANT FunctionQuantity)
% 		)
% 	)

% 	(forall (?N ?UNIT ?QUANT)
% 		(=> 
% 			(and 
% 				($instance ?QUANT (MeasureFn ?N ?UNIT))
% 				($instance ?UNIT NonCompositeUnitOfMeasure)
% 			)
% 			($instance ?QUANT ConstantQuantity)
% 		)
% 	)

fof( mergeA1526, axiom,
	p__d__subclass(c__SystemeInternationalUnit,c__UnitOfMeasure)
).



% ($documentation SystemeInternationalUnit EnglishLanguage "The &%Class of Systeme 
% International (SI) units.")


fof( mergeA1527, axiom,
	p__d__subclass(c__LengthMeasure,c__ConstantQuantity)
).



% ($documentation LengthMeasure EnglishLanguage "A &%subclass of
% &%ConstantQuantity, instances of which are measures of length.")


fof( mergeA1528, axiom,
	p__d__subclass(c__UnitOfLength,c__NonCompositeUnitOfMeasure)
).



% ($documentation UnitOfLength EnglishLanguage "Every instance of this
% &%Class is a &%UnitOfMeasure that can be used with &%MeasureFn to form
% instances of &%LengthMeasure.")


fof( mergeA1529, axiom,
	p__d__subclass(c__MassMeasure,c__ConstantQuantity)
).



% ($documentation MassMeasure EnglishLanguage "A &%subclass of
% &%ConstantQuantity, instances of which are measures of the amount of
% matter in an &%Object.")


fof( mergeA1530, axiom,
	p__d__subclass(c__UnitOfMass,c__NonCompositeUnitOfMeasure)
).



% ($documentation UnitOfMass EnglishLanguage "Every instance of this
% &%Class is a &%UnitOfMeasure that can be used with &%MeasureFn to form
% instances of &%MassMeasure, which denote the amount of matter in
% &%PhysicalObjects.")


fof( mergeA1531, axiom,
	p__d__subclass(c__AreaMeasure,c__FunctionQuantity)
).



% ($documentation AreaMeasure EnglishLanguage "Measures of the amount of space in two 
% dimensions.")


fof( mergeA1532, axiom,
	p__d__subclass(c__UnitOfArea,c__CompositeUnitOfMeasure)
).



% ($documentation UnitOfArea EnglishLanguage "Every instance of this
% &%Class is a &%UnitOfMeasure that can be used with &%MeasureFn to form
% instances of &%AreaMeasure.")


fof( mergeA1533, axiom,
	p__d__subclass(c__VolumeMeasure,c__FunctionQuantity)
).



% ($documentation VolumeMeasure EnglishLanguage "Measures of the amount of space in three 
% dimensions.")


fof( mergeA1534, axiom,
	p__d__subclass(c__UnitOfVolume,c__CompositeUnitOfMeasure)
).



% ($documentation UnitOfVolume EnglishLanguage "Every instance of this
% &%Class is a &%UnitOfMeasure that can be used with &%MeasureFn to form
% instances of &%VolumeMeasure.")


fof( mergeA1535, axiom,
	p__d__subclass(c__TemperatureMeasure,c__ConstantQuantity)
).



% ($documentation TemperatureMeasure EnglishLanguage "Measures of temperature.  
% In scientific circles, the temperature of something is understood as the 
% average velocity of the atoms or molecules that make up the thing.")


fof( mergeA1536, axiom,
	p__d__subclass(c__UnitOfTemperature,c__NonCompositeUnitOfMeasure)
).



% ($documentation UnitOfTemperature EnglishLanguage "Every instance of this
% &%Class is a &%UnitOfMeasure that can be used with &%MeasureFn to form
% instances of &%TemperatureMeasure.")


fof( mergeA1537, axiom,
	p__d__subclass(c__CurrencyMeasure,c__ConstantQuantity)
).



% ($documentation CurrencyMeasure EnglishLanguage "Instances of this
% &%subclass of &%ConstantQuantity are measures of &%monetaryValue
% stated in terms of some &%UnitOfCurrency such as &%UnitedStatesDollar,
% &%UnitedStatesCent, Lire, Yen, etc.")


fof( mergeA1538, axiom,
	p__d__subclass(c__UnitOfCurrency,c__NonCompositeUnitOfMeasure)
).



% ($documentation UnitOfCurrency EnglishLanguage "Every instance of this
% &%Class is a &%UnitOfMeasure that can be used with &%MeasureFn to form
% instances of &%CurrencyMeasure.")


fof( mergeA1539, axiom,
	p__d__subclass(c__AngleMeasure,c__ConstantQuantity)
).



% ($documentation AngleMeasure EnglishLanguage "The value of an angle in a plane or in a 
% solid.")


fof( mergeA1540, axiom,
	p__d__subclass(c__UnitOfAngularMeasure,c__NonCompositeUnitOfMeasure)
).



% ($documentation UnitOfAngularMeasure EnglishLanguage "Every instance of this
% &%Class is a &%UnitOfMeasure that can be used with &%MeasureFn to form
% instances of &%AngleMeasure.")


fof( mergeA1541, axiom,
	p__d__subclass(c__PlaneAngleMeasure,c__AngleMeasure)
).



% ($documentation PlaneAngleMeasure EnglishLanguage "The value of an angle in a plane.")


fof( mergeA1542, axiom,
	p__d__subclass(c__SolidAngleMeasure,c__AngleMeasure)
).


fof( mergeA1543, axiom,
	p__d__disjoint(c__SolidAngleMeasure,c__PlaneAngleMeasure)
).



% ($documentation SolidAngleMeasure EnglishLanguage "The value of an angle in a solid.")


fof( mergeA1544, axiom,
	p__d__subclass(c__UnitOfInformation,c__NonCompositeUnitOfMeasure)
).



% ($documentation UnitOfInformation EnglishLanguage "Every instance of this
% &%Class is a &%UnitOfMeasure that can be used with &%MeasureFn to form
% instances of &%InformationMeasure.")


fof( mergeA1545, axiom,
	p__d__subclass(c__UnitOfDuration,c__NonCompositeUnitOfMeasure)
).



% ($documentation UnitOfDuration EnglishLanguage "Every instance of this
% &%Class is a &%UnitOfMeasure that can be used with &%MeasureFn to form
% instances of &%TimeDuration.  Note that &%TimeDuration is a &%subclass
% of &%TimeMeasure.")


fof( mergeA1546, axiom,
	p__d__instance(c__MeasureFn,c__BinaryFunction)
).


fof( mergeA1547, axiom,
	p__d__instance(c__MeasureFn,c__TotalValuedRelation)
).


% 	($domain MeasureFn 1 RealNumber)

% 	($domain MeasureFn 2 UnitOfMeasure)

% 	($range MeasureFn PhysicalQuantity)


% ($documentation MeasureFn EnglishLanguage "This &%BinaryFunction maps a
% &%RealNumber and a &%UnitOfMeasure to that &%Number of units.  It is
% used to express `measured' instances of &%PhysicalQuantity.  Example:
% the concept of three meters is represented as (&%MeasureFn 3
% &%Meter).")


fof( mergeA1551, axiom,
	(![NUMBER,UNIT,QUANT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( f__MeasureFn2(NUMBER,UNIT) = QUANT )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfLength)
					)
				)
			)
			=>
			(
				p__d__instance(QUANT,c__LengthMeasure)
			)
		)
	)
).


fof( mergeA1552, axiom,
	(![NUMBER,UNIT,QUANT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( f__MeasureFn2(NUMBER,UNIT) = QUANT )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfMass)
					)
				)
			)
			=>
			(
				p__d__instance(QUANT,c__MassMeasure)
			)
		)
	)
).


fof( mergeA1553, axiom,
	(![NUMBER,UNIT,QUANT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( f__MeasureFn2(NUMBER,UNIT) = QUANT )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfArea)
					)
				)
			)
			=>
			(
				p__d__instance(QUANT,c__AreaMeasure)
			)
		)
	)
).


fof( mergeA1554, axiom,
	(![NUMBER,UNIT,QUANT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( f__MeasureFn2(NUMBER,UNIT) = QUANT )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfVolume)
					)
				)
			)
			=>
			(
				p__d__instance(QUANT,c__VolumeMeasure)
			)
		)
	)
).


fof( mergeA1555, axiom,
	(![NUMBER,UNIT,QUANT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( f__MeasureFn2(NUMBER,UNIT) = QUANT )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfTemperature)
					)
				)
			)
			=>
			(
				p__d__instance(QUANT,c__TemperatureMeasure)
			)
		)
	)
).


fof( mergeA1556, axiom,
	(![NUMBER,UNIT,QUANT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( f__MeasureFn2(NUMBER,UNIT) = QUANT )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfCurrency)
					)
				)
			)
			=>
			(
				p__d__instance(QUANT,c__CurrencyMeasure)
			)
		)
	)
).


fof( mergeA1557, axiom,
	(![NUMBER,UNIT,QUANT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( f__MeasureFn2(NUMBER,UNIT) = QUANT )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfAngularMeasure)
					)
				)
			)
			=>
			(
				p__d__instance(QUANT,c__AngleMeasure)
			)
		)
	)
).


fof( mergeA1558, axiom,
	(![NUMBER,UNIT,QUANT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( f__MeasureFn2(NUMBER,UNIT) = QUANT )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfDuration)
					)
				)
			)
			=>
			(
				p__d__instance(QUANT,c__TimeDuration)
			)
		)
	)
).


fof( mergeA1559, axiom,
	(![NUMBER,UNIT,QUANT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( f__MeasureFn2(NUMBER,UNIT) = QUANT )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfInformation)
					)
				)
			)
			=>
			(
				p__d__instance(QUANT,c__InformationMeasure)
			)
		)
	)
).


% ($comment 
% ;; AP - this axiom below doesn't look right, what about functions that
% ;; return unitless ratios
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?REL RelationExtendedToQuantities)
% ;;      ($instance ?REL TernaryRelation)
% ;;      ($instance ?NUMBER1 RealNumber)
% ;;      ($instance ?NUMBER2 RealNumber)
% ;;      (?REL ?NUMBER1 ?NUMBER2 ?VALUE))
% ;;   (forall (?UNIT)
% ;;      (=>
% ;;         ($instance ?UNIT UnitOfMeasure)
% ;;         (?REL (MeasureFn ?NUMBER1 ?UNIT) (MeasureFn ?NUMBER2 ?UNIT) (MeasureFn ?VALUE ?UNIT)))))
% )

% 	(forall (?REL ?NUMBER1 ?NUMBER2)
% 		(=> 
% 			(and 
% 				($instance ?REL RelationExtendedToQuantities)
% 				($instance ?REL BinaryRelation)
% 				($instance ?NUMBER1 RealNumber)
% 				($instance ?NUMBER2 RealNumber)
% 				($holds3 ?REL ?NUMBER1 ?NUMBER2)
% 			)
% 			(forall (?UNIT)
% 				(=> 
% 					($instance ?UNIT UnitOfMeasure)
% 					($holds3 ?REL (MeasureFn ?NUMBER1 ?UNIT) (MeasureFn ?NUMBER2 ?UNIT))
% 				)
% 			)
% 		)
% 	)

fof( mergeA1561, axiom,
	p__d__subclass(c__UnitOfMeasureMultiplier,c__UnaryFunction)
).


fof( mergeA1562, axiom,
	p__d__subclass(c__UnitOfMeasureMultiplier,c__TotalValuedRelation)
).



% ($documentation UnitOfMeasureMultiplier EnglishLanguage "Each
% &%instance of this &%Class is a &%UnaryFunction that, when evaluated
% on its single argument, a &%UnitOfMeasure, produces another
% &%UnitOfMeasure that is a numeric multiple of the argument.")


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?FUNCTION UnitOfMeasureMultiplier)
% ;;     ($instance ?UNIT CompositeUnitOfMeasure))
% ;;   ($instance (?FUNCTION ?UNIT) CompositeUnitOfMeasure))
% ;;
% ;; (=>
% ;;   (and
% ;;     ($instance ?FUNCTION UnitOfMeasureMultiplier)
% ;;     ($instance ?UNIT NonCompositeUnitOfMeasure))
% ;;   ($instance (?FUNCTION ?UNIT) NonCompositeUnitOfMeasure))
% )

fof( mergeA1563, axiom,
	p__d__instance(c__KiloFn,c__UnitOfMeasureMultiplier)
).


% 	($domain KiloFn 1 UnitOfMeasure)

% 	($range KiloFn UnitOfMeasure)


% ($documentation KiloFn EnglishLanguage "A &%UnaryFunction that maps a &%UnitOfMeasure into 
% a &%UnitOfMeasure that is equal to 1,000 units of the original &%UnitOfMeasure.  
% For example, (&%KiloFn &%Gram) is 1,000 &%Grams.")


fof( mergeA1566, axiom,
	(![KILOUNIT,UNIT]: 
		(
			(
				(
					(
						p__d__instance(KILOUNIT,c__UnitOfMeasure)
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfMeasure)
					)
				 &
					(
						( KILOUNIT = f__KiloFn1(UNIT) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(c__1,KILOUNIT) = f__MeasureFn2(c__1000,UNIT) )
			)
		)
	)
).


fof( mergeA1567, axiom,
	p__d__instance(c__MegaFn,c__UnitOfMeasureMultiplier)
).


% 	($domain MegaFn 1 UnitOfMeasure)

% 	($range MegaFn UnitOfMeasure)


% ($documentation MegaFn EnglishLanguage "A &%UnaryFunction that maps a &%UnitOfMeasure into 
% a &%UnitOfMeasure that is equal to 1,000,000 units of the original 
% &%UnitOfMeasure.  For example, (&%MegaFn &%Hertz) is 1,000,000 &%Hertz.")


fof( mergeA1570, axiom,
	(![MEGAUNIT,UNIT]: 
		(
			(
				(
					(
						p__d__instance(MEGAUNIT,c__UnitOfMeasure)
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfMeasure)
					)
				 &
					(
						( MEGAUNIT = f__MegaFn1(UNIT) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(c__1,MEGAUNIT) = f__MeasureFn2(c__1000000,UNIT) )
			)
		)
	)
).


fof( mergeA1571, axiom,
	p__d__instance(c__GigaFn,c__UnitOfMeasureMultiplier)
).


% 	($domain GigaFn 1 UnitOfMeasure)

% 	($range GigaFn UnitOfMeasure)


% ($documentation GigaFn EnglishLanguage "A &%UnaryFunction that maps a &%UnitOfMeasure into 
% a &%UnitOfMeasure that is equal to 1,000,000,000 units of the original 
% &%UnitOfMeasure.  For example, (&%GigaFn &%Hertz) is 1,000,000,000 &%Hertz.")


fof( mergeA1574, axiom,
	(![GIGAUNIT,UNIT]: 
		(
			(
				(
					(
						p__d__instance(GIGAUNIT,c__UnitOfMeasure)
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfMeasure)
					)
				 &
					(
						( GIGAUNIT = f__GigaFn1(UNIT) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(c__1,GIGAUNIT) = f__MeasureFn2(c__1000000000,UNIT) )
			)
		)
	)
).


fof( mergeA1575, axiom,
	p__d__instance(c__TeraFn,c__UnitOfMeasureMultiplier)
).


% 	($domain TeraFn 1 UnitOfMeasure)

% 	($range TeraFn UnitOfMeasure)


% ($documentation TeraFn EnglishLanguage "A &%UnaryFunction that maps a &%UnitOfMeasure 
% into a &%UnitOfMeasure that is equal to 1,000,000,000,000 units of the original 
% &%UnitOfMeasure.  For example, (&%TeraFn &%Hertz) is 1,000,000,000,000 &%Hertz.")


fof( mergeA1578, axiom,
	(![TERAUNIT,UNIT]: 
		(
			(
				(
					(
						p__d__instance(TERAUNIT,c__UnitOfMeasure)
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfMeasure)
					)
				 &
					(
						( TERAUNIT = f__TeraFn1(UNIT) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(c__1,TERAUNIT) = f__MeasureFn2(c__1000000000000,UNIT) )
			)
		)
	)
).


fof( mergeA1579, axiom,
	p__d__instance(c__MilliFn,c__UnitOfMeasureMultiplier)
).


% 	($domain MilliFn 1 UnitOfMeasure)

% 	($range MilliFn UnitOfMeasure)


% ($documentation MilliFn EnglishLanguage "A &%UnaryFunction that maps a &%UnitOfMeasure into 
% a &%UnitOfMeasure that is equal to .001 units of the original &%UnitOfMeasure.  
% For example, (&%MilliFn &%Gram) is .001 &%Grams.")


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?UNIT UnitOfMeasure)
% ;;     (equal ?MILLIUNIT (MilliFn ?UNIT)))
% ;;   (equal (MeasureFn 1 ?MILLIUNIT) (MeasureFn 0.001 ?UNIT)))
% )

fof( mergeA1582, axiom,
	p__d__instance(c__MicroFn,c__UnitOfMeasureMultiplier)
).


% 	($domain MicroFn 1 UnitOfMeasure)

% 	($range MicroFn UnitOfMeasure)


% ($documentation MicroFn EnglishLanguage "A &%UnaryFunction that maps a &%UnitOfMeasure into 
% a &%UnitOfMeasure that is equal to .000001 units of the original &%UnitOfMeasure.  
% For example, (&%MicroFn &%Meter) is .000001 &%Meters.")


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?UNIT UnitOfMeasure)
% ;;     (equal ?MICROUNIT (MicroFn ?UNIT)))
% ;;   (equal (MeasureFn 1 ?MICROUNIT) (MeasureFn 0.000001 ?UNIT)))
% )

fof( mergeA1585, axiom,
	p__d__instance(c__NanoFn,c__UnitOfMeasureMultiplier)
).


% 	($domain NanoFn 1 UnitOfMeasure)

% 	($range NanoFn UnitOfMeasure)


% ($documentation NanoFn EnglishLanguage "A &%UnaryFunction that maps a &%UnitOfMeasure into 
% a &%UnitOfMeasure that is equal to .000000001 units of the original 
% &%UnitOfMeasure.  For example, (&%MicroFn &%SecondDuration) is .000000001 
% &%SecondDurations.")


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?UNIT UnitOfMeasure)
% ;;     (equal ?NANOUNIT (NanoFn ?UNIT)))
% ;;   (equal (MeasureFn 1 ?NANOUNIT) (MeasureFn 0.000000001 ?UNIT)))
% )

fof( mergeA1588, axiom,
	p__d__instance(c__PicoFn,c__UnitOfMeasureMultiplier)
).


% 	($domain PicoFn 1 UnitOfMeasure)

% 	($range PicoFn UnitOfMeasure)


% ($documentation PicoFn EnglishLanguage "A &%UnaryFunction that maps a &%UnitOfMeasure into 
% a &%UnitOfMeasure that is equal to .000000000001 units of the original 
% &%UnitOfMeasure.  For example, (&%PicoFn &%SecondDuration) is .000000000001 
% &%SecondDurations.")


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?UNIT UnitOfMeasure)
% ;;     (equal ?PICOUNIT (PicoFn ?UNIT)))
% ;;   (equal (MeasureFn 1 ?PICOUNIT) (MeasureFn 0.000000000001 ?UNIT)))
% )

fof( mergeA1591, axiom,
	p__d__instance(c__IntervalFn,c__BinaryFunction)
).


% 	($domain IntervalFn 1 ConstantQuantity)

% 	($domain IntervalFn 2 ConstantQuantity)

% 	($rangeSubclass IntervalFn ConstantQuantity)

fof( mergeA1595, axiom,
	p__relatedInternalConcept(c__IntervalFn,c__RecurrentTimeIntervalFn)
).



% ($documentation IntervalFn EnglishLanguage "A &%BinaryFunction that
% maps two instances of &%ConstantQuantity to the &%subclass of
% &%ConstantQuantity that comprises the interval from the first
% &%ConstantQuantity to the second &%ConstantQuantity.  For
% example, (&%IntervalFn (&%MeasureFn 8 &%Meter) (&%MeasureFn 14 &%Meter)) 
% would return the &%subclass of &%ConstantQuantity comprising quantities 
% between 8 and 14 meters in length.")


% 	(forall (?FROM ?TO ?QUANTITY ?CLASS)
% 		(=> 
% 			(and 
% 				($instance ?QUANTITY (IntervalFn ?FROM ?TO))
% 				($instance ?FROM ?CLASS)
% 				($instance ?TO ?CLASS)
% 			)
% 			($instance ?QUANTITY ?CLASS)
% 		)
% 	)

% 	(forall (?FROM ?QUANTITY ?TO)
% 		(<=> 
% 			($instance ?QUANTITY (IntervalFn ?FROM ?TO))
% 			(and 
% 				(greaterThanOrEqualTo ?QUANTITY ?FROM)
% 				(lessThanOrEqualTo ?QUANTITY ?TO)
% 			)
% 		)
% 	)

fof( mergeA1598, axiom,
	p__d__instance(c__MagnitudeFn,c__UnaryFunction)
).


% 	($domain MagnitudeFn 1 PhysicalQuantity)

% 	($range MagnitudeFn RealNumber)


% ($documentation MagnitudeFn EnglishLanguage "The magnitude of a &%PhysicalQuantity is the 
% numeric value for the quantity.  In other words, &%MagnitudeFn converts 
% a &%PhysicalQuantity with an associated &%UnitOfMeasure into an ordinary 
% &%RealNumber.  For example, the magnitude of the &%ConstantQuantity 2 
% &%Kilometers is the &%RealNumber 2.   Note that the magnitude of a 
% quantity in a given unit times that unit is equal to the original 
% quantity.")


fof( mergeA1601, axiom,
	(![UNIT,QUANT,NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfMeasure)
					)
				 &
					(
						( QUANT = f__MeasureFn2(NUMBER,UNIT) )
					)
				)
			)
			=>
			(
				( f__MagnitudeFn1(QUANT) = NUMBER )
			)
		)
	)
).


fof( mergeA1602, axiom,
	p__d__instance(c__UnitFn,c__UnaryFunction)
).


% 	($domain UnitFn 1 PhysicalQuantity)

% 	($range UnitFn UnitOfMeasure)


% ($documentation UnitFn EnglishLanguage "&%UnitFn returns just the
% &%UnitOfMeasure of a &%PhysicalQuantity with an associated
% &%UnitOfMeasure and &%RealNumber magnitude.  For example, the unit of
% the &%ConstantQuantity (&%MeasureFn 2 &%Kilometer) is the
% &%UnitOfMeasure &%Kilometer.")


fof( mergeA1605, axiom,
	(![NUMBER,QUANT,UNIT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfMeasure)
					)
				 &
					(
						( QUANT = f__MeasureFn2(NUMBER,UNIT) )
					)
				)
			)
			=>
			(
				( f__UnitFn1(QUANT) = UNIT )
			)
		)
	)
).


fof( mergeA1606, axiom,
	p__d__instance(c__PerFn,c__BinaryFunction)
).


fof( mergeA1607, axiom,
	p__d__instance(c__PerFn,c__TotalValuedRelation)
).


% 	($domain PerFn 1 PhysicalQuantity)

% 	($domain PerFn 2 PhysicalQuantity)

% 	($range PerFn FunctionQuantity)


% ($documentation PerFn EnglishLanguage "&%PerFn maps two instances of &%PhysicalQuantity to 
% the &%FunctionQuantity composed of these two instances.  For example, 
% (&%PerFn (&%MeasureFn 2 (&%MicroFn &%Gram)) (&%MeasureFn 1 (&%KiloFn 
% &%Gram))) denotes the &%FunctionQuantity of 2 micrograms per kiogram.  
% This function is useful, because it allows the knowledge engineer to 
% dynamically generate instances of &%FunctionQuantity.") 


fof( mergeA1611, axiom,
	p__subrelation(c__DensityFn,c__PerFn)
).


fof( mergeA1612, axiom,
	p__d__instance(c__DensityFn,c__TotalValuedRelation)
).


% 	($domain DensityFn 1 MassMeasure)

% 	($domain DensityFn 2 VolumeMeasure)

% 	($range DensityFn FunctionQuantity)


% ($documentation DensityFn EnglishLanguage "&%DensityFn maps an instance of &%MassMeasure 
% and an instance of &%VolumeMeasure to the density represented by this 
% proportion of mass and volume.  For example, (&%DensityFn (&%MeasureFn 3 &%Gram) 
% (&%MeasureFn 1 &%Liter)) represents the density of 3 grams per liter.")


fof( mergeA1616, axiom,
	p__subrelation(c__SpeedFn,c__PerFn)
).


fof( mergeA1617, axiom,
	p__d__instance(c__SpeedFn,c__TotalValuedRelation)
).


% 	($domain SpeedFn 1 LengthMeasure)

% 	($domain SpeedFn 2 TimeDuration)

% 	($range SpeedFn FunctionQuantity)


% ($documentation SpeedFn EnglishLanguage "Maps an instance of &%LengthMeasure and an instance of 
% &%TimeDuration to the speed represented by this proportion of distance and time.  
% For example, (&%SpeedFn (&%MeasureFn 55 &%Mile)(&%MeasureFn 1 &%HourDuration)) 
% represents the velocity of 55 miles per hour.")


fof( mergeA1621, axiom,
	p__d__instance(c__VelocityFn,c__QuaternaryFunction)
).


fof( mergeA1622, axiom,
	p__d__instance(c__VelocityFn,c__TotalValuedRelation)
).


% 	($domain VelocityFn 1 LengthMeasure)

% 	($domain VelocityFn 2 TimeDuration)

% 	($domain VelocityFn 3 Region)

% 	($domain VelocityFn 4 DirectionalAttribute)

% 	($range VelocityFn FunctionQuantity)


% ($documentation VelocityFn EnglishLanguage "Specifies the velocity of an object, i.e. the speed 
% and the direction of the speed.  For example (&%VelocityFn (&%MeasureFn 55 &%Mile) 
% (&%MeasureFn 2 &%HourDuration) ?REFERENCE &%North) denotes the velocity of 55 miles 
% per hour North of the given reference point ?REFERENCE.")


fof( mergeA1628, axiom,
	(![REF,DIRECTION,OBJECT,DISTANCE,TIME]: 
		(
			(
				(
					(
						p__d__instance(DIRECTION,c__DirectionalAttribute)
					)
				 &
					(
						p__d__instance(REF,c__Region)
					)
				 &
					(
						p__d__instance(TIME,c__TimeDuration)
					)
				 &
					(
						p__d__instance(DISTANCE,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(OBJECT,c__Object)
					)
				 &
					(
						p__measure(OBJECT,f__VelocityFn4(DISTANCE,TIME,REF,DIRECTION))
					)
				)
			)
			=>
			(
				p__measure(OBJECT,f__SpeedFn2(DISTANCE,TIME))
			)
		)
	)
).


% ($comment 
% ;; Now the units of measure:
% ;;
% ;; First base units for the SI system. No conversion functions are
% ;; provided for these units. 
% ;;
% ;; Length Base Unit
% )

fof( mergeA1629, axiom,
	p__d__instance(c__Meter,c__UnitOfLength)
).


fof( mergeA1630, axiom,
	p__d__instance(c__Meter,c__SystemeInternationalUnit)
).



% ($documentation Meter EnglishLanguage "SI &%UnitOfLength.  Symbol:  m. It is one of the
% base units in SI, and it is currently defined as follows: the &%Meter 
% is the length of the path traveled by light in a vacuum during a time 
% interval of 1/299792458 of a &%SecondDuration.")


% ($comment 
% ;; Mass Base Unit
% )

fof( mergeA1631, axiom,
	p__d__instance(c__Gram,c__UnitOfMass)
).


fof( mergeA1632, axiom,
	p__d__instance(c__Gram,c__SystemeInternationalUnit)
).



% ($documentation Gram EnglishLanguage "Submultiple of kilogram.  Symbol: g. 
% 1 kilogram = 1000 &%Grams.")


% ($comment 
% ;; Time Base Unit
% )

fof( mergeA1633, axiom,
	p__d__instance(c__SecondDuration,c__UnitOfDuration)
).


fof( mergeA1634, axiom,
	p__d__instance(c__SecondDuration,c__SystemeInternationalUnit)
).



% ($documentation SecondDuration EnglishLanguage "SI &%UnitOfDuration.  Symbol: s. 
% It is one of the base units in SI, and it is currently defined as 
% follows: the &%SecondDuration is the duration of 9192631770 periods of 
% the radiation corresponding to the transition between the two hyperfine 
% levels of the ground state of the cesium 133 atom.")


% ($comment 
% ;; Electric Current Base Unit
% )

fof( mergeA1635, axiom,
	p__d__instance(c__Ampere,c__CompositeUnitOfMeasure)
).


fof( mergeA1636, axiom,
	p__d__instance(c__Ampere,c__SystemeInternationalUnit)
).



% ($documentation Ampere EnglishLanguage "SI electric current measure.  Symbol: A. It is 
% one of the base units in SI. It is defined as follows: the &%Ampere is 
% that constant current which, if maintained in two straight parallel 
% conductors of infinite length, of negligible circular cross-section, and 
% placed 1 &%Meter apart in a vacuum, would produce between these conductors 
% a force equal to 2*10^(-7) &%Newton per &%Meter of length.") 


% ($comment 
% ;; Thermodynamic Temperature Base Unit
% )

fof( mergeA1637, axiom,
	p__d__instance(c__KelvinDegree,c__UnitOfTemperature)
).


fof( mergeA1638, axiom,
	p__d__instance(c__KelvinDegree,c__SystemeInternationalUnit)
).



% ($documentation KelvinDegree EnglishLanguage "SI &%UnitOfMeasure used
% with &%MeasureFn to produce terms denoting instances of
% &%TemperatureMeasure.  Symbol: K.  It is one of the base units in
% SI (it is also a unit in the ITS system).  Kelvin differs from the
% Celsius scale in that the triple point of water is defined to be
% 273.16 &%KelvinDegrees while it is 0 &%CelsiusDegrees.  The magnitudes
% of intervals in the two scales are the same.  By definition the
% conversion constant is 273.15.")


% ($comment 
% ;; Amount Of Substance Base Unit
% )

fof( mergeA1639, axiom,
	p__d__instance(c__Mole,c__UnitOfMass)
).


fof( mergeA1640, axiom,
	p__d__instance(c__Mole,c__SystemeInternationalUnit)
).



% ($documentation Mole EnglishLanguage "SI amount of substance
% unit. symbol: mol. It is one of the base units in SI. It is defined as
% follows: the &%Mole is the amount of substance of a system which
% contains as many elementary entities as there are atoms in 0.012
% &%Kilograms of carbon 12.  Note that, when this &%UnitOfMeasure is
% used, the elementary entities must be specified - they may be atoms,
% molecules, ions, electrons, etc. or groups of such particles.")


% ($comment 
% ;; Luminosity Intensity Base Unit
% )

fof( mergeA1641, axiom,
	p__d__instance(c__Candela,c__CompositeUnitOfMeasure)
).


fof( mergeA1642, axiom,
	p__d__instance(c__Candela,c__SystemeInternationalUnit)
).



% ($documentation Candela EnglishLanguage "SI luminosity intensity measure.  Symbol: cd. 
% It is one of the base units in SI, and it is currently defined as 
% follows:  the &%Candela is the luminous intensity, in a given direction, 
% of a source that emits monochromatic radiation of frequency 540*10^12 
% &%Hertz and that has a radiant intensity in that direction of 1/683 
% &%Watt per &%Steradian.")


fof( mergeA1643, axiom,
	p__d__instance(c__Liter,c__UnitOfVolume)
).



% ($documentation Liter EnglishLanguage "Unit of volume in the metric
% system.  It is currently defined to be equal to one cubic
% decimeter (0.001 cubic meter).  Symbol: l.")


fof( mergeA1644, axiom,
	p__d__instance(c__Centimeter,c__UnitOfLength)
).



% ($documentation Centimeter EnglishLanguage "Submultiple of &%Meter.  Symbol: cm. It is 
% the 100th part of a &%Meter")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER Centimeter)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 0.01) Meter)))
% )


% ($documentation Millimeter EnglishLanguage "Submultiple of Meter. Symbol: mm. A millimeter
% is the 1000th part of a meter")


fof( mergeA1645, axiom,
	p__d__instance(c__Millimeter,c__UnitOfLength)
).


% ($comment 
% ;; (=>
% ;;  (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;  (equal
% ;;    (MeasureFn ?NUMBER Millimeter)
% ;;    (MeasureFn
% ;;      (MultiplicationFn ?NUMBER 0.001) Meter)))
% )

fof( mergeA1646, axiom,
	p__d__instance(c__Kilometer,c__UnitOfLength)
).



% ($documentation Kilometer EnglishLanguage "Supermultiple of &%Meter. Symbol: km. A
% &%Meter is the 1000th part of a &%Kilometer")


fof( mergeA1647, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__Kilometer) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__1000),c__Meter) )
			)
		)
	)
).


% ($comment 
% ;; What follows are derived SI units with special names and symbols
% ;; (multiples and submultiples are together since they represent 
% ;; quantities of the same kind).
% ;;
% ;; Plane angle unit
% )

fof( mergeA1648, axiom,
	p__d__instance(c__Radian,c__UnitOfAngularMeasure)
).


fof( mergeA1649, axiom,
	p__d__instance(c__Radian,c__SystemeInternationalUnit)
).



% ($documentation Radian EnglishLanguage "SI plane angle measure.  Symbol: rad.  It is the 
% angle of a circle subtended by an arc equal in length to the circle's 
% radius. Another definition is:  the plane angle between two radii of a 
% circle which cut off on the circumference an arc equal in length to the 
% radius.  &%Radian = m/m = 1.")


% ($comment 
% ;; Solid angle unit
% )

fof( mergeA1650, axiom,
	p__d__instance(c__Steradian,c__UnitOfAngularMeasure)
).


fof( mergeA1651, axiom,
	p__d__instance(c__Steradian,c__SystemeInternationalUnit)
).



% ($documentation Steradian EnglishLanguage "SI solid angle measure.  Symbol: sr.  It is 
% the solid angle of a sphere subtended by a portion of the surface whose 
% area is equal to the square of the sphere's radius.  Another definition 
% is: the solid angle which, having its vertex in the center of the sphere, 
% cuts off an area of the surface of the sphere equal to that of a square 
% with sides of length equal to the radius of the sphere.  &%Steradian = 
% m^2/m^2 = 1.")


% ($comment 
% ;; Frequency units
% )

fof( mergeA1652, axiom,
	p__d__subclass(c__FrequencyMeasure,c__TimeDependentQuantity)
).



% ($documentation FrequencyMeasure EnglishLanguage "A &%subclass of
% &%TimeDependentQuantity, instances of which are measures of the
% frequency with which some &%Process occurs.")


fof( mergeA1653, axiom,
	p__d__subclass(c__UnitOfFrequency,c__CompositeUnitOfMeasure)
).



% ($documentation UnitOfFrequency EnglishLanguage "Every instance of this
% &%Class is a &%UnitOfMeasure that can be used with &%MeasureFn to form
% instances of &%FrequencyMeasure.")


fof( mergeA1654, axiom,
	(![NUMBER,UNIT,QUANT]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( f__MeasureFn2(NUMBER,UNIT) = QUANT )
					)
				 &
					(
						p__d__instance(UNIT,c__UnitOfFrequency)
					)
				)
			)
			=>
			(
				p__d__instance(QUANT,c__FrequencyMeasure)
			)
		)
	)
).


fof( mergeA1655, axiom,
	p__d__instance(c__Hertz,c__UnitOfFrequency)
).


fof( mergeA1656, axiom,
	p__d__instance(c__Hertz,c__SystemeInternationalUnit)
).



% ($documentation Hertz EnglishLanguage "SI frequency measure.  Symbol: Hz. It is the 
% number of cycles per second.  &%Hertz = s^(-1).  Note that &%Hertz 
% does not have a conversion function.")


% ($comment 
% ;; Force Unit
% )

fof( mergeA1657, axiom,
	p__d__instance(c__Newton,c__CompositeUnitOfMeasure)
).


fof( mergeA1658, axiom,
	p__d__instance(c__Newton,c__SystemeInternationalUnit)
).



% ($documentation Newton EnglishLanguage "SI force measure.  Symbol: N. It is that force 
% which gives to a mass of 1 kilogram an acceleration of 1 &%Meter per 
% &%SecondDuration.  &%Newton = m*kg*s^(-2).")


% ($comment 
% ;; Pressure unit
% )

fof( mergeA1659, axiom,
	p__d__instance(c__Pascal,c__CompositeUnitOfMeasure)
).


fof( mergeA1660, axiom,
	p__d__instance(c__Pascal,c__SystemeInternationalUnit)
).



% ($documentation Pascal EnglishLanguage "SI pressure measure.  Symbol:Pa. It is the 
% pressure of one &%Newton per square &%Meter.  &%Pascal = N/m^2 
% = m^(-1)*kg*s^(-2).")


% ($comment 
% ;; Energy Unit
% )

fof( mergeA1661, axiom,
	p__d__instance(c__Joule,c__CompositeUnitOfMeasure)
).


fof( mergeA1662, axiom,
	p__d__instance(c__Joule,c__SystemeInternationalUnit)
).



% ($documentation Joule EnglishLanguage "SI energy measure.  Symbol: J.  It is the work 
% done when the point of application of 1 &%Newton is displaced a distance 
% of 1 &%Meter in the direction of the force.  &%Joule = N*m = 
% m^2*kg*s^(-2).")


% ($comment 
% ;; Power Units
% )

fof( mergeA1663, axiom,
	p__d__instance(c__Watt,c__CompositeUnitOfMeasure)
).


fof( mergeA1664, axiom,
	p__d__instance(c__Watt,c__SystemeInternationalUnit)
).



% ($documentation Watt EnglishLanguage "SI power measure.  Symbol: W.  A &%UnitOfMeasure 
% that measures power, i.e. energy produced or expended divided by 
% &%TimeDuration. It is the power which gives rise to the production 
% of energy (or work) at the rate of one &%Joule per &%SecondDuration.  
% &%Watt = J/s = m^2*kg*s^(-3).")


fof( mergeA1665, axiom,
	p__d__instance(c__Horsepower,c__CompositeUnitOfMeasure)
).



% ($documentation Horsepower EnglishLanguage "A power measure that is equal to 746 &%Watts.")


fof( mergeA1666, axiom,
	(![N]: 
		(
			(
				p__d__instance(N,c__RealNumber)
			)
			=>
			(
				( f__MeasureFn2(N,c__Horsepower) = f__MeasureFn2(f__MultiplicationFn2(N,c__746),c__Watt) )
			)
		)
	)
).


% ($comment 
% ;; Note: According to SI one should not use the expression "per unit of." 
% ;;
% ;; Electric Charge Units
% )

fof( mergeA1667, axiom,
	p__d__instance(c__Coulomb,c__CompositeUnitOfMeasure)
).


fof( mergeA1668, axiom,
	p__d__instance(c__Coulomb,c__SystemeInternationalUnit)
).



% ($documentation Coulomb EnglishLanguage "SI electric charge measure.  Symbol: C. It is 
% the quantity of electric charge transported through a cross section of 
% a conductor in an electric circuit during each &%SecondDuration by a 
% current of 1 &%Ampere.  Coulomb = s*A.")


fof( mergeA1669, axiom,
	(![NUMBER,QUANTITY]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANTITY,c__PhysicalQuantity)
					)
				 &
					(
						( QUANTITY = f__MeasureFn2(NUMBER,c__Coulomb) )
					)
				)
			)
			=>
			(
				p__d__instance(QUANTITY,c__TimeDependentQuantity)
			)
		)
	)
).


% ($comment 
% ;; Electric Potential Units
% )

fof( mergeA1670, axiom,
	p__d__instance(c__Volt,c__CompositeUnitOfMeasure)
).


fof( mergeA1671, axiom,
	p__d__instance(c__Volt,c__SystemeInternationalUnit)
).



% ($documentation Volt EnglishLanguage "SI electric potential measure.  Symbol: V.  It is 
% the difference of electric potential between two points of a conducting 
% wire carrying a constant current of 1 &%Ampere, when the power dissipated 
% between these points is equal to 1 &%Watt.  &%Volt = W/A = 
% m^2*kg*s^(-3)*A^(-1).")


% ($comment 
% ;; Capacitance Units
% )

fof( mergeA1672, axiom,
	p__d__instance(c__Farad,c__CompositeUnitOfMeasure)
).


fof( mergeA1673, axiom,
	p__d__instance(c__Farad,c__SystemeInternationalUnit)
).



% ($documentation Farad EnglishLanguage "SI capacitance measure.  Symbol: F.  It is the 
% capacitance of a capacitator between the plates of which there appears 
% a difference of potential of 1 &%Volt when it is charged by a quantity 
% of electricity equal to 1 Coulomb.  &%Farad = C/V = 
% m^(-2)*kg(-1)*s^4*A^2.")


% ($comment 
% ;; Electric Resistance Units
% )

fof( mergeA1674, axiom,
	p__d__instance(c__Ohm,c__CompositeUnitOfMeasure)
).


fof( mergeA1675, axiom,
	p__d__instance(c__Ohm,c__SystemeInternationalUnit)
).



% ($documentation Ohm EnglishLanguage "SI electric resistance measure. It is the electric
% resistance between two points of a conductor when a constant difference 
% of potential of 1 &%Volt, applied between these two points,
% produces in this conductor a current of 1 &%Ampere, this conductor not
% being the force of any electromotive force.  &%Ohm = V/A = 
% m^2*kg*s^(-3)*A^(-2).")


% ($comment 
% ;; Electric Conductance Units
% )

fof( mergeA1676, axiom,
	p__d__instance(c__Siemens,c__CompositeUnitOfMeasure)
).


fof( mergeA1677, axiom,
	p__d__instance(c__Siemens,c__SystemeInternationalUnit)
).



% ($documentation Siemens EnglishLanguage "SI electric conductance measure.  Symbol:  S.  
% In the case of direct current, the conductance in &%Siemens is the 
% reciprocal of the resistance in &%Ohms, in the case of alternating current, 
% it is the reciprocal of the impedance in ohms.  siemens = A/V = 
% m^(-2)*kg(-1)*s^(3)*A^2.")


% ($comment 
% ;; Magnetic Flux Units
% )

fof( mergeA1678, axiom,
	p__d__instance(c__Weber,c__CompositeUnitOfMeasure)
).


fof( mergeA1679, axiom,
	p__d__instance(c__Weber,c__SystemeInternationalUnit)
).



% ($documentation Weber EnglishLanguage "SI magnetic flux measure.  Symbol: Wb. It is the 
% magnetic flux which, linking a circuit of one turn, produces in it an
% electromotive force of 1 &%Volt as it is reduced to zero at a uniform
% rate in 1 &%SecondDuration.  &%Weber = V*s = m^2*kg*s^(-2)*A^(-1)." )


% ($comment 
% ;; Magnetic Flux Density Units
% )

fof( mergeA1680, axiom,
	p__d__instance(c__Tesla,c__CompositeUnitOfMeasure)
).


fof( mergeA1681, axiom,
	p__d__instance(c__Tesla,c__SystemeInternationalUnit)
).



% ($documentation Tesla EnglishLanguage "SI magnetic flux density measure.  Symbol:  T.
% One &%Tesla equals one &%Weber per square &%Meter.  &%Tesla = Wb/m^2 = 
% kg*s^(-2)*A^(-1).")


% ($comment 
% ;; Inductance Units
% )

fof( mergeA1682, axiom,
	p__d__instance(c__Henry,c__CompositeUnitOfMeasure)
).


fof( mergeA1683, axiom,
	p__d__instance(c__Henry,c__SystemeInternationalUnit)
).



% ($documentation Henry EnglishLanguage "SI inductance measure.  Symbol: H.  One &%Henry 
% is equivalent to one &%Volt divided by one &%Ampere per &%SecondDuration. 
% If a current changing at the rate of one &%Ampere per &%SecondDuration 
% induces an electromotive force of one &%Volt, the circuit has an 
% inductance of one &%Henry.  &%Henry = Wb/A = m^2*kg*s^(-2)*A^(-2).")


% ($comment 
% ;; Celsius Temperature unit
% )

fof( mergeA1684, axiom,
	p__d__instance(c__CelsiusDegree,c__UnitOfTemperature)
).


fof( mergeA1685, axiom,
	p__d__instance(c__CelsiusDegree,c__SystemeInternationalUnit)
).



% ($documentation CelsiusDegree EnglishLanguage "A &%TemperatureMeasure.  The freezing point 
% and the boiling point of water are, respectively, 0 &%CelsiusDegrees and 100 
% &%CelsiusDegrees.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER CelsiusDegree)
% ;;         (MeasureFn (SubtractionFn ?NUMBER 273.15) KelvinDegree)))
% ;;
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal 
% ;;         (MeasureFn ?NUMBER CelsiusDegree)
% ;;         (MeasureFn (DivisionFn (SubtractionFn ?NUMBER 32) 1.8) FahrenheitDegree)))
% )

% ($comment 
% ;; Luminous Flux Units
% )

fof( mergeA1686, axiom,
	p__d__instance(c__Lumen,c__CompositeUnitOfMeasure)
).


fof( mergeA1687, axiom,
	p__d__instance(c__Lumen,c__SystemeInternationalUnit)
).



% ($documentation Lumen EnglishLanguage "SI luminous flux measure.  Symbol: lm.  It is the 
% amount streaming outward through one solid angle of 1 &%Steradian from a 
% uniform point source having an intensity of one &%Candela.  &%Lumen = 
% cd*sr = cd * 1.")


% ($comment 
% ;; Illuminance Units
% )

fof( mergeA1688, axiom,
	p__d__instance(c__Lux,c__CompositeUnitOfMeasure)
).


fof( mergeA1689, axiom,
	p__d__instance(c__Lux,c__SystemeInternationalUnit)
).



% ($documentation Lux EnglishLanguage "SI illuminance measure.  Symbol: lx.  It is the 
% amount of illumination provided when one &%Lumen is evenly distributed 
% over an area of 1 square &%Meter. This is also equivalent to the 
% illumination that would exist on a surface all points of which are one 
% &%Meter from a point source of one &%Candela.  &%Lux = lm/m^2 = 
% m^(-2)*cd.")


% ($comment 
% ;; Activity Units
% )

fof( mergeA1690, axiom,
	p__d__instance(c__Becquerel,c__CompositeUnitOfMeasure)
).


fof( mergeA1691, axiom,
	p__d__instance(c__Becquerel,c__SystemeInternationalUnit)
).



% ($documentation Becquerel EnglishLanguage "SI activity measure.  Symbol: Bq.  It measures 
% the amount of radioactivity contained in a given sample of matter. It is 
% that quantity of a radioactive element in which there is one atomic 
% disintegration per &%SecondDuration.  &%Becquerel = s^(-1).")


fof( mergeA1692, axiom,
	(![NUMBER,QUANTITY]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANTITY,c__PhysicalQuantity)
					)
				 &
					(
						( QUANTITY = f__MeasureFn2(NUMBER,c__Becquerel) )
					)
				)
			)
			=>
			(
				p__d__instance(QUANTITY,c__TimeDependentQuantity)
			)
		)
	)
).


% ($comment 
% ;; Absorbed Dose Units
% )

fof( mergeA1693, axiom,
	p__d__instance(c__Gray,c__CompositeUnitOfMeasure)
).


fof( mergeA1694, axiom,
	p__d__instance(c__Gray,c__SystemeInternationalUnit)
).



% ($documentation Gray EnglishLanguage "SI absorbed dose measure.  Symbol: Gy.  It measures 
% the dose of radiation absorbed in living tissue. It is equal approximately 
% to the absorbed dose delivered when the energy per unit mass imparted to
% matter by ionizing radiation is 1 &%Joule per kilogram.  &%Gray = J/kg 
% = m^2*s^(-2).")


% ($comment 
% ;; Dose Equivalent Units
% )

fof( mergeA1695, axiom,
	p__d__instance(c__Sievert,c__CompositeUnitOfMeasure)
).


fof( mergeA1696, axiom,
	p__d__instance(c__Sievert,c__SystemeInternationalUnit)
).



% ($documentation Sievert EnglishLanguage "SI dose equivalent measure.  Symbol: Sv.  It is 
% a unit of biologic dose of ionizing radiation.  The &%Sievert makes it 
% possible to normalize doses of different types of radiation. It takes 
% into account the relative biologic effectiveness of ionizing radiation, 
% since each form of such radiation--e.g., X rays, gamma rays, neutrons--
% has a slightly different effect on living tissue for a given absorbed 
% dose. The dose equivalent of a given type of radiation (in &%Sievert) is 
% the dose of the radiation in &%Gray multiplied by a quality factor that 
% is based on the relative biologic effectiveness of the radiation. 
% Accordingly, one &%Sievert is generally defined as the amount of radiation 
% roughly equivalent in biologic effectiveness to one &%Gray of gamma 
% radiation.  &%Sievert = J/kg = m^2*s^(-2)")


% ($comment 
% ;; Units that are accepted for -use- with SI
% )

fof( mergeA1697, axiom,
	p__d__instance(c__DayDuration,c__UnitOfDuration)
).



% ($documentation DayDuration EnglishLanguage "Time unit. 1 day = 24 hours.")


fof( mergeA1698, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__DayDuration) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__24),c__HourDuration) )
			)
		)
	)
).


fof( mergeA1699, axiom,
	p__d__instance(c__HourDuration,c__UnitOfDuration)
).



% ($documentation HourDuration EnglishLanguage "Time unit. 1 hour = 60 minutes.")


fof( mergeA1700, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__HourDuration) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__60),c__MinuteDuration) )
			)
		)
	)
).


fof( mergeA1701, axiom,
	p__d__instance(c__MinuteDuration,c__UnitOfDuration)
).



% ($documentation MinuteDuration EnglishLanguage "Time unit. 1 minute = 60 seconds. ")


fof( mergeA1702, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__MinuteDuration) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__60),c__SecondDuration) )
			)
		)
	)
).


fof( mergeA1703, axiom,
	p__d__instance(c__WeekDuration,c__UnitOfDuration)
).



% ($documentation WeekDuration EnglishLanguage "Time unit.  A week's duration is seven days.")


fof( mergeA1704, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__WeekDuration) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__7),c__DayDuration) )
			)
		)
	)
).


fof( mergeA1705, axiom,
	p__d__instance(c__MonthDuration,c__UnitOfDuration)
).



% ($documentation MonthDuration EnglishLanguage "Time unit.  A month's duration is at least
% 28 days, and no more than 31 days.  Note that this unit is a range, rather
% than an exact amount, unlike most other units.")


% 	(forall (?NUMBER)
% 		(=> 
% 			(equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% 			(greaterThanOrEqualTo (MeasureFn ?NUMBER MonthDuration) (MeasureFn (MultiplicationFn ?NUMBER 28) DayDuration))
% 		)
% 	)

% 	(forall (?NUMBER)
% 		(=> 
% 			(equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% 			(lessThanOrEqualTo (MeasureFn ?NUMBER MonthDuration) (MeasureFn (MultiplicationFn ?NUMBER 31) DayDuration))
% 		)
% 	)

fof( mergeA1708, axiom,
	p__d__instance(c__YearDuration,c__UnitOfDuration)
).



% ($documentation YearDuration EnglishLanguage "Time unit. one calendar year. 1 year =
% 365 days = 31536000 seconds.")


fof( mergeA1709, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__YearDuration) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__365),c__DayDuration) )
			)
		)
	)
).


% ($comment 
% ;; What follows are units that are also accepted for use with SI.  The 
% ;; SI equivalents for these units are obtained experimentally.
% )

fof( mergeA1710, axiom,
	p__d__instance(c__Amu,c__UnitOfMass)
).



% ($documentation Amu EnglishLanguage "Atomic mass unit.  Symbol: u. It is the mass of 
% the twelfth part of an atom of the Carbon 12 isotope.")


% ($comment 
% ;; (=>
% ;;   (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;   (equal
% ;;     (MeasureFn ?NUMBER Amu)
% ;;     (MeasureFn (MultiplicationFn ?NUMBER 1.6605402E-24) Gram)))
% )

fof( mergeA1711, axiom,
	p__d__instance(c__ElectronVolt,c__CompositeUnitOfMeasure)
).



% ($documentation ElectronVolt EnglishLanguage "The &%ElectronVolt is an energy measure.  
% Symbol: eV.  It is the kinetic energy acquired by an electron in passing 
% through a potential difference of 1 &%Volt in a vacuum.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER ElectronVolt)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 1.60217733E-19) Joule)))
% ;;
% ;; The following units have been temporarily accepted for use with 
% ;; SI units.
% )

fof( mergeA1712, axiom,
	p__d__instance(c__Angstrom,c__UnitOfLength)
).



% ($documentation Angstrom EnglishLanguage "The &%Angstrom is a &%LengthMeasure. 
% 1 &%Angstrom = 10^(-10) m")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER Angstrom)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 1.0E-10) Meter)))
% )

% ($comment 
% ;; The following units are unacceptable in SI but are part of other 
% ;; systems of measurement that are widely used.
% ;;
% ;; More Length units
% )

fof( mergeA1713, axiom,
	p__d__instance(c__FootLength,c__UnitOfLength)
).



% ($documentation FootLength EnglishLanguage "English length unit of feet.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER FootLength)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 0.3048) Meter)))
% )

fof( mergeA1714, axiom,
	p__d__instance(c__Inch,c__UnitOfLength)
).



% ($documentation Inch EnglishLanguage "English length unit of inches.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER Inch)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 0.0254) Meter)))
% )

fof( mergeA1715, axiom,
	p__d__instance(c__Mile,c__UnitOfLength)
).



% ($documentation Mile EnglishLanguage "English length unit of miles.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER Mile)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 1609.344) Meter)))
% )

% ($comment 
% ;; More Volume units
% )

fof( mergeA1716, axiom,
	p__d__instance(c__UnitedStatesGallon,c__UnitOfVolume)
).


fof( mergeA1717, axiom,
	p__relatedInternalConcept(c__UnitedStatesGallon,c__UnitedKingdomGallon)
).



% ($documentation UnitedStatesGallon EnglishLanguage "Unit of volume commonly used in the 
% United States.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER UnitedStatesGallon)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 3.785411784) Liter))) 
% )

fof( mergeA1718, axiom,
	p__d__instance(c__Quart,c__UnitOfVolume)
).



% ($documentation Quart EnglishLanguage "English unit of volume equal to 1/4 of a 
% &%UnitedStatesGallon.") 


fof( mergeA1719, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__Quart) = f__MeasureFn2(f__DivisionFn2(NUMBER,c__4),c__UnitedStatesGallon) )
			)
		)
	)
).


fof( mergeA1720, axiom,
	p__d__instance(c__Pint,c__UnitOfVolume)
).



% ($documentation Pint EnglishLanguage "English unit of volume equal to 1/2 of a 
% &%Quart.") 


fof( mergeA1721, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__Pint) = f__MeasureFn2(f__DivisionFn2(NUMBER,c__2),c__Quart) )
			)
		)
	)
).


fof( mergeA1722, axiom,
	p__d__instance(c__Cup,c__UnitOfVolume)
).



% ($documentation Cup EnglishLanguage "English unit of volume equal to 1/2 of a 
% &%Pint.") 


fof( mergeA1723, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__Cup) = f__MeasureFn2(f__DivisionFn2(NUMBER,c__2),c__Pint) )
			)
		)
	)
).


fof( mergeA1724, axiom,
	p__d__instance(c__Ounce,c__UnitOfVolume)
).



% ($documentation Ounce EnglishLanguage "English unit of volume equal to 1/8 of a 
% &%Cup.") 


fof( mergeA1725, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__Ounce) = f__MeasureFn2(f__DivisionFn2(NUMBER,c__8),c__Cup) )
			)
		)
	)
).


fof( mergeA1726, axiom,
	p__d__instance(c__UnitedKingdomGallon,c__UnitOfVolume)
).



% ($documentation UnitedKingdomGallon EnglishLanguage "Unit of volume commonly used in the 
% United Kingdom.")


% ($comment 
% ;; (=>
% ;; (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER UnitedKingdomGallon)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 4.54609) Liter))) 
% )

% ($comment 
% ;; More Mass units
% )

fof( mergeA1727, axiom,
	p__d__instance(c__AtomGram,c__UnitOfMass)
).



% ($documentation AtomGram EnglishLanguage "&%MassMeasure that is also known as the gram-atom.  
% Defined as the mass in grams of 1 &%Mole of pure substance.  For example, 
% 1 &%AtomGram of Carbon 12 will be 12 &%Grams of pure Carbon 12.  2 &%AtomGrams 
% of the same substance will be 24 &%Grams of it.  This is an unusual unit in 
% that it is essentially 1 &%Mole of 'stuff' measured in grams, so that the 
% actual value (i.e. mass) depends on the type of substance.")



% ($documentation Kilogram EnglishLanguage "Supermultiple of &%Gramm. Symbol: kg. 1 &%Kilogram
% = 1000 Grams.")


fof( mergeA1728, axiom,
	p__d__instance(c__Kilogram,c__SystemeInternationalUnit)
).


fof( mergeA1729, axiom,
	p__d__instance(c__Kilogram,c__UnitOfMass)
).


fof( mergeA1730, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__Kilogram) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__1000),c__Gram) )
			)
		)
	)
).


% 	($domain weight 1 SelfConnectedObject)

% 	($domain weight 2 MassMeasure)

fof( mergeA1733, axiom,
	p__d__instance(c__weight,c__BinaryPredicate)
).


fof( mergeA1734, axiom,
	p__subrelation(c__weight,c__measure)
).



% ($documentation weight EnglishLanguage "(&%weight ?O ?MM) means that on planet earth
% the &%SelfConnectedObject ?O has the weight ?MM.")


fof( mergeA1735, axiom,
	p__d__instance(c__PoundMass,c__UnitOfMass)
).



% ($documentation PoundMass EnglishLanguage "English mass unit of pounds.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER PoundMass)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 453.59237) Gram)))
% )

fof( mergeA1736, axiom,
	p__d__instance(c__Slug,c__UnitOfMass)
).



% ($documentation Slug EnglishLanguage "English mass unit of slugs.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER Slug)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 14593.90) Gram)))
% )

% ($comment 
% ;; More Temperature units
% )

fof( mergeA1737, axiom,
	p__d__instance(c__RankineDegree,c__UnitOfTemperature)
).



% ($documentation RankineDegree EnglishLanguage "A &%TemperatureMeasure.  Note 
% that 0 &%RankineDegrees is the same as the absolute zero (i.e. 0 
% &%KelvinDegrees).")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER RankineDegree)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 1.8) KelvinDegree)))
% )

fof( mergeA1738, axiom,
	p__d__instance(c__FahrenheitDegree,c__UnitOfTemperature)
).



% ($documentation FahrenheitDegree EnglishLanguage "A &%UnitOfTemperature that is commonly 
% used in the United States.  On the Fahrenheit scale, the freezing point 
% of water is 32 &%FahrenheitDegrees, and the boiling point of water is 
% 212 &%FahrenheitDegrees.")


% ($comment 
% ;; More Force units
% )

fof( mergeA1739, axiom,
	p__d__instance(c__PoundForce,c__CompositeUnitOfMeasure)
).



% ($documentation PoundForce EnglishLanguage "English pound of force. The conversion
% factor depends on the local value of the acceleration of free fall. A
% mean value is used in the conversion axiom associated with this 
% constant.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER PoundForce)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 4.448222) Newton)))
% )

% ($comment 
% ;; More Energy units
% )

fof( mergeA1740, axiom,
	p__d__instance(c__Calorie,c__CompositeUnitOfMeasure)
).



% ($documentation Calorie EnglishLanguage "A &%Calorie is an energy measure.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER Calorie)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 4.1868) Joule)))
% )

fof( mergeA1741, axiom,
	p__d__instance(c__BritishThermalUnit,c__CompositeUnitOfMeasure)
).



% ($documentation BritishThermalUnit EnglishLanguage "An energy measure.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER BritishThermalUnit)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 1055.05585262) Joule)))
% )

% ($comment 
% ;; More plane angle units
% )

fof( mergeA1742, axiom,
	p__d__instance(c__AngularDegree,c__UnitOfAngularMeasure)
).



% ($documentation AngularDegree EnglishLanguage "A plane angle measure.")


fof( mergeA1743, axiom,
	(![N,QUANT]: 
		(
			(
				(
					(
						p__d__instance(N,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( QUANT = f__MeasureFn2(N,c__AngularDegree) )
					)
				)
			)
			=>
			(
				p__d__instance(QUANT,c__PlaneAngleMeasure)
			)
		)
	)
).


fof( mergeA1744, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__AngularDegree) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,f__DivisionFn2(c__Pi,c__180)),c__Radian) )
			)
		)
	)
).


fof( mergeA1745, axiom,
	(![ANGLE,NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(ANGLE,c__Object)
					)
				 &
					(
						p__measure(ANGLE,f__MeasureFn2(NUMBER,c__AngularDegree))
					)
				)
			)
			=>
			(
				(
					(
						p__greaterThanOrEqualTo(NUMBER,c__0)
					)
				 &
					(
						p__lessThanOrEqualTo(NUMBER,c__360)
					)
				)
			)
		)
	)
).


fof( mergeA1746, axiom,
	( f__MeasureFn2(c__0,c__AngularDegree) = f__MeasureFn2(c__360,c__AngularDegree) )
).


% ($comment 
% ;; Other interesting units of measure
% ;;
% ;; Currency units
% )

fof( mergeA1747, axiom,
	p__d__instance(c__UnitedStatesDollar,c__UnitOfCurrency)
).



% ($documentation UnitedStatesDollar EnglishLanguage "A currency measure.")


fof( mergeA1748, axiom,
	p__d__instance(c__UnitedStatesCent,c__UnitOfCurrency)
).



% ($documentation UnitedStatesCent EnglishLanguage "A currency measure.  1 &%UnitedStatesCent is 
% equal to .01 &%UnitedStatesDollars.")


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER UnitedStatesCent)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 0.01) UnitedStatesDollar)))
% )

fof( mergeA1749, axiom,
	p__d__instance(c__EuroDollar,c__UnitOfCurrency)
).



% ($documentation EuroDollar EnglishLanguage "A currency measure of most European Union countries.")


fof( mergeA1750, axiom,
	p__d__instance(c__EuroCent,c__UnitOfCurrency)
).



% ($documentation EuroCent EnglishLanguage "A currency measure.  1 &%EuroCent is equal to .01 
% &%EuroDollars.")  


% ($comment 
% ;; (=>
% ;;    (equal ?NUMBER (MultiplicationFn 1 ?NUMBER))
% ;;    (equal
% ;;         (MeasureFn ?NUMBER EuroCent)
% ;;         (MeasureFn (MultiplicationFn ?NUMBER 0.01) EuroDollar)))
% )

% ($comment 
% ;; Information units
% )

fof( mergeA1751, axiom,
	p__d__subclass(c__InformationMeasure,c__ConstantQuantity)
).



% ($documentation InformationMeasure EnglishLanguage "Measures of the amount of information.  
% Includes &%Bit, &%Byte, and multiples of these, e.g. &%KiloByte and 
% &%MegaByte.")


fof( mergeA1752, axiom,
	p__d__instance(c__Bit,c__UnitOfInformation)
).



% ($documentation Bit EnglishLanguage "One &%Bit of information.  A one or a zero.")


fof( mergeA1753, axiom,
	p__d__instance(c__Byte,c__UnitOfInformation)
).



% ($documentation Byte EnglishLanguage "One &%Byte of information.  A &%Byte is eight 
% &%Bits.")


fof( mergeA1754, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__Byte) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__8),c__Bit) )
			)
		)
	)
).


fof( mergeA1755, axiom,
	p__d__instance(c__KiloByte,c__UnitOfInformation)
).



% ($documentation KiloByte EnglishLanguage "One &%KiloByte (KB) of information.  One 
% &%KiloByte is 1024 &%Bytes.  Note that this sense of 'kilo' is 
% different from the one accepted in the SI system.")


fof( mergeA1756, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__KiloByte) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__1024),c__Byte) )
			)
		)
	)
).


fof( mergeA1757, axiom,
	p__d__instance(c__MegaByte,c__UnitOfInformation)
).



% ($documentation MegaByte EnglishLanguage "One &%MegaByte (MB) of information.  One 
% &%MegaByte is 1024 &%KiloBytes.  Note that this sense of 'mega' is 
% different from the one accepted in the SI system.")


fof( mergeA1758, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__MegaByte) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__1024),c__KiloByte) )
			)
		)
	)
).


% ($comment 
% ;; The following content was inspired by the Quantities ontology 
% ;; developed by ITBM-CNR.
% )

fof( mergeA1759, axiom,
	p__d__instance(c__measure,c__BinaryPredicate)
).


fof( mergeA1760, axiom,
	p__d__instance(c__measure,c__AsymmetricRelation)
).


% 	($domain measure 1 Object)

% 	($domain measure 2 PhysicalQuantity)


% ($documentation measure EnglishLanguage "A very general &%Predicate for
% asserting that a particular &%Object is measured by a particular
% &%PhysicalQuantity.  In general, the second argument of this
% &%Predicate will be a term produced with the &%Function &%MeasureFn.")


fof( mergeA1763, axiom,
	p__d__instance(c__age,c__SingleValuedRelation)
).


fof( mergeA1764, axiom,
	p__subrelation(c__age,c__measure)
).


% 	($domain age 2 TimeDuration)


% ($documentation age EnglishLanguage "Simply relates an &%Object to a &%ConstantQuantity 
% specifying the age of the &%Object.")


% 	(forall (?OBJ ?TIME ?DURATION)
% 		(=> 
% 			(and 
% 				($instance ?TIME TimePoint)
% 				(holdsDuring ?TIME (age ?OBJ ?DURATION))
% 			)
% 			(duration (TimeIntervalFn (BeginFn (WhenFn ?OBJ)) ?TIME) ?DURATION)
% 		)
% 	)

fof( mergeA1767, axiom,
	p__subrelation(c__linearExtent,c__measure)
).


% 	($domain linearExtent 2 LengthMeasure)


% ($documentation linearExtent EnglishLanguage "&%BinaryPredicate that is used to state the measure 
% of an &%Object from one point to another point along its surface.  Note 
% that the difference between the predicates &%length and &%distance is that 
% the &%length is used to state the &%LengthMeasure of one of the dimensions of 
% a single object, while &%distance is used to state the &%LengthMeasure that 
% separates two distinct objects.")


fof( mergeA1769, axiom,
	p__d__instance(c__width,c__SingleValuedRelation)
).


fof( mergeA1770, axiom,
	p__subrelation(c__width,c__linearExtent)
).



% ($documentation width EnglishLanguage "&%BinaryPredicate that is used to state the measure 
% of an &%Object from side to side at its widest span.")


fof( mergeA1771, axiom,
	p__subrelation(c__height,c__linearExtent)
).


% 	($domain height 1 SelfConnectedObject)

% 	($domain height 2 LengthMeasure)


% ($documentation height EnglishLanguage "The height of an &%Object is the distance between 
% its &%top and its &%bottom.")


fof( mergeA1774, axiom,
	p__d__instance(c__length,c__SingleValuedRelation)
).


fof( mergeA1775, axiom,
	p__subrelation(c__length,c__linearExtent)
).



% ($documentation length EnglishLanguage "&%BinaryPredicate that is used to state the measure 
% of an &%Object along its longest span.")


fof( mergeA1776, axiom,
	(![O,M]: 
		(
			(
				(
					(
						p__d__instance(M,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(O,c__Object)
					)
				 &
					(
						p__length(O,M)
					)
				)
			)
			=>
			(
				(![M2]: 
					(
						(
							~ (
								p__d__instance(M2,c__LengthMeasure)
							)
						 |
							~ (
								p__linearExtent(O,M2)
							)
						 |
							~ (
								p__greaterThan(M2,M)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1777, axiom,
	p__d__subclass(c__Oval,c__ClosedTwoDimensionalFigure)
).



% ($documentation Oval EnglishLanguage "The class of &%ClosedTwoDimensionalFigures that are 
% produced by the intersection of a &%Cone with a &%ClosedTwoDimensionalFigure.")


fof( mergeA1778, axiom,
	p__d__subclass(c__Circle,c__Oval)
).



% ($documentation Circle EnglishLanguage "The class of &%Ovals such that all &%GeometricPoints 
% that make up the &%Circle are equidistant from a single &%GeometricPoint, 
% known as the center of the &%Circle.")


fof( mergeA1779, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Circle)
			)
			=>
			(
				(?[R]: 
					(
						(
							(
								p__d__instance(R,c__LengthMeasure)
							)
						 &
							(
								p__radius(C,R)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: equal is reflexive, thus the axiom is a tautology
% ;;
% ;;(=>
% ;;  ($instance ?C Circle)
% ;;  (exists (?P)
% ;;    (equal (CenterOfCircleFn ?C) ?P)))
% )


% ($documentation CenterOfCircleFn EnglishLanguage "(CenterOfCircleFn ?CIRCLE) denotes the 
% &%GeometricPoint that is the center of the &%Circle ?CIRCLE.")


fof( mergeA1780, axiom,
	p__d__instance(c__CenterOfCircleFn,c__UnaryFunction)
).


fof( mergeA1781, axiom,
	p__d__instance(c__CenterOfCircleFn,c__TotalValuedRelation)
).


% 	($domain CenterOfCircleFn 1 Circle)

% 	($range CenterOfCircleFn GeometricPoint)

fof( mergeA1784, axiom,
	p__d__instance(c__radius,c__BinaryPredicate)
).


fof( mergeA1785, axiom,
	p__d__instance(c__radius,c__SingleValuedRelation)
).


fof( mergeA1786, axiom,
	p__d__instance(c__radius,c__TotalValuedRelation)
).


% 	($domain radius 1 Circle)

% 	($domain radius 2 LengthMeasure)


% ($documentation radius EnglishLanguage "(&%radius ?CIRCLE ?LENGTH) means that the radius of 
% the &%Circle ?CIRCLE has a length of ?LENGTH.")


fof( mergeA1789, axiom,
	(![CIRCLE,RADIUS]: 
		(
			(
				(
					(
						p__d__instance(RADIUS,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(CIRCLE,c__Circle)
					)
				 &
					(
						p__radius(CIRCLE,RADIUS)
					)
				)
			)
			=>
			(
				(?[POINT]: 
					(
						(
							(
								p__d__instance(POINT,c__GeometricPoint)
							)
						 &
							(
								(![PART]: 
									(
										(
											(
												(
													p__d__instance(PART,c__GeometricPoint)
												)
											 &
												(
													p__pointOfFigure(PART,CIRCLE)
												)
											)
										)
										=>
										(
											p__geometricDistance(PART,POINT,RADIUS)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1790, axiom,
	p__subrelation(c__diameter,c__width)
).


fof( mergeA1791, axiom,
	p__d__instance(c__diameter,c__BinaryPredicate)
).


fof( mergeA1792, axiom,
	p__d__instance(c__diameter,c__SingleValuedRelation)
).


fof( mergeA1793, axiom,
	p__d__instance(c__diameter,c__TotalValuedRelation)
).


% 	($domain diameter 1 Circle)

% 	($domain diameter 2 LengthMeasure)


% ($documentation diameter EnglishLanguage "(&%diameter ?CIRCLE ?LENGTH) means that the diameter 
% of the &%Circle ?CIRCLE has a length of ?LENGTH.")


fof( mergeA1796, axiom,
	(![CIRCLE,LENGTH]: 
		(
			(
				(
					(
						p__d__instance(LENGTH,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(CIRCLE,c__Circle)
					)
				 &
					(
						p__diameter(CIRCLE,LENGTH)
					)
				)
			)
			=>
			(
				(?[HALF]: 
					(
						(
							(
								p__d__instance(HALF,c__LengthMeasure)
							)
						 &
							(
								p__radius(CIRCLE,HALF)
							)
						 &
							(
								( f__MultiplicationFn2(HALF,c__2) = LENGTH )
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1797, axiom,
	p__d__instance(c__distance,c__SingleValuedRelation)
).


fof( mergeA1798, axiom,
	p__d__instance(c__distance,c__SpatialRelation)
).


fof( mergeA1799, axiom,
	p__d__instance(c__distance,c__TernaryPredicate)
).


% 	($domain distance 1 Physical)

% 	($domain distance 2 Physical)

% 	($domain distance 3 LengthMeasure)


% ($documentation distance EnglishLanguage "(&%distance ?OBJ1 ?OBJ2 ?QUANT) means that the 
% shortest distance between the two objects ?OBJ1 and ?OBJ2 is ?QUANT.  Note 
% that the difference between the predicates &%length and &%distance is that 
% the &%length is used to state the &%LengthMeasure of one of the dimensions of 
% a single object, while &%distance is used to state the &%LengthMeasure that 
% separates two distinct objects.")


fof( mergeA1803, axiom,
	(![OBJ2,OBJ1,QUANT]: 
		(
			(
				(
					(
						p__d__instance(QUANT,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(OBJ2,c__Physical)
					)
				 &
					(
						p__d__instance(OBJ1,c__Physical)
					)
				 &
					(
						p__distance(OBJ1,OBJ2,QUANT)
					)
				)
			)
			=>
			(
				p__distance(OBJ2,OBJ1,QUANT)
			)
		)
	)
).


fof( mergeA1804, axiom,
	p__subrelation(c__altitude,c__distance)
).


fof( mergeA1805, axiom,
	p__d__instance(c__altitude,c__SingleValuedRelation)
).



% ($documentation altitude EnglishLanguage "A &%TernaryPredicate that is
% used to state the &%distance between the &%top of an &%Object and
% another point that is below the &%top of the &%Object (often this
% other point will be sea level).  Note that this &%Predicate can be
% used to specify, for example, the height of geographic features,
% e.g. mountains, the altitude of aircraft, and the orbit of satellites
% around the Earth.")


fof( mergeA1806, axiom,
	(![HEIGHT,OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(HEIGHT,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__altitude(OBJ1,OBJ2,HEIGHT)
					)
				)
			)
			=>
			(
				p__orientation(OBJ1,OBJ2,c__Above)
			)
		)
	)
).


fof( mergeA1807, axiom,
	(![OBJ1,OBJ2,HEIGHT]: 
		(
			(
				(
					(
						p__d__instance(HEIGHT,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(OBJ2,c__Physical)
					)
				 &
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				 &
					(
						p__altitude(OBJ1,OBJ2,HEIGHT)
					)
				)
			)
			=>
			(
				(?[TOP]: 
					(
						(
							(
								p__d__instance(TOP,c__SelfConnectedObject)
							)
						 &
							(
								p__top(TOP,OBJ1)
							)
						 &
							(
								p__distance(TOP,OBJ2,HEIGHT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1808, axiom,
	p__subrelation(c__depth,c__distance)
).


fof( mergeA1809, axiom,
	p__d__instance(c__depth,c__SingleValuedRelation)
).



% ($documentation depth EnglishLanguage "A &%TernaryPredicate that is
% used to state the &%distance between the &%top of an &%Object and
% another point that is above the &%top of the &%Object (often this
% other point will be sea level).  Note that this &%Predicate can be
% used to specify, for example, the depth of marine life or submarines,
% for example.")


fof( mergeA1810, axiom,
	(![DEPTH,OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(DEPTH,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__depth(OBJ1,OBJ2,DEPTH)
					)
				)
			)
			=>
			(
				p__orientation(OBJ1,OBJ2,c__Below)
			)
		)
	)
).


fof( mergeA1811, axiom,
	(![OBJ1,OBJ2,DEPTH]: 
		(
			(
				(
					(
						p__d__instance(DEPTH,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(OBJ2,c__Physical)
					)
				 &
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				 &
					(
						p__depth(OBJ1,OBJ2,DEPTH)
					)
				)
			)
			=>
			(
				(?[BOTTOM]: 
					(
						(
							(
								p__d__instance(BOTTOM,c__SelfConnectedObject)
							)
						 &
							(
								p__bottom(BOTTOM,OBJ1)
							)
						 &
							(
								p__distance(BOTTOM,OBJ2,DEPTH)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1812, axiom,
	p__d__instance(c__larger,c__BinaryPredicate)
).


fof( mergeA1813, axiom,
	p__d__instance(c__larger,c__SpatialRelation)
).


fof( mergeA1814, axiom,
	p__d__instance(c__larger,c__TransitiveRelation)
).


fof( mergeA1815, axiom,
	p__d__instance(c__larger,c__IrreflexiveRelation)
).


% 	($domain larger 1 Object)

% 	($domain larger 2 Object)


% ($documentation larger EnglishLanguage "(&%larger ?OBJ1 ?OBJ2) means that ?OBJ1 is 
% larger, with respect to all &%LengthMeasures, than ?OBJ2.")


fof( mergeA1818, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__larger(OBJ1,OBJ2)
				)
				<=>
				(
					(![QUANT1,QUANT2,UNIT]: 
						(
							(
								(
									(
										p__d__instance(QUANT1,c__RealNumber)
									)
								 &
									(
										p__d__instance(QUANT2,c__RealNumber)
									)
								 &
									(
										p__measure(OBJ1,f__MeasureFn2(QUANT1,UNIT))
									)
								 &
									(
										p__measure(OBJ2,f__MeasureFn2(QUANT2,UNIT))
									)
								 &
									(
										p__d__instance(UNIT,c__UnitOfLength)
									)
								)
							)
							=>
							(
								p__greaterThan(QUANT1,QUANT2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1819, axiom,
	p__d__instance(c__smaller,c__BinaryPredicate)
).


fof( mergeA1820, axiom,
	p__d__instance(c__smaller,c__SpatialRelation)
).


fof( mergeA1821, axiom,
	p__d__instance(c__smaller,c__TransitiveRelation)
).


fof( mergeA1822, axiom,
	p__d__instance(c__smaller,c__IrreflexiveRelation)
).


% 	($domain smaller 1 Object)

% 	($domain smaller 2 Object)

fof( mergeA1825, axiom,
	p__inverse(c__smaller,c__larger)
).



% ($documentation smaller EnglishLanguage "(&%smaller ?OBJ1 ?OBJ2) means that ?OBJ1 
% is smaller, with respect to all &%LengthMeasures, than ?OBJ2.")


fof( mergeA1826, axiom,
	p__d__instance(c__monetaryValue,c__SingleValuedRelation)
).


fof( mergeA1827, axiom,
	p__subrelation(c__monetaryValue,c__measure)
).


% 	($domain monetaryValue 1 Physical)

% 	($domain monetaryValue 2 CurrencyMeasure)


% ($documentation monetaryValue EnglishLanguage "A &%BinaryPredicate that associates an 
% &%Object or &%Process with its value expressed as an instance of 
% &%CurrencyMeasure.")


fof( mergeA1830, axiom,
	p__d__instance(c__WealthFn,c__UnaryFunction)
).


% 	($domain WealthFn 1 Agent)

% 	($range WealthFn CurrencyMeasure)


% ($documentation WealthFn EnglishLanguage "A &%UnaryFunction that maps an &%Agent to a 
% &%CurrencyMeasure specifying the value of the property owned by the &%Agent.  
% Note that this &%Function is generally used in conjunction with the 
% &%Function &%PropertyFn, e.g. (&%WealthFn (&%PropertyFn BillGates)) would 
% return the monetary value of the sum of Bill Gates' holdings.") 


% 	(forall (?PERSON ?AMOUNT)
% 		(<=> 
% 			(equal (WealthFn ?PERSON) ?AMOUNT)
% 			(monetaryValue (PropertyFn ?PERSON) ?AMOUNT)
% 		)
% 	)

fof( mergeA1834, axiom,
	p__d__instance(c__barometricPressure,c__BinaryPredicate)
).


fof( mergeA1835, axiom,
	p__d__instance(c__barometricPressure,c__AsymmetricRelation)
).


fof( mergeA1836, axiom,
	p__subrelation(c__barometricPressure,c__measure)
).


% 	($domain barometricPressure 1 Object)

% 	($domain barometricPressure 2 UnitOfAtmosphericPressure)


% ($documentation barometricPressure EnglishLanguage 
% "(&%barometricPressure ?AREA ?PRESSURE) means that the atmospheric 
% pressure measured at ?AREA is ?PRESSURE.  Barometric pressure is 
% typically expressed in units of &%InchMercury or &%MmMercury.  For 
% example, standard sea level pressure is 29.92 inches (760 mm) of mercury: 
% (&%barometricPressure &%SeaLevel (&%MeasureFn 29.92 &%InchMercury)).")


fof( mergeA1839, axiom,
	p__d__subclass(c__UnitOfAtmosphericPressure,c__CompositeUnitOfMeasure)
).



% ($documentation UnitOfAtmosphericPressure
% EnglishLanguage "&%UnitOfAtmosphericPressure includes those instances of
% &%UnitOfMeasure used to measure atmospheric pressure (&%barometricPressure),
% e.g., &%InchMercury.")


fof( mergeA1840, axiom,
	p__d__instance(c__InchMercury,c__UnitOfAtmosphericPressure)
).



% ($documentation InchMercury EnglishLanguage "&%InchMercury is a &%UnitOfMeasure 
% for &%barometricPressure.  It is used to express the number of 
% inches of mercury supported in a mercurial barometer by the 
% surrounding air pressure.")


fof( mergeA1841, axiom,
	p__d__instance(c__MmMercury,c__UnitOfAtmosphericPressure)
).



% ($documentation MmMercury EnglishLanguage "&%MmMercury is a &%UnitOfMeasure 
% for &%barometricPressure.  It is used to express the number 
% of millimeters of mercury supported in a mercurial barometer
%  by the surrounding air pressure.")


% ($comment 
% ;; END FILE
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;;;;;
% ;; TEMPORAL CONCEPTS ;;
% ;;;;;;;;;;;;;;;;;;;;;;;
% ;;
% ;; INCLUDES 'STRUCTURAL ONTOLOGY'
% ;; INCLUDES 'BASE ONTOLOGY'
% ;;
% ;; The first part of this section contains definitions relations involving 
% ;; temporal notions.  Most of these definitions and axioms were derived from 
% ;; the work of James Allen.  This part of the section was extensively revised on 
% ;; the basis of comments from Pat Hayes.  The second part of this section 
% ;; is an attempt to incorporate the Simple-Time ontology from the 
% ;; Ontolingua server into the SUMO.
% )

fof( mergeA1842, axiom,
	p__d__instance(c__PositiveInfinity,c__TimePoint)
).



% ($documentation PositiveInfinity EnglishLanguage "The &%TimePoint that is after 
% all other &%TimePoints.")


fof( mergeA1843, axiom,
	(![POINT]: 
		(
			(
				(
					(
						p__d__instance(POINT,c__TimePoint)
					)
				 &
					(
						~ (
							( POINT = c__PositiveInfinity )
						)
					)
				)
			)
			=>
			(
				p__before(POINT,c__PositiveInfinity)
			)
		)
	)
).


% ($comment 
% ;; JA: cannot be added (AdimenSUMO 2.5)
% ;;
% ;;(forall (?POINT)
% ;;	(not
% ;;		(before PositiveInfinity ?POINT)))
% )

fof( mergeA1844, axiom,
	(![POINT]: 
		(
			(
				(
					(
						p__d__instance(POINT,c__TimePoint)
					)
				 &
					(
						~ (
							( POINT = c__PositiveInfinity )
						)
					)
				)
			)
			=>
			(
				(?[OTHERPOINT]: 
					(
						(
							(
								p__d__instance(OTHERPOINT,c__TimePoint)
							)
						 &
							(
								p__temporallyBetween(POINT,OTHERPOINT,c__PositiveInfinity)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1845, axiom,
	p__d__instance(c__NegativeInfinity,c__TimePoint)
).



% ($documentation NegativeInfinity EnglishLanguage "The &%TimePoint that is before 
% all other &%TimePoints.")


fof( mergeA1846, axiom,
	(![POINT]: 
		(
			(
				(
					(
						p__d__instance(POINT,c__TimePoint)
					)
				 &
					(
						~ (
							( POINT = c__NegativeInfinity )
						)
					)
				)
			)
			=>
			(
				p__before(c__NegativeInfinity,POINT)
			)
		)
	)
).


% ($comment 
% ;; JA: cannot be added (AdimenSUMO 2.5)
% ;;
% ;;(forall (?POINT)
% ;;	(not
% ;;		(before ?POINT NegativeInfinity)))
% )

fof( mergeA1847, axiom,
	(![POINT]: 
		(
			(
				(
					(
						p__d__instance(POINT,c__TimePoint)
					)
				 &
					(
						~ (
							( POINT = c__NegativeInfinity )
						)
					)
				)
			)
			=>
			(
				(?[OTHERPOINT]: 
					(
						(
							(
								p__d__instance(OTHERPOINT,c__TimePoint)
							)
						 &
							(
								p__temporallyBetween(c__NegativeInfinity,OTHERPOINT,POINT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1848, axiom,
	p__d__instance(c__duration,c__BinaryPredicate)
).


fof( mergeA1849, axiom,
	p__d__instance(c__duration,c__AsymmetricRelation)
).


fof( mergeA1850, axiom,
	p__d__instance(c__duration,c__TotalValuedRelation)
).


% 	($domain duration 1 TimeInterval)

% 	($domain duration 2 TimeDuration)


% ($documentation duration EnglishLanguage "(&%duration ?POS ?TIME) means that the 
% duration of the &%TimePosition ?POS is ?TIME.  Note that this 
% &%Predicate can be used in conjunction with the &%Function &%WhenFn 
% to specify the duration of any instance of &%Physical.")


fof( mergeA1853, axiom,
	p__d__instance(c__frequency,c__BinaryPredicate)
).


fof( mergeA1854, axiom,
	p__d__instance(c__frequency,c__AsymmetricRelation)
).


% 	($domainSubclass frequency 1 Process)

% 	($domain frequency 2 TimeDuration)


% ($documentation frequency EnglishLanguage "(&%frequency ?PROC ?TIME) means that the 
% &%Process type of ?PROC recurs after every interval of ?TIME.")


% 	(forall (?TIME1 ?INST ?PROC)
% 		(=> 
% 			(frequency ?PROC ?TIME1)
% 			(forall (?TIME2)
% 				(=> 
% 					(duration ?TIME2 ?TIME1)
% 					(exists (?POSITION)
% 						(and 
% 							(temporalPart ?POSITION ?TIME2)
% 							(holdsDuring ?POSITION (exists ([|] ?INST []) ($instance ?INST ?PROC)))
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA1858, axiom,
	p__d__instance(c__temporalPart,c__BinaryPredicate)
).


fof( mergeA1859, axiom,
	p__d__instance(c__temporalPart,c__TemporalRelation)
).


fof( mergeA1860, axiom,
	p__d__instance(c__temporalPart,c__PartialOrderingRelation)
).


% 	($domain temporalPart 1 TimePosition)

% 	($domain temporalPart 2 TimePosition)


% ($documentation temporalPart EnglishLanguage "The temporal analogue of the spatial &%part 
% predicate.  (&%temporalPart ?POS1 ?POS2) means that &%TimePosition ?POS1 
% is part of &%TimePosition ?POS2.  Note that since &%temporalPart is a 
% &%ReflexiveRelation every &%TimePostion is a &%temporalPart of itself.") 


fof( mergeA1863, axiom,
	(![POINT]: 
		(
			(
				p__d__instance(POINT,c__TimePoint)
			)
			=>
			(
				(?[INTERVAL]: 
					(
						(
							(
								p__d__instance(INTERVAL,c__TimeInterval)
							)
						 &
							(
								p__temporalPart(POINT,INTERVAL)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1864, axiom,
	(![INTERVAL]: 
		(
			(
				p__d__instance(INTERVAL,c__TimeInterval)
			)
			=>
			(
				(?[POINT]: 
					(
						(
							(
								p__d__instance(POINT,c__TimePoint)
							)
						 &
							(
								p__temporalPart(POINT,INTERVAL)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1865, axiom,
	(![TIME1,TIME2,SITUATION]: 
		(
			(
				(
					(
						p__d__instance(SITUATION,c__Formula)
					)
				 &
					(
						p__d__instance(TIME1,c__TimePosition)
					)
				 &
					(
						p__d__instance(TIME2,c__TimePosition)
					)
				 &
					(
						p__holdsDuring(TIME1,SITUATION)
					)
				 &
					(
						p__temporalPart(TIME2,TIME1)
					)
				)
			)
			=>
			(
				p__holdsDuring(TIME2,SITUATION)
			)
		)
	)
).


% 	(forall (?REL ?INST1 ?INST2 ?INTERVAL)
% 		(=> 
% 			(and 
% 				(holdsDuring ?INTERVAL ($holds3 ?REL ?INST1 ?INST2))
% 				($instance ?INST1 Physical)
% 				($instance ?INST2 Physical)
% 			)
% 			(and 
% 				(time ?INST1 ?INTERVAL)
% 				(time ?INST2 ?INTERVAL)
% 			)
% 		)
% 	)

fof( mergeA1867, axiom,
	(![THING,POS]: 
		(
			(
				(
					(
						p__d__instance(THING,c__Physical)
					)
				 &
					(
						p__d__instance(POS,c__TimePosition)
					)
				)
			)
			=>
			(
				(
					p__temporalPart(POS,f__WhenFn1(THING))
				)
				<=>
				(
					p__time(THING,POS)
				)
			)
		)
	)
).


fof( mergeA1868, axiom,
	p__d__instance(c__BeginFn,c__TemporalRelation)
).


fof( mergeA1869, axiom,
	p__d__instance(c__BeginFn,c__UnaryFunction)
).


fof( mergeA1870, axiom,
	p__d__instance(c__BeginFn,c__TotalValuedRelation)
).


% 	($domain BeginFn 1 TimeInterval)

% 	($range BeginFn TimePoint)


% ($documentation BeginFn EnglishLanguage "A &%UnaryFunction that maps a &%TimeInterval to 
% the &%TimePoint at which the interval begins.")


% 	(forall (?PROCESS ?OBJ)
% 		(=> 
% 			(origin ?PROCESS ?OBJ)
% 			(eventLocated (WhereFn ?PROCESS (BeginFn (WhenFn ?PROCESS))) (WhereFn ?OBJ (BeginFn (WhenFn ?OBJ))))
% 		)
% 	)

% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: There is no TimePoint before NegativeInfinity
% ;;
% ;;(=>
% ;;   (equal (BeginFn ?INTERVAL) ?POINT)
% ;;   (forall (?OTHERPOINT)
% ;;      (=>
% ;;         (and
% ;;            (temporalPart ?OTHERPOINT ?INTERVAL)
% ;;            (not (equal ?OTHERPOINT ?POINT)))
% ;;         (before ?POINT ?OTHERPOINT))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

fof( mergeA1874, axiom,
	(![INTERVAL,POINT,OTHERPOINT]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						p__d__instance(POINT,c__TimePoint)
					)
				 &
					(
						( f__BeginFn1(INTERVAL) = POINT )
					)
				 &
					(
						p__d__instance(OTHERPOINT,c__TimePoint)
					)
				 &
					(
						p__temporalPart(OTHERPOINT,INTERVAL)
					)
				 &
					(
						~ (
							( OTHERPOINT = POINT )
						)
					)
				 &
					(
						~ (
							( OTHERPOINT = c__NegativeInfinity )
						)
					)
				)
			)
			=>
			(
				p__before(POINT,OTHERPOINT)
			)
		)
	)
).


fof( mergeA1875, axiom,
	p__d__instance(c__EndFn,c__TemporalRelation)
).


fof( mergeA1876, axiom,
	p__d__instance(c__EndFn,c__UnaryFunction)
).


fof( mergeA1877, axiom,
	p__d__instance(c__EndFn,c__TotalValuedRelation)
).


% 	($domain EndFn 1 TimeInterval)

% 	($range EndFn TimePoint)


% ($documentation EndFn EnglishLanguage "A &%UnaryFunction that maps a &%TimeInterval to 
% the &%TimePoint at which the interval ends.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: There is no TimePoint after PositiveInfinity
% ;;
% ;;(=>
% ;;   (equal (EndFn ?INTERVAL) ?POINT)
% ;;   (forall (?OTHERPOINT)
% ;;      (=>
% ;;         (and
% ;;            (temporalPart ?OTHERPOINT ?INTERVAL)
% ;;            (not (equal ?OTHERPOINT ?POINT)))
% ;;         (before ?OTHERPOINT ?POINT))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

fof( mergeA1880, axiom,
	(![INTERVAL,POINT,OTHERPOINT]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						p__d__instance(POINT,c__TimePoint)
					)
				 &
					(
						( f__EndFn1(INTERVAL) = POINT )
					)
				 &
					(
						p__d__instance(OTHERPOINT,c__TimePoint)
					)
				 &
					(
						p__temporalPart(OTHERPOINT,INTERVAL)
					)
				 &
					(
						~ (
							( OTHERPOINT = POINT )
						)
					)
				 &
					(
						~ (
							( OTHERPOINT = c__PositiveInfinity )
						)
					)
				)
			)
			=>
			(
				p__before(OTHERPOINT,POINT)
			)
		)
	)
).


% 	(forall (?PROC ?OBJ ?QUANT1 ?QUANT2)
% 		(=> 
% 			(and 
% 				(resource ?PROC ?OBJ)
% 				(holdsDuring (BeginFn (WhenFn ?PROC)) (measure ?OBJ ?QUANT1))
% 				(holdsDuring (EndFn (WhenFn ?PROC)) (measure ?OBJ ?QUANT2))
% 			)
% 			(greaterThan ?QUANT1 ?QUANT2)
% 		)
% 	)

fof( mergeA1882, axiom,
	p__subrelation(c__starts,c__temporalPart)
).


fof( mergeA1883, axiom,
	p__d__instance(c__starts,c__TemporalRelation)
).


fof( mergeA1884, axiom,
	p__d__instance(c__starts,c__TransitiveRelation)
).


fof( mergeA1885, axiom,
	p__d__instance(c__starts,c__IrreflexiveRelation)
).


% 	($domain starts 1 TimeInterval)

% 	($domain starts 2 TimeInterval)


% ($documentation starts EnglishLanguage "(&%starts ?INTERVAL1 ?INTERVAL2) means that 
% ?INTERVAL1 and ?INTERVAL2 are both &%TimeIntervals that have the same 
% initial &%TimePoint and that ?INTERVAL1 ends before ?INTERVAL2.")


fof( mergeA1888, axiom,
	(![INTERVAL1,INTERVAL2]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__starts(INTERVAL1,INTERVAL2)
				)
				<=>
				(
					(
						(
							( f__BeginFn1(INTERVAL1) = f__BeginFn1(INTERVAL2) )
						)
					 &
						(
							p__before(f__EndFn1(INTERVAL1),f__EndFn1(INTERVAL2))
						)
					)
				)
			)
		)
	)
).


fof( mergeA1889, axiom,
	p__subrelation(c__finishes,c__temporalPart)
).


fof( mergeA1890, axiom,
	p__d__instance(c__finishes,c__TemporalRelation)
).


fof( mergeA1891, axiom,
	p__d__instance(c__finishes,c__TransitiveRelation)
).


fof( mergeA1892, axiom,
	p__d__instance(c__finishes,c__IrreflexiveRelation)
).


% 	($domain finishes 1 TimeInterval)

% 	($domain finishes 2 TimeInterval)


% ($documentation finishes EnglishLanguage "(&%finishes ?INTERVAL1 ?INTERVAL2) means that 
% ?INTERVAL1 and ?INTERVAL2 are both &%TimeIntervals that have the same 
% ending &%TimePoint and that ?INTERVAL2 begins before ?INTERVAL1.")


fof( mergeA1895, axiom,
	(![INTERVAL2,INTERVAL1]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__finishes(INTERVAL1,INTERVAL2)
				)
				<=>
				(
					(
						(
							p__before(f__BeginFn1(INTERVAL2),f__BeginFn1(INTERVAL1))
						)
					 &
						(
							( f__EndFn1(INTERVAL2) = f__EndFn1(INTERVAL1) )
						)
					)
				)
			)
		)
	)
).


fof( mergeA1896, axiom,
	p__d__instance(c__before,c__TemporalRelation)
).


fof( mergeA1897, axiom,
	p__d__instance(c__before,c__IrreflexiveRelation)
).


fof( mergeA1898, axiom,
	p__d__instance(c__before,c__TransitiveRelation)
).


fof( mergeA1899, axiom,
	p__subrelation(c__before,c__beforeOrEqual)
).


fof( mergeA1900, axiom,
	p__relatedInternalConcept(c__before,c__earlier)
).


% 	($domain before 1 TimePoint)

% 	($domain before 2 TimePoint)


% ($documentation before EnglishLanguage "(&%before ?POINT1 ?POINT2) means that ?POINT1 
% precedes ?POINT2 on the universal timeline.")


% ($comment 
% ;; An Object exists (and, hence, retains its identity) over time, i.e., 
% ;; an object exists at every point over some interval of time.
% )

fof( mergeA1903, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__Object)
			)
			=>
			(
				(?[TIME1,TIME2]: 
					(
						(
							(
								p__d__instance(TIME1,c__TimePoint)
							)
						 &
							(
								p__d__instance(TIME2,c__TimePoint)
							)
						 &
							(
								p__before(TIME1,TIME2)
							)
						 &
							(
								(![TIME]: 
									(
										(
											(
												(
													p__d__instance(TIME,c__TimePoint)
												)
											 &
												(
													p__beforeOrEqual(TIME1,TIME)
												)
											 &
												(
													p__beforeOrEqual(TIME,TIME2)
												)
											)
										)
										=>
										(
											p__time(OBJ,TIME)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1904, axiom,
	(![PROC,OBJ,TIME]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Physical)
					)
				 &
					(
						p__d__instance(PROC,c__Process)
					)
				 &
					(
						p__result(PROC,OBJ)
					)
				 &
					(
						p__d__instance(TIME,c__TimePoint)
					)
				 &
					(
						p__before(TIME,f__BeginFn1(f__WhenFn1(PROC)))
					)
				)
			)
			=>
			(
				~ (
					p__time(OBJ,TIME)
				)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: Any TimeInterval cannot start at PositiveInfinity and cannot end at NegativeInfinity
% ;;
% ;;(=>
% ;;   ($instance ?INTERVAL TimeInterval)
% ;;   (before (BeginFn ?INTERVAL) (EndFn ?INTERVAL)))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

fof( mergeA1905, axiom,
	(![INTERVAL]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						~ (
							( f__BeginFn1(INTERVAL) = c__PositiveInfinity )
						)
					)
				 &
					(
						~ (
							( f__EndFn1(INTERVAL) = c__NegativeInfinity )
						)
					)
				)
			)
			=>
			(
				p__before(f__BeginFn1(INTERVAL),f__EndFn1(INTERVAL))
			)
		)
	)
).


fof( mergeA1906, axiom,
	p__d__instance(c__beforeOrEqual,c__BinaryPredicate)
).


fof( mergeA1907, axiom,
	p__d__instance(c__beforeOrEqual,c__TemporalRelation)
).


fof( mergeA1908, axiom,
	p__d__instance(c__beforeOrEqual,c__PartialOrderingRelation)
).


% 	($domain beforeOrEqual 1 TimePoint)

% 	($domain beforeOrEqual 2 TimePoint)


% ($documentation beforeOrEqual EnglishLanguage "(&%beforeOrEqual ?POINT1 ?POINT2) means that ?POINT1 
% is identical with ?POINT2 or occurs before it on the universal timeline.")


fof( mergeA1911, axiom,
	(![POINT1,POINT2]: 
		(
			(
				(
					(
						p__d__instance(POINT2,c__TimePoint)
					)
				 &
					(
						p__d__instance(POINT1,c__TimePoint)
					)
				 &
					(
						p__beforeOrEqual(POINT1,POINT2)
					)
				)
			)
			=>
			(
				(
					p__before(POINT1,POINT2)
				 |
					( POINT1 = POINT2 )
				)
			)
		)
	)
).


fof( mergeA1912, axiom,
	p__d__instance(c__temporallyBetween,c__TemporalRelation)
).


fof( mergeA1913, axiom,
	p__d__instance(c__temporallyBetween,c__TernaryPredicate)
).


fof( mergeA1914, axiom,
	p__subrelation(c__temporallyBetween,c__temporallyBetweenOrEqual)
).


% 	($domain temporallyBetween 1 TimePoint)

% 	($domain temporallyBetween 2 TimePoint)

% 	($domain temporallyBetween 3 TimePoint)


% ($documentation temporallyBetween EnglishLanguage "(&%temporallyBetween ?POINT1 ?POINT2 
% ?POINT3) means that the &%TimePoint ?POINT2 is between the &%TimePoints 
% ?POINT1 and ?POINT3, i.e. ?POINT1 is before ?POINT2 and ?POINT2 is before 
% ?POINT3.")


fof( mergeA1918, axiom,
	(![POINT1,POINT2,POINT3]: 
		(
			(
				(
					(
						p__d__instance(POINT3,c__TimePoint)
					)
				 &
					(
						p__d__instance(POINT2,c__TimePoint)
					)
				 &
					(
						p__d__instance(POINT1,c__TimePoint)
					)
				)
			)
			=>
			(
				(
					p__temporallyBetween(POINT1,POINT2,POINT3)
				)
				<=>
				(
					(
						(
							p__before(POINT1,POINT2)
						)
					 &
						(
							p__before(POINT2,POINT3)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1919, axiom,
	p__d__instance(c__temporallyBetweenOrEqual,c__TemporalRelation)
).


fof( mergeA1920, axiom,
	p__d__instance(c__temporallyBetweenOrEqual,c__TernaryPredicate)
).


% 	($domain temporallyBetweenOrEqual 1 TimePoint)

% 	($domain temporallyBetweenOrEqual 2 TimePoint)

% 	($domain temporallyBetweenOrEqual 3 TimePoint)


% ($documentation temporallyBetweenOrEqual EnglishLanguage "(&%temporallyBetweenOrEqual ?POINT1 ?POINT2 
% ?POINT3) means that the &%TimePoint ?POINT1 is before or equal to the 
% &%TimePoint ?POINT2 and ?POINT2 is before or equal to the &%TimePoint 
% ?POINT3.")


fof( mergeA1924, axiom,
	(![POINT1,POINT2,POINT3]: 
		(
			(
				(
					(
						p__d__instance(POINT3,c__TimePoint)
					)
				 &
					(
						p__d__instance(POINT2,c__TimePoint)
					)
				 &
					(
						p__d__instance(POINT1,c__TimePoint)
					)
				)
			)
			=>
			(
				(
					p__temporallyBetweenOrEqual(POINT1,POINT2,POINT3)
				)
				<=>
				(
					(
						(
							p__beforeOrEqual(POINT1,POINT2)
						)
					 &
						(
							p__beforeOrEqual(POINT2,POINT3)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1925, axiom,
	(![TIME,PHYS]: 
		(
			(
				(
					(
						p__d__instance(TIME,c__TimePoint)
					)
				 &
					(
						p__d__instance(PHYS,c__Physical)
					)
				)
			)
			=>
			(
				(
					(
						(
							p__time(PHYS,TIME)
						)
					 &
						(
							p__d__instance(TIME,c__TimePoint)
						)
					)
				)
				<=>
				(
					p__temporallyBetweenOrEqual(f__BeginFn1(f__WhenFn1(PHYS)),TIME,f__EndFn1(f__WhenFn1(PHYS)))
				)
			)
		)
	)
).


fof( mergeA1926, axiom,
	p__d__instance(c__overlapsTemporally,c__BinaryPredicate)
).


fof( mergeA1927, axiom,
	p__d__instance(c__overlapsTemporally,c__TemporalRelation)
).


fof( mergeA1928, axiom,
	p__d__instance(c__overlapsTemporally,c__ReflexiveRelation)
).


fof( mergeA1929, axiom,
	p__d__instance(c__overlapsTemporally,c__SymmetricRelation)
).


% 	($domain overlapsTemporally 1 TimeInterval)

% 	($domain overlapsTemporally 2 TimeInterval)


% ($documentation overlapsTemporally EnglishLanguage "(&%overlapsTemporally ?INTERVAL1 
% ?INTERVAL2) means that the &%TimeIntervals ?INTERVAL1 and ?INTERVAL2 
% have a &%TimeInterval as a common part.")


fof( mergeA1932, axiom,
	(![INTERVAL1,INTERVAL2]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__overlapsTemporally(INTERVAL1,INTERVAL2)
				)
				<=>
				(
					(?[INTERVAL3]: 
						(
							(
								(
									p__d__instance(INTERVAL3,c__TimeInterval)
								)
							 &
								(
									p__temporalPart(INTERVAL3,INTERVAL1)
								)
							 &
								(
									p__temporalPart(INTERVAL3,INTERVAL2)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA1933, axiom,
	(![REL,OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Physical)
					)
				 &
					(
						p__d__instance(OBJ1,c__Physical)
					)
				 &
					(
						p__d__instance(REL,c__BinaryPredicate)
					)
				 &
					(
						p__d__instance(REL,c__SpatialRelation)
					)
				 &
					(
						p__d__holds3(REL,OBJ1,OBJ2)
					)
				)
			)
			=>
			(
				p__overlapsTemporally(f__WhenFn1(OBJ1),f__WhenFn1(OBJ2))
			)
		)
	)
).


fof( mergeA1934, axiom,
	p__subrelation(c__during,c__temporalPart)
).


fof( mergeA1935, axiom,
	p__d__instance(c__during,c__TransitiveRelation)
).


fof( mergeA1936, axiom,
	p__d__instance(c__during,c__IrreflexiveRelation)
).


fof( mergeA1937, axiom,
	p__subrelation(c__during,c__overlapsTemporally)
).


% 	($domain during 1 TimeInterval)

% 	($domain during 2 TimeInterval)


% ($documentation during EnglishLanguage "(&%during ?INTERVAL1 ?INTERVAL2) means that 
% ?INTERVAL1 starts after and ends before ?INTERVAL2.") 


fof( mergeA1940, axiom,
	(![INTERVAL2,INTERVAL1]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL1,c__TimeInterval)
					)
				 &
					(
						p__during(INTERVAL1,INTERVAL2)
					)
				)
			)
			=>
			(
				(
					(
						p__before(f__EndFn1(INTERVAL1),f__EndFn1(INTERVAL2))
					)
				 &
					(
						p__before(f__BeginFn1(INTERVAL2),f__BeginFn1(INTERVAL1))
					)
				)
			)
		)
	)
).


fof( mergeA1941, axiom,
	p__d__instance(c__meetsTemporally,c__BinaryPredicate)
).


fof( mergeA1942, axiom,
	p__d__instance(c__meetsTemporally,c__TemporalRelation)
).


fof( mergeA1943, axiom,
	p__d__instance(c__meetsTemporally,c__AsymmetricRelation)
).


fof( mergeA1944, axiom,
	p__d__instance(c__meetsTemporally,c__IntransitiveRelation)
).


% 	($domain meetsTemporally 1 TimeInterval)

% 	($domain meetsTemporally 2 TimeInterval)


% ($documentation meetsTemporally EnglishLanguage "(&%meetsTemporally ?INTERVAL1 ?INTERVAL2) 
% means that the terminal point of the &%TimeInterval ?INTERVAL1 is the 
% initial point of the &%TimeInterval ?INTERVAL2.")


fof( mergeA1947, axiom,
	(![INTERVAL1,INTERVAL2]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__meetsTemporally(INTERVAL1,INTERVAL2)
				)
				<=>
				(
					( f__EndFn1(INTERVAL1) = f__BeginFn1(INTERVAL2) )
				)
			)
		)
	)
).


fof( mergeA1948, axiom,
	(![INTERVAL1,INTERVAL2]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL1,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL2,c__TimeInterval)
					)
				 &
					(
						( f__BeginFn1(INTERVAL1) = f__BeginFn1(INTERVAL2) )
					)
				 &
					(
						( f__EndFn1(INTERVAL1) = f__EndFn1(INTERVAL2) )
					)
				)
			)
			=>
			(
				( INTERVAL1 = INTERVAL2 )
			)
		)
	)
).


fof( mergeA1949, axiom,
	p__d__instance(c__earlier,c__BinaryPredicate)
).


fof( mergeA1950, axiom,
	p__d__instance(c__earlier,c__TemporalRelation)
).


fof( mergeA1951, axiom,
	p__d__instance(c__earlier,c__TransitiveRelation)
).


fof( mergeA1952, axiom,
	p__d__instance(c__earlier,c__IrreflexiveRelation)
).


% 	($domain earlier 1 TimeInterval)

% 	($domain earlier 2 TimeInterval)


% ($documentation earlier EnglishLanguage "(&%earlier ?INTERVAL1 ?INTERVAL2) means that 
% the &%TimeInterval ?INTERVAL1 ends before the &%TimeInterval ?INTERVAL2 
% begins.")


fof( mergeA1955, axiom,
	(![INTERVAL1,INTERVAL2]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__earlier(INTERVAL1,INTERVAL2)
				)
				<=>
				(
					p__before(f__EndFn1(INTERVAL1),f__BeginFn1(INTERVAL2))
				)
			)
		)
	)
).


fof( mergeA1956, axiom,
	p__d__instance(c__cooccur,c__BinaryPredicate)
).


fof( mergeA1957, axiom,
	p__d__instance(c__cooccur,c__TemporalRelation)
).


fof( mergeA1958, axiom,
	p__d__instance(c__cooccur,c__EquivalenceRelation)
).


% 	($domain cooccur 1 Physical)

% 	($domain cooccur 2 Physical)


% ($documentation cooccur EnglishLanguage "(&%cooccur ?THING1 ?THING2) means that the 
% &%Object or &%Process ?THING1 occurs at the same time as, together with, 
% or jointly with the &%Object or &%Process ?THING2.  This covers the 
% following temporal relations:  is co-incident with, is concurrent with, 
% is contemporaneous with, and is concomitant with.")


fof( mergeA1961, axiom,
	(![PHYS1,PHYS2]: 
		(
			(
				(
					(
						p__d__instance(PHYS2,c__Physical)
					)
				 &
					(
						p__d__instance(PHYS1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__cooccur(PHYS1,PHYS2)
				)
				<=>
				(
					( f__WhenFn1(PHYS1) = f__WhenFn1(PHYS2) )
				)
			)
		)
	)
).


% ($comment 
% ;; The following functions generate &%TimeIntervals.
% )

fof( mergeA1962, axiom,
	p__d__instance(c__TimeIntervalFn,c__BinaryFunction)
).


fof( mergeA1963, axiom,
	p__d__instance(c__TimeIntervalFn,c__TemporalRelation)
).


% 	($domain TimeIntervalFn 1 TimePoint)

% 	($domain TimeIntervalFn 2 TimePoint)

% 	($range TimeIntervalFn TimeInterval)


% ($documentation TimeIntervalFn EnglishLanguage "A &%BinaryFunction that takes two &%TimePoints 
% as arguments and returns the &%TimeInterval defined by these two &%TimePoints.  
% Note that the first &%TimePoint must occur earlier than the second &%TimePoint.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: Any TimeInterval cannot start at PositiveInfinity and cannot end at NegativeInfinity
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?POINT1 TimePoint)
% ;;      ($instance ?POINT2 TimePoint)
% ;;      ($instance ?INTERVAL TimeInterval)
% ;;      (equal (TimeIntervalFn ?POINT1 ?POINT2) ?INTERVAL))
% ;;   (and
% ;;      (equal (BeginFn ?INTERVAL) ?POINT1)
% ;;      (equal (EndFn ?INTERVAL) ?POINT2)))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

fof( mergeA1967, axiom,
	(![POINT1,INTERVAL,POINT2]: 
		(
			(
				(
					(
						p__d__instance(POINT1,c__TimePoint)
					)
				 &
					(
						p__d__instance(POINT2,c__TimePoint)
					)
				 &
					(
						~ (
							( POINT1 = c__NegativeInfinity )
						)
					)
				 &
					(
						~ (
							( POINT2 = c__PositiveInfinity )
						)
					)
				 &
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						( f__TimeIntervalFn2(POINT1,POINT2) = INTERVAL )
					)
				)
			)
			=>
			(
				(
					(
						( f__BeginFn1(INTERVAL) = POINT1 )
					)
				 &
					(
						( f__EndFn1(INTERVAL) = POINT2 )
					)
				)
			)
		)
	)
).


fof( mergeA1968, axiom,
	(![POINT1,POINT2,INTERVAL,POINT]: 
		(
			(
				(
					(
						p__d__instance(POINT1,c__TimePoint)
					)
				 &
					(
						p__d__instance(POINT2,c__TimePoint)
					)
				 &
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						( f__TimeIntervalFn2(POINT1,POINT2) = INTERVAL )
					)
				 &
					(
						p__d__instance(POINT,c__TimePoint)
					)
				)
			)
			=>
			(
				(
					p__temporallyBetweenOrEqual(POINT1,POINT,POINT2)
				)
				<=>
				(
					p__temporalPart(POINT,INTERVAL)
				)
			)
		)
	)
).


fof( mergeA1969, axiom,
	p__d__instance(c__RecurrentTimeIntervalFn,c__TemporalRelation)
).


fof( mergeA1970, axiom,
	p__d__instance(c__RecurrentTimeIntervalFn,c__BinaryFunction)
).


% 	($domainSubclass RecurrentTimeIntervalFn 1 TimeInterval)

% 	($domainSubclass RecurrentTimeIntervalFn 2 TimeInterval)

% 	($rangeSubclass RecurrentTimeIntervalFn TimeInterval)


% ($documentation RecurrentTimeIntervalFn EnglishLanguage "A function that is useful for generating 
% recurring time intervals.  For example, (&%RecurrentTimeIntervalFn (&%HourFn 6 &%Day)  
% (&%HourFn 12 &%Day)) returns the &%Class of &%TimeIntervals beginning at 6 in the 
% morning and ending at 12 noon.  For another example, (&%RecurrentTimeInterval 
% &%Saturday &%Sunday) returns the &%Class of all weekends.  For still another example, 
% (&%RecurrentTimeInterval &%June &%August) returns the &%Class containing the academic 
% summer period.")


% 	(forall (?TIMECLASS1 ?TIMECLASS2 ?INTERVAL)
% 		(=> 
% 			($instance ?INTERVAL (RecurrentTimeIntervalFn ?TIMECLASS1 ?TIMECLASS2))
% 			(exists (?TIME1 ?TIME2)
% 				(and 
% 					($instance ?TIME1 ?TIMECLASS1)
% 					($instance ?TIME2 ?TIMECLASS2)
% 					(starts ?TIME1 ?INTERVAL)
% 					(finishes ?TIME2 ?INTERVAL)
% 				)
% 			)
% 		)
% 	)

fof( mergeA1975, axiom,
	p__d__instance(c__WhenFn,c__TemporalRelation)
).


fof( mergeA1976, axiom,
	p__d__instance(c__WhenFn,c__UnaryFunction)
).


fof( mergeA1977, axiom,
	p__d__instance(c__WhenFn,c__TotalValuedRelation)
).


% 	($domain WhenFn 1 Physical)

% 	($range WhenFn TimeInterval)


% ($documentation WhenFn EnglishLanguage "A &%UnaryFunction that maps an &%Object or 
% &%Process to the exact &%TimeInterval during which it exists.  Note 
% that, for every &%TimePoint ?TIME outside of the &%TimeInterval 
% (WhenFn ?THING), (time ?THING ?TIME) does not hold.")


fof( mergeA1980, axiom,
	p__d__instance(c__PastFn,c__TemporalRelation)
).


fof( mergeA1981, axiom,
	p__d__instance(c__PastFn,c__UnaryFunction)
).


fof( mergeA1982, axiom,
	p__d__instance(c__PastFn,c__TotalValuedRelation)
).


% 	($domain PastFn 1 TimePosition)

% 	($range PastFn TimeInterval)


% ($documentation PastFn EnglishLanguage "A &%UnaryFunction that maps a &%TimePosition 
% to the &%TimeInterval that meets it and that begins at 
% &%NegativeInfinity.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: There is no TimePoint before NegativeInfinity. Consequently, any TimeInterval than begins at NegativeInfinite is not preceded
% ;;
% ;;(=>
% ;;   ($instance ?INTERVAL TimeInterval)
% ;;   (meetsTemporally (PastFn ?INTERVAL) ?INTERVAL))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

fof( mergeA1985, axiom,
	(![INTERVAL]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						~ (
							( f__BeginFn1(INTERVAL) = c__NegativeInfinity )
						)
					)
				)
			)
			=>
			(
				p__meetsTemporally(f__PastFn1(INTERVAL),INTERVAL)
			)
		)
	)
).


fof( mergeA1986, axiom,
	(![INTERVAL]: 
		(
			(
				p__d__instance(INTERVAL,c__TimeInterval)
			)
			=>
			(
				( f__PastFn1(INTERVAL) = f__TimeIntervalFn2(c__NegativeInfinity,f__BeginFn1(INTERVAL)) )
			)
		)
	)
).


fof( mergeA1987, axiom,
	p__d__instance(c__ImmediatePastFn,c__TemporalRelation)
).


fof( mergeA1988, axiom,
	p__d__instance(c__ImmediatePastFn,c__UnaryFunction)
).


fof( mergeA1989, axiom,
	p__d__instance(c__ImmediatePastFn,c__TotalValuedRelation)
).


% 	($domain ImmediatePastFn 1 TimePosition)

% 	($range ImmediatePastFn TimeInterval)


% ($documentation ImmediatePastFn EnglishLanguage "A &%UnaryFunction that maps a 
% &%TimePosition to a short, indeterminate &%TimeInterval that 
% immediately precedes the &%TimePosition.")


fof( mergeA1992, axiom,
	(![INTERVAL]: 
		(
			(
				p__d__instance(INTERVAL,c__TimeInterval)
			)
			=>
			(
				p__finishes(f__ImmediatePastFn1(INTERVAL),f__PastFn1(INTERVAL))
			)
		)
	)
).


fof( mergeA1993, axiom,
	p__d__instance(c__FutureFn,c__TemporalRelation)
).


fof( mergeA1994, axiom,
	p__d__instance(c__FutureFn,c__UnaryFunction)
).


fof( mergeA1995, axiom,
	p__d__instance(c__FutureFn,c__TotalValuedRelation)
).


% 	($domain FutureFn 1 TimePosition)

% 	($range FutureFn TimeInterval)


% ($documentation FutureFn EnglishLanguage "A &%UnaryFunction that maps a &%TimePosition 
% to the &%TimeInterval which it meets and which ends at 
% &%PositiveInfinity.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: There is no TimePoint after PositiveInfinity. Consequently, any TimeInterval that finishes at PositiveInfinite has no future
% ;;
% ;;(=>
% ;;   ($instance ?INTERVAL TimeInterval)
% ;;   (meetsTemporally ?INTERVAL (FutureFn ?INTERVAL)))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

fof( mergeA1998, axiom,
	(![INTERVAL]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						~ (
							( f__EndFn1(INTERVAL) = c__PositiveInfinity )
						)
					)
				)
			)
			=>
			(
				p__meetsTemporally(INTERVAL,f__FutureFn1(INTERVAL))
			)
		)
	)
).


fof( mergeA1999, axiom,
	(![INTERVAL]: 
		(
			(
				p__d__instance(INTERVAL,c__TimeInterval)
			)
			=>
			(
				( f__FutureFn1(INTERVAL) = f__TimeIntervalFn2(f__EndFn1(INTERVAL),c__PositiveInfinity) )
			)
		)
	)
).


fof( mergeA2000, axiom,
	p__d__instance(c__ImmediateFutureFn,c__TemporalRelation)
).


fof( mergeA2001, axiom,
	p__d__instance(c__ImmediateFutureFn,c__UnaryFunction)
).


fof( mergeA2002, axiom,
	p__d__instance(c__ImmediateFutureFn,c__TotalValuedRelation)
).


% 	($domain ImmediateFutureFn 1 TimePosition)

% 	($range ImmediateFutureFn TimeInterval)


% ($documentation ImmediateFutureFn EnglishLanguage "A &%UnaryFunction that maps a 
% &%TimePosition to a short, indeterminate &%TimeInterval that 
% immediately follows the &%TimePosition.")


fof( mergeA2005, axiom,
	(![INTERVAL]: 
		(
			(
				p__d__instance(INTERVAL,c__TimeInterval)
			)
			=>
			(
				p__starts(f__ImmediateFutureFn1(INTERVAL),f__FutureFn1(INTERVAL))
			)
		)
	)
).


% ($comment 
% ;; The following definitions and axioms (down to the next section break) 
% ;; cover the content in the Simple-Time ontology on the Ontolingua server.
% )

fof( mergeA2006, axiom,
	p__d__instance(c__date,c__BinaryPredicate)
).


fof( mergeA2007, axiom,
	p__d__instance(c__date,c__SingleValuedRelation)
).


fof( mergeA2008, axiom,
	p__d__instance(c__date,c__AsymmetricRelation)
).


% 	($domain date 1 Physical)

% 	($domain date 2 Day)

fof( mergeA2011, axiom,
	p__subrelation(c__date,c__time)
).



% ($documentation date EnglishLanguage "A &%BinaryPredicate that specifies a 
% &%TimePosition in absolute calendar time, at the resolution 
% of one day, for a particular &%Object or &%Process.")


fof( mergeA2012, axiom,
	p__d__instance(c__YearFn,c__TemporalRelation)
).


fof( mergeA2013, axiom,
	p__d__instance(c__YearFn,c__UnaryFunction)
).


% 	($domain YearFn 1 Integer)

% 	($rangeSubclass YearFn Year)


% ($documentation YearFn EnglishLanguage "A &%UnaryFunction that maps a number to the corresponding calendar 
% &%Year.  For example, (&%YearFn 1912) returns the &%Class containing just one instance, 
% the year of 1912.  As might be expected, positive integers return years in the Common Era, 
% while negative integers return years in B.C.E.  Note that this function returns a &%Class 
% as a value.  The reason for this is that the related functions, viz. &%MonthFn, &%DayFn, 
% &%HourFn, &%MinuteFn, and &%SecondFn, are used to generate both specific &%TimeIntervals 
% and recurrent intervals, and the only way to do this is to make the domains and ranges of 
% these functions classes rather than individuals.")


fof( mergeA2016, axiom,
	p__d__instance(c__MonthFn,c__TemporalRelation)
).


fof( mergeA2017, axiom,
	p__d__instance(c__MonthFn,c__BinaryFunction)
).


% 	($domainSubclass MonthFn 1 Month)

% 	($domainSubclass MonthFn 2 Year)

% 	($rangeSubclass MonthFn Month)


% ($documentation MonthFn EnglishLanguage "A &%BinaryFunction that maps a subclass of &%Month and a 
% subclass of &%Year to the class containing the &%Months corresponding to thos &%Years. 
% For example (&%MonthFn &%January (&%YearFn 1912)) is the class containing the eighth 
% &%Month, i.e. August, of the &%Year 1912.  For another example, (&%MonthFn &%August 
% &%Year) is equal to &%August, the class of all months of August.  Note that this function 
% returns a &%Class as a value.  The reason for this is that the related functions, viz. 
% DayFn, HourFn, MinuteFn, and SecondFn, are used to generate both specific &%TimeIntervals 
% and recurrent intervals, and the only way to do this is to make the domains and ranges of 
% these functions classes rather than individuals.")


fof( mergeA2021, axiom,
	p__d__instance(c__DayFn,c__TemporalRelation)
).


fof( mergeA2022, axiom,
	p__d__instance(c__DayFn,c__BinaryFunction)
).


% 	($domain DayFn 1 PositiveInteger)

% 	($domainSubclass DayFn 2 Month)

% 	($rangeSubclass DayFn Day)


% ($documentation DayFn EnglishLanguage "A &%BinaryFunction that assigns a &%PositiveRealNumber and 
% a subclass of &%Months to the &%Days within each &%Month corresponding to that 
% &%PositiveRealNumber.  For example, (&%DayFn 16 &%August) is the &%Class of all 
% sixteenth days of August.  For another example, (&%DayFn 9 &%Month) would return 
% the class of all ninth days of any month.  For still another example, (&%DayFn 18 
% (&%MonthFn &%August (&%YearFn 1912))) denotes the 18th day of August 1912.")


% 	(forall (?DAY ?MONTH ?NUMBER)
% 		(=> 
% 			($instance ?DAY (DayFn ?NUMBER ?MONTH))
% 			(lessThanOrEqualTo ?NUMBER 31)
% 		)
% 	)

% 	(forall (?MONTH ?NUMBER2 ?NUMBER1 ?DAY1 ?DAY2)
% 		(=> 
% 			(and 
% 				($instance ?DAY1 (DayFn ?NUMBER1 ?MONTH))
% 				($instance ?DAY2 (DayFn ?NUMBER2 ?MONTH))
% 				(equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)
% 			)
% 			(meetsTemporally ?DAY1 ?DAY2)
% 		)
% 	)

fof( mergeA2028, axiom,
	p__d__instance(c__HourFn,c__TemporalRelation)
).


fof( mergeA2029, axiom,
	p__d__instance(c__HourFn,c__BinaryFunction)
).


% 	($domain HourFn 1 NonnegativeInteger)

% 	($domainSubclass HourFn 2 Day)

% 	($rangeSubclass HourFn Hour)


% ($documentation HourFn EnglishLanguage "A &%BinaryFunction that assigns a &%PositiveRealNumber and 
% a subclass of &%Days to the &%Hours within each &%Day corresponding to that 
% &%NonnegativeInteger.  For example, (&%HourFn 12 &%Thursday) is the &%Class of all 
% instances of noon Thursday.  For another example, (&%HourFn 0 &%Day) would return 
% the class of all instances of midnight.  For still another example, (&%HourFn 14 
% (&%DayFn 18 (&%MonthFn &%August (&%YearFn 1912)))) denotes 2 PM on the 18th day of 
% August 1912.")


% 	(forall (?HOUR ?DAY ?NUMBER)
% 		(=> 
% 			($instance ?HOUR (HourFn ?NUMBER ?DAY))
% 			(lessThan ?NUMBER 24)
% 		)
% 	)

% 	(forall (?DAY ?NUMBER2 ?NUMBER1 ?HOUR1 ?HOUR2)
% 		(=> 
% 			(and 
% 				($instance ?HOUR1 (HourFn ?NUMBER1 ?DAY))
% 				($instance ?HOUR2 (HourFn ?NUMBER2 ?DAY))
% 				(equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)
% 			)
% 			(meetsTemporally ?HOUR1 ?HOUR2)
% 		)
% 	)

fof( mergeA2035, axiom,
	p__d__instance(c__MinuteFn,c__TemporalRelation)
).


fof( mergeA2036, axiom,
	p__d__instance(c__MinuteFn,c__BinaryFunction)
).


% 	($domain MinuteFn 1 NonnegativeInteger)

% 	($domainSubclass MinuteFn 2 Hour)

% 	($rangeSubclass MinuteFn Minute)


% ($documentation MinuteFn EnglishLanguage "A &%BinaryFunction that assigns a &%PositiveRealNumber and 
% a subclass of &%Hours to the &%Minutes within each &%Hour corresponding to that 
% &%NonnegativeInteger.  For example, (&%MinuteFn 30 (&%HourFn 17 &%Day)) is the &%Class 
% of all 5:30's in the afternoon.  For another example, (&%MinuteFn 15 &%Hour) would return 
% the class of all instances of quarter past the hour.  For still another example, 
% (&%MinuteFn 15 (&%HourFn 14 (&%DayFn 18 (&%MonthFn &%August (&%YearFn 1912))))) denotes 
% 15 minutes after 2 PM on the 18th day of August 1912.")


% 	(forall (?MINUTE ?HOUR ?NUMBER)
% 		(=> 
% 			($instance ?MINUTE (MinuteFn ?NUMBER ?HOUR))
% 			(lessThan ?NUMBER 60)
% 		)
% 	)

% 	(forall (?HOUR ?NUMBER2 ?NUMBER1 ?MINUTE1 ?MINUTE2)
% 		(=> 
% 			(and 
% 				($instance ?MINUTE1 (MinuteFn ?NUMBER1 ?HOUR))
% 				($instance ?MINUTE2 (MinuteFn ?NUMBER2 ?HOUR))
% 				(equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)
% 			)
% 			(meetsTemporally ?MINUTE1 ?MINUTE2)
% 		)
% 	)

fof( mergeA2042, axiom,
	p__d__instance(c__SecondFn,c__TemporalRelation)
).


fof( mergeA2043, axiom,
	p__d__instance(c__SecondFn,c__BinaryFunction)
).


% 	($domain SecondFn 1 PositiveRealNumber)

% 	($domainSubclass SecondFn 2 Minute)

% 	($rangeSubclass SecondFn Second)


% ($documentation SecondFn EnglishLanguage "A &%BinaryFunction that assigns a &%PositiveRealNumber and a 
% subclass of &%Minutes to the &%Seconds within each &%Minute corresponding to that 
% &%PositiveRealNumber.  For example, (&%SecondFn 4 (&%MinuteFn 5 &%Hour)) is the &%Class 
% of all fourth &%Seconds of every fifth &%Minute of every hour.  For another example, 
% (&%SecondFn 8 &%Minute) would return the eighth second of every minute.  For still 
% another example, (&%SecondFn 9 (&%MinuteFn 15 (&%HourFn 14 (&%DayFn 18 (&%MonthFn 
% &%August (&%YearFn 1912)))))) denotes 9 seconds and 15 minutes after 2 PM on the 18th 
% day of August 1912.")


% 	(forall (?SECOND ?MINUTE ?NUMBER)
% 		(=> 
% 			($instance ?SECOND (SecondFn ?NUMBER ?MINUTE))
% 			(lessThan ?NUMBER 60)
% 		)
% 	)

% 	(forall (?MINUTE ?NUMBER2 ?NUMBER1 ?SECOND1 ?SECOND2)
% 		(=> 
% 			(and 
% 				($instance ?SECOND1 (SecondFn ?NUMBER1 ?MINUTE))
% 				($instance ?SECOND2 (SecondFn ?NUMBER2 ?MINUTE))
% 				(equal (SubtractionFn ?NUMBER2 ?NUMBER1) 1)
% 			)
% 			(meetsTemporally ?SECOND1 ?SECOND2)
% 		)
% 	)

fof( mergeA2049, axiom,
	p__d__subclass(c__Year,c__TimeInterval)
).


% 	(relatedInternalConcept Year YearFn)

% 	(relatedInternalConcept Year YearDuration)


% ($documentation Year EnglishLanguage "The &%Class of all calendar &%Years.")


% 	(forall (?YEAR)
% 		(=> 
% 			($instance ?YEAR Year)
% 			(duration ?YEAR (MeasureFn 1 YearDuration))
% 		)
% 	)

fof( mergeA2053, axiom,
	(![YEAR1,YEAR2]: 
		(
			(
				(
					(
						p__d__instance(YEAR1,c__Year)
					)
				 &
					(
						p__d__instance(YEAR2,c__Year)
					)
				 &
					(
						( f__SubtractionFn2(YEAR2,YEAR1) = c__1 )
					)
				)
			)
			=>
			(
				p__meetsTemporally(YEAR1,YEAR2)
			)
		)
	)
).


fof( mergeA2054, axiom,
	p__d__subclass(c__LeapYear,c__Year)
).



% ($documentation LeapYear EnglishLanguage "The &%Class of all leap years.  These are years 
% which are either (i.) evenly divisible by 4 and not by 100 or (ii.) evenly 
% divisible by 400 (this latter case is known as a leap century).")


% 	(forall (?LEAP ?NUMBER)
% 		(=> 
% 			(and 
% 				($instance ?LEAP LeapYear)
% 				($instance ?LEAP (YearFn ?NUMBER))
% 			)
% 			(or 
% 				(and 
% 					(equal (RemainderFn ?NUMBER 4) 0)
% 					(not 
% 						(equal (RemainderFn ?NUMBER 100) 0)
% 					)
% 				)
% 				(equal (RemainderFn ?NUMBER 400) 0)
% 			)
% 		)
% 	)

fof( mergeA2056, axiom,
	p__d__subclass(c__Month,c__TimeInterval)
).


% 	(relatedInternalConcept Month MonthFn)


% ($documentation Month EnglishLanguage "The &%Class of all calendar &%Months.")


fof( mergeA2058, axiom,
	p__d__subclass(c__January,c__Month)
).



% ($documentation January EnglishLanguage "The &%Class of all &%Months which are January.")


% 	(forall (?MONTH)
% 		(=> 
% 			($instance ?MONTH January)
% 			(duration ?MONTH (MeasureFn 31 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn January ?YEAR))
% 				($instance ?MONTH2 (MonthFn February ?YEAR))
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2061, axiom,
	p__d__subclass(c__February,c__Month)
).



% ($documentation February EnglishLanguage "The &%Class of all &%Months which are February.")


% 	(forall (?YEAR ?Y ?MONTH)
% 		(=> 
% 			(and 
% 				($instance ?MONTH (MonthFn February ?YEAR))
% 				($instance ?Y ?YEAR)
% 				(not 
% 					($instance ?Y LeapYear)
% 				)
% 			)
% 			(duration ?MONTH (MeasureFn 28 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR ?Y ?MONTH)
% 		(=> 
% 			(and 
% 				($instance ?MONTH (MonthFn February ?YEAR))
% 				($instance ?Y ?YEAR)
% 				($instance ?Y LeapYear)
% 			)
% 			(duration ?MONTH (MeasureFn 29 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn February ?YEAR))
% 				($instance ?MONTH2 (MonthFn March ?YEAR))
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2065, axiom,
	p__d__subclass(c__March,c__Month)
).



% ($documentation March EnglishLanguage "The &%Class of all &%Months which are March.")


% 	(forall (?MONTH)
% 		(=> 
% 			($instance ?MONTH March)
% 			(duration ?MONTH (MeasureFn 31 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn March ?YEAR))
% 				($instance ?MONTH2 (MonthFn April ?YEAR))
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2068, axiom,
	p__d__subclass(c__April,c__Month)
).



% ($documentation April EnglishLanguage "The &%Class of all &%Months which are April.")


% 	(forall (?MONTH)
% 		(=> 
% 			($instance ?MONTH April)
% 			(duration ?MONTH (MeasureFn 30 DayDuration))
% 		)
% 	)

% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check:
% ;; - Range of MonthFn is subclass of Month, which is subclass of TimeInterval
% ;; - Domain of meetsTemporally is TimeInterval
% ;;
% ;;(=>
% ;;   (and
% ;;      (equal ?MONTH1 (MonthFn April ?YEAR))
% ;;      (equal ?MONTH2 (MonthFn May ?YEAR)))
% ;;   (meetsTemporally ?MONTH1 ?MONTH2))
% ;;
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

% 	(forall (?YEAR ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn April ?YEAR))
% 				($instance ?MONTH2 (MonthFn May ?YEAR))
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2071, axiom,
	p__d__subclass(c__May,c__Month)
).



% ($documentation May EnglishLanguage "The &%Class of all &%Months which are May.")


% 	(forall (?MONTH)
% 		(=> 
% 			($instance ?MONTH May)
% 			(duration ?MONTH (MeasureFn 31 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn May ?YEAR))
% 				($instance ?MONTH2 (MonthFn June ?YEAR))
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2074, axiom,
	p__d__subclass(c__June,c__Month)
).



% ($documentation June EnglishLanguage "The &%Class of all &%Months which are June.")


% 	(forall (?MONTH)
% 		(=> 
% 			($instance ?MONTH June)
% 			(duration ?MONTH (MeasureFn 30 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn June ?YEAR))
% 				($instance ?MONTH2 (MonthFn July ?YEAR))
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2077, axiom,
	p__d__subclass(c__July,c__Month)
).



% ($documentation July EnglishLanguage "The &%Class of all &%Months which are July.")


% 	(forall (?MONTH)
% 		(=> 
% 			($instance ?MONTH July)
% 			(duration ?MONTH (MeasureFn 31 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn July ?YEAR))
% 				($instance ?MONTH2 (MonthFn August ?YEAR))
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2080, axiom,
	p__d__subclass(c__August,c__Month)
).



% ($documentation August EnglishLanguage "The &%Class of all &%Months which are August.")


% 	(forall (?MONTH)
% 		(=> 
% 			($instance ?MONTH August)
% 			(duration ?MONTH (MeasureFn 31 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn August ?YEAR))
% 				($instance ?MONTH2 (MonthFn September ?YEAR))
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2083, axiom,
	p__d__subclass(c__September,c__Month)
).



% ($documentation September EnglishLanguage "The &%Class of all &%Months which are September.")


% 	(forall (?MONTH)
% 		(=> 
% 			($instance ?MONTH September)
% 			(duration ?MONTH (MeasureFn 30 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn September ?YEAR))
% 				($instance ?MONTH2 (MonthFn October ?YEAR))
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2086, axiom,
	p__d__subclass(c__October,c__Month)
).



% ($documentation October EnglishLanguage "The &%Class of all &%Months which are October.")


% 	(forall (?MONTH)
% 		(=> 
% 			($instance ?MONTH October)
% 			(duration ?MONTH (MeasureFn 31 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn October ?YEAR))
% 				($instance ?MONTH2 (MonthFn November ?YEAR))
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2089, axiom,
	p__d__subclass(c__November,c__Month)
).



% ($documentation November EnglishLanguage "The &%Class of all &%Months which are November.")


% 	(forall (?MONTH)
% 		(=> 
% 			($instance ?MONTH November)
% 			(duration ?MONTH (MeasureFn 30 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn November ?YEAR))
% 				($instance ?MONTH2 (MonthFn December ?YEAR))
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2092, axiom,
	p__d__subclass(c__December,c__Month)
).



% ($documentation December EnglishLanguage "The &%Class of all &%Months which are December.")


% 	(forall (?MONTH)
% 		(=> 
% 			($instance ?MONTH December)
% 			(duration ?MONTH (MeasureFn 31 DayDuration))
% 		)
% 	)

% 	(forall (?YEAR1 ?YEAR2 ?Y1 ?Y2 ?MONTH1 ?MONTH2)
% 		(=> 
% 			(and 
% 				($instance ?MONTH1 (MonthFn December ?YEAR1))
% 				($instance ?MONTH2 (MonthFn January ?YEAR2))
% 				($instance ?Y1 ?YEAR1)
% 				($instance ?Y2 ?YEAR2)
% 				(meetsTemporally ?Y1 ?Y2)
% 			)
% 			(meetsTemporally ?MONTH1 ?MONTH2)
% 		)
% 	)

fof( mergeA2095, axiom,
	p__d__subclass(c__Day,c__TimeInterval)
).


% 	(relatedInternalConcept Day DayFn)

% 	(relatedInternalConcept Day DayDuration)


% ($documentation Day EnglishLanguage "The &%Class of all calendar &%Days.")


% 	(forall (?DAY)
% 		(=> 
% 			($instance ?DAY Day)
% 			(duration ?DAY (MeasureFn 1 DayDuration))
% 		)
% 	)

fof( mergeA2099, axiom,
	p__d__subclass(c__Monday,c__Day)
).



% ($documentation Monday EnglishLanguage "The &%Class of all calendar Mondays.")


fof( mergeA2100, axiom,
	p__d__subclass(c__Tuesday,c__Day)
).



% ($documentation Tuesday EnglishLanguage "The &%Class of all calendar Tuesdays.")


fof( mergeA2101, axiom,
	(![WEEK,DAY1,DAY2]: 
		(
			(
				(
					(
						p__d__instance(DAY1,c__Monday)
					)
				 &
					(
						p__d__instance(DAY2,c__Tuesday)
					)
				 &
					(
						p__d__instance(WEEK,c__Week)
					)
				 &
					(
						p__temporalPart(DAY1,WEEK)
					)
				 &
					(
						p__temporalPart(DAY2,WEEK)
					)
				)
			)
			=>
			(
				p__meetsTemporally(DAY1,DAY2)
			)
		)
	)
).


fof( mergeA2102, axiom,
	p__d__subclass(c__Wednesday,c__Day)
).



% ($documentation Wednesday EnglishLanguage "The &%Class of all calendar Wednesdays.")


fof( mergeA2103, axiom,
	(![WEEK,DAY1,DAY2]: 
		(
			(
				(
					(
						p__d__instance(DAY1,c__Tuesday)
					)
				 &
					(
						p__d__instance(DAY2,c__Wednesday)
					)
				 &
					(
						p__d__instance(WEEK,c__Week)
					)
				 &
					(
						p__temporalPart(DAY1,WEEK)
					)
				 &
					(
						p__temporalPart(DAY2,WEEK)
					)
				)
			)
			=>
			(
				p__meetsTemporally(DAY1,DAY2)
			)
		)
	)
).


fof( mergeA2104, axiom,
	p__d__subclass(c__Thursday,c__Day)
).



% ($documentation Thursday EnglishLanguage "The &%Class of all calendar Thursdays.")


fof( mergeA2105, axiom,
	(![WEEK,DAY1,DAY2]: 
		(
			(
				(
					(
						p__d__instance(DAY1,c__Wednesday)
					)
				 &
					(
						p__d__instance(DAY2,c__Thursday)
					)
				 &
					(
						p__d__instance(WEEK,c__Week)
					)
				 &
					(
						p__temporalPart(DAY1,WEEK)
					)
				 &
					(
						p__temporalPart(DAY2,WEEK)
					)
				)
			)
			=>
			(
				p__meetsTemporally(DAY1,DAY2)
			)
		)
	)
).


fof( mergeA2106, axiom,
	p__d__subclass(c__Friday,c__Day)
).



% ($documentation Friday EnglishLanguage "The &%Class of all calendar Fridays.")


fof( mergeA2107, axiom,
	(![WEEK,DAY1,DAY2]: 
		(
			(
				(
					(
						p__d__instance(DAY1,c__Thursday)
					)
				 &
					(
						p__d__instance(DAY2,c__Friday)
					)
				 &
					(
						p__d__instance(WEEK,c__Week)
					)
				 &
					(
						p__temporalPart(DAY1,WEEK)
					)
				 &
					(
						p__temporalPart(DAY2,WEEK)
					)
				)
			)
			=>
			(
				p__meetsTemporally(DAY1,DAY2)
			)
		)
	)
).


fof( mergeA2108, axiom,
	p__d__subclass(c__Saturday,c__Day)
).



% ($documentation Saturday EnglishLanguage "The &%Class of all calendar Saturdays.")


fof( mergeA2109, axiom,
	(![WEEK,DAY1,DAY2]: 
		(
			(
				(
					(
						p__d__instance(DAY1,c__Friday)
					)
				 &
					(
						p__d__instance(DAY2,c__Saturday)
					)
				 &
					(
						p__d__instance(WEEK,c__Week)
					)
				 &
					(
						p__temporalPart(DAY1,WEEK)
					)
				 &
					(
						p__temporalPart(DAY2,WEEK)
					)
				)
			)
			=>
			(
				p__meetsTemporally(DAY1,DAY2)
			)
		)
	)
).


fof( mergeA2110, axiom,
	p__d__subclass(c__Sunday,c__Day)
).



% ($documentation Sunday EnglishLanguage "The &%Class of all calendar Sundays.")


fof( mergeA2111, axiom,
	(![WEEK,DAY1,DAY2]: 
		(
			(
				(
					(
						p__d__instance(DAY1,c__Saturday)
					)
				 &
					(
						p__d__instance(DAY2,c__Sunday)
					)
				 &
					(
						p__d__instance(WEEK,c__Week)
					)
				 &
					(
						p__temporalPart(DAY1,WEEK)
					)
				 &
					(
						p__temporalPart(DAY2,WEEK)
					)
				)
			)
			=>
			(
				p__meetsTemporally(DAY1,DAY2)
			)
		)
	)
).


fof( mergeA2112, axiom,
	(![WEEK1,WEEK2,DAY1,DAY2]: 
		(
			(
				(
					(
						p__d__instance(DAY1,c__Sunday)
					)
				 &
					(
						p__d__instance(DAY2,c__Monday)
					)
				 &
					(
						p__d__instance(WEEK1,c__Week)
					)
				 &
					(
						p__d__instance(WEEK2,c__Week)
					)
				 &
					(
						p__temporalPart(DAY1,WEEK1)
					)
				 &
					(
						p__temporalPart(DAY2,WEEK2)
					)
				 &
					(
						p__meetsTemporally(WEEK1,WEEK2)
					)
				)
			)
			=>
			(
				p__meetsTemporally(DAY1,DAY2)
			)
		)
	)
).


fof( mergeA2113, axiom,
	p__d__subclass(c__Week,c__TimeInterval)
).



% ($documentation Week EnglishLanguage "The &%Class of all calendar weeks.")


% 	(forall (?WEEK)
% 		(=> 
% 			($instance ?WEEK Week)
% 			(duration ?WEEK (MeasureFn 1 WeekDuration))
% 		)
% 	)

fof( mergeA2115, axiom,
	p__d__subclass(c__Hour,c__TimeInterval)
).


% 	(relatedInternalConcept Hour HourFn)

% 	(relatedInternalConcept Hour HourDuration)


% ($documentation Hour EnglishLanguage "The &%Class of all clock &%Hours.")


% 	(forall (?HOUR)
% 		(=> 
% 			($instance ?HOUR Hour)
% 			(duration ?HOUR (MeasureFn 1 HourDuration))
% 		)
% 	)

fof( mergeA2119, axiom,
	p__d__subclass(c__Minute,c__TimeInterval)
).


% 	(relatedInternalConcept Minute MinuteFn)

% 	(relatedInternalConcept Minute MinuteDuration)


% ($documentation Minute EnglishLanguage "The &%Class of all clock &%Minutes.")


% 	(forall (?MINUTE)
% 		(=> 
% 			($instance ?MINUTE Minute)
% 			(duration ?MINUTE (MeasureFn 1 MinuteDuration))
% 		)
% 	)

fof( mergeA2123, axiom,
	p__d__subclass(c__Second,c__TimeInterval)
).


% 	(relatedInternalConcept Second SecondDuration)

% 	(relatedInternalConcept Second SecondFn)


% ($documentation Second EnglishLanguage "The &%Class of all clock &%Seconds.")


% 	(forall (?SECOND)
% 		(=> 
% 			($instance ?SECOND Second)
% 			(duration ?SECOND (MeasureFn 1 SecondDuration))
% 		)
% 	)

fof( mergeA2127, axiom,
	p__d__instance(c__TemporalCompositionFn,c__TemporalRelation)
).


fof( mergeA2128, axiom,
	p__d__instance(c__TemporalCompositionFn,c__BinaryFunction)
).


% 	($domain TemporalCompositionFn 1 TimeInterval)

% 	($domainSubclass TemporalCompositionFn 2 TimeInterval)

% 	($rangeSubclass TemporalCompositionFn TimeInterval)


% ($documentation TemporalCompositionFn EnglishLanguage "The basic &%Function for expressing 
% the composition of larger &%TimeIntervals out of smaller &%TimeIntervals.  
% For example, if &%ThisSeptember is an &%instance of &%September, 
% (&%TemporalCompositionFn &%ThisSeptember &%Day) denotes the &%Class of 
% consecutive days that make up &%ThisSeptember.  Note that one can obtain 
% the number of instances of this &%Class by using the function &%CardinalityFn.")


fof( mergeA2132, axiom,
	(![INTERVAL,INTERVALTYPE,CLASS,TIME1,TIME2]: 
		(
			(
				(
					(
						p__d__subclass(INTERVALTYPE,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						p__d__subclass(CLASS,c__TimeInterval)
					)
				 &
					(
						( f__TemporalCompositionFn2(INTERVAL,INTERVALTYPE) = CLASS )
					)
				 &
					(
						p__d__instance(TIME1,c__TimeInterval)
					)
				 &
					(
						p__d__instance(TIME2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(TIME1,INTERVALTYPE)
					)
				 &
					(
						p__d__instance(TIME2,CLASS)
					)
				)
			)
			=>
			(
				(?[DURATION]: 
					(
						(
							(
								p__d__instance(DURATION,c__TimeDuration)
							)
						 &
							(
								p__duration(TIME1,DURATION)
							)
						 &
							(
								p__duration(TIME2,DURATION)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2133, axiom,
	(![INTERVAL,INTERVALTYPE,CLASS,TIME1,TIME2]: 
		(
			(
				(
					(
						p__d__subclass(INTERVALTYPE,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						p__d__subclass(CLASS,c__TimeInterval)
					)
				 &
					(
						( f__TemporalCompositionFn2(INTERVAL,INTERVALTYPE) = CLASS )
					)
				 &
					(
						p__d__instance(TIME1,c__TimeInterval)
					)
				 &
					(
						p__d__instance(TIME2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(TIME1,CLASS)
					)
				 &
					(
						p__d__instance(TIME2,CLASS)
					)
				 &
					(
						~ (
							( TIME1 = TIME2 )
						)
					)
				)
			)
			=>
			(
				(
					p__meetsTemporally(TIME1,TIME2)
				 |
					p__meetsTemporally(TIME2,TIME1)
				 |
					p__earlier(TIME1,TIME2)
				 |
					p__earlier(TIME2,TIME1)
				)
			)
		)
	)
).


fof( mergeA2134, axiom,
	(![INTERVALTYPE,CLASS,INTERVAL]: 
		(
			(
				(
					(
						p__d__subclass(INTERVALTYPE,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						p__d__subclass(CLASS,c__TimeInterval)
					)
				 &
					(
						( f__TemporalCompositionFn2(INTERVAL,INTERVALTYPE) = CLASS )
					)
				)
			)
			=>
			(
				(?[TIME]: 
					(
						(
							(
								p__d__instance(TIME,c__TimeInterval)
							)
						 &
							(
								p__d__instance(TIME,CLASS)
							)
						 &
							(
								p__starts(TIME,INTERVAL)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2135, axiom,
	(![INTERVALTYPE,CLASS,INTERVAL]: 
		(
			(
				(
					(
						p__d__subclass(INTERVALTYPE,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						p__d__subclass(CLASS,c__TimeInterval)
					)
				 &
					(
						( f__TemporalCompositionFn2(INTERVAL,INTERVALTYPE) = CLASS )
					)
				)
			)
			=>
			(
				(?[TIME]: 
					(
						(
							(
								p__d__instance(TIME,c__TimeInterval)
							)
						 &
							(
								p__d__instance(TIME,CLASS)
							)
						 &
							(
								p__finishes(TIME,INTERVAL)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2136, axiom,
	(![INTERVALTYPE,INTERVAL,CLASS,TIME1]: 
		(
			(
				(
					(
						p__d__subclass(INTERVALTYPE,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						p__d__subclass(CLASS,c__TimeInterval)
					)
				 &
					(
						( f__TemporalCompositionFn2(INTERVAL,INTERVALTYPE) = CLASS )
					)
				 &
					(
						p__d__instance(TIME1,c__TimeInterval)
					)
				 &
					(
						p__d__instance(TIME1,CLASS)
					)
				 &
					(
						~ (
							p__finishes(TIME1,INTERVAL)
						)
					)
				)
			)
			=>
			(
				(?[TIME2]: 
					(
						(
							(
								p__d__instance(TIME2,c__TimeInterval)
							)
						 &
							(
								p__d__instance(TIME2,CLASS)
							)
						 &
							(
								p__meetsTemporally(TIME1,TIME2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2137, axiom,
	(![INTERVALTYPE,INTERVAL,CLASS,TIME1]: 
		(
			(
				(
					(
						p__d__subclass(INTERVALTYPE,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						p__d__subclass(CLASS,c__TimeInterval)
					)
				 &
					(
						( f__TemporalCompositionFn2(INTERVAL,INTERVALTYPE) = CLASS )
					)
				 &
					(
						p__d__instance(TIME1,c__TimeInterval)
					)
				 &
					(
						p__d__instance(TIME1,CLASS)
					)
				 &
					(
						~ (
							p__starts(TIME1,INTERVAL)
						)
					)
				)
			)
			=>
			(
				(?[TIME2]: 
					(
						(
							(
								p__d__instance(TIME2,c__TimeInterval)
							)
						 &
							(
								p__d__instance(TIME2,CLASS)
							)
						 &
							(
								p__meetsTemporally(TIME2,TIME1)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2138, axiom,
	(![INTERVALTYPE,INTERVAL,CLASS,TIME]: 
		(
			(
				(
					(
						p__d__subclass(INTERVALTYPE,c__TimeInterval)
					)
				 &
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						p__d__subclass(CLASS,c__TimeInterval)
					)
				 &
					(
						( f__TemporalCompositionFn2(INTERVAL,INTERVALTYPE) = CLASS )
					)
				 &
					(
						p__d__instance(TIME,c__TimePoint)
					)
				 &
					(
						p__temporalPart(TIME,INTERVAL)
					)
				)
			)
			=>
			(
				(?[INSTANCE]: 
					(
						(
							(
								p__d__instance(INSTANCE,c__TimePosition)
							)
						 &
							(
								p__d__instance(INSTANCE,CLASS)
							)
						 &
							(
								p__temporalPart(TIME,INSTANCE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2139, axiom,
	(![YEAR]: 
		(
			(
				p__d__instance(YEAR,c__Year)
			)
			=>
			(
				( f__CardinalityFn1(f__TemporalCompositionFn2(YEAR,c__Month)) = c__12 )
			)
		)
	)
).


% 	(forall (?MONTH ?NUMBER)
% 		(=> 
% 			(and 
% 				($instance ?MONTH Month)
% 				(duration ?MONTH (MeasureFn ?NUMBER DayDuration))
% 			)
% 			(equal (CardinalityFn (TemporalCompositionFn ?MONTH Day)) ?NUMBER)
% 		)
% 	)

fof( mergeA2141, axiom,
	(![WEEK]: 
		(
			(
				p__d__instance(WEEK,c__Week)
			)
			=>
			(
				( f__CardinalityFn1(f__TemporalCompositionFn2(WEEK,c__Day)) = c__7 )
			)
		)
	)
).


fof( mergeA2142, axiom,
	(![DAY]: 
		(
			(
				p__d__instance(DAY,c__Day)
			)
			=>
			(
				( f__CardinalityFn1(f__TemporalCompositionFn2(DAY,c__Hour)) = c__24 )
			)
		)
	)
).


fof( mergeA2143, axiom,
	(![HOUR]: 
		(
			(
				p__d__instance(HOUR,c__Hour)
			)
			=>
			(
				( f__CardinalityFn1(f__TemporalCompositionFn2(HOUR,c__Minute)) = c__60 )
			)
		)
	)
).


fof( mergeA2144, axiom,
	(![MINUTE]: 
		(
			(
				p__d__instance(MINUTE,c__Minute)
			)
			=>
			(
				( f__CardinalityFn1(f__TemporalCompositionFn2(MINUTE,c__Second)) = c__60 )
			)
		)
	)
).


% ($comment 
% ;; END FILE
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;
% ;; MEREOTOPOLOGY ;;
% ;;;;;;;;;;;;;;;;;;;
% ;;
% ;; INCLUDES 'STRUCTURAL ONTOLOGY'
% ;; INCLUDES 'BASE ONTOLOGY'
% ;;
% ;; Most of this content is taken from Barry Smith's and Nicola Guarino's 
% ;; papers on the subject.
% )

fof( mergeA2145, axiom,
	p__d__instance(c__connected,c__BinaryPredicate)
).


fof( mergeA2146, axiom,
	p__d__instance(c__connected,c__SpatialRelation)
).


fof( mergeA2147, axiom,
	p__d__instance(c__connected,c__ReflexiveRelation)
).


fof( mergeA2148, axiom,
	p__d__instance(c__connected,c__SymmetricRelation)
).


% 	($domain connected 1 Object)

% 	($domain connected 2 Object)


% ($documentation connected EnglishLanguage "(connected ?OBJ1 ?OBJ2) means that ?OBJ1 
% &%meetsSpatially ?OBJ2 or that ?OBJ1 &%overlapsSpatially ?OBJ2.")


fof( mergeA2151, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__connected(OBJ1,OBJ2)
					)
				)
			)
			=>
			(
				(
					p__meetsSpatially(OBJ1,OBJ2)
				 |
					p__overlapsSpatially(OBJ1,OBJ2)
				)
			)
		)
	)
).


fof( mergeA2152, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__Object)
			)
			=>
			(
				(
					p__d__instance(OBJ,c__SelfConnectedObject)
				)
				<=>
				(
					(![PART1,PART2]: 
						(
							(
								(
									(
										p__d__instance(PART2,c__Object)
									)
								 &
									(
										p__d__instance(PART1,c__Object)
									)
								 &
									(
										( OBJ = f__MereologicalSumFn2(PART1,PART2) )
									)
								)
							)
							=>
							(
								p__connected(PART1,PART2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2153, axiom,
	p__d__instance(c__connects,c__SpatialRelation)
).


fof( mergeA2154, axiom,
	p__d__instance(c__connects,c__TernaryPredicate)
).


% 	($domain connects 1 SelfConnectedObject)

% 	($domain connects 2 SelfConnectedObject)

% 	($domain connects 3 SelfConnectedObject)


% ($documentation connects EnglishLanguage "The relationship between three things, when one of 
% the three things connects the other two.  More formally, (&%connects ?OBJ1 
% ?OBJ2 ?OBJ3) means that (&%connected ?OBJ1 ?OBJ2) and (&%connected ?OBJ1 ?OBJ3) 
% and not (&%connected ?OBJ2 ?OBJ3).")


fof( mergeA2158, axiom,
	(![OBJ2,OBJ1,OBJ3]: 
		(
			(
				(
					(
						p__d__instance(OBJ3,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(OBJ2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__connects(OBJ1,OBJ2,OBJ3)
				)
				<=>
				(
					p__between(OBJ2,OBJ1,OBJ3)
				)
			)
		)
	)
).


fof( mergeA2159, axiom,
	(![OBJ1,OBJ2,OBJ3]: 
		(
			(
				(
					(
						p__d__instance(OBJ3,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(OBJ2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__connects(OBJ1,OBJ2,OBJ3)
				)
				<=>
				(
					(
						(
							p__connected(OBJ1,OBJ2)
						)
					 &
						(
							p__connected(OBJ1,OBJ3)
						)
					 &
						(
							~ (
								p__connected(OBJ2,OBJ3)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2160, axiom,
	(![ARC,NODE2,NODE1]: 
		(
			(
				(
					(
						p__d__instance(NODE2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(NODE1,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(ARC,c__SelfConnectedObject)
					)
				 &
					(
						p__connects(ARC,NODE1,NODE2)
					)
				)
			)
			=>
			(
				p__connects(ARC,NODE2,NODE1)
			)
		)
	)
).


fof( mergeA2161, axiom,
	p__subrelation(c__meetsSpatially,c__connected)
).


fof( mergeA2162, axiom,
	p__d__instance(c__meetsSpatially,c__IrreflexiveRelation)
).


fof( mergeA2163, axiom,
	p__d__instance(c__meetsSpatially,c__SymmetricRelation)
).


fof( mergeA2164, axiom,
	p__disjointRelation(c__meetsSpatially,c__overlapsSpatially)
).



% ($documentation meetsSpatially EnglishLanguage "(&%meetsSpatially ?OBJ1 ?OBJ2) means that 
% ?OBJ1 and ?OBJ2 are &%connected but that neither ?OBJ1 nor ?OBJ2 
% &%overlapsSpatially the other.")


fof( mergeA2165, axiom,
	p__subrelation(c__overlapsSpatially,c__connected)
).


fof( mergeA2166, axiom,
	p__d__instance(c__overlapsSpatially,c__ReflexiveRelation)
).


fof( mergeA2167, axiom,
	p__d__instance(c__overlapsSpatially,c__SymmetricRelation)
).



% ($documentation overlapsSpatially EnglishLanguage "(&%overlapsSpatially ?OBJ1 ?OBJ2) means 
% that the &%Objects ?OBJ1 and ?OBJ2 have some parts in common.  This is a 
% reflexive and symmetric (but not transitive) relation.")


fof( mergeA2168, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__overlapsSpatially(OBJ1,OBJ2)
				)
				<=>
				(
					(?[OBJ3]: 
						(
							(
								(
									p__d__instance(OBJ3,c__Object)
								)
							 &
								(
									p__part(OBJ3,OBJ1)
								)
							 &
								(
									p__part(OBJ3,OBJ2)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2169, axiom,
	(![COLL,OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(COLL,c__Collection)
					)
				 &
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(OBJ2,c__SelfConnectedObject)
					)
				 &
					(
						p__member(OBJ1,COLL)
					)
				 &
					(
						p__member(OBJ2,COLL)
					)
				 &
					(
						~ (
							( OBJ1 = OBJ2 )
						)
					)
				)
			)
			=>
			(
				~ (
					p__overlapsSpatially(OBJ1,OBJ2)
				)
			)
		)
	)
).


fof( mergeA2170, axiom,
	(![REL,PROCESS,OBJ]: 
		(
			(
				(
					(
						p__d__instance(PROCESS,c__Physical)
					)
				 &
					(
						p__d__instance(REL,c__CaseRole)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__holds3(REL,PROCESS,OBJ)
					)
				)
			)
			=>
			(
				(?[TIME]: 
					(
						(
							(
								p__d__instance(TIME,c__TimePoint)
							)
						 &
							(
								p__overlapsSpatially(f__WhereFn2(PROCESS,TIME),OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2171, axiom,
	p__d__instance(c__overlapsPartially,c__SymmetricRelation)
).


fof( mergeA2172, axiom,
	p__d__instance(c__overlapsPartially,c__IrreflexiveRelation)
).


fof( mergeA2173, axiom,
	p__subrelation(c__overlapsPartially,c__overlapsSpatially)
).



% ($documentation overlapsPartially EnglishLanguage "(&%overlapsPartially ?OBJ1 ?OBJ2) means 
% that ?OBJ1 and ?OBJ2 have part(s) in common, but neither ?OBJ1 nor ?OBJ2 
% is a &%part of the other.")


fof( mergeA2174, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__overlapsPartially(OBJ1,OBJ2)
				)
				<=>
				(
					(
						(
							~ (
								p__part(OBJ1,OBJ2)
							)
						)
					 &
						(
							~ (
								p__part(OBJ2,OBJ1)
							)
						)
					 &
						(
							(?[OBJ3]: 
								(
									(
										(
											p__d__instance(OBJ3,c__Object)
										)
									 &
										(
											p__part(OBJ3,OBJ1)
										)
									 &
										(
											p__part(OBJ3,OBJ2)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2175, axiom,
	p__subrelation(c__superficialPart,c__part)
).


fof( mergeA2176, axiom,
	p__d__instance(c__superficialPart,c__IrreflexiveRelation)
).


fof( mergeA2177, axiom,
	p__d__instance(c__superficialPart,c__TransitiveRelation)
).



% ($documentation superficialPart EnglishLanguage "(&%superficialPart ?OBJ1 ?OBJ2) 
% means that ?OBJ1 is a part of ?OBJ2 that has no interior parts of its own 
% (or, intuitively, that only overlaps those parts of ?OBJ2 that are 
% externally connected with the mereological complement of ?OBJ2). This too 
% is a transitive relation closed under &%MereologicalSumFn and 
% &%MereologicalProductFn.")


fof( mergeA2178, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__superficialPart(OBJ1,OBJ2)
					)
				)
			)
			=>
			(
				(
					(
						~ (
							p__interiorPart(OBJ1,OBJ2)
						)
					)
				 &
					(
						(![OBJ3]: 
							(
								(
									~ (
										p__d__instance(OBJ3,c__Object)
									)
								 |
									~ (
										p__interiorPart(OBJ3,OBJ1)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2179, axiom,
	p__d__instance(c__surface,c__AsymmetricRelation)
).


fof( mergeA2180, axiom,
	p__subrelation(c__surface,c__superficialPart)
).


% 	($domain surface 1 SelfConnectedObject)

% 	($domain surface 2 SelfConnectedObject)


% ($documentation surface EnglishLanguage "(&%surface ?OBJ1 ?OBJ2) means that ?OBJ1 
% is a maximally connected &%superficialPart of ?OBJ2.  Note that some 
% &%SelfConnectedObjects have more than one surface, e.g. a hollow 
% object like a tennis ball has both an inner and an outer surface.")


fof( mergeA2183, axiom,
	(![OBJ2,OBJ1,OBJ3]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(OBJ3,c__Object)
					)
				 &
					(
						p__surface(OBJ1,OBJ2)
					)
				 &
					(
						p__superficialPart(OBJ3,OBJ2)
					)
				)
			)
			=>
			(
				p__part(OBJ3,OBJ1)
			)
		)
	)
).


fof( mergeA2184, axiom,
	p__subrelation(c__interiorPart,c__part)
).


fof( mergeA2185, axiom,
	p__d__instance(c__interiorPart,c__AsymmetricRelation)
).


fof( mergeA2186, axiom,
	p__d__instance(c__interiorPart,c__TransitiveRelation)
).



% ($documentation interiorPart EnglishLanguage "(&%interiorPart ?OBJ1 ?OBJ2) means 
% that ?OBJ1 is part ?OBJ2 and there is no overlap between ?OBJ1 and 
% any &%superficialPart ?OBJ2.")


fof( mergeA2187, axiom,
	(![OBJ2,OBJ1,PART]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				 &
					(
						p__interiorPart(OBJ1,OBJ2)
					)
				 &
					(
						p__superficialPart(PART,OBJ2)
					)
				)
			)
			=>
			(
				~ (
					p__overlapsSpatially(OBJ1,PART)
				)
			)
		)
	)
).


fof( mergeA2188, axiom,
	p__subrelation(c__bottom,c__superficialPart)
).


% 	($domain bottom 1 SelfConnectedObject)

% 	($domain bottom 2 SelfConnectedObject)


% ($documentation bottom EnglishLanguage "(&%bottom ?BOTTOM ?OBJECT) holds if ?BOTTOM is the 
% lowest or deepest maximal superficial part of ?OBJECT.")


fof( mergeA2191, axiom,
	(![OBJECT,PART,BOTTOM]: 
		(
			(
				(
					(
						p__d__instance(OBJECT,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(BOTTOM,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				 &
					(
						p__bottom(BOTTOM,OBJECT)
					)
				 &
					(
						p__part(PART,OBJECT)
					)
				 &
					(
						~ (
							p__connected(PART,BOTTOM)
						)
					)
				)
			)
			=>
			(
				p__orientation(PART,BOTTOM,c__Above)
			)
		)
	)
).


fof( mergeA2192, axiom,
	p__subrelation(c__top,c__superficialPart)
).


% 	($domain top 1 SelfConnectedObject)

% 	($domain top 2 SelfConnectedObject)


% ($documentation top EnglishLanguage "(&%top ?TOP ?OBJECT) means that ?TOP is the highest maximal 
% superficial part of ?OBJECT.")


fof( mergeA2195, axiom,
	(![OBJECT,PART,TOP]: 
		(
			(
				(
					(
						p__d__instance(OBJECT,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(TOP,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				 &
					(
						p__top(TOP,OBJECT)
					)
				 &
					(
						p__part(PART,OBJECT)
					)
				 &
					(
						~ (
							p__connected(PART,TOP)
						)
					)
				)
			)
			=>
			(
				p__orientation(PART,TOP,c__Below)
			)
		)
	)
).


fof( mergeA2196, axiom,
	p__subrelation(c__side,c__superficialPart)
).


% 	($domain side 1 SelfConnectedObject)

% 	($domain side 2 SelfConnectedObject)


% ($documentation side EnglishLanguage "(&%side ?SIDE ?OBJECT) means that ?SIDE is a side of the object, 
% as opposed to the &%top or &%bottom.")


fof( mergeA2199, axiom,
	(![OBJECT,SIDE,PART]: 
		(
			(
				(
					(
						p__d__instance(OBJECT,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(SIDE,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				 &
					(
						p__side(SIDE,OBJECT)
					)
				 &
					(
						p__part(PART,OBJECT)
					)
				 &
					(
						~ (
							p__connected(PART,SIDE)
						)
					)
				)
			)
			=>
			(
				(?[DIRECT]: 
					(
						(
							(
								p__d__instance(DIRECT,c__PositionalAttribute)
							)
						 &
							(
								p__orientation(SIDE,PART,DIRECT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2200, axiom,
	(![O,TOP,S]: 
		(
			(
				(
					(
						p__d__instance(O,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(TOP,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(S,c__SelfConnectedObject)
					)
				 &
					(
						p__top(TOP,O)
					)
				 &
					(
						p__side(S,O)
					)
				)
			)
			=>
			(
				~ (
					( TOP = S )
				)
			)
		)
	)
).


fof( mergeA2201, axiom,
	(![OBJECT,WIDTH]: 
		(
			(
				(
					(
						p__d__instance(WIDTH,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(OBJECT,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__width(OBJECT,WIDTH)
				)
				<=>
				(
					(?[SIDE1,SIDE2]: 
						(
							(
								(
									p__d__instance(SIDE1,c__SelfConnectedObject)
								)
							 &
								(
									p__d__instance(SIDE2,c__SelfConnectedObject)
								)
							 &
								(
									p__side(SIDE1,OBJECT)
								)
							 &
								(
									p__side(SIDE2,OBJECT)
								)
							 &
								(
									p__distance(SIDE1,SIDE2,WIDTH)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2202, axiom,
	(![OBJECT,TOP,BOTTOM,HEIGHT]: 
		(
			(
				(
					(
						p__d__instance(HEIGHT,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(OBJECT,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(TOP,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(BOTTOM,c__SelfConnectedObject)
					)
				 &
					(
						p__height(OBJECT,HEIGHT)
					)
				 &
					(
						p__top(TOP,OBJECT)
					)
				 &
					(
						p__bottom(BOTTOM,OBJECT)
					)
				)
			)
			=>
			(
				p__distance(TOP,BOTTOM,HEIGHT)
			)
		)
	)
).


fof( mergeA2203, axiom,
	p__d__instance(c__MereologicalSumFn,c__SpatialRelation)
).


fof( mergeA2204, axiom,
	p__d__instance(c__MereologicalSumFn,c__BinaryFunction)
).


fof( mergeA2205, axiom,
	p__d__instance(c__MereologicalSumFn,c__TotalValuedRelation)
).


% 	($domain MereologicalSumFn 1 Object)

% 	($domain MereologicalSumFn 2 Object)

% 	($range MereologicalSumFn Object)

fof( mergeA2209, axiom,
	p__relatedInternalConcept(c__MereologicalSumFn,c__MereologicalProductFn)
).


fof( mergeA2210, axiom,
	p__relatedInternalConcept(c__MereologicalSumFn,c__MereologicalDifferenceFn)
).



% ($documentation MereologicalSumFn EnglishLanguage "(&%MereologicalSumFn ?OBJ1 ?OBJ2) 
% denotes the &%Object consisting of the parts which belong to either 
% ?OBJ1 or ?OBJ2.") 


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: part is reflexive
% ;;
% ;;(=>
% ;;  (equal ?OBJ3 (MereologicalSumFn ?OBJ1 ?OBJ2))
% ;;  (forall (?PART)
% ;;    (<=>
% ;;      (part ?PART ?OBJ3)
% ;;      (or
% ;;        (part ?PART ?OBJ1)
% ;;        (part ?PART ?OBJ2)))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% ;; Adapted from "Mereotopology: A Theory of Parts and Boundaries" Barry Smith
% )

fof( mergeA2211, axiom,
	(![C1,C2,P,O1,O2,S,CP,PART]: 
		(
			(
				(
					(
						p__d__instance(O1,c__Object)
					)
				 &
					(
						p__d__instance(C1,c__Object)
					)
				 &
					(
						p__d__instance(O2,c__Object)
					)
				 &
					(
						p__d__instance(C2,c__Object)
					)
				 &
					(
						p__d__instance(P,c__Object)
					)
				 &
					(
						p__d__instance(CP,c__Object)
					)
				 &
					(
						p__d__instance(S,c__Object)
					)
				 &
					(
						( C1 = f__MereologicalComplementFn1(O1) )
					)
				 &
					(
						( C2 = f__MereologicalComplementFn1(O2) )
					)
				 &
					(
						( P = f__MereologicalProductFn2(C1,C2) )
					)
				 &
					(
						( CP = f__MereologicalComplementFn1(P) )
					)
				 &
					(
						( S = f__MereologicalSumFn2(O1,O2) )
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				)
			)
			=>
			(
				(
					p__part(PART,S)
				)
				<=>
				(
					p__part(PART,CP)
				)
			)
		)
	)
).


% ($comment 
% ;; JA: Alternatively
% ;; Adapted from "Mereotopology: A Theory of Parts and Boundaries" Barry Smith
% ;;(=>
% ;;	(equal ?OBJ3 (MereologicalSumFn ?OBJ1 ?OBJ2))
% ;;	(forall (?PART)
% ;;		(<=>
% ;;			(overlapsSpatially ?PART ?OBJ3)
% ;;			(or
% ;;				(overlapsSpatially ?PART ?OBJ1)
% ;;				(overlapsSpatially ?PART ?OBJ2)))))
% )

fof( mergeA2212, axiom,
	(![OBJ3,OBJ1,OBJ2,PART]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ3,c__Object)
					)
				 &
					(
						( OBJ3 = f__MereologicalSumFn2(OBJ1,OBJ2) )
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				)
			)
			=>
			(
				(
					p__overlapsSpatially(PART,OBJ3)
				)
				<=>
				(
					(
						p__overlapsSpatially(PART,OBJ1)
					 |
						p__overlapsSpatially(PART,OBJ2)
					)
				)
			)
		)
	)
).


fof( mergeA2213, axiom,
	(![OBJ1,OBJ2,OBJ3,PART]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ3,c__Object)
					)
				 &
					(
						( OBJ3 = f__MereologicalSumFn2(OBJ1,OBJ2) )
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				 &
					(
						(
							p__part(PART,OBJ1)
						 |
							p__part(PART,OBJ2)
						)
					)
				)
			)
			=>
			(
				p__part(PART,OBJ3)
			)
		)
	)
).


% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

fof( mergeA2214, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				( f__MereologicalSumFn2(OBJ1,OBJ2) = f__MereologicalSumFn2(OBJ2,OBJ1) )
			)
		)
	)
).


fof( mergeA2215, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				( f__MereologicalSumFn2(OBJ1,OBJ2) = f__MereologicalSumFn2(f__MereologicalSumFn2(OBJ1,OBJ2),OBJ2) )
			)
		)
	)
).


fof( mergeA2216, axiom,
	p__d__instance(c__MereologicalProductFn,c__SpatialRelation)
).


fof( mergeA2217, axiom,
	p__d__instance(c__MereologicalProductFn,c__BinaryFunction)
).


fof( mergeA2218, axiom,
	p__d__instance(c__MereologicalProductFn,c__TotalValuedRelation)
).


% 	($domain MereologicalProductFn 1 Object)

% 	($domain MereologicalProductFn 2 Object)

% 	($range MereologicalProductFn Object)

fof( mergeA2222, axiom,
	p__relatedInternalConcept(c__MereologicalProductFn,c__MereologicalDifferenceFn)
).



% ($documentation MereologicalProductFn EnglishLanguage "(&%MereologicalProductFn ?OBJ1 ?OBJ2) 
% denotes the &%Object consisting of the parts which belong to both ?OBJ1 
% and ?OBJ2.") 


fof( mergeA2223, axiom,
	(![OBJ3,OBJ1,OBJ2,PART]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ3,c__Object)
					)
				 &
					(
						( OBJ3 = f__MereologicalProductFn2(OBJ1,OBJ2) )
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				)
			)
			=>
			(
				(
					p__part(PART,OBJ3)
				)
				<=>
				(
					(
						(
							p__part(PART,OBJ1)
						)
					 &
						(
							p__part(PART,OBJ2)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2224, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				( f__MereologicalProductFn2(OBJ1,OBJ2) = f__MereologicalProductFn2(OBJ2,OBJ1) )
			)
		)
	)
).


fof( mergeA2225, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				( f__MereologicalProductFn2(OBJ1,OBJ2) = f__MereologicalProductFn2(f__MereologicalProductFn2(OBJ1,OBJ2),OBJ2) )
			)
		)
	)
).


fof( mergeA2226, axiom,
	p__d__instance(c__MereologicalDifferenceFn,c__SpatialRelation)
).


fof( mergeA2227, axiom,
	p__d__instance(c__MereologicalDifferenceFn,c__BinaryFunction)
).


fof( mergeA2228, axiom,
	p__d__instance(c__MereologicalDifferenceFn,c__TotalValuedRelation)
).


% 	($domain MereologicalDifferenceFn 1 Object)

% 	($domain MereologicalDifferenceFn 2 Object)

% 	($range MereologicalDifferenceFn Object)


% ($documentation MereologicalDifferenceFn EnglishLanguage "(&%MereologicalDifferenceFn ?OBJ1 
% ?OBJ2) denotes the &%Object consisting of the parts which belong to ?OBJ1 
% and not to ?OBJ2.") 


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;;(=>
% ;;  (equal ?OBJ3 
% ;;    (MereologicalDifferenceFn ?OBJ1 ?OBJ2))
% ;;  (forall (?PART)
% ;;    (<=>
% ;;      (properPart ?PART ?OBJ3)
% ;;      (and
% ;;        (properPart ?PART ?OBJ1)
% ;;        (not
% ;;          (properPart ?PART ?OBJ2))))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% ;; Taken from "Mereotopology: A Theory of Parts and Boundaries" Barry Smith
% )

fof( mergeA2232, axiom,
	(![OBJ3,OBJ1,OBJ2,PART]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ3,c__Object)
					)
				 &
					(
						( OBJ3 = f__MereologicalDifferenceFn2(OBJ1,OBJ2) )
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				)
			)
			=>
			(
				(
					p__part(PART,OBJ3)
				)
				<=>
				(
					(
						(
							p__part(PART,OBJ1)
						)
					 &
						(
							~ (
								p__overlapsSpatially(PART,OBJ2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2233, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				( f__MereologicalDifferenceFn2(OBJ1,OBJ2) = f__MereologicalDifferenceFn2(f__MereologicalDifferenceFn2(OBJ1,OBJ2),OBJ2) )
			)
		)
	)
).



fof( mergeA2234, axiom,
	p__d__instance(c__MereologicalComplementFn,c__SpatialRelation)
).


fof( mergeA2235, axiom,
	p__d__instance(c__MereologicalComplementFn,c__UnaryFunction)
).


fof( mergeA2236, axiom,
	p__d__instance(c__MereologicalComplementFn,c__TotalValuedRelation)
).


% 	($domain MereologicalComplementFn 1 Object)

% 	($range MereologicalComplementFn Object)


% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% ;; Taken from "Mereotopology: A Theory of Parts and Boundaries" Barry Smith
% )

% ($documentation MereologicalComplementFn EnglishLanguage "(&%MereologicalComplementFn ?OBJ) 
% denotes the &%Object consisting of the parts which do not belong to ?OBJ.") 


fof( mergeA2239, axiom,
	(![OBJ2,OBJ1,PART]: 
		(
			(
				(
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						( OBJ2 = f__MereologicalComplementFn1(OBJ1) )
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				)
			)
			=>
			(
				(
					(
						(
							p__part(PART,OBJ1)
						)
						<=>
						(
							~ (
								p__overlapsSpatially(PART,OBJ2)
							)
						)
					)
				 &
					(
						(
							p__part(PART,OBJ2)
						)
						<=>
						(
							~ (
								p__overlapsSpatially(PART,OBJ1)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2240, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__Object)
			)
			=>
			(
				( OBJ = f__MereologicalComplementFn1(f__MereologicalComplementFn1(OBJ)) )
			)
		)
	)
).



% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% ;; Adapted from "Mereotopology: A Theory of Parts and Boundaries" Barry Smith
% ;; Trying to define the universe of Objects
% )


fof( mergeA2241, axiom,
	(![OBJ1,OBJ2,PART]: 
		(
			(
				(
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						( OBJ2 = f__MereologicalComplementFn1(OBJ1) )
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				)
			)
			=>
			(
				(
					p__overlapsSpatially(PART,OBJ1)
				 |
					p__overlapsSpatially(PART,OBJ2)
				)
			)
		)
	)
).


fof( mergeA2242, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				)
			)
			=>
			(
				( f__MereologicalSumFn2(OBJ1,f__MereologicalComplementFn1(OBJ1)) = f__MereologicalSumFn2(OBJ2,f__MereologicalComplementFn1(OBJ2)) )
			)
		)
	)
).


fof( mergeA2243, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				)
			)
			=>
			(
				( f__MereologicalProductFn2(OBJ1,f__MereologicalComplementFn1(OBJ1)) = f__MereologicalProductFn2(OBJ2,f__MereologicalComplementFn1(OBJ2)) )
			)
		)
	)
).


fof( mergeA2244, axiom,
	(![PART,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				)
			)
			=>
			(
				p__part(PART,f__MereologicalSumFn2(OBJ,f__MereologicalComplementFn1(OBJ)))
			)
		)
	)
).


fof( mergeA2245, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				)
			)
			=>
			(
				( f__MereologicalProductFn2(OBJ1,f__MereologicalComplementFn1(OBJ1)) = f__MereologicalComplementFn1(f__MereologicalSumFn2(OBJ2,f__MereologicalComplementFn1(OBJ2))) )
			)
		)
	)
).


fof( mergeA2246, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				)
			)
			=>
			(
				( f__MereologicalSumFn2(OBJ1,f__MereologicalComplementFn1(OBJ1)) = f__MereologicalComplementFn1(f__MereologicalProductFn2(OBJ2,f__MereologicalComplementFn1(OBJ2))) )
			)
		)
	)
).



% ($comment 
% ;; What follows is an alignment of the Casati and Varzi theory of 
% ;; holes with the SUMO.
% )

fof( mergeA2247, axiom,
	p__d__instance(c__hole,c__BinaryPredicate)
).


fof( mergeA2248, axiom,
	p__d__instance(c__hole,c__SpatialRelation)
).


fof( mergeA2249, axiom,
	p__d__instance(c__hole,c__AsymmetricRelation)
).


% 	($domain hole 1 Hole)

% 	($domain hole 2 SelfConnectedObject)


% ($documentation hole EnglishLanguage "(&%hole ?HOLE ?OBJ) means that ?HOLE is a 
% &%Hole in ?OBJ.  A &%Hole is a fillable body located at the 
% &%surface an &%Object.")


fof( mergeA2252, axiom,
	p__d__subclass(c__Hole,c__Region)
).



% ($documentation Hole EnglishLanguage "A hole is an immaterial body located at the surface 
% of an &%Object.  Since every &%Hole is ontologically dependent on its host 
% (i.e., the object in which it is a hole), being a &%Hole is defined as 
% being a &%hole in something.  Note that two &%Holes may occupy the same 
% region, or part of the same region, without sharing any parts.  Any two 
% hosts of a hole have a common proper part that entirely hosts the hole.  A 
% common host of two holes hosts all parts of the sum of those holes.  Any 
% object that includes the host of a hole is a host of that hole, unless its 
% parts also include parts of that very hole.  Overlapping holes have 
% overlapping hosts.  No hole is atomic.  Holes are connected with their 
% hosts.  No hole can have a proper part that is externally connected with 
% exactly the same things as the hole itself.") 


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of hole is already Hole (the reverse implication is a tautology)
% ;;
% ;;(<=> 
% ;;  ($instance ?HOLE Hole)
% ;;  (exists (?OBJ)
% ;;    (hole ?HOLE ?OBJ)))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA2253, axiom,
	(![HOLE]: 
		(
			(
				p__d__instance(HOLE,c__Hole)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__SelfConnectedObject)
							)
						 &
							(
								p__hole(HOLE,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2254, axiom,
	(![HOLE,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(HOLE,c__Hole)
					)
				 &
					(
						p__hole(HOLE,OBJ)
					)
				)
			)
			=>
			(
				~ (
					p__d__instance(OBJ,c__Hole)
				)
			)
		)
	)
).


fof( mergeA2255, axiom,
	(![HOLE,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(HOLE,c__Hole)
					)
				 &
					(
						p__hole(HOLE,OBJ)
					)
				)
			)
			=>
			(
				~ (
					p__overlapsSpatially(HOLE,OBJ)
				)
			)
		)
	)
).


fof( mergeA2256, axiom,
	(![OBJ1,OBJ2,HOLE]: 
		(
			(
				(
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(HOLE,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ2,c__SelfConnectedObject)
					)
				 &
					(
						p__hole(HOLE,OBJ1)
					)
				 &
					(
						p__hole(HOLE,OBJ2)
					)
				)
			)
			=>
			(
				(?[OBJ3]: 
					(
						(
							(
								p__d__instance(OBJ3,c__SelfConnectedObject)
							)
						 &
							(
								p__properPart(OBJ3,f__MereologicalProductFn2(OBJ1,OBJ2))
							)
						 &
							(
								p__hole(HOLE,OBJ3)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2257, axiom,
	(![HOLE1,HOLE2,OBJ,HOLE3]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(HOLE1,c__Hole)
					)
				 &
					(
						p__d__instance(HOLE2,c__Hole)
					)
				 &
					(
						p__hole(HOLE1,OBJ)
					)
				 &
					(
						p__hole(HOLE2,OBJ)
					)
				 &
					(
						p__d__instance(HOLE3,c__Hole)
					)
				 &
					(
						p__part(HOLE3,f__MereologicalSumFn2(HOLE1,HOLE2))
					)
				)
			)
			=>
			(
				p__hole(HOLE3,OBJ)
			)
		)
	)
).


fof( mergeA2258, axiom,
	(![OBJ1,HOLE,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(HOLE,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ2,c__SelfConnectedObject)
					)
				 &
					(
						p__hole(HOLE,OBJ1)
					)
				 &
					(
						p__part(OBJ1,OBJ2)
					)
				)
			)
			=>
			(
				(
					p__overlapsSpatially(HOLE,OBJ2)
				 |
					p__hole(HOLE,OBJ2)
				)
			)
		)
	)
).


fof( mergeA2259, axiom,
	(![HOLE1,HOLE2,OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(HOLE1,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(HOLE2,c__Hole)
					)
				 &
					(
						p__hole(HOLE1,OBJ1)
					)
				 &
					(
						p__hole(HOLE2,OBJ2)
					)
				 &
					(
						p__overlapsSpatially(HOLE1,HOLE2)
					)
				)
			)
			=>
			(
				p__overlapsSpatially(OBJ1,OBJ2)
			)
		)
	)
).


fof( mergeA2260, axiom,
	(![HOLE1]: 
		(
			(
				p__d__instance(HOLE1,c__Hole)
			)
			=>
			(
				(?[HOLE2]: 
					(
						(
							(
								p__d__instance(HOLE2,c__Object)
							)
						 &
							(
								p__properPart(HOLE2,HOLE1)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2261, axiom,
	p__d__instance(c__HoleHostFn,c__SpatialRelation)
).


fof( mergeA2262, axiom,
	p__d__instance(c__HoleHostFn,c__UnaryFunction)
).


fof( mergeA2263, axiom,
	p__d__instance(c__HoleHostFn,c__TotalValuedRelation)
).


fof( mergeA2264, axiom,
	p__d__instance(c__HoleHostFn,c__AsymmetricRelation)
).


% 	($domain HoleHostFn 1 Hole)

% 	($range HoleHostFn Object)


% ($documentation HoleHostFn EnglishLanguage "A &%UnaryFunction that maps a &%Hole to 
% the &%Object which is its principal host.  The principle host of a &%Hole 
% is its maximally connected host (a notion taken here to be defined only 
% when the argument is a hole).")


fof( mergeA2267, axiom,
	(![HOLE,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(HOLE,c__Hole)
					)
				 &
					(
						p__hole(HOLE,OBJ)
					)
				)
			)
			=>
			(
				p__connected(HOLE,OBJ)
			)
		)
	)
).


fof( mergeA2268, axiom,
	(![HOLE1,HOLE2]: 
		(
			(
				(
					(
						p__d__instance(HOLE2,c__Object)
					)
				 &
					(
						p__d__instance(HOLE1,c__Hole)
					)
				 &
					(
						p__properPart(HOLE2,HOLE1)
					)
				)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__Object)
							)
						 &
							(
								p__meetsSpatially(HOLE1,OBJ)
							)
						 &
							(
								~ (
									p__meetsSpatially(HOLE2,OBJ)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2269, axiom,
	p__d__instance(c__Fillable,c__ShapeAttribute)
).



% ($documentation Fillable EnglishLanguage "Something is &%Fillable if it can be filled by 
% something else.  Note that 'filled' here means perfectly filled.
% Something is fillable just in case it is part of a hole, i.e., 
% fillability is an exclusive property of holes and their parts.")


% 	(forall (?OBJ ?HOLE)
% 		(=> 
% 			(exists (?TIME)
% 				(holdsDuring ?TIME (fills ?OBJ ?HOLE))
% 			)
% 			(attribute ?HOLE Fillable)
% 		)
% 	)

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: If a hole H is non-fillable, then there does not exists any hole that is part of H. However, part is reflexive.
% ;;
% ;;(<=> 
% ;;  (attribute ?HOLE1 Fillable)
% ;;  (exists (?HOLE2)
% ;;    (and 
% ;;      ($instance ?HOLE2 Hole)
% ;;      (part ?HOLE1 ?HOLE2))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA2271, axiom,
	(![HOLE1]: 
		(
			(
				p__d__instance(HOLE1,c__Object)
			)
			=>
			(
				(
					p__attribute(HOLE1,c__Fillable)
				)
				<=>
				(
					(?[HOLE2]: 
						(
							(
								(
									p__d__instance(HOLE2,c__Hole)
								)
							 &
								(
									p__properPart(HOLE1,HOLE2)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2272, axiom,
	p__subrelation(c__partiallyFills,c__located)
).


fof( mergeA2273, axiom,
	p__d__instance(c__partiallyFills,c__SpatialRelation)
).


fof( mergeA2274, axiom,
	p__d__instance(c__partiallyFills,c__AsymmetricRelation)
).


% 	($domain partiallyFills 1 Object)

% 	($domain partiallyFills 2 Hole)


% ($documentation partiallyFills EnglishLanguage "(&%partiallyFills ?OBJ ?HOLE) means that 
% ?OBJ &%completelyFills some part of ?HOLE. Note that if (&%partiallyFills 
% ?OBJ1 ?HOLE) and (&%part ?OBJ1 ?OBJ2), then (&%partiallyFills ?OBJ2 ?HOLE). 
% Note too that a partial filler need not be wholly inside a hole (it may 
% stick out), which means that every complete filler also qualifies as 
% (is a limit case of) a partial one.")


fof( mergeA2277, axiom,
	(![HOLE1,OBJ]: 
		(
			(
				(
					(
						p__d__instance(HOLE1,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__partiallyFills(OBJ,HOLE1)
					)
				)
			)
			=>
			(
				(?[HOLE2]: 
					(
						(
							(
								p__d__instance(HOLE2,c__Hole)
							)
						 &
							(
								p__part(HOLE2,HOLE1)
							)
						 &
							(
								p__completelyFills(OBJ,HOLE2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2278, axiom,
	p__d__instance(c__properlyFills,c__AsymmetricRelation)
).


fof( mergeA2279, axiom,
	p__subrelation(c__properlyFills,c__partiallyFills)
).


% 	($domain properlyFills 1 Object)

% 	($domain properlyFills 2 Hole)


% ($documentation properlyFills EnglishLanguage "(&%properlyFills ?OBJ ?HOLE) 
% means that ?HOLE is properly (though perhaps incompletely) filled by 
% ?OBJ, i.e. some part of ?HOLE is perfectly filled by ?OBJ.  Note that 
% &%properlyFills is the dual of &%completelyFills, and is so 
% related to &%partiallyFills that ?OBJ &%properlyFills ?HOLE just in 
% case ?OBJ &%partiallyFills every part of ?HOLE.  (Thus, every perfect 
% filler is both complete and proper in this sense). 
% Every hole is connected with everything with which a proper filler 
% of the hole is connected. Every proper part of a perfect filler of (a part of) a hole properly 
% fills (that part of) that hole.")


fof( mergeA2282, axiom,
	(![HOLE1,OBJ]: 
		(
			(
				(
					(
						p__d__instance(HOLE1,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__properlyFills(OBJ,HOLE1)
					)
				)
			)
			=>
			(
				(?[HOLE2]: 
					(
						(
							(
								p__d__instance(HOLE2,c__Hole)
							)
						 &
							(
								p__part(HOLE2,HOLE1)
							)
						 &
							(
								p__fills(OBJ,HOLE2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2283, axiom,
	p__d__instance(c__completelyFills,c__AsymmetricRelation)
).


fof( mergeA2284, axiom,
	p__subrelation(c__completelyFills,c__partiallyFills)
).



% ($documentation completelyFills EnglishLanguage "(&%completelyFills ?OBJ ?HOLE) 
% means that some &%part of the &%Object ?OBJ fills the &%Hole ?HOLE.  
% Note that if (&%completelyFills ?OBJ1 ?HOLE) and (&%part 
% ?OBJ1 ?OBJ2), then (&%completelyFills ?OBJ2 ?HOLE). 
% A complete filler of (a part of) a hole is connected with everything 
% with which (that part of) the hole itself is connected. 
% A perfect filler of (a part of) a hole completely fills every proper 
% part of (that part of) that hole.")


fof( mergeA2285, axiom,
	(![OBJ1,HOLE]: 
		(
			(
				(
					(
						p__d__instance(HOLE,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__completelyFills(OBJ1,HOLE)
					)
				)
			)
			=>
			(
				(?[OBJ2]: 
					(
						(
							(
								p__d__instance(OBJ2,c__Object)
							)
						 &
							(
								p__part(OBJ2,OBJ1)
							)
						 &
							(
								p__fills(OBJ2,HOLE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2286, axiom,
	p__d__instance(c__fills,c__AsymmetricRelation)
).


fof( mergeA2287, axiom,
	p__subrelation(c__fills,c__completelyFills)
).


fof( mergeA2288, axiom,
	p__subrelation(c__fills,c__properlyFills)
).


% 	($domain fills 1 Object)

% 	($domain fills 2 Hole)

fof( mergeA2291, axiom,
	p__relatedInternalConcept(c__fills,c__Fillable)
).



% ($documentation fills EnglishLanguage "Holes can be filled.  (&%fills ?OBJ ?HOLE) 
% means that the &%Object ?OBJ fills the &%Hole ?HOLE.  Note that 
% &%fills here means perfectly filled. Perfect fillers and fillable entities have no parts in common (rather, 
% they may occupy the same spatial region).")


fof( mergeA2292, axiom,
	(![HOLE,OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(HOLE,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__fills(OBJ1,HOLE)
					)
				 &
					(
						p__attribute(OBJ2,c__Fillable)
					)
				)
			)
			=>
			(
				~ (
					p__overlapsSpatially(OBJ1,OBJ2)
				)
			)
		)
	)
).


fof( mergeA2293, axiom,
	(![HOLE,OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(HOLE,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__completelyFills(OBJ1,HOLE)
					)
				 &
					(
						p__connected(OBJ2,HOLE)
					)
				)
			)
			=>
			(
				p__connected(OBJ2,OBJ1)
			)
		)
	)
).


fof( mergeA2294, axiom,
	(![OBJ1,HOLE,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(HOLE,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__properlyFills(OBJ1,HOLE)
					)
				 &
					(
						p__connected(OBJ2,OBJ1)
					)
				)
			)
			=>
			(
				p__connected(HOLE,OBJ2)
			)
		)
	)
).


fof( mergeA2295, axiom,
	(![HOLE1,OBJ,HOLE2]: 
		(
			(
				(
					(
						p__d__instance(HOLE1,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(HOLE2,c__Hole)
					)
				 &
					(
						p__fills(OBJ,HOLE1)
					)
				 &
					(
						p__properPart(HOLE2,HOLE1)
					)
				)
			)
			=>
			(
				p__completelyFills(OBJ,HOLE2)
			)
		)
	)
).


fof( mergeA2296, axiom,
	(![OBJ1,OBJ2,HOLE]: 
		(
			(
				(
					(
						p__d__instance(HOLE,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__fills(OBJ1,HOLE)
					)
				 &
					(
						p__properPart(OBJ2,OBJ1)
					)
				)
			)
			=>
			(
				p__properlyFills(OBJ2,HOLE)
			)
		)
	)
).


fof( mergeA2297, axiom,
	p__d__instance(c__HoleSkinFn,c__SpatialRelation)
).


fof( mergeA2298, axiom,
	p__d__instance(c__HoleSkinFn,c__UnaryFunction)
).


fof( mergeA2299, axiom,
	p__d__instance(c__HoleSkinFn,c__TotalValuedRelation)
).


fof( mergeA2300, axiom,
	p__d__instance(c__HoleSkinFn,c__AsymmetricRelation)
).


% 	($domain HoleSkinFn 1 Hole)

% 	($range HoleSkinFn Object)


% ($documentation HoleSkinFn EnglishLanguage "A &%UnaryFunction that maps a &%Hole to the skin 
% of the &%Hole.  The skin of a &%Hole is the fusion of those superficial 
% parts (see &%superficialPart) of the &%Hole's principal host (see 
% &%HoleHostFn) with which the &%Hole is externally connected.")


fof( mergeA2303, axiom,
	(![OBJ1,HOLE,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(HOLE,c__Hole)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						( OBJ1 = f__HoleSkinFn1(HOLE) )
					)
				 &
					(
						p__d__instance(OBJ2,c__Object)
					)
				)
			)
			=>
			(
				(
					p__overlapsSpatially(OBJ2,OBJ1)
				)
				<=>
				(
					(?[OBJ3]: 
						(
							(
								(
									p__d__instance(OBJ3,c__Object)
								)
							 &
								(
									p__superficialPart(OBJ3,f__HoleHostFn1(HOLE))
								)
							 &
								(
									p__meetsSpatially(HOLE,OBJ3)
								)
							 &
								(
									p__overlapsSpatially(OBJ2,OBJ3)
								)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; END FILE
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;;;
% ;;    PROCESSES    ;;
% ;;;;;;;;;;;;;;;;;;;;;
% ;;
% ;; INCLUDES 'TEMPORAL CONCEPTS'
% ;; INCLUDES 'OBJECTS'
% ;; INCLUDES 'QUALITIES'
% )

fof( mergeA2304, axiom,
	p__d__instance(c__subProcess,c__BinaryPredicate)
).


fof( mergeA2305, axiom,
	p__d__instance(c__subProcess,c__PartialOrderingRelation)
).


% 	($domain subProcess 1 Process)

% 	($domain subProcess 2 Process)


% ($documentation subProcess EnglishLanguage "(&%subProcess ?SUBPROC ?PROC) means that ?SUBPROC 
% is a subprocess of ?PROC.  A subprocess is here understood as a temporally 
% distinguished part (proper or not) of a &%Process.")


fof( mergeA2308, axiom,
	(![SUBPROC,PROC]: 
		(
			(
				(
					(
						p__d__instance(PROC,c__Process)
					)
				 &
					(
						p__d__instance(SUBPROC,c__Process)
					)
				 &
					(
						p__subProcess(SUBPROC,PROC)
					)
				)
			)
			=>
			(
				p__temporalPart(f__WhenFn1(SUBPROC),f__WhenFn1(PROC))
			)
		)
	)
).


% ($comment 
% ;; NS: delete.  This rule is stated above with different (but
% ;; equivalent) antecedent order.
% ;; (=>
% ;;    (subProcess ?SUBPROC ?PROC)
% ;;    (forall (?REGION)
% ;;       (=>
% ;;          (located ?PROC ?REGION)
% ;;          (located ?SUBPROC ?REGION))))
% ;;
% ;; NS: delete.  Redundant ... we've already stated elsewhere that
% ;; every Physical exists at some time and at some location.
% ;; (=> 
% ;;   (and 
% ;;     ($instance ?PROC Process)
% ;;     (subProcess ?SUBPROC ?PROC))
% ;;   (exists (?TIME)
% ;;     (time ?SUBPROC ?TIME)))
% ;;
% ;; The following formulas cover the hierarchy of &%Classes under 
% ;; &%BiologicalProcess.
% )

fof( mergeA2309, axiom,
	p__d__subclass(c__BiologicalProcess,c__InternalChange)
).



% ($documentation BiologicalProcess EnglishLanguage "A &%Process embodied in an &%Organism.")


fof( mergeA2310, axiom,
	(![PROC]: 
		(
			(
				p__d__instance(PROC,c__BiologicalProcess)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__Organism)
							)
						 &
							(
								p__eventLocated(PROC,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2311, axiom,
	(![PROC,ORG]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__Agent)
					)
				 &
					(
						p__d__instance(PROC,c__BiologicalProcess)
					)
				 &
					(
						p__experiencer(PROC,ORG)
					)
				)
			)
			=>
			(
				p__d__instance(ORG,c__Organism)
			)
		)
	)
).


fof( mergeA2312, axiom,
	p__d__subclass(c__PhysiologicProcess,c__BiologicalProcess)
).



% ($documentation PhysiologicProcess EnglishLanguage "A normal process of an &%Organism 
% or part of an &%Organism.")


fof( mergeA2313, axiom,
	p__d__subclass(c__AutonomicProcess,c__PhysiologicProcess)
).


fof( mergeA2314, axiom,
	p__d__disjoint(c__AutonomicProcess,c__IntentionalProcess)
).



% ($documentation AutonomicProcess EnglishLanguage "The class of &%PhysiologicProcesses of 
% which there is not conscious awareness and control.")


fof( mergeA2315, axiom,
	p__d__subclass(c__OrganOrTissueProcess,c__AutonomicProcess)
).


fof( mergeA2316, axiom,
	p__d__disjoint(c__OrganOrTissueProcess,c__OrganismProcess)
).



% ($documentation OrganOrTissueProcess EnglishLanguage "A &%PhysiologicProcess of a 
% particular &%Organ or &%Tissue.")


fof( mergeA2317, axiom,
	(![PROC]: 
		(
			(
				p__d__instance(PROC,c__OrganOrTissueProcess)
			)
			=>
			(
				(?[THING]: 
					(
						(
							(
								p__d__instance(THING,c__Object)
							)
						 &
							(
								p__eventLocated(PROC,THING)
							)
						 &
							(
								(
									p__d__instance(THING,c__Organ)
								 |
									p__d__instance(THING,c__Tissue)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2318, axiom,
	p__d__subclass(c__OrganismProcess,c__PhysiologicProcess)
).



% ($documentation OrganismProcess EnglishLanguage "A physiologic function of the 
% &%Organism as a whole, of multiple organ systems or of multiple 
% &%Organs or &%Tissues.")


fof( mergeA2319, axiom,
	p__d__subclass(c__Birth,c__OrganismProcess)
).



% ($documentation Birth EnglishLanguage "The &%Process of being born.")


% ($comment 
% ;; NS: We need to provide more explanation of the intended meaning of
% ;;     &%Birth.
% )

fof( mergeA2320, axiom,
	(![BIRTH,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(BIRTH,c__Birth)
					)
				 &
					(
						p__experiencer(BIRTH,AGENT)
					)
				)
			)
			=>
			(
				(?[DEATH]: 
					(
						(
							(
								p__d__instance(DEATH,c__Death)
							)
						 &
							(
								p__experiencer(DEATH,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2321, axiom,
	p__d__subclass(c__Death,c__OrganismProcess)
).



% ($documentation Death EnglishLanguage "The &%Process of dying.")


% ($comment 
% ;; NS: delete.  Organisms cannot be Dead.
% ;; (=>
% ;;    (and
% ;;       ($instance ?DEATH Death)
% ;;       (experiencer ?DEATH ?AGENT))
% ;;    (holdsDuring (FutureFn (WhenFn ?DEATH)) (attribute ?AGENT Dead)))
% ;;
% ;; NS: add.  The result of an Organism's Death is a Dead
% ;; OrganicObject, the parts of which were parts of the Organism
% ;; immediately before its Death.  This rule should be considered true
% ;; only by default, since it is not really accurate for an organism
% ;; that dies, e.g., by being instantaneously vaporized.
% )

% 	(forall (?DEATH ?OBJ ?ORG)
% 		(=> 
% 			(and 
% 				($instance ?DEATH Death)
% 				($instance ?ORG Organism)
% 				(experiencer ?DEATH ?ORG)
% 			)
% 			(exists (?REM)
% 				(and 
% 					(result ?DEATH ?REM)
% 					($instance ?REM OrganicObject)
% 					(holdsDuring (FutureFn (WhenFn ?DEATH)) (attribute ?REM Dead))
% 					(=> 
% 						(holdsDuring (ImmediateFutureFn (WhenFn ?DEATH)) (part ?OBJ ?REM))
% 						(holdsDuring (ImmediatePastFn (WhenFn ?DEATH)) (part ?OBJ ?ORG))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2323, axiom,
	p__d__subclass(c__Breathing,c__OrganismProcess)
).


fof( mergeA2324, axiom,
	p__d__subclass(c__Breathing,c__AutonomicProcess)
).



% ($documentation Breathing EnglishLanguage "The &%Process of respiration, by which oxygen 
% is made available to an &%Animal.  This covers processes of inhalation, 
% exhalation, and alternations between the two.")


fof( mergeA2325, axiom,
	p__d__subclass(c__Ingesting,c__OrganismProcess)
).



% ($documentation Ingesting EnglishLanguage "The &%Process by which food is 
% taken into an &%Animal.")


% 	(forall (?ACT ?FOOD)
% 		(=> 
% 			(and 
% 				($instance ?ACT Ingesting)
% 				(resource ?ACT ?FOOD)
% 			)
% 			($instance ?FOOD (FoodForFn Organism))
% 		)
% 	)

fof( mergeA2327, axiom,
	p__d__subclass(c__Eating,c__Ingesting)
).



% ($documentation Eating EnglishLanguage "The &%Process by which solid food is 
% incorporated into an &%Animal.")


fof( mergeA2328, axiom,
	(![ACT,FOOD]: 
		(
			(
				(
					(
						p__d__instance(FOOD,c__Object)
					)
				 &
					(
						p__d__instance(ACT,c__Eating)
					)
				 &
					(
						p__resource(ACT,FOOD)
					)
				)
			)
			=>
			(
				p__attribute(FOOD,c__Solid)
			)
		)
	)
).


fof( mergeA2329, axiom,
	p__d__subclass(c__Drinking,c__Ingesting)
).



% ($documentation Drinking EnglishLanguage "The &%Process by which liquid food, i.e. 
% &%Beverages, are incorporated into an &%Animal.")


fof( mergeA2330, axiom,
	(![ACT,FOOD]: 
		(
			(
				(
					(
						p__d__instance(FOOD,c__Object)
					)
				 &
					(
						p__d__instance(ACT,c__Drinking)
					)
				 &
					(
						p__resource(ACT,FOOD)
					)
				)
			)
			=>
			(
				p__attribute(FOOD,c__Liquid)
			)
		)
	)
).


fof( mergeA2331, axiom,
	p__d__subclass(c__Digesting,c__OrganismProcess)
).


fof( mergeA2332, axiom,
	p__d__subclass(c__Digesting,c__AutonomicProcess)
).



% ($documentation Digesting EnglishLanguage "The &%Process by which &%Food that has been 
% ingested is broken down into simpler chemical compounds and absorbed by 
% the &%Organism.")


fof( mergeA2333, axiom,
	(![ORGANISM,DIGEST]: 
		(
			(
				(
					(
						p__d__instance(ORGANISM,c__Agent)
					)
				 &
					(
						p__d__instance(DIGEST,c__Digesting)
					)
				 &
					(
						p__agent(DIGEST,ORGANISM)
					)
				)
			)
			=>
			(
				(?[INGEST]: 
					(
						(
							(
								p__d__instance(INGEST,c__Ingesting)
							)
						 &
							(
								p__agent(INGEST,ORGANISM)
							)
						 &
							(
								p__overlapsTemporally(f__WhenFn1(INGEST),f__WhenFn1(DIGEST))
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2334, axiom,
	(![DIGEST]: 
		(
			(
				p__d__instance(DIGEST,c__Digesting)
			)
			=>
			(
				(?[DECOMP]: 
					(
						(
							(
								p__d__instance(DECOMP,c__ChemicalDecomposition)
							)
						 &
							(
								p__subProcess(DECOMP,DIGEST)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2335, axiom,
	p__d__subclass(c__Growth,c__AutonomicProcess)
).



% ($documentation Growth EnglishLanguage "The &%Process of biological development in which 
% an &%Organism or part of an &%Organism changes its form or its size.")


fof( mergeA2336, axiom,
	p__d__subclass(c__Replication,c__OrganismProcess)
).



% ($documentation Replication EnglishLanguage "The &%Process of biological reproduction.  
% This can be either a sexual or an asexual process.")


fof( mergeA2337, axiom,
	(![REP,CHILD,PARENT]: 
		(
			(
				(
					(
						p__d__instance(PARENT,c__Organism)
					)
				 &
					(
						p__d__instance(CHILD,c__Organism)
					)
				 &
					(
						p__d__instance(REP,c__Replication)
					)
				 &
					(
						p__agent(REP,PARENT)
					)
				 &
					(
						p__result(REP,CHILD)
					)
				)
			)
			=>
			(
				p__parent(CHILD,PARENT)
			)
		)
	)
).


fof( mergeA2338, axiom,
	(![REP]: 
		(
			(
				p__d__instance(REP,c__Replication)
			)
			=>
			(
				(?[BODY]: 
					(
						(
							(
								p__d__instance(BODY,c__ReproductiveBody)
							)
						 &
							(
								p__result(REP,BODY)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2339, axiom,
	p__d__subclass(c__SexualReproduction,c__Replication)
).


fof( mergeA2340, axiom,
	p__d__disjoint(c__SexualReproduction,c__AsexualReproduction)
).



% ($documentation SexualReproduction EnglishLanguage "Sexual &%Processes of biological 
% reproduction.")


fof( mergeA2341, axiom,
	(![REP,ORGANISM]: 
		(
			(
				(
					(
						p__d__instance(ORGANISM,c__Organism)
					)
				 &
					(
						p__d__instance(REP,c__SexualReproduction)
					)
				 &
					(
						p__result(REP,ORGANISM)
					)
				)
			)
			=>
			(
				(?[MOTHER,FATHER]: 
					(
						(
							(
								p__d__instance(MOTHER,c__Organism)
							)
						 &
							(
								p__d__instance(FATHER,c__Organism)
							)
						 &
							(
								p__mother(ORGANISM,MOTHER)
							)
						 &
							(
								p__father(ORGANISM,FATHER)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2342, axiom,
	p__d__subclass(c__AsexualReproduction,c__Replication)
).



% ($documentation AsexualReproduction EnglishLanguage "Asexual &%Processes of biological 
% reproduction.")


% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;    (and
% ;;       ($instance ?REP AsexualReproduction)
% ;;       (result ?REP ?ORGANISM)) 
% ;;    (not 
% ;;       (exists (?PARENT1 ?PARENT2)
% ;;          (and
% ;;             (parent ?ORGANISM ?PARENT1)
% ;;             (parent ?ORGANISM ?PARENT2)
% ;;             (not (equal ?PARENT1 ?PARENT2))))))
% ;;
% ;; NS: add.
% )

fof( mergeA2343, axiom,
	(![REP,ORGANISM,PARENT1,PARENT2]: 
		(
			(
				(
					(
						p__d__instance(ORGANISM,c__Organism)
					)
				 &
					(
						p__d__instance(PARENT1,c__Organism)
					)
				 &
					(
						p__d__instance(PARENT2,c__Organism)
					)
				 &
					(
						p__d__instance(REP,c__AsexualReproduction)
					)
				 &
					(
						p__result(REP,ORGANISM)
					)
				 &
					(
						p__parent(ORGANISM,PARENT1)
					)
				 &
					(
						p__parent(ORGANISM,PARENT2)
					)
				)
			)
			=>
			(
				( PARENT1 = PARENT2 )
			)
		)
	)
).


fof( mergeA2344, axiom,
	p__d__subclass(c__PsychologicalProcess,c__BiologicalProcess)
).



% ($documentation PsychologicalProcess EnglishLanguage "A &%BiologicalProcess which takes place in 
% the mind or brain of an &%Organism and which may be manifested in the behavior 
% of the &%Organism.")


fof( mergeA2345, axiom,
	(![PROCESS]: 
		(
			(
				p__d__instance(PROCESS,c__PsychologicalProcess)
			)
			=>
			(
				(?[ANIMAL]: 
					(
						(
							(
								p__d__instance(ANIMAL,c__Animal)
							)
						 &
							(
								p__experiencer(PROCESS,ANIMAL)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2346, axiom,
	p__d__subclass(c__PathologicProcess,c__BiologicalProcess)
).


fof( mergeA2347, axiom,
	p__d__disjoint(c__PathologicProcess,c__PhysiologicProcess)
).



% ($documentation PathologicProcess EnglishLanguage "A disordered process, activity, or 
% state of the &%Organism as a whole, of a body system or systems, or of 
% multiple &%Organs or &%Tissues. Included here are normal responses to a 
% negative stimulus as well as patholologic conditions or states that are 
% less specific than a disease. Pathologic functions frequently have 
% systemic effects.")


fof( mergeA2348, axiom,
	(![PATH,ORG]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__Agent)
					)
				 &
					(
						p__d__instance(PATH,c__PathologicProcess)
					)
				 &
					(
						p__experiencer(PATH,ORG)
					)
				)
			)
			=>
			(
				(?[PART,DISEASE]: 
					(
						(
							(
								p__d__instance(PART,c__Object)
							)
						 &
							(
								p__part(PART,ORG)
							)
						 &
							(
								p__d__instance(DISEASE,c__DiseaseOrSyndrome)
							)
						 &
							(
								p__attribute(PART,DISEASE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2349, axiom,
	p__d__subclass(c__Injuring,c__PathologicProcess)
).


fof( mergeA2350, axiom,
	p__d__subclass(c__Injuring,c__Damaging)
).



% ($documentation Injuring EnglishLanguage "The process of creating a traumatic wound or 
% injury.  Since &%Injuring is not possible without some biologic function 
% of the organism being injured, it is a subclass of &%BiologicalProcess.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: AnatomicalStructure and Organism are disjoint
% ;;	($partition OrganicObject @(Organism,AnatomicalStructure))
% ;;
% ;;(=>
% ;;    ($instance ?INJ Injuring)
% ;;    (exists (?STRUCT)
% ;;        (and
% ;;            ($instance ?STRUCT AnatomicalStructure)
% ;;            (patient ?INJ ?STRUCT))))
% )

fof( mergeA2351, axiom,
	(![INJ]: 
		(
			(
				p__d__instance(INJ,c__Process)
			)
			=>
			(
				(
					p__d__instance(INJ,c__Injuring)
				)
				<=>
				(
					(
						(
							p__d__instance(INJ,c__Damaging)
						)
					 &
						(
							(?[ORGANISM]: 
								(
									(
										(
											p__d__instance(ORGANISM,c__Organism)
										)
									 &
										(
											p__patient(INJ,ORGANISM)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2352, axiom,
	p__d__subclass(c__Poisoning,c__Injuring)
).



% ($documentation Poisoning EnglishLanguage "A &%Poisoning is caused by an external 
% substance.  Since &%Poisoning is not possible without some biologic 
% function which affects the &%Organism being injured, it is a subclass 
% of &%BiologicalProcess.")


fof( mergeA2353, axiom,
	(![POISON]: 
		(
			(
				p__d__instance(POISON,c__Poisoning)
			)
			=>
			(
				(?[THING]: 
					(
						(
							(
								p__patient(POISON,THING)
							)
						 &
							(
								(
									p__d__instance(THING,c__Organism)
								 |
									p__d__instance(THING,c__AnatomicalStructure)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2354, axiom,
	(![POISON]: 
		(
			(
				p__d__instance(POISON,c__Poisoning)
			)
			=>
			(
				(?[SUBSTANCE]: 
					(
						(
							(
								p__d__instance(SUBSTANCE,c__BiologicallyActiveSubstance)
							)
						 &
							(
								p__instrument(POISON,SUBSTANCE)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation NaturalProcess EnglishLanguage "A &%Process that take place in nature
% spontanously.")


fof( mergeA2355, axiom,
	p__d__subclass(c__NaturalProcess,c__Process)
).


fof( mergeA2356, axiom,
	p__d__disjoint(c__NaturalProcess,c__IntentionalProcess)
).


fof( mergeA2357, axiom,
	p__d__subclass(c__IntentionalProcess,c__Process)
).



% ($documentation IntentionalProcess EnglishLanguage "A &%Process that has a specific 
% purpose for the &%CognitiveAgent who performs it.") 


fof( mergeA2358, axiom,
	(![PROC,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(PROC,c__IntentionalProcess)
					)
				 &
					(
						p__agent(PROC,AGENT)
					)
				)
			)
			=>
			(
				(?[PURP]: 
					(
						(
							(
								p__d__instance(PURP,c__Formula)
							)
						 &
							(
								p__hasPurposeForAgent(PROC,PURP,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2359, axiom,
	(![PROC]: 
		(
			(
				p__d__instance(PROC,c__IntentionalProcess)
			)
			=>
			(
				(?[AGENT]: 
					(
						(
							(
								p__d__instance(AGENT,c__CognitiveAgent)
							)
						 &
							(
								p__agent(PROC,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?PROC ?HUMAN)
% 		(=> 
% 			(and 
% 				($instance ?PROC IntentionalProcess)
% 				(agent ?PROC ?HUMAN)
% 				($instance ?HUMAN Animal)
% 			)
% 			(holdsDuring (WhenFn ?PROC) (attribute ?HUMAN Awake))
% 		)
% 	)

fof( mergeA2361, axiom,
	p__d__subclass(c__IntentionalPsychologicalProcess,c__IntentionalProcess)
).


fof( mergeA2362, axiom,
	p__d__subclass(c__IntentionalPsychologicalProcess,c__PsychologicalProcess)
).



% ($documentation IntentionalPsychologicalProcess EnglishLanguage "An &%IntentionalProcess that 
% can be realized entirely within the mind or brain of an &%Organism.  Thus, 
% for example, &%Reasoning is a subclass of &%IntentionalPsychologicalProcess, 
% because one can reason simply by exercising one's mind/brain.  On the other 
% hand, &%RecreationOrExercise is not a subclass of &%IntentionalPsychologicalProcess,
% because many instances of &%RecreationOrExercise necessarily have &%subProcesses 
% of &%BodyMotion.")


fof( mergeA2363, axiom,
	p__d__subclass(c__RecreationOrExercise,c__IntentionalProcess)
).



% ($documentation RecreationOrExercise EnglishLanguage "A &%Process that is carried out for 
% the purpose of recreation or exercise.  Since &%RecreationOrExercise is a 
% subclass of &%IntentionalProcess, the intent of a process determines whether 
% or not it is an instance of the class.  Hence, if John and Bill watch the same 
% program on television, and John watches it to relax while Bill watches it solely 
% to satisfy an educational requirement, then John's watching the movie is an 
% instance of &%RecreationOrExercise, while Bill's is not (both cases of 
% watching the television program would however be in the class of &%Seeing, since 
% being an instance of this latter class is not determined by intention).")


fof( mergeA2364, axiom,
	p__d__subclass(c__OrganizationalProcess,c__IntentionalProcess)
).



% ($documentation OrganizationalProcess EnglishLanguage "An &%IntentionalProcess that 
% involves an &%Organization.")


fof( mergeA2365, axiom,
	(![ACT,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(AGENT,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(ACT,c__OrganizationalProcess)
					)
				 &
					(
						p__agent(ACT,AGENT)
					)
				)
			)
			=>
			(
				(
					p__d__instance(AGENT,c__Organization)
				 |
					(?[ORG]: 
						(
							(
								(
									p__d__instance(ORG,c__Organization)
								)
							 &
								(
									p__member(AGENT,ORG)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2366, axiom,
	p__d__subclass(c__Election,c__OrganizationalProcess)
).



% ($documentation Election EnglishLanguage "&%Election is the class of events conducted by an 
% organization, in which qualified participants vote for officers, adopt 
% resolutions, or settle other issues in that &%Organization.") 


fof( mergeA2367, axiom,
	p__d__subclass(c__ReligiousProcess,c__OrganizationalProcess)
).



% ($documentation ReligiousProcess EnglishLanguage "An
% &%OrganizationalProcess that is carried out within or by a
% &%ReligiousOrganization.")


fof( mergeA2368, axiom,
	(![ACT,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(AGENT,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(ACT,c__ReligiousProcess)
					)
				 &
					(
						p__agent(ACT,AGENT)
					)
				)
			)
			=>
			(
				(
					p__d__instance(AGENT,c__ReligiousOrganization)
				 |
					(?[ORG]: 
						(
							(
								(
									p__member(AGENT,ORG)
								)
							 &
								(
									p__d__instance(ORG,c__ReligiousOrganization)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2369, axiom,
	p__d__subclass(c__JoiningAnOrganization,c__OrganizationalProcess)
).



% ($documentation JoiningAnOrganization EnglishLanguage "The
% &%OrganizationalProcess of becoming a &%member of an &%Organization.")


% 	(forall (?JOIN ?PERSON ?ORG)
% 		(=> 
% 			(and 
% 				($instance ?JOIN JoiningAnOrganization)
% 				($instance ?ORG Organization)
% 				(agent ?JOIN ?PERSON)
% 				(patient ?JOIN ?ORG)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?JOIN)) (not (member ?PERSON ?ORG)))
% 				(holdsDuring (EndFn (WhenFn ?JOIN)) (member ?PERSON ?ORG))
% 			)
% 		)
% 	)

fof( mergeA2371, axiom,
	p__d__subclass(c__LeavingAnOrganization,c__OrganizationalProcess)
).


fof( mergeA2372, axiom,
	p__d__disjoint(c__LeavingAnOrganization,c__JoiningAnOrganization)
).



% ($documentation LeavingAnOrganization EnglishLanguage "The &%OrganizationalProcess of 
% leaving an &%Organization, whether voluntarily or involuntarily.")


% 	(forall (?LEAVE ?PERSON ?ORG)
% 		(=> 
% 			(and 
% 				($instance ?LEAVE LeavingAnOrganization)
% 				($instance ?ORG Organization)
% 				(agent ?LEAVE ?PERSON)
% 				(patient ?LEAVE ?ORG)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?LEAVE)) (member ?PERSON ?ORG))
% 				(holdsDuring (EndFn (WhenFn ?LEAVE)) (not (member ?PERSON ?ORG)))
% 			)
% 		)
% 	)

fof( mergeA2374, axiom,
	p__d__subclass(c__Graduation,c__LeavingAnOrganization)
).



% ($documentation Graduation EnglishLanguage "The &%OrganizationalProcess of graduating 
% from an &%EducationalOrganization.")


fof( mergeA2375, axiom,
	(![GRAD,ORG]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__Agent)
					)
				 &
					(
						p__d__instance(GRAD,c__Graduation)
					)
				 &
					(
						p__agent(GRAD,ORG)
					)
				)
			)
			=>
			(
				p__d__instance(ORG,c__EducationalOrganization)
			)
		)
	)
).


fof( mergeA2376, axiom,
	p__d__subclass(c__Matriculation,c__JoiningAnOrganization)
).



% ($documentation Matriculation EnglishLanguage "The &%OrganizationalProcess of joining an 
% &%EducationalOrganization as a student.")


fof( mergeA2377, axiom,
	(![MAT,ORG]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__Agent)
					)
				 &
					(
						p__d__instance(MAT,c__Matriculation)
					)
				 &
					(
						p__agent(MAT,ORG)
					)
				)
			)
			=>
			(
				p__d__instance(ORG,c__EducationalOrganization)
			)
		)
	)
).


fof( mergeA2378, axiom,
	p__d__subclass(c__Hiring,c__JoiningAnOrganization)
).



% ($documentation Hiring EnglishLanguage "&%OrganizationalProcesses where someone is made an 
% employee of an &%Organization.")


% 	(forall (?HIRE ?ORG ?PERSON)
% 		(=> 
% 			(and 
% 				($instance ?HIRE Hiring)
% 				($instance ?ORG Organization)
% 				(agent ?HIRE ?ORG)
% 				(patient ?HIRE ?PERSON)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?HIRE)) (not (employs ?ORG ?PERSON)))
% 				(holdsDuring (EndFn (WhenFn ?HIRE)) (employs ?ORG ?PERSON))
% 			)
% 		)
% 	)

fof( mergeA2380, axiom,
	p__d__subclass(c__TerminatingEmployment,c__LeavingAnOrganization)
).



% ($documentation TerminatingEmployment EnglishLanguage "&%OrganizationalProcesses where someone 
% ceases to be an employee of an &%Organization.  Note that this covers being 
% laid off, being fired, and voluntarily leaving a job.")


% 	(forall (?FIRE ?ORG ?PERSON)
% 		(=> 
% 			(and 
% 				($instance ?FIRE TerminatingEmployment)
% 				($instance ?ORG Organization)
% 				(agent ?FIRE ?ORG)
% 				(patient ?FIRE ?PERSON)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?FIRE)) (employs ?ORG ?PERSON))
% 				(holdsDuring (EndFn (WhenFn ?FIRE)) (not (employs ?ORG ?PERSON)))
% 			)
% 		)
% 	)

fof( mergeA2382, axiom,
	p__d__subclass(c__PoliticalProcess,c__OrganizationalProcess)
).



% ($documentation PoliticalProcess EnglishLanguage "An &%OrganizationalProcess carried 
% out by, for or against officially constituted governments.  Some examples 
% would be voting on proposed legislation, electing a government representative, 
% or even overthrowing a government in a revolution.") 


fof( mergeA2383, axiom,
	(![PROC]: 
		(
			(
				p__d__instance(PROC,c__PoliticalProcess)
			)
			=>
			(
				(?[POL]: 
					(
						(
							(
								p__d__instance(POL,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(POL,c__Agent)
							)
						 &
							(
								(
									p__d__instance(POL,c__Government)
								 |
									(?[GOV]: 
										(
											(
												(
													p__d__instance(GOV,c__Government)
												)
											 &
												(
													p__member(POL,GOV)
												)
											)
										)
									)
								)
							)
						 &
							(
								(
									p__agent(PROC,POL)
								 |
									p__patient(PROC,POL)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2384, axiom,
	p__d__subclass(c__JudicialProcess,c__PoliticalProcess)
).



% ($documentation JudicialProcess EnglishLanguage "Any legal proceeding which is conducted 
% by a &%JudicialOrganization.  Note that there is an important difference 
% between the concepts &%LegalAction and &%JudicialProcess.  The former 
% refers to legal claims that are brought by a plaintiff, e.g. law suits, 
% while the second refers to trials and other sorts of judicial hearings 
% where the merits of a &%LegalAction are decided.")


fof( mergeA2385, axiom,
	(![PROCESS,ORG]: 
		(
			(
				(
					(
						p__d__instance(PROCESS,c__JudicialProcess)
					)
				 &
					(
						p__agent(PROCESS,ORG)
					)
				 &
					(
						p__d__instance(ORG,c__Organization)
					)
				)
			)
			=>
			(
				p__d__instance(ORG,c__JudicialOrganization)
			)
		)
	)
).


fof( mergeA2386, axiom,
	p__d__subclass(c__LegalDecision,c__JudicialProcess)
).


fof( mergeA2387, axiom,
	p__d__subclass(c__LegalDecision,c__Declaring)
).



% ($documentation LegalDecision EnglishLanguage "A decision issued by a court with respect to 
% a &%LegalAction.  Note that a &%LegalDecision is the act of &%Declaring a 
% decision of a court, it is not the act of judge or jury &%Deciding the merits 
% of a particular &%LegalAction.")


fof( mergeA2388, axiom,
	(![DECISION]: 
		(
			(
				p__d__instance(DECISION,c__LegalDecision)
			)
			=>
			(
				(?[ACTION]: 
					(
						(
							(
								p__d__instance(ACTION,c__LegalAction)
							)
						 &
							(
								p__refers(DECISION,ACTION)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2389, axiom,
	(![DECISION]: 
		(
			(
				p__d__instance(DECISION,c__LegalDecision)
			)
			=>
			(
				(?[DECIDE]: 
					(
						(
							(
								p__d__instance(DECIDE,c__Deciding)
							)
						 &
							(
								p__earlier(f__WhenFn1(DECIDE),f__WhenFn1(DECISION))
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2390, axiom,
	p__d__subclass(c__MilitaryProcess,c__PoliticalProcess)
).


fof( mergeA2391, axiom,
	p__d__subclass(c__MilitaryProcess,c__OrganizationalProcess)
).



% ($documentation MilitaryProcess EnglishLanguage "Any &%Process that is carried out by a 
% military organization.  Note that this class covers &%Processes, e.g. 
% military operations, that are the result of careful planning, as well as 
% those which are unscripted.")


fof( mergeA2392, axiom,
	p__d__subclass(c__RegulatoryProcess,c__Guiding)
).



% ($documentation RegulatoryProcess EnglishLanguage "an &%Guiding whose aim is the enforcement 
% of rules or regulations.  Note the key differences between &%RegulatoryProcess 
% and the related concept &%Managing.  The latter implies a long-term relationship 
% between a single manager and limited number of agents who are managed, while the 
% former implies a normative standard to which the activities of the regulated are 
% referred.")


fof( mergeA2393, axiom,
	p__d__subclass(c__Managing,c__OrganizationalProcess)
).


fof( mergeA2394, axiom,
	p__d__subclass(c__Managing,c__Guiding)
).



% ($documentation Managing EnglishLanguage "&%OrganizationalProcesses that involve overseeing 
% the activities of others.  Note the key differences between &%RegulatoryProcess 
% and its sibling &%Managing.  The latter implies a long-term relationship between 
% the manager and the managed, while the former implies a normative standard to which 
% the activities of the regulated are referred.")


fof( mergeA2395, axiom,
	p__d__subclass(c__Planning,c__IntentionalPsychologicalProcess)
).



% ($documentation Planning EnglishLanguage "Specifying a set of actions in order to meet a 
% set of goals or objectives.")


fof( mergeA2396, axiom,
	(![EVENT,CBO]: 
		(
			(
				(
					(
						p__d__instance(EVENT,c__Planning)
					)
				 &
					(
						p__result(EVENT,CBO)
					)
				 &
					(
						p__d__instance(CBO,c__ContentBearingObject)
					)
				)
			)
			=>
			(
				(?[PLAN]: 
					(
						(
							(
								p__d__instance(PLAN,c__Plan)
							)
						 &
							(
								p__containsInformation(CBO,PLAN)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2397, axiom,
	p__d__subclass(c__Designing,c__IntentionalPsychologicalProcess)
).



% ($documentation Designing EnglishLanguage "The spatial analogue of &%Planning.  &%Designing a 
% &%Collection of &%Objects involves determining a placement of the &%Objects 
% with respect to one another and perhaps other &%Objects as well, in order to 
% satisfy a particular purpose.")


fof( mergeA2398, axiom,
	p__d__subclass(c__Interpreting,c__IntentionalPsychologicalProcess)
).



% ($documentation Interpreting EnglishLanguage "Any &%Process of assigning a &%Proposition to 
% a &%Text, i.e. understanding the &%Text.")


% 	(forall (?INTERPRET ?AGENT ?CONTENT)
% 		(=> 
% 			(and 
% 				($instance ?INTERPRET Interpreting)
% 				(agent ?INTERPRET ?AGENT)
% 				(patient ?INTERPRET ?CONTENT)
% 				($instance ?CONTENT ContentBearingObject)
% 			)
% 			(exists (?PROP)
% 				(holdsDuring (EndFn (WhenFn ?INTERPRET)) (believes ?AGENT (containsInformation ?CONTENT ?PROP)))
% 			)
% 		)
% 	)

fof( mergeA2400, axiom,
	p__d__subclass(c__QuantityChange,c__InternalChange)
).


fof( mergeA2401, axiom,
	p__d__partition3(c__QuantityChange,c__Increasing,c__Decreasing)
).



% ($documentation QuantityChange EnglishLanguage "Any &%InternalChange where a &%PhysicalQuantity 
% associated with the &%patient is altered.")


fof( mergeA2402, axiom,
	p__d__subclass(c__Increasing,c__QuantityChange)
).


% 	(relatedInternalConcept Increasing Putting)


% ($documentation Increasing EnglishLanguage "Any &%QuantityChange where the &%PhysicalQuantity 
% is increased.")


% 	(forall (?INCREASE ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?INCREASE Increasing)
% 				(patient ?INCREASE ?OBJ)
% 			)
% 			(exists (?UNIT ?QUANT1 ?QUANT2)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?INCREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
% 					(holdsDuring (EndFn (WhenFn ?INCREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
% 					(greaterThan ?QUANT2 ?QUANT1)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2405, axiom,
	p__d__subclass(c__Heating,c__Increasing)
).


fof( mergeA2406, axiom,
	p__d__disjoint(c__Heating,c__Cooling)
).



% ($documentation Heating EnglishLanguage "Any &%Increasing &%Process where the &%PhysicalQuantity 
% increased is a &%TemperatureMeasure.") 


% 	(forall (?HEAT ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?HEAT Heating)
% 				(patient ?HEAT ?OBJ)
% 			)
% 			(exists (?UNIT ?QUANT1 ?QUANT2)
% 				(and 
% 					($instance ?UNIT TemperatureMeasure)
% 					(holdsDuring (BeginFn (WhenFn ?HEAT)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
% 					(holdsDuring (EndFn (WhenFn ?HEAT)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
% 					(greaterThan ?QUANT2 ?QUANT1)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2408, axiom,
	p__d__subclass(c__Decreasing,c__QuantityChange)
).


% 	(relatedInternalConcept Decreasing Removing)


% ($documentation Decreasing EnglishLanguage "Any &%QuantityChange where the &%PhysicalQuantity 
% is decreased.")


% 	(forall (?DECREASE ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?DECREASE Decreasing)
% 				(patient ?DECREASE ?OBJ)
% 			)
% 			(exists (?UNIT ?QUANT1 ?QUANT2)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?DECREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
% 					(holdsDuring (EndFn (WhenFn ?DECREASE)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
% 					(lessThan ?QUANT2 ?QUANT1)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2411, axiom,
	p__d__subclass(c__Cooling,c__Decreasing)
).



% ($documentation Cooling EnglishLanguage "Any &%Decreasing &%Process where the &%PhysicalQuantity 
% decreased is a &%TemperatureMeasure.") 


% 	(forall (?COOL ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?COOL Cooling)
% 				(patient ?COOL ?OBJ)
% 			)
% 			(exists (?UNIT ?QUANT1 ?QUANT2)
% 				(and 
% 					($instance ?UNIT TemperatureMeasure)
% 					(holdsDuring (BeginFn (WhenFn ?COOL)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT1))
% 					(holdsDuring (EndFn (WhenFn ?COOL)) (equal (MeasureFn ?OBJ ?UNIT) ?QUANT2))
% 					(lessThan ?QUANT2 ?QUANT1)
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; NS: moved from Mid-level-ontology.kif
% )

fof( mergeA2413, axiom,
	p__d__instance(c__moves,c__CaseRole)
).


% 	($domain moves 1 Motion)

% 	($domain moves 2 Object)


% ($documentation moves EnglishLanguage "(&%moves ?MOTION ?OBJECT) means that during
% the &%Motion event ?MOTION, ?OBJECT moves.  This does not
% necessarily imply that the location of ?OBJECT changes during
% ?MOTION.  See also &%changesLocation and &%Translocation.")


fof( mergeA2416, axiom,
	p__subrelation(c__moves,c__involvedInEvent)
).


% ($comment 
% ;; NS: moved from Mid-level-ontology.kif
% )

fof( mergeA2417, axiom,
	p__d__instance(c__changesLocation,c__CaseRole)
).


% 	($domain changesLocation 1 Translocation)

% 	($domain changesLocation 2 Object)


% ($documentation changesLocation EnglishLanguage "(&%changesLocation ?EVENT
% ?OBJECT) means that during the &%Translocation event ?EVENT,
% ?OBJECT's location changes.  ?OBJECT might also be the &%agent,
% &%patient, or &%experiencer of ?EVENT.")


fof( mergeA2420, axiom,
	p__subrelation(c__changesLocation,c__moves)
).


% ($comment 
% ;; MS: added rule.
% )

fof( mergeA2421, axiom,
	(![EVENT,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Agent)
					)
				 &
					(
						p__d__instance(EVENT,c__Translocation)
					)
				 &
					(
						p__changesLocation(EVENT,OBJ)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(EVENT,c__Translocation)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						(
							p__patient(EVENT,OBJ)
						 |
							p__agent(EVENT,OBJ)
						 |
							p__experiencer(EVENT,OBJ)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2422, axiom,
	p__d__subclass(c__Motion,c__Process)
).



% ($documentation Motion EnglishLanguage "Any &%Process of movement.")


% ($comment 
% ;; NS: add.
% )

fof( mergeA2423, axiom,
	(![MOTION]: 
		(
			(
				p__d__instance(MOTION,c__Motion)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__Object)
							)
						 &
							(
								p__moves(MOTION,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NS: delete.  The imprecision of &%patient here will be a problem if
% ;; this rule is ever used in inference, given the number and variety
% ;; of subclasses of Motion.
% ;; (=>
% ;;    (and
% ;;       ($instance ?MOTION Motion)
% ;;       (patient ?MOTION ?OBJ)
% ;;       (origin ?MOTION ?PLACE))
% ;;    (holdsDuring (BeginFn (WhenFn ?MOTION)) (located ?OBJ ?PLACE)))
% ;;
% ;; NS: add.
% )

% 	(forall (?MOTION ?OBJ ?PLACE)
% 		(=> 
% 			(and 
% 				($instance ?MOTION Motion)
% 				(moves ?MOTION ?OBJ)
% 				(origin ?MOTION ?PLACE)
% 			)
% 			(holdsDuring (BeginFn (WhenFn ?MOTION)) (located ?OBJ ?PLACE))
% 		)
% 	)

% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;    (and
% ;;       ($instance ?MOTION Motion)
% ;;       (patient ?MOTION ?OBJ)
% ;;       (destination ?MOTION ?PLACE))
% ;;    (holdsDuring (EndFn (WhenFn ?MOTION)) (located ?OBJ ?PLACE)))
% ;;
% ;; NS: add.
% )

% 	(forall (?MOTION ?OBJ ?PLACE)
% 		(=> 
% 			(and 
% 				($instance ?MOTION Motion)
% 				(moves ?MOTION ?OBJ)
% 				(destination ?MOTION ?PLACE)
% 			)
% 			(holdsDuring (EndFn (WhenFn ?MOTION)) (located ?OBJ ?PLACE))
% 		)
% 	)

fof( mergeA2426, axiom,
	p__d__subclass(c__MotionUpward,c__Motion)
).


fof( mergeA2427, axiom,
	p__d__disjoint(c__MotionUpward,c__MotionDownward)
).



% ($documentation MotionUpward EnglishLanguage "&%Motion where an &%Object is moving away 
% from the ground.")


fof( mergeA2428, axiom,
	p__d__subclass(c__MotionDownward,c__Motion)
).



% ($documentation MotionDownward EnglishLanguage "&%Motion where an &%Object is moving toward the 
% ground.")


fof( mergeA2429, axiom,
	p__d__instance(c__path,c__CaseRole)
).


% ($comment 
% ;; KJN: Deleting this as it is redundant.
% ;;(subrelation path involvedInEvent)
% )

fof( mergeA2430, axiom,
	p__subrelation(c__path,c__eventPartlyLocated)
).


% 	($domain path 1 Motion)

% 	($domain path 2 Object)


% ($documentation path EnglishLanguage "(&%path ?MOTION ?PATH) means that ?PATH is a route 
% along which ?MOTION occurs.  For example, Highway 101 is the path in the 
% following proposition:  the car drove up Highway 101.")


fof( mergeA2433, axiom,
	(![PROCESS,MEASURE1,DISTANCE,PATH1,SOURCE,DEST,OBJ]: 
		(
			(
				(
					(
						p__d__instance(PATH1,c__Object)
					)
				 &
					(
						p__d__instance(PROCESS,c__Motion)
					)
				 &
					(
						p__d__instance(SOURCE,c__Object)
					)
				 &
					(
						p__d__instance(DEST,c__Object)
					)
				 &
					(
						p__d__instance(MEASURE1,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(DISTANCE,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__path(PROCESS,PATH1)
					)
				 &
					(
						p__origin(PROCESS,SOURCE)
					)
				 &
					(
						p__destination(PROCESS,DEST)
					)
				 &
					(
						p__length(PATH1,MEASURE1)
					)
				 &
					(
						p__distance(SOURCE,DEST,DISTANCE)
					)
				 &
					(
						~ (
							p__greaterThan(MEASURE1,DISTANCE)
						)
					)
				 &
					(
						p__part(OBJ,PATH1)
					)
				)
			)
			=>
			(
				p__between(SOURCE,OBJ,DEST)
			)
		)
	)
).


fof( mergeA2434, axiom,
	p__d__subclass(c__BodyMotion,c__Motion)
).



% ($documentation BodyMotion EnglishLanguage "Any &%Motion where the
% &%agent is an &%Organism and the &%patient is a &%BodyPart.")


% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;    ($instance ?MOTION BodyMotion)
% ;;    (exists (?OBJ ?AGENT)
% ;;       (and
% ;;          ($instance ?OBJ BodyPart)
% ;;          (patient ?MOTION ?OBJ)
% ;;          ($instance ?AGENT Organism)
% ;;          (agent ?MOTION ?AGENT))))
% ;;
% ;; NS: add.
% )

fof( mergeA2435, axiom,
	(![MOTION,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(MOTION,c__BodyMotion)
					)
				 &
					(
						p__moves(MOTION,OBJ)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(OBJ,c__BodyPart)
					)
				 &
					(
						p__patient(MOTION,OBJ)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NS: add.
% )

fof( mergeA2436, axiom,
	(![MOTION]: 
		(
			(
				p__d__instance(MOTION,c__BodyMotion)
			)
			=>
			(
				(?[AGENT]: 
					(
						(
							(
								p__d__instance(AGENT,c__Organism)
							)
						 &
							(
								p__agent(MOTION,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2437, axiom,
	p__d__subclass(c__VocalCords,c__Organ)
).



% ($documentation VocalCords EnglishLanguage "The vocal cords, are composed
% of two folds of mucous membrane stretched horizontally across the
% larynx. They vibrate, modulating the flow of air being expelled from the
% lungs during &%Vocalizing. ")


fof( mergeA2438, axiom,
	p__typicalPart(c__VocalCords,c__Human)
).


fof( mergeA2439, axiom,
	p__typicallyContainsPart(c__VocalCords,c__Human)
).


fof( mergeA2440, axiom,
	p__initialPart(c__VocalCords,c__Human)
).


% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;    ($instance ?VOCAL Vocalizing)
% ;;    (exists (?HUMAN)
% ;;       (and
% ;;          ($instance ?HUMAN Human)
% ;;          (agent ?VOCAL ?HUMAN)
% ;;          (instrument ?VOCAL ?HUMAN))))
% ;;
% ;; NS: add.  This probably is too restrictive, given that primates and
% ;; many other types of mammals, as well as birds, also vocalize.
% ;; Create VocalCord, and add the instrument part of the rule above, in
% ;; Mid-level-ontology.kif.
% )

fof( mergeA2441, axiom,
	p__d__subclass(c__Vocalizing,c__RadiatingSound)
).



% ($documentation Vocalizing EnglishLanguage "Any instance of &%RadiatingSound where
% the instrument is the vocal cord.  This covers grunts, screams, raors, as well as
% &%Speaking.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misplaced variables
% ;;
% ;;(=>
% ;;  ($instance ?VOCAL Vocalizing)
% ;;  (exists (?CORD ?ORGANISM)
% ;;    (and
% ;;      ($instance ?CORD VocalCords)
% ;;      (instrument ?VOCAL ?CORD)
% ;;      (part ?VOCAL ?ORGANISM)
% ;;      ($instance ?ORGANISM Organism))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA2442, axiom,
	(![VOCAL]: 
		(
			(
				p__d__instance(VOCAL,c__Vocalizing)
			)
			=>
			(
				(?[CORD,ORGANISM]: 
					(
						(
							(
								p__d__instance(CORD,c__VocalCords)
							)
						 &
							(
								p__instrument(VOCAL,CORD)
							)
						 &
							(
								p__part(CORD,ORGANISM)
							)
						 &
							(
								p__d__instance(ORGANISM,c__Organism)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2443, axiom,
	p__d__subclass(c__Speaking,c__LinguisticCommunication)
).


fof( mergeA2444, axiom,
	p__d__subclass(c__Speaking,c__Vocalizing)
).


% ($comment 
% ;; NS: delete.  &%LinguisticGeneration does not exist.  
% ;; (documentation Speaking EnglishLanguage "Any &%LinguisticGeneration
% ;; which is also a &%Vocalizing, i.e. any &%LinguisticCommunication by a
% ;; &%Human which involves his/her vocal cords.")
% ;;
% ;; NS: add.
% )


% ($documentation Speaking EnglishLanguage "Any &%LinguisticCommunication
% by a &%Human which involves his/her vocal cords.")


% ($comment 
% ;; KJN: Deleting. Fixed Music ontology and replacing it with concepts from that.
% ;;($subclass Singing Speaking)
% ;;($subclass Singing Music)
% ;;(documentation Singing EnglishLanguage "&%Speaking that is also &%Music.")
% )

fof( mergeA2445, axiom,
	p__d__subclass(c__Ambulating,c__BodyMotion)
).


fof( mergeA2446, axiom,
	p__d__subclass(c__Ambulating,c__Translocation)
).


fof( mergeA2447, axiom,
	p__d__partition3(c__Ambulating,c__Walking,c__Running)
).



% ($documentation Ambulating EnglishLanguage "Any &%BodyMotion which is accomplished by 
% means of the legs of an &%Animal for the purpose of moving from one 
% point to another.") 


fof( mergeA2448, axiom,
	p__d__subclass(c__Walking,c__Ambulating)
).



% ($documentation Walking EnglishLanguage "&%Ambulating relatively slowly, i.e. moving in such a 
% way that at least one foot is always in contact with the ground.")


fof( mergeA2449, axiom,
	p__d__subclass(c__Running,c__Ambulating)
).



% ($documentation Running EnglishLanguage "&%Ambulating relatively quickly, i.e. moving in such a 
% way that, with each step, neither foot is in contact with the ground for a 
% period of time.")


% 	(forall (?WALK ?RUN ?AGENT ?TIME ?LENGTH2 ?LENGTH1)
% 		(=> 
% 			(and 
% 				($instance ?WALK Walking)
% 				($instance ?RUN Running)
% 				(agent ?WALK ?AGENT)
% 				(agent ?RUN ?AGENT)
% 				(holdsDuring (WhenFn ?WALK) (measure ?AGENT (SpeedFn ?LENGTH1 ?TIME)))
% 				(holdsDuring (WhenFn ?RUN) (measure ?AGENT (SpeedFn ?LENGTH2 ?TIME)))
% 			)
% 			(greaterThan ?LENGTH2 ?LENGTH1)
% 		)
% 	)

fof( mergeA2451, axiom,
	p__d__subclass(c__Swimming,c__BodyMotion)
).



% ($documentation Swimming EnglishLanguage "Any deliberate and controlled &%BodyMotion 
% through water that is accomplished by an &%Organism.")


fof( mergeA2452, axiom,
	(![SWIM,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(SWIM,c__Swimming)
					)
				 &
					(
						p__agent(SWIM,AGENT)
					)
				)
			)
			=>
			(
				(?[AREA]: 
					(
						(
							(
								p__d__instance(AREA,c__WaterArea)
							)
						 &
							(
								p__located(AGENT,AREA)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2453, axiom,
	p__d__subclass(c__Dancing,c__BodyMotion)
).



% ($documentation Dancing EnglishLanguage "Any &%BodyMotion of &%Humans which is 
% deliberately coordinated with music.")


fof( mergeA2454, axiom,
	p__d__subclass(c__GeologicalProcess,c__Motion)
).


fof( mergeA2455, axiom,
	p__d__subclass(c__GeologicalProcess,c__InternalChange)
).


fof( mergeA2456, axiom,
	p__d__disjoint(c__GeologicalProcess,c__IntentionalProcess)
).



% ($documentation GeologicalProcess EnglishLanguage "The class of activities that 
% are caused by geological forces and affect geological features, 
% and which may affect the biosphere as well.")


fof( mergeA2457, axiom,
	p__d__subclass(c__WeatherProcess,c__Motion)
).


fof( mergeA2458, axiom,
	p__d__disjoint(c__WeatherProcess,c__IntentionalProcess)
).



% ($documentation WeatherProcess EnglishLanguage "&%WeatherProcess is the broadest class of 
% processes that involve weather, including weather seasons (not to be confused 
% with instances of &%SeasonOfYear), weather systems, and short-term weather 
% events.")


fof( mergeA2459, axiom,
	p__d__subclass(c__Precipitation,c__WeatherProcess)
).


fof( mergeA2460, axiom,
	p__d__subclass(c__Precipitation,c__WaterMotion)
).


fof( mergeA2461, axiom,
	p__d__subclass(c__Precipitation,c__Falling)
).



% ($documentation Precipitation EnglishLanguage "&%Precipitation is the process of 
% water molecules falling from the air to the ground, in either a 
% liquid or frozen state.")


fof( mergeA2462, axiom,
	(![PROCESS]: 
		(
			(
				p__d__instance(PROCESS,c__Precipitation)
			)
			=>
			(
				(?[STUFF]: 
					(
						(
							(
								p__d__instance(STUFF,c__Water)
							)
						 &
							(
								p__patient(PROCESS,STUFF)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2463, axiom,
	p__d__subclass(c__LiquidMotion,c__Motion)
).



% ($documentation LiquidMotion EnglishLanguage "Any &%Motion where the &%patient is a 
% &%Liquid.  This class would cover, in particular, the flow of 
% &%Water.")


fof( mergeA2464, axiom,
	(![MOTION,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(MOTION,c__LiquidMotion)
					)
				 &
					(
						p__patient(MOTION,OBJ)
					)
				)
			)
			=>
			(
				p__attribute(OBJ,c__Liquid)
			)
		)
	)
).


fof( mergeA2465, axiom,
	p__d__subclass(c__WaterMotion,c__LiquidMotion)
).



% ($documentation WaterMotion EnglishLanguage "Any &%LiquidMotion where the &%Liquid is &%Water.")


fof( mergeA2466, axiom,
	(![MOTION]: 
		(
			(
				p__d__instance(MOTION,c__WaterMotion)
			)
			=>
			(
				(?[WATER]: 
					(
						(
							(
								p__patient(MOTION,WATER)
							)
						 &
							(
								p__d__instance(WATER,c__Water)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2467, axiom,
	p__d__subclass(c__GasMotion,c__Motion)
).



% ($documentation GasMotion EnglishLanguage "Any &%Motion where the &%patient is a 
% &%Gas.  This class would cover, in particular, the motion of 
% &%Air, e.g. a breeze or wind.")


fof( mergeA2468, axiom,
	(![MOTION,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(MOTION,c__GasMotion)
					)
				 &
					(
						p__patient(MOTION,OBJ)
					)
				)
			)
			=>
			(
				p__attribute(OBJ,c__Gas)
			)
		)
	)
).


fof( mergeA2469, axiom,
	p__d__subclass(c__Wind,c__GasMotion)
).



% ($documentation Wind EnglishLanguage "Any &%Motion of &%Air.")


fof( mergeA2470, axiom,
	p__d__subclass(c__DirectionChange,c__Motion)
).



% ($documentation DirectionChange EnglishLanguage "The act of changing the direction in 
% which the &%patient of the act is oriented.")


% 	(forall (?PROC)
% 		(=> 
% 			($instance ?PROC DirectionChange)
% 			(exists (?ATTR)
% 				(and 
% 					($instance ?ATTR DirectionalAttribute)
% 					(or 
% 						(and 
% 							(holdsDuring (BeginFn (WhenFn ?PROC)) (manner ?PROC ?ATTR))
% 							(holdsDuring (EndFn (WhenFn ?PROC)) (not (manner ?PROC ?ATTR)))
% 						)
% 						(and 
% 							(holdsDuring (EndFn (WhenFn ?PROC)) (manner ?PROC ?ATTR))
% 							(holdsDuring (BeginFn (WhenFn ?PROC)) (not (manner ?PROC ?ATTR)))
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2472, axiom,
	p__d__subclass(c__Transfer,c__Translocation)
).



% ($documentation Transfer EnglishLanguage "Any &%instance of &%Translocation where the &%agent 
% and the &%patient are not the same thing.")


fof( mergeA2473, axiom,
	(![TRANSFER,AGENT,PATIENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(TRANSFER,c__Transfer)
					)
				 &
					(
						p__agent(TRANSFER,AGENT)
					)
				 &
					(
						p__patient(TRANSFER,PATIENT)
					)
				)
			)
			=>
			(
				~ (
					( AGENT = PATIENT )
				)
			)
		)
	)
).


fof( mergeA2474, axiom,
	(![D1,O1,D2,P,T1,T2]: 
		(
			(
				(
					(
						p__d__instance(O1,c__Object)
					)
				 &
					(
						p__d__instance(D1,c__Object)
					)
				 &
					(
						p__d__instance(P,c__Agent)
					)
				 &
					(
						p__d__instance(T1,c__Translocation)
					)
				 &
					(
						p__d__instance(T2,c__Translocation)
					)
				 &
					(
						p__origin(T1,O1)
					)
				 &
					(
						p__origin(T2,D1)
					)
				 &
					(
						p__destination(T1,D1)
					)
				 &
					(
						p__destination(T2,D2)
					)
				 &
					(
						p__experiencer(T1,P)
					)
				 &
					(
						p__experiencer(T2,P)
					)
				)
			)
			=>
			(
				(?[T]: 
					(
						(
							(
								p__d__instance(T,c__Translocation)
							)
						 &
							(
								p__origin(T,O1)
							)
						 &
							(
								p__destination(T,D2)
							)
						 &
							(
								p__subProcess(T1,T)
							)
						 &
							(
								p__subProcess(T2,T)
							)
						 &
							(
								p__experiencer(T,P)
							)
						 &
							(
								p__starts(f__WhenFn1(T1),f__WhenFn1(T))
							)
						 &
							(
								p__finishes(f__WhenFn1(T2),f__WhenFn1(T))
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2475, axiom,
	p__d__subclass(c__Carrying,c__Transfer)
).



% ($documentation Carrying EnglishLanguage "&%Transfer from one point to another by means of 
% an &%Animal or &%Human.")


fof( mergeA2476, axiom,
	(![CARRY]: 
		(
			(
				p__d__instance(CARRY,c__Carrying)
			)
			=>
			(
				(?[ANIMAL]: 
					(
						(
							(
								p__d__instance(ANIMAL,c__Animal)
							)
						 &
							(
								p__instrument(CARRY,ANIMAL)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2477, axiom,
	p__d__subclass(c__Removing,c__Transfer)
).



% ($documentation Removing EnglishLanguage "The &%Class of &%Processes where something is 
% taken away from a location.  Note that the thing removed and the location 
% are specified with the &%CaseRoles &%patient and &%origin, respectively.")


% 	(forall (?REMOVE ?OBJ ?PLACE)
% 		(=> 
% 			(and 
% 				($instance ?REMOVE Removing)
% 				(origin ?REMOVE ?PLACE)
% 				(patient ?REMOVE ?OBJ)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?REMOVE)) (located ?OBJ ?PLACE))
% 				(holdsDuring (EndFn (WhenFn ?REMOVE)) (not (located ?OBJ ?PLACE)))
% 			)
% 		)
% 	)

fof( mergeA2479, axiom,
	p__d__subclass(c__Uncovering,c__Removing)
).


fof( mergeA2480, axiom,
	p__d__disjoint(c__Uncovering,c__Covering)
).



% ($documentation Uncovering EnglishLanguage "The &%Class of &%Removing processes where the &%agent 
% uncovers the &%patient, either completely or only partially.") 


fof( mergeA2481, axiom,
	p__d__subclass(c__Putting,c__Transfer)
).



% ($documentation Putting EnglishLanguage "The &%Class of &%Processes where something is put 
% in a location.  Note that the location is specified with the &%CaseRole 
% &%destination.")


% 	(forall (?PUT ?OBJ ?PLACE)
% 		(=> 
% 			(and 
% 				($instance ?PUT Putting)
% 				(destination ?PUT ?PLACE)
% 				(patient ?PUT ?OBJ)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?PUT)) (not (located ?OBJ ?PLACE)))
% 				(holdsDuring (EndFn (WhenFn ?PUT)) (located ?OBJ ?PLACE))
% 			)
% 		)
% 	)

fof( mergeA2483, axiom,
	p__d__subclass(c__Covering,c__Putting)
).



% ($documentation Covering EnglishLanguage "The &%Class of &%Putting processes where the &%agent 
% covers the &%patient, either completely or only partially, with something 
% else.") 


fof( mergeA2484, axiom,
	p__d__subclass(c__Inserting,c__Putting)
).



% ($documentation Inserting EnglishLanguage "&%Putting one thing inside of another thing.")


% 	(forall (?INSERT ?OBJ2 ?OBJ1)
% 		(=> 
% 			(and 
% 				($instance ?INSERT Inserting)
% 				(patient ?INSERT ?OBJ1)
% 				(destination ?INSERT ?OBJ2)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?INSERT)) (not (contains ?OBJ2 ?OBJ1)))
% 				(holdsDuring (EndFn (WhenFn ?INSERT)) (contains ?OBJ2 ?OBJ1))
% 			)
% 		)
% 	)

fof( mergeA2486, axiom,
	p__d__subclass(c__Injecting,c__Inserting)
).



% ($documentation Injecting EnglishLanguage "&%Inserting a &%BiologicallyActiveSubstance into an 
% &%Animal or a &%Human with a syringe.")


fof( mergeA2487, axiom,
	(![INJECT]: 
		(
			(
				p__d__instance(INJECT,c__Injecting)
			)
			=>
			(
				(?[SUBSTANCE,ANIMAL]: 
					(
						(
							(
								p__patient(INJECT,SUBSTANCE)
							)
						 &
							(
								p__d__instance(SUBSTANCE,c__BiologicallyActiveSubstance)
							)
						 &
							(
								p__attribute(SUBSTANCE,c__Liquid)
							)
						 &
							(
								p__destination(INJECT,ANIMAL)
							)
						 &
							(
								p__d__instance(ANIMAL,c__Animal)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2488, axiom,
	p__d__subclass(c__Substituting,c__Transfer)
).


fof( mergeA2489, axiom,
	p__d__subclass(c__Substituting,c__DualObjectProcess)
).



% ($documentation Substituting EnglishLanguage "The &%Class of &%Transfers where one thing is 
% replaced with something else.")


fof( mergeA2490, axiom,
	(![SUB]: 
		(
			(
				p__d__instance(SUB,c__Substituting)
			)
			=>
			(
				(?[PUT,REMOVE,OBJ1,OBJ2,PLACE]: 
					(
						(
							(
								p__d__instance(PLACE,c__Object)
							)
						 &
							(
								p__d__instance(PUT,c__Putting)
							)
						 &
							(
								p__d__instance(REMOVE,c__Removing)
							)
						 &
							(
								p__subProcess(PUT,SUB)
							)
						 &
							(
								p__subProcess(REMOVE,SUB)
							)
						 &
							(
								p__patient(REMOVE,OBJ1)
							)
						 &
							(
								p__origin(REMOVE,PLACE)
							)
						 &
							(
								p__patient(PUT,OBJ2)
							)
						 &
							(
								p__destination(PUT,PLACE)
							)
						 &
							(
								~ (
									( OBJ1 = OBJ2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2491, axiom,
	p__d__subclass(c__Impelling,c__Transfer)
).



% ($documentation Impelling EnglishLanguage "The &%subclass of &%Transfer where the &%patient 
% travels through space by means of a sudden, forceful event.  Some examples 
% would be shooting, throwing, tossing, etc.")


fof( mergeA2492, axiom,
	p__d__subclass(c__Shooting,c__Impelling)
).



% ($documentation Shooting EnglishLanguage "The &%subclass of &%Impelling where the &%patient 
% is a projectile that is fired through the air by means of some sort of 
% &%Device.")


fof( mergeA2493, axiom,
	p__d__subclass(c__Touching,c__Transfer)
).



% ($documentation Touching EnglishLanguage "Any &%Transfer where two &%Objects are 
% brought into immediate physical contact with one another.")


% 	(forall (?TOUCH ?OBJ1 ?OBJ2)
% 		(=> 
% 			(and 
% 				($instance ?TOUCH Touching)
% 				(agent ?TOUCH ?OBJ1)
% 				(patient ?TOUCH ?OBJ2)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?TOUCH)) (not (connected ?OBJ1 ?OBJ2)))
% 				(holdsDuring (EndFn (WhenFn ?TOUCH)) (connected ?OBJ1 ?OBJ2))
% 			)
% 		)
% 	)

fof( mergeA2495, axiom,
	p__subrelation(c__grasps,c__meetsSpatially)
).


% 	($domain grasps 1 Animal)

% 	($domain grasps 2 Object)


% ($documentation grasps EnglishLanguage "The state of grasping an &%Object.  (&%grasps 
% ?ANIMAL ?OBJ) means that the &%Animal ?ANIMAL is intentionally holding 
% on to the &%Object ?OBJ.")


fof( mergeA2498, axiom,
	p__d__subclass(c__Grabbing,c__Touching)
).


fof( mergeA2499, axiom,
	p__d__subclass(c__Grabbing,c__Attaching)
).



% ($documentation Grabbing EnglishLanguage "Any instance of &%Touching which results in 
% a situation where the &%agent &%grasps the &%patient of the &%Touching.")


% 	(forall (?GRAB ?AGENT ?THING)
% 		(=> 
% 			(and 
% 				($instance ?GRAB Grabbing)
% 				(agent ?GRAB ?AGENT)
% 				(patient ?GRAB ?THING)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?GRAB)) (not (grasps ?AGENT ?THING)))
% 				(holdsDuring (EndFn (WhenFn ?GRAB)) (grasps ?AGENT ?THING))
% 			)
% 		)
% 	)

fof( mergeA2501, axiom,
	p__d__subclass(c__Releasing,c__Transfer)
).



% ($documentation Releasing EnglishLanguage "Any instance of &%Transfer which results in 
% a situation where it is not the case that the &%agent &%grasps something 
% which he/she &%grasps previously.")


% 	(forall (?GRAB ?RELEASE ?AGENT ?THING)
% 		(=> 
% 			(and 
% 				($instance ?RELEASE Releasing)
% 				(agent ?GRAB ?AGENT)
% 				(patient ?GRAB ?THING)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?RELEASE)) (grasps ?AGENT ?THING))
% 				(holdsDuring (EndFn (WhenFn ?RELEASE)) (not (grasps ?AGENT ?THING)))
% 			)
% 		)
% 	)

fof( mergeA2503, axiom,
	p__d__subclass(c__Impacting,c__Touching)
).



% ($documentation Impacting EnglishLanguage "Any &%Touching where something comes into 
% sudden, forceful, physical contact with something else.  Some examples 
% would be striking, knocking, whipping etc.")


fof( mergeA2504, axiom,
	(![OBJ,IMPACT]: 
		(
			(
				(
					(
						p__d__instance(IMPACT,c__Impacting)
					)
				 &
					(
						p__patient(IMPACT,OBJ)
					)
				)
			)
			=>
			(
				(?[IMPEL]: 
					(
						(
							(
								p__d__instance(IMPEL,c__Impelling)
							)
						 &
							(
								p__patient(IMPEL,OBJ)
							)
						 &
							(
								p__earlier(f__WhenFn1(IMPEL),f__WhenFn1(IMPACT))
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2505, axiom,
	p__d__subclass(c__Translocation,c__Motion)
).



% ($documentation Translocation EnglishLanguage "&%Translocation is that class of &%Motions 
% in which an object moves from one place to another.  In the case of round 
% trips, the &%origin and &%destination are the same, but the intervening 
% motion passes through other locations.  &%Translocation represents linear 
% motion, in contrast to rotation or other movement in place.  A vehicle is 
% not necessary, &%Ambulating is a kind of &%Translocation.")


fof( mergeA2506, axiom,
	(![PLACE1,MOVEMENT]: 
		(
			(
				(
					(
						p__d__instance(PLACE1,c__Object)
					)
				 &
					(
						p__d__instance(MOVEMENT,c__Translocation)
					)
				 &
					(
						p__origin(MOVEMENT,PLACE1)
					)
				)
			)
			=>
			(
				(?[PLACE2,STAGE]: 
					(
						(
							(
								p__d__instance(STAGE,c__Process)
							)
						 &
							(
								p__d__instance(PLACE2,c__Region)
							)
						 &
							(
								~ (
									( PLACE1 = PLACE2 )
								)
							)
						 &
							(
								p__subProcess(STAGE,MOVEMENT)
							)
						 &
							(
								p__located(STAGE,PLACE2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2507, axiom,
	(![T]: 
		(
			(
				p__d__instance(T,c__Translocation)
			)
			=>
			(
				(?[O,D,P]: 
					(
						(
							(
								p__d__instance(O,c__Object)
							)
						 &
							(
								p__d__instance(D,c__Object)
							)
						 &
							(
								p__d__instance(P,c__Object)
							)
						 &
							(
								p__path(T,P)
							)
						 &
							(
								p__origin(T,O)
							)
						 &
							(
								p__destination(T,D)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2508, axiom,
	p__d__subclass(c__Falling,c__Translocation)
).


fof( mergeA2509, axiom,
	p__d__subclass(c__Falling,c__MotionDownward)
).



% ($documentation Falling EnglishLanguage "&%Falling is the class of events in 
% which something moves from a higher location to a lower location 
% under the force of gravity.")


fof( mergeA2510, axiom,
	(![DROP,FINISH,START]: 
		(
			(
				(
					(
						p__d__instance(START,c__Object)
					)
				 &
					(
						p__d__instance(FINISH,c__Object)
					)
				 &
					(
						p__d__instance(DROP,c__Falling)
					)
				 &
					(
						p__origin(DROP,START)
					)
				 &
					(
						p__destination(DROP,FINISH)
					)
				)
			)
			=>
			(
				p__orientation(FINISH,START,c__Below)
			)
		)
	)
).


fof( mergeA2511, axiom,
	p__d__subclass(c__Transportation,c__Translocation)
).


% 	(relatedInternalConcept Transportation TransportationDevice)


% ($documentation Transportation EnglishLanguage "&%Motion from one point to another by means 
% of a &%TransportationDevice.")


fof( mergeA2513, axiom,
	(![TRANS]: 
		(
			(
				p__d__instance(TRANS,c__Transportation)
			)
			=>
			(
				(?[DEVICE]: 
					(
						(
							(
								p__d__instance(DEVICE,c__TransportationDevice)
							)
						 &
							(
								p__instrument(TRANS,DEVICE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2514, axiom,
	p__d__subclass(c__Guiding,c__IntentionalProcess)
).



% ($documentation Guiding EnglishLanguage "Any &%IntentionalProcess where the &%agent tries to 
% direct the behavior of another &%Object, whether an &%Agent or not.")


fof( mergeA2515, axiom,
	p__d__subclass(c__Driving,c__Guiding)
).



% ($documentation Driving EnglishLanguage "Controlling the direction and/or speed of a 
% &%Vehicle.  This includes navigating a ship, driving a car or truck, 
% operating a train, etc.")


fof( mergeA2516, axiom,
	(![DRIVE]: 
		(
			(
				p__d__instance(DRIVE,c__Driving)
			)
			=>
			(
				(?[VEHICLE]: 
					(
						(
							(
								p__d__instance(VEHICLE,c__Vehicle)
							)
						 &
							(
								p__patient(DRIVE,VEHICLE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2517, axiom,
	p__d__subclass(c__EducationalProcess,c__Guiding)
).



% ($documentation EducationalProcess EnglishLanguage "Any &%Process which is intended to result 
% in &%Learning.")


% 	(forall (?EDUCATION ?LEARN ?PERSON)
% 		(=> 
% 			(and 
% 				($instance ?EDUCATION EducationalProcess)
% 				(patient ?EDUCATION ?PERSON)
% 			)
% 			(hasPurpose ?EDUCATION (exists ([|] ?LEARN []) (and ([|] ($instance ?LEARN Learning) ([|] (patient ?LEARN ?PERSON) [])))))
% 		)
% 	)

fof( mergeA2519, axiom,
	p__d__subclass(c__ChangeOfPossession,c__SocialInteraction)
).


% 	(relatedInternalConcept ChangeOfPossession possesses)


% ($documentation ChangeOfPossession EnglishLanguage "The &%Class of &%Processes where 
% ownership of something is transferred from one &%Agent to another.")


% 	(forall (?CHANGE ?OBJ ?AGENT1 ?AGENT2)
% 		(=> 
% 			(and 
% 				($instance ?CHANGE ChangeOfPossession)
% 				(patient ?CHANGE ?OBJ)
% 				(holdsDuring (BeginFn (WhenFn ?CHANGE)) (possesses ?AGENT1 ?OBJ))
% 				(holdsDuring (EndFn (WhenFn ?CHANGE)) (possesses ?AGENT2 ?OBJ))
% 			)
% 			(not 
% 				(equal ?AGENT1 ?AGENT2)
% 			)
% 		)
% 	)

% 	(forall (?AGENT1 ?CHANGE ?AGENT2 ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?CHANGE ChangeOfPossession)
% 				(origin ?CHANGE ?AGENT1)
% 				(destination ?CHANGE ?AGENT2)
% 				($instance ?AGENT1 Agent)
% 				($instance ?AGENT2 Agent)
% 				(patient ?CHANGE ?OBJ)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?CHANGE)) (possesses ?AGENT1 ?OBJ))
% 				(holdsDuring (EndFn (WhenFn ?CHANGE)) (possesses ?AGENT2 ?OBJ))
% 			)
% 		)
% 	)

fof( mergeA2523, axiom,
	p__d__subclass(c__Giving,c__ChangeOfPossession)
).



% ($documentation Giving EnglishLanguage "The &%subclass of &%ChangeOfPossession where the 
% &%agent gives the &%destination something.")


fof( mergeA2524, axiom,
	(![GIVE,AGENT2,AGENT1,OBJ]: 
		(
			(
				(
					(
						p__d__instance(AGENT1,c__Agent)
					)
				 &
					(
						p__d__instance(GIVE,c__Giving)
					)
				 &
					(
						p__agent(GIVE,AGENT1)
					)
				 &
					(
						p__destination(GIVE,AGENT2)
					)
				 &
					(
						p__d__instance(AGENT2,c__Agent)
					)
				 &
					(
						p__patient(GIVE,OBJ)
					)
				)
			)
			=>
			(
				(?[GET]: 
					(
						(
							(
								p__d__instance(GET,c__Getting)
							)
						 &
							(
								p__agent(GET,AGENT2)
							)
						 &
							(
								p__origin(GET,AGENT1)
							)
						 &
							(
								p__patient(GET,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2525, axiom,
	(![GIVE,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(GIVE,c__Giving)
					)
				 &
					(
						p__agent(GIVE,AGENT)
					)
				)
			)
			=>
			(
				p__origin(GIVE,AGENT)
			)
		)
	)
).


fof( mergeA2526, axiom,
	p__d__subclass(c__Funding,c__Giving)
).



% ($documentation Funding EnglishLanguage "Any instance of &%Giving where the &%patient is an 
% instance of &%Currency.  Note that this class covers both financing, e.g. 
% where a firm funds a software company with venture capital with the agreement 
% that a certain percentage of the profits on the investment will be returned 
% to the firm, and instances of &%UnilateralGiving, e.g. providing a tuition 
% waiver and/or a stipend to a student as part of scholarship or fellowship.")


fof( mergeA2527, axiom,
	(![FUND]: 
		(
			(
				p__d__instance(FUND,c__Funding)
			)
			=>
			(
				(?[MONEY]: 
					(
						(
							(
								p__d__instance(MONEY,c__Currency)
							)
						 &
							(
								p__patient(FUND,MONEY)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2528, axiom,
	p__d__subclass(c__UnilateralGiving,c__Giving)
).



% ($documentation UnilateralGiving EnglishLanguage "Any instance of &%Giving that is not part 
% of a &%Transaction.  In other words, any instance of &%Giving where nothing 
% is received in return.  Some examples of &%UnilateralGiving are:  honorary 
% awards, gifts, and financial grants.")


fof( mergeA2529, axiom,
	(![GIVE]: 
		(
			(
				p__d__instance(GIVE,c__UnilateralGiving)
			)
			=>
			(
				(![TRANS]: 
					(
						(
							~ (
								p__d__instance(TRANS,c__Process)
							)
						 |
							~ (
								p__d__instance(TRANS,c__Transaction)
							)
						 |
							~ (
								p__subProcess(GIVE,TRANS)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2530, axiom,
	p__d__subclass(c__Lending,c__Giving)
).



% ($documentation Lending EnglishLanguage "The &%subclass of &%Giving &%Processes where 
% the &%agent gives the &%destination something for a limited period of 
% time with the expectation that it will be returned later (perhaps with 
% interest).")


fof( mergeA2531, axiom,
	(![AGENT2,AGENT1,OBJECT]: 
		(
			(
				(
					(
						p__d__instance(AGENT1,c__Agent)
					)
				 &
					(
						p__d__instance(AGENT2,c__Agent)
					)
				)
			)
			=>
			(
				(
					(?[BORROW]: 
						(
							(
								(
									p__d__instance(BORROW,c__Borrowing)
								)
							 &
								(
									p__agent(BORROW,AGENT1)
								)
							 &
								(
									p__origin(BORROW,AGENT2)
								)
							 &
								(
									p__patient(BORROW,OBJECT)
								)
							)
						)
					)
				)
				<=>
				(
					(?[LEND]: 
						(
							(
								(
									p__d__instance(LEND,c__Lending)
								)
							 &
								(
									p__agent(LEND,AGENT2)
								)
							 &
								(
									p__destination(LEND,AGENT1)
								)
							 &
								(
									p__patient(LEND,OBJECT)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2532, axiom,
	p__d__subclass(c__GivingBack,c__Giving)
).



% ($documentation GivingBack EnglishLanguage "Any instance of &%Giving where the &%agent gives 
% something to the &%destination which was previously given to the &%agent by 
% the &%destination, e.g. returing a book that was borrowed from someone.") 


fof( mergeA2533, axiom,
	(![DEST,AGENT,RETURN]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(DEST,c__Agent)
					)
				 &
					(
						p__d__instance(RETURN,c__GivingBack)
					)
				 &
					(
						p__agent(RETURN,AGENT)
					)
				 &
					(
						p__destination(RETURN,DEST)
					)
				)
			)
			=>
			(
				(?[GIVE]: 
					(
						(
							(
								p__d__instance(GIVE,c__Giving)
							)
						 &
							(
								p__agent(GIVE,DEST)
							)
						 &
							(
								p__destination(GIVE,AGENT)
							)
						 &
							(
								p__earlier(f__WhenFn1(GIVE),f__WhenFn1(RETURN))
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2534, axiom,
	p__d__subclass(c__Getting,c__ChangeOfPossession)
).



% ($documentation Getting EnglishLanguage "The &%subclass of &%ChangeOfPossession where the
% &%agent gets something.  Note that the source from which something is 
% obtained is specified with the &%origin &%CaseRole.")


fof( mergeA2535, axiom,
	(![GET,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(GET,c__Getting)
					)
				 &
					(
						p__agent(GET,AGENT)
					)
				)
			)
			=>
			(
				p__destination(GET,AGENT)
			)
		)
	)
).


fof( mergeA2536, axiom,
	p__d__subclass(c__UnilateralGetting,c__Getting)
).


% 	(relatedInternalConcept UnilateralGetting UnilateralGiving)


% ($documentation UnilateralGetting EnglishLanguage "Any instance of &%Getting that is not part 
% of a &%Transaction.  In other words, any instance of &%Getting where nothing 
% is given in return.  Some examples of &%UnilateralGetting are:  appropriating, 
% commandeering, stealing, etc.")


fof( mergeA2538, axiom,
	(![GET]: 
		(
			(
				p__d__instance(GET,c__UnilateralGetting)
			)
			=>
			(
				(![TRANS]: 
					(
						(
							~ (
								p__d__instance(TRANS,c__Process)
							)
						 |
							~ (
								p__d__instance(TRANS,c__Transaction)
							)
						 |
							~ (
								p__subProcess(GET,TRANS)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2539, axiom,
	p__d__subclass(c__Borrowing,c__Getting)
).



% ($documentation Borrowing EnglishLanguage "The &%subclass of &%Getting &%Processes where 
% the &%agent gets something for a limited period of time with the expectation 
% that it will be returned later (perhaps with interest).")


fof( mergeA2540, axiom,
	p__d__subclass(c__Transaction,c__ChangeOfPossession)
).


fof( mergeA2541, axiom,
	p__d__subclass(c__Transaction,c__DualObjectProcess)
).



% ($documentation Transaction EnglishLanguage "The &%subclass of &%ChangeOfPossession where 
% something is exchanged for something else.")


fof( mergeA2542, axiom,
	(![TRANS]: 
		(
			(
				p__d__instance(TRANS,c__Transaction)
			)
			=>
			(
				(?[AGENT1,AGENT2,GIVE1,GIVE2,OBJ1,OBJ2]: 
					(
						(
							(
								p__d__instance(AGENT1,c__Agent)
							)
						 &
							(
								p__d__instance(AGENT2,c__Agent)
							)
						 &
							(
								p__d__instance(GIVE1,c__Giving)
							)
						 &
							(
								p__d__instance(GIVE2,c__Giving)
							)
						 &
							(
								p__subProcess(GIVE1,TRANS)
							)
						 &
							(
								p__subProcess(GIVE2,TRANS)
							)
						 &
							(
								p__agent(GIVE1,AGENT1)
							)
						 &
							(
								p__agent(GIVE2,AGENT2)
							)
						 &
							(
								p__patient(GIVE1,OBJ1)
							)
						 &
							(
								p__patient(GIVE2,OBJ2)
							)
						 &
							(
								p__destination(GIVE1,AGENT2)
							)
						 &
							(
								p__destination(GIVE2,AGENT1)
							)
						 &
							(
								~ (
									( AGENT1 = AGENT2 )
								)
							)
						 &
							(
								~ (
									( OBJ1 = OBJ2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2543, axiom,
	p__d__subclass(c__FinancialTransaction,c__Transaction)
).



% ($documentation FinancialTransaction EnglishLanguage "A &%Transaction where an instance 
% of &%FinancialInstrument is the subject of the action, and often is exchanged for something else.")


fof( mergeA2544, axiom,
	(![TRANS]: 
		(
			(
				p__d__instance(TRANS,c__FinancialTransaction)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__patient(TRANS,OBJ)
							)
						 &
							(
								p__d__instance(OBJ,c__FinancialInstrument)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2545, axiom,
	p__d__instance(c__transactionAmount,c__BinaryPredicate)
).


fof( mergeA2546, axiom,
	p__d__instance(c__transactionAmount,c__SingleValuedRelation)
).


fof( mergeA2547, axiom,
	p__d__instance(c__transactionAmount,c__TotalValuedRelation)
).


% 	($domain transactionAmount 1 FinancialTransaction)

% 	($domain transactionAmount 2 CurrencyMeasure)


% ($documentation transactionAmount EnglishLanguage "(&%transactionAmount ?TRANSACTION 
% ?AMOUNT) means that ?AMOUNT is an instance of &%CurrencyMeasure being 
% exhanged in the &%FinancialTransaction ?TRANSACTION.") 


fof( mergeA2550, axiom,
	(![TRANS,AMOUNT]: 
		(
			(
				(
					(
						p__d__instance(AMOUNT,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(TRANS,c__FinancialTransaction)
					)
				 &
					(
						p__transactionAmount(TRANS,AMOUNT)
					)
				)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__Physical)
							)
						 &
							(
								p__patient(TRANS,OBJ)
							)
						 &
							(
								p__monetaryValue(OBJ,AMOUNT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2551, axiom,
	p__d__subclass(c__ServiceProcess,c__SocialInteraction)
).



% ($documentation ServiceProcess EnglishLanguage "&%ServiceProcess denotes the class
% of events in which one agent performs a service for another.  The
% service need not be commercial, and it need not be the case that
% the &%serviceRecipient pays or recompenses the &%serviceProvider
% for the service.")


fof( mergeA2552, axiom,
	p__d__subclass(c__CommercialService,c__FinancialTransaction)
).



% ($documentation CommercialService EnglishLanguage "Any &%FinancialTransaction by a 
% &%CommercialAgent where the aim is to produce a profit.")


fof( mergeA2553, axiom,
	p__d__subclass(c__CommercialService,c__ServiceProcess)
).


fof( mergeA2554, axiom,
	(![BUSINESS]: 
		(
			(
				p__d__instance(BUSINESS,c__CommercialService)
			)
			=>
			(
				(?[AGENT]: 
					(
						(
							(
								p__d__instance(AGENT,c__CommercialAgent)
							)
						 &
							(
								p__agent(BUSINESS,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2555, axiom,
	p__d__subclass(c__Betting,c__FinancialTransaction)
).



% ($documentation Betting EnglishLanguage "A &%FinancialTransaction where an instance of 
% &%CurrencyMeasure is exchanged for the possibility of winning a larger 
% instance of &%CurrencyMeasure within the context of some sort of 
% &%Game.")


fof( mergeA2556, axiom,
	p__d__subclass(c__Buying,c__FinancialTransaction)
).


% 	(relatedInternalConcept Buying Selling)


% ($documentation Buying EnglishLanguage "A &%FinancialTransaction in which an instance of 
% &%CurrencyMeasure is exchanged for an instance of &%Physical.")


fof( mergeA2558, axiom,
	(![BUY,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(BUY,c__Buying)
					)
				 &
					(
						p__agent(BUY,AGENT)
					)
				)
			)
			=>
			(
				p__destination(BUY,AGENT)
			)
		)
	)
).


fof( mergeA2559, axiom,
	p__d__subclass(c__Selling,c__FinancialTransaction)
).



% ($documentation Selling EnglishLanguage "A &%FinancialTransaction in which an instance of 
% &%Physical is exchanged for an instance of &%CurrencyMeasure.")


fof( mergeA2560, axiom,
	(![AGENT2,AGENT1,OBJECT]: 
		(
			(
				(
					(
						p__d__instance(AGENT1,c__Agent)
					)
				 &
					(
						p__d__instance(AGENT2,c__Agent)
					)
				)
			)
			=>
			(
				(
					(?[BUY]: 
						(
							(
								(
									p__d__instance(BUY,c__Buying)
								)
							 &
								(
									p__agent(BUY,AGENT1)
								)
							 &
								(
									p__origin(BUY,AGENT2)
								)
							 &
								(
									p__patient(BUY,OBJECT)
								)
							)
						)
					)
				)
				<=>
				(
					(?[SELL]: 
						(
							(
								(
									p__d__instance(SELL,c__Selling)
								)
							 &
								(
									p__agent(SELL,AGENT2)
								)
							 &
								(
									p__destination(SELL,AGENT1)
								)
							 &
								(
									p__patient(SELL,OBJECT)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2561, axiom,
	(![SELL,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(SELL,c__Selling)
					)
				 &
					(
						p__agent(SELL,AGENT)
					)
				)
			)
			=>
			(
				p__origin(SELL,AGENT)
			)
		)
	)
).


fof( mergeA2562, axiom,
	p__d__subclass(c__Learning,c__IntentionalPsychologicalProcess)
).



% ($documentation Learning EnglishLanguage "The &%Class of &%Processes which relate to the 
% acquisition of information.")


fof( mergeA2563, axiom,
	(![LEARN,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(LEARN,c__Learning)
					)
				 &
					(
						p__agent(LEARN,AGENT)
					)
				)
			)
			=>
			(
				p__d__instance(AGENT,c__CognitiveAgent)
			)
		)
	)
).


% 	(forall (?LEARN ?AGENT ?PROP)
% 		(=> 
% 			(and 
% 				($instance ?LEARN Learning)
% 				(agent ?LEARN ?AGENT)
% 				(patient ?LEARN ?PROP)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?LEARN)) (not (knows ?AGENT ?PROP)))
% 				(holdsDuring (EndFn (WhenFn ?LEARN)) (knows ?AGENT ?PROP))
% 			)
% 		)
% 	)

fof( mergeA2565, axiom,
	p__d__subclass(c__Discovering,c__IntentionalPsychologicalProcess)
).



% ($documentation Discovering EnglishLanguage "Finding something that was sought.  Note that 
% this class is restricted to cases of discovering something &%Physical.  
% For cases involving the acquisition of knowledge, the class &%Learning 
% should be used.")


fof( mergeA2566, axiom,
	(![OBJ,DISCOVER]: 
		(
			(
				(
					(
						p__d__instance(DISCOVER,c__Discovering)
					)
				 &
					(
						p__patient(DISCOVER,OBJ)
					)
				)
			)
			=>
			(
				(?[PURSUE]: 
					(
						(
							(
								p__d__instance(PURSUE,c__Pursuing)
							)
						 &
							(
								p__meetsTemporally(f__WhenFn1(PURSUE),f__WhenFn1(DISCOVER))
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?DISCOVER ?OBJ ?PLACE)
% 		(=> 
% 			(and 
% 				($instance ?DISCOVER Discovering)
% 				(patient ?DISCOVER ?OBJ)
% 				(holdsDuring (WhenFn ?DISCOVER) (located ?OBJ ?PLACE))
% 			)
% 			(exists (?LEARN)
% 				(and 
% 					($instance ?LEARN Learning)
% 					(subProcess ?LEARN ?DISCOVER)
% 					(patient ?LEARN (located ?OBJ ?PLACE))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2568, axiom,
	p__d__subclass(c__Classifying,c__IntentionalPsychologicalProcess)
).



% ($documentation Classifying EnglishLanguage "The &%Class of &%IntentionalPsychologicalProcesses 
% which involve attaching a name or category to a thing or set of things.  
% Note that &%Classifying is distinguished from &%Learning by the fact 
% that the latter covers the acquisition by a &%CognitiveAgent of any 
% &%Proposition, while the former involves the assignment of a label 
% or category.")


fof( mergeA2569, axiom,
	p__d__subclass(c__Reasoning,c__IntentionalPsychologicalProcess)
).



% ($documentation Reasoning EnglishLanguage "The &%Class of &%IntentionalPsychologicalProcesses 
% which involve concluding, on the basis of either deductive or inductive 
% evidence, that a particular &%Proposition or &%Sentence is true.")


fof( mergeA2570, axiom,
	(![AGENT]: 
		(
			(
				p__d__instance(AGENT,c__CognitiveAgent)
			)
			=>
			(
				p__capability(c__Reasoning,c__agent,AGENT)
			)
		)
	)
).


fof( mergeA2571, axiom,
	p__d__subclass(c__Selecting,c__IntentionalPsychologicalProcess)
).



% ($documentation Selecting EnglishLanguage "The &%Class of &%IntentionalPsychologicalProcesses 
% which involve opting for one or more &%Entity out of a larger set of &%Entities.  
% Note that this covers all cases of judging or evaluating.")


fof( mergeA2572, axiom,
	p__d__subclass(c__Deciding,c__Selecting)
).



% ($documentation Deciding EnglishLanguage "The subclass of &%Selecting where the &%agent 
% opts for one course of action out of a set of multiple possibilities 
% that are open to him/her.")


fof( mergeA2573, axiom,
	(![DECIDE,PROCESS,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(PROCESS,c__Process)
					)
				 &
					(
						p__d__instance(DECIDE,c__Deciding)
					)
				 &
					(
						p__agent(DECIDE,AGENT)
					)
				 &
					(
						p__patient(DECIDE,PROCESS)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(PROCESS,c__IntentionalProcess)
					)
				 &
					(
						p__agent(PROCESS,AGENT)
					)
				)
			)
		)
	)
).


fof( mergeA2574, axiom,
	p__d__subclass(c__Voting,c__Deciding)
).



% ($documentation Voting EnglishLanguage "&%Voting is the activity of voting in an 
% &%Election.  Voting is typically done by individuals, while &%Elections 
% are conducted by &%Organizations.  The voting process by an individual 
% voter is part of an &%Election process.") 


fof( mergeA2575, axiom,
	(![VOTE]: 
		(
			(
				p__d__instance(VOTE,c__Voting)
			)
			=>
			(
				(?[ELECT]: 
					(
						(
							(
								p__d__instance(ELECT,c__Election)
							)
						 &
							(
								p__subProcess(VOTE,ELECT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2576, axiom,
	p__d__subclass(c__Judging,c__Selecting)
).



% ($documentation Judging EnglishLanguage "The subclass of &%Selecting where the &%agent opts 
% for one belief out of a set of multiple possibilities that are available to 
% him/her.")


% 	(forall (?JUDGE ?AGENT ?PROPOSITION)
% 		(=> 
% 			(and 
% 				($instance ?JUDGE Judging)
% 				(agent ?JUDGE ?AGENT)
% 				(patient ?JUDGE ?PROPOSITION)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?JUDGE)) (not (believes ?AGENT ?PROPOSITION)))
% 				(holdsDuring (EndFn (WhenFn ?JUDGE)) (believes ?AGENT ?PROPOSITION))
% 			)
% 		)
% 	)

fof( mergeA2578, axiom,
	p__d__subclass(c__Comparing,c__IntentionalPsychologicalProcess)
).


fof( mergeA2579, axiom,
	p__d__subclass(c__Comparing,c__DualObjectProcess)
).



% ($documentation Comparing EnglishLanguage "The &%Class of &%IntentionalPsychologicalProcesses 
% which involve comparing, relating, contrasting, etc. the properties of 
% two or more &%Entities.")


fof( mergeA2580, axiom,
	p__d__subclass(c__Calculating,c__IntentionalPsychologicalProcess)
).



% ($documentation Calculating EnglishLanguage "&%IntentionalPsychologicalProcesses which involve 
% the consideration and/or manipulation of instances of &%Quantity.")


fof( mergeA2581, axiom,
	p__d__subclass(c__Measuring,c__Calculating)
).



% ($documentation Measuring EnglishLanguage "The &%Class of &%Calculating &%Processes where 
% the aim is to determine the &%PhysicalQuantity of some aspect of the &%patient.")


% 	(forall (?MEAS ?AGENT ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?MEAS Measuring)
% 				(agent ?MEAS ?AGENT)
% 				(patient ?MEAS ?OBJ)
% 			)
% 			(exists (?QUANT ?UNIT)
% 				(holdsDuring (EndFn (WhenFn ?MEAS)) (knows ?AGENT (measure ?OBJ (MeasureFn ?QUANT ?UNIT))))
% 			)
% 		)
% 	)

fof( mergeA2583, axiom,
	p__d__subclass(c__Counting,c__Calculating)
).



% ($documentation Counting EnglishLanguage "Enumerating something.  The &%Class of &%Calculating 
% &%Processes where the aim is to determine the &%Number corresponding to the 
% &%patient.") 


% 	(forall (?COUNT ?AGENT ?ENTITY)
% 		(=> 
% 			(and 
% 				($instance ?COUNT Counting)
% 				(agent ?COUNT ?AGENT)
% 				(patient ?COUNT ?ENTITY)
% 			)
% 			(exists (?NUMBER)
% 				(knows ?AGENT (equal (CardinalityFn ?ENTITY) ?NUMBER))
% 			)
% 		)
% 	)

fof( mergeA2585, axiom,
	p__d__subclass(c__Predicting,c__IntentionalPsychologicalProcess)
).



% ($documentation Predicting EnglishLanguage "The &%Class of &%IntentionalPsychologicalProcesses 
% which involve the formulation of a &%Proposition about a state of affairs 
% which might be realized in the future.")


% 	(forall (?FORMULA ?PREDICT)
% 		(=> 
% 			(and 
% 				($instance ?PREDICT Predicting)
% 				(patient ?PREDICT ?FORMULA)
% 			)
% 			(exists (?TIME)
% 				(and 
% 					(holdsDuring ?TIME ?FORMULA)
% 					(or 
% 						(before ?TIME (WhenFn ?PREDICT))
% 						(earlier ?TIME (WhenFn ?PREDICT))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2587, axiom,
	p__d__subclass(c__Remembering,c__PsychologicalProcess)
).



% ($documentation Remembering EnglishLanguage "The &%Class of &%PsychologicalProcesses which 
% involve the recollection of prior experiences and/or of knowledge 
% which was previously acquired.")


% 	(forall (?FORMULA ?REMEMBER)
% 		(=> 
% 			(and 
% 				($instance ?REMEMBER Remembering)
% 				(patient ?REMEMBER ?FORMULA)
% 			)
% 			(exists (?TIME)
% 				(and 
% 					(holdsDuring ?TIME ?FORMULA)
% 					(or 
% 						(before ?TIME (WhenFn ?REMEMBER))
% 						(earlier ?TIME (WhenFn ?REMEMBER))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2589, axiom,
	p__d__subclass(c__Keeping,c__IntentionalProcess)
).



% ($documentation Keeping EnglishLanguage "The &%Class of &%Processes where the &%agent 
% keeps something in a particular location for an extended period of time.")


fof( mergeA2590, axiom,
	(![AGENT,OBJ,KEEP]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(KEEP,c__Keeping)
					)
				 &
					(
						p__agent(KEEP,AGENT)
					)
				 &
					(
						p__patient(KEEP,OBJ)
					)
				)
			)
			=>
			(
				(?[PUT]: 
					(
						(
							(
								p__d__instance(PUT,c__Putting)
							)
						 &
							(
								p__agent(PUT,AGENT)
							)
						 &
							(
								p__patient(PUT,OBJ)
							)
						 &
							(
								p__earlier(f__WhenFn1(PUT),f__WhenFn1(KEEP))
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?KEEP ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?KEEP Keeping)
% 				(patient ?KEEP ?OBJ)
% 			)
% 			(exists (?PLACE)
% 				(forall (?TIME)
% 					(=> 
% 						(temporalPart ?TIME (WhenFn ?KEEP))
% 						(holdsDuring ?TIME (located ?OBJ ?PLACE))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2592, axiom,
	p__d__subclass(c__Confining,c__Keeping)
).



% ($documentation Confining EnglishLanguage "The &%Class of &%Keeping &%Processes where the 
% &%patient is a &%Human or an &%Animal and is kept involuntarily.  This covers 
% caging, imprisonment, jailing, etc.")


fof( mergeA2593, axiom,
	(![CONFINE]: 
		(
			(
				p__d__instance(CONFINE,c__Confining)
			)
			=>
			(
				(?[AGENT]: 
					(
						(
							(
								p__d__instance(AGENT,c__Animal)
							)
						 &
							(
								p__patient(CONFINE,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?CONFINE ?PERSON)
% 		(=> 
% 			(and 
% 				($instance ?CONFINE Confining)
% 				(patient ?CONFINE ?PERSON)
% 				($instance ?PERSON Human)
% 			)
% 			(not 
% 				(desires ?PERSON (patient ?CONFINE ?PERSON))
% 			)
% 		)
% 	)

fof( mergeA2595, axiom,
	p__d__subclass(c__Maintaining,c__IntentionalProcess)
).



% ($documentation Maintaining EnglishLanguage "The &%Class of &%Processes where the &%agent 
% cares for or maintains the &%Object.")


fof( mergeA2596, axiom,
	p__d__subclass(c__Repairing,c__IntentionalProcess)
).


% 	(relatedInternalConcept Repairing Maintaining)


% ($documentation Repairing EnglishLanguage "The &%Class of &%Processes where the &%agent 
% makes a modification or series of modifications to an &%Object that is not 
% functioning as intended so that it works properly.")


fof( mergeA2598, axiom,
	(![OBJ,REPAIR]: 
		(
			(
				(
					(
						p__d__instance(REPAIR,c__Repairing)
					)
				 &
					(
						p__patient(REPAIR,OBJ)
					)
				)
			)
			=>
			(
				(?[DAMAGE]: 
					(
						(
							(
								p__d__instance(DAMAGE,c__Damaging)
							)
						 &
							(
								p__patient(DAMAGE,OBJ)
							)
						 &
							(
								p__earlier(f__WhenFn1(DAMAGE),f__WhenFn1(REPAIR))
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2599, axiom,
	p__d__subclass(c__TherapeuticProcess,c__Repairing)
).



% ($documentation TherapeuticProcess EnglishLanguage "A &%Process that is carried out 
% for the purpose of curing, improving or reducing the pain associated 
% with a &%DiseaseOrSyndrome.")


fof( mergeA2600, axiom,
	(![PROC,BIO]: 
		(
			(
				(
					(
						p__d__instance(BIO,c__Object)
					)
				 &
					(
						p__d__instance(PROC,c__TherapeuticProcess)
					)
				 &
					(
						p__patient(PROC,BIO)
					)
				)
			)
			=>
			(
				(
					p__d__instance(BIO,c__Organism)
				 |
					(?[ORG]: 
						(
							(
								(
									p__d__instance(ORG,c__Organism)
								)
							 &
								(
									p__part(BIO,ORG)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2601, axiom,
	p__d__subclass(c__Surgery,c__TherapeuticProcess)
).



% ($documentation Surgery EnglishLanguage "Any &%TherapeuticProcess that involves making an 
% incision in the &%Animal that is the &%patient of the &%TherapeuticProcess.")


fof( mergeA2602, axiom,
	(![ANIMAL,ACT]: 
		(
			(
				(
					(
						p__d__instance(ACT,c__Surgery)
					)
				 &
					(
						p__patient(ACT,ANIMAL)
					)
				)
			)
			=>
			(
				(?[SUBACT]: 
					(
						(
							(
								p__d__instance(SUBACT,c__Cutting)
							)
						 &
							(
								p__d__instance(ANIMAL,c__Animal)
							)
						 &
							(
								p__patient(SUBACT,ANIMAL)
							)
						 &
							(
								p__subProcess(SUBACT,ACT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2603, axiom,
	p__d__subclass(c__Damaging,c__InternalChange)
).


fof( mergeA2604, axiom,
	p__d__disjoint(c__Damaging,c__Repairing)
).



% ($documentation Damaging EnglishLanguage "The &%Class of &%Processes where the &%agent 
% brings about a situation where the &%patient no longer functions normally 
% or as intended.")


fof( mergeA2605, axiom,
	p__d__subclass(c__Destruction,c__Damaging)
).



% ($documentation Destruction EnglishLanguage "The &%subclass of &%Damagings in which 
% the &%patient (or an essential element of the &%patient) is destroyed.  
% Note that the difference between this concept and its superclass is solely 
% one of extent.")


fof( mergeA2606, axiom,
	(![PROCESS]: 
		(
			(
				p__d__instance(PROCESS,c__Process)
			)
			=>
			(
				(
					p__d__instance(PROCESS,c__Destruction)
				)
				<=>
				(
					(?[PATIENT]: 
						(
							(
								(
									p__d__instance(PATIENT,c__Physical)
								)
							 &
								(
									p__patient(PROCESS,PATIENT)
								)
							 &
								(
									p__time(PATIENT,f__BeginFn1(f__WhenFn1(PROCESS)))
								)
							 &
								(
									~ (
										p__time(PATIENT,f__EndFn1(f__WhenFn1(PROCESS)))
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2607, axiom,
	p__d__subclass(c__Killing,c__Destruction)
).



% ($documentation Killing EnglishLanguage "The &%subclass of &%Destruction in which the 
% death of an &%Organism is caused by an &%Organism.  Note that in cases 
% of suicide the &%Organism would be the same in both cases.")


fof( mergeA2608, axiom,
	(![KILL,AGENT,PATIENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(KILL,c__Killing)
					)
				 &
					(
						p__agent(KILL,AGENT)
					)
				 &
					(
						p__patient(KILL,PATIENT)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(AGENT,c__Organism)
					)
				 &
					(
						p__d__instance(PATIENT,c__Organism)
					)
				)
			)
		)
	)
).


% 	(forall (?KILL ?PATIENT)
% 		(=> 
% 			(and 
% 				($instance ?KILL Killing)
% 				(patient ?KILL ?PATIENT)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?KILL)) (attribute ?PATIENT Living))
% 				(holdsDuring (FutureFn (WhenFn ?KILL)) (attribute ?PATIENT Dead))
% 			)
% 		)
% 	)

fof( mergeA2610, axiom,
	(![OBJ,KILL]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Agent)
					)
				 &
					(
						p__d__instance(KILL,c__Killing)
					)
				 &
					(
						p__patient(KILL,OBJ)
					)
				)
			)
			=>
			(
				(?[DEATH]: 
					(
						(
							(
								p__d__instance(DEATH,c__Death)
							)
						 &
							(
								p__experiencer(DEATH,OBJ)
							)
						 &
							(
								p__causes(KILL,DEATH)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2611, axiom,
	p__d__subclass(c__Poking,c__IntentionalProcess)
).



% ($documentation Poking EnglishLanguage "The &%Class of &%Processes where the &%agent
% pierces the surface of the &%Object with an &%instrument.")


% 	(forall (?POKE ?INST ?AGENT ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?POKE Poking)
% 				(agent ?POKE ?AGENT)
% 				(patient ?POKE ?OBJ)
% 				(instrument ?POKE ?INST)
% 			)
% 			(holdsDuring (WhenFn ?POKE) (connects ?INST ?AGENT ?OBJ))
% 		)
% 	)

fof( mergeA2613, axiom,
	p__d__subclass(c__Cutting,c__Poking)
).



% ($documentation Cutting EnglishLanguage "The &%subclass of &%Poking &%Processes which 
% involve a sharp &%instrument.") 


fof( mergeA2614, axiom,
	p__d__subclass(c__Attaching,c__DualObjectProcess)
).


fof( mergeA2615, axiom,
	p__d__disjoint(c__Attaching,c__Detaching)
).


% 	(relatedInternalConcept Attaching Putting)


% ($documentation Attaching EnglishLanguage "A &%Process where one &%Object becomes attached 
% to another &%Object.  Note that this differs from &%Putting in that two 
% things which are attached may already be in the same location.  Note that 
% &%Combining is different from &%Attaching in that the former applies to 
% &%Substances, while the latter applies to &%CorpuscularObjects.  Note too 
% that &%Attaching is different from &%Putting in that one or both of the 
% two things which are attached may or may not be moved from the location 
% where they were combined.")


% 	(forall (?ATTACH ?OBJ1 ?OBJ2)
% 		(=> 
% 			(and 
% 				($instance ?ATTACH Attaching)
% 				(patient ?ATTACH ?OBJ1)
% 				(patient ?ATTACH ?OBJ2)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?ATTACH)) (not (connected ?OBJ1 ?OBJ2)))
% 				(holdsDuring (EndFn (WhenFn ?ATTACH)) (connected ?OBJ1 ?OBJ2))
% 			)
% 		)
% 	)

fof( mergeA2618, axiom,
	(![ATTACH]: 
		(
			(
				p__d__instance(ATTACH,c__Attaching)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__CorpuscularObject)
							)
						 &
							(
								p__patient(ATTACH,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2619, axiom,
	p__d__subclass(c__Detaching,c__DualObjectProcess)
).



% ($documentation Detaching EnglishLanguage "A &%Process where the &%agent detaches one thing 
% from something else.  Note that &%Detaching is different from &%Separating 
% in that the latter applies to &%Substances, while the former applies to 
% &%CorpuscularObjects.  Note too that &%Detaching is different from 
% &%Removing in that one or both of the two things which are detached may or 
% may not be moved from the location where they were attached.") 


% 	(forall (?DETACH ?OBJ1 ?OBJ2)
% 		(=> 
% 			(and 
% 				($instance ?DETACH Detaching)
% 				(patient ?DETACH ?OBJ1)
% 				(patient ?DETACH ?OBJ2)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?DETACH)) (connected ?OBJ1 ?OBJ2))
% 				(holdsDuring (EndFn (WhenFn ?DETACH)) (not (connected ?OBJ1 ?OBJ2)))
% 			)
% 		)
% 	)

fof( mergeA2621, axiom,
	(![DETACH]: 
		(
			(
				p__d__instance(DETACH,c__Detaching)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__CorpuscularObject)
							)
						 &
							(
								p__patient(DETACH,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2622, axiom,
	p__d__subclass(c__Ungrasping,c__Detaching)
).



% ($documentation Ungrasping EnglishLanguage "Any instance of &%Detaching which results in 
% a situation where it is not the case that the &%agent &%grasps something 
% which he/she &%grasps previously.")


% 	(forall (?GRAB ?RELEASE ?AGENT ?THING)
% 		(=> 
% 			(and 
% 				($instance ?RELEASE Ungrasping)
% 				(agent ?GRAB ?AGENT)
% 				(patient ?GRAB ?THING)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?RELEASE)) (grasps ?AGENT ?THING))
% 				(holdsDuring (EndFn (WhenFn ?RELEASE)) (not (grasps ?AGENT ?THING)))
% 			)
% 		)
% 	)

fof( mergeA2624, axiom,
	p__d__subclass(c__Combining,c__DualObjectProcess)
).



% ($documentation Combining EnglishLanguage "A &%Process where two or more &%SelfConnectedObjects 
% are incorporated into a single &%SelfConnectedObject.  Note that &%Combining 
% is different from &%Attaching in that the former results in one of the objects 
% being &%part of the other, while &%Attaching only results in the two objects 
% being &%connected with one another.  Note too that &%Combining is different 
% from &%Putting in that one or both of the two things which are combined may or 
% may not be moved from the location where they were combined.")


% 	(forall (?COMBINE ?OBJ1 ?OBJ2)
% 		(<=> 
% 			(and 
% 				($instance ?COMBINE Combining)
% 				(resource ?COMBINE ?OBJ1)
% 				(result ?COMBINE ?OBJ2)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?COMBINE)) (not (part ?OBJ1 ?OBJ2)))
% 				(holdsDuring (EndFn (WhenFn ?COMBINE)) (part ?OBJ1 ?OBJ2))
% 			)
% 		)
% 	)

fof( mergeA2626, axiom,
	(![COMBINE]: 
		(
			(
				p__d__instance(COMBINE,c__Combining)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__SelfConnectedObject)
							)
						 &
							(
								p__patient(COMBINE,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2627, axiom,
	p__d__subclass(c__Separating,c__DualObjectProcess)
).


fof( mergeA2628, axiom,
	p__d__disjoint(c__Separating,c__Combining)
).



% ($documentation Separating EnglishLanguage "A &%Process where a &%SelfConnectedObject is 
% separated into (some of) its &%parts.  Note that &%Separating is different 
% from &%Detaching in that the latter only results in the two objects not 
% being &%connected.  Note too that &%Separating is different from 
% &%Removing in that one or both of the two things which are separated 
% may or may not be moved from the location where they were separated.")


fof( mergeA2629, axiom,
	(![SEPARATE]: 
		(
			(
				p__d__instance(SEPARATE,c__Separating)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__SelfConnectedObject)
							)
						 &
							(
								p__patient(SEPARATE,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2630, axiom,
	p__d__subclass(c__ChemicalProcess,c__InternalChange)
).


fof( mergeA2631, axiom,
	p__d__partition3(c__ChemicalProcess,c__ChemicalSynthesis,c__ChemicalDecomposition)
).



% ($documentation ChemicalProcess EnglishLanguage "A &%ChemicalProcess occurs whenever 
% chemical compounds (&%CompoundSubstances) are formed or decomposed.  
% For example, reactants disappear as chemical change occurs, and products 
% appear as chemical change occurs.  In a chemical change a chemical 
% reaction takes place.  Catalysts in a &%ChemicalProcess may speed up the 
% reaction, but aren't themselves produced or consumed.  Examples: rusting of 
% iron and the decomposition of water, induced by an electric current, to 
% gaseous hydrogen and gaseous oxygen.") 


fof( mergeA2632, axiom,
	(![PROC,STUFF]: 
		(
			(
				(
					(
						p__d__instance(STUFF,c__Object)
					)
				 &
					(
						p__d__instance(PROC,c__ChemicalProcess)
					)
				 &
					(
						(
							p__resource(PROC,STUFF)
						 |
							p__result(PROC,STUFF)
						)
					)
				)
			)
			=>
			(
				p__d__instance(STUFF,c__PureSubstance)
			)
		)
	)
).


fof( mergeA2633, axiom,
	p__d__subclass(c__ChemicalSynthesis,c__ChemicalProcess)
).


fof( mergeA2634, axiom,
	p__d__subclass(c__ChemicalSynthesis,c__Combining)
).



% ($documentation ChemicalSynthesis EnglishLanguage "The &%Class of &%ChemicalProcesses in 
% which a &%CompoundSubstance is formed from simpler reactants.") 


fof( mergeA2635, axiom,
	(![SUBSTANCE1,SUBSTANCE2,PROC]: 
		(
			(
				(
					(
						p__d__instance(PROC,c__Process)
					)
				 &
					(
						p__resource(PROC,SUBSTANCE1)
					)
				 &
					(
						p__result(PROC,SUBSTANCE2)
					)
				 &
					(
						p__d__instance(SUBSTANCE1,c__ElementalSubstance)
					)
				 &
					(
						p__d__instance(SUBSTANCE2,c__CompoundSubstance)
					)
				)
			)
			=>
			(
				p__d__instance(PROC,c__ChemicalSynthesis)
			)
		)
	)
).


fof( mergeA2636, axiom,
	(![COMPOUND]: 
		(
			(
				p__d__instance(COMPOUND,c__CompoundSubstance)
			)
			<=>
			(
				(?[ELEMENT1,ELEMENT2,PROCESS]: 
					(
						(
							(
								p__d__instance(ELEMENT1,c__ElementalSubstance)
							)
						 &
							(
								p__d__instance(ELEMENT2,c__ElementalSubstance)
							)
						 &
							(
								~ (
									( ELEMENT1 = ELEMENT2 )
								)
							)
						 &
							(
								p__d__instance(PROCESS,c__ChemicalSynthesis)
							)
						 &
							(
								p__resource(PROCESS,ELEMENT1)
							)
						 &
							(
								p__resource(PROCESS,ELEMENT2)
							)
						 &
							(
								p__result(PROCESS,COMPOUND)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2637, axiom,
	p__d__subclass(c__ChemicalDecomposition,c__ChemicalProcess)
).


fof( mergeA2638, axiom,
	p__d__subclass(c__ChemicalDecomposition,c__Separating)
).



% ($documentation ChemicalDecomposition EnglishLanguage "The &%Class of &%ChemicalProcesses 
% in which a &%CompoundSubstance breaks down into simpler products.")


fof( mergeA2639, axiom,
	(![SUBSTANCE1,SUBSTANCE2,PROC]: 
		(
			(
				(
					(
						p__d__instance(PROC,c__Process)
					)
				 &
					(
						p__resource(PROC,SUBSTANCE1)
					)
				 &
					(
						p__result(PROC,SUBSTANCE2)
					)
				 &
					(
						p__d__instance(SUBSTANCE1,c__CompoundSubstance)
					)
				 &
					(
						p__d__instance(SUBSTANCE2,c__ElementalSubstance)
					)
				)
			)
			=>
			(
				p__d__instance(PROC,c__ChemicalDecomposition)
			)
		)
	)
).


fof( mergeA2640, axiom,
	p__d__subclass(c__Combustion,c__ChemicalDecomposition)
).



% ($documentation Combustion EnglishLanguage "The &%Class of &%ChemicalProcesses in which an &%Object 
% reacts with oxygen and gives off heat.  This includes all &%Processes in which 
% something is burning.")


fof( mergeA2641, axiom,
	(![COMBUSTION]: 
		(
			(
				p__d__instance(COMBUSTION,c__Combustion)
			)
			=>
			(
				(?[HEAT,LIGHT]: 
					(
						(
							(
								p__d__instance(HEAT,c__Heating)
							)
						 &
							(
								p__d__instance(LIGHT,c__RadiatingLight)
							)
						 &
							(
								p__subProcess(HEAT,COMBUSTION)
							)
						 &
							(
								p__subProcess(LIGHT,COMBUSTION)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2642, axiom,
	p__d__instance(c__Flammable,c__PhysicalAttribute)
).



% ($documentation Flammable EnglishLanguage "The &%Attribute of being flammable at normal temperatures
% (i.e. not while a &%Plasma).")


fof( mergeA2643, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__Flammable)
					)
				)
			)
			=>
			(
				p__capability(c__Combustion,c__patient,X)
			)
		)
	)
).


fof( mergeA2644, axiom,
	p__d__subclass(c__InternalChange,c__Process)
).



% ($documentation InternalChange EnglishLanguage "&%Processes which involve altering an internal 
% property of an &%Object, e.g. the shape of the &%Object, its coloring, its 
% structure, etc.  &%Processes that are not instances of this class include 
% changes that only affect the relationship to other objects, e.g. changes in 
% spatial or temporal location.") 


% 	(forall (?CHANGE ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?CHANGE InternalChange)
% 				(patient ?CHANGE ?OBJ)
% 			)
% 			(exists (?PROPERTY)
% 				(or 
% 					(and 
% 						(holdsDuring (BeginFn (WhenFn ?CHANGE)) (attribute ?OBJ ?PROPERTY))
% 						(holdsDuring (EndFn (WhenFn ?CHANGE)) (not (attribute ?OBJ ?PROPERTY)))
% 					)
% 					(and 
% 						(holdsDuring (BeginFn (WhenFn ?CHANGE)) (not (attribute ?OBJ ?PROPERTY)))
% 						(holdsDuring (EndFn (WhenFn ?CHANGE)) (attribute ?OBJ ?PROPERTY))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2646, axiom,
	p__d__subclass(c__SurfaceChange,c__InternalChange)
).



% ($documentation SurfaceChange EnglishLanguage "&%Processes which involve altering 
% the properties that apply to the surface of an &%Object.")


% 	(forall (?OBJ ?ALT)
% 		(=> 
% 			(and 
% 				($instance ?ALT SurfaceChange)
% 				(patient ?ALT ?OBJ)
% 			)
% 			(exists (?PART ?PROPERTY)
% 				(and 
% 					(superficialPart ?PART ?OBJ)
% 					(or 
% 						(and 
% 							(holdsDuring (BeginFn (WhenFn ?ALT)) (attribute ?PART ?PROPERTY))
% 							(holdsDuring (EndFn (WhenFn ?ALT)) (not (attribute ?PART ?PROPERTY)))
% 						)
% 						(and 
% 							(holdsDuring (BeginFn (WhenFn ?ALT)) (not (attribute ?PART ?PROPERTY)))
% 							(holdsDuring (EndFn (WhenFn ?ALT)) (attribute ?PART ?PROPERTY))
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2648, axiom,
	p__d__subclass(c__Coloring,c__SurfaceChange)
).



% ($documentation Coloring EnglishLanguage "The &%subclass of &%SurfaceChange where a 
% &%ColorAttribute of the &%patient is altered.  Note that the change in
% color may apply to just part of the object.")


% 	(forall (?OBJ ?COLORING)
% 		(=> 
% 			(and 
% 				($instance ?COLORING Coloring)
% 				(patient ?COLORING ?OBJ)
% 			)
% 			(exists (?PROPERTY ?PART)
% 				(and 
% 					(part ?PART ?OBJ)
% 					($instance ?PROPERTY ColorAttribute)
% 					(or 
% 						(and 
% 							(holdsDuring (BeginFn (WhenFn ?COLORING)) (attribute ?PART ?PROPERTY))
% 							(holdsDuring (EndFn (WhenFn ?COLORING)) (not (attribute ?PART ?PROPERTY)))
% 						)
% 						(and 
% 							(holdsDuring (BeginFn (WhenFn ?COLORING)) (not (attribute ?PART ?PROPERTY)))
% 							(holdsDuring (EndFn (WhenFn ?COLORING)) (attribute ?PART ?PROPERTY))
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2650, axiom,
	p__d__subclass(c__ShapeChange,c__InternalChange)
).



% ($documentation ShapeChange EnglishLanguage "The &%Process of changing the shape of an &%Object.") 


% 	(forall (?ALT ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?ALT ShapeChange)
% 				(patient ?ALT ?OBJ)
% 			)
% 			(exists (?PROPERTY)
% 				(and 
% 					($instance ?PROPERTY ShapeAttribute)
% 					(or 
% 						(and 
% 							(holdsDuring (BeginFn (WhenFn ?ALT)) (attribute ?OBJ ?PROPERTY))
% 							(holdsDuring (EndFn (WhenFn ?ALT)) (not (attribute ?OBJ ?PROPERTY)))
% 						)
% 						(and 
% 							(holdsDuring (BeginFn (WhenFn ?ALT)) (not (attribute ?OBJ ?PROPERTY)))
% 							(holdsDuring (EndFn (WhenFn ?ALT)) (attribute ?OBJ ?PROPERTY))
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2652, axiom,
	p__d__subclass(c__ContentDevelopment,c__IntentionalProcess)
).



% ($documentation ContentDevelopment EnglishLanguage "A &%subclass of &%IntentionalProcess in 
% which content is modified, its form is altered or it is created anew.")


fof( mergeA2653, axiom,
	(![DEVELOP]: 
		(
			(
				p__d__instance(DEVELOP,c__ContentDevelopment)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__ContentBearingObject)
							)
						 &
							(
								p__result(DEVELOP,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2654, axiom,
	p__d__subclass(c__Reading,c__ContentDevelopment)
).


% 	(relatedInternalConcept Reading Interpreting)


% ($documentation Reading EnglishLanguage "A &%subclass of &%ContentDevelopment in which 
% content is converted from a written form into a spoken representation.  
% Note that the class &%Interpreting should be used in cases where a 
% &%Text is read silently.")


fof( mergeA2656, axiom,
	(![READ]: 
		(
			(
				p__d__instance(READ,c__Reading)
			)
			=>
			(
				(?[TEXT,PROP]: 
					(
						(
							(
								p__d__instance(PROP,c__Proposition)
							)
						 &
							(
								p__d__instance(TEXT,c__Text)
							)
						 &
							(
								p__containsInformation(TEXT,PROP)
							)
						 &
							(
								p__realization(READ,PROP)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2657, axiom,
	p__d__subclass(c__Writing,c__ContentDevelopment)
).



% ($documentation Writing EnglishLanguage "A &%subclass of &%ContentDevelopment in which 
% content is converted from one form (e.g. uttered, written or represented 
% mentally) into a written form.  Note that this class covers both 
% transcription and original creation of written &%Texts.")


fof( mergeA2658, axiom,
	p__d__subclass(c__Encoding,c__Writing)
).



% ($documentation Encoding EnglishLanguage "Converting a document or message into a formal 
% language or into a code that can be understood only by a relatively small 
% body of &%Agents.  Generally speaking, this hinders wide dissemination of 
% the content in the original document or message.")


fof( mergeA2659, axiom,
	p__d__subclass(c__Decoding,c__Writing)
).


fof( mergeA2660, axiom,
	p__d__disjoint(c__Decoding,c__Encoding)
).



% ($documentation Decoding EnglishLanguage "Converting a document or message that has previously 
% been encoded (see &%Encoding) into a &%Language that can be understood by a 
% relatively large number of speakers.")


% 	(forall (?DOC1 ?PROP ?DECODE)
% 		(=> 
% 			(and 
% 				($instance ?DECODE Decoding)
% 				(patient ?DECODE ?DOC1)
% 			)
% 			(exists (?ENCODE ?DOC2 ?TIME)
% 				(and 
% 					(containsInformation ?DOC2 ?PROP)
% 					(containsInformation ?DOC1 ?PROP)
% 					(temporalPart ?TIME (PastFn (WhenFn ?DECODE)))
% 					(holdsDuring ?TIME (and ([|] ($instance ?ENCODE Encoding) ([|] (patient ?ENCODE ?DOC2) []))))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2662, axiom,
	p__d__subclass(c__Translating,c__ContentDevelopment)
).


fof( mergeA2663, axiom,
	p__d__subclass(c__Translating,c__DualObjectProcess)
).



% ($documentation Translating EnglishLanguage "Converting content from one &%Language into another.  
% This covers oral translation (i.e. interpreting) as well as written translation.")


fof( mergeA2664, axiom,
	(![TRANSLATE,EXPRESSION1,EXPRESSION2]: 
		(
			(
				(
					(
						p__d__instance(EXPRESSION1,c__LinguisticExpression)
					)
				 &
					(
						p__d__instance(EXPRESSION2,c__LinguisticExpression)
					)
				 &
					(
						p__d__instance(TRANSLATE,c__Translating)
					)
				 &
					(
						p__patient(TRANSLATE,EXPRESSION1)
					)
				 &
					(
						p__result(TRANSLATE,EXPRESSION2)
					)
				)
			)
			=>
			(
				(?[LANGUAGE1,LANGUAGE2,ENTITY]: 
					(
						(
							(
								p__d__instance(LANGUAGE1,c__Language)
							)
						 &
							(
								p__d__instance(LANGUAGE2,c__Language)
							)
						 &
							(
								p__representsInLanguage(EXPRESSION1,ENTITY,LANGUAGE1)
							)
						 &
							(
								p__representsInLanguage(EXPRESSION2,ENTITY,LANGUAGE2)
							)
						 &
							(
								~ (
									( LANGUAGE1 = LANGUAGE2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2665, axiom,
	p__d__subclass(c__Wetting,c__Putting)
).



% ($documentation Wetting EnglishLanguage "The &%Class of &%Processes where a &%Liquid is 
% added to an &%Object.")


% 	(forall (?WET)
% 		(=> 
% 			($instance ?WET Wetting)
% 			(exists (?OBJ)
% 				(and 
% 					(patient ?WET ?OBJ)
% 					(holdsDuring (BeginFn (WhenFn ?WET)) (not (attribute ?OBJ Damp)))
% 					(holdsDuring (EndFn (WhenFn ?WET)) (attribute ?OBJ Damp))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2667, axiom,
	(![WET]: 
		(
			(
				p__d__instance(WET,c__Wetting)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__Object)
							)
						 &
							(
								p__attribute(OBJ,c__Liquid)
							)
						 &
							(
								p__patient(WET,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2668, axiom,
	p__d__subclass(c__Drying,c__Removing)
).



% ($documentation Drying EnglishLanguage "The &%Class of &%Processes where a &%Liquid is removed 
% from an &%Object.")


% 	(forall (?DRY ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?DRY Drying)
% 				(patient ?DRY ?OBJ)
% 			)
% 			(holdsDuring (EndFn (WhenFn ?DRY)) (attribute ?OBJ Dry))
% 		)
% 	)

fof( mergeA2670, axiom,
	p__d__subclass(c__Creation,c__InternalChange)
).


% 	(relatedInternalConcept Creation Destruction)


% ($documentation Creation EnglishLanguage "The &%subclass of &%Process in which 
% something is created.  Note that the thing created is specified 
% with the &%result &%CaseRole.")


fof( mergeA2672, axiom,
	(![ACTION]: 
		(
			(
				p__d__instance(ACTION,c__Creation)
			)
			=>
			(
				(?[RESULT]: 
					(
						p__result(ACTION,RESULT)
					)
				)
			)
		)
	)
).


fof( mergeA2673, axiom,
	(![PROCESS]: 
		(
			(
				p__d__instance(PROCESS,c__Process)
			)
			=>
			(
				(
					p__d__instance(PROCESS,c__Creation)
				)
				<=>
				(
					(?[PATIENT]: 
						(
							(
								(
									p__d__instance(PATIENT,c__Physical)
								)
							 &
								(
									p__patient(PROCESS,PATIENT)
								)
							 &
								(
									p__time(PATIENT,f__EndFn1(f__WhenFn1(PROCESS)))
								)
							 &
								(
									~ (
										p__time(PATIENT,f__BeginFn1(f__WhenFn1(PROCESS)))
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2674, axiom,
	p__d__subclass(c__Making,c__Creation)
).


fof( mergeA2675, axiom,
	p__d__subclass(c__Making,c__IntentionalProcess)
).



% ($documentation Making EnglishLanguage "The &%subclass of &%Creation in which an individual 
% &%Artifact or a type of &%Artifact is made.")


fof( mergeA2676, axiom,
	p__d__subclass(c__Constructing,c__Making)
).



% ($documentation Constructing EnglishLanguage "The &%subclass of &%Making in which a 
% &%StationaryArtifact is built.")


fof( mergeA2677, axiom,
	(![ARTIFACT]: 
		(
			(
				(?[BUILD]: 
					(
						(
							(
								p__d__instance(BUILD,c__Constructing)
							)
						 &
							(
								p__result(BUILD,ARTIFACT)
							)
						)
					)
				)
			)
			<=>
			(
				p__d__instance(ARTIFACT,c__StationaryArtifact)
			)
		)
	)
).


fof( mergeA2678, axiom,
	p__d__subclass(c__Manufacture,c__Making)
).



% ($documentation Manufacture EnglishLanguage "The &%Making of &%Artifacts on a mass 
% scale.")


fof( mergeA2679, axiom,
	p__d__subclass(c__Publication,c__Manufacture)
).


fof( mergeA2680, axiom,
	p__d__subclass(c__Publication,c__ContentDevelopment)
).



% ($documentation Publication EnglishLanguage "The &%Manufacture of &%Texts.  Note that 
% there is no implication that the &%Texts are distributed.  Such 
% distribution, when it occurs, is an instance of &%Dissemination.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of patient is instance of Entity
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?PUB Publication)
% ;;      (patient ?PUB ?TEXT))
% ;;   ($subclass ?TEXT Text))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA2681, axiom,
	(![PUB,TEXT]: 
		(
			(
				(
					(
						p__d__instance(PUB,c__Publication)
					)
				 &
					(
						p__patient(PUB,TEXT)
					)
				)
			)
			=>
			(
				p__d__instance(TEXT,c__Text)
			)
		)
	)
).


fof( mergeA2682, axiom,
	p__d__subclass(c__Cooking,c__Making)
).



% ($documentation Cooking EnglishLanguage "The &%Making of an &%instance of &%Food.  Note 
% that this can cover any preparation of &%Food, e.g. making a salad, 
% cutting up fruit, etc.  It does not necessarily involve the application 
% of heat.")


% 	(forall (?COOK)
% 		(=> 
% 			($instance ?COOK Cooking)
% 			(exists (?FOOD)
% 				(and 
% 					($instance ?FOOD (FoodForFn Organism))
% 					(result ?COOK ?FOOD)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2684, axiom,
	p__d__subclass(c__Pursuing,c__IntentionalProcess)
).



% ($documentation Pursuing EnglishLanguage "The class of &%IntentionalProcesses where something is 
% sought.  Some examples would be hunting, shopping, trawling, and stalking.")


fof( mergeA2685, axiom,
	(![PURSUE]: 
		(
			(
				p__d__instance(PURSUE,c__Pursuing)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__Object)
							)
						 &
							(
								p__patient(PURSUE,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?PURSUE ?AGENT ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?PURSUE Pursuing)
% 				(agent ?PURSUE ?AGENT)
% 				(patient ?PURSUE ?OBJ)
% 			)
% 			(holdsDuring ?PURSUE (wants ?AGENT ?OBJ))
% 		)
% 	)

% 	(forall (?PURSUE ?AGENT ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?PURSUE Pursuing)
% 				(agent ?PURSUE ?AGENT)
% 				(patient ?PURSUE ?OBJ)
% 			)
% 			(holdsDuring ?PURSUE (not (possesses ?AGENT ?OBJ)))
% 		)
% 	)

fof( mergeA2688, axiom,
	p__d__subclass(c__Hunting,c__Pursuing)
).



% ($documentation Hunting EnglishLanguage "Hunting is the class of &%Processes in which 
% an animal or animals are pursued and sometimes captured and/or killed.")


fof( mergeA2689, axiom,
	(![H]: 
		(
			(
				p__d__instance(H,c__Hunting)
			)
			=>
			(
				(?[T]: 
					(
						(
							(
								p__d__instance(T,c__Animal)
							)
						 &
							(
								p__patient(H,T)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?H ?P ?PROC)
% 		(=> 
% 			(and 
% 				($instance ?H Hunting)
% 				(patient ?H ?P)
% 			)
% 			(hasPurpose ?H (exists ([|] ?PROC []) (and ([|] (patient ?PROC ?P) ([|] (or ([|] ($instance ?PROC Confining) ([|] ($instance ?PROC Killing) []))) [])))))
% 		)
% 	)

fof( mergeA2691, axiom,
	p__d__subclass(c__Investigating,c__IntentionalPsychologicalProcess)
).



% ($documentation Investigating EnglishLanguage "The class of &%IntentionalPsychologicalProcesses 
% where the &%agent attempts to obtaina information (i.e. a &%Proposition denoted 
% by a &%Formula).") 


fof( mergeA2692, axiom,
	(![INVESTIGATE,PROP]: 
		(
			(
				(
					(
						p__d__instance(INVESTIGATE,c__Investigating)
					)
				 &
					(
						p__patient(INVESTIGATE,PROP)
					)
				)
			)
			=>
			(
				p__d__instance(PROP,c__Formula)
			)
		)
	)
).


% 	(forall (?INVESTIGATE ?AGENT ?PROP)
% 		(=> 
% 			(and 
% 				($instance ?INVESTIGATE Investigating)
% 				(agent ?INVESTIGATE ?AGENT)
% 				(patient ?INVESTIGATE ?PROP)
% 			)
% 			(holdsDuring (WhenFn ?INVESTIGATE) (not (knows ?AGENT ?PROP)))
% 		)
% 	)

fof( mergeA2694, axiom,
	p__d__subclass(c__Experimenting,c__Investigating)
).



% ($documentation Experimenting EnglishLanguage "&%Investigating the truth of a &%Proposition 
% by constructing and observing a trial.  Note that the trial may be either 
% controlled or uncontrolled, blind or not blind.")


fof( mergeA2695, axiom,
	p__d__subclass(c__DiagnosticProcess,c__Investigating)
).



% ($documentation DiagnosticProcess EnglishLanguage "A &%Process that is carried out for 
% the purpose of determining the nature of a &%DiseaseOrSyndrome.")


% 	(forall (?PROC ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?PROC DiagnosticProcess)
% 				(agent ?PROC ?AGENT)
% 			)
% 			(exists (?CAUSE)
% 				(hasPurposeForAgent ?PROC (knows ?AGENT (causes ?CAUSE ?PROC)) ?AGENT)
% 			)
% 		)
% 	)

fof( mergeA2697, axiom,
	p__d__subclass(c__SocialInteraction,c__IntentionalProcess)
).



% ($documentation SocialInteraction EnglishLanguage "The &%subclass of 
% &%IntentionalProcess that involves interactions between 
% &%CognitiveAgents.")


fof( mergeA2698, axiom,
	(![INTERACTION]: 
		(
			(
				p__d__instance(INTERACTION,c__SocialInteraction)
			)
			=>
			(
				(?[AGENT1,AGENT2]: 
					(
						(
							(
								p__involvedInEvent(INTERACTION,AGENT1)
							)
						 &
							(
								p__involvedInEvent(INTERACTION,AGENT2)
							)
						 &
							(
								p__d__instance(AGENT1,c__Agent)
							)
						 &
							(
								p__d__instance(AGENT2,c__Agent)
							)
						 &
							(
								~ (
									( AGENT1 = AGENT2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2699, axiom,
	p__d__subclass(c__Pretending,c__SocialInteraction)
).



% ($documentation Pretending EnglishLanguage "Any &%SocialInteraction where a 
% &%CognitiveAgent or &%Group of &%CognitiveAgents attempts to make 
% another &%CognitiveAgent or &%Group of &%CognitiveAgents believe 
% something that is false.  This covers deceit, affectation, 
% impersonation, and entertainment productions, to give just a few 
% examples.")


% 	(forall (?PRETEND)
% 		(=> 
% 			($instance ?PRETEND Pretending)
% 			(exists (?PERSON ?PROP)
% 				(and 
% 					(hasPurpose ?PRETEND (believes ?PERSON ?PROP))
% 					(truth ?PROP False)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2701, axiom,
	p__d__subclass(c__Communication,c__SocialInteraction)
).


fof( mergeA2702, axiom,
	p__d__subclass(c__Communication,c__ContentBearingProcess)
).


fof( mergeA2703, axiom,
	p__d__partition7(c__Communication,c__Stating,c__Supposing,c__Directing,c__Committing,c__Expressing,c__Declaring)
).


% 	(relatedInternalConcept Communication ContentDevelopment)


% ($documentation Communication EnglishLanguage "A &%SocialInteraction that involves 
% the transfer of information between two or more &%CognitiveAgents.  
% Note that &%Communication is closely related to, but essentially 
% different from, &%ContentDevelopment.  The latter involves the creation 
% or modification of a &%ContentBearingObject, while &%Communication is 
% the transfer of information for the purpose of conveying a message.")


fof( mergeA2705, axiom,
	(![COMMUNICATE]: 
		(
			(
				p__d__instance(COMMUNICATE,c__Communication)
			)
			=>
			(
				(?[PHYS,ENTITY,AGENT1,AGENT2]: 
					(
						(
							(
								p__refers(PHYS,ENTITY)
							)
						 &
							(
								p__patient(COMMUNICATE,PHYS)
							)
						 &
							(
								p__d__instance(AGENT1,c__CognitiveAgent)
							)
						 &
							(
								p__agent(COMMUNICATE,AGENT1)
							)
						 &
							(
								p__d__instance(AGENT2,c__CognitiveAgent)
							)
						 &
							(
								p__destination(COMMUNICATE,AGENT2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2706, axiom,
	p__d__subclass(c__Disseminating,c__Communication)
).



% ($documentation Disseminating EnglishLanguage "Any &%Communication that involves a 
% single &%agent and many &%destinations.  This covers the release 
% of a published book, broadcasting, a theatrical performance, giving 
% orders to assembled troops, delivering a public lecture, etc.")


fof( mergeA2707, axiom,
	(![DISSEMINATE]: 
		(
			(
				p__d__instance(DISSEMINATE,c__Disseminating)
			)
			=>
			(
				(?[AGENT1,AGENT2]: 
					(
						(
							(
								p__destination(DISSEMINATE,AGENT1)
							)
						 &
							(
								p__d__instance(AGENT1,c__CognitiveAgent)
							)
						 &
							(
								p__destination(DISSEMINATE,AGENT2)
							)
						 &
							(
								p__d__instance(AGENT2,c__CognitiveAgent)
							)
						 &
							(
								~ (
									( AGENT1 = AGENT2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2708, axiom,
	p__d__subclass(c__Demonstrating,c__Disseminating)
).



% ($documentation Demonstrating EnglishLanguage "Exhibiting something or a range of things 
% before the public in a particular location.  This would cover software 
% demos, theatrical plays, lectures, dance and music recitals, museum 
% exhibitions, etc.")


fof( mergeA2709, axiom,
	(![DEMO]: 
		(
			(
				p__d__instance(DEMO,c__Demonstrating)
			)
			=>
			(
				(?[PERSON]: 
					(
						(
							(
								p__d__instance(PERSON,c__Human)
							)
						 &
							(
								p__attends(DEMO,PERSON)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2710, axiom,
	p__subrelation(c__attends,c__experiencer)
).


% 	($domain attends 1 Demonstrating)

% 	($domain attends 2 Human)


% ($documentation attends EnglishLanguage "(&%attends ?DEMO ?PERSON) means that ?PERSON attends, 
% i.e. is a member of the audience, of the performance event ?DEMO.")


fof( mergeA2713, axiom,
	p__d__subclass(c__Gesture,c__Communication)
).


fof( mergeA2714, axiom,
	p__d__subclass(c__Gesture,c__BodyMotion)
).



% ($documentation Gesture EnglishLanguage "Any &%BodyMotion, e.g. a hand wave, a nod of the 
% head, a smile, which is also an instance of &%Communication.")


fof( mergeA2715, axiom,
	p__d__subclass(c__Advertising,c__Disseminating)
).



% ($documentation Advertising EnglishLanguage "A &%Disseminating whose purpose is to 
% promote the sale of an &%Object represented in a &%Text or &%Icon 
% (the advertisement).")


% 	(forall (?ADVERT ?SALE)
% 		(=> 
% 			($instance ?ADVERT Advertising)
% 			(exists (?OBJ)
% 				(and 
% 					(refers ?ADVERT ?OBJ)
% 					(hasPurpose ?ADVERT (exists ([|] ?SALE []) (and ([|] ($instance ?SALE Selling) ([|] (patient ?SALE ?OBJ) [])))))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2717, axiom,
	p__d__subclass(c__Expressing,c__Communication)
).



% ($documentation Expressing EnglishLanguage "Instances of this &%Class express a state of the &%agent. 
% For example, Jane thanked Barbara for the present she had given her.  The thanking 
% in this case expresses the gratitude of Jane towards Barbara.  Note that &%Expressing, 
% unlike the other speech act types, is not a subclass of &%LinguisticCommunication.  
% This is because emotions, for example, can be expressed without language, e.g. by 
% smiling.")


fof( mergeA2718, axiom,
	(![AGENT,EXPRESS]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(EXPRESS,c__Expressing)
					)
				 &
					(
						p__agent(EXPRESS,AGENT)
					)
				)
			)
			=>
			(
				(?[STATE]: 
					(
						(
							(
								p__d__instance(STATE,c__StateOfMind)
							)
						 &
							(
								p__attribute(AGENT,STATE)
							)
						 &
							(
								p__represents(EXPRESS,STATE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2719, axiom,
	p__d__subclass(c__LinguisticCommunication,c__Communication)
).



% ($documentation LinguisticCommunication EnglishLanguage "A &%Communication that involves 
% the transfer of information via a &%LinguisticExpression.")


fof( mergeA2720, axiom,
	(![COMMUNICATE]: 
		(
			(
				p__d__instance(COMMUNICATE,c__LinguisticCommunication)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__represents(COMMUNICATE,OBJ)
							)
						 &
							(
								p__d__instance(OBJ,c__LinguisticExpression)
							)
						 &
							(
								p__patient(COMMUNICATE,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2721, axiom,
	p__d__subclass(c__Stating,c__LinguisticCommunication)
).



% ($documentation Stating EnglishLanguage "Instances of this &%Class commit the &%agent to some truth. 
% For example, John claimed that the moon is made of green cheese.")


% 	(forall (?STATE ?AGENT ?FORMULA)
% 		(=> 
% 			(and 
% 				($instance ?STATE Stating)
% 				(agent ?STATE ?AGENT)
% 				(patient ?STATE ?FORMULA)
% 				($instance ?FORMULA Formula)
% 			)
% 			(holdsDuring (WhenFn ?STATE) (believes ?AGENT ?FORMULA))
% 		)
% 	)

fof( mergeA2723, axiom,
	p__d__subclass(c__Disagreeing,c__Stating)
).



% ($documentation Disagreeing EnglishLanguage "A &%Stating in which two &%Agents have
% contradictory statements.  This is distinguished from &%Arguing in
% that the statement in dispute may be a simple assertion, rather than
% a chain of deduction, and that two entities must be disagreeing with
% each other, whereas a single entity may craft an argument for a given
% point of view, without the need for another agent to disagree with.")


fof( mergeA2724, axiom,
	(![DIS]: 
		(
			(
				p__d__instance(DIS,c__Disagreeing)
			)
			=>
			(
				(?[A1,A2,STATE1,STATE2,STMT1,STMT2]: 
					(
						(
							(
								p__d__instance(STATE1,c__Process)
							)
						 &
							(
								p__d__instance(STATE1,c__ContentBearingPhysical)
							)
						 &
							(
								p__d__instance(STATE2,c__Process)
							)
						 &
							(
								p__d__instance(STATE2,c__ContentBearingPhysical)
							)
						 &
							(
								p__d__instance(A1,c__Agent)
							)
						 &
							(
								p__d__instance(A2,c__Agent)
							)
						 &
							(
								p__d__instance(STMT1,c__Proposition)
							)
						 &
							(
								p__d__instance(STMT2,c__Proposition)
							)
						 &
							(
								p__subProcess(STATE1,DIS)
							)
						 &
							(
								p__subProcess(STATE2,DIS)
							)
						 &
							(
								p__agent(STATE1,A1)
							)
						 &
							(
								p__agent(STATE2,A2)
							)
						 &
							(
								p__containsInformation(STATE1,STMT1)
							)
						 &
							(
								p__containsInformation(STATE2,STMT2)
							)
						 &
							(
								~ (
									p__consistent(STMT1,STMT2)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2725, axiom,
	p__d__subclass(c__Supposing,c__LinguisticCommunication)
).



% ($documentation Supposing EnglishLanguage "Instances of this &%Class suppose, for the sake of 
% argument, that a proposition is true.  For example, John considered what he 
% would do if he won the lottery.")


fof( mergeA2726, axiom,
	p__d__subclass(c__Directing,c__LinguisticCommunication)
).



% ($documentation Directing EnglishLanguage "Instances of this &%Class urge some further action 
% among the receivers.  A &%Directing can be an &%Ordering, a &%Requesting or 
% a &%Questioning.") 


fof( mergeA2727, axiom,
	p__d__subclass(c__Ordering,c__Directing)
).



% ($documentation Ordering EnglishLanguage "A &%Directing in which the receiver is 
% commanded to realize the content of a &%ContentBearingObject.  Orders 
% are injunctions, the disobedience of which involves sanctions, or 
% which express an obligation upon the part of the orderee.")


fof( mergeA2728, axiom,
	(![ORDER,FORMULA]: 
		(
			(
				(
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__d__instance(ORDER,c__Ordering)
					)
				 &
					(
						p__patient(ORDER,FORMULA)
					)
				)
			)
			=>
			(
				p__modalAttribute(FORMULA,c__Obligation)
			)
		)
	)
).


fof( mergeA2729, axiom,
	p__d__subclass(c__Requesting,c__Directing)
).



% ($documentation Requesting EnglishLanguage "A request expresses a desire that some future 
% action be performed.  For example, the 5th Battalion requested air support 
% from the 3rd Bomber Group.  Note that this class covers proposals, 
% recommendations, suggestions, etc.")


fof( mergeA2730, axiom,
	(![REQUEST,AGENT,FORMULA]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(REQUEST,c__Requesting)
					)
				 &
					(
						p__agent(REQUEST,AGENT)
					)
				 &
					(
						p__patient(REQUEST,FORMULA)
					)
				 &
					(
						p__d__instance(FORMULA,c__Formula)
					)
				)
			)
			=>
			(
				p__desires(AGENT,FORMULA)
			)
		)
	)
).


fof( mergeA2731, axiom,
	p__d__subclass(c__Questioning,c__Directing)
).



% ($documentation Questioning EnglishLanguage "A request for information.  For example, John asked 
% Bill if the President had said anything about taxes in his State of the Union 
% address.")


% 	(forall (?QUESTION ?AGENT ?FORMULA)
% 		(=> 
% 			(and 
% 				($instance ?QUESTION Questioning)
% 				(agent ?QUESTION ?AGENT)
% 				(patient ?QUESTION ?FORMULA)
% 				($instance ?FORMULA Formula)
% 			)
% 			(holdsDuring (WhenFn ?QUESTION) (not (knows ?AGENT ?FORMULA)))
% 		)
% 	)

fof( mergeA2733, axiom,
	p__d__subclass(c__Committing,c__LinguisticCommunication)
).



% ($documentation Committing EnglishLanguage "Instances of this &%Class commit the &%agent to some 
% future course.  For example, Bob promised Susan that he would be home by 11pm.") 


fof( mergeA2734, axiom,
	(![COMMIT,FORMULA]: 
		(
			(
				(
					(
						p__d__instance(COMMIT,c__Committing)
					)
				 &
					(
						p__patient(COMMIT,FORMULA)
					)
				 &
					(
						p__d__instance(FORMULA,c__Formula)
					)
				)
			)
			=>
			(
				p__modalAttribute(FORMULA,c__Promise)
			)
		)
	)
).


fof( mergeA2735, axiom,
	p__d__subclass(c__Offering,c__Committing)
).



% ($documentation Offering EnglishLanguage "The subclass of &%Committing in which a 
% &%CognitiveAgent offers something &%Physical to another agent.  Offerings 
% may be unconditional (in which case they are a promise to effect a 
% &%UnilateralGiving) or conditional (in which case they are a promise to 
% effect a &%Transaction of some sort).") 


fof( mergeA2736, axiom,
	p__d__subclass(c__Declaring,c__LinguisticCommunication)
).



% ($documentation Declaring EnglishLanguage "The &%Class of &%LinguisticCommunications that 
% effect an institutional alteration when performed by competent authority.  
% Some examples are nominating, marrying, and excommunicating.")


fof( mergeA2737, axiom,
	(![DECLARE]: 
		(
			(
				p__d__instance(DECLARE,c__Declaring)
			)
			=>
			(
				(?[PROP,NORM]: 
					(
						(
							(
								p__d__instance(NORM,c__ObjectiveNorm)
							)
						 &
							(
								p__d__instance(PROP,c__Formula)
							)
						 &
							(
								(
									p__confersNorm(DECLARE,PROP,NORM)
								 |
									p__deprivesNorm(DECLARE,PROP,NORM)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2738, axiom,
	p__d__subclass(c__Naming,c__Declaring)
).



% ($documentation Naming EnglishLanguage "The &%Process of assigning a name to someone or something.")


% 	(forall (?PROCESS ?NAME ?THING)
% 		(=> 
% 			(and 
% 				($instance ?PROCESS Naming)
% 				(patient ?PROCESS ?THING)
% 				(destination ?PROCESS ?NAME)
% 			)
% 			(holdsDuring (FutureFn (WhenFn ?PROCESS)) (names ?NAME ?THING))
% 		)
% 	)

fof( mergeA2740, axiom,
	p__d__subclass(c__Cooperation,c__SocialInteraction)
).



% ($documentation Cooperation EnglishLanguage "The &%subclass of &%SocialInteraction where 
% the participants involved work together for the achievement of a common 
% goal.")


fof( mergeA2741, axiom,
	(![COOPERATE]: 
		(
			(
				p__d__instance(COOPERATE,c__Cooperation)
			)
			=>
			(
				(?[PURP]: 
					(
						(
							(
								p__d__instance(PURP,c__Formula)
							)
						 &
							(
								(![AGENT]: 
									(
										(
											(
												(
													p__d__instance(AGENT,c__CognitiveAgent)
												)
											 &
												(
													p__agent(COOPERATE,AGENT)
												)
											)
										)
										=>
										(
											p__hasPurposeForAgent(COOPERATE,PURP,AGENT)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2742, axiom,
	p__d__subclass(c__Meeting,c__SocialInteraction)
).



% ($documentation Meeting EnglishLanguage "The coming together of two or more 
% &%CognitiveAgents for the purpose of &%Communication.  This covers informal 
% meetings, e.g. visits with family members, and formal meetings, e.g. a board 
% of directors meeting.")


% 	(forall (?MEET ?AGENT1 ?AGENT2)
% 		(=> 
% 			(and 
% 				($instance ?MEET Meeting)
% 				(agent ?MEET ?AGENT1)
% 				(agent ?MEET ?AGENT2)
% 			)
% 			(holdsDuring (WhenFn ?MEET) (orientation ?AGENT1 ?AGENT2 Near))
% 		)
% 	)

% 	(forall (?MEET ?COMM)
% 		(=> 
% 			($instance ?MEET Meeting)
% 			(exists (?AGENT1 ?AGENT2)
% 				(and 
% 					(agent ?MEET ?AGENT1)
% 					(agent ?MEET ?AGENT2)
% 					(hasPurpose ?MEET (exists ([|] ?COMM []) (and ([|] ($instance ?COMM Communication) ([|] (agent ?COMM ?AGENT1) ([|] (agent ?COMM ?AGENT2) []))))))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2745, axiom,
	p__d__subclass(c__Contest,c__SocialInteraction)
).



% ($documentation Contest EnglishLanguage "A &%SocialInteraction where the &%agent and 
% &%patient are &%CognitiveAgents who are trying to defeat one another.  
% Note that this concept is often applied in a metaphorical sense in natural 
% language, when we speak, e.g., of the struggle of plants for space or 
% sunlight, or of bacteria for food resources in some environment.")


fof( mergeA2746, axiom,
	(![CONTEST]: 
		(
			(
				p__d__instance(CONTEST,c__Contest)
			)
			=>
			(
				(?[AGENT1,AGENT2,PURP1,PURP2]: 
					(
						(
							(
								p__d__instance(AGENT1,c__CognitiveAgent)
							)
						 &
							(
								p__d__instance(AGENT2,c__CognitiveAgent)
							)
						 &
							(
								p__d__instance(PURP1,c__Formula)
							)
						 &
							(
								p__d__instance(PURP2,c__Formula)
							)
						 &
							(
								p__agent(CONTEST,AGENT1)
							)
						 &
							(
								p__agent(CONTEST,AGENT2)
							)
						 &
							(
								p__hasPurposeForAgent(CONTEST,PURP1,AGENT1)
							)
						 &
							(
								p__hasPurposeForAgent(CONTEST,PURP2,AGENT2)
							)
						 &
							(
								~ (
									( AGENT1 = AGENT2 )
								)
							)
						 &
							(
								~ (
									( PURP1 = PURP2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2747, axiom,
	p__d__subclass(c__ViolentContest,c__Contest)
).



% ($documentation ViolentContest EnglishLanguage "A &%Contest where one participant attempts to 
% physically injure another participant.")


fof( mergeA2748, axiom,
	p__d__subclass(c__War,c__ViolentContest)
).



% ($documentation War EnglishLanguage "A military confrontation between two or more 
% &%GeopoliticalAreas or &%Organizations whose members are &%GeopoliticalAreas.  
% As the corresponding axiom specifies, a &%War is made up of &%Battles.")


fof( mergeA2749, axiom,
	(![WAR]: 
		(
			(
				p__d__instance(WAR,c__War)
			)
			=>
			(
				(?[BATTLE]: 
					(
						(
							(
								p__d__instance(BATTLE,c__Battle)
							)
						 &
							(
								p__subProcess(BATTLE,WAR)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2750, axiom,
	(![WAR,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(AGENT,c__Collection)
					)
				 &
					(
						p__d__instance(WAR,c__War)
					)
				 &
					(
						p__agent(WAR,AGENT)
					)
				)
			)
			=>
			(
				(
					p__d__instance(AGENT,c__GeopoliticalArea)
				 |
					(
						(
							p__d__instance(AGENT,c__Organization)
						)
					 &
						(
							(![MEMBER]: 
								(
									(
										(
											(
												p__d__instance(MEMBER,c__SelfConnectedObject)
											)
										 &
											(
												p__member(MEMBER,AGENT)
											)
										)
									)
									=>
									(
										p__d__instance(MEMBER,c__GeopoliticalArea)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2751, axiom,
	p__d__subclass(c__Battle,c__ViolentContest)
).



% ($documentation Battle EnglishLanguage "A &%ViolentContest between two or more military 
% units within the context of a war.  Note that this does not cover the 
% metaphorical sense of 'battle', which simply means a struggle of some 
% sort.  This sense should be represented with the more general concept of 
% &%Contest.")


fof( mergeA2752, axiom,
	(![BATTLE]: 
		(
			(
				p__d__instance(BATTLE,c__Battle)
			)
			=>
			(
				(?[WAR]: 
					(
						(
							(
								p__d__instance(WAR,c__War)
							)
						 &
							(
								p__subProcess(BATTLE,WAR)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2753, axiom,
	(![BATTLE]: 
		(
			(
				p__d__instance(BATTLE,c__Battle)
			)
			=>
			(
				(?[ATTACK]: 
					(
						(
							(
								p__d__instance(ATTACK,c__ViolentContest)
							)
						 &
							(
								p__subProcess(ATTACK,BATTLE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2754, axiom,
	p__d__subclass(c__Game,c__Contest)
).


fof( mergeA2755, axiom,
	p__d__subclass(c__Game,c__RecreationOrExercise)
).



% ($documentation Game EnglishLanguage "A &%Contest whose purpose is the 
% enjoyment/stimulation of the participants or spectators of the &%Game.")


fof( mergeA2756, axiom,
	p__d__subclass(c__Sport,c__Game)
).



% ($documentation Sport EnglishLanguage "A &%Game which requires some degree of physical 
% exercion from the participants of the game.")


fof( mergeA2757, axiom,
	p__d__subclass(c__LegalAction,c__Contest)
).



% ($documentation LegalAction EnglishLanguage "Any &%Process where a &%CognitiveAgent seeks 
% to obtain something through a court of law.")


fof( mergeA2758, axiom,
	p__d__subclass(c__Maneuver,c__IntentionalProcess)
).



% ($documentation Maneuver EnglishLanguage "An intentional move or play within a &%Contest.  
% In many cases, a &%Maneuver is a realization of part of a strategy for 
% winning the &%Contest, but it also may be just an arbitrary or semi-arbitrary 
% division of the overarching &%Contest, e.g. innings in a baseball game.")


fof( mergeA2759, axiom,
	(![MOVE]: 
		(
			(
				p__d__instance(MOVE,c__Maneuver)
			)
			=>
			(
				(?[CONTEST]: 
					(
						(
							(
								p__d__instance(CONTEST,c__Contest)
							)
						 &
							(
								p__subProcess(MOVE,CONTEST)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2760, axiom,
	p__d__subclass(c__Attack,c__Maneuver)
).



% ($documentation Attack EnglishLanguage "A &%Maneuver in a &%ViolentContest where the 
% &%agent attempts to inflict damage on the &%patient.")


fof( mergeA2761, axiom,
	(![ATTACK]: 
		(
			(
				p__d__instance(ATTACK,c__Attack)
			)
			=>
			(
				(?[CONTEST]: 
					(
						(
							(
								p__d__instance(CONTEST,c__ViolentContest)
							)
						 &
							(
								p__subProcess(ATTACK,CONTEST)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?ATTACK ?DAMAGE ?OBJ ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?ATTACK Attack)
% 				(agent ?ATTACK ?AGENT)
% 				(patient ?ATTACK ?OBJ)
% 			)
% 			(hasPurposeForAgent ?ATTACK (exists ([|] ?DAMAGE []) (and ([|] ($instance ?DAMAGE Damaging) ([|] (patient ?DAMAGE ?OBJ) [])))) ?AGENT)
% 		)
% 	)

fof( mergeA2763, axiom,
	p__d__subclass(c__DefensiveManeuver,c__Maneuver)
).



% ($documentation DefensiveManeuver EnglishLanguage "A &%Maneuver in a &%ViolentContest 
% where the &%agent attempts to avoid being damaged.")


fof( mergeA2764, axiom,
	(![DEFENSE]: 
		(
			(
				p__d__instance(DEFENSE,c__DefensiveManeuver)
			)
			=>
			(
				(?[CONTEST]: 
					(
						(
							(
								p__d__instance(CONTEST,c__ViolentContest)
							)
						 &
							(
								p__subProcess(DEFENSE,CONTEST)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?DEFENSE ?DAMAGE ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?DEFENSE DefensiveManeuver)
% 				(agent ?DEFENSE ?AGENT)
% 			)
% 			(hasPurposeForAgent ?DEFENSE (not (exists ([|] ?DAMAGE []) (and ([|] ($instance ?DAMAGE Damaging) ([|] (patient ?DAMAGE ?AGENT) []))))) ?AGENT)
% 		)
% 	)

fof( mergeA2766, axiom,
	(![CONTEST,MANEUVER]: 
		(
			(
				(
					(
						p__d__instance(MANEUVER,c__Maneuver)
					)
				 &
					(
						p__d__instance(CONTEST,c__ViolentContest)
					)
				 &
					(
						p__subProcess(MANEUVER,CONTEST)
					)
				)
			)
			=>
			(
				(
					p__d__instance(MANEUVER,c__Attack)
				 |
					p__d__instance(MANEUVER,c__DefensiveManeuver)
				)
			)
		)
	)
).


fof( mergeA2767, axiom,
	p__d__subclass(c__Perception,c__PsychologicalProcess)
).



% ($documentation Perception EnglishLanguage "Sensing some aspect of the material world.  
% Note that the &%agent of this sensing is assumed to be an &%Animal.")


fof( mergeA2768, axiom,
	(![PERCEPT,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(PERCEPT,c__Perception)
					)
				 &
					(
						p__agent(PERCEPT,AGENT)
					)
				)
			)
			=>
			(
				p__d__instance(AGENT,c__Animal)
			)
		)
	)
).


fof( mergeA2769, axiom,
	(![AGENT]: 
		(
			(
				p__d__instance(AGENT,c__SentientAgent)
			)
			=>
			(
				p__capability(c__Perception,c__experiencer,AGENT)
			)
		)
	)
).


fof( mergeA2770, axiom,
	p__d__subclass(c__Seeing,c__Perception)
).



% ($documentation Seeing EnglishLanguage "The &%subclass of &%Perception in which the 
% sensing is done by an ocular &%Organ.")


% 	(forall (?SEE ?AGENT ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?SEE Seeing)
% 				(agent ?SEE ?AGENT)
% 				(patient ?SEE ?OBJ)
% 			)
% 			(exists (?PROP)
% 				(and 
% 					($instance ?PROP ColorAttribute)
% 					(knows ?AGENT (attribute ?OBJ ?PROP))
% 				)
% 			)
% 		)
% 	)

% 	(forall (?SEE ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?SEE Seeing)
% 				(patient ?SEE ?OBJ)
% 			)
% 			(holdsDuring (WhenFn ?SEE) (attribute ?OBJ Illuminated))
% 		)
% 	)

% 	(forall (?SEE ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?SEE Seeing)
% 				(patient ?SEE ?OBJ)
% 			)
% 			(exists (?ATTR)
% 				(and 
% 					($instance ?ATTR ColorAttribute)
% 					(holdsDuring (WhenFn ?SEE) (attribute ?OBJ ?ATTR))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2774, axiom,
	p__d__subclass(c__Looking,c__Seeing)
).


fof( mergeA2775, axiom,
	p__d__subclass(c__Looking,c__IntentionalProcess)
).



% ($documentation Looking EnglishLanguage "Any instance of &%Seeing which is intentional.")


fof( mergeA2776, axiom,
	p__d__subclass(c__Smelling,c__Perception)
).



% ($documentation Smelling EnglishLanguage "The &%subclass of &%Perception in which the 
% sensing is done by an olefactory &%Organ.")


fof( mergeA2777, axiom,
	(![SMELL,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(SMELL,c__Smelling)
					)
				 &
					(
						p__patient(SMELL,OBJ)
					)
				)
			)
			=>
			(
				(?[ATTR]: 
					(
						(
							(
								p__d__instance(ATTR,c__OlfactoryAttribute)
							)
						 &
							(
								p__attribute(OBJ,ATTR)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2778, axiom,
	p__d__subclass(c__Tasting,c__Perception)
).



% ($documentation Tasting EnglishLanguage "The &%subclass of &%Perception in which the 
% sensing is done by of an &%Organ which can discriminate various tastes.")


fof( mergeA2779, axiom,
	(![TASTE,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(TASTE,c__Tasting)
					)
				 &
					(
						p__patient(TASTE,OBJ)
					)
				)
			)
			=>
			(
				(?[ATTR]: 
					(
						(
							(
								p__d__instance(ATTR,c__TasteAttribute)
							)
						 &
							(
								p__attribute(OBJ,ATTR)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2780, axiom,
	p__d__subclass(c__Hearing,c__Perception)
).



% ($documentation Hearing EnglishLanguage "The &%subclass of &%Perception in which the 
% sensing is done by an auditory &%Organ.")


fof( mergeA2781, axiom,
	(![HEAR,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(HEAR,c__Hearing)
					)
				 &
					(
						p__patient(HEAR,OBJ)
					)
				)
			)
			=>
			(
				(?[ATTR]: 
					(
						(
							(
								p__d__instance(ATTR,c__SoundAttribute)
							)
						 &
							(
								p__attribute(OBJ,ATTR)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NS: add.
% )

fof( mergeA2782, axiom,
	p__d__subclass(c__SoundAttribute,c__PerceptualAttribute)
).


% ($comment 
% ;; JA: removed in AdimenSUMO 2.4
% ;;
% ;; ($subclass SoundAttribute RelationalAttribute)
% )


% ($documentation SoundAttribute EnglishLanguage "The volume of sound relative to a listener.")


fof( mergeA2783, axiom,
	p__d__instance(c__Audible,c__SoundAttribute)
).



% ($documentation Audible EnglishLanguage "A sound level capable of being heard by a &%Human.")


% 	(forall (?SOUND ?HEAR ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?SOUND RadiatingSound)
% 				(agent ?SOUND ?OBJ)
% 				(attribute ?SOUND Audible)
% 			)
% 			(exists (?HUMAN)
% 				(and 
% 					($instance ?HUMAN Human)
% 					(capability (KappaFn ?HEAR (and ([|] ($instance ?HEAR Hearing) ([|] (agent ?HEAR ?HUMAN) ([|] (destination ?HEAR ?HUMAN) ([|] (origin ?HEAR ?OBJ) [])))))) agent ?HUMAN)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2785, axiom,
	p__d__subclass(c__Listening,c__Hearing)
).


fof( mergeA2786, axiom,
	p__d__subclass(c__Listening,c__IntentionalProcess)
).



% ($documentation Listening EnglishLanguage "Any instance of &%Hearing which is intentional.")


fof( mergeA2787, axiom,
	p__d__subclass(c__TactilePerception,c__Perception)
).



% ($documentation TactilePerception EnglishLanguage "The &%subclass of &%Perception in which 
% the sensing is done by &%Touching.  Note that &%Touching need not involve 
% &%TactilePerception.  For example, a person who has lost all sensation in 
% both of his legs would have no &%TactilePerception of anything his legs 
% were &%Touching.")


fof( mergeA2788, axiom,
	(![TACTILE]: 
		(
			(
				p__d__instance(TACTILE,c__TactilePerception)
			)
			=>
			(
				(?[TOUCH]: 
					(
						(
							(
								p__d__instance(TOUCH,c__Touching)
							)
						 &
							(
								p__subProcess(TOUCH,TACTILE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2789, axiom,
	p__d__subclass(c__Radiating,c__Motion)
).



% ($documentation Radiating EnglishLanguage "Processes in which some form of electromagnetic 
% radiation, e.g. radio waves, light waves, electrical energy, etc., is given 
% off or absorbed by something else.")


fof( mergeA2790, axiom,
	p__d__subclass(c__RadiatingLight,c__RadiatingElectromagnetic)
).



% ($documentation RadiatingLight EnglishLanguage "The &%subclass of &%Radiating in which 
% light is given off or absorbed.  Some examples include blinking, flashing, 
% and glittering.")


fof( mergeA2791, axiom,
	(![REGION]: 
		(
			(
				p__d__instance(REGION,c__Object)
			)
			=>
			(
				(
					(?[EMIT]: 
						(
							(
								(
									p__d__instance(EMIT,c__RadiatingLight)
								)
							 &
								(
									p__patient(EMIT,REGION)
								)
							 &
								(
									p__d__instance(REGION,c__Region)
								)
							)
						)
					)
				)
				<=>
				(
					p__attribute(REGION,c__Illuminated)
				)
			)
		)
	)
).


fof( mergeA2792, axiom,
	p__d__subclass(c__RadiatingInfrared,c__RadiatingElectromagnetic)
).


fof( mergeA2793, axiom,
	p__d__subclass(c__RadiatingXRay,c__RadiatingElectromagnetic)
).


fof( mergeA2794, axiom,
	p__d__subclass(c__RadiatingSound,c__Radiating)
).



% ($documentation RadiatingSound EnglishLanguage "The &%subclass of &%Radiating in which 
% sound waves are given off or absorbed.  Some examples include creaking, 
% roaring, and whistling.")


fof( mergeA2795, axiom,
	(![EMIT,SOUND]: 
		(
			(
				(
					(
						p__d__instance(SOUND,c__Agent)
					)
				 &
					(
						p__d__instance(EMIT,c__RadiatingSound)
					)
				 &
					(
						p__agent(EMIT,SOUND)
					)
				)
			)
			=>
			(
				(?[ATTR]: 
					(
						(
							(
								p__d__instance(ATTR,c__SoundAttribute)
							)
						 &
							(
								p__attribute(SOUND,ATTR)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Removing this and renaming it to MakingMusic to be consistent with the Verb
% ;; form of most Processes
% ;;($subclass Music RadiatingSound)
% ;;(documentation Music EnglishLanguage "The &%subclass of &%RadiatingSound where the 
% ;;sound is intended to be melodic and is produced deliberately.")  
% )

fof( mergeA2796, axiom,
	p__d__subclass(c__MakingMusic,c__RadiatingSound)
).



% ($documentation MakingMusic EnglishLanguage "&%MakingMusic is a type of &%RadiatingSound
% where the &%result is intended to be melodic and is produced delibrately")


% (termFormat EnglishLanguage MakingMusic "making music")

% ($comment 
% ;; (comment MakingMusic "Changing the old Music to &%MakingMusic to be more consistent with the verb-form that &%Process seem to take. (09-14-2011)" "KJN")
% )

fof( mergeA2797, axiom,
	p__d__partition3(c__MakingMusic,c__MakingInstrumentalMusic,c__MakingVocalMusic)
).


fof( mergeA2798, axiom,
	p__d__subclass(c__MakingInstrumentalMusic,c__MakingMusic)
).



% ($documentation MakingInstrumentalMusic EnglishLanguage "&%MakingInstrumentalMusic is a type
% of &%MakingMusic which is produced using some kind of &%MusicalInstrument")


% (termFormat EnglishLanguage MakingInstrumentalMusic "instrumental music")

fof( mergeA2799, axiom,
	(![M]: 
		(
			(
				p__d__instance(M,c__MakingInstrumentalMusic)
			)
			=>
			(
				(?[I]: 
					(
						(
							(
								p__d__instance(I,c__MusicalInstrument)
							)
						 &
							(
								p__instrument(M,I)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2800, axiom,
	p__d__subclass(c__MakingVocalMusic,c__MakingMusic)
).


fof( mergeA2801, axiom,
	p__d__subclass(c__MakingVocalMusic,c__Vocalizing)
).



% ($documentation MakingVocalMusic EnglishLanguage "&%MakingVocalMusic is a type of
% &%MakingMusic which is produced by using the vocal cords")


% (termFormat EnglishLanguage MakingVocalMusic "singing")

% ($comment 
% ;; (comment MakingVocalMusic "Currently, &%VocalMusic also inherits from &%Speaking.  Changing this to more general &%Vocalizing.  Acapella groups today use their &%VocalCord to create music in ways that are more than just speaking. (09-14-2011)" "KJN")
% )

fof( mergeA2802, axiom,
	p__d__subclass(c__Singing,c__MakingVocalMusic)
).



% ($documentation Singing EnglishLanguage "&%Singing is a type of &%MakingVocalMusic wherein
% words are produced by the singer. This is different from other forms of &%MakingVocalMusic
% such as humming or scatting or beatboxing , where the vocal cords are used to create 
% the music but no words are formed.")


fof( mergeA2803, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Singing)
			)
			=>
			(
				(?[W]: 
					(
						(
							(
								p__patient(S,W)
							)
						 &
							(
								p__d__instance(W,c__Word)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2804, axiom,
	p__d__subclass(c__RadiatingElectromagnetic,c__Radiating)
).



% ($documentation RadiatingElectromagnetic EnglishLanguage "&%RadiatingElectromagnetic 
% is the subclass of &%Radiating processes in which electromagnetic 
% radiation is transmitted or absorbed.")


fof( mergeA2805, axiom,
	p__d__subclass(c__RadiatingNuclear,c__Radiating)
).



% ($documentation RadiatingNuclear EnglishLanguage "Releasing atomic energy, i.e. energy from 
% a nuclear reaction.")


fof( mergeA2806, axiom,
	p__d__subclass(c__StateChange,c__InternalChange)
).



% ($documentation StateChange EnglishLanguage "Any &%Process where the &%PhysicalState 
% of &%part of the &%patient of the &%Process changes.")


% 	(forall (?OBJ ?PROCESS)
% 		(=> 
% 			(and 
% 				($instance ?PROCESS StateChange)
% 				(patient ?PROCESS ?OBJ)
% 			)
% 			(exists (?PART ?STATE1 ?STATE2)
% 				(and 
% 					(part ?PART ?OBJ)
% 					($instance ?STATE1 PhysicalState)
% 					($instance ?STATE2 PhysicalState)
% 					(not 
% 						(equal ?STATE1 ?STATE2)
% 					)
% 					(holdsDuring (BeginFn (WhenFn ?PROCESS)) (attribute ?PART ?STATE1))
% 					(holdsDuring (EndFn (WhenFn ?PROCESS)) (attribute ?PART ?STATE2))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2808, axiom,
	p__d__instance(c__atomicNumber,c__BinaryPredicate)
).


fof( mergeA2809, axiom,
	p__d__instance(c__atomicNumber,c__AsymmetricRelation)
).


% 	($domainSubclass atomicNumber 1 ElementalSubstance)

% 	($domain atomicNumber 2 PositiveInteger)


% ($documentation atomicNumber EnglishLanguage "(&%atomicNumber ?ELEMENT ?NUMBER) means that 
% the &%ElementalSubstance ?ELEMENT has the atomic number ?NUMBER.  The 
% atomic number is the number of &%Protons in the nucleus of an &%Atom.") 


% 	(forall (?TYPE ?SUBSTANCE ?NUMBER ?ATOM ?PROTON)
% 		(=> 
% 			(atomicNumber ?TYPE ?NUMBER)
% 			(=> 
% 				(and 
% 					($instance ?SUBSTANCE ?TYPE)
% 					(part ?ATOM ?SUBSTANCE)
% 					($instance ?ATOM Atom)
% 				)
% 				(equal ?NUMBER (CardinalityFn (KappaFn ?PROTON (and ([|] (part ?PROTON ?ATOM) ([|] ($instance ?PROTON Proton) []))))))
% 			)
% 		)
% 	)

fof( mergeA2813, axiom,
	p__d__instance(c__boilingPoint,c__BinaryPredicate)
).


% 	($domainSubclass boilingPoint 1 PureSubstance)

% 	($domain boilingPoint 2 TemperatureMeasure)


% ($documentation boilingPoint EnglishLanguage "The temperature at which a &%PureSubstance changes
% state from a &%Liquid to a &%Gas.")


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?X ?Y)
% ;;     ($subclass ?Y PureSubstance)
% ;;     (barometricPressure ?X (MeasureFn ?PRES InchMercury))
% ;;     (greaterThan 29.92 ?PRES)
% ;;     (boilingPoint ?Y (MeasureFn ?BOIL KelvinDegree))
% ;;     (measure ?X (MeasureFn ?TEMP KelvinDegree))
% ;;     (greaterThan ?TEMP ?BOIL))
% ;;   (attribute ?X Gas))
% )

% 	(forall (?Y ?MELT ?TEMP ?BOIL ?X)
% 		(=> 
% 			(and 
% 				($instance ?X ?Y)
% 				($subclass ?Y PureSubstance)
% 				(boilingPoint ?Y (MeasureFn ?BOIL KelvinDegree))
% 				(meltingPoint ?Y (MeasureFn ?MELT KelvinDegree))
% 				(measure ?X (MeasureFn ?TEMP KelvinDegree))
% 				(greaterThan ?TEMP ?MELT)
% 				(lessThan ?TEMP ?BOIL)
% 			)
% 			(attribute ?X Liquid)
% 		)
% 	)

% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?X ?Y)
% ;;     ($subclass ?Y PureSubstance)
% ;;     (meltingPoint ?Y (MeasureFn ?MELT KelvinDegree))
% ;;     (barometricPressure ?X (MeasureFn ?PRES InchMercury))
% ;;     (greaterThan ?PRES 29.92)
% ;;     (measure ?X (MeasureFn ?TEMP KelvinDegree))
% ;;     (lessThan ?TEMP ?MELT))
% ;;   (attribute ?X Solid))
% )

% 	(forall (?TYPE ?BOILING ?SUBSTANCE ?MEASURE ?TEMP2 ?TEMP1)
% 		(=> 
% 			(and 
% 				($instance ?BOILING Boiling)
% 				(boilingPoint ?TYPE (MeasureFn ?TEMP1 ?MEASURE))
% 				($instance ?SUBSTANCE ?TYPE)
% 				(patient ?BOILING ?SUBSTANCE)
% 				(holdsDuring (WhenFn ?BOILING) (measure ?SUBSTANCE (MeasureFn ?TEMP2 ?MEASURE)))
% 				($instance ?MEASURE UnitOfTemperature)
% 			)
% 			(greaterThanOrEqualTo ?TEMP2 ?TEMP1)
% 		)
% 	)

% 	(forall (?TYPE ?MEASURE ?TEMP2 ?TEMP1 ?TIME ?SUBSTANCE)
% 		(=> 
% 			(and 
% 				(boilingPoint ?TYPE (MeasureFn ?TEMP1 ?MEASURE))
% 				($instance ?SUBSTANCE ?TYPE)
% 				(holdsDuring ?TIME (measure ?SUBSTANCE (MeasureFn ?TEMP2 ?MEASURE)))
% 				($instance ?MEASURE UnitOfTemperature)
% 				(greaterThanOrEqualTo ?TEMP2 ?TEMP1)
% 			)
% 			(or 
% 				(holdsDuring ?TIME (attribute ?SUBSTANCE Gas))
% 				(exists (?BOIL)
% 					(and 
% 						(overlapsTemporally (WhenFn ?BOIL) ?TIME)
% 						($instance ?BOIL Boiling)
% 						(patient ?BOIL ?SUBSTANCE)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2819, axiom,
	p__d__instance(c__meltingPoint,c__BinaryPredicate)
).


% 	($domainSubclass meltingPoint 1 PureSubstance)

% 	($domain meltingPoint 2 TemperatureMeasure)


% ($documentation meltingPoint EnglishLanguage "The temperature at which a &%PureSubstance changes
% state from a &%Solid to a &%Liquid.  Note that &%Arsenic can sublimate directly
% from &%Solid to &%Gas which means that its melting and boiling points are equal.")


% 	(forall (?TYPE ?MEASURE ?TEMP2 ?TEMP3 ?TEMP1 ?TIME ?BOIL ?SUBSTANCE)
% 		(=> 
% 			(and 
% 				($instance ?SUBSTANCE ?TYPE)
% 				(boilingPoint ?TYPE (MeasureFn ?TEMP1 ?MEASURE))
% 				(meltingPoint ?TYPE (MeasureFn ?TEMP2 ?MEASURE))
% 				($instance ?MEASURE UnitOfTemperature)
% 				(holdsDuring ?TIME (measure ?SUBSTANCE (MeasureFn ?TEMP3 ?MEASURE)))
% 				(greaterThan ?TEMP3 ?TEMP2)
% 				(lessThan ?TEMP3 ?TEMP1)
% 			)
% 			(or 
% 				(holdsDuring ?TIME (attribute ?SUBSTANCE Liquid))
% 				(exists (?MELT)
% 					(and 
% 						(overlapsTemporally (WhenFn ?MELT) ?TIME)
% 						($instance ?MELT Melting)
% 						(patient ?BOIL ?SUBSTANCE)
% 					)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?TYPE ?MEASURE ?TEMP2 ?TEMP1 ?TIME ?SUBSTANCE)
% 		(=> 
% 			(and 
% 				($instance ?SUBSTANCE ?TYPE)
% 				(meltingPoint ?TYPE (MeasureFn ?TEMP1 ?MEASURE))
% 				(holdsDuring ?TIME (measure ?SUBSTANCE (MeasureFn ?TEMP2 ?MEASURE)))
% 				($instance ?MEASURE UnitOfTemperature)
% 				(lessThan ?TEMP2 ?TEMP1)
% 			)
% 			(or 
% 				(holdsDuring ?TIME (attribute ?SUBSTANCE Solid))
% 				(exists (?FREEZE)
% 					(and 
% 						(overlapsTemporally (WhenFn ?FREEZE) ?TIME)
% 						($instance ?FREEZE Freezing)
% 						(patient ?FREEZE ?SUBSTANCE)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA2824, axiom,
	(![TYPE,BOIL,MELT]: 
		(
			(
				(
					(
						p__d__instance(MELT,c__TemperatureMeasure)
					)
				 &
					(
						p__d__subclass(TYPE,c__PureSubstance)
					)
				 &
					(
						p__d__instance(BOIL,c__TemperatureMeasure)
					)
				 &
					(
						p__meltingPoint(TYPE,MELT)
					)
				 &
					(
						p__boilingPoint(TYPE,BOIL)
					)
				)
			)
			=>
			(
				p__greaterThanOrEqualTo(BOIL,MELT)
			)
		)
	)
).


fof( mergeA2825, axiom,
	p__d__subclass(c__Melting,c__StateChange)
).



% ($documentation Melting EnglishLanguage "The &%Class of &%Processes where an &%Object is 
% heated and converted from a &%Solid to a &%Liquid.")


fof( mergeA2826, axiom,
	(![MELT]: 
		(
			(
				p__d__instance(MELT,c__Melting)
			)
			=>
			(
				(?[HEAT]: 
					(
						(
							(
								p__d__instance(HEAT,c__Heating)
							)
						 &
							(
								p__subProcess(HEAT,MELT)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?OBJ ?MELT)
% 		(=> 
% 			(and 
% 				($instance ?MELT Melting)
% 				(patient ?MELT ?OBJ)
% 			)
% 			(exists (?PART)
% 				(and 
% 					(part ?PART ?OBJ)
% 					(holdsDuring (BeginFn (WhenFn ?MELT)) (attribute ?PART Solid))
% 					(holdsDuring (EndFn (WhenFn ?MELT)) (attribute ?PART Liquid))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2828, axiom,
	p__d__subclass(c__Boiling,c__StateChange)
).



% ($documentation Boiling EnglishLanguage "The &%Class of &%Processes where a &%Substance is 
% heated and converted from a &%Liquid to a &%Gas.")


fof( mergeA2829, axiom,
	(![BOIL]: 
		(
			(
				p__d__instance(BOIL,c__Boiling)
			)
			=>
			(
				(?[HEAT]: 
					(
						(
							(
								p__d__instance(HEAT,c__Heating)
							)
						 &
							(
								p__subProcess(HEAT,BOIL)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?OBJ ?BOIL)
% 		(=> 
% 			(and 
% 				($instance ?BOIL Boiling)
% 				(patient ?BOIL ?OBJ)
% 			)
% 			(exists (?PART)
% 				(and 
% 					(part ?PART ?OBJ)
% 					(holdsDuring (BeginFn (WhenFn ?BOIL)) (attribute ?PART Liquid))
% 					(holdsDuring (EndFn (WhenFn ?BOIL)) (attribute ?PART Gas))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2831, axiom,
	p__d__subclass(c__Evaporating,c__StateChange)
).



% ($documentation Evaporating EnglishLanguage "The &%Class of &%Processes where a &%Substance is 
% converted from a &%Liquid to a &%Gas at a temperature below its
% &%Boiling point.")


% 	(forall (?MEAS ?OBJ ?BOILVAL ?VAL ?EVAP)
% 		(=> 
% 			(and 
% 				($instance ?EVAP Evaporating)
% 				(boilingPoint ?OBJ (MeasureFn ?BOILVAL ?MEAS))
% 				(measure ?OBJ (MeasureFn ?VAL ?MEAS))
% 				($instance ?MEAS UnitOfTemperature)
% 				(patient ?EVAP ?OBJ)
% 			)
% 			(exists (?PART)
% 				(and 
% 					(part ?PART ?OBJ)
% 					(greaterThan ?BOILVAL ?VAL)
% 					(holdsDuring (BeginFn (WhenFn ?EVAP)) (attribute ?PART Liquid))
% 					(holdsDuring (EndFn (WhenFn ?EVAP)) (attribute ?PART Gas))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2833, axiom,
	p__d__subclass(c__Condensing,c__StateChange)
).



% ($documentation Condensing EnglishLanguage "The &%Class of &%Processes where an &%Object is 
% cooled and converted from a &%Gas to a &%Liquid.")


fof( mergeA2834, axiom,
	(![COND]: 
		(
			(
				p__d__instance(COND,c__Condensing)
			)
			=>
			(
				(?[COOL]: 
					(
						(
							(
								p__d__instance(COOL,c__Cooling)
							)
						 &
							(
								p__subProcess(COOL,COND)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?OBJ ?COND)
% 		(=> 
% 			(and 
% 				($instance ?COND Condensing)
% 				(patient ?COND ?OBJ)
% 			)
% 			(exists (?PART)
% 				(and 
% 					(part ?PART ?OBJ)
% 					(holdsDuring (BeginFn (WhenFn ?COND)) (attribute ?PART Gas))
% 					(holdsDuring (EndFn (WhenFn ?COND)) (attribute ?PART Liquid))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2836, axiom,
	p__d__subclass(c__Freezing,c__StateChange)
).



% ($documentation Freezing EnglishLanguage "The &%Class of &%Processes where an &%Object is 
% cooled and converted from a &%Liquid to a &%Solid.")


fof( mergeA2837, axiom,
	(![FREEZE]: 
		(
			(
				p__d__instance(FREEZE,c__Freezing)
			)
			=>
			(
				(?[COOL]: 
					(
						(
							(
								p__d__instance(COOL,c__Cooling)
							)
						 &
							(
								p__subProcess(COOL,FREEZE)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?OBJ ?FREEZE)
% 		(=> 
% 			(and 
% 				($instance ?FREEZE Freezing)
% 				(patient ?FREEZE ?OBJ)
% 			)
% 			(exists (?PART)
% 				(and 
% 					(part ?PART ?OBJ)
% 					(holdsDuring (BeginFn (WhenFn ?FREEZE)) (attribute ?PART Liquid))
% 					(holdsDuring (EndFn (WhenFn ?FREEZE)) (attribute ?PART Solid))
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; END FILE
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;
% ;;    OBJECTS    ;;
% ;;;;;;;;;;;;;;;;;;;
% ;;
% ;; INCLUDES 'MEREOTOPOLOGY'
% ;; INCLUDES 'PROCESSES'
% ;; INCLUDES 'QUALITIES'
% )

fof( mergeA2839, axiom,
	p__d__subclass(c__AstronomicalBody,c__Object)
).


fof( mergeA2840, axiom,
	p__d__disjoint(c__AstronomicalBody,c__GeographicArea)
).



% ($documentation AstronomicalBody EnglishLanguage "The &%Class of all astronomical 
% objects of significant size.  It includes &%SelfConnectedObjects 
% like planets, stars, and asteroids, as well as &%Collections like 
% nebulae, galaxies, and constellations.  Note that the planet Earth 
% is an &%AstronomicalBody, but every &%Region of Earth is a 
% &%GeographicArea.")


fof( mergeA2841, axiom,
	p__d__subclass(c__GeographicArea,c__Region)
).


fof( mergeA2842, axiom,
	p__d__partition3(c__GeographicArea,c__WaterArea,c__LandArea)
).



% ($documentation GeographicArea EnglishLanguage "A geographic location, generally having 
% definite boundaries.  Note that this differs from its immediate superclass 
% &%Region in that a &%GeographicArea is a three-dimensional &%Region of the 
% earth.  Accordingly, all astronomical objects other than earth and all 
% one-dimensional and two-dimensional &%Regions are not classed under 
% &%GeographicArea.") 


fof( mergeA2843, axiom,
	p__d__subclass(c__LocalizablePlace,c__GeographicArea)
).


fof( mergeA2844, axiom,
	p__d__instance(c__geographicSubregion,c__BinaryPredicate)
).


fof( mergeA2845, axiom,
	p__d__instance(c__geographicSubregion,c__TransitiveRelation)
).


fof( mergeA2846, axiom,
	p__d__instance(c__geographicSubregion,c__AsymmetricRelation)
).


fof( mergeA2847, axiom,
	p__subrelation(c__geographicSubregion,c__properPart)
).


fof( mergeA2848, axiom,
	p__subrelation(c__geographicSubregion,c__located)
).


% 	($domain geographicSubregion 1 GeographicArea)

% 	($domain geographicSubregion 2 GeographicArea)


% ($documentation geographicSubregion EnglishLanguage "(&%geographicSubregion ?PART ?WHOLE) 
% means that the &%GeographicArea ?PART is part of the &%GeographicArea 
% ?WHOLE.")


fof( mergeA2851, axiom,
	p__d__subclass(c__GeopoliticalArea,c__GeographicArea)
).


fof( mergeA2852, axiom,
	p__d__subclass(c__GeopoliticalArea,c__Agent)
).



% ($documentation GeopoliticalArea EnglishLanguage "Any &%GeographicArea which is associated 
% with some sort of political structure.  This class includes &%Lands, 
% &%Cities, districts of cities, counties, etc.  Note that the identity 
% of a &%GeopoliticalArea may remain constant after a change in borders.")


fof( mergeA2853, axiom,
	(![AREA,PERSON]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__d__instance(AREA,c__GeopoliticalArea)
					)
				 &
					(
						p__leader(f__GovernmentFn1(AREA),PERSON)
					)
				)
			)
			=>
			(
				p__leader(AREA,PERSON)
			)
		)
	)
).


fof( mergeA2854, axiom,
	(![AREA,PERSON]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__d__instance(AREA,c__GeopoliticalArea)
					)
				 &
					(
						p__leader(AREA,PERSON)
					)
				)
			)
			=>
			(
				p__leader(f__GovernmentFn1(AREA),PERSON)
			)
		)
	)
).


fof( mergeA2855, axiom,
	(![AGENT,EVENT]: 
		(
			(
				(
					(
						p__d__instance(EVENT,c__Election)
					)
				 &
					(
						p__agent(EVENT,AGENT)
					)
				 &
					(
						p__d__instance(AGENT,c__GeopoliticalArea)
					)
				)
			)
			=>
			(
				p__d__instance(EVENT,c__PoliticalProcess)
			)
		)
	)
).


% 	(forall (?AGENT ?AREA ?EVENT)
% 		(=> 
% 			(and 
% 				($instance ?EVENT Election)
% 				(agent ?EVENT ?AGENT)
% 				($instance ?AREA GeopoliticalArea)
% 				($instance ?AGENT (GovernmentFn ?AREA))
% 			)
% 			($instance ?EVENT PoliticalProcess)
% 		)
% 	)

fof( mergeA2857, axiom,
	p__d__instance(c__geopoliticalSubdivision,c__AsymmetricRelation)
).


fof( mergeA2858, axiom,
	p__d__instance(c__geopoliticalSubdivision,c__TransitiveRelation)
).


fof( mergeA2859, axiom,
	p__subrelation(c__geopoliticalSubdivision,c__geographicSubregion)
).


% 	($domain geopoliticalSubdivision 1 GeopoliticalArea)

% 	($domain geopoliticalSubdivision 2 GeopoliticalArea)


% ($documentation geopoliticalSubdivision EnglishLanguage "(&%geopoliticalSubdivision 
% ?AREA1 ?AREA2) means that ?AREA1 is any geopolitical part of ?AREA2, 
% that is, ?AREA1 is an integral &%geographicSubregion of ?AREA2 (not a 
% &%DependencyOrSpecialSovereigntyArea), having its own associated 
% &%GovernmentOrganization which is subordinated to or constrained by 
% the government of ?AREA2.  Cf. &%dependentGeopoliticalArea.") 


% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;   (geopoliticalSubdivision ?SUB ?AREA)
% ;;   (not ($instance ?SUB Nation)))
% ;;
% ;; NS: Note that Government.kif contains the following formulae:
% ;;
% ;; ($subclass IndependentState Nation)
% ;; 
% ;; (=>
% ;;   (geopoliticalSubdivision ?SUB ?AREA)
% ;;   (not ($instance ?SUB IndependentState)))
% ;;
% ;; It would be best to rewrite all rules in which &%Nation is used in
% ;; the sense of &%IndependentState so that they use
% ;; &%IndependentState.  This would allow &%Nation to be interpreted in
% ;; a more general "cultural" or "homeland" sense, as suggested by
% ;; ($subclass IndependentState Nation).  England, Scotland, Wales, and
% ;; NorthernIreland, for example, would be &%Nations, but not
% ;; (currently) &%IndependentStates.
% )

fof( mergeA2862, axiom,
	p__d__subclass(c__WaterArea,c__GeographicArea)
).



% ($documentation WaterArea EnglishLanguage "A body which is made up predominantly of water, 
% e.g. rivers, lakes, oceans, etc.")


fof( mergeA2863, axiom,
	(![AREA]: 
		(
			(
				p__d__instance(AREA,c__WaterArea)
			)
			=>
			(
				(?[BED,HOLE,WATER]: 
					(
						(
							(
								p__d__instance(HOLE,c__Hole)
							)
						 &
							(
								p__d__instance(BED,c__Object)
							)
						 &
							(
								( f__HoleHostFn1(HOLE) = BED )
							)
						 &
							(
								p__d__instance(WATER,c__Water)
							)
						 &
							(
								p__properlyFills(WATER,HOLE)
							)
						 &
							(
								( f__MereologicalSumFn2(BED,WATER) = AREA )
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2864, axiom,
	p__d__subclass(c__SaltWaterArea,c__WaterArea)
).


fof( mergeA2865, axiom,
	p__d__disjoint(c__SaltWaterArea,c__FreshWaterArea)
).



% ($documentation SaltWaterArea EnglishLanguage "A &%WaterArea whose &%Water is saline, e.g. 
% oceans and seas.")


fof( mergeA2866, axiom,
	p__d__subclass(c__FreshWaterArea,c__WaterArea)
).



% ($documentation FreshWaterArea EnglishLanguage "A &%WaterArea whose &%Water is not saline, 
% e.g. most rivers and lakes.")


% ($comment 
% ;; KJN: Moving this to MILO to remove dependencies
% ;;($subclass StreamWaterArea WaterArea)
% ;;($disjoint StreamWaterArea StaticWaterArea)
% ;;(documentation StreamWaterArea EnglishLanguage "A relatively narrow &%WaterArea where the 
% ;;water flows constantly and in the same direction, e.g. a river, a stream, 
% ;;etc.")
% ;;
% ;;($subclass StaticWaterArea WaterArea)
% ;;(documentation StaticWaterArea EnglishLanguage "A &%WaterArea in which water does not flow 
% ;;constantly or in the same direction, e.g. most lakes and ponds.")
% )

fof( mergeA2867, axiom,
	p__d__subclass(c__LandArea,c__GeographicArea)
).



% ($documentation LandArea EnglishLanguage "An area which is predominantly solid ground, 
% e.g. a &%Nation, a mountain, a desert, etc.  Note that a &%LandArea may 
% contain some relatively small &%WaterAreas.  For example, Australia is 
% a &%LandArea even though it contains various rivers and lakes.")


fof( mergeA2868, axiom,
	(![LAND1]: 
		(
			(
				p__d__instance(LAND1,c__LandArea)
			)
			=>
			(
				(?[LAND2]: 
					(
						(
							(
								p__d__instance(LAND2,c__Object)
							)
						 &
							(
								p__part(LAND1,LAND2)
							)
						 &
							(
								(
									p__d__instance(LAND2,c__Continent)
								 |
									p__d__instance(LAND2,c__Island)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2869, axiom,
	p__d__subclass(c__ShoreArea,c__LandArea)
).



% ($documentation ShoreArea EnglishLanguage "A &%ShoreArea is a &%LandArea approximately 
% 1-3 km wide bordering a body of water, such as an ocean, bay, river, 
% or lake.  A &%ShoreArea may comprise a variety of &%LandForms, such as dunes, 
% sloughs, and marshes.")


fof( mergeA2870, axiom,
	(![BANK]: 
		(
			(
				p__d__instance(BANK,c__ShoreArea)
			)
			=>
			(
				(?[WATER]: 
					(
						(
							(
								p__d__instance(WATER,c__WaterArea)
							)
						 &
							(
								p__meetsSpatially(BANK,WATER)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2871, axiom,
	p__d__subclass(c__Continent,c__LandArea)
).


fof( mergeA2872, axiom,
	( f__CardinalityFn1(c__Continent) = c__7 )
).



% ($documentation Continent EnglishLanguage "As defined in the CIA World Fact Book, 
% &%Continent covers seven land masses: &%Africa, &%NorthAmerica, 
% &%SouthAmerica, &%Antarctica, &%Europe, &%Asia, and &%Oceania.  
% Note that &%Australia, counted as a continent in some other systems, 
% is included in &%Oceania in the Fact Book.  As a consequence, there 
% is no &%Nation which is also a &%Continent.")


fof( mergeA2873, axiom,
	p__d__subclass(c__Island,c__LandArea)
).



% ($documentation Island EnglishLanguage "A &%LandArea that is completely surrounded by a &%WaterArea.")


fof( mergeA2874, axiom,
	(![ISLAND]: 
		(
			(
				p__d__instance(ISLAND,c__Island)
			)
			=>
			(
				(![AREA,PART1,PART2]: 
					(
						(
							~ (
								p__d__instance(AREA,c__Object)
							)
						 |
							~ (
								p__d__instance(PART1,c__Object)
							)
						 |
							~ (
								p__d__instance(PART2,c__Object)
							)
						 |
							~ (
								p__d__instance(AREA,c__LandArea)
							)
						 |
							~ (
								p__part(PART1,ISLAND)
							)
						 |
							~ (
								p__part(PART2,AREA)
							)
						 |
							p__part(ISLAND,AREA)
						 |
							p__part(AREA,ISLAND)
						 |
							~ (
								p__meetsSpatially(PART1,PART2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2875, axiom,
	(![ISLE,AREA]: 
		(
			(
				(
					(
						p__d__instance(ISLE,c__Island)
					)
				 &
					(
						p__d__instance(AREA,c__GeographicArea)
					)
				 &
					(
						p__meetsSpatially(ISLE,AREA)
					)
				)
			)
			=>
			(
				~ (
					p__d__instance(AREA,c__LandArea)
				)
			)
		)
	)
).


fof( mergeA2876, axiom,
	(![ISLE]: 
		(
			(
				p__d__instance(ISLE,c__Island)
			)
			=>
			(
				(?[WATER]: 
					(
						(
							(
								p__d__instance(WATER,c__WaterArea)
							)
						 &
							(
								p__meetsSpatially(ISLE,WATER)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2877, axiom,
	p__d__subclass(c__Nation,c__GeopoliticalArea)
).


fof( mergeA2878, axiom,
	p__d__subclass(c__Nation,c__LandArea)
).



% ($documentation Nation EnglishLanguage "The broadest &%GeopoliticalArea, i.e. &%Nations are 
% &%GeopoliticalAreas that are not part of any other overarching and 
% comprehensive governance structure (excepting commonwealths and other sorts 
% of loose international organizations).")


fof( mergeA2879, axiom,
	p__d__subclass(c__StateOrProvince,c__GeopoliticalArea)
).


fof( mergeA2880, axiom,
	p__d__subclass(c__StateOrProvince,c__LandArea)
).



% ($documentation StateOrProvince EnglishLanguage "Administrative subdivisions of a 
% &%Nation that are broader than any other political subdivisions that 
% may exist.  This &%Class includes the states of the United States, as 
% well as the provinces of Canada and European countries.")


fof( mergeA2881, axiom,
	(![STATE]: 
		(
			(
				p__d__instance(STATE,c__StateOrProvince)
			)
			=>
			(
				(?[LAND]: 
					(
						(
							(
								p__d__instance(LAND,c__Nation)
							)
						 &
							(
								p__properPart(STATE,LAND)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2882, axiom,
	p__d__subclass(c__City,c__GeopoliticalArea)
).


fof( mergeA2883, axiom,
	p__d__subclass(c__City,c__LandArea)
).



% ($documentation City EnglishLanguage "A &%LandArea of relatively small size, inhabited 
% by a community of people, and having some sort of political structure.  
% Note that this class includes both large cities and small settlements 
% like towns, villages, hamlets, etc.")


fof( mergeA2884, axiom,
	p__d__subclass(c__County,c__GeopoliticalArea)
).


fof( mergeA2885, axiom,
	p__d__subclass(c__County,c__LandArea)
).



% ($documentation County EnglishLanguage "A &%GeopoliticalArea that is larger than a city, 
% usually encompassing several cities, and smaller than a &%StateOrProvince.  
% Aside from City, this is the smallest geopolitical subdivision, and it is 
% known by various names in various counties, e.g.  parrish, commune, etc.") 


fof( mergeA2886, axiom,
	(![STATE]: 
		(
			(
				p__d__instance(STATE,c__County)
			)
			=>
			(
				(?[LAND]: 
					(
						(
							(
								p__d__instance(LAND,c__StateOrProvince)
							)
						 &
							(
								p__properPart(STATE,LAND)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2887, axiom,
	p__d__subclass(c__Transitway,c__Region)
).


fof( mergeA2888, axiom,
	p__d__subclass(c__Transitway,c__SelfConnectedObject)
).



% ($documentation Transitway EnglishLanguage "&%Transitway is the broadest class 
% of regions which may be passed through as a &%path in instances 
% of &%Translocation.  &%Transitway includes land, air, and sea 
% regions, and it includes both natural and artificial transitways.")


fof( mergeA2889, axiom,
	p__d__subclass(c__LandTransitway,c__Transitway)
).


fof( mergeA2890, axiom,
	p__d__subclass(c__LandTransitway,c__LandArea)
).



% ($documentation LandTransitway EnglishLanguage "&%LandTransitway is the subclass of 
% &%Transitway that represents areas intended for motion over the ground.")


% 	(forall (?TRANSPORT ?WAY)
% 		(=> 
% 			($instance ?WAY Transitway)
% 			(hasPurpose ?WAY (exists ([|] ?TRANSPORT []) (and ([|] ($instance ?TRANSPORT Transportation) ([|] (path ?TRANSPORT ?WAY) [])))))
% 		)
% 	)

fof( mergeA2892, axiom,
	p__d__subclass(c__Roadway,c__LandTransitway)
).



% ($documentation Roadway EnglishLanguage "&%Roadway is the subclass of &%LandTransitways 
% that are areas intended for surface travel by self-powered, wheeled 
% vehicles, excluding those that travel on tracks.  &%Roadways have been 
% at least minimally improved to enable the passage of vehicles.  
% &%Roadways include dirt and gravelled roads, paved streets, and 
% expressways.")


fof( mergeA2893, axiom,
	p__d__subclass(c__Water,c__CompoundSubstance)
).



% ($documentation Water EnglishLanguage "The &%Class of samples of the compound H20.  Note 
% that this &%Class covers both pure and impure &%Water.")


fof( mergeA2894, axiom,
	p__d__subclass(c__Mineral,c__Substance)
).



% ($documentation Mineral EnglishLanguage "Any of various naturally occurring homogeneous 
% substances (such as stone, coal, salt, sulfur, sand, petroleum), or 
% synthetic substances having the chemical composition and crystalline form 
% and properties of a naturally occurring mineral.") 


fof( mergeA2895, axiom,
	p__d__instance(c__developmentalForm,c__BinaryPredicate)
).


fof( mergeA2896, axiom,
	p__d__instance(c__developmentalForm,c__AsymmetricRelation)
).


fof( mergeA2897, axiom,
	p__d__instance(c__developmentalForm,c__TransitiveRelation)
).


fof( mergeA2898, axiom,
	p__subrelation(c__developmentalForm,c__attribute)
).


% 	($domain developmentalForm 1 OrganicObject)

% 	($domain developmentalForm 2 DevelopmentalAttribute)

% ($comment 
% ;; NS: delete.
% ;; (documentation developmentalForm EnglishLanguage "(&%developmentalForm ?OBJECT ?FORM) 
% ;; means that ?FORM is an earlier stage in the individual maturation of 
% ;; ?OBJECT.  For example, tadpole and caterpillar are &%developmentalForms 
% ;; of frogs and butterflies, respectively.")
% ;;
% ;; NS: add.
% )


% ($documentation developmentalForm EnglishLanguage "(&%developmentalForm
% ?OBJECT ?FORM) means that ?FORM describes a stage in the individual
% maturation of ?OBJECT.  For example, tadpole and caterpillar are
% &%developmentalForms of frogs and butterflies, respectively.")


% 	(forall (?ATTR1 ?TIME1 ?OBJ ?ATTR2)
% 		(=> 
% 			(and 
% 				(holdsDuring ?TIME1 (developmentalForm ?OBJ ?ATTR1))
% 				(successorAttributeClosure ?ATTR2 ?ATTR1)
% 			)
% 			(exists (?TIME2)
% 				(and 
% 					(earlier ?TIME2 ?TIME1)
% 					(holdsDuring ?TIME2 (developmentalForm ?OBJ ?ATTR2))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2902, axiom,
	p__d__subclass(c__OrganicObject,c__CorpuscularObject)
).


fof( mergeA2903, axiom,
	p__d__subclass(c__OrganicObject,c__OrganicThing)
).


fof( mergeA2904, axiom,
	p__d__partition3(c__OrganicObject,c__Organism,c__AnatomicalStructure)
).



% ($documentation OrganicObject EnglishLanguage "This class encompasses &%Organisms, 
% &%CorpuscularObjects that are parts of &%Organisms, i.e. &%BodyParts, 
% and &%CorpuscularObjects that are nonintentionally produced by 
% &%Organisms, e.g. &%ReproductiveBodies.")


fof( mergeA2905, axiom,
	p__d__subclass(c__Organism,c__OrganicObject)
).


fof( mergeA2906, axiom,
	p__d__subclass(c__Organism,c__Agent)
).


fof( mergeA2907, axiom,
	p__d__disjoint(c__Organism,c__Artifact)
).


fof( mergeA2908, axiom,
	p__d__partition4(c__Organism,c__Animal,c__Plant,c__Microorganism)
).



% ($documentation Organism EnglishLanguage "Generally, a living individual, including all 
% &%Plants and &%Animals.")


fof( mergeA2909, axiom,
	(![ORGANISM]: 
		(
			(
				p__d__instance(ORGANISM,c__Organism)
			)
			=>
			(
				(?[BIRTH]: 
					(
						(
							(
								p__d__instance(BIRTH,c__Birth)
							)
						 &
							(
								p__experiencer(BIRTH,ORGANISM)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2910, axiom,
	p__d__instance(c__inhabits,c__BinaryPredicate)
).


fof( mergeA2911, axiom,
	p__d__instance(c__inhabits,c__AsymmetricRelation)
).


% 	($domain inhabits 1 Organism)

% 	($domain inhabits 2 Object)


% ($documentation inhabits EnglishLanguage "A very basic notion of living within something 
% else.  (&%inhabits ?ORGANISM ?OBJECT) means that ?OBJECT is the residence 
% (either permanent or temporary), nest, etc. of ?ORGANISM.")


% 	(forall (?T1 ?ORGANISM ?OBJ)
% 		(=> 
% 			(holdsDuring ?T1 (inhabits ?ORGANISM ?OBJ))
% 			(exists (?TIME)
% 				(and 
% 					($instance ?TIME TimeInterval)
% 					(temporalPart ?TIME ?T1)
% 					(holdsDuring ?TIME (located ?ORGANISM ?OBJ))
% 				)
% 			)
% 		)
% 	)

fof( mergeA2915, axiom,
	p__subrelation(c__home,c__inhabits)
).


% 	($domain home 1 Human)

% 	($domain home 2 PermanentResidence)


% ($documentation home EnglishLanguage "The relation between a &%Human and a &%PermanentResidence 
% of the &%Human.")


fof( mergeA2918, axiom,
	p__subrelation(c__stays,c__inhabits)
).


fof( mergeA2919, axiom,
	p__disjointRelation(c__stays,c__home)
).


% 	($domain stays 1 Human)

% 	($domain stays 2 TemporaryResidence)


% ($documentation stays EnglishLanguage "The relation between a &%Human and a &%TemporaryResidence 
% of the &%Human.")


fof( mergeA2922, axiom,
	p__d__subclass(c__Plant,c__Organism)
).



% ($documentation Plant EnglishLanguage "An &%Organism having cellulose cell walls, growing 
% by synthesis of &%Substances, generally distinguished by the presence of 
% chlorophyll, and lacking the power of locomotion.")


fof( mergeA2923, axiom,
	p__d__subclass(c__FloweringPlant,c__Plant)
).



% ($documentation FloweringPlant EnglishLanguage "A &%Plant that produces seeds and flowers.  
% This class includes trees, shrubs, herbs, and flowers.")


fof( mergeA2924, axiom,
	p__d__subclass(c__NonFloweringPlant,c__Plant)
).


fof( mergeA2925, axiom,
	p__d__disjoint(c__NonFloweringPlant,c__FloweringPlant)
).


fof( mergeA2926, axiom,
	p__d__disjointDecomposition4(c__NonFloweringPlant,c__Alga,c__Fern,c__Moss)
).



% ($documentation NonFloweringPlant EnglishLanguage "A &%Plant that reproduces with spores and 
% does not produce flowers.")


fof( mergeA2927, axiom,
	p__d__subclass(c__Alga,c__NonFloweringPlant)
).



% ($documentation Alga EnglishLanguage "A chiefly aquatic plant that contains chlorophyll, 
% but does not form embryos during development and lacks vascular tissue.")


fof( mergeA2928, axiom,
	(![ALGA]: 
		(
			(
				p__d__instance(ALGA,c__Alga)
			)
			=>
			(
				(?[WATER]: 
					(
						(
							(
								p__inhabits(ALGA,WATER)
							)
						 &
							(
								p__d__instance(WATER,c__Water)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2929, axiom,
	p__d__subclass(c__Fungus,c__Organism)
).



% ($documentation Fungus EnglishLanguage "A eukaryotic &%Organism characterized by the 
% absence of chlorophyll and the presence of rigid cell walls. Included 
% here are both slime molds and true fungi such as yeasts, molds, mildews, 
% and mushrooms.")


fof( mergeA2930, axiom,
	(![FUNGUS,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(FUNGUS,c__Fungus)
					)
				 &
					(
						p__inhabits(FUNGUS,OBJ)
					)
				)
			)
			=>
			(
				p__d__instance(OBJ,c__Organism)
			)
		)
	)
).


fof( mergeA2931, axiom,
	p__d__subclass(c__Moss,c__NonFloweringPlant)
).



% ($documentation Moss EnglishLanguage "A &%NonFloweringPlant without true roots and little 
% if any vascular tissue.")


fof( mergeA2932, axiom,
	p__d__subclass(c__Fern,c__NonFloweringPlant)
).



% ($documentation Fern EnglishLanguage "A &%NonFloweringPlant that contains vascular tissue.  
% This class includes true ferns, as well as horsetails, club mosses, and 
% whisk ferns.")


fof( mergeA2933, axiom,
	p__d__subclass(c__Animal,c__Organism)
).


fof( mergeA2934, axiom,
	p__d__partition3(c__Animal,c__Vertebrate,c__Invertebrate)
).



% ($documentation Animal EnglishLanguage "An &%Organism with eukaryotic &%Cells, and lacking 
% stiff cell walls, plastids, and photosynthetic pigments.")


fof( mergeA2935, axiom,
	p__d__subclass(c__Microorganism,c__Organism)
).



% ($documentation Microorganism EnglishLanguage "An &%Organism that can be seen only with 
% the aid of a microscope.")


fof( mergeA2936, axiom,
	p__d__subclass(c__Bacterium,c__Microorganism)
).



% ($documentation Bacterium EnglishLanguage "A small, typically one-celled, prokaryotic 
% &%Microorganism.")


fof( mergeA2937, axiom,
	(![BACTERIUM]: 
		(
			(
				p__d__instance(BACTERIUM,c__Bacterium)
			)
			=>
			(
				(?[CELL1]: 
					(
						(
							(
								p__component(CELL1,BACTERIUM)
							)
						 &
							(
								p__d__instance(CELL1,c__Cell)
							)
						 &
							(
								(![CELL2]: 
									(
										(
											(
												(
													p__component(CELL2,BACTERIUM)
												)
											 &
												(
													p__d__instance(CELL2,c__Cell)
												)
											)
										)
										=>
										(
											( CELL1 = CELL2 )
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2938, axiom,
	(![BACTERIUM,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(BACTERIUM,c__Bacterium)
					)
				 &
					(
						p__inhabits(BACTERIUM,OBJ)
					)
				)
			)
			=>
			(
				p__d__instance(OBJ,c__Organism)
			)
		)
	)
).


fof( mergeA2939, axiom,
	p__d__subclass(c__Virus,c__Microorganism)
).



% ($documentation Virus EnglishLanguage "An &%Organism consisting of a core of a single 
% nucleic acid enclosed in a protective coat of protein. A virus may replicate 
% only inside a host living cell. A virus exhibits some but not all of the 
% usual characteristics of living things.")


fof( mergeA2940, axiom,
	(![VIRUS,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(VIRUS,c__Virus)
					)
				 &
					(
						p__inhabits(VIRUS,OBJ)
					)
				)
			)
			=>
			(
				p__d__instance(OBJ,c__Organism)
			)
		)
	)
).


fof( mergeA2941, axiom,
	(![VIRUS,PROC]: 
		(
			(
				(
					(
						p__d__instance(VIRUS,c__Virus)
					)
				 &
					(
						p__d__instance(PROC,c__Replication)
					)
				 &
					(
						p__agent(PROC,VIRUS)
					)
				)
			)
			=>
			(
				(?[CELL]: 
					(
						(
							(
								p__located(PROC,CELL)
							)
						 &
							(
								p__d__instance(CELL,c__Cell)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2942, axiom,
	p__d__subclass(c__Vertebrate,c__Animal)
).



% ($documentation Vertebrate EnglishLanguage "An &%Animal which has a spinal column.")


fof( mergeA2943, axiom,
	p__d__subclass(c__Invertebrate,c__Animal)
).


fof( mergeA2944, axiom,
	p__d__disjointDecomposition4(c__Invertebrate,c__Worm,c__Mollusk,c__Arthropod)
).



% ($documentation Invertebrate EnglishLanguage "An &%Animal which has no spinal column.")


fof( mergeA2945, axiom,
	p__d__subclass(c__Worm,c__Invertebrate)
).



% ($documentation Worm EnglishLanguage "Long, narrow, soft-bodied &%Invertebrates.")


fof( mergeA2946, axiom,
	p__d__subclass(c__Mollusk,c__Invertebrate)
).



% ($documentation Mollusk EnglishLanguage "Soft-bodied &%Invertebrate that is usually 
% contained in a shell.  Includes oysters, clams, mussels, snails, slugs, 
% octopi, and squid.")


fof( mergeA2947, axiom,
	p__d__subclass(c__Arthropod,c__Invertebrate)
).


fof( mergeA2948, axiom,
	p__d__disjointDecomposition5(c__Arthropod,c__Arachnid,c__Myriapod,c__Insect,c__Crustacean)
).



% ($documentation Arthropod EnglishLanguage "A &%Class of &%Invertebrate that includes 
% &%Arachnids and &%Insects.")


fof( mergeA2949, axiom,
	p__d__subclass(c__Arachnid,c__Arthropod)
).



% ($documentation Arachnid EnglishLanguage "A &%Class of &%Arthropods that includes 
% ticks and spiders.")


fof( mergeA2950, axiom,
	p__d__subclass(c__Myriapod,c__Arthropod)
).



% ($documentation Myriapod EnglishLanguage "A &%Class of &%Arthropods that includes 
% centipedes and millipedes.")


fof( mergeA2951, axiom,
	p__d__subclass(c__Insect,c__Arthropod)
).



% ($documentation Insect EnglishLanguage "A &%Class of small &%Arthropods that are 
% air-breathing and that are distinguished by appearance.")


fof( mergeA2952, axiom,
	p__d__subclass(c__Crustacean,c__Arthropod)
).



% ($documentation Crustacean EnglishLanguage "A &%Class of &%Arthropods that mainly dwells 
% in water and has a segmented body and a chitinous exoskeleton.  Includes 
% lobsters, crabs, shrimp, and barnacles.")


fof( mergeA2953, axiom,
	p__d__subclass(c__ColdBloodedVertebrate,c__Vertebrate)
).


fof( mergeA2954, axiom,
	p__d__disjointDecomposition4(c__ColdBloodedVertebrate,c__Amphibian,c__Fish,c__Reptile)
).



% ($documentation ColdBloodedVertebrate EnglishLanguage "&%Vertebrates whose body temperature 
% is not internally regulated.") 


fof( mergeA2955, axiom,
	p__d__subclass(c__WarmBloodedVertebrate,c__Vertebrate)
).


fof( mergeA2956, axiom,
	p__d__disjoint(c__WarmBloodedVertebrate,c__ColdBloodedVertebrate)
).



% ($documentation WarmBloodedVertebrate EnglishLanguage "&%Vertebrates whose body temperature 
% is internally regulated.")


fof( mergeA2957, axiom,
	p__d__subclass(c__Amphibian,c__ColdBloodedVertebrate)
).



% ($documentation Amphibian EnglishLanguage "A cold-blooded, smooth-skinned &%Vertebrate 
% which characteristically hatches as an aquatic larva, breathing by 
% gills.  When mature, the &%Amphibian breathes with &%Lungs.")


fof( mergeA2958, axiom,
	p__d__subclass(c__Bird,c__WarmBloodedVertebrate)
).


fof( mergeA2959, axiom,
	p__d__disjoint(c__Bird,c__Mammal)
).



% ($documentation Bird EnglishLanguage "A &%Vertebrate having a constant body temperature 
% and characterized by the presence of feathers.")


fof( mergeA2960, axiom,
	p__d__subclass(c__Fish,c__ColdBloodedVertebrate)
).



% ($documentation Fish EnglishLanguage "A cold-blooded aquatic &%Vertebrate characterized by 
% fins and breathing by gills. Included here are &%Fish having either a bony 
% skeleton, such as a perch, or a cartilaginous skeleton, such as a shark.  
% Also included are those &%Fish lacking a jaw, such as a lamprey or 
% hagfish.")


fof( mergeA2961, axiom,
	(![FISH]: 
		(
			(
				p__d__instance(FISH,c__Fish)
			)
			=>
			(
				(?[WATER]: 
					(
						(
							(
								p__inhabits(FISH,WATER)
							)
						 &
							(
								p__d__instance(WATER,c__Water)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2962, axiom,
	p__d__subclass(c__Mammal,c__WarmBloodedVertebrate)
).


fof( mergeA2963, axiom,
	p__d__disjointDecomposition6(c__Mammal,c__AquaticMammal,c__HoofedMammal,c__Marsupial,c__Rodent,c__Primate)
).



% ($documentation Mammal EnglishLanguage "A &%Vertebrate having a constant body temperature 
% and characterized by the presence of hair, mammary glands, and sweat 
% glands.")


fof( mergeA2964, axiom,
	p__d__subclass(c__AquaticMammal,c__Mammal)
).



% ($documentation AquaticMammal EnglishLanguage "The &%Class of &%Mammals that dwell chiefly 
% in the water.  Includes whales, dolphins, manatees, seals, and walruses.")


fof( mergeA2965, axiom,
	p__d__subclass(c__HoofedMammal,c__Mammal)
).



% ($documentation HoofedMammal EnglishLanguage "The &%Class of quadruped &%Mammals with hooves.  
% Includes horses, cows, sheep, pigs, antelope, etc.")


fof( mergeA2966, axiom,
	p__d__subclass(c__Marsupial,c__Mammal)
).



% ($documentation Marsupial EnglishLanguage "The &%Class of &%Mammals which have a pouch for 
% their young.")


fof( mergeA2967, axiom,
	p__d__subclass(c__Carnivore,c__Mammal)
).



% ($documentation Carnivore EnglishLanguage "The &%Class of flesh-eating &%Mammals.  Members 
% of this &%Class typically have four or five claws on each paw.  Includes 
% cats, dogs, bears, racoons, and skunks.")


fof( mergeA2968, axiom,
	(![CARNIVORE,EAT,PREY]: 
		(
			(
				(
					(
						p__d__instance(CARNIVORE,c__Carnivore)
					)
				 &
					(
						p__d__instance(EAT,c__Eating)
					)
				 &
					(
						p__agent(EAT,CARNIVORE)
					)
				 &
					(
						p__patient(EAT,PREY)
					)
				)
			)
			=>
			(
				p__d__instance(PREY,c__Animal)
			)
		)
	)
).


fof( mergeA2969, axiom,
	p__d__subclass(c__Canine,c__Carnivore)
).


fof( mergeA2970, axiom,
	p__d__disjoint(c__Canine,c__Feline)
).



% ($documentation Canine EnglishLanguage "The &%Class of &%Carnivores with completely 
% separable toes, nonretractable claws, and long muzzles.")


fof( mergeA2971, axiom,
	p__d__subclass(c__Feline,c__Carnivore)
).



% ($documentation Feline EnglishLanguage "The &%Class of &%Carnivores with completely
% separable toes, slim bodies, and rounded heads.  All felines other than
% the cheetah have retractable claws.")


fof( mergeA2972, axiom,
	p__d__subclass(c__Rodent,c__Mammal)
).



% ($documentation Rodent EnglishLanguage "The &%Class of &%Mammals with one or two pairs 
% of incisors for gnawing.  Includes rats, mice, guinea pigs, and 
% rabbits.")


fof( mergeA2973, axiom,
	p__d__subclass(c__Primate,c__Mammal)
).


fof( mergeA2974, axiom,
	p__d__disjointDecomposition4(c__Primate,c__Ape,c__Monkey,c__Hominid)
).



% ($documentation Primate EnglishLanguage "The &%Class of &%Mammals which are 
% &%Primates.")


fof( mergeA2975, axiom,
	p__d__subclass(c__Ape,c__Primate)
).



% ($documentation Ape EnglishLanguage "Various &%Primates with no tails or only short 
% tails.")


fof( mergeA2976, axiom,
	p__d__subclass(c__Monkey,c__Primate)
).



% ($documentation Monkey EnglishLanguage "Various &%Primates with relatively long 
% tails.")


fof( mergeA2977, axiom,
	p__d__subclass(c__Hominid,c__Primate)
).



% ($documentation Hominid EnglishLanguage "Includes &%Humans and relatively recent 
% ancestors of &%Humans.")


fof( mergeA2978, axiom,
	p__d__subclass(c__Human,c__Hominid)
).


fof( mergeA2979, axiom,
	p__d__subclass(c__Human,c__CognitiveAgent)
).


fof( mergeA2980, axiom,
	p__d__partition3(c__Human,c__Man,c__Woman)
).



% ($documentation Human EnglishLanguage "Modern man, the only remaining species of the Homo 
% genus.")


fof( mergeA2981, axiom,
	p__d__subclass(c__Man,c__Human)
).



% ($documentation Man EnglishLanguage "The class of &%Male &%Humans.")


fof( mergeA2982, axiom,
	(![MAN]: 
		(
			(
				p__d__instance(MAN,c__Man)
			)
			=>
			(
				p__attribute(MAN,c__Male)
			)
		)
	)
).


fof( mergeA2983, axiom,
	p__d__subclass(c__Woman,c__Human)
).



% ($documentation Woman EnglishLanguage "The class of &%Female &%Humans.")


fof( mergeA2984, axiom,
	(![WOMAN]: 
		(
			(
				p__d__instance(WOMAN,c__Woman)
			)
			=>
			(
				p__attribute(WOMAN,c__Female)
			)
		)
	)
).


fof( mergeA2985, axiom,
	p__d__subclass(c__Reptile,c__ColdBloodedVertebrate)
).



% ($documentation Reptile EnglishLanguage "A &%ColdBloodedVertebrate having an external 
% covering of scales or horny plates.  &%Reptiles breathe by means of 
% &%Lungs and generally lay eggs.")


% ($comment 
% ;; The following formulas cover biologically related &%Classes under 
% ;; &%Substance.
% )

fof( mergeA2986, axiom,
	p__d__subclass(c__BiologicallyActiveSubstance,c__Substance)
).



% ($documentation BiologicallyActiveSubstance EnglishLanguage "A &%Substance that is 
% capable of inducing a change in the structure or functioning of an 
% &%Organism.  This &%Class includes &%Substances used in the treatment, 
% diagnosis, prevention or analysis of normal and abnormal body function.  
% This &%Class also includes &%Substances that occur naturally in the body 
% and are administered therapeutically.  Finally, &%BiologicallyActiveSubstance 
% includes &%Nutrients, most drugs of abuse, and agents that require special 
% handling because of their toxicity.")


fof( mergeA2987, axiom,
	p__d__subclass(c__Nutrient,c__BiologicallyActiveSubstance)
).


fof( mergeA2988, axiom,
	p__d__disjointDecomposition4(c__Nutrient,c__Protein,c__Carbohydrate,c__Vitamin)
).



% ($documentation Nutrient EnglishLanguage "A &%BiologicallyActiveSubstance required by an &%Organism.  
% It is generally ingested as &%Food, and it is of primary interest because of its role 
% in the biologic functioning of the &%Organism.")


fof( mergeA2989, axiom,
	p__d__subclass(c__Protein,c__Nutrient)
).



% ($documentation Protein EnglishLanguage "A &%Nutrient made up of amino acids joined by 
% peptide bonds.")


fof( mergeA2990, axiom,
	p__d__subclass(c__Enzyme,c__Protein)
).



% ($documentation Enzyme EnglishLanguage "A complex &%Protein that is produced by living 
% cells and which catalyzes specific biochemical reactions. There are six 
% main types of enzymes:  oxidoreductases, transferases, hydrolases, 
% lyases, isomerases, and ligases.")


fof( mergeA2991, axiom,
	p__d__subclass(c__Carbohydrate,c__Nutrient)
).



% ($documentation Carbohydrate EnglishLanguage "An element of living cells and a source of 
% energy for &%Animals.  This class includes both simple &%Carbohydrates, 
% i.e. sugars, and complex &%Carbohydrates, i.e. starches.")


fof( mergeA2992, axiom,
	p__d__subclass(c__Vitamin,c__Nutrient)
).



% ($documentation Vitamin EnglishLanguage "A &%Nutrient present in natural products or made 
% synthetically, which is essential in the diet of &%Humans and other higher 
% &%Animals.  Included here are &%Vitamin precursors and provitamins.")


fof( mergeA2993, axiom,
	p__d__subclass(c__LiquidMixture,c__Mixture)
).


fof( mergeA2994, axiom,
	p__d__partition3(c__LiquidMixture,c__Solution,c__Suspension)
).



% ($documentation LiquidMixture EnglishLanguage "Any &%Mixture that satisfies two conditions, 
% viz. it is made up predominantly of things which are a &%Liquid and any 
% component other than &%Liquid in the &%Mixture is in the form of fine particles 
% which are suspended in the &%Liquid.")


fof( mergeA2995, axiom,
	(![MIX]: 
		(
			(
				p__d__instance(MIX,c__LiquidMixture)
			)
			=>
			(
				(?[PART]: 
					(
						(
							(
								p__d__instance(PART,c__Object)
							)
						 &
							(
								p__part(PART,MIX)
							)
						 &
							(
								p__attribute(PART,c__Liquid)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA2996, axiom,
	p__d__subclass(c__Solution,c__LiquidMixture)
).



% ($documentation Solution EnglishLanguage "A liquid mixture. The most abundant component in 
% a solution is called the solvent. Other components are called solutes. 
% A solution, though homogeneous, may nonetheless have variable composition. 
% Any amount of salt, up to a maximum limit, can be dissolved in a given 
% amount of water.")


fof( mergeA2997, axiom,
	p__d__subclass(c__Suspension,c__LiquidMixture)
).



% ($documentation Suspension EnglishLanguage "A &%LiquidMixture where at least one of the 
% components of the &%Mixture is equally distributed throughout the &%Mixture 
% but is not dissolved in it.") 


fof( mergeA2998, axiom,
	p__d__subclass(c__GasMixture,c__Mixture)
).


fof( mergeA2999, axiom,
	p__d__disjoint(c__GasMixture,c__LiquidMixture)
).



% ($documentation GasMixture EnglishLanguage "Any &%Mixture that satisfies two conditions, 
% viz. it is made up predominantly of things which are a &%Gas and any 
% component other than &%Gas in the &%Mixture is in the form of fine particles 
% which are suspended in the &%Gas.") 


fof( mergeA3000, axiom,
	(![MIX]: 
		(
			(
				p__d__instance(MIX,c__GasMixture)
			)
			=>
			(
				(?[PART]: 
					(
						(
							(
								p__d__instance(PART,c__Object)
							)
						 &
							(
								p__part(PART,MIX)
							)
						 &
							(
								p__attribute(PART,c__Gas)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3001, axiom,
	p__d__subclass(c__Cloud,c__GasMixture)
).



% ($documentation Cloud EnglishLanguage "Any &%GasMixture that is visible, e.g. &%Smoke produced 
% by a fire or clouds of water vapor in the sky.")


fof( mergeA3002, axiom,
	(![CLOUD]: 
		(
			(
				p__d__instance(CLOUD,c__Cloud)
			)
			=>
			(
				p__capability(c__Seeing,c__patient,CLOUD)
			)
		)
	)
).


fof( mergeA3003, axiom,
	p__d__subclass(c__Smoke,c__Cloud)
).



% ($documentation Smoke EnglishLanguage "A mixture of fine particles suspended in a gas that is 
% produced by &%Combustion.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: Combustion is ChemicalProcess and the result of a chemical process is PureSubstance, whereas Smoke is Mixture (PureSubstance and Mixture and disjoint)
% ;;See:
% ;;	(=>
% ;;	   (and
% ;;		  ($instance ?PROC ChemicalProcess)
% ;;		  (or
% ;;		     (resource ?PROC ?STUFF)
% ;;		     (result ?PROC ?STUFF)))
% ;;	   ($instance ?STUFF PureSubstance))
% ;;
% ;;	(=>
% ;;	   ($instance ?SMOKE Smoke)
% ;;	   (exists (?BURNING)
% ;;		  (and
% ;;		     ($instance ?BURNING Combustion)
% ;;		     (result ?BURNING ?SMOKE))))
% ;;
% ;;	($subclass Smoke Cloud)
% ;;	($subclass Cloud GasMixture)
% ;;	($subclass GasMixture Mixture)
% ;;
% ;;	($subclass Combustion ChemicalDecomposition)
% ;;	($subclass ChemicalDecomposition ChemicalProcess) 
% ;;
% ;;	($partition Substance @(PureSubstance,Mixture))
% ;;
% ;;(=>
% ;;   ($instance ?SMOKE Smoke)
% ;;   (exists (?BURNING)
% ;;      (and
% ;;         ($instance ?BURNING Combustion)
% ;;         (result ?BURNING ?SMOKE))))
% )

fof( mergeA3004, axiom,
	p__d__subclass(c__WaterCloud,c__Cloud)
).



% ($documentation WaterCloud EnglishLanguage "Any &%Cloud that is composed primarily of water vapor.")


fof( mergeA3005, axiom,
	(![CLOUD]: 
		(
			(
				p__d__instance(CLOUD,c__WaterCloud)
			)
			=>
			(
				(?[WATER]: 
					(
						(
							(
								p__d__instance(WATER,c__Water)
							)
						 &
							(
								p__part(WATER,CLOUD)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: wrongly-quantified variables
% ;;
% ;;(=>
% ;;   ($instance ?CLOUD WaterCloud)
% ;;   (forall (?PART)
% ;;      (=>
% ;;         (and
% ;;            (part ?PART ?CLOUD)
% ;;            (not ($instance ?PART Water)))
% ;;         (exists (?WATER)
% ;;            (and
% ;;               ($instance ?WATER Water)
% ;;               (part ?WATER ?CLOUD)
% ;;               (measure ?WATER ?MEASURE1)
% ;;               (measure ?PART ?MEASURE2)
% ;;               (greaterThan ?MEASURE1 ?MEASURE2))))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( mergeA3006, axiom,
	(![CLOUD,PART]: 
		(
			(
				(
					(
						p__d__instance(PART,c__Object)
					)
				 &
					(
						p__d__instance(CLOUD,c__WaterCloud)
					)
				 &
					(
						p__part(PART,CLOUD)
					)
				 &
					(
						~ (
							p__d__instance(PART,c__Water)
						)
					)
				)
			)
			=>
			(
				(?[WATER,MEASURE1,MEASURE2]: 
					(
						(
							(
								p__d__instance(MEASURE1,c__PhysicalQuantity)
							)
						 &
							(
								p__d__instance(MEASURE2,c__PhysicalQuantity)
							)
						 &
							(
								p__d__instance(WATER,c__Water)
							)
						 &
							(
								p__part(WATER,CLOUD)
							)
						 &
							(
								p__measure(WATER,MEASURE1)
							)
						 &
							(
								p__measure(PART,MEASURE2)
							)
						 &
							(
								p__greaterThan(MEASURE1,MEASURE2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3007, axiom,
	p__d__subclass(c__Air,c__GasMixture)
).



% ($documentation Air EnglishLanguage "&%Air is the gaseous stuff that makes up the 
% atmosphere surrounding Earth.")


fof( mergeA3008, axiom,
	(![WIND]: 
		(
			(
				p__d__instance(WIND,c__Wind)
			)
			=>
			(
				(?[AIR]: 
					(
						(
							(
								p__patient(WIND,AIR)
							)
						 &
							(
								p__d__instance(AIR,c__Air)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3009, axiom,
	p__d__subclass(c__BodySubstance,c__Substance)
).



% ($documentation BodySubstance EnglishLanguage "Extracellular material and mixtures of 
% cells and extracellular material that are produced, excreted or accreted 
% by an &%Organism.  Included here are &%Substances such as saliva, dental 
% enamel, sweat, hormones, and gastric acid.")


fof( mergeA3010, axiom,
	p__d__subclass(c__AnimalSubstance,c__BodySubstance)
).



% ($documentation AnimalSubstance EnglishLanguage "&%BodySubstances that are produced 
% exclusively by &%Animals.")


fof( mergeA3011, axiom,
	(![SUBSTANCE,ANIMAL]: 
		(
			(
				(
					(
						p__d__instance(SUBSTANCE,c__AnimalSubstance)
					)
				 &
					(
						p__d__instance(ANIMAL,c__Organism)
					)
				 &
					(
						p__part(SUBSTANCE,ANIMAL)
					)
				)
			)
			=>
			(
				p__d__instance(ANIMAL,c__Animal)
			)
		)
	)
).


fof( mergeA3012, axiom,
	p__d__subclass(c__PlantSubstance,c__BodySubstance)
).



% ($documentation PlantSubstance EnglishLanguage "&%BodySubstances that are produced 
% exclusively by &%Plants.")


fof( mergeA3013, axiom,
	(![SUBSTANCE,PLANT]: 
		(
			(
				(
					(
						p__d__instance(SUBSTANCE,c__PlantSubstance)
					)
				 &
					(
						p__d__instance(PLANT,c__Organism)
					)
				 &
					(
						p__part(SUBSTANCE,PLANT)
					)
				)
			)
			=>
			(
				p__d__instance(PLANT,c__Plant)
			)
		)
	)
).


fof( mergeA3014, axiom,
	p__d__subclass(c__Hormone,c__BodySubstance)
).


fof( mergeA3015, axiom,
	p__d__subclass(c__Hormone,c__BiologicallyActiveSubstance)
).



% ($documentation Hormone EnglishLanguage "In &%Animals, a chemical secreted by an 
% endocrine gland whose products are released into the circulating fluid.  
% &%Plant hormones or synthetic hormones which are used only to alter or 
% control various physiologic processes, e.g., reproductive control agents, 
% are assigned to the &%Class &%BiologicallyActiveSubstance. &%Hormones act as 
% chemical messengers and regulate various physiologic processes such as 
% growth, reproduction, metabolism, etc.  They usually fall into two broad 
% categories, viz. steroid hormones and peptide hormones.")


fof( mergeA3016, axiom,
	(![HORMONE]: 
		(
			(
				p__d__instance(HORMONE,c__Hormone)
			)
			=>
			(
				(?[PROCESS,GLAND]: 
					(
						(
							(
								p__d__instance(PROCESS,c__Process)
							)
						 &
							(
								p__d__instance(GLAND,c__Gland)
							)
						 &
							(
								p__instrument(PROCESS,GLAND)
							)
						 &
							(
								p__result(PROCESS,HORMONE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3017, axiom,
	p__d__subclass(c__Blood,c__BodySubstance)
).



% ($documentation Blood EnglishLanguage "A fluid present in &%Animals that transports 
% &%Nutrients to and waste products away from various &%BodyParts.")


fof( mergeA3018, axiom,
	p__d__instance(c__FoodForFn,c__UnaryFunction)
).


% 	($domainSubclass FoodForFn 1 Organism)

% 	($rangeSubclass FoodForFn SelfConnectedObject)


% ($documentation FoodForFn EnglishLanguage "A &%Function that denotes 
% &%SelfConnectedObject containing &%Nutrients, such as carbohydrates, 
% proteins, and fats, that can be ingested by a the given class of living 
% &%Animal and metabolized into energy and body tissue.") 


% 	(forall (?A ?FOOD)
% 		(=> 
% 			($instance ?FOOD (FoodForFn ?A))
% 			(exists (?NUTRIENT)
% 				(and 
% 					($instance ?NUTRIENT Nutrient)
% 					(part ?NUTRIENT ?FOOD)
% 				)
% 			)
% 		)
% 	)

fof( mergeA3022, axiom,
	p__d__subclass(c__Meat,c__SelfConnectedObject)
).



% ($documentation Meat EnglishLanguage "Any food which was originally part of an 
% &%Animal and is not ingested by drinking, including eggs and animal 
% blood that is eaten as food.  Note that this class covers both raw 
% meat and meat that has been prepared in some way, e.g. by cooking.  
% Note too that preparations involving &%Meat and &%FruitOrVegetable 
% are classed directly under &%Food.")


% 	(forall (?MEAT)
% 		(=> 
% 			($instance ?MEAT Meat)
% 			(forall (?PART)
% 				(=> 
% 					(part ?PART ?MEAT)
% 					(exists (?SUBPART ?TIME ?ANIMAL)
% 						(and 
% 							(part ?SUBPART ?PART)
% 							(holdsDuring ?TIME (and ([|] ($instance ?ANIMAL Animal) ([|] (part ?SUBPART ?ANIMAL) []))))
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; KJN: Moving this to Mid-level-ontology.kif as it is causing dependency errors.                   
% ;;($subclass Beverage Substance)
% ;;($disjoint Meat Beverage)
% ;;(documentation Beverage EnglishLanguage "Any food that is ingested by &%Drinking.  
% ;;Note that this class is disjoint &%Meat and &%FruitOrVegetable.")
% ;;
% ;;(=>
% ;;   ($instance ?BEV Beverage)
% ;;   (attribute ?BEV Liquid))
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?DRINK Drinking)
% ;;      (patient ?DRINK ?BEV))
% ;;   ($instance ?BEV Beverage))
% )

fof( mergeA3024, axiom,
	p__d__subclass(c__AnatomicalStructure,c__OrganicObject)
).


fof( mergeA3025, axiom,
	p__d__partition3(c__AnatomicalStructure,c__BodyPart,c__AbnormalAnatomicalStructure)
).


fof( mergeA3026, axiom,
	p__d__partition3(c__AnatomicalStructure,c__AnimalAnatomicalStructure,c__PlantAnatomicalStructure)
).



% ($documentation AnatomicalStructure EnglishLanguage "A normal or pathological part 
% of the anatomy or structural organization of an &%Organism.  This 
% class covers &%BodyParts, as well as structures that are given off 
% by &%Organisms, e.g. &%ReproductiveBodies.")


% 	(forall (?ANAT)
% 		(=> 
% 			($instance ?ANAT AnatomicalStructure)
% 			(exists (?ORGANISM ?TIME)
% 				(and 
% 					($instance ?ORGANISM Organism)
% 					(temporalPart ?TIME (WhenFn ?ORGANISM))
% 					(holdsDuring ?TIME (properPart ?ANAT ?ORGANISM))
% 				)
% 			)
% 		)
% 	)

fof( mergeA3028, axiom,
	(![PART]: 
		(
			(
				p__d__instance(PART,c__AnatomicalStructure)
			)
			=>
			(
				(?[CELL]: 
					(
						(
							(
								p__d__instance(CELL,c__Cell)
							)
						 &
							(
								p__part(CELL,PART)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3029, axiom,
	p__d__subclass(c__AbnormalAnatomicalStructure,c__AnatomicalStructure)
).



% ($documentation AbnormalAnatomicalStructure EnglishLanguage "Any &%AnatomicalStructure which 
% is not normally found in the &%Organism of which it is a part, i.e. it is 
% the result of a &%PathologicProcess.  This class covers tumors, birth marks, 
% goiters, etc.")


fof( mergeA3030, axiom,
	(![STRUCTURE]: 
		(
			(
				p__d__instance(STRUCTURE,c__AbnormalAnatomicalStructure)
			)
			=>
			(
				(?[PROC]: 
					(
						(
							(
								p__d__instance(PROC,c__PathologicProcess)
							)
						 &
							(
								p__result(PROC,STRUCTURE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3031, axiom,
	p__d__subclass(c__BodyPart,c__AnatomicalStructure)
).



% ($documentation BodyPart EnglishLanguage "A collection of &%Cells and &%Tissues which 
% are localized to a specific area of an &%Organism and which are not 
% pathological. The instances of this &%Class range from gross structures 
% to small components of complex &%Organs.")


% 	(forall (?PART)
% 		(=> 
% 			($instance ?PART BodyPart)
% 			(exists (?ORGANISM ?TIME)
% 				(and 
% 					($instance ?ORGANISM Organism)
% 					(temporalPart ?TIME (WhenFn ?ORGANISM))
% 					(holdsDuring ?TIME (component ?PART ?ORGANISM))
% 				)
% 			)
% 		)
% 	)

fof( mergeA3033, axiom,
	(![PART]: 
		(
			(
				p__d__instance(PART,c__BodyPart)
			)
			=>
			(
				(?[PROC]: 
					(
						(
							(
								p__d__instance(PROC,c__PhysiologicProcess)
							)
						 &
							(
								p__result(PROC,PART)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3034, axiom,
	p__d__subclass(c__AnimalAnatomicalStructure,c__AnatomicalStructure)
).



% ($documentation AnimalAnatomicalStructure EnglishLanguage "&%AnatomicalStructures that 
% are possessed exclusively by &%Animals.")


fof( mergeA3035, axiom,
	(![STRUCTURE,ANIMAL]: 
		(
			(
				(
					(
						p__d__instance(ANIMAL,c__Object)
					)
				 &
					(
						p__d__instance(STRUCTURE,c__AnimalAnatomicalStructure)
					)
				 &
					(
						p__properPart(STRUCTURE,ANIMAL)
					)
				)
			)
			=>
			(
				p__d__instance(ANIMAL,c__Animal)
			)
		)
	)
).


fof( mergeA3036, axiom,
	p__d__subclass(c__PlantAnatomicalStructure,c__AnatomicalStructure)
).



% ($documentation PlantAnatomicalStructure EnglishLanguage "&%AnatomicalStructures that 
% are possessed exclusively by &%Plants.")


fof( mergeA3037, axiom,
	(![STRUCTURE,PLANT]: 
		(
			(
				(
					(
						p__d__instance(PLANT,c__Object)
					)
				 &
					(
						p__d__instance(STRUCTURE,c__PlantAnatomicalStructure)
					)
				 &
					(
						p__properPart(STRUCTURE,PLANT)
					)
				)
			)
			=>
			(
				p__d__instance(PLANT,c__Plant)
			)
		)
	)
).


fof( mergeA3038, axiom,
	p__d__subclass(c__ReproductiveBody,c__BodyPart)
).



% ($documentation ReproductiveBody EnglishLanguage "Reproductive structure of &%Organisms.  
% Consists of an &%Embryonic &%Object and a nutritive/protective envelope.  
% Note that this class includes seeds, spores, and &%FruitOrVegetables, as 
% well as the eggs produced by &%Animals.")


fof( mergeA3039, axiom,
	p__d__subclass(c__Egg,c__ReproductiveBody)
).


fof( mergeA3040, axiom,
	p__d__subclass(c__Egg,c__AnimalAnatomicalStructure)
).



% ($documentation Egg EnglishLanguage "The fertilized or unfertilized female &%ReproductiveBody 
% of an &%Animal.  This includes &%Bird and &%Reptile eggs, as well as mammalian 
% ova.") 


% ($comment 
% ;; KJN: This is moved from Economy.kif.  Seed being subclassed from FruitOrVegetable
% ;; seems incorrect, though, as FruitOrVegetable talks about a ripened Reproductive
% ;; Body (although no formal rule states it) while a seed may not necessarily be so.
% ;; commenting it out for now.
% ;;($subclass Seed FruitOrVegetable)
% )

fof( mergeA3041, axiom,
	p__d__subclass(c__Seed,c__ReproductiveBody)
).


fof( mergeA3042, axiom,
	p__d__subclass(c__Seed,c__PlantAnatomicalStructure)
).



% ($documentation Seed EnglishLanguage "The fertilized or unfertilized female &%ReproductiveBody 
% of a &%FloweringPlant.")


% 	(forall (?SEED)
% 		(=> 
% 			($instance ?SEED Seed)
% 			(exists (?PLANT ?TIME)
% 				(and 
% 					($instance ?PLANT FloweringPlant)
% 					(holdsDuring ?TIME (part ?SEED ?PLANT))
% 				)
% 			)
% 		)
% 	)

fof( mergeA3044, axiom,
	p__d__subclass(c__Pollen,c__ReproductiveBody)
).


fof( mergeA3045, axiom,
	p__d__subclass(c__Pollen,c__PlantAnatomicalStructure)
).



% ($documentation Pollen EnglishLanguage "A powder produced by &%FloweringPlants that contains male 
% gametes and is capable of fertilizing the seeds of &%FloweringPlants of the same 
% species.")


fof( mergeA3046, axiom,
	p__d__subclass(c__FruitOrVegetable,c__PlantAnatomicalStructure)
).


fof( mergeA3047, axiom,
	p__d__subclass(c__FruitOrVegetable,c__ReproductiveBody)
).



% ($documentation FruitOrVegetable EnglishLanguage "Any fruit or vegetable, i.e. a 
% ripened &%ReproductiveBody of a &%Plant.  Note that &%FruitOrVegetable 
% is not a subclass of &%Food, because some fruits, e.g. poisonous 
% berries, are not edible.") 


fof( mergeA3048, axiom,
	p__d__subclass(c__Spore,c__ReproductiveBody)
).


fof( mergeA3049, axiom,
	p__d__subclass(c__Spore,c__PlantAnatomicalStructure)
).



% ($documentation Spore EnglishLanguage "Any &%ReproductiveBody of a &%NonFloweringPlant.")


% 	(forall (?SPORE)
% 		(=> 
% 			($instance ?SPORE Spore)
% 			(exists (?PLANT ?TIME)
% 				(and 
% 					($instance ?PLANT NonFloweringPlant)
% 					(holdsDuring ?TIME (properPart ?SPORE ?PLANT))
% 				)
% 			)
% 		)
% 	)

fof( mergeA3051, axiom,
	p__d__subclass(c__BodyCovering,c__BodyPart)
).



% ($documentation BodyCovering EnglishLanguage "Any &%BodyPart which is a covering of another 
% &%BodyPart or of an entire &%Organism.  This would include the rinds of 
% &%FruitOrVegetables and the skins of &%Animals.")


fof( mergeA3052, axiom,
	(![COVER]: 
		(
			(
				p__d__instance(COVER,c__BodyCovering)
			)
			=>
			(
				(?[BODY]: 
					(
						(
							(
								p__d__instance(BODY,c__Object)
							)
						 &
							(
								p__superficialPart(COVER,BODY)
							)
						 &
							(
								(
									p__d__instance(BODY,c__Organism)
								 |
									p__d__instance(BODY,c__BodyPart)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3053, axiom,
	p__d__subclass(c__BodyJunction,c__BodyPart)
).



% ($documentation BodyJunction EnglishLanguage "The place where two &%BodyParts 
% meet or connect.")


fof( mergeA3054, axiom,
	(![JUNCT]: 
		(
			(
				p__d__instance(JUNCT,c__BodyJunction)
			)
			=>
			(
				(?[OBJ1,OBJ2]: 
					(
						(
							(
								p__d__instance(OBJ1,c__BodyPart)
							)
						 &
							(
								p__d__instance(OBJ2,c__BodyPart)
							)
						 &
							(
								p__connects(JUNCT,OBJ1,OBJ2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3055, axiom,
	p__d__subclass(c__BodyCavity,c__BodyPart)
).



% ($documentation BodyCavity EnglishLanguage "Any &%BodyPart which contains an unfilled space, 
% e.g. &%BodyVessels, the atria and ventricles of the heart, the lungs, etc.")


fof( mergeA3056, axiom,
	p__d__subclass(c__BodyVessel,c__BodyCavity)
).



% ($documentation BodyVessel EnglishLanguage "Any tube-like structure which occurs naturally in 
% an &%Organism and through which a &%BodySubstance can circulate.")


fof( mergeA3057, axiom,
	p__d__subclass(c__Cell,c__BodyPart)
).



% ($documentation Cell EnglishLanguage "The fundamental structural and functional unit of 
% living &%Organisms.")


fof( mergeA3058, axiom,
	p__d__subclass(c__Organ,c__BodyPart)
).



% ($documentation Organ EnglishLanguage "A somewhat independent &%BodyPart that performs a 
% specialized function.  Note that this functional definition covers bodily 
% systems, e.g. the digestive system or the central nervous system.")


fof( mergeA3059, axiom,
	(![ORGAN]: 
		(
			(
				p__d__instance(ORGAN,c__Organ)
			)
			=>
			(
				(?[PURP]: 
					(
						(
							(
								p__d__instance(PURP,c__Formula)
							)
						 &
							(
								p__hasPurpose(ORGAN,PURP)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3060, axiom,
	p__d__subclass(c__Gland,c__Organ)
).



% ($documentation Gland EnglishLanguage "An &%Organ that removes &%Substances from the &%Blood, 
% alters them in some way, and then releases them.")


fof( mergeA3061, axiom,
	p__d__subclass(c__Tissue,c__BodySubstance)
).


fof( mergeA3062, axiom,
	p__d__disjointDecomposition4(c__Tissue,c__Bone,c__Muscle,c__FatTissue)
).



% ($documentation Tissue EnglishLanguage "An aggregation of similarly specialized &%Cells 
% and the associated intercellular substance. &%Tissues are relatively 
% non-localized in comparison to &%BodyParts, &%Organs or &%Organ components.  
% The main features of &%Tissues are self-connectivity (see 
% &%SelfConnectedObject) and being a homogeneous mass (all parts in the 
% same granularity are instances of &%Tissue as well).")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check:
% ;; - Parts of substance inherit the attributes of Substance, in particular PhysicalState
% ;; - Anything that has PhysicalState as attribute is Substance
% ;; - Parts of Substance can be CorpuscularObject
% ;; - CorpuscularObject and Substance are disjoint
% ;;
% ;;(=>
% ;;    ($instance ?STUFF Tissue)
% ;;    (exists (?PART)
% ;;        (and
% ;;            ($instance ?PART Cell)
% ;;            (part ?PART ?STUFF))))
% )

fof( mergeA3063, axiom,
	(![STUFF]: 
		(
			(
				p__d__instance(STUFF,c__Tissue)
			)
			=>
			(
				(?[ORGANISM]: 
					(
						(
							(
								p__d__instance(ORGANISM,c__Organism)
							)
						 &
							(
								p__part(STUFF,ORGANISM)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3064, axiom,
	p__d__subclass(c__Bone,c__Tissue)
).


fof( mergeA3065, axiom,
	p__d__subclass(c__Bone,c__AnimalSubstance)
).



% ($documentation Bone EnglishLanguage "Rigid &%Tissue composed largely of calcium that makes up 
% the skeleton of &%Vertebrates.  Note that this &%Class also includes teeth.")


fof( mergeA3066, axiom,
	(![BONE]: 
		(
			(
				p__d__instance(BONE,c__Bone)
			)
			=>
			(
				(?[VERT]: 
					(
						(
							(
								p__d__instance(VERT,c__Vertebrate)
							)
						 &
							(
								p__properPart(BONE,VERT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3067, axiom,
	p__d__subclass(c__Muscle,c__Tissue)
).


fof( mergeA3068, axiom,
	p__d__subclass(c__Muscle,c__AnimalSubstance)
).



% ($documentation Muscle EnglishLanguage "Nonrigid &%Tissue appearing only in &%Animals and 
% composed largely of contractile cells.")


fof( mergeA3069, axiom,
	p__d__subclass(c__FatTissue,c__Tissue)
).



% ($documentation FatTissue EnglishLanguage "Nonrigid &%Tissue that is composed largely of 
% fat cells.")


fof( mergeA3070, axiom,
	p__d__subclass(c__Noun,c__Word)
).


fof( mergeA3071, axiom,
	p__d__partition6(c__Word,c__Noun,c__Verb,c__Adjective,c__Adverb,c__ParticleWord)
).



% ($documentation Noun EnglishLanguage "One of the parts of speech.  The &%Class of &%Words 
% that conventionally denote &%Objects.")


fof( mergeA3072, axiom,
	p__d__subclass(c__Verb,c__Word)
).



% ($documentation Verb EnglishLanguage "One of the parts of speech.  The &%Class of &%Words 
% that conventionally denote &%Processes.")


fof( mergeA3073, axiom,
	p__d__subclass(c__Adjective,c__Word)
).



% ($documentation Adjective EnglishLanguage "One of the parts of speech.  The &%Class of 
% &%Words that conventionally denote &%Attributes of &%Objects.")


fof( mergeA3074, axiom,
	p__d__subclass(c__Adverb,c__Word)
).



% ($documentation Adverb EnglishLanguage "One of the parts of speech.  The &%Class of &%Words 
% that conventionally denote &%Attributes of &%Processes.")


fof( mergeA3075, axiom,
	p__d__subclass(c__ParticleWord,c__Word)
).



% ($documentation ParticleWord EnglishLanguage "An umbrella &%Class for any &%Word that does not 
% fit into the other subclasses of &%Word.  A &%ParticleWord is generally a small 
% term that serves a grammatical or logical function, e.g. 'and', 'of', 
% 'since', etc.  At some point, this class might be broken up into the 
% subclasses 'Connective', 'Preposition', etc.  Note that the class &%ParticleWord 
% includes both personal and possessive pronouns, e.g. 'she', 'hers', 'it', 'its', 
% etc.")


fof( mergeA3076, axiom,
	p__d__subclass(c__Morpheme,c__LinguisticExpression)
).



% ($documentation Morpheme EnglishLanguage "Part of a &%Word which cannot be subdivided 
% and which expresses a meaning.")


fof( mergeA3077, axiom,
	(![MORPH]: 
		(
			(
				(
					(
						p__d__instance(MORPH,c__Object)
					)
				 &
					(
						p__d__instance(MORPH,c__Morpheme)
					)
				)
			)
			=>
			(
				(![OTHERMORPH]: 
					(
						(
							~ (
								p__d__instance(OTHERMORPH,c__Object)
							)
						 |
							~ (
								p__d__instance(OTHERMORPH,c__Morpheme)
							)
						 |
							~ (
								p__part(OTHERMORPH,MORPH)
							)
						 |
							( OTHERMORPH = MORPH )
						)
					)
				)
			)
		)
	)
).


fof( mergeA3078, axiom,
	(![MORPH]: 
		(
			(
				(
					(
						p__d__instance(MORPH,c__Object)
					)
				 &
					(
						p__d__instance(MORPH,c__Morpheme)
					)
				)
			)
			=>
			(
				(?[WORD]: 
					(
						(
							(
								p__d__instance(WORD,c__Object)
							)
						 &
							(
								p__d__instance(WORD,c__Word)
							)
						 &
							(
								p__part(MORPH,WORD)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3079, axiom,
	(![WORD]: 
		(
			(
				(
					(
						p__d__instance(WORD,c__Object)
					)
				 &
					(
						p__d__instance(WORD,c__Word)
					)
				)
			)
			=>
			(
				(?[PART]: 
					(
						(
							(
								p__d__instance(PART,c__Object)
							)
						 &
							(
								p__part(PART,WORD)
							)
						 &
							(
								p__d__instance(PART,c__Morpheme)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3080, axiom,
	p__d__subclass(c__Phrase,c__LinguisticExpression)
).


fof( mergeA3081, axiom,
	p__d__disjointDecomposition4(c__Phrase,c__VerbPhrase,c__NounPhrase,c__PrepositionalPhrase)
).



% ($documentation Phrase EnglishLanguage "A set of &%Words in a &%Language which form a unit, 
% i.e. express a meaning in the &%Language.")


fof( mergeA3082, axiom,
	(![PHRASE]: 
		(
			(
				(
					(
						p__d__instance(PHRASE,c__Object)
					)
				 &
					(
						p__d__instance(PHRASE,c__Phrase)
					)
				)
			)
			=>
			(
				(?[PART1,PART2]: 
					(
						(
							(
								p__d__instance(PART1,c__Object)
							)
						 &
							(
								p__d__instance(PART2,c__Object)
							)
						 &
							(
								p__part(PART1,PHRASE)
							)
						 &
							(
								p__part(PART2,PHRASE)
							)
						 &
							(
								p__d__instance(PART1,c__Word)
							)
						 &
							(
								p__d__instance(PART2,c__Word)
							)
						 &
							(
								~ (
									( PART1 = PART2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3083, axiom,
	p__d__subclass(c__VerbPhrase,c__Phrase)
).



% ($documentation VerbPhrase EnglishLanguage "A &%Phrase that has the same function as a 
% &%Verb.")


fof( mergeA3084, axiom,
	(![PHRASE]: 
		(
			(
				(
					(
						p__d__instance(PHRASE,c__Object)
					)
				 &
					(
						p__d__instance(PHRASE,c__VerbPhrase)
					)
				)
			)
			=>
			(
				(?[VERB]: 
					(
						(
							(
								p__d__instance(VERB,c__Object)
							)
						 &
							(
								p__d__instance(VERB,c__Verb)
							)
						 &
							(
								p__part(VERB,PHRASE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3085, axiom,
	p__d__subclass(c__NounPhrase,c__Phrase)
).


fof( mergeA3086, axiom,
	p__d__disjoint(c__NounPhrase,c__VerbPhrase)
).



% ($documentation NounPhrase EnglishLanguage "A &%Phrase that has the same function as a 
% &%Noun.")


fof( mergeA3087, axiom,
	(![SENTENCE]: 
		(
			(
				(
					(
						p__d__instance(SENTENCE,c__Object)
					)
				 &
					(
						p__d__instance(SENTENCE,c__Sentence)
					)
				)
			)
			=>
			(
				(?[PHRASE1,PHRASE2]: 
					(
						(
							(
								p__d__instance(PHRASE1,c__Object)
							)
						 &
							(
								p__d__instance(PHRASE2,c__Object)
							)
						 &
							(
								p__d__instance(PHRASE1,c__NounPhrase)
							)
						 &
							(
								p__d__instance(PHRASE2,c__VerbPhrase)
							)
						 &
							(
								p__part(PHRASE1,SENTENCE)
							)
						 &
							(
								p__part(PHRASE2,SENTENCE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3088, axiom,
	(![PHRASE]: 
		(
			(
				(
					(
						p__d__instance(PHRASE,c__Object)
					)
				 &
					(
						p__d__instance(PHRASE,c__NounPhrase)
					)
				)
			)
			=>
			(
				(?[NOUN]: 
					(
						(
							(
								p__d__instance(NOUN,c__Object)
							)
						 &
							(
								p__d__instance(NOUN,c__Noun)
							)
						 &
							(
								p__part(NOUN,PHRASE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3089, axiom,
	p__d__subclass(c__PrepositionalPhrase,c__Phrase)
).



% ($documentation PrepositionalPhrase EnglishLanguage "A &%Phrase that begins with a 
% preposition and that functions as an &%Adjective or an &%Adverb.")


fof( mergeA3090, axiom,
	(![PHRASE]: 
		(
			(
				(
					(
						p__d__instance(PHRASE,c__Object)
					)
				 &
					(
						p__d__instance(PHRASE,c__PrepositionalPhrase)
					)
				)
			)
			=>
			(
				(?[PREP]: 
					(
						(
							(
								p__d__instance(PREP,c__Object)
							)
						 &
							(
								p__d__instance(PREP,c__ParticleWord)
							)
						 &
							(
								p__part(PREP,PHRASE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3091, axiom,
	p__d__subclass(c__Text,c__LinguisticExpression)
).


fof( mergeA3092, axiom,
	p__d__subclass(c__Text,c__ContentBearingObject)
).


fof( mergeA3093, axiom,
	p__d__subclass(c__Text,c__Artifact)
).



% ($documentation Text EnglishLanguage "A &%LinguisticExpression or set of 
% &%LinguisticExpressions that perform a specific function related 
% to &%Communication, e.g. express a discourse about a particular 
% topic, and that are inscribed in a &%CorpuscularObject by &%Humans.")


fof( mergeA3094, axiom,
	(![TEXT]: 
		(
			(
				p__d__instance(TEXT,c__Text)
			)
			=>
			(
				(?[PART]: 
					(
						(
							(
								p__d__instance(PART,c__Object)
							)
						 &
							(
								p__part(PART,TEXT)
							)
						 &
							(
								p__d__instance(PART,c__LinguisticExpression)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3095, axiom,
	(![TEXT]: 
		(
			(
				p__d__instance(TEXT,c__Text)
			)
			=>
			(
				(?[WRITE]: 
					(
						(
							(
								p__d__instance(WRITE,c__Writing)
							)
						 &
							(
								p__result(WRITE,TEXT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3096, axiom,
	p__d__subclass(c__FactualText,c__Text)
).


fof( mergeA3097, axiom,
	p__d__disjoint(c__FactualText,c__FictionalText)
).



% ($documentation FactualText EnglishLanguage "The class of &%Texts that purport to 
% reveal facts about the world.  Such texts are often known as information 
% or as non-fiction.  Note that something can be an instance of 
% &%FactualText, even if it is wholly inaccurate.  Whether something 
% is a &%FactualText is determined by the beliefs of the agent creating 
% the text.")


% ($comment 
% ;; NS: delete.  The 2nd argument to &%authors must be a &%Class.
% ;; (=>
% ;;    (and
% ;;       ($instance ?TEXT FactualText)
% ;;       (authors ?AGENT ?TEXT)
% ;;       (subsumesContentInstance ?TEXT ?CONTENT)
% ;;       ($instance ?CONTENT Formula))
% ;;    (believes ?AGENT ?CONTENT))
% ;;
% ;; NS: add.
% )

fof( mergeA3098, axiom,
	(![CLASS,TEXT,AGENT,CONTENT]: 
		(
			(
				(
					(
						p__d__instance(TEXT,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(TEXT,CLASS)
					)
				 &
					(
						p__d__subclass(CLASS,c__FactualText)
					)
				 &
					(
						p__authors(AGENT,CLASS)
					)
				 &
					(
						p__subsumesContentInstance(TEXT,CONTENT)
					)
				 &
					(
						p__d__instance(CONTENT,c__Formula)
					)
				)
			)
			=>
			(
				p__believes(AGENT,CONTENT)
			)
		)
	)
).


fof( mergeA3099, axiom,
	p__d__subclass(c__FictionalText,c__Text)
).



% ($documentation FictionalText EnglishLanguage "The class of &%Texts that purport to 
% be largely a product of the author's imagination, i.e. the author 
% does not believe that most of the content conveyed by the text is 
% an accurate depiction of the real world.  Note that something can 
% be an instance of &%FictionalText, even if it is completely true.  
% Whether something is a &%FictionalText is determined by the beliefs 
% of the agent creating the text.")


% ($comment 
% ;; NS: delete.  Wrong use of &%authors.  Also, the rule is supposed to
% ;; be about &%FictionalText, not &%FactualText.
% ;; (=>
% ;;    (and
% ;;       ($instance ?TEXT FactualText)
% ;;       (authors ?AGENT ?TEXT))
% ;;    (exists (?CONTENT)
% ;;       (and
% ;;          (subsumesContentInstance ?TEXT ?CONTENT)
% ;;          ($instance ?CONTENT Formula)
% ;;          (not (believes ?AGENT ?CONTENT)))))
% ;;
% ;; NS: add.
% )

fof( mergeA3100, axiom,
	(![CLASS,TEXT,AGENT]: 
		(
			(
				(
					(
						p__d__instance(TEXT,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(TEXT,CLASS)
					)
				 &
					(
						p__d__subclass(CLASS,c__FictionalText)
					)
				 &
					(
						p__authors(AGENT,CLASS)
					)
				)
			)
			=>
			(
				(?[CONTENT]: 
					(
						(
							(
								p__subsumesContentInstance(TEXT,CONTENT)
							)
						 &
							(
								p__d__instance(CONTENT,c__Formula)
							)
						 &
							(
								~ (
									p__believes(AGENT,CONTENT)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3101, axiom,
	p__d__subclass(c__Sentence,c__LinguisticExpression)
).



% ($documentation Sentence EnglishLanguage "A syntactically well-formed formula of a 
% &%Language.  It includes, at minimum, a predicate and a subject (which 
% may be explicit or implicit), and it expresses a &%Proposition.")


fof( mergeA3102, axiom,
	(![SENT]: 
		(
			(
				p__d__instance(SENT,c__Sentence)
			)
			=>
			(
				(?[PROP]: 
					(
						(
							(
								p__d__instance(PROP,c__Proposition)
							)
						 &
							(
								p__containsInformation(SENT,PROP)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3103, axiom,
	p__d__instance(c__authors,c__BinaryPredicate)
).


fof( mergeA3104, axiom,
	p__d__instance(c__authors,c__AsymmetricRelation)
).


% 	($domain authors 1 Agent)

% 	($domainSubclass authors 2 Text)

% ($comment 
% ;; NS: edit.
% )


% ($documentation authors EnglishLanguage "(&%authors ?AGENT ?TEXTCLASS)
% means that ?AGENT is creatively responsible for the content of all
% instances of ?TEXTCLASS.  For example, Agatha Christie is author of
% Murder_on_the_Orient_Express.")


% ($comment 
% ;; NS: edit.
% )

fof( mergeA3107, axiom,
	(![AGENT,TEXTCLASS]: 
		(
			(
				(
					(
						p__d__subclass(TEXTCLASS,c__Text)
					)
				 &
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__authors(AGENT,TEXTCLASS)
					)
				)
			)
			=>
			(
				(?[PROCESS,INSTANCE]: 
					(
						(
							(
								p__d__instance(PROCESS,c__Process)
							)
						 &
							(
								p__agent(PROCESS,AGENT)
							)
						 &
							(
								p__d__instance(INSTANCE,TEXTCLASS)
							)
						 &
							(
								p__result(PROCESS,INSTANCE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3108, axiom,
	p__d__instance(c__editor,c__BinaryPredicate)
).


fof( mergeA3109, axiom,
	p__d__instance(c__editor,c__AsymmetricRelation)
).


% 	($domain editor 1 Agent)

% 	($domainSubclass editor 2 Text)

% ($comment 
% ;; NS: edit.
% )


% ($documentation editor EnglishLanguage "(&%editor ?AGENT ?TEXTCLASS)
% means that ?AGENT is an editor of the content contained (or realized)
% in all instances of ?TEXTCLASS.")


fof( mergeA3112, axiom,
	p__d__instance(c__publishes,c__BinaryPredicate)
).


fof( mergeA3113, axiom,
	p__d__instance(c__publishes,c__AsymmetricRelation)
).


% 	($domain publishes 1 Organization)

% 	($domainSubclass publishes 2 Text)

% ($comment 
% ;; NS: edit.
% )


% ($documentation publishes EnglishLanguage "(&%publishes ?ORG
% ?TEXTCLASS) means that ?ORG publishes all instances of ?TEXTCLASS.
% For example, Bantam Books publishes Agatha Christie's
% Murder_on_the_Orient_Express.")


% ($comment 
% ;; NS: edit.
% )

fof( mergeA3116, axiom,
	(![TEXTCLASS,ORG,INST]: 
		(
			(
				(
					(
						p__d__subclass(TEXTCLASS,c__Text)
					)
				 &
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__publishes(ORG,TEXTCLASS)
					)
				 &
					(
						p__d__instance(INST,TEXTCLASS)
					)
				)
			)
			=>
			(
				(?[PUB]: 
					(
						(
							(
								p__d__instance(PUB,c__Publication)
							)
						 &
							(
								p__agent(PUB,ORG)
							)
						 &
							(
								p__patient(PUB,INST)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3117, axiom,
	p__d__instance(c__EditionFn,c__BinaryFunction)
).


fof( mergeA3118, axiom,
	p__d__instance(c__EditionFn,c__PartialValuedRelation)
).


% 	($domainSubclass EditionFn 1 ContentBearingObject)

% 	($domain EditionFn 2 PositiveInteger)

% 	($rangeSubclass EditionFn ContentBearingObject)


% ($documentation EditionFn EnglishLanguage "A &%BinaryFunction that maps a type of text 
% (e.g. Agatha Christie's Murder_on_the_Orient_Express) and a number 
% to the edition of the text type corresponding to the number.")


fof( mergeA3122, axiom,
	(![TEXT,INT2,INT1,EDITION1,EDITION2,CBO1,CBO2,PUB1,PUB2,DATE1,DATE2]: 
		(
			(
				(
					(
						p__d__instance(INT1,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(TEXT,c__ContentBearingObject)
					)
				 &
					(
						p__d__subclass(EDITION1,c__ContentBearingObject)
					)
				 &
					(
						p__d__instance(INT2,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(EDITION2,c__ContentBearingObject)
					)
				 &
					(
						p__d__instance(DATE1,c__Day)
					)
				 &
					(
						p__d__instance(DATE2,c__Day)
					)
				 &
					(
						( f__EditionFn2(TEXT,INT1) = EDITION1 )
					)
				 &
					(
						( f__EditionFn2(TEXT,INT2) = EDITION2 )
					)
				 &
					(
						p__greaterThan(INT2,INT1)
					)
				 &
					(
						p__d__instance(PUB1,c__Publication)
					)
				 &
					(
						p__d__instance(PUB2,c__Publication)
					)
				 &
					(
						p__d__instance(CBO1,EDITION1)
					)
				 &
					(
						p__d__instance(CBO2,EDITION2)
					)
				 &
					(
						p__patient(PUB1,CBO1)
					)
				 &
					(
						p__patient(PUB2,CBO2)
					)
				 &
					(
						p__date(PUB1,DATE1)
					)
				 &
					(
						p__date(PUB2,DATE2)
					)
				)
			)
			=>
			(
				p__before(f__EndFn1(DATE1),f__EndFn1(DATE2))
			)
		)
	)
).


fof( mergeA3123, axiom,
	(![NUMBER,TEXT1,TEXT2]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(TEXT1,c__ContentBearingObject)
					)
				 &
					(
						p__d__subclass(TEXT2,c__ContentBearingObject)
					)
				 &
					(
						( f__EditionFn2(TEXT1,NUMBER) = TEXT2 )
					)
				)
			)
			=>
			(
				p__subsumesContentClass(TEXT1,TEXT2)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moving to MILO   
% ;;($instance SeriesVolumeFn BinaryFunction)
% ;;($instance SeriesVolumeFn PartialValuedRelation)
% ;;(domainSubclass SeriesVolumeFn 1 Series)
% ;;(domain SeriesVolumeFn 2 PositiveInteger)
% ;;(rangeSubclass SeriesVolumeFn Text)
% ;;(documentation SeriesVolumeFn EnglishLanguage "A &%BinaryFunction that maps a type of &%Series 
% ;;(e.g. the Encyclopedia_Britannica or the Popular_Mechanics periodical) and a 
% ;;number to the volumes of the text type designated by the number.")
% ;;
% ;;(=>
% ;;   (and
% ;;      ($subclass ?TEXT Periodical)
% ;;      (equal (SeriesVolumeFn ?TEXT ?INT1) ?VOLUME1)
% ;;      (equal (SeriesVolumeFn ?TEXT ?INT2) ?VOLUME2)
% ;;      (greaterThan ?INT2 ?INT1)
% ;;      ($instance ?PUB1 Publication)
% ;;      ($instance ?PUB2 Publication)
% ;;      ($instance ?CBO1 ?VOLUME1)
% ;;      ($instance ?CBO2 ?VOLUME2)
% ;;      (patient ?PUB1 ?CBO1)
% ;;      (patient ?PUB2 ?CBO2)
% ;;      (date ?PUB1 ?DATE1)
% ;;      (date ?PUB2 ?DATE2))
% ;;   (before (EndFn ?DATE1) (EndFn ?DATE2)))
% ;;
% ;;(=>
% ;;   (equal (SeriesVolumeFn ?SERIES ?NUMBER) ?VOLUME)
% ;;   (subsumesContentClass ?SERIES ?VOLUME))
% ;;
% ;; KJN: Moving to MILO   
% ;;($instance PeriodicalIssueFn BinaryFunction)
% ;;($instance PeriodicalIssueFn PartialValuedRelation)
% ;;(domainSubclass PeriodicalIssueFn 1 Periodical)
% ;;(domain PeriodicalIssueFn 2 PositiveInteger)
% ;;(rangeSubclass PeriodicalIssueFn Periodical)
% ;;(documentation PeriodicalIssueFn EnglishLanguage "A &%BinaryFunction that maps a subclass of 
% ;;&%Periodical and a number to all of the issues of the &%Periodical corresponding 
% ;;to the number.") 
% ;;
% ;;(=>
% ;;   (equal (PeriodicalIssueFn ?PERIODICAL ?NUMBER) ?ISSUE)
% ;;   (subsumesContentClass ?PERIODICAL ?ISSUE))
% ;;
% ;; KJN: Moving to MILO   
% ;;($subclass Book Text)
% ;;(documentation Book EnglishLanguage "A &%Text that has pages and is bound.")
% )

fof( mergeA3124, axiom,
	p__d__subclass(c__Summary,c__Text)
).



% ($documentation Summary EnglishLanguage "A short &%Text that is a summary of another, 
% longer &%Text.")


fof( mergeA3125, axiom,
	(![TEXT]: 
		(
			(
				p__d__instance(TEXT,c__Summary)
			)
			=>
			(
				(?[TEXT2]: 
					(
						(
							(
								p__d__instance(TEXT2,c__Text)
							)
						 &
							(
								p__subsumesContentInstance(TEXT2,TEXT)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moving to MILO
% ;;($subclass Series Text)
% ;;(documentation Series EnglishLanguage "A &%Text consisting of multiple self-contained units.  
% ;;Some examples are an encyclopedia containing a couple dozen volumes, a television 
% ;;series made up of many episodes, a film serial, etc.")
% ;;
% ;;(=>
% ;;   ($instance ?SERIES Series)
% ;;   (exists (?BOOK1 ?BOOK2)
% ;;      (and
% ;;         ($instance ?BOOK1 Book)
% ;;         ($instance ?BOOK2 Book)
% ;;         (subsumesContentInstance ?SERIES ?BOOK1)
% ;;         (subsumesContentInstance ?SERIES ?BOOK2)
% ;;         (not (equal ?BOOK1 ?BOOK2)))))
% ;;
% ;;($subclass Periodical Series)
% ;;(documentation Periodical EnglishLanguage "A &%Series whose elements are published separately 
% ;;and on a periodic basis.")
% ;;
% ;;($subclass Article Text)
% ;;($disjoint Article Book)
% ;;(documentation Article EnglishLanguage "A relatively short &%Text that either is unbound or is 
% ;;bound with other &%Articles in a &%Book.") 
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?ARTICLE1 Article)
% ;;      ($instance ?BOOK Book)
% ;;      (subsumesContentInstance ?BOOK ?ARTICLE1))
% ;;   (exists (?ARTICLE2)
% ;;      (and
% ;;         ($instance ?ARTICLE2 Article)
% ;;         (not (equal ?ARTICLE2 ?ARTICLE1))
% ;;         (subsumesContentInstance ?BOOK ?ARTICLE2)))) 
% )

fof( mergeA3126, axiom,
	p__d__subclass(c__Certificate,c__Text)
).



% ($documentation Certificate EnglishLanguage "A &%Text that confers a right or obligation 
% on the holder of the &%Certificate.  Note that the right or obligation 
% need not be a legal one, as in the case of an academic diploma that grants 
% certain privileges in the professional world.")


fof( mergeA3127, axiom,
	(![DOC]: 
		(
			(
				p__d__instance(DOC,c__Certificate)
			)
			=>
			(
				(?[PROP,NORM]: 
					(
						(
							(
								p__d__instance(NORM,c__ObjectiveNorm)
							)
						 &
							(
								p__d__instance(PROP,c__Formula)
							)
						 &
							(
								(
									p__confersNorm(DOC,PROP,NORM)
								 |
									p__deprivesNorm(DOC,PROP,NORM)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3128, axiom,
	p__d__subclass(c__FinancialInstrument,c__Certificate)
).



% ($documentation FinancialInstrument EnglishLanguage "A document having monetary value 
% or recording a monetary transaction") 


fof( mergeA3129, axiom,
	p__d__subclass(c__Currency,c__FinancialInstrument)
).



% ($documentation Currency EnglishLanguage "Any element of the official currrency of some 
% &%Nation.  This covers both &%CurrencyBills and &%CurrencyCoins.")


fof( mergeA3130, axiom,
	(![CURRENCY]: 
		(
			(
				p__d__instance(CURRENCY,c__Currency)
			)
			=>
			(
				(?[MEASURE]: 
					(
						(
							(
								p__d__instance(MEASURE,c__CurrencyMeasure)
							)
						 &
							(
								p__monetaryValue(CURRENCY,MEASURE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3131, axiom,
	p__d__subclass(c__Patent,c__Certificate)
).



% ($documentation Patent EnglishLanguage "A &%Certificate that expresses the content of an 
% invention that has been accorded legal protection by a governemental 
% entity.")


fof( mergeA3132, axiom,
	p__d__subclass(c__Molecule,c__CompoundSubstance)
).



% ($documentation Molecule EnglishLanguage "A molecule is the smallest unit of matter of a 
% &%CompoundSubstance that retains all the physical and chemical properties 
% of that substance, e.g., Ne, H2, H2O.  A molecule is two or more &%Atoms 
% linked by a chemical bond.")


fof( mergeA3133, axiom,
	(![MOLE]: 
		(
			(
				p__d__instance(MOLE,c__Molecule)
			)
			=>
			(
				(?[ATOM1,ATOM2]: 
					(
						(
							(
								p__d__instance(ATOM1,c__Atom)
							)
						 &
							(
								p__d__instance(ATOM2,c__Atom)
							)
						 &
							(
								p__part(ATOM1,MOLE)
							)
						 &
							(
								p__part(ATOM2,MOLE)
							)
						 &
							(
								~ (
									( ATOM1 = ATOM2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3134, axiom,
	p__d__subclass(c__Artifact,c__Object)
).



% ($documentation Artifact EnglishLanguage "An &%Object that is the product of a 
% &%Making.")


fof( mergeA3135, axiom,
	(![ARTIFACT]: 
		(
			(
				p__d__instance(ARTIFACT,c__Artifact)
			)
			<=>
			(
				(?[MAKING]: 
					(
						(
							(
								p__d__instance(MAKING,c__Making)
							)
						 &
							(
								p__result(MAKING,ARTIFACT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3136, axiom,
	p__d__subclass(c__Product,c__Artifact)
).



% ($documentation Product EnglishLanguage "An &%Artifact that is produced by &%Manufacture.")


fof( mergeA3137, axiom,
	(![PRODUCT]: 
		(
			(
				p__d__instance(PRODUCT,c__Product)
			)
			=>
			(
				(?[MANUFACTURE]: 
					(
						(
							(
								p__d__instance(MANUFACTURE,c__Manufacture)
							)
						 &
							(
								p__result(MANUFACTURE,PRODUCT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3138, axiom,
	p__d__instance(c__version,c__BinaryPredicate)
).


fof( mergeA3139, axiom,
	p__d__instance(c__version,c__AsymmetricRelation)
).


fof( mergeA3140, axiom,
	p__d__instance(c__version,c__TransitiveRelation)
).


% 	($domainSubclass version 1 Artifact)

% 	($domainSubclass version 2 Artifact)


% ($documentation version EnglishLanguage "Some &%Artifacts have a life cycle with discrete 
% stages or versions.  (&%version ARTIFACT1 ARTIFACT2) means that ARTIFACT1 
% is a version of ARTIFACT2.  Note that this &%Predicate relates subclasses of 
% &%Artifact and not instances.")


fof( mergeA3143, axiom,
	(![ARTIFACT1,ARTIFACT2]: 
		(
			(
				(
					(
						p__d__subclass(ARTIFACT2,c__Artifact)
					)
				 &
					(
						p__d__subclass(ARTIFACT1,c__Artifact)
					)
				 &
					(
						p__version(ARTIFACT1,ARTIFACT2)
					)
				)
			)
			=>
			(
				p__d__subclass(ARTIFACT1,ARTIFACT2)
			)
		)
	)
).


% ($comment 
% ;; The following part of the ontology will eventually encompass all 
% ;; artifacts.  For the time being, it is mostly restricted to the content 
% ;; of the Ontolingua ontology component-assemblies, which covers the types 
% ;; of elements used to construct engineering systems.
% )

fof( mergeA3144, axiom,
	p__d__subclass(c__StationaryArtifact,c__Artifact)
).



% ($documentation StationaryArtifact EnglishLanguage "A &%StationaryArtifact is an &%Artifact 
% that has a fixed spatial location.  Most instances of this &%Class are 
% architectural works, e.g. the Eiffel Tower, the Great Pyramids, office towers, 
% single-family houses, etc.")


% 	(forall (?ARTIFACT)
% 		(=> 
% 			($instance ?ARTIFACT StationaryArtifact)
% 			(exists (?PLACE)
% 				(and 
% 					(holdsDuring (WhenFn ?ARTIFACT) (located ?ARTIFACT ?PLACE))
% 					(not 
% 						(exists (?P2)
% 							(and 
% 								(holdsDuring (WhenFn ?ARTIFACT) (located ?ARTIFACT ?P2))
% 								(not 
% 									(equal ?PLACE ?P2)
% 								)
% 							)
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( mergeA3146, axiom,
	p__d__subclass(c__Building,c__StationaryArtifact)
).



% ($documentation Building EnglishLanguage "The Class of &%StationaryArtifacts which are 
% intended to house &%Humans and their activities.")


fof( mergeA3147, axiom,
	(![BUILDING]: 
		(
			(
				p__d__instance(BUILDING,c__Building)
			)
			=>
			(
				(?[HUMAN]: 
					(
						(
							(
								p__d__instance(HUMAN,c__Human)
							)
						 &
							(
								(
									p__inhabits(HUMAN,BUILDING)
								 |
									(?[ACT]: 
										(
											(
												(
													p__d__instance(ACT,c__Process)
												)
											 &
												(
													p__agent(ACT,HUMAN)
												)
											 &
												(
													p__located(ACT,BUILDING)
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3148, axiom,
	p__d__subclass(c__Room,c__StationaryArtifact)
).


fof( mergeA3149, axiom,
	p__d__disjoint(c__Room,c__Building)
).



% ($documentation Room EnglishLanguage "A &%properPart of a &%Building which is separated from 
% the exterior of the &%Building and/or other &%Rooms of the &%Building by walls. 
% Some &%Rooms may have a specific purpose, e.g. sleeping, bathing, cooking, 
% entertainment, etc.")


fof( mergeA3150, axiom,
	(![ROOM]: 
		(
			(
				p__d__instance(ROOM,c__Room)
			)
			=>
			(
				(?[BUILD]: 
					(
						(
							(
								p__d__instance(BUILD,c__Building)
							)
						 &
							(
								p__properPart(ROOM,BUILD)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3151, axiom,
	p__d__subclass(c__House,c__ResidentialBuilding)
).


fof( mergeA3152, axiom,
	p__d__subclass(c__House,c__SingleFamilyResidence)
).



% ($documentation House EnglishLanguage "A &%ResidentialBuilding which is intended to be 
% inhabited by members of the same &%SocialUnit.  &%Houses are distinguished 
% from temporary housing like hotels and multi-family dwellings like condominium 
% and apartment buildings.")


fof( mergeA3153, axiom,
	p__d__subclass(c__Residence,c__StationaryArtifact)
).


fof( mergeA3154, axiom,
	p__d__partition3(c__Residence,c__PermanentResidence,c__TemporaryResidence)
).



% ($documentation Residence EnglishLanguage "A &%Building or part of a &%Building which provides 
% some accomodation for sleeping.")


fof( mergeA3155, axiom,
	(![RESIDENCE]: 
		(
			(
				p__d__instance(RESIDENCE,c__Residence)
			)
			=>
			(
				(
					p__d__instance(RESIDENCE,c__House)
				 |
					(?[BUILDING]: 
						(
							(
								(
									p__d__instance(BUILDING,c__ResidentialBuilding)
								)
							 &
								(
									p__part(RESIDENCE,BUILDING)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3156, axiom,
	p__d__subclass(c__PermanentResidence,c__Residence)
).



% ($documentation PermanentResidence EnglishLanguage "A &%Residence where people live, i.e. 
% where people have a &%home.")


fof( mergeA3157, axiom,
	(![RESIDENCE]: 
		(
			(
				p__d__instance(RESIDENCE,c__PermanentResidence)
			)
			=>
			(
				(?[PERSON]: 
					(
						(
							(
								p__d__instance(PERSON,c__Human)
							)
						 &
							(
								p__home(PERSON,RESIDENCE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3158, axiom,
	p__d__subclass(c__TemporaryResidence,c__Residence)
).



% ($documentation TemporaryResidence EnglishLanguage "A &%Residence which is strictly temporary, 
% i.e. where no one makes his/her &%home.")

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of home is PermanentResidence
% ;;
% ;;(=>
% ;;  ($instance ?RESIDENCE TemporaryResidence)
% ;;  (not 
% ;;    (exists (?PERSON)
% ;;      (home ?PERSON ?RESIDENCE))))
% )

fof( mergeA3159, axiom,
	p__d__subclass(c__ResidentialBuilding,c__Building)
).


fof( mergeA3160, axiom,
	p__d__subclass(c__ResidentialBuilding,c__Residence)
).



% ($documentation ResidentialBuilding EnglishLanguage "A &%Building which provides some 
% accomodation for sleeping.  Note that this class does not cover just 
% permanent residences, e.g. &%Houses and condominium and apartment buildings, 
% but also temporary residences, e.g. hotels and dormitories.  
% &%ResidentialBuildings are also distinguished from &%CommercialBuildings, 
% which are intended to serve an organizational rather than a residential 
% function.")


% ($comment 
% ;; Moved hotel definition to Hotel.kif.  
% ;;($subclass Hotel ResidentialBuilding)
% ;;($subclass Hotel TemporaryResidence)
% ;;($subclass Hotel CommercialAgent)
% ;;(documentation Hotel EnglishLanguage "A &%ResidentialBuilding which provides temporary 
% ;;accommodations to guests in exchange for money.")
% )

fof( mergeA3161, axiom,
	p__d__subclass(c__SingleFamilyResidence,c__PermanentResidence)
).



% ($documentation SingleFamilyResidence EnglishLanguage "A &%PermanentResidence which is 
% intended to be the &%home of a single &%SocialUnit.  This class covers 
% &%Houses, &%ApartmentUnits, and &%CondominiumUnits.")


% 	(forall (?RESIDENCE ?AGENT1 ?AGENT2 ?UNIT)
% 		(=> 
% 			($instance ?RESIDENCE SingleFamilyResidence)
% 			(hasPurpose ?RESIDENCE (forall ([|] ?AGENT1 ([|] ?AGENT2 [])) (implies (and ([|] (home ?AGENT1 ?RESIDENCE) ([|] (home ?AGENT2 ?RESIDENCE) []))) (exists ([|] ?UNIT []) (and ([|] ($instance ?UNIT SocialUnit) ([|] (member ?AGENT1 ?UNIT) ([|] (member ?AGENT2 ?UNIT) []))))))))
% 		)
% 	)

fof( mergeA3163, axiom,
	p__d__subclass(c__ArtWork,c__Artifact)
).



% ($documentation ArtWork EnglishLanguage "&%Artifacts that are created primarily for 
% aesthetic appreciation.  Note that this &%Class does not include 
% most examples of architecture, which belong under &%StationaryArtifact.")


% 	(forall (?H ?P ?AW)
% 		(=> 
% 			($instance ?AW ArtWork)
% 			(hasPurpose ?AW (exists ([|] ?H ([|] ?P [])) (and ([|] ($instance ?H Human) ([|] ($instance ?P Perception) ([|] (experiencer ?P ?H) ([|] (patient ?P ?AW) [])))))))
% 		)
% 	)

% 	(forall (?H ?P ?AW)
% 		(=> 
% 			($instance ?AW ArtWork)
% 			(hasPurpose ?AW (exists ([|] ?P []) (and ([|] ($instance ?H Human) ([|] (desires ?H (exists ([|] ?P []) (and ([|] ($instance ?P Perception) ([|] (experiencer ?P ?H) ([|] (patient ?P ?AW) [])))))) [])))))
% 		)
% 	)

fof( mergeA3166, axiom,
	p__d__subclass(c__RepresentationalArtWork,c__ArtWork)
).


fof( mergeA3167, axiom,
	p__d__subclass(c__RepresentationalArtWork,c__Icon)
).



% ($documentation RepresentationalArtWork EnglishLanguage "Any &%ArtWork that &%represents 
% something &%Physical.")


fof( mergeA3168, axiom,
	(![RA]: 
		(
			(
				p__d__instance(RA,c__RepresentationalArtWork)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__d__instance(P,c__Physical)
							)
						 &
							(
								p__represents(RA,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3169, axiom,
	p__d__subclass(c__Fabric,c__Artifact)
).


fof( mergeA3170, axiom,
	p__d__disjoint(c__Fabric,c__StationaryArtifact)
).



% ($documentation Fabric EnglishLanguage "&%Artifacts that are created by weaving together 
% natural or synthetic fibers or by treating the skins of certain sorts of 
% &%Animals.  Note that this &%Class includes articles that are created by 
% stitching together various types of fabrics, e.g. bedspreads.  On the other 
% hand, &%Clothing is not a &%subclass of &%Fabric, because many clothing items 
% contain elements that are not fabrics.")


fof( mergeA3171, axiom,
	p__d__subclass(c__WearableItem,c__Artifact)
).



% ($documentation WearableItem EnglishLanguage "&%WearableItem is the subclass of 
% &%Artifacts that are made to be worn on the body.")


% 	(forall (?H ?WI)
% 		(=> 
% 			($instance ?WI WearableItem)
% 			(hasPurpose ?WI (exists ([|] ?H []) (and ([|] ($instance ?H Human) ([|] (wears ?H ?WI) [])))))
% 		)
% 	)

fof( mergeA3173, axiom,
	p__d__subclass(c__Clothing,c__WearableItem)
).


fof( mergeA3174, axiom,
	p__d__disjoint(c__Clothing,c__StationaryArtifact)
).



% ($documentation Clothing EnglishLanguage "&%Artifact made out of fabrics and possibly other 
% materials that are used to cover the bodies of &%Humans.")


fof( mergeA3175, axiom,
	(![CLOTHING]: 
		(
			(
				p__d__instance(CLOTHING,c__Clothing)
			)
			=>
			(
				(?[FABRIC]: 
					(
						(
							(
								p__d__instance(FABRIC,c__Fabric)
							)
						 &
							(
								p__part(FABRIC,CLOTHING)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3176, axiom,
	p__d__instance(c__wears,c__BinaryPredicate)
).


% 	($domain wears 1 Animal)

% 	($domain wears 2 WearableItem)


% ($documentation wears EnglishLanguage "(&%wears ?AGENT ?WI) means that ?AGENT is wearing 
% the &%WearableItem item ?WI.")


fof( mergeA3179, axiom,
	(![WI,AGENT]: 
		(
			(
				(
					(
						p__d__instance(WI,c__WearableItem)
					)
				 &
					(
						p__d__instance(AGENT,c__Animal)
					)
				 &
					(
						p__wears(AGENT,WI)
					)
				)
			)
			=>
			(
				p__located(WI,AGENT)
			)
		)
	)
).


fof( mergeA3180, axiom,
	(![C,A,P]: 
		(
			(
				(
					(
						p__d__instance(C,c__WearableItem)
					)
				 &
					(
						p__d__instance(A,c__Animal)
					)
				 &
					(
						p__d__instance(P,c__WearableItem)
					)
				 &
					(
						p__wears(A,C)
					)
				 &
					(
						p__part(P,C)
					)
				)
			)
			=>
			(
				p__wears(A,P)
			)
		)
	)
).


fof( mergeA3181, axiom,
	p__d__subclass(c__Device,c__Artifact)
).



% ($documentation Device EnglishLanguage "A &%Device is an &%Artifact whose purpose is to 
% serve as an &%instrument in a specific subclass of &%Process.")


fof( mergeA3182, axiom,
	(![DEVICE]: 
		(
			(
				p__d__instance(DEVICE,c__Device)
			)
			=>
			(
				(?[PROC]: 
					(
						(
							(
								p__d__subclass(PROC,c__Process)
							)
						 &
							(
								p__capability(PROC,c__instrument,DEVICE)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?INST ?DEVICE)
% 		(=> 
% 			($instance ?DEVICE Device)
% 			(exists (?PROC)
% 				(hasPurpose ?DEVICE (exists ([|] ?INST []) (and ([|] ($instance ?INST ?PROC) ([|] (instrument ?INST ?DEVICE) [])))))
% 			)
% 		)
% 	)

fof( mergeA3184, axiom,
	p__d__subclass(c__MusicalInstrument,c__Device)
).



% ($documentation MusicalInstrument EnglishLanguage "A &%Device which is manipulated by a &%Human 
% and whose purpose is &%MakingMusic.")


fof( mergeA3185, axiom,
	(![INSTRUMENT]: 
		(
			(
				p__d__instance(INSTRUMENT,c__MusicalInstrument)
			)
			=>
			(
				p__capability(c__MakingMusic,c__instrument,INSTRUMENT)
			)
		)
	)
).


fof( mergeA3186, axiom,
	p__d__subclass(c__TransportationDevice,c__Device)
).



% ($documentation TransportationDevice EnglishLanguage "A &%TransportationDevice is a &%Device 
% which serves as the &%instrument in a &%Transportation &%Process which carries 
% the &%patient of the &%Process from one point to another.")


fof( mergeA3187, axiom,
	(![DEVICE]: 
		(
			(
				p__d__instance(DEVICE,c__TransportationDevice)
			)
			=>
			(
				p__capability(c__Transportation,c__instrument,DEVICE)
			)
		)
	)
).


fof( mergeA3188, axiom,
	p__d__subclass(c__Vehicle,c__TransportationDevice)
).



% ($documentation Vehicle EnglishLanguage "&%Vehicle is the subclass of 
% &%TransportationDevices that transport passengers or goods 
% from one place to another by moving from one place to the other 
% with them, e.g., cars, trucks, ferries, and airplanes.  Contrast 
% with devices such as pipelines, escalators, or supermarket 
% checkout belts, which carry items from one place to another by means 
% of a moving part, without the device removing from the origin to 
% the destination.")


% 	(forall (?MOVE ?TRANSPORT ?FROM)
% 		(=> 
% 			(and 
% 				($instance ?TRANSPORT Vehicle)
% 				($instance ?MOVE Translocation)
% 				(instrument ?MOVE ?TRANSPORT)
% 				(origin ?MOVE ?FROM)
% 			)
% 			(holdsDuring (BeginFn (WhenFn ?MOVE)) (located ?TRANSPORT ?FROM))
% 		)
% 	)

% 	(forall (?MOVE ?TRANSPORT ?TO)
% 		(=> 
% 			(and 
% 				($instance ?TRANSPORT Vehicle)
% 				($instance ?MOVE Translocation)
% 				(instrument ?MOVE ?TRANSPORT)
% 				(destination ?MOVE ?TO)
% 			)
% 			(holdsDuring (BeginFn (WhenFn ?MOVE)) (located ?TRANSPORT ?TO))
% 		)
% 	)

fof( mergeA3191, axiom,
	p__d__subclass(c__MeasuringDevice,c__Device)
).



% ($documentation MeasuringDevice EnglishLanguage "Any &%Device whose purpose is to measure a 
% &%PhysicalQuantity.")


% 	(forall (?MEASURE ?DEVICE)
% 		(=> 
% 			($instance ?DEVICE MeasuringDevice)
% 			(hasPurpose ?DEVICE (exists ([|] ?MEASURE []) (and ([|] ($instance ?MEASURE Measuring) ([|] (instrument ?MEASURE ?DEVICE) [])))))
% 		)
% 	)

fof( mergeA3193, axiom,
	p__d__subclass(c__AttachingDevice,c__Device)
).



% ($documentation AttachingDevice EnglishLanguage "A &%Device whose purpose is to attach one thing 
% to something else, e.g. nails, screws, buttons, etc.")


fof( mergeA3194, axiom,
	(![DEVICE]: 
		(
			(
				p__d__instance(DEVICE,c__AttachingDevice)
			)
			=>
			(
				(?[ATTACH]: 
					(
						(
							(
								p__d__instance(ATTACH,c__Attaching)
							)
						 &
							(
								p__instrument(ATTACH,DEVICE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3195, axiom,
	p__d__subclass(c__Weapon,c__Device)
).



% ($documentation Weapon EnglishLanguage "The &%Class of &%Devices that are designed 
% primarily to damage or destroy &%Humans/&%Animals, &%StationaryArtifacts or 
% the places inhabited by &%Humans/&%Animals.")


fof( mergeA3196, axiom,
	(![WEAPON]: 
		(
			(
				p__d__instance(WEAPON,c__Weapon)
			)
			=>
			(
				p__capability(c__Damaging,c__instrument,WEAPON)
			)
		)
	)
).


% 	(forall (?WEAPON ?D ?PATIENT)
% 		(=> 
% 			($instance ?WEAPON Weapon)
% 			(hasPurpose ?WEAPON (exists ([|] ?D ([|] ?PATIENT [])) (and ([|] ($instance ?D Damaging) ([|] (instrument ?D ?WEAPON) ([|] (patient ?D ?PATIENT) []))))))
% 		)
% 	)

fof( mergeA3198, axiom,
	p__d__subclass(c__Machine,c__Device)
).



% ($documentation Machine EnglishLanguage "&%Machines are &%Devices that that have a 
% well-defined &%resource and &%result and that automatically convert 
% the &%resource into the &%result.")


fof( mergeA3199, axiom,
	(![MACHINE,PROC]: 
		(
			(
				(
					(
						p__d__instance(PROC,c__Process)
					)
				 &
					(
						p__d__instance(MACHINE,c__Machine)
					)
				 &
					(
						p__instrument(PROC,MACHINE)
					)
				)
			)
			=>
			(
				(?[RESOURCE,RESULT]: 
					(
						(
							(
								p__d__instance(RESOURCE,c__Object)
							)
						 &
							(
								p__resource(PROC,RESOURCE)
							)
						 &
							(
								p__result(PROC,RESULT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3200, axiom,
	p__d__subclass(c__EngineeringComponent,c__Device)
).



% ($documentation EngineeringComponent EnglishLanguage "A fundamental concept that applies 
% in many engineering domains.  An &%EngineeringComponent is an element of 
% a &%Device that is a physically whole object, such as one might 
% see listed as standard parts in a catalog.  The main difference betweeen 
% &%EngineeringComponents and arbitrary globs of matter is that 
% &%EngineeringComponents are object-like in a modeling sense.  Thus, an 
% &%EngineeringComponent is not an arbtrary subregion, but a part of a 
% system with a stable identity.")


fof( mergeA3201, axiom,
	(![COMP]: 
		(
			(
				(
					(
						p__d__instance(COMP,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(COMP,c__EngineeringComponent)
					)
				)
			)
			=>
			(
				(?[DEVICE]: 
					(
						(
							(
								p__d__instance(DEVICE,c__CorpuscularObject)
							)
						 &
							(
								p__d__instance(DEVICE,c__Device)
							)
						 &
							(
								p__component(COMP,DEVICE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3202, axiom,
	(![MACHINE]: 
		(
			(
				p__d__instance(MACHINE,c__Machine)
			)
			=>
			(
				(?[COMP1,COMP2]: 
					(
						(
							(
								p__d__instance(COMP1,c__EngineeringComponent)
							)
						 &
							(
								p__d__instance(COMP2,c__EngineeringComponent)
							)
						 &
							(
								~ (
									( COMP1 = COMP2 )
								)
							)
						 &
							(
								p__part(COMP1,MACHINE)
							)
						 &
							(
								p__part(COMP2,MACHINE)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3203, axiom,
	p__subrelation(c__engineeringSubcomponent,c__properPart)
).


% 	($domain engineeringSubcomponent 1 EngineeringComponent)

% 	($domain engineeringSubcomponent 2 EngineeringComponent)


% ($documentation engineeringSubcomponent EnglishLanguage "(&%engineeringSubcomponent ?SUB 
% ?SUPER) means that the &%EngineeringComponent ?SUB is structurally a 
% &%properPart of ?SUPER.  This relation is an &%AsymmetricRelation, since 
% two &%EngineeringComponents cannot be subcomponents of each other.")


fof( mergeA3206, axiom,
	p__d__instance(c__connectedEngineeringComponents,c__SymmetricRelation)
).


fof( mergeA3207, axiom,
	p__d__instance(c__connectedEngineeringComponents,c__IrreflexiveRelation)
).


fof( mergeA3208, axiom,
	p__subrelation(c__connectedEngineeringComponents,c__connected)
).


% 	($domain connectedEngineeringComponents 1 EngineeringComponent)

% 	($domain connectedEngineeringComponents 2 EngineeringComponent)


% ($documentation connectedEngineeringComponents EnglishLanguage "This is the most general 
% connection relation between &%EngineeringComponents.  If 
% (&%connectedEngineeringComponents ?COMP1 ?COMP2), then neither ?COMP1 nor 
% ?COMP2 can be an &%engineeringSubcomponent of the other.  The relation 
% &%connectedEngineeringComponents is a &%SymmetricRelation, there is no 
% information in the direction of connection between two components.  It is 
% also an &%IrreflexiveRelation, no &%EngineeringComponent bears this relation 
% to itself.  Note that this relation does not associate a name or type 
% with the connection.")


fof( mergeA3211, axiom,
	(![COMP2,COMP1]: 
		(
			(
				(
					(
						p__d__instance(COMP2,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(COMP1,c__EngineeringComponent)
					)
				 &
					(
						p__connectedEngineeringComponents(COMP1,COMP2)
					)
				)
			)
			=>
			(
				(
					(
						~ (
							p__engineeringSubcomponent(COMP1,COMP2)
						)
					)
				 &
					(
						~ (
							p__engineeringSubcomponent(COMP2,COMP1)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3212, axiom,
	p__d__subclass(c__EngineeringConnection,c__EngineeringComponent)
).



% ($documentation EngineeringConnection EnglishLanguage "An &%EngineeringConnection is an 
% &%EngineeringComponent that represents a connection relationship between 
% two other &%EngineeringComponents.  It is a reification of the 
% &%Predicate &%connectedEngineeringComponents.  That means that whenever 
% this &%Predicate holds between two &%EngineeringComponents, there exists an 
% &%EngineeringConnection.  The practical reason for reifying a relationship 
% is to be able to attach other information about it. For example, one
% might want to say that a particular connection is associated with some 
% shared parameters, or that it is of a particular type.  
% &%EngineeringConnections are &%EngineeringComponents and can therefore be 
% an &%engineeringSubcomponent of other &%EngineeringComponents.  However, 
% to provide for modular regularity in component systems, 
% &%EngineeringConnections cannot be connected.  For each pair of 
% &%EngineeringComponents related by &%connectedEngineeringComponents, there 
% exists at least one &%EngineeringConnection.  However, that object may not 
% be unique, and the same &%EngineeringConnection may be associated with 
% several pairs of &%EngineeringComponents.")


fof( mergeA3213, axiom,
	(![CONNECTION]: 
		(
			(
				p__d__instance(CONNECTION,c__EngineeringConnection)
			)
			=>
			(
				(?[COMP1,COMP2]: 
					(
						(
							(
								p__d__instance(COMP2,c__EngineeringComponent)
							)
						 &
							(
								p__d__instance(COMP1,c__EngineeringComponent)
							)
						 &
							(
								p__connectsEngineeringComponents(CONNECTION,COMP1,COMP2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3214, axiom,
	(![COMP1,COMP2]: 
		(
			(
				(
					(
						p__d__instance(COMP2,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(COMP1,c__EngineeringComponent)
					)
				 &
					(
						p__connectedEngineeringComponents(COMP1,COMP2)
					)
				)
			)
			=>
			(
				(
					(
						~ (
							p__d__instance(COMP1,c__EngineeringConnection)
						)
					)
				 &
					(
						~ (
							p__d__instance(COMP2,c__EngineeringConnection)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3215, axiom,
	(![COMP1,COMP2]: 
		(
			(
				(
					(
						p__d__instance(COMP2,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(COMP1,c__EngineeringComponent)
					)
				)
			)
			=>
			(
				(
					p__connectedEngineeringComponents(COMP1,COMP2)
				)
				<=>
				(
					(?[CONNECTION]: 
						(
							(
								(
									p__d__instance(CONNECTION,c__EngineeringConnection)
								)
							 &
								(
									p__connectsEngineeringComponents(CONNECTION,COMP1,COMP2)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3216, axiom,
	p__subrelation(c__connectsEngineeringComponents,c__connects)
).


% 	($domain connectsEngineeringComponents 1 EngineeringConnection)

% 	($domain connectsEngineeringComponents 2 EngineeringComponent)

% 	($domain connectsEngineeringComponents 3 EngineeringComponent)


% ($documentation connectsEngineeringComponents EnglishLanguage "&%connectsEngineeringComponents 
% is a &%TernaryPredicate that maps from an &%EngineeringConnection to the 
% &%EngineeringComponents it connects.  Since &%EngineeringComponents cannot 
% be connected to themselves and there cannot be an &%EngineeringConnection 
% without a &%connectedEngineeringComponents &%Predicate, the second and third 
% arguments of any &%connectsEngineeringComponents relationship will always be 
% distinct for any given first argument.")


% ($comment 
% ;; This following part contains definitions and axioms relating to social 
% ;; groups and the relations between them. 
% )

fof( mergeA3220, axiom,
	p__d__subclass(c__CommercialAgent,c__Agent)
).



% ($documentation CommercialAgent EnglishLanguage "An &%Agent that
% provides products and/or services for a fee with the aim of making a
% profit.")


% ($comment 
% ;; KJN: Moved from Media.kif
% )

fof( mergeA3221, axiom,
	p__d__subclass(c__Business,c__CommercialAgent)
).


fof( mergeA3222, axiom,
	p__d__subclass(c__Business,c__Organization)
).



% ($documentation Business EnglishLanguage "An &%instance of
% &%Business is an &%Organization that is a &%CommercialAgent.")


% ($comment 
% ;; KJN: Removing this and putting in definition of Corporation that subclasses it from Business
% ;;($subclass Corporation CommercialAgent)
% ;;($subclass Corporation Organization)
% )

fof( mergeA3223, axiom,
	p__d__subclass(c__Corporation,c__Business)
).


% ($comment 
% ;; NS: add.
% )

fof( mergeA3224, axiom,
	p__d__subclass(c__Corporation,c__LegalAgent)
).



% ($documentation Corporation EnglishLanguage "An &%Organization that has
% a special legal status that allows a group of persons to act as a
% &%CommercialAgent and that insulates the owners (shareholders) from
% many liabilities that might result from the corporation's operation.")


fof( mergeA3225, axiom,
	p__d__subclass(c__Manufacturer,c__Corporation)
).



% ($documentation Manufacturer EnglishLanguage "Any &%Corporation which manufactures &%Products.")


% 	(forall (?MANUFACTURE ?ORG)
% 		(=> 
% 			($instance ?ORG Manufacturer)
% 			(hasPurpose ?ORG (exists ([|] ?MANUFACTURE []) (and ([|] ($instance ?MANUFACTURE Manufacture) ([|] ($instance ?MANUFACTURE CommercialService) ([|] (agent ?MANUFACTURE ?ORG) []))))))
% 		)
% 	)

fof( mergeA3227, axiom,
	p__d__subclass(c__MercantileOrganization,c__Corporation)
).



% ($documentation MercantileOrganization EnglishLanguage "Any &%Corporation which sells 
% goods or services to customers for a profit.")


% 	(forall (?SELL ?ORG)
% 		(=> 
% 			($instance ?ORG MercantileOrganization)
% 			(hasPurpose ?ORG (exists ([|] ?SELL []) (and ([|] ($instance ?SELL Selling) ([|] ($instance ?SELL CommercialService) ([|] (agent ?SELL ?ORG) []))))))
% 		)
% 	)

fof( mergeA3229, axiom,
	p__d__subclass(c__Group,c__Collection)
).


fof( mergeA3230, axiom,
	p__d__subclass(c__Group,c__Agent)
).



% ($documentation Group EnglishLanguage "A &%Collection of &%Agents, e.g. a flock 
% of sheep, a herd of goats, or the local Boy Scout troop.") 


fof( mergeA3231, axiom,
	(![GROUP,MEMB]: 
		(
			(
				(
					(
						p__d__instance(MEMB,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(GROUP,c__Group)
					)
				 &
					(
						p__member(MEMB,GROUP)
					)
				)
			)
			=>
			(
				p__d__instance(MEMB,c__Agent)
			)
		)
	)
).


fof( mergeA3232, axiom,
	p__d__subclass(c__GroupOfPeople,c__Group)
).



% ($documentation GroupOfPeople EnglishLanguage "Any &%Group whose &%members are 
% exclusively &%Humans.")


fof( mergeA3233, axiom,
	(![GROUP,MEMBER]: 
		(
			(
				(
					(
						p__d__instance(MEMBER,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(GROUP,c__GroupOfPeople)
					)
				 &
					(
						p__member(MEMBER,GROUP)
					)
				)
			)
			=>
			(
				p__d__instance(MEMBER,c__Human)
			)
		)
	)
).


fof( mergeA3234, axiom,
	p__d__subclass(c__AgeGroup,c__GroupOfPeople)
).



% ($documentation AgeGroup EnglishLanguage "A &%GroupOfPeople whose &%members all have the 
% same &%age.")


fof( mergeA3235, axiom,
	(![GROUP,MEMB1,MEMB2,AGE1,AGE2]: 
		(
			(
				(
					(
						p__d__instance(MEMB1,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(MEMB2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(AGE1,c__TimeDuration)
					)
				 &
					(
						p__d__instance(AGE2,c__TimeDuration)
					)
				 &
					(
						p__d__instance(GROUP,c__AgeGroup)
					)
				 &
					(
						p__member(MEMB1,GROUP)
					)
				 &
					(
						p__member(MEMB2,GROUP)
					)
				 &
					(
						p__age(MEMB1,AGE1)
					)
				 &
					(
						p__age(MEMB2,AGE2)
					)
				)
			)
			=>
			(
				( AGE1 = AGE2 )
			)
		)
	)
).


fof( mergeA3236, axiom,
	p__d__subclass(c__FamilyGroup,c__GroupOfPeople)
).



% ($documentation FamilyGroup EnglishLanguage "A &%GroupOfPeople whose &%members bear 
% &%familyRelations to one another.")


fof( mergeA3237, axiom,
	(![GROUP,MEMB1,MEMB2]: 
		(
			(
				(
					(
						p__d__instance(MEMB1,c__Organism)
					)
				 &
					(
						p__d__instance(MEMB2,c__Organism)
					)
				 &
					(
						p__d__instance(GROUP,c__FamilyGroup)
					)
				 &
					(
						p__member(MEMB1,GROUP)
					)
				 &
					(
						p__member(MEMB2,GROUP)
					)
				)
			)
			=>
			(
				p__familyRelation(MEMB1,MEMB2)
			)
		)
	)
).


fof( mergeA3238, axiom,
	p__d__subclass(c__SocialUnit,c__GroupOfPeople)
).



% ($documentation SocialUnit EnglishLanguage "A &%GroupOfPeople who all have the same &%home.")


fof( mergeA3239, axiom,
	(![UNIT,MEMBER]: 
		(
			(
				(
					(
						p__d__instance(MEMBER,c__Human)
					)
				 &
					(
						p__d__instance(UNIT,c__SocialUnit)
					)
				)
			)
			=>
			(
				(?[HOME]: 
					(
						(
							(
								p__d__instance(HOME,c__PermanentResidence)
							)
						 &
							(
								(
									p__member(MEMBER,UNIT)
								)
								=>
								(
									p__home(MEMBER,HOME)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3240, axiom,
	p__d__instance(c__ImmediateFamilyFn,c__UnaryFunction)
).


% 	($domain ImmediateFamilyFn 1 Human)

% 	($range ImmediateFamilyFn FamilyGroup)


% ($documentation ImmediateFamilyFn EnglishLanguage "(&%ImmediateFamilyFn ?PERSON) denotes the 
% immediate family of ?PERSON, i.e. the &%Group consisting of the &%parents of 
% ?PERSON and anyone of whom ?PERSON is a &%parent.")


fof( mergeA3243, axiom,
	(![P,FAMILY,MEMBER]: 
		(
			(
				(
					(
						p__d__instance(P,c__Human)
					)
				 &
					(
						p__d__instance(FAMILY,c__FamilyGroup)
					)
				 &
					(
						( f__ImmediateFamilyFn1(P) = FAMILY )
					)
				 &
					(
						p__d__instance(MEMBER,c__Organism)
					)
				 &
					(
						p__member(MEMBER,FAMILY)
					)
				)
			)
			=>
			(
				(?[OTHER]: 
					(
						(
							(
								p__d__instance(OTHER,c__Organism)
							)
						 &
							(
								(
									p__parent(MEMBER,OTHER)
								 |
									p__parent(OTHER,MEMBER)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3244, axiom,
	(![FAMILY,PERSON]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__d__instance(FAMILY,c__FamilyGroup)
					)
				 &
					(
						( f__ImmediateFamilyFn1(PERSON) = FAMILY )
					)
				)
			)
			=>
			(
				(?[MEMBER]: 
					(
						(
							(
								p__d__instance(MEMBER,c__Organism)
							)
						 &
							(
								p__member(MEMBER,FAMILY)
							)
						 &
							(
								(
									p__parent(MEMBER,PERSON)
								 |
									p__parent(PERSON,MEMBER)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3245, axiom,
	p__d__instance(c__relative,c__BinaryPredicate)
).


fof( mergeA3246, axiom,
	p__d__instance(c__relative,c__SymmetricRelation)
).


% 	($domain relative 1 Organism)

% 	($domain relative 2 Organism)


% ($documentation relative EnglishLanguage "(&%relative ?O1 ?O2) means that ?O1
% and ?O2 are relatives, whether through common ancestry (consanguinity),
% someone's marriage (affinity), or someone's adoption.  This definition is
% intentionally broad, so as to capture a wide array of `familial'
% relations.  The notion of who counts as `family' also varies between
% cultures, but that aspect of meaning is not addressed here.")


fof( mergeA3249, axiom,
	p__subrelation(c__familyRelation,c__relative)
).


fof( mergeA3250, axiom,
	p__subrelation(c__spouse,c__relative)
).


% 	(forall (?T1 ?A1 ?A2)
% 		(=> 
% 			(and 
% 				(holdsDuring ?T1 (legalRelation ?A1 ?A2))
% 				($instance ?A1 Organism)
% 				($instance ?A2 Organism)
% 			)
% 			(holdsDuring ?T1 (relative ?A1 ?A2))
% 		)
% 	)

fof( mergeA3252, axiom,
	p__d__instance(c__familyRelation,c__BinaryPredicate)
).


fof( mergeA3253, axiom,
	p__d__instance(c__familyRelation,c__EquivalenceRelation)
).


% 	($domain familyRelation 1 Organism)

% 	($domain familyRelation 2 Organism)


% ($documentation familyRelation EnglishLanguage "A very general &%Predicate for biological 
% relationships. (&%familyRelation ?ORGANISM1 ?ORGANISM2) means that 
% ?ORGANISM1 and ?ORGANISM2 are biologically derived from a common ancestor.") 


fof( mergeA3256, axiom,
	(![ORGANISM1,ORGANISM2]: 
		(
			(
				(
					(
						p__d__instance(ORGANISM2,c__Organism)
					)
				 &
					(
						p__d__instance(ORGANISM1,c__Organism)
					)
				 &
					(
						p__familyRelation(ORGANISM1,ORGANISM2)
					)
				)
			)
			=>
			(
				(?[ORGANISM3]: 
					(
						(
							(
								p__d__instance(ORGANISM3,c__Organism)
							)
						 &
							(
								p__ancestor(ORGANISM3,ORGANISM1)
							)
						 &
							(
								p__ancestor(ORGANISM3,ORGANISM2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3257, axiom,
	p__subrelation(c__ancestor,c__familyRelation)
).


fof( mergeA3258, axiom,
	p__d__instance(c__ancestor,c__TransitiveRelation)
).


fof( mergeA3259, axiom,
	p__d__instance(c__ancestor,c__IrreflexiveRelation)
).


% 	($domain ancestor 1 Organism)

% 	($domain ancestor 2 Organism)


% ($documentation ancestor EnglishLanguage "The transitive closure of the &%parent predicate.  
% (&%ancestor ?DESCENDANT ?ANCESTOR) means that ?ANCESTOR is either the 
% &%parent of ?DESCENDANT or the &%parent of the &%parent of &%DESCENDANT or 
% etc.")


fof( mergeA3262, axiom,
	p__subrelation(c__parent,c__ancestor)
).


fof( mergeA3263, axiom,
	p__d__instance(c__parent,c__BinaryPredicate)
).


fof( mergeA3264, axiom,
	p__subrelation(c__parent,c__familyRelation)
).


fof( mergeA3265, axiom,
	p__d__instance(c__parent,c__AsymmetricRelation)
).


fof( mergeA3266, axiom,
	p__d__instance(c__parent,c__IntransitiveRelation)
).


% 	($domain parent 1 Organism)

% 	($domain parent 2 Organism)


% ($documentation parent EnglishLanguage "The general relationship of parenthood.  
% (&%parent ?CHILD ?PARENT) means that ?PARENT is a biological parent 
% of ?CHILD.")


fof( mergeA3269, axiom,
	(![PARENT,CHILD]: 
		(
			(
				(
					(
						p__d__instance(PARENT,c__Organism)
					)
				 &
					(
						p__d__instance(CHILD,c__Organism)
					)
				 &
					(
						p__parent(CHILD,PARENT)
					)
				)
			)
			=>
			(
				p__before(f__BeginFn1(f__WhenFn1(PARENT)),f__BeginFn1(f__WhenFn1(CHILD)))
			)
		)
	)
).


fof( mergeA3270, axiom,
	(![PARENT,CHILD,CLASS]: 
		(
			(
				(
					(
						p__d__instance(PARENT,c__Organism)
					)
				 &
					(
						p__d__instance(CHILD,c__Organism)
					)
				 &
					(
						p__parent(CHILD,PARENT)
					)
				 &
					(
						p__d__subclass(CLASS,c__Organism)
					)
				 &
					(
						p__d__instance(PARENT,CLASS)
					)
				)
			)
			=>
			(
				p__d__instance(CHILD,CLASS)
			)
		)
	)
).


fof( mergeA3271, axiom,
	(![REP,CHILD,PARENT]: 
		(
			(
				(
					(
						p__d__instance(PARENT,c__Organism)
					)
				 &
					(
						p__d__instance(CHILD,c__Organism)
					)
				 &
					(
						p__parent(CHILD,PARENT)
					)
				 &
					(
						p__d__instance(REP,c__SexualReproduction)
					)
				 &
					(
						p__agent(REP,PARENT)
					)
				 &
					(
						p__result(REP,CHILD)
					)
				)
			)
			=>
			(
				(
					p__mother(CHILD,PARENT)
				 |
					p__father(CHILD,PARENT)
				)
			)
		)
	)
).


fof( mergeA3272, axiom,
	(![ORGANISM]: 
		(
			(
				p__d__instance(ORGANISM,c__Organism)
			)
			=>
			(
				(?[PARENT]: 
					(
						(
							(
								p__d__instance(PARENT,c__Organism)
							)
						 &
							(
								p__parent(ORGANISM,PARENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3273, axiom,
	p__d__instance(c__mother,c__SingleValuedRelation)
).


fof( mergeA3274, axiom,
	p__subrelation(c__mother,c__parent)
).


% 	($domain mother 1 Organism)

% 	($domain mother 2 Organism)


% ($documentation mother EnglishLanguage "The general relationship of motherhood.  
% (&%mother ?CHILD ?MOTHER) means that ?MOTHER is the biological mother 
% of ?CHILD.")


fof( mergeA3277, axiom,
	(![CHILD,MOTHER]: 
		(
			(
				(
					(
						p__d__instance(MOTHER,c__Organism)
					)
				 &
					(
						p__d__instance(CHILD,c__Organism)
					)
				 &
					(
						p__mother(CHILD,MOTHER)
					)
				)
			)
			=>
			(
				p__attribute(MOTHER,c__Female)
			)
		)
	)
).


fof( mergeA3278, axiom,
	p__d__instance(c__father,c__SingleValuedRelation)
).


fof( mergeA3279, axiom,
	p__subrelation(c__father,c__parent)
).


% 	($domain father 1 Organism)

% 	($domain father 2 Organism)


% ($documentation father EnglishLanguage "The general relationship of fatherhood.  
% (&%father ?CHILD ?FATHER) means that ?FATHER is the biological father
% of ?CHILD.")


fof( mergeA3282, axiom,
	(![CHILD,FATHER]: 
		(
			(
				(
					(
						p__d__instance(FATHER,c__Organism)
					)
				 &
					(
						p__d__instance(CHILD,c__Organism)
					)
				 &
					(
						p__father(CHILD,FATHER)
					)
				)
			)
			=>
			(
				p__attribute(FATHER,c__Male)
			)
		)
	)
).


fof( mergeA3283, axiom,
	p__subrelation(c__daughter,c__parent)
).


% 	($domain daughter 1 Organism)

% 	($domain daughter 2 Organism)


% ($documentation daughter EnglishLanguage "The general relationship of daughterhood.  
% (&%daughter ?CHILD ?PARENT) means that ?CHILD is the biological daughter
% of ?PARENT.")


fof( mergeA3286, axiom,
	(![PARENT,CHILD]: 
		(
			(
				(
					(
						p__d__instance(PARENT,c__Organism)
					)
				 &
					(
						p__d__instance(CHILD,c__Organism)
					)
				 &
					(
						p__daughter(CHILD,PARENT)
					)
				)
			)
			=>
			(
				p__attribute(CHILD,c__Female)
			)
		)
	)
).


fof( mergeA3287, axiom,
	p__subrelation(c__son,c__parent)
).


% 	($domain son 1 Organism)

% 	($domain son 2 Organism)


% ($documentation son EnglishLanguage "The general relationship of being a son.  
% (&%son ?CHILD ?PARENT) means that ?CHILD is the biological 
% son of ?PARENT.")


fof( mergeA3290, axiom,
	(![PARENT,CHILD]: 
		(
			(
				(
					(
						p__d__instance(PARENT,c__Organism)
					)
				 &
					(
						p__d__instance(CHILD,c__Organism)
					)
				 &
					(
						p__son(CHILD,PARENT)
					)
				)
			)
			=>
			(
				p__attribute(CHILD,c__Male)
			)
		)
	)
).


fof( mergeA3291, axiom,
	p__d__instance(c__sibling,c__BinaryPredicate)
).


fof( mergeA3292, axiom,
	p__subrelation(c__sibling,c__familyRelation)
).


fof( mergeA3293, axiom,
	p__d__instance(c__sibling,c__SymmetricRelation)
).


fof( mergeA3294, axiom,
	p__d__instance(c__sibling,c__IrreflexiveRelation)
).


% 	($domain sibling 1 Organism)

% 	($domain sibling 2 Organism)


% ($documentation sibling EnglishLanguage "The relationship between two &%Organisms that 
% have the same &%mother and &%father.  Note that this relationship does 
% not hold between half-brothers, half-sisters, etc.")


fof( mergeA3297, axiom,
	(![PARENT1,PARENT2,ORGANISM1,ORGANISM2]: 
		(
			(
				(
					(
						p__d__instance(PARENT1,c__Organism)
					)
				 &
					(
						p__d__instance(ORGANISM1,c__Organism)
					)
				 &
					(
						p__d__instance(ORGANISM2,c__Organism)
					)
				 &
					(
						p__d__instance(PARENT2,c__Organism)
					)
				 &
					(
						p__parent(ORGANISM1,PARENT1)
					)
				 &
					(
						p__parent(ORGANISM2,PARENT1)
					)
				 &
					(
						p__parent(ORGANISM1,PARENT2)
					)
				 &
					(
						p__parent(ORGANISM2,PARENT2)
					)
				 &
					(
						~ (
							( ORGANISM1 = ORGANISM2 )
						)
					)
				 &
					(
						~ (
							( PARENT1 = PARENT2 )
						)
					)
				)
			)
			=>
			(
				p__sibling(ORGANISM1,ORGANISM2)
			)
		)
	)
).


fof( mergeA3298, axiom,
	(![ORG1,ORG2,PARENT]: 
		(
			(
				(
					(
						p__d__instance(ORG2,c__Organism)
					)
				 &
					(
						p__d__instance(ORG1,c__Organism)
					)
				 &
					(
						p__d__instance(PARENT,c__Organism)
					)
				 &
					(
						p__sibling(ORG1,ORG2)
					)
				 &
					(
						p__parent(ORG1,PARENT)
					)
				)
			)
			=>
			(
				p__parent(ORG2,PARENT)
			)
		)
	)
).


fof( mergeA3299, axiom,
	(![CHILD,PARENT]: 
		(
			(
				(
					(
						p__d__instance(PARENT,c__Organism)
					)
				 &
					(
						p__d__instance(CHILD,c__Organism)
					)
				 &
					(
						p__parent(CHILD,PARENT)
					)
				 &
					(
						p__attribute(PARENT,c__Male)
					)
				)
			)
			=>
			(
				p__father(CHILD,PARENT)
			)
		)
	)
).


fof( mergeA3300, axiom,
	(![CHILD,PARENT]: 
		(
			(
				(
					(
						p__d__instance(PARENT,c__Organism)
					)
				 &
					(
						p__d__instance(CHILD,c__Organism)
					)
				 &
					(
						p__parent(CHILD,PARENT)
					)
				 &
					(
						p__attribute(PARENT,c__Female)
					)
				)
			)
			=>
			(
				p__mother(CHILD,PARENT)
			)
		)
	)
).


fof( mergeA3301, axiom,
	p__subrelation(c__brother,c__sibling)
).


fof( mergeA3302, axiom,
	p__d__instance(c__brother,c__IrreflexiveRelation)
).


fof( mergeA3303, axiom,
	p__d__instance(c__brother,c__TransitiveRelation)
).


% 	($domain brother 1 Man)

% 	($domain brother 2 Human)


% ($documentation brother EnglishLanguage "The general relationship of being a brother.  
% (&%brother ?MAN ?PERSON) means that ?MAN is the brother of ?PERSON.")


fof( mergeA3306, axiom,
	p__subrelation(c__sister,c__sibling)
).


fof( mergeA3307, axiom,
	p__d__instance(c__sister,c__IrreflexiveRelation)
).


fof( mergeA3308, axiom,
	p__d__instance(c__sister,c__TransitiveRelation)
).


% 	($domain sister 1 Woman)

% 	($domain sister 2 Human)


% ($documentation sister EnglishLanguage "The general relationship of being a sister.  
% (&%sister ?WOMAN ?PERSON) means that ?WOMAN is the sister of ?PERSON.")


fof( mergeA3311, axiom,
	p__d__instance(c__legalRelation,c__BinaryPredicate)
).


fof( mergeA3312, axiom,
	p__d__instance(c__legalRelation,c__SymmetricRelation)
).


% 	($domain legalRelation 1 Human)

% 	($domain legalRelation 2 Human)


% ($documentation legalRelation EnglishLanguage "(&%legalRelation ?AGENT1 ?AGENT2) means 
% that ?AGENT1 and ?AGENT2 are relatives by virtue of a legal relationship.  
% Some examples include marriage, adoption, etc.")


fof( mergeA3315, axiom,
	(![AGENT1,AGENT2]: 
		(
			(
				(
					(
						p__d__instance(AGENT2,c__Human)
					)
				 &
					(
						p__d__instance(AGENT1,c__Human)
					)
				 &
					(
						p__legalRelation(AGENT1,AGENT2)
					)
				)
			)
			=>
			(
				(?[DECLARE,OBLIGATION]: 
					(
						(
							(
								p__d__instance(OBLIGATION,c__Formula)
							)
						 &
							(
								p__d__instance(DECLARE,c__Declaring)
							)
						 &
							(
								p__confersObligation(OBLIGATION,DECLARE,AGENT1)
							)
						 &
							(
								p__confersObligation(OBLIGATION,DECLARE,AGENT2)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3316, axiom,
	p__d__instance(c__acquaintance,c__BinaryPredicate)
).



% ($documentation acquaintance EnglishLanguage "(&%acquaintance ?H1 ?H2) means that ?H1 has
% met and knows something about ?H2, such as ?H2's name and appearance.
% Statements made with this predicate should be temporally specified with
% &%holdsDuring.  Note that &%acquaintance is not symmetric.  For the
% symmetric version, see &%mutualAcquaintance.")


% 	($domain acquaintance 1 Human)

% 	($domain acquaintance 2 Human)

fof( mergeA3319, axiom,
	p__d__instance(c__mutualAcquaintance,c__BinaryPredicate)
).


fof( mergeA3320, axiom,
	p__d__instance(c__mutualAcquaintance,c__SymmetricRelation)
).



% ($documentation mutualAcquaintance EnglishLanguage "(&%mutualAcquaintance ?H1 ?H2) means
% that ?H1 and ?H2 have met each other and know something about each other,
% such as name and appearance.  Statements made with this predicate should
% be temporally specified with &%holdsDuring.  See also the weaker,
% non-symmetric version of this predicate, &%acquaintance.")


% 	($domain mutualAcquaintance 1 Human)

% 	($domain mutualAcquaintance 2 Human)

fof( mergeA3323, axiom,
	p__subrelation(c__mutualAcquaintance,c__acquaintance)
).


fof( mergeA3324, axiom,
	p__subrelation(c__spouse,c__mutualAcquaintance)
).


fof( mergeA3325, axiom,
	p__subrelation(c__spouse,c__legalRelation)
).


fof( mergeA3326, axiom,
	p__d__instance(c__spouse,c__IrreflexiveRelation)
).


fof( mergeA3327, axiom,
	p__d__instance(c__spouse,c__SymmetricRelation)
).


% 	($domain spouse 1 Human)

% 	($domain spouse 2 Human)


% ($documentation spouse EnglishLanguage "The relationship of marriage between two &%Humans.")


fof( mergeA3330, axiom,
	p__subrelation(c__husband,c__spouse)
).


fof( mergeA3331, axiom,
	p__d__instance(c__husband,c__AsymmetricRelation)
).


fof( mergeA3332, axiom,
	p__d__instance(c__husband,c__IrreflexiveRelation)
).


% 	($domain husband 1 Man)

% 	($domain husband 2 Woman)

fof( mergeA3335, axiom,
	p__inverse(c__husband,c__wife)
).



% ($documentation husband EnglishLanguage "(&%husband ?MAN ?WOMAN) means that ?MAN is the 
% husband of ?WOMAN.")


fof( mergeA3336, axiom,
	p__subrelation(c__wife,c__spouse)
).


fof( mergeA3337, axiom,
	p__d__instance(c__wife,c__AsymmetricRelation)
).


fof( mergeA3338, axiom,
	p__d__instance(c__wife,c__IrreflexiveRelation)
).


% 	($domain wife 1 Woman)

% 	($domain wife 2 Man)


% ($documentation wife EnglishLanguage "(&%wife ?WOMAN ?MAN) means that ?WOMAN is the wife of 
% ?MAN.")


fof( mergeA3341, axiom,
	p__d__subclass(c__EthnicGroup,c__GroupOfPeople)
).



% ($documentation EthnicGroup EnglishLanguage "A &%GroupOfPeople whose &%members originate 
% from the same &%GeographicArea or share the same &%Language and/or cultural 
% practices.") 


fof( mergeA3342, axiom,
	p__d__subclass(c__BeliefGroup,c__GroupOfPeople)
).



% ($documentation BeliefGroup EnglishLanguage "A &%GroupOfPeople whose &%members share a belief 
% or set of beliefs.")


fof( mergeA3343, axiom,
	(![GROUP]: 
		(
			(
				p__d__instance(GROUP,c__BeliefGroup)
			)
			=>
			(
				(?[BELIEF]: 
					(
						(
							(
								p__d__instance(BELIEF,c__Formula)
							)
						 &
							(
								(![MEMB]: 
									(
										(
											(
												(
													p__d__instance(MEMB,c__SelfConnectedObject)
												)
											 &
												(
													p__d__instance(MEMB,c__CognitiveAgent)
												)
											 &
												(
													p__member(MEMB,GROUP)
												)
											)
										)
										=>
										(
											p__believes(MEMB,BELIEF)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3344, axiom,
	p__d__subclass(c__Organization,c__Group)
).


% ($comment 
% ;; NS: delete.
% ;; ($subclass Organization CognitiveAgent)
% ;;
% ;; NS: add.
% )

fof( mergeA3345, axiom,
	p__d__subclass(c__Organization,c__Agent)
).



% ($documentation Organization EnglishLanguage "An &%Organization is a
% corporate or similar institution. The &%members of an &%Organization
% typically have a common purpose or function. Note that this class also
% covers divisions, departments, etc. of organizations.  For example,
% both the Shell Corporation and the accounting department at Shell
% would both be instances of &%Organization.  Note too that the
% existence of an &%Organization is dependent on the existence of at
% least one &%member (since &%Organization is a subclass of
% &%Collection).  Accordingly, in cases of purely legal organizations, a
% fictitious &%member should be assumed.")


fof( mergeA3346, axiom,
	(![ORG]: 
		(
			(
				p__d__instance(ORG,c__Organization)
			)
			=>
			(
				(?[PURP]: 
					(
						(
							(
								p__d__instance(PURP,c__Formula)
							)
						 &
							(
								(![MEMBER]: 
									(
										(
											(
												(
													p__d__instance(MEMBER,c__SelfConnectedObject)
												)
											 &
												(
													p__member(MEMBER,ORG)
												)
											)
										)
										=>
										(
											p__hasPurpose(MEMBER,PURP)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3347, axiom,
	(![ORG,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__member(AGENT,ORG)
					)
				)
			)
			=>
			(
				p__d__instance(AGENT,c__Agent)
			)
		)
	)
).


fof( mergeA3348, axiom,
	p__d__instance(c__employs,c__BinaryPredicate)
).


% 	($domain employs 1 Organization)

% 	($domain employs 2 CognitiveAgent)


% ($documentation employs EnglishLanguage "(&%employs ?ORG ?PERSON) means that ?ORG has 
% hired ?PERSON and currently retains ?PERSON, on a salaried, hourly 
% or contractual basis, to provide services in exchange for monetary 
% compensation.")


fof( mergeA3351, axiom,
	p__d__subclass(c__PoliticalOrganization,c__Organization)
).



% ($documentation PoliticalOrganization EnglishLanguage "An
% &%Organization that is attempting to bring about some sort of
% political change.")


fof( mergeA3352, axiom,
	(![POL]: 
		(
			(
				p__d__instance(POL,c__PoliticalOrganization)
			)
			=>
			(
				(?[PROC]: 
					(
						(
							(
								p__d__instance(PROC,c__PoliticalProcess)
							)
						 &
							(
								p__agent(PROC,POL)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3353, axiom,
	p__d__subclass(c__MilitaryForce,c__PoliticalOrganization)
).



% ($documentation MilitaryForce EnglishLanguage "&%MilitaryForce is the subclass of 
% &%Organizations that are organized along military lines and for the 
% purpose of either defensive or offensive combat, whether or not 
% the force is an official &%GovernmentOrganization.")


fof( mergeA3354, axiom,
	(![ORG]: 
		(
			(
				p__d__instance(ORG,c__MilitaryForce)
			)
			=>
			(
				p__capability(c__ViolentContest,c__agent,ORG)
			)
		)
	)
).


fof( mergeA3355, axiom,
	p__d__subclass(c__MilitaryOrganization,c__MilitaryForce)
).


fof( mergeA3356, axiom,
	p__d__subclass(c__MilitaryOrganization,c__GovernmentOrganization)
).



% ($documentation MilitaryOrganization EnglishLanguage "Any heavily armed &%Organization 
% that is part of a &%Government and that is charged with representing the 
% &%Government in international conflicts.") 


fof( mergeA3357, axiom,
	p__d__subclass(c__ParamilitaryOrganization,c__MilitaryForce)
).


fof( mergeA3358, axiom,
	p__d__disjoint(c__ParamilitaryOrganization,c__GovernmentOrganization)
).



% ($documentation ParamilitaryOrganization EnglishLanguage "An &%Organization which is much like 
% a &%MilitaryOrganization, e.g. it is made up of armed fighters, except that it 
% is not associated with a &%Government.")


fof( mergeA3359, axiom,
	p__d__subclass(c__GovernmentOrganization,c__Organization)
).



% ($documentation GovernmentOrganization EnglishLanguage "&%GovernmentOrganization is the 
% class of official &%Organizations that are concerned with the government 
% of a &%GeopoliticalArea at some level.  They may be a &%subOrganization 
% of a government.") 


fof( mergeA3360, axiom,
	(![ORG]: 
		(
			(
				p__d__instance(ORG,c__Organization)
			)
			=>
			(
				(
					p__d__instance(ORG,c__GovernmentOrganization)
				)
				<=>
				(
					(?[GOV]: 
						(
							(
								(
									p__d__instance(GOV,c__Government)
								)
							 &
								(
									p__subOrganization(ORG,GOV)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3361, axiom,
	(![GOV,ORG]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__subOrganization(ORG,GOV)
					)
				 &
					(
						p__d__instance(GOV,c__GovernmentOrganization)
					)
				)
			)
			=>
			(
				p__d__instance(ORG,c__GovernmentOrganization)
			)
		)
	)
).


fof( mergeA3362, axiom,
	p__d__subclass(c__Government,c__GovernmentOrganization)
).


% ($comment 
% ;; NS: add.
% )

fof( mergeA3363, axiom,
	p__d__subclass(c__Government,c__LegalAgent)
).



% ($documentation Government EnglishLanguage "The ruling body of a &%GeopoliticalArea.") 


fof( mergeA3364, axiom,
	p__d__instance(c__GovernmentFn,c__UnaryFunction)
).


% 	($domain GovernmentFn 1 GeopoliticalArea)

% 	($range GovernmentFn Government)


% ($documentation GovernmentFn EnglishLanguage "(&%GovernmentFn ?AREA) denotes the 
% &%Government of the &%GeopoliticalArea ?AREA.  For example, 
% (&%GovernmentFn &%UnitedStates) denotes the Federal-level government of 
% the United States, (&%GovernmentFn &%PuertoRico) denotes the government of 
% the Commonwealth of Puerto Rico.") 


fof( mergeA3367, axiom,
	p__d__subclass(c__PoliceOrganization,c__GovernmentOrganization)
).



% ($documentation PoliceOrganization EnglishLanguage "Any &%GovernmentOrganization  
% that is charged with domestic enforcement of the laws of the &%Government.")


fof( mergeA3368, axiom,
	p__d__subclass(c__JudicialOrganization,c__Organization)
).



% ($documentation JudicialOrganization EnglishLanguage "&%JudicialOrganization is the class 
% of &%Organizations whose primary purpose is to render judgments according 
% to the statutes or regulations of a government or other organization.  
% Judicial bodies are not necessarily government organizations, for example, 
% those associated with sporting associations.") 


fof( mergeA3369, axiom,
	p__d__subclass(c__EducationalOrganization,c__Organization)
).



% ($documentation EducationalOrganization EnglishLanguage "A &%EducationalOrganization is 
% an institution of learning. Some examples are public and private K-12 
% schools, and colleges and universities.") 


fof( mergeA3370, axiom,
	p__d__subclass(c__ReligiousOrganization,c__Organization)
).


fof( mergeA3371, axiom,
	p__d__subclass(c__ReligiousOrganization,c__BeliefGroup)
).



% ($documentation ReligiousOrganization EnglishLanguage "An &%Organization whose members 
% share a set of religious beliefs.") 


fof( mergeA3372, axiom,
	p__subrelation(c__subOrganization,c__subCollection)
).


fof( mergeA3373, axiom,
	p__d__instance(c__subOrganization,c__PartialOrderingRelation)
).


% 	($domain subOrganization 1 Organization)

% 	($domain subOrganization 2 Organization)


% ($documentation subOrganization EnglishLanguage "(&%subOrganization ?ORG1 ?ORG2) means 
% that ?ORG1 is an &%Organization which is a part of the &%Organization 
% ?ORG2.  Note that &%subOrganization is a &%ReflexiveRelation, so every 
% &%Organization is a &%subOrganization of itself.") 


fof( mergeA3376, axiom,
	p__d__instance(c__citizen,c__BinaryPredicate)
).


fof( mergeA3377, axiom,
	p__d__instance(c__citizen,c__AsymmetricRelation)
).


% 	($domain citizen 1 Human)

% 	($domain citizen 2 Nation)


% ($documentation citizen EnglishLanguage "(&%citizen ?PERSON ?NATION) means that the 
% &%Human ?PERSON is a citizen of &%Nation ?NATION.") 


% ($comment 
% ;; END FILE
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;
% ;;   QUALITIES   ;;
% ;;;;;;;;;;;;;;;;;;;
% ;;
% ;; INCLUDES 'MEREOTOPOLOGY'
% ;; INCLUDES 'PROCESSES'
% ;; INCLUDES 'OBJECTS'
% )

fof( mergeA3380, axiom,
	p__d__subclass(c__FieldOfStudy,c__Proposition)
).



% ($documentation FieldOfStudy EnglishLanguage "An academic or applied discipline with 
% recognized experts and with a core of accepted theory or practice.  Note 
% that &%FieldOfStudy is a &%subclass of &%Proposition, because a 
% &%FieldOfStudy is understood to be a body of abstract, informational 
% content, with varying degrees of certainty attached to each element of 
% this content.")  


fof( mergeA3381, axiom,
	p__d__subclass(c__Procedure,c__Proposition)
).



% ($documentation Procedure EnglishLanguage "A sequence-dependent specification.  Some 
% examples are &%ComputerPrograms, finite-state machines, cooking recipes, 
% musical scores, conference schedules, driving directions, and the scripts 
% of plays and movies.")


fof( mergeA3382, axiom,
	p__d__subclass(c__ComputerProgram,c__Procedure)
).



% ($documentation ComputerProgram EnglishLanguage "A set of instructions in a computer 
% programming language that can be executed by a computer.")


fof( mergeA3383, axiom,
	p__d__subclass(c__ComputerProgramming,c__ContentDevelopment)
).



% ($documentation ComputerProgramming EnglishLanguage "The process of developing a 
% &%ComputerProgram")


fof( mergeA3384, axiom,
	(![CP]: 
		(
			(
				p__d__instance(CP,c__ComputerProgramming)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__ComputerProgram)
							)
						 &
							(
								p__result(CP,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3385, axiom,
	p__d__subclass(c__Plan,c__Procedure)
).



% ($documentation Plan EnglishLanguage "A specification of a sequence of &%Processes which 
% is intended to satisfy a specified purpose at some future time.")


fof( mergeA3386, axiom,
	(![PLAN,OBJ]: 
		(
			(
				(
					(
						p__d__instance(PLAN,c__Plan)
					)
				 &
					(
						p__d__instance(OBJ,c__ContentBearingObject)
					)
				 &
					(
						p__containsInformation(OBJ,PLAN)
					)
				)
			)
			=>
			(
				(?[PLANNING]: 
					(
						(
							(
								p__d__instance(PLANNING,c__Planning)
							)
						 &
							(
								p__result(PLANNING,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3387, axiom,
	p__d__subclass(c__Argument,c__Proposition)
).


fof( mergeA3388, axiom,
	p__d__partition3(c__Argument,c__DeductiveArgument,c__InductiveArgument)
).



% ($documentation Argument EnglishLanguage "Any proposition which has the form of a deductive 
% or inductive argument, i.e. a set of premises which, it is claimed, imply 
% a conclusion.") 


fof( mergeA3389, axiom,
	(![REASON]: 
		(
			(
				p__d__instance(REASON,c__Reasoning)
			)
			=>
			(
				(?[ARGUMENT]: 
					(
						(
							(
								p__d__instance(ARGUMENT,c__Argument)
							)
						 &
							(
								p__realization(REASON,ARGUMENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3390, axiom,
	(![ARGUMENT]: 
		(
			(
				p__d__instance(ARGUMENT,c__Argument)
			)
			=>
			(
				(?[PREMISES,CONCLUSION]: 
					(
						(
							(
								p__d__instance(PREMISES,c__Proposition)
							)
						 &
							(
								p__d__instance(CONCLUSION,c__Argument)
							)
						 &
							(
								( f__PremisesFn1(ARGUMENT) = PREMISES )
							)
						 &
							(
								p__conclusion(CONCLUSION,ARGUMENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3391, axiom,
	p__d__subclass(c__DeductiveArgument,c__Argument)
).


fof( mergeA3392, axiom,
	p__d__partition3(c__DeductiveArgument,c__ValidDeductiveArgument,c__InvalidDeductiveArgument)
).



% ($documentation DeductiveArgument EnglishLanguage "An &%Argument which has the form of a 
% deduction, i.e. it is claimed that the set of &%premises &%entails the 
% &%conclusion.")


fof( mergeA3393, axiom,
	p__d__subclass(c__ValidDeductiveArgument,c__DeductiveArgument)
).



% ($documentation ValidDeductiveArgument EnglishLanguage "A &%DeductiveArgument which is 
% valid, i.e. the set of &%premises in fact &%entails the &%conclusion.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: both arguments of entails are Formula, whereas the second argument of containsInformation is Proposition (Formula and Proposition are incompatible)
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?ARGUMENT ValidDeductiveArgument)
% ;;      (equal ?PREMISES (PremisesFn ?ARGUMENT))
% ;;      (conclusion ?CONCLUSION ?ARGUMENT))
% ;;   (exists (?FORMULA1 ?FORMULA2)
% ;;      (and
% ;;         (containsInformation ?FORMULA1 ?PREMISES)
% ;;         (containsInformation ?FORMULA2 ?CONCLUSION)
% ;;         (entails ?PREMISES ?CONCLUSION))))
% )

fof( mergeA3394, axiom,
	p__d__subclass(c__InvalidDeductiveArgument,c__DeductiveArgument)
).



% ($documentation InvalidDeductiveArgument EnglishLanguage "&%DeductiveArguments that are not 
% &%ValidDeductiveArguments, i.e. it is not the case that the set of &%premises 
% in fact &%entails the &%conclusion.")


fof( mergeA3395, axiom,
	p__d__subclass(c__Explanation,c__DeductiveArgument)
).



% ($documentation Explanation EnglishLanguage "An &%Argument where the conclusion is an 
% observed fact and the premises are other facts which collectively imply 
% the conclusion.  Note that this is the they hypothetico-deductive model 
% of explanation.")


fof( mergeA3396, axiom,
	p__d__subclass(c__InductiveArgument,c__Argument)
).



% ($documentation InductiveArgument EnglishLanguage "An &%Argument which is inductive, i.e. it is 
% claimed that a set of specific cases makes the &%conclusion, which generalizes 
% these cases, more likely to be true.")


fof( mergeA3397, axiom,
	p__d__instance(c__premise,c__BinaryPredicate)
).


fof( mergeA3398, axiom,
	p__d__instance(c__premise,c__TotalValuedRelation)
).


% 	($domain premise 1 Argument)

% 	($domain premise 2 Proposition)


% ($documentation premise EnglishLanguage "(&%premise ?ARGUMENT ?PROPOSITION) means that the 
% &%Proposition ?PROPOSITION is an explicit assumption of the &%Argument 
% ?ARGUMENT.")


fof( mergeA3401, axiom,
	p__d__instance(c__PremisesFn,c__UnaryFunction)
).


% 	($domain PremisesFn 1 Argument)

% 	($range PremisesFn Proposition)


% ($documentation PremisesFn EnglishLanguage "(&%PremisesFn ?ARGUMENT) returns the complete 
% set of &%premises of the &%Argument ?ARGUMENT.")


fof( mergeA3404, axiom,
	(![PREMISES,ARGUMENT,PROPOSITION]: 
		(
			(
				(
					(
						p__d__instance(PREMISES,c__Proposition)
					)
				 &
					(
						p__d__instance(PROPOSITION,c__Proposition)
					)
				 &
					(
						p__d__instance(ARGUMENT,c__Argument)
					)
				 &
					(
						( PREMISES = f__PremisesFn1(ARGUMENT) )
					)
				)
			)
			=>
			(
				(
					p__subProposition(PROPOSITION,PREMISES)
				)
				<=>
				(
					p__premise(ARGUMENT,PROPOSITION)
				)
			)
		)
	)
).


fof( mergeA3405, axiom,
	p__d__instance(c__conclusion,c__BinaryPredicate)
).


fof( mergeA3406, axiom,
	p__d__instance(c__conclusion,c__SingleValuedRelation)
).


fof( mergeA3407, axiom,
	p__d__instance(c__conclusion,c__TotalValuedRelation)
).


% 	($domain conclusion 1 Argument)

% 	($domain conclusion 2 Proposition)


% ($documentation conclusion EnglishLanguage "(&%conclusion ?ARGUMENT ?PROPOSITION) means that
% the &%Proposition ?PROPOSITION is the conclusion explicitly drawn from the 
% &%Argument ?ARGUMENT.  Note that it may or may not be the case that ?ARGUMENT 
% &%entails ?PROPOSITION.")


fof( mergeA3410, axiom,
	p__d__instance(c__consistent,c__BinaryPredicate)
).


fof( mergeA3411, axiom,
	p__d__instance(c__consistent,c__SymmetricRelation)
).


% 	($domain consistent 1 Proposition)

% 	($domain consistent 2 Proposition)


% ($documentation consistent EnglishLanguage "(&%consistent ?PROP1 ?PROP2) means that the two 
% &%Propositions ?PROP1 and ?PROP2 are consistent with one another, i.e. it 
% is possible for both of them to be true at the same time.")


fof( mergeA3414, axiom,
	p__d__instance(c__orientation,c__SpatialRelation)
).


fof( mergeA3415, axiom,
	p__d__instance(c__orientation,c__TernaryPredicate)
).


% 	($domain orientation 1 Object)

% 	($domain orientation 2 Object)

% 	($domain orientation 3 PositionalAttribute)


% ($documentation orientation EnglishLanguage "A general &%Predicate for indicating how two 
% &%Objects are oriented with respect to one another.  For example, 
% (orientation ?OBJ1 ?OBJ2 North) means that ?OBJ1 is north of ?OBJ2, and 
% (orientation ?OBJ1 ?OBJ2 Vertical) means that ?OBJ1 is positioned 
% vertically with respect to ?OBJ2.")


% 	(forall (@ROW ?ATTR1 ?OBJ1 ?OBJ2 ?ATTR2)
% 		(=> 
% 			(and 
% 				(orientation ?OBJ1 ?OBJ2 ?ATTR1)
% 				(contraryAttribute @ROW)
% 				(inList ?ATTR1 (ListFn @ROW))
% 				(inList ?ATTR2 (ListFn @ROW))
% 				(not 
% 					(equal ?ATTR1 ?ATTR2)
% 				)
% 			)
% 			(not 
% 				(orientation ?OBJ1 ?OBJ2 ?ATTR2)
% 			)
% 		)
% 	)

fof( mergeA3420, axiom,
	p__d__instance(c__direction,c__CaseRole)
).


% 	($domain direction 1 Process)

% 	($domain direction 2 PositionalAttribute)

fof( mergeA3423, axiom,
	p__subrelation(c__direction,c__involvedInEvent)
).



% ($documentation direction EnglishLanguage "(&%direction ?PROC ?ATTR) means that the 
% &%Process ?PROC is moving in the direction ?ATTR.  For example, one 
% would use this &%Predicate to represent the fact that Max is moving 
% &%North.")


% 	(forall (?TIME ?PROC ?ATTR1)
% 		(=> 
% 			(holdsDuring ?TIME (direction ?PROC ?ATTR1))
% 			(forall (?ATTR2)
% 				(=> 
% 					(holdsDuring ?TIME (direction ?PROC ?ATTR2))
% 					(equal ?ATTR2 ?ATTR1)
% 				)
% 			)
% 		)
% 	)

fof( mergeA3425, axiom,
	p__d__instance(c__faces,c__BinaryPredicate)
).


% 	($domain faces 1 Object)

% 	($domain faces 2 DirectionalAttribute)


% ($documentation faces EnglishLanguage "(&%faces ?OBJ ?DIRECTION) means that the front of 
% ?OBJ (see &%FrontFn) is positioned towards the compass direction ?DIRECTION.  
% More precisely, it means that if a line were extended from the center of 
% ?DIRECTION, the line would intersect with the front of ?OBJ before it 
% intersected with its back (see &%BackFn).")


% 	(forall (?TIME ?PROC ?ATTR1)
% 		(=> 
% 			(holdsDuring ?TIME (faces ?PROC ?ATTR1))
% 			(forall (?ATTR2)
% 				(=> 
% 					(holdsDuring ?TIME (faces ?PROC ?ATTR2))
% 					(equal ?ATTR2 ?ATTR1)
% 				)
% 			)
% 		)
% 	)

fof( mergeA3429, axiom,
	p__d__subclass(c__TruthValue,c__RelationalAttribute)
).



% ($documentation TruthValue EnglishLanguage "The &%Class of truth values, e.g. &%True and 
% &%False.  These are &%Attributes of &%Sentences and &%Propositions.")


fof( mergeA3430, axiom,
	(![VALUE,ITEM]: 
		(
			(
				(
					(
						p__property(ITEM,VALUE)
					)
				 &
					(
						p__d__instance(VALUE,c__TruthValue)
					)
				)
			)
			=>
			(
				(
					p__d__instance(ITEM,c__Sentence)
				 |
					p__d__instance(ITEM,c__Proposition)
				)
			)
		)
	)
).


fof( mergeA3431, axiom,
	p__d__instance(c__True,c__TruthValue)
).



% ($documentation True EnglishLanguage "The &%TruthValue of being true.")


fof( mergeA3432, axiom,
	p__d__instance(c__False,c__TruthValue)
).


fof( mergeA3433, axiom,
	p__contraryAttribute2(c__False,c__True)
).



% ($documentation False EnglishLanguage "The &%TruthValue of being false.")


fof( mergeA3434, axiom,
	p__subrelation(c__truth,c__property)
).


% 	($domain truth 1 Sentence)

% 	($domain truth 2 TruthValue)


% ($documentation truth EnglishLanguage "The &%BinaryPredicate that relates a &%Sentence 
% to its &%TruthValue.")


fof( mergeA3437, axiom,
	p__d__subclass(c__PositionalAttribute,c__RelationalAttribute)
).



% ($documentation PositionalAttribute EnglishLanguage "&%Attributes characterizing the 
% orientation of an &%Object, e.g. &%Vertical versus &%Horizontal, &%Left 
% versus &%Right etc.")


fof( mergeA3438, axiom,
	p__d__subclass(c__DirectionalAttribute,c__PositionalAttribute)
).



% ($documentation DirectionalAttribute EnglishLanguage "The subclass of &%PositionalAttributes 
% that concern compass directions.") 


fof( mergeA3439, axiom,
	(![DIRECT,OBJ1,OBJ2,OBJ3]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ3,c__Object)
					)
				 &
					(
						p__d__instance(DIRECT,c__DirectionalAttribute)
					)
				 &
					(
						p__orientation(OBJ1,OBJ2,DIRECT)
					)
				 &
					(
						p__orientation(OBJ2,OBJ3,DIRECT)
					)
				)
			)
			=>
			(
				p__between(OBJ1,OBJ2,OBJ3)
			)
		)
	)
).


fof( mergeA3440, axiom,
	p__d__instance(c__North,c__DirectionalAttribute)
).


fof( mergeA3441, axiom,
	p__contraryAttribute4(c__North,c__South,c__East,c__West)
).



% ($documentation North EnglishLanguage "The compass direction of &%North.")


fof( mergeA3442, axiom,
	p__d__instance(c__South,c__DirectionalAttribute)
).



% ($documentation South EnglishLanguage "The compass direction of &%South.")


fof( mergeA3443, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__orientation(OBJ1,OBJ2,c__North)
				)
				<=>
				(
					p__orientation(OBJ2,OBJ1,c__South)
				)
			)
		)
	)
).


fof( mergeA3444, axiom,
	p__d__instance(c__East,c__DirectionalAttribute)
).



% ($documentation East EnglishLanguage "The compass direction of &%East.")


fof( mergeA3445, axiom,
	p__d__instance(c__West,c__DirectionalAttribute)
).



% ($documentation West EnglishLanguage "The compass direction of &%West.")


fof( mergeA3446, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__orientation(OBJ1,OBJ2,c__East)
				)
				<=>
				(
					p__orientation(OBJ2,OBJ1,c__West)
				)
			)
		)
	)
).


fof( mergeA3447, axiom,
	p__d__instance(c__Vertical,c__PositionalAttribute)
).



% ($documentation Vertical EnglishLanguage "Attribute used to indicate that an &%Object 
% is positioned height-wise with respect to another &%Object.")


fof( mergeA3448, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__orientation(OBJ1,OBJ2,c__Vertical)
				)
				<=>
				(
					p__orientation(OBJ2,OBJ1,c__Vertical)
				)
			)
		)
	)
).


fof( mergeA3449, axiom,
	p__d__instance(c__Horizontal,c__PositionalAttribute)
).


fof( mergeA3450, axiom,
	p__contraryAttribute2(c__Horizontal,c__Vertical)
).



% ($documentation Horizontal EnglishLanguage "Attribute used to indicate that an &%Object 
% is positioned width-wise with respect to another &%Object.")


fof( mergeA3451, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__orientation(OBJ1,OBJ2,c__Horizontal)
				)
				<=>
				(
					p__orientation(OBJ2,OBJ1,c__Horizontal)
				)
			)
		)
	)
).


fof( mergeA3452, axiom,
	p__d__subclass(c__SymmetricPositionalAttribute,c__PositionalAttribute)
).



% ($documentation SymmetricPositionalAttribute EnglishLanguage "&%SymmetricAttribute is the class of 
% &%PositionalAttribute that hold between two items regardless of their 
% order or orientation.")


fof( mergeA3453, axiom,
	(![O2,O1,P]: 
		(
			(
				(
					(
						p__d__instance(O2,c__Object)
					)
				 &
					(
						p__d__instance(O1,c__Object)
					)
				 &
					(
						p__d__instance(P,c__SymmetricPositionalAttribute)
					)
				 &
					(
						p__orientation(O1,O2,P)
					)
				)
			)
			=>
			(
				p__orientation(O2,O1,P)
			)
		)
	)
).


fof( mergeA3454, axiom,
	p__d__subclass(c__AntiSymmetricPositionalAttribute,c__PositionalAttribute)
).



% ($documentation AntiSymmetricPositionalAttribute EnglishLanguage "&%AntiSymmetricPositionalAttribute is the class of 
% &%PositionalAttribute that hold in only one direction.  I.e. two objects cannot
% simulataneously be &%On each other.")


fof( mergeA3455, axiom,
	(![O2,O1,P]: 
		(
			(
				(
					(
						p__d__instance(O2,c__Object)
					)
				 &
					(
						p__d__instance(O1,c__Object)
					)
				 &
					(
						p__d__instance(P,c__AntiSymmetricPositionalAttribute)
					)
				 &
					(
						p__orientation(O1,O2,P)
					)
				)
			)
			=>
			(
				~ (
					p__orientation(O2,O1,P)
				)
			)
		)
	)
).


fof( mergeA3456, axiom,
	p__d__instance(c__Above,c__PositionalAttribute)
).


fof( mergeA3457, axiom,
	p__d__instance(c__Above,c__AntiSymmetricPositionalAttribute)
).


fof( mergeA3458, axiom,
	p__contraryAttribute2(c__Above,c__Below)
).



% ($documentation Above EnglishLanguage "This is a &%PositionalAttribute derived from the 
% up/down schema and not involving contact.  Note that this means directly 
% above, i.e., if one object is &%Above another object, then the projections 
% of the two objects overlap.")


fof( mergeA3459, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__orientation(OBJ1,OBJ2,c__Above)
					)
				)
			)
			=>
			(
				~ (
					p__connected(OBJ1,OBJ2)
				)
			)
		)
	)
).


fof( mergeA3460, axiom,
	p__d__instance(c__Below,c__PositionalAttribute)
).


fof( mergeA3461, axiom,
	p__d__instance(c__Below,c__AntiSymmetricPositionalAttribute)
).



% ($documentation Below EnglishLanguage "This &%PositionalAttribute is derived from the 
% up/down schema and may or may not involve contact.  Note that this means 
% directly below, i.e., if one object is &%Below another object, then the 
% projections of the two objects overlap.")


fof( mergeA3462, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__orientation(OBJ1,OBJ2,c__Below)
				)
				<=>
				(
					(
						p__orientation(OBJ2,OBJ1,c__On)
					 |
						p__orientation(OBJ2,OBJ1,c__Above)
					)
				)
			)
		)
	)
).


fof( mergeA3463, axiom,
	p__d__instance(c__Adjacent,c__SymmetricPositionalAttribute)
).



% ($documentation Adjacent EnglishLanguage "Used to assert that an object ?OBJ1 is close 
% to, near or abutting ?OBJ2.  This &%PositionalAttribute covers the 
% following common sense notions:  adjoins, abuts, is contiguous to, 
% is juxtaposed, and is close to.") 


fof( mergeA3464, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__orientation(OBJ1,OBJ2,c__Adjacent)
				)
				<=>
				(
					(
						p__orientation(OBJ1,OBJ2,c__Near)
					 |
						p__connected(OBJ1,OBJ2)
					)
				)
			)
		)
	)
).


fof( mergeA3465, axiom,
	p__d__instance(c__Left,c__PositionalAttribute)
).


fof( mergeA3466, axiom,
	p__d__instance(c__Left,c__AntiSymmetricPositionalAttribute)
).



% ($documentation Left EnglishLanguage "This &%PositionalAttribute is derived from the 
% left/right schema.  Note that this means directly to the left, so that, 
% if one object is to the left of another, then the projections of the 
% two objects overlap.")


fof( mergeA3467, axiom,
	p__d__instance(c__Right,c__PositionalAttribute)
).


fof( mergeA3468, axiom,
	p__d__instance(c__Right,c__AntiSymmetricPositionalAttribute)
).


fof( mergeA3469, axiom,
	p__contraryAttribute2(c__Right,c__Left)
).



% ($documentation Right EnglishLanguage "This &%PositionalAttribute is derived from the 
% left/right schema.  Note that this means directly to the right, so that, 
% if one object is to the right of another, then the projections of the 
% two objects overlap.")


fof( mergeA3470, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__orientation(OBJ1,OBJ2,c__Right)
				)
				<=>
				(
					p__orientation(OBJ2,OBJ1,c__Left)
				)
			)
		)
	)
).


fof( mergeA3471, axiom,
	p__d__instance(c__Near,c__SymmetricPositionalAttribute)
).



% ($documentation Near EnglishLanguage "The relation of common sense adjacency.  Note that, if 
% an object is &%Near another object, then the objects are not &%connected.")


fof( mergeA3472, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__orientation(OBJ1,OBJ2,c__Near)
					)
				)
			)
			=>
			(
				~ (
					p__connected(OBJ1,OBJ2)
				)
			)
		)
	)
).


fof( mergeA3473, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__orientation(OBJ1,OBJ2,c__Near)
					)
				)
			)
			=>
			(
				p__orientation(OBJ2,OBJ1,c__Near)
			)
		)
	)
).


fof( mergeA3474, axiom,
	p__d__instance(c__On,c__AntiSymmetricPositionalAttribute)
).



% ($documentation On EnglishLanguage "This is used to assert that an object is on top of 
% another object, and it is derived from the up/down schema and involves 
% contact.")


fof( mergeA3475, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__orientation(OBJ1,OBJ2,c__On)
					)
				)
			)
			=>
			(
				p__connected(OBJ1,OBJ2)
			)
		)
	)
).


fof( mergeA3476, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__orientation(OBJ1,OBJ2,c__On)
					)
				)
			)
			=>
			(
				p__located(OBJ1,OBJ2)
			)
		)
	)
).


fof( mergeA3477, axiom,
	(![OBJ2,OBJ1]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__orientation(OBJ1,OBJ2,c__On)
					)
				)
			)
			=>
			(
				~ (
					p__orientation(OBJ2,OBJ1,c__On)
				)
			)
		)
	)
).


fof( mergeA3478, axiom,
	p__d__subclass(c__TimeZone,c__RelationalAttribute)
).



% ($documentation TimeZone EnglishLanguage "An &%Attribute which is used to specify coordinates 
% in which time measures are uniform, i.e. all time devices are synchronized to 
% the same &%TimePositions.")


fof( mergeA3479, axiom,
	p__d__instance(c__CoordinatedUniversalTimeZone,c__TimeZone)
).



% ($documentation CoordinatedUniversalTimeZone EnglishLanguage "A &%TimeZone which functions 
% as the standard time zone.  It is also known as Zulu time (in the military), 
% Greenwich Mean Time, and the Western European time zone.  Note that whenever 
% a &%TimeZone is not specified, the &%TimePosition is understood to be with 
% respect to the &%CoordinatedUniversalTimeZone.") 


fof( mergeA3480, axiom,
	p__d__instance(c__PacificTimeZone,c__TimeZone)
).



% ($documentation PacificTimeZone EnglishLanguage "A &%TimeZone that covers much of the 
% western part of the United States.")


fof( mergeA3481, axiom,
	(![TIME2,TIME1]: 
		(
			(
				(
					(
						p__d__instance(TIME1,c__TimePosition)
					)
				 &
					(
						p__d__instance(TIME2,c__TimePosition)
					)
				 &
					(
						( f__RelativeTimeFn2(TIME1,c__PacificTimeZone) = TIME2 )
					)
				)
			)
			=>
			(
				( TIME2 = f__AdditionFn2(TIME1,c__8) )
			)
		)
	)
).


fof( mergeA3482, axiom,
	p__d__instance(c__MountainTimeZone,c__TimeZone)
).



% ($documentation MountainTimeZone EnglishLanguage "A &%TimeZone that covers much of the 
% Rocky Mountain region of the United States.")


fof( mergeA3483, axiom,
	(![TIME2,TIME1]: 
		(
			(
				(
					(
						p__d__instance(TIME1,c__TimePosition)
					)
				 &
					(
						p__d__instance(TIME2,c__TimePosition)
					)
				 &
					(
						( f__RelativeTimeFn2(TIME1,c__MountainTimeZone) = TIME2 )
					)
				)
			)
			=>
			(
				( TIME2 = f__AdditionFn2(TIME1,c__7) )
			)
		)
	)
).


fof( mergeA3484, axiom,
	p__d__instance(c__CentralTimeZone,c__TimeZone)
).



% ($documentation CentralTimeZone EnglishLanguage "A &%TimeZone that covers much of the 
% midwestern United States.")


fof( mergeA3485, axiom,
	(![TIME2,TIME1]: 
		(
			(
				(
					(
						p__d__instance(TIME1,c__TimePosition)
					)
				 &
					(
						p__d__instance(TIME2,c__TimePosition)
					)
				 &
					(
						( f__RelativeTimeFn2(TIME1,c__CentralTimeZone) = TIME2 )
					)
				)
			)
			=>
			(
				( TIME2 = f__AdditionFn2(TIME1,c__6) )
			)
		)
	)
).


fof( mergeA3486, axiom,
	p__d__instance(c__EasternTimeZone,c__TimeZone)
).



% ($documentation EasternTimeZone EnglishLanguage "A &%TimeZone that covers much of the 
% eastern United States.")


fof( mergeA3487, axiom,
	(![TIME2,TIME1]: 
		(
			(
				(
					(
						p__d__instance(TIME1,c__TimePosition)
					)
				 &
					(
						p__d__instance(TIME2,c__TimePosition)
					)
				 &
					(
						( f__RelativeTimeFn2(TIME1,c__EasternTimeZone) = TIME2 )
					)
				)
			)
			=>
			(
				( TIME2 = f__AdditionFn2(TIME1,c__5) )
			)
		)
	)
).


fof( mergeA3488, axiom,
	p__d__instance(c__RelativeTimeFn,c__BinaryFunction)
).


fof( mergeA3489, axiom,
	p__d__instance(c__RelativeTimeFn,c__TemporalRelation)
).


fof( mergeA3490, axiom,
	p__d__instance(c__RelativeTimeFn,c__TotalValuedRelation)
).


% 	($domain RelativeTimeFn 1 TimePosition)

% 	($domain RelativeTimeFn 2 TimeZone)

% 	($range RelativeTimeFn TimePosition)


% ($documentation RelativeTimeFn EnglishLanguage "A means of converting &%TimePositions 
% between different &%TimeZones.  (&%RelativeTimeFn ?TIME ?ZONE) 
% denotes the &%TimePosition in &%CoordinatedUniversalTime that is 
% contemporaneous with the &%TimePosition ?TIME in &%TimeZone ?ZONE.
% For example, (&%RelativeTimeFn (&%MeasureFn 14 &%HourDuration) &%EasternTimeZone) 
% would return the value (&%MeasureFn 19 &%HourDuration).")  


fof( mergeA3494, axiom,
	p__d__subclass(c__SocialRole,c__RelationalAttribute)
).



% ($documentation SocialRole EnglishLanguage "The &%Class of all &%Attributes that 
% specify the position or status of a &%CognitiveAgent within an 
% &%Organization or other &%Group.")


fof( mergeA3495, axiom,
	(![ATTRIBUTE,PERSON]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Object)
					)
				 &
					(
						p__attribute(PERSON,ATTRIBUTE)
					)
				 &
					(
						p__d__instance(ATTRIBUTE,c__SocialRole)
					)
				)
			)
			=>
			(
				p__d__instance(PERSON,c__Human)
			)
		)
	)
).


fof( mergeA3496, axiom,
	p__d__instance(c__Unemployed,c__SocialRole)
).



% ($documentation Unemployed EnglishLanguage "The &%Attribute of a &%CognitiveAgent when 
% he/she is unemployed.")


fof( mergeA3497, axiom,
	(![PERSON]: 
		(
			(
				p__d__instance(PERSON,c__CognitiveAgent)
			)
			=>
			(
				(
					(
						(
							p__d__instance(PERSON,c__Human)
						)
					 &
						(
							(![ORG]: 
								(
									(
										p__d__instance(ORG,c__Organization)
									)
									=>
									(
										~ (
											p__employs(ORG,PERSON)
										)
									)
								)
							)
						)
					)
				)
				<=>
				(
					p__attribute(PERSON,c__Unemployed)
				)
			)
		)
	)
).


fof( mergeA3498, axiom,
	p__d__subclass(c__Position,c__SocialRole)
).



% ($documentation Position EnglishLanguage "A formal position of reponsibility within an 
% &%Organization. Examples of &%Positions include president, laboratory 
% director, senior researcher, sales representative, etc.") 


fof( mergeA3499, axiom,
	p__d__instance(c__occupiesPosition,c__TernaryPredicate)
).


% 	($domain occupiesPosition 1 Human)

% 	($domain occupiesPosition 2 Position)

% 	($domain occupiesPosition 3 Organization)


% ($documentation occupiesPosition EnglishLanguage "(&%occupiesPosition ?PERSON ?POSITION ?ORG) 
% means that ?PERSON holds the &%Position ?POSITION at &%Organization ?ORG. 
% For example, (&%occupiesPosition &%TomSmith &%ResearchDirector 
% &%AcmeLaboratory) means that &%TomSmith is a research director at Acme Labs.") 


fof( mergeA3503, axiom,
	(![ORG,AGENT,POSITION]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__d__instance(POSITION,c__Position)
					)
				 &
					(
						p__d__instance(AGENT,c__Human)
					)
				 &
					(
						p__occupiesPosition(AGENT,POSITION,ORG)
					)
				)
			)
			=>
			(
				p__attribute(AGENT,POSITION)
			)
		)
	)
).


fof( mergeA3504, axiom,
	(![PERSON,ORG]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__employs(ORG,PERSON)
					)
				)
			)
			=>
			(
				(?[POSITION]: 
					(
						(
							(
								p__d__instance(POSITION,c__Position)
							)
						 &
							(
								p__occupiesPosition(PERSON,POSITION,ORG)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3505, axiom,
	(![POSITION,PERSON,ORGANIZATION]: 
		(
			(
				(
					(
						p__d__instance(ORGANIZATION,c__Organization)
					)
				 &
					(
						p__d__instance(POSITION,c__Position)
					)
				 &
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__occupiesPosition(PERSON,POSITION,ORGANIZATION)
					)
				)
			)
			=>
			(
				p__member(PERSON,ORGANIZATION)
			)
		)
	)
).


fof( mergeA3506, axiom,
	p__d__subclass(c__NormativeAttribute,c__RelationalAttribute)
).



% ($documentation NormativeAttribute EnglishLanguage "A &%Class containing all of the 
% &%Attributes that are specific to morality, legality, aesthetics, 
% etiquette, etc.  Many of these attributes express a judgement that 
% something ought or ought not to be the case.")


fof( mergeA3507, axiom,
	p__d__instance(c__modalAttribute,c__BinaryPredicate)
).


fof( mergeA3508, axiom,
	p__d__instance(c__modalAttribute,c__AsymmetricRelation)
).


fof( mergeA3509, axiom,
	p__d__instance(c__modalAttribute,c__IrreflexiveRelation)
).


fof( mergeA3510, axiom,
	p__subrelation(c__modalAttribute,c__property)
).


% 	($domain modalAttribute 1 Formula)

% 	($domain modalAttribute 2 NormativeAttribute)


% ($documentation modalAttribute EnglishLanguage "A &%BinaryRelation that is used to state the 
% normative force of a &%Proposition.  (&%modalAttribute ?FORMULA ?PROP) means 
% that the &%Proposition expressed by ?FORMULA has the &%NormativeAttribute 
% ?PROP.  For example, (&%modalAttribute (&%exists (?ACT ?OBJ) (&%and 
% (&%instance ?ACT &%Giving) (&%agent ?ACT John) (&%patient ?ACT ?OBJ) 
% (&%destination ?ACT Tom))) &%Obligation) means that John is obligated to give 
% Tom something.")  


fof( mergeA3513, axiom,
	(![FORMULA1,FORMULA2,PROP]: 
		(
			(
				(
					(
						p__d__instance(PROP,c__NormativeAttribute)
					)
				 &
					(
						p__d__instance(FORMULA1,c__Formula)
					)
				 &
					(
						p__d__instance(FORMULA2,c__Formula)
					)
				 &
					(
						p__modalAttribute(FORMULA1,PROP)
					)
				 &
					(
						p__entails(FORMULA1,FORMULA2)
					)
				)
			)
			=>
			(
				p__modalAttribute(FORMULA2,PROP)
			)
		)
	)
).


fof( mergeA3514, axiom,
	(![FORMULA]: 
		(
			(
				(
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__modalAttribute(FORMULA,c__Permission)
					)
				)
			)
			=>
			(
				p__modalAttribute(FORMULA,c__Possibility)
			)
		)
	)
).


fof( mergeA3515, axiom,
	p__d__subclass(c__SubjectiveAssessmentAttribute,c__NormativeAttribute)
).


fof( mergeA3516, axiom,
	p__d__disjoint(c__SubjectiveAssessmentAttribute,c__ObjectiveNorm)
).



% ($documentation SubjectiveAssessmentAttribute EnglishLanguage "The &%Class of &%NormativeAttributes
% which lack an objective criterion for their attribution, i.e. the attribution of 
% these &%Attributes varies from subject to subject and even with respect to the 
% same subject over time.  This &%Class is, generally speaking, only used when 
% mapping external knowledge sources to the SUMO.  If a term from such a knowledge 
% source seems to lack objective criteria for its attribution, it is assigned to 
% this &%Class.")


fof( mergeA3517, axiom,
	p__d__subclass(c__ObjectiveNorm,c__NormativeAttribute)
).



% ($documentation ObjectiveNorm EnglishLanguage "The &%Class of &%NormativeAttributes that are 
% associated with an objective criterion for their attribution, i.e. there is 
% broad consensus about the cases where these attributes are applicable.")


fof( mergeA3518, axiom,
	p__d__subclass(c__ContestAttribute,c__ObjectiveNorm)
).



% ($documentation ContestAttribute EnglishLanguage "A &%Class containing &%Attributes that are 
% specific to participants in a &%Contest.  In particular, these &%Attributes 
% indicate the position of one of the &%agents in the &%Contest with respect 
% to other &%agent(s) in the &%Contest.   Some examples of these &%Attributes 
% are winning, losing, won, lost, etc.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of agent is Agent, which is subclass of Object, whereas the first argument of subProcess is Process (Object and Process are disjoint)
% ;;
% ;;(=>
% ;;   (and
% ;;      (property ?THING ?ATTR)
% ;;      ($instance ?ATTR ContestAttribute))
% ;;   (exists (?CONTEST)
% ;;      (and
% ;;         ($instance ?CONTEST Contest)
% ;;         (or
% ;;            (agent ?CONTEST ?THING)
% ;;            (patient ?CONTEST ?THING)
% ;;            (subProcess ?THING ?CONTEST)))))
% )

fof( mergeA3519, axiom,
	p__d__subclass(c__AlethicAttribute,c__ObjectiveNorm)
).



% ($documentation AlethicAttribute EnglishLanguage "A &%Class containing all of the &%Attributes 
% relating to the notions of possibility and necessity.")


fof( mergeA3520, axiom,
	p__d__instance(c__Possibility,c__AlethicAttribute)
).



% ($documentation Possibility EnglishLanguage "Attribute that applies to &%Propositions that are 
% possible, i.e. true in at least one possible world.")


fof( mergeA3521, axiom,
	p__d__instance(c__Necessity,c__AlethicAttribute)
).



% ($documentation Necessity EnglishLanguage "Attribute that applies to &%Propositions that are 
% necessary, i.e. true in every possible world.")


% 	(forall (?FORMULA)
% 		(<=> 
% 			(modalAttribute ?FORMULA Necessity)
% 			(not 
% 				(modalAttribute (not ?FORMULA) Possibility)
% 			)
% 		)
% 	)

fof( mergeA3523, axiom,
	(![FORMULA]: 
		(
			(
				(
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__modalAttribute(FORMULA,c__Necessity)
					)
				)
			)
			=>
			(
				p__modalAttribute(FORMULA,c__Possibility)
			)
		)
	)
).


fof( mergeA3524, axiom,
	p__d__instance(c__holdsRight,c__BinaryPredicate)
).


fof( mergeA3525, axiom,
	p__d__instance(c__holdsRight,c__AsymmetricRelation)
).


% 	($domain holdsRight 1 Formula)

% 	($domain holdsRight 2 CognitiveAgent)


% ($documentation holdsRight EnglishLanguage "Expresses a relationship between a &%Formula 
% and a &%CognitiveAgent whereby the &%CognitiveAgent has the right to 
% bring it about that the &%Formula is true.")


fof( mergeA3528, axiom,
	p__d__instance(c__confersRight,c__TernaryPredicate)
).


% 	($domain confersRight 1 Formula)

% 	($domain confersRight 2 Entity)

% 	($domain confersRight 3 CognitiveAgent)


% ($documentation confersRight EnglishLanguage "Expresses the relationship between a &%Formula, 
% an &%Entity, and a &%CognitiveAgent when the &%Entity authorizes the 
% &%CognitiveAgent to bring it about that the &%Formula is true.")


fof( mergeA3532, axiom,
	(![AGENT1,FORMULA,AGENT2]: 
		(
			(
				(
					(
						p__d__instance(AGENT2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__confersRight(FORMULA,AGENT1,AGENT2)
					)
				)
			)
			=>
			(
				p__holdsRight(FORMULA,AGENT2)
			)
		)
	)
).


fof( mergeA3533, axiom,
	p__d__instance(c__holdsObligation,c__BinaryPredicate)
).


fof( mergeA3534, axiom,
	p__d__instance(c__holdsObligation,c__AsymmetricRelation)
).


% 	($domain holdsObligation 1 Formula)

% 	($domain holdsObligation 2 CognitiveAgent)

fof( mergeA3537, axiom,
	p__relatedInternalConcept(c__holdsObligation,c__holdsRight)
).



% ($documentation holdsObligation EnglishLanguage "Expresses a relationship between a 
% &%Formula and a &%CognitiveAgent whereby the &%CognitiveAgent has 
% the obligation to bring it about that the &%Formula is true.")


fof( mergeA3538, axiom,
	p__d__instance(c__confersObligation,c__TernaryPredicate)
).


% 	($domain confersObligation 1 Formula)

% 	($domain confersObligation 2 Entity)

% 	($domain confersObligation 3 CognitiveAgent)

fof( mergeA3542, axiom,
	p__relatedInternalConcept(c__confersObligation,c__confersRight)
).



% ($documentation confersObligation EnglishLanguage "Expresses the relationship between a 
% a &%Formula, an &%Entity, and a &%CognitiveAgent when the &%Entity 
% obligates the &%CognitiveAgent to bring it about that the &%Formula is 
% true.")


fof( mergeA3543, axiom,
	(![AGENT1,FORMULA,AGENT2]: 
		(
			(
				(
					(
						p__d__instance(AGENT2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__confersObligation(FORMULA,AGENT1,AGENT2)
					)
				)
			)
			=>
			(
				p__holdsObligation(FORMULA,AGENT2)
			)
		)
	)
).


fof( mergeA3544, axiom,
	p__d__subclass(c__DeonticAttribute,c__ObjectiveNorm)
).



% ($documentation DeonticAttribute EnglishLanguage "A &%Class containing all of the &%Attributes 
% relating to the notions of permission, obligation, and prohibition.")


fof( mergeA3545, axiom,
	p__d__instance(c__Permission,c__DeonticAttribute)
).



% ($documentation Permission EnglishLanguage "&%Attribute that applies to &%Propositions that an 
% &%Agent is permitted, by some authority, to make true.")


fof( mergeA3546, axiom,
	p__d__instance(c__Obligation,c__DeonticAttribute)
).



% ($documentation Obligation EnglishLanguage "&%Attribute that applies to &%Propositions that an 
% &%Agent is required, by some authority, to make true.")


% 	(forall (?FORMULA)
% 		(<=> 
% 			(modalAttribute ?FORMULA Obligation)
% 			(not 
% 				(modalAttribute (not ?FORMULA) Permission)
% 			)
% 		)
% 	)

fof( mergeA3548, axiom,
	(![FORMULA]: 
		(
			(
				(
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__modalAttribute(FORMULA,c__Obligation)
					)
				)
			)
			=>
			(
				p__modalAttribute(FORMULA,c__Permission)
			)
		)
	)
).


fof( mergeA3549, axiom,
	p__subAttribute(c__Law,c__Obligation)
).


fof( mergeA3550, axiom,
	p__d__instance(c__Law,c__DeonticAttribute)
).



% ($documentation Law EnglishLanguage "&%Attribute that applies to &%Propositions that are 
% required by a government or a branch of the government and that are enforced 
% with penalties for noncompliance.  These &%Propositions may be codified as 
% legislation or they may be more informal, as in the case of government policy.")


fof( mergeA3551, axiom,
	p__subAttribute(c__Promise,c__Obligation)
).



% ($documentation Promise EnglishLanguage "&%Attribute that applies to &%Propositions that 
% an &%Agent promises to make true.  &%Promises may be implicit or explicit.  
% They may be expressed in a written or verbal or gestural manner.")


% ($comment 
% ;; KJN: Moving this to Mid-level-ontology as the definition for Contract is all there.
% ;;(=>
% ;;   (property ?ENTITY Promise)
% ;;      (or
% ;;         (property ?ENTITY Contract)
% ;;         (property ?ENTITY NakedPromise)))
% ;;
% ;;(subAttribute NakedPromise Promise)
% ;;(documentation NakedPromise EnglishLanguage "A &%Promise where nothing is promised in return, 
% ;;i.e. a nudum pactum.")
% )

fof( mergeA3552, axiom,
	p__d__instance(c__Prohibition,c__DeonticAttribute)
).



% ($documentation Prohibition EnglishLanguage "&%Prohibition is the &%DeonticAttribute that 
% applies to &%Formulas that an &%Agent is forbidden, by some authority, 
% to make true.")


fof( mergeA3553, axiom,
	(![FORMULA]: 
		(
			(
				p__d__instance(FORMULA,c__Formula)
			)
			=>
			(
				(
					p__modalAttribute(FORMULA,c__Prohibition)
				)
				<=>
				(
					~ (
						p__modalAttribute(FORMULA,c__Permission)
					)
				)
			)
		)
	)
).


fof( mergeA3554, axiom,
	p__d__subclass(c__ProbabilityAttribute,c__ObjectiveNorm)
).



% ($documentation ProbabilityAttribute EnglishLanguage "A class containing all of the &%Attributes 
% relating to objective, qualitative assessments of probability, e.g. &%Likely and 
% &%Unlikely.")


fof( mergeA3555, axiom,
	p__d__instance(c__Likely,c__ProbabilityAttribute)
).


fof( mergeA3556, axiom,
	p__contraryAttribute2(c__Likely,c__Unlikely)
).



% ($documentation Likely EnglishLanguage "The &%ProbabilityAttribute of being probable, i.e. more 
% likely than not to be &%True.")


% 	(forall (?FORMULA)
% 		(=> 
% 			(modalAttribute ?FORMULA Likely)
% 			(greaterThan (ProbabilityFn (truth ?FORMULA True)) (ProbabilityFn (truth ?FORMULA False)))
% 		)
% 	)

fof( mergeA3558, axiom,
	p__d__instance(c__Unlikely,c__ProbabilityAttribute)
).



% ($documentation Unlikely EnglishLanguage "The &%ProbabilityAttribute of being improbable, i.e. more 
% likely than not to be &%False.")


% 	(forall (?FORMULA)
% 		(=> 
% 			(modalAttribute ?FORMULA Unlikely)
% 			(greaterThan (ProbabilityFn (truth ?FORMULA False)) (ProbabilityFn (truth ?FORMULA True)))
% 		)
% 	)

fof( mergeA3560, axiom,
	p__d__subclass(c__PhysicalState,c__InternalAttribute)
).


fof( mergeA3561, axiom,
	p__contraryAttribute4(c__Solid,c__Liquid,c__Gas,c__Plasma)
).


% 	(exhaustiveAttribute PhysicalState @(Solid,Fluid,Liquid,Gas,Plasma))


% ($documentation PhysicalState EnglishLanguage "The physical state of an &%Object.  There 
% are three reified instances of this &%Class:  &%Solid, &%Liquid, and &%Gas.  
% Physical changes are not characterized by the transformation of one 
% substance into another, but rather by the change of the form (physical 
% states) of a given substance.  For example, melting an iron nail yields a 
% substance still called iron.")


fof( mergeA3563, axiom,
	p__d__instance(c__Solid,c__PhysicalState)
).



% ($documentation Solid EnglishLanguage "An &%Object has the &%Attribute of &%Solid if it 
% has a fixed shape and a fixed volume.")


fof( mergeA3564, axiom,
	p__d__instance(c__Fluid,c__PhysicalState)
).



% ($documentation Fluid EnglishLanguage "&%Fluid is the &%PhysicalState attribute of an 
% &%Object that does not have a fixed shape and thus tends to flow or to 
% conform to the shape of a container.")


fof( mergeA3565, axiom,
	p__d__instance(c__Liquid,c__PhysicalState)
).


fof( mergeA3566, axiom,
	p__subAttribute(c__Liquid,c__Fluid)
).



% ($documentation Liquid EnglishLanguage "An &%Object has the &%Attribute of &%Liquid if 
% it has a fixed volume but not a fixed shape.")


fof( mergeA3567, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__Solution)
			)
			=>
			(
				p__attribute(OBJ,c__Liquid)
			)
		)
	)
).


fof( mergeA3568, axiom,
	p__d__instance(c__Gas,c__PhysicalState)
).


fof( mergeA3569, axiom,
	p__subAttribute(c__Gas,c__Fluid)
).



% ($documentation Gas EnglishLanguage "An &%Object has the &%Attribute of &%Gas if it has 
% neither a fixed volume nor a fixed shape.")


fof( mergeA3570, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__Object)
			)
			=>
			(
				(
					p__d__instance(OBJ,c__Substance)
				)
				<=>
				(
					(?[ATTR]: 
						(
							(
								(
									p__d__instance(ATTR,c__PhysicalState)
								)
							 &
								(
									p__attribute(OBJ,ATTR)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3571, axiom,
	p__d__instance(c__Plasma,c__PhysicalState)
).


fof( mergeA3572, axiom,
	p__subAttribute(c__Plasma,c__Fluid)
).



% ($documentation Plasma EnglishLanguage "An extremely energetic &%PhysicalState that consists 
% of atomic nuclei stripped of electrons.  That is, a plasma is composed of 
% positive ions and free electrons.  &%Plasma behaves differently enough from 
% &%Gas that it is referred to as the fourth state of matter.") 


% ($comment 
% ;; NS: delete.  Instances of SoundAttribute should also be instances
% ;; of PerceptualAttribute, but SoundAttribute is a subclass of
% ;; RelationalAttribute, not of InternalAttribute.  Some
% ;; PerceptualAttributes are InternalAttributes.  Others are
% ;; RelationalAttributes.
% ;; ($subclass PerceptualAttribute InternalAttribute)
% ;;
% ;; NS: add.
% )

fof( mergeA3573, axiom,
	p__d__subclass(c__PerceptualAttribute,c__Attribute)
).



% ($documentation PerceptualAttribute EnglishLanguage "Any &%Attribute whose presence is detected 
% by an act of &%Perception.")


fof( mergeA3574, axiom,
	(![PERCEPTION,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(PERCEPTION,c__Perception)
					)
				 &
					(
						p__patient(PERCEPTION,OBJ)
					)
				)
			)
			=>
			(
				(?[PROP]: 
					(
						(
							(
								p__d__instance(PROP,c__PerceptualAttribute)
							)
						 &
							(
								p__attribute(OBJ,PROP)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3575, axiom,
	p__d__subclass(c__TasteAttribute,c__PerceptualAttribute)
).



% ($documentation TasteAttribute EnglishLanguage "The &%Class of &%Attributes relating to 
% the taste of &%Objects.")


% 	(forall (?OBJ)
% 		(=> 
% 			($instance ?OBJ (FoodForFn Animal))
% 			(exists (?ATTR)
% 				(and 
% 					($instance ?ATTR TasteAttribute)
% 					(attribute ?OBJ ?ATTR)
% 				)
% 			)
% 		)
% 	)

fof( mergeA3577, axiom,
	p__d__subclass(c__OlfactoryAttribute,c__PerceptualAttribute)
).



% ($documentation OlfactoryAttribute EnglishLanguage "The &%Class of properties that are 
% detectable by smell.")


fof( mergeA3578, axiom,
	p__d__subclass(c__VisualAttribute,c__PerceptualAttribute)
).



% ($documentation VisualAttribute EnglishLanguage "The &%Class of visually discernible 
% properties.")


fof( mergeA3579, axiom,
	p__d__instance(c__Illuminated,c__VisualAttribute)
).



% ($documentation Illuminated EnglishLanguage "The &%Attribute of &%Regions that are 
% illuminated to some degree, i.e. in which some shapes are visually 
% discernable.")


fof( mergeA3580, axiom,
	p__d__instance(c__Unilluminated,c__VisualAttribute)
).


fof( mergeA3581, axiom,
	p__contraryAttribute2(c__Unilluminated,c__Illuminated)
).



% ($documentation Unilluminated EnglishLanguage "The &%Attribute of &%Regions that are 
% unilluminated, i.e in which no shapes are visually discernable.")


% ($comment 
% ;; NS: delete.
% ;; ($subclass ColorAttribute InternalAttribute)
% ;;
% ;; NS: add.
% )

fof( mergeA3582, axiom,
	p__d__subclass(c__ColorAttribute,c__VisualAttribute)
).



% ($documentation ColorAttribute EnglishLanguage "The &%Class of &%Attributes relating to the 
% color of &%Objects.")


fof( mergeA3583, axiom,
	p__d__subclass(c__PrimaryColor,c__ColorAttribute)
).



% ($documentation PrimaryColor EnglishLanguage "Colors which can be blended to form any 
% color and which cannot be derived from any other colors.")


fof( mergeA3584, axiom,
	p__d__instance(c__Red,c__PrimaryColor)
).



% ($documentation Red EnglishLanguage "The &%Attribute of redness.")


fof( mergeA3585, axiom,
	p__d__instance(c__Blue,c__PrimaryColor)
).



% ($documentation Blue EnglishLanguage "The &%Attribute of being blue in color.")


fof( mergeA3586, axiom,
	p__d__instance(c__Yellow,c__PrimaryColor)
).



% ($documentation Yellow EnglishLanguage "The &%Attribute of being yellow in color.")


fof( mergeA3587, axiom,
	p__d__instance(c__White,c__PrimaryColor)
).



% ($documentation White EnglishLanguage "The &%Attribute of being white in color.")


fof( mergeA3588, axiom,
	p__d__instance(c__Black,c__PrimaryColor)
).



% ($documentation Black EnglishLanguage "The &%Attribute of being black in color.")


fof( mergeA3589, axiom,
	p__d__instance(c__Monochromatic,c__ColorAttribute)
).



% ($documentation Monochromatic EnglishLanguage "An &%Object with this &%Attribute has 
% the same color on every part of its surface.")


fof( mergeA3590, axiom,
	(![PART,OBJ,COLOR,ELEMENT]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				 &
					(
						p__d__instance(ELEMENT,c__Object)
					)
				 &
					(
						p__attribute(OBJ,c__Monochromatic)
					)
				 &
					(
						p__superficialPart(PART,OBJ)
					)
				 &
					(
						p__attribute(PART,COLOR)
					)
				 &
					(
						p__d__instance(COLOR,c__PrimaryColor)
					)
				 &
					(
						p__superficialPart(ELEMENT,OBJ)
					)
				)
			)
			=>
			(
				p__attribute(ELEMENT,COLOR)
			)
		)
	)
).


fof( mergeA3591, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__Object)
			)
			=>
			(
				(
					p__attribute(OBJ,c__Monochromatic)
				 |
					p__attribute(OBJ,c__Polychromatic)
				)
			)
		)
	)
).


fof( mergeA3592, axiom,
	p__d__instance(c__Polychromatic,c__ColorAttribute)
).


fof( mergeA3593, axiom,
	p__contraryAttribute2(c__Polychromatic,c__Monochromatic)
).



% ($documentation Polychromatic EnglishLanguage "An &%Object with this &%Attribute has 
% different colors on different parts of its surface.")


fof( mergeA3594, axiom,
	(![OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__attribute(OBJ,c__Polychromatic)
					)
				)
			)
			=>
			(
				(?[PART1,PART2,COLOR1,COLOR2]: 
					(
						(
							(
								p__d__instance(PART1,c__Object)
							)
						 &
							(
								p__d__instance(PART2,c__Object)
							)
						 &
							(
								p__superficialPart(PART1,OBJ)
							)
						 &
							(
								p__superficialPart(PART2,OBJ)
							)
						 &
							(
								p__attribute(PART1,COLOR1)
							)
						 &
							(
								p__attribute(PART2,COLOR2)
							)
						 &
							(
								p__d__instance(COLOR1,c__ColorAttribute)
							)
						 &
							(
								p__d__instance(COLOR2,c__ColorAttribute)
							)
						 &
							(
								~ (
									( COLOR1 = COLOR2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moved in from Media.kif         
% )

fof( mergeA3595, axiom,
	p__d__subclass(c__StructureAttribute,c__InternalAttribute)
).



% ($documentation StructureAttribute EnglishLanguage
% "Each &%subclass of &%StructureAttribute denotes some facet of the
% structure of physical entities.  Each &%instance of
% &%StructureAttribute denotes some structural characteristic that may
% pertain to some &%Physical entity.")


fof( mergeA3596, axiom,
	p__d__subclass(c__ShapeAttribute,c__StructureAttribute)
).


% ($comment 
% ;; KJN: Delete as StructureAttribute already subclasses from InternalAttribute                  
% ;;($subclass ShapeAttribute InternalAttribute)
% )


% ($documentation ShapeAttribute EnglishLanguage "Any &%Attribute that relates to the 
% shape of an &%Object.")


fof( mergeA3597, axiom,
	(![OBJ,SURFACE,ATTRIBUTE]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(SURFACE,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(ATTRIBUTE,c__ShapeAttribute)
					)
				 &
					(
						p__attribute(OBJ,ATTRIBUTE)
					)
				 &
					(
						p__surface(SURFACE,OBJ)
					)
				)
			)
			=>
			(
				p__attribute(SURFACE,ATTRIBUTE)
			)
		)
	)
).


fof( mergeA3598, axiom,
	p__d__instance(c__Pliable,c__InternalAttribute)
).



% ($documentation Pliable EnglishLanguage "The shape of an &%Object with this &%Attribute 
% can easily be altered.")


fof( mergeA3599, axiom,
	(![OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__attribute(OBJ,c__Pliable)
					)
				)
			)
			=>
			(
				(?[CHANGE]: 
					(
						(
							(
								p__d__instance(CHANGE,c__ShapeChange)
							)
						 &
							(
								p__patient(CHANGE,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3600, axiom,
	p__d__instance(c__Rigid,c__InternalAttribute)
).


fof( mergeA3601, axiom,
	p__contraryAttribute2(c__Rigid,c__Pliable)
).



% ($documentation Rigid EnglishLanguage "The shape of an &%Object with this &%Attribute 
% cannot be altered without breaking.")


fof( mergeA3602, axiom,
	p__d__subclass(c__TextureAttribute,c__PerceptualAttribute)
).



% ($documentation TextureAttribute EnglishLanguage "Any &%Attribute that characterizes the 
% texture of an &%Object.")


fof( mergeA3603, axiom,
	(![OBJ,SURFACE,ATTRIBUTE]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(SURFACE,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(ATTRIBUTE,c__TextureAttribute)
					)
				 &
					(
						p__attribute(OBJ,ATTRIBUTE)
					)
				 &
					(
						p__surface(SURFACE,OBJ)
					)
				)
			)
			=>
			(
				p__attribute(SURFACE,ATTRIBUTE)
			)
		)
	)
).


fof( mergeA3604, axiom,
	p__d__instance(c__Smooth,c__TextureAttribute)
).



% ($documentation Smooth EnglishLanguage "An &%Object with this &%Attribute has a smooth 
% surface.")


fof( mergeA3605, axiom,
	p__d__instance(c__Rough,c__TextureAttribute)
).


fof( mergeA3606, axiom,
	p__contraryAttribute2(c__Smooth,c__Rough)
).



% ($documentation Rough EnglishLanguage "An &%Object with this &%Attribute has a rough 
% surface.")


fof( mergeA3607, axiom,
	p__d__subclass(c__GeometricFigure,c__ShapeAttribute)
).


fof( mergeA3608, axiom,
	p__d__partition5(c__GeometricFigure,c__GeometricPoint,c__OneDimensionalFigure,c__TwoDimensionalFigure,c__ThreeDimensionalFigure)
).



% ($documentation GeometricFigure EnglishLanguage "The class of all geometric figures, i.e. the 
% class of all abstract, spatial representations.  The instances of this class 
% are &%GeometricPoints, &%TwoDimensionalFigures or &%ThreeDimensionalFigures.")


fof( mergeA3609, axiom,
	p__d__subclass(c__GeometricPoint,c__GeometricFigure)
).



% ($documentation GeometricPoint EnglishLanguage "The class of zero-dimensional 
% &%GeometricFigures, i.e. the class of &%GeometricFigures that have position 
% but lack extension in any dimension.")


fof( mergeA3610, axiom,
	p__d__subclass(c__OneDimensionalFigure,c__GeometricFigure)
).



% ($documentation OneDimensionalFigure EnglishLanguage "The class of &%GeometricFigures that 
% have position and an extension along a single dimension, viz. straight lines.")


fof( mergeA3611, axiom,
	p__d__subclass(c__TwoDimensionalFigure,c__GeometricFigure)
).


fof( mergeA3612, axiom,
	p__d__partition3(c__TwoDimensionalFigure,c__OpenTwoDimensionalFigure,c__ClosedTwoDimensionalFigure)
).



% ($documentation TwoDimensionalFigure EnglishLanguage "The class of &%GeometricFigures that 
% have position and an extension along two dimensions, viz. plane figures 
% like circles and polygons.")


fof( mergeA3613, axiom,
	p__d__subclass(c__OpenTwoDimensionalFigure,c__TwoDimensionalFigure)
).



% ($documentation OpenTwoDimensionalFigure EnglishLanguage "The class of &%TwoDimensionalFigures that 
% are not &%ClosedTwoDimensionalFigures.")


fof( mergeA3614, axiom,
	p__d__subclass(c__TwoDimensionalAngle,c__OpenTwoDimensionalFigure)
).



% ($documentation TwoDimensionalAngle EnglishLanguage "Any two &%OneDimensionalFigures (i.e. 
% straight lines) meeting at a single &%GeometricPoint.")


fof( mergeA3615, axiom,
	p__d__subclass(c__ClosedTwoDimensionalFigure,c__TwoDimensionalFigure)
).



% ($documentation ClosedTwoDimensionalFigure EnglishLanguage "Any &%TwoDimensionalFigure which 
% has a well defined interior and exterior.")


fof( mergeA3616, axiom,
	p__d__subclass(c__ThreeDimensionalFigure,c__GeometricFigure)
).



% ($documentation ThreeDimensionalFigure EnglishLanguage "The class of &%GeometricFigures that 
% have position and an extension along three dimensions, viz. geometric solids 
% like polyhedrons and cylinders.")


fof( mergeA3617, axiom,
	p__d__instance(c__geometricPart,c__BinaryPredicate)
).


fof( mergeA3618, axiom,
	p__d__instance(c__geometricPart,c__PartialOrderingRelation)
).


% 	($domain geometricPart 1 GeometricFigure)

% 	($domain geometricPart 2 GeometricFigure)


% ($documentation geometricPart EnglishLanguage "(&%geometricPart ?PART ?WHOLE) means that the 
% &%GeometricFigure ?PART is part of the &%GeometricFigure ?WHOLE.")


fof( mergeA3621, axiom,
	p__subrelation(c__pointOfFigure,c__geometricPart)
).


% 	($domain pointOfFigure 1 GeometricPoint)

% 	($domain pointOfFigure 2 GeometricFigure)


% ($documentation pointOfFigure EnglishLanguage "(&%pointOfFigure ?POINT ?FIGURE) means that 
% the &%GeometricPoint ?POINT is part of the &%GeometricFigure ?FIGURE.")


fof( mergeA3624, axiom,
	p__subrelation(c__angleOfFigure,c__geometricPart)
).


% 	($domain angleOfFigure 1 TwoDimensionalAngle)

% 	($domain angleOfFigure 2 GeometricFigure)


% ($documentation angleOfFigure EnglishLanguage "(&%angleOfFigure ?ANGLE ?FIGURE) means that 
% the &%TwoDimensionalAngle ?ANGLE is part of the &%GeometricFigure ?FIGURE.")


fof( mergeA3627, axiom,
	p__d__instance(c__pointOfIntersection,c__TernaryPredicate)
).


% 	($domain pointOfIntersection 1 OneDimensionalFigure)

% 	($domain pointOfIntersection 2 OneDimensionalFigure)

% 	($domain pointOfIntersection 3 GeometricPoint)


% ($documentation pointOfIntersection EnglishLanguage "(&%pointOfIntersection ?FIGURE1 ?FIGURE2 
% ?POINT) means that the two straight lines ?FIGURE1 and ?FIGURE2 meet at the 
% point ?POINT.")


fof( mergeA3631, axiom,
	(![FIGURE1,POINT,FIGURE2]: 
		(
			(
				(
					(
						p__d__instance(POINT,c__GeometricPoint)
					)
				 &
					(
						p__d__instance(FIGURE2,c__OneDimensionalFigure)
					)
				 &
					(
						p__d__instance(FIGURE1,c__OneDimensionalFigure)
					)
				 &
					(
						p__pointOfIntersection(FIGURE1,FIGURE2,POINT)
					)
				)
			)
			=>
			(
				(
					(
						p__pointOfFigure(POINT,FIGURE1)
					)
				 &
					(
						p__pointOfFigure(POINT,FIGURE2)
					)
				)
			)
		)
	)
).


fof( mergeA3632, axiom,
	p__d__instance(c__parallel,c__BinaryPredicate)
).


% 	($domain parallel 1 OneDimensionalFigure)

% 	($domain parallel 2 OneDimensionalFigure)


% ($documentation parallel EnglishLanguage "(&%parallel ?LINE1 ?LINE2) means that the 
% &%OneDimensionalFigures ?LINE1 and ?LINE2 are parallel to one another, 
% i.e. they are equidistant from one another at every point.")


fof( mergeA3635, axiom,
	(![LINE1,LINE2]: 
		(
			(
				(
					(
						p__d__instance(LINE2,c__OneDimensionalFigure)
					)
				 &
					(
						p__d__instance(LINE1,c__OneDimensionalFigure)
					)
				 &
					(
						p__parallel(LINE1,LINE2)
					)
				)
			)
			=>
			(
				(![POINT]: 
					(
						(
							~ (
								p__d__instance(POINT,c__GeometricPoint)
							)
						 |
							~ (
								p__pointOfIntersection(LINE1,LINE2,POINT)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3636, axiom,
	p__d__instance(c__angularMeasure,c__BinaryPredicate)
).


fof( mergeA3637, axiom,
	p__d__instance(c__angularMeasure,c__TotalValuedRelation)
).


% 	($domain angularMeasure 1 TwoDimensionalAngle)

% 	($domain angularMeasure 2 PlaneAngleMeasure)


% ($documentation angularMeasure EnglishLanguage "(&%angularMeasure ?ANGLE ?MEASURE) means that 
% the two-dimensional geometric angle ?ANGLE has the &%PlaneAngleMeasure of 
% ?MEASURE.")


fof( mergeA3640, axiom,
	p__d__instance(c__lineMeasure,c__BinaryPredicate)
).


fof( mergeA3641, axiom,
	p__d__instance(c__lineMeasure,c__TotalValuedRelation)
).


% 	($domain lineMeasure 1 OneDimensionalFigure)

% 	($domain lineMeasure 2 LengthMeasure)


% ($documentation lineMeasure EnglishLanguage "(&%lineMeasure ?LINE ?MEASURE) means that the 
% straight line ?LINE has the &%LengthMeasure of ?MEASURE.")


fof( mergeA3644, axiom,
	p__d__instance(c__geometricDistance,c__TernaryPredicate)
).


fof( mergeA3645, axiom,
	p__d__instance(c__geometricDistance,c__SingleValuedRelation)
).


fof( mergeA3646, axiom,
	p__d__instance(c__geometricDistance,c__TotalValuedRelation)
).


% 	($domain geometricDistance 1 GeometricPoint)

% 	($domain geometricDistance 2 GeometricPoint)

% 	($domain geometricDistance 3 LengthMeasure)


% ($documentation geometricDistance EnglishLanguage "(&%geometricDistance ?POINT1 ?POINT2 
% ?LENGTH) means that ?LENGTH is the distance between the two 
% &%GeometricPoints ?POINT1 and ?POINT2.")


fof( mergeA3650, axiom,
	(![POINT2,POINT1,LENGTH]: 
		(
			(
				(
					(
						p__d__instance(LENGTH,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(POINT2,c__GeometricPoint)
					)
				 &
					(
						p__d__instance(POINT1,c__GeometricPoint)
					)
				 &
					(
						p__geometricDistance(POINT1,POINT2,LENGTH)
					)
				)
			)
			=>
			(
				p__geometricDistance(POINT2,POINT1,LENGTH)
			)
		)
	)
).


fof( mergeA3651, axiom,
	p__d__subclass(c__SaturationAttribute,c__InternalAttribute)
).



% ($documentation SaturationAttribute EnglishLanguage "A &%Class of &%Attributes that specify, in 
% a qualitative manner, the extent of the presence of one kind of &%Object in 
% another kind of &%Object.")


fof( mergeA3652, axiom,
	p__d__instance(c__Dry,c__SaturationAttribute)
).


fof( mergeA3653, axiom,
	p__contraryAttribute2(c__Dry,c__Damp)
).



% ($documentation Dry EnglishLanguage "An &%Attribute which indicates that the associated 
% &%Object contains no &%Liquid.")


fof( mergeA3654, axiom,
	(![OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__attribute(OBJ,c__Dry)
					)
				)
			)
			=>
			(
				(![SUBOBJ]: 
					(
						(
							~ (
								p__d__instance(SUBOBJ,c__Object)
							)
						 |
							~ (
								p__part(SUBOBJ,OBJ)
							)
						 |
							~ (
								p__attribute(SUBOBJ,c__Liquid)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3655, axiom,
	p__d__instance(c__Damp,c__SaturationAttribute)
).



% ($documentation Damp EnglishLanguage "An &%Attribute which indicates that the associated 
% &%Object contains some &%Liquid.")


fof( mergeA3656, axiom,
	p__d__instance(c__Wet,c__SaturationAttribute)
).


fof( mergeA3657, axiom,
	p__subAttribute(c__Wet,c__Damp)
).



% ($documentation Wet EnglishLanguage "An &%Attribute which indicates that the 
% associated &%Object is fully saturated with a &%Liquid, i.e. 
% every part of the &%Object has a subpart which is a &%Liquid.")


fof( mergeA3658, axiom,
	(![OBJ,PART]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				 &
					(
						p__attribute(OBJ,c__Wet)
					)
				 &
					(
						p__part(PART,OBJ)
					)
				)
			)
			=>
			(
				(?[SUBPART]: 
					(
						(
							(
								p__d__instance(SUBPART,c__Object)
							)
						 &
							(
								p__part(SUBPART,PART)
							)
						 &
							(
								p__attribute(SUBPART,c__Liquid)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3659, axiom,
	p__d__subclass(c__BiologicalAttribute,c__InternalAttribute)
).



% ($documentation BiologicalAttribute EnglishLanguage "&%Attributes that apply specifically 
% to instances of &%Organism.")


% ($comment 
% ;; NS: delete.  Many current instances of BiologicalAttribute apply
% ;; to OrganicObjects that are not Organisms.
% ;; (=>
% ;;     (and
% ;;         (attribute ?ORG ?ATT)
% ;;         ($instance ?ATT BiologicalAttribute))
% ;;     ($instance ?ORG Organism))
% ;;
% ;; NS: add.
% )

fof( mergeA3660, axiom,
	(![ATT,ORG]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__Object)
					)
				 &
					(
						p__attribute(ORG,ATT)
					)
				 &
					(
						p__d__instance(ATT,c__BiologicalAttribute)
					)
				)
			)
			=>
			(
				p__d__instance(ORG,c__OrganicObject)
			)
		)
	)
).


fof( mergeA3661, axiom,
	p__d__subclass(c__BodyPosition,c__BiologicalAttribute)
).



% ($documentation BodyPosition EnglishLanguage "The class of &%Attributes expressing 
% configurations of bodies or parts of bodies of animals or humans, 
% e.g. standing, sitting, kneeling, lying down, etc.")


fof( mergeA3662, axiom,
	(![ANIMAL]: 
		(
			(
				p__d__instance(ANIMAL,c__Animal)
			)
			=>
			(
				(
					(?[MOTION]: 
						(
							(
								(
									p__d__instance(MOTION,c__BodyMotion)
								)
							 &
								(
									p__agent(MOTION,ANIMAL)
								)
							)
						)
					)
				 |
					(?[ATTR]: 
						(
							(
								(
									p__d__instance(ATTR,c__BodyPosition)
								)
							 &
								(
									p__attribute(ANIMAL,ATTR)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3663, axiom,
	p__d__instance(c__Standing,c__BodyPosition)
).



% ($documentation Standing EnglishLanguage "The &%BodyPosition of being upright, i.e. being 
% fully extended and supported by nothing other than one's own feet.")


fof( mergeA3664, axiom,
	(![AMBULATE,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(AMBULATE,c__Ambulating)
					)
				 &
					(
						p__agent(AMBULATE,AGENT)
					)
				)
			)
			=>
			(
				p__attribute(AGENT,c__Standing)
			)
		)
	)
).


fof( mergeA3665, axiom,
	p__d__instance(c__Sitting,c__BodyPosition)
).



% ($documentation Sitting EnglishLanguage "The &%BodyPosition of being recumbent, i.e. 
% knees bent and back side supported.")


fof( mergeA3666, axiom,
	p__d__instance(c__Prostrate,c__BodyPosition)
).



% ($documentation Prostrate EnglishLanguage "The &%BodyPosition of lying down, being in a 
% horizontal position.")


fof( mergeA3667, axiom,
	p__d__subclass(c__AnimacyAttribute,c__BiologicalAttribute)
).


% 	(exhaustiveAttribute AnimacyAttribute @(Living,Dead))


% ($documentation AnimacyAttribute EnglishLanguage "&%Attributes that indicate whether an 
% &%Organism is alive or not.")


fof( mergeA3669, axiom,
	p__d__instance(c__Living,c__AnimacyAttribute)
).



% ($documentation Living EnglishLanguage "This &%Attribute applies to &%Organisms that are 
% alive.")


% 	(forall (?PROCESS ?ORGANISM)
% 		(=> 
% 			(and 
% 				($instance ?ORGANISM Organism)
% 				(agent ?PROCESS ?ORGANISM)
% 			)
% 			(holdsDuring (WhenFn ?PROCESS) (attribute ?ORGANISM Living))
% 		)
% 	)

fof( mergeA3671, axiom,
	p__d__instance(c__Dead,c__AnimacyAttribute)
).


% ($comment 
% ;; JA: removed in AdimenSUMO 2.4
% ;; (subAttribute Dead Unconscious)
% )

fof( mergeA3672, axiom,
	p__contraryAttribute2(c__Dead,c__Living)
).



% ($documentation Dead EnglishLanguage "This &%Attribute applies to &%Organisms that are 
% not alive.")


fof( mergeA3673, axiom,
	(![ORG]: 
		(
			(
				p__d__instance(ORG,c__Object)
			)
			=>
			(
				(
					p__d__instance(ORG,c__Organism)
				)
				<=>
				(
					(?[ATTR]: 
						(
							(
								(
									p__d__instance(ATTR,c__AnimacyAttribute)
								)
							 &
								(
									p__attribute(ORG,ATTR)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3674, axiom,
	p__d__subclass(c__SexAttribute,c__BiologicalAttribute)
).


% 	(exhaustiveAttribute SexAttribute @(Female,Male))


% ($documentation SexAttribute EnglishLanguage "&%Attributes that indicate the sex of an 
% &%Organism.")


fof( mergeA3676, axiom,
	p__d__instance(c__Female,c__SexAttribute)
).



% ($documentation Female EnglishLanguage "An &%Attribute indicating that an &%Organism is 
% female in nature.")


fof( mergeA3677, axiom,
	(![BODY,ORG]: 
		(
			(
				(
					(
						p__d__instance(BODY,c__ReproductiveBody)
					)
				 &
					(
						p__part(BODY,ORG)
					)
				 &
					(
						p__d__instance(ORG,c__Organism)
					)
				)
			)
			=>
			(
				p__attribute(ORG,c__Female)
			)
		)
	)
).


fof( mergeA3678, axiom,
	p__d__instance(c__Male,c__SexAttribute)
).


fof( mergeA3679, axiom,
	p__contraryAttribute2(c__Male,c__Female)
).



% ($documentation Male EnglishLanguage "An &%Attribute indicating that an &%Organism is 
% male in nature.")


fof( mergeA3680, axiom,
	(![ANIMAL]: 
		(
			(
				p__d__instance(ANIMAL,c__Animal)
			)
			=>
			(
				(?[ATTR]: 
					(
						(
							(
								p__d__instance(ATTR,c__SexAttribute)
							)
						 &
							(
								p__attribute(ANIMAL,ATTR)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3681, axiom,
	p__d__subclass(c__DevelopmentalAttribute,c__BiologicalAttribute)
).


% 	(exhaustiveAttribute DevelopmentalAttribute @(FullyFormed,NonFullyFormed))


% ($documentation DevelopmentalAttribute EnglishLanguage "&%Attributes that indicate the 
% stage of development of an &%Organism.")


fof( mergeA3683, axiom,
	p__d__instance(c__FullyFormed,c__DevelopmentalAttribute)
).



% ($documentation FullyFormed EnglishLanguage "The stage of an &%Organism when it has reached 
% the end of its growth phase.")


% 	(forall (?OBJ)
% 		(=> 
% 			(attribute ?OBJ FullyFormed)
% 			(exists (?GROWTH)
% 				(and 
% 					($instance ?GROWTH Growth)
% 					(experiencer ?GROWTH ?OBJ)
% 					(holdsDuring (BeginFn (WhenFn ?OBJ)) (attribute ?OBJ NonFullyFormed))
% 				)
% 			)
% 		)
% 	)

fof( mergeA3685, axiom,
	p__d__instance(c__NonFullyFormed,c__DevelopmentalAttribute)
).


fof( mergeA3686, axiom,
	p__contraryAttribute2(c__NonFullyFormed,c__FullyFormed)
).


fof( mergeA3687, axiom,
	p__successorAttribute(c__NonFullyFormed,c__FullyFormed)
).



% ($documentation NonFullyFormed EnglishLanguage "The stage of an &%Organism before it is 
% &%FullyFormed.")


fof( mergeA3688, axiom,
	(![ORG]: 
		(
			(
				p__d__instance(ORG,c__Organism)
			)
			=>
			(
				(?[ATTR]: 
					(
						(
							(
								p__d__instance(ATTR,c__DevelopmentalAttribute)
							)
						 &
							(
								p__attribute(ORG,ATTR)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3689, axiom,
	p__subAttribute(c__Larval,c__NonFullyFormed)
).



% ($documentation Larval EnglishLanguage "Form of most &%Invertebrates, &%Amphibians, and 
% &%Fish immediately after they hatch.  This form is fundamentally unlike 
% the adult form, and metamorphosis is required to reach the latter form.") 


% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;    (holdsDuring ?TIME (attribute ?ORG Larval))
% ;;    (holdsDuring 
% ;;      (PastFn ?TIME) 
% ;;        (exists (?BIRTH) 
% ;;          (and 
% ;;            ($instance ?BIRTH Birth) 
% ;;            (experiencer ?BIRTH ?ORG)))))
% ;;
% ;; NS: add.
% )

% 	(forall (?BIRTH ?ORG ?BW ?TIME)
% 		(=> 
% 			(and 
% 				(holdsDuring ?TIME (attribute ?ORG Larval))
% 				($instance ?BIRTH Birth)
% 				(equal ?BW (WhenFn ?BIRTH))
% 				(experiencer ?BIRTH ?ORG)
% 			)
% 			(meetsTemporally ?BW ?TIME)
% 		)
% 	)

fof( mergeA3691, axiom,
	p__subAttribute(c__Embryonic,c__NonFullyFormed)
).


fof( mergeA3692, axiom,
	p__contraryAttribute2(c__Embryonic,c__Larval)
).



% ($documentation Embryonic EnglishLanguage "The stage of an &%Organism or an 
% &%AnatomicalStructure that exists only before the &%Organism is born.  
% &%Mammals, for example, have this &%Attribute only prior to 
% their birth.")


fof( mergeA3693, axiom,
	(![ORG]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__Object)
					)
				 &
					(
						p__attribute(ORG,c__Embryonic)
					)
				)
			)
			=>
			(
				(?[BODY]: 
					(
						(
							(
								p__d__instance(BODY,c__ReproductiveBody)
							)
						 &
							(
								p__located(ORG,BODY)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NS: delete.  It's best not to put either (exists ... or (not
% ;; (exists ... inside the scope of holdsDuring.
% ;; (=>
% ;;    (holdsDuring ?TIME (attribute ?ORG Embryonic))
% ;;    (holdsDuring ?TIME (not (exists (?BIRTH) (and ($instance ?BIRTH Birth) (experiencer ?BIRTH ?ORG))))))
% ;;
% ;; NS: add.
% )

% 	(forall (?BIRTH ?ORG ?TIME ?BW)
% 		(=> 
% 			(and 
% 				(holdsDuring ?TIME (attribute ?ORG Embryonic))
% 				($instance ?BIRTH Birth)
% 				(equal ?BW (WhenFn ?BIRTH))
% 				(experiencer ?BIRTH ?ORG)
% 			)
% 			(not 
% 				(overlapsTemporally ?TIME ?BW)
% 			)
% 		)
% 	)

fof( mergeA3695, axiom,
	p__d__subclass(c__DiseaseOrSyndrome,c__BiologicalAttribute)
).



% ($documentation DiseaseOrSyndrome EnglishLanguage "A &%BiologicalAttribute which qualifies 
% something that alters or interferes with a normal process, state or activity 
% of an &%Organism.  It is usually characterized by the abnormal functioning of 
% one or more of the host's systems, parts, or &%Organs.")


% ($comment 
% ;; NS: If we wanted to ascribe PsychologicalAttributes
% ;; to a non-OrganicObject robot or an AI, this
% ;; statement would have to be changed.
% )

fof( mergeA3696, axiom,
	p__d__subclass(c__PsychologicalAttribute,c__BiologicalAttribute)
).


fof( mergeA3697, axiom,
	p__d__partition3(c__PsychologicalAttribute,c__StateOfMind,c__TraitAttribute)
).



% ($documentation PsychologicalAttribute EnglishLanguage "&%Attributes
% that characterize the mental or behavioral life of an &%Organism.")


% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;    ($instance ?ATTR PsychologicalAttribute)
% ;;    (=>
% ;;       (holdsDuring ?TIME (attribute ?ORGANISM ?ATTR))
% ;;       (holdsDuring ?TIME (attribute ?ORGANISM Living))))
% ;;
% ;; NS: add.
% )

% 	(forall (?ATTR ?TIME ?ORGANISM)
% 		(=> 
% 			($instance ?ATTR PsychologicalAttribute)
% 			(=> 
% 				(and 
% 					(holdsDuring ?TIME (attribute ?ORGANISM ?ATTR))
% 					($instance ?ORGANISM Organism)
% 				)
% 				(holdsDuring ?TIME (attribute ?ORGANISM Living))
% 			)
% 		)
% 	)

fof( mergeA3699, axiom,
	(![ATTR,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Object)
					)
				 &
					(
						p__d__instance(ATTR,c__PsychologicalAttribute)
					)
				 &
					(
						p__attribute(AGENT,ATTR)
					)
				)
			)
			=>
			(
				p__d__instance(AGENT,c__SentientAgent)
			)
		)
	)
).


fof( mergeA3700, axiom,
	p__d__subclass(c__StateOfMind,c__PsychologicalAttribute)
).



% ($documentation StateOfMind EnglishLanguage  "The class &%StateOfMind is distinguished from 
% its complement &%TraitAttribute by the fact that instances of the former are 
% transient while instances of the latter are persistent features of a creature's behavioral/psychological make-up.")


fof( mergeA3701, axiom,
	p__d__subclass(c__EmotionalState,c__StateOfMind)
).



% ($documentation EmotionalState EnglishLanguage "The &%Class of &%Attributes that denote emotional 
% states of &%Organisms.")


fof( mergeA3702, axiom,
	p__d__subclass(c__ConsciousnessAttribute,c__StateOfMind)
).



% ($documentation ConsciousnessAttribute EnglishLanguage "&%Attributes that indicate whether 
% an &%Organism is conscious or the qualitative degree of consciousness of 
% an &%Organism.")


fof( mergeA3703, axiom,
	(![AGENT]: 
		(
			(
				p__d__instance(AGENT,c__Object)
			)
			=>
			(
				(
					(
						(
							p__d__instance(AGENT,c__SentientAgent)
						)
					 &
						(
							p__attribute(AGENT,c__Living)
						)
					)
				)
				<=>
				(
					(?[ATTR]: 
						(
							(
								(
									p__d__instance(ATTR,c__ConsciousnessAttribute)
								)
							 &
								(
									p__attribute(AGENT,ATTR)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( mergeA3704, axiom,
	p__d__instance(c__Asleep,c__ConsciousnessAttribute)
).



% ($documentation Asleep EnglishLanguage "&%Attribute that applies to &%Organisms that are 
% sleeping.")


fof( mergeA3705, axiom,
	p__d__instance(c__Unconscious,c__ConsciousnessAttribute)
).


fof( mergeA3706, axiom,
	p__contraryAttribute2(c__Unconscious,c__Awake)
).



% ($documentation Unconscious EnglishLanguage "&%Attribute that applies to &%Organisms that 
% are unconscious.  An &%Organism may be &%Unconscious because it is &%Dead 
% or because of a blow to the head, a drug, etc.")


fof( mergeA3707, axiom,
	p__d__instance(c__Awake,c__ConsciousnessAttribute)
).



% ($documentation Awake EnglishLanguage "&%Attribute that applies to &%Organisms that are 
% neither &%Unconscious nor &%Asleep.")


fof( mergeA3708, axiom,
	(![AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Object)
					)
				 &
					(
						(
							p__attribute(AGENT,c__Asleep)
						 |
							p__attribute(AGENT,c__Awake)
						)
					)
				)
			)
			=>
			(
				p__attribute(AGENT,c__Living)
			)
		)
	)
).


fof( mergeA3709, axiom,
	p__d__subclass(c__TraitAttribute,c__PsychologicalAttribute)
).



% ($documentation TraitAttribute EnglishLanguage "&%Attributes that indicate the the 
% behavior/personality traits of an &%Organism.")


fof( mergeA3710, axiom,
	p__d__subclass(c__PsychologicalDysfunction,c__PsychologicalAttribute)
).


fof( mergeA3711, axiom,
	p__d__subclass(c__PsychologicalDysfunction,c__DiseaseOrSyndrome)
).



% ($documentation PsychologicalDysfunction EnglishLanguage "A clinically significant 
% dysfunction whose major manifestation is behavioral or psychological.  
% These dysfunctions may have identified or presumed biological etiologies 
% or manifestations.")


fof( mergeA3712, axiom,
	p__d__instance(c__comment,c__TernaryPredicate)
).



% ($documentation comment EnglishLanguage "(&%comment ?ENT ?STR ?PER) is a convenience 
% relationship that allows ontologists represented by &%SymbolicString ?PER to write
% down commentaries ?STR on a defined &%Entity ?ENT")


% (termFormat EnglishLanguage comment "comment")

% 	($domain comment 1 Entity)

% 	($domain comment 2 SymbolicString)

% 	($domain comment 3 SymbolicString)

% ($comment 
% ;; END FILE
% )

% ($comment 
% ;; BEGIN FILE
% ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
% ;;    Sequestered Axioms    ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
% ;;
% ;;  This section is not a subontology of the SUMO.  It contains axioms from 
% ;;  other sections of the ontology that may cause problems for an inference 
% ;;  engine.  In particular, they can be used to construct arbitrarily complex 
% ;;  terms that often appear in proofs with unhelpful conclusions.  Before this 
% ;;  file is loaded into the inference engine, the axioms in this section should 
% ;;  be commented out.
% ;;
% ;;  (<=> 
% ;;     ($instance ?ENTITY (UnionFn ?CLASS1 ?CLASS2))
% ;;     (or 
% ;;        ($instance ?ENTITY ?CLASS1)
% ;;        ($instance ?ENTITY ?CLASS2)))
% ;;
% ;;  (<=> 
% ;;     ($instance ?ENTITY (IntersectionFn ?CLASS1 ?CLASS2))
% ;;     (and 
% ;;        ($instance ?ENTITY ?CLASS1)
% ;;        ($instance ?ENTITY ?CLASS2)))
% ;;
% ;;  (<=> 
% ;;     ($instance ?ENTITY (ComplementFn ?CLASS))
% ;;     (not 
% ;;        ($instance ?ENTITY ?CLASS)))
% ;;
% ;;  (=>
% ;;     (and
% ;;        ($instance ?CLASS1 SetOrClass)
% ;;        ($instance ?CLASS2 SetOrClass))
% ;;     (equal (RelativeComplementFn ?CLASS1 ?CLASS2) (IntersectionFn ?CLASS1 (ComplementFn ?CLASS2))))
% ;;
% ;;  (<=> 
% ;;     ($instance ?ENTITY (GeneralizedUnionFn ?SUPERCLASS))
% ;;     (exists (?CLASS)
% ;;        (and
% ;;           ($instance ?CLASS ?SUPERCLASS)
% ;;           ($instance ?ENTITY ?CLASS))))
% ;;
% ;;  (<=> 
% ;;     ($instance ?ENTITY (GeneralizedIntersectionFn ?SUPERCLASS))
% ;;     (forall (?CLASS)
% ;;           (=>
% ;;              ($instance ?CLASS ?SUPERCLASS)
% ;;              ($instance ?ENTITY ?CLASS))))
% ;;
% ;;  (<=>
% ;;     ($instance ?SUBCLASS (PowerSetFn ?CLASS))
% ;;     ($subclass ?SUBCLASS ?CLASS))
% ;;
% ;; (=>
% ;;   ($instance ?REL Function)
% ;;   (<=>
% ;;     (equal (AssignmentFn ?REL @ROW) ?INST)
% ;;     (?REL @ROW ?INST)))
% ;;
% ;; NS: sequestered 2007-08-01
% ;; (<=>
% ;;    ($instance ?REL BinaryRelation)
% ;;    (not
% ;;       (exists (?ITEM1 ?ITEM2 ?ITEM3 @ROW)
% ;;          (?REL ?ITEM1 ?ITEM2 ?ITEM3 @ROW))))
% ;;
% ;; NS: sequestered 2007-08-01
% ;; (=>
% ;;    ($instance ?REL TernaryRelation)
% ;;    (not
% ;;       (exists (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 @ROW)
% ;;          (?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 @ROW))))
% ;;
% ;; NS: sequestered 2007-08-01
% ;; (=>
% ;;    ($instance ?REL QuaternaryRelation)
% ;;    (not
% ;;       (exists (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 @ROW)
% ;;          (?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 @ROW))))
% ;;
% ;; NS: sequestered 2007-08-01
% ;; (=>
% ;;    ($instance ?REL QuintaryRelation)
% ;;    (not
% ;;       (exists (?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 @ROW)
% ;;          (?REL ?ITEM1 ?ITEM2 ?ITEM3 ?ITEM4 ?ITEM5 ?ITEM6 @ROW))))
% )
% ($comment 
% ;; ==============================
% ;;      MILO (Mid-Level Ontology)
% ;; ==============================
% ;;
% ;; This is the source file for the MILO (MId-Level Ontology), an ontology that 
% ;; is being developed as a bridge between the abstract content of the SUMO and 
% ;; the rich detail of the various domain ontologies.    
% ;; Those who are interested in making use of this ontology are urged 
% ;; to contact Adam Pease (apease [at] articulatesoftware [dot] com).
% ;;
% ;; The MILO (MId-Level Ontology) is copyrighted by Teknowledge (c) 
% ;; 2003 and Articulate Software 2004-2007.  It is released under the GNU Public License 
% ;; <http://www.gnu.org/copyleft/gpl.html>.  Users of this code also consent, by 
% ;; use of this material, to credit Teknowledge and Articulate Software
% ;; in any writings, briefings, 
% ;; publications, presentations, or other representations of any code or other 
% ;; product which incorporates, builds on, or uses this material. 
% ;;
% ;; We ask that people using or referencing this work cite our primary paper:
% ;;
% ;; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In 
% ;; Proceedings of the 2nd International Conference on Formal Ontology in 
% ;; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds, 
% ;; Ogunquit, Maine, October 17-19, 2001.  See also http://www.ontologyportal.org
% ;;
% ;; NS: delete.
% ;; [1]
% ;; ($subclass HumanCorpse OrganicObject)
% ;;
% ;; NS: delete.
% ;; [2]
% ;; (documentation HumanCorpse EnglishLanguage "A &%Dead thing which was
% ;; formerly a &%Human.")
% ;;
% ;; NS: delete.
% ;; [3]
% ;; (=>
% ;;   ($instance ?CORPSE HumanCorpse)
% ;;   (exists (?HUMAN)
% ;;     (and
% ;;       ($instance ?HUMAN Human)
% ;;       (before (WhenFn ?HUMAN) (WhenFn ?CORPSE))
% ;;       (not
% ;;         (exists (?OTHERPART)
% ;;           (and
% ;;             (holdsDuring
% ;;               (WhenFn ?CORPSE)
% ;;               (part ?OTHERPART ?CORPSE))
% ;;             (not
% ;;               (holdsDuring 
% ;;                 (WhenFn ?HUMAN) 
% ;;                 (part ?OTHERPART ?HUMAN)))))))))
% ;;
% ;; NS: delete.
% ;; [4]
% ;; (=>
% ;;   ($instance ?CORPSE HumanCorpse)
% ;;   (attribute ?CORPSE Dead))
% ;;
% ;; NS: The KR above is inadequate for several reasons: (1)
% ;; It completely fails to generalize, saying nothing about
% ;; the remains of organisms other than humans, or remains
% ;; that are not partonomically identical to the original
% ;; living organism; (2) Rule [3] is malformed, because
% ;; &%before must be used with TimePoints, not TimeIntervals;
% ;; and (3) Axioms that apply the attributes &%Living and
% ;; &%Dead to &%Organism and &%HumanCorpse probably result in
% ;; unintended conclusions.  Consider rule [4], above, in
% ;; conjuction with rules [5] and [6], below, both of which
% ;; appear in Merge.kif:
% ;;
% ;; [5] From Merge.kif.  Already changed there to prevent
% ;; concluding that Organisms can be Dead.
% ;; (=>
% ;;   (and
% ;;     ($instance ?DEATH Death)
% ;;     (experiencer ?DEATH ?AGENT))
% ;;   (holdsDuring
% ;;     (FutureFn
% ;;       (WhenFn ?DEATH))
% ;;         (attribute ?AGENT Dead)))
% ;;
% ;; [6] From Merge.kif.  Already changed there, broadening
% ;; the consequent to ($instance ?ORG OrganicObject).
% ;; (=>
% ;;     (and
% ;;         (attribute ?ORG ?ATT)
% ;;         ($instance ?ATT BiologicalAttribute))
% ;;     ($instance ?ORG Organism))
% ;; 
% ;;
% ;; [6.1] From Merge.kif
% ;; (=>
% ;;     (and
% ;;         ($instance ?PATH PathologicProcess)
% ;;         (experiencer ?PATH ?ORG))
% ;;     (exists (?PART ?DISEASE)
% ;;         (and
% ;;             (part ?PART ?ORG)
% ;;             ($instance ?DISEASE DiseaseOrSyndrome)
% ;;             (attribute ?PART ?DISEASE))))
% ;;
% ;; [6] and [6.1] together entail the conclusion that every
% ;; skolemized part of an Organism that is affected by a
% ;; skolemized disease is also, itself, an instance of
% ;; Organism (since DiseaseOrSyndrome is a subclass of
% ;; BiologicalAttribute).
% ;;
% ;; TO DO: 
% ;;
% ;; 1. Delete axioms [1] - [4], above, which already are
% ;;    commented out.
% ;; 
% ;; 2. In Merge.kif, delete [6] and replace it with the
% ;;    following:  (already done.)
% ;;
% ;;      (=>
% ;;        (and
% ;;          ($instance ?ATT BiologicalAttribute)
% ;;          (holdsDuring ?T1 (attribute ?ORG ?ATT)))
% ;;        ($instance ?ORG OrganicObject))
% ;;
% ;; 3. In Merge.kif, rewrite [5] to avoid concluding that
% ;;    Organisms can be Dead.  (already done.)
% ;;
% ;; 4. Apparently, the intent of rule [3], above, is to
% ;;    represent the state of most &%Dead &%Humans in a
% ;;    rather short time interval following death, when the
% ;;    body is still an intact, integral whole, and
% ;;    embalming, cremation, mummification, or burial have
% ;;    not yet occurred.  Add the section below, which tries
% ;;    to address the presumed intent of [1] - [4], but also
% ;;    tries to include human remains within a broader theory
% ;;    of "organism remains".
% ;;
% ;; Start: OrganismRemains
% ;;
% ;; NS: new.
% )

fof( miloA1, axiom,
	p__d__subclass(c__OrganismRemains,c__OrganicObject)
).



% ($documentation OrganismRemains EnglishLanguage "An
% &%instance of &%OrganismRemains is &%Dead matter of a
% formerly &%Living &%Organism: &%Plant, &%Animal, or
% &%Microorganism.  An &%instance of &%OrganismRemains might
% or might not be recognizable as the remains of a particular
% kind or species of organism, depending on the cause of the
% &%Organism's &%Death (heart failure, stroke, roadkill,
% dismemberment, etc.), the elapsed time since death, the
% speed of decomposition, and any post-mortem processing of
% the dead organism (embalming, cremation, mummification,
% boiling, consumption as food, etc.).")


% ($comment 
% ;; [7] All organism remains are dead.
% )

% 	(forall (?X)
% 		(=> 
% 			($instance ?X OrganismRemains)
% 			(holdsDuring (WhenFn ?X) (attribute ?X Dead))
% 		)
% 	)

% ($comment 
% ;; [8] The parts of organism remains were once parts of some
% ;; &%Organism.
% )

% 	(forall (?T2 ?REM ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?REM OrganismRemains)
% 				(holdsDuring ?T2 (part ?OBJ ?REM))
% 			)
% 			(exists (?ORG ?T1)
% 				(and 
% 					($instance ?ORG Organism)
% 					(earlier (WhenFn ?ORG) (WhenFn ?REM))
% 					($instance ?T1 TimeInterval)
% 					(finishes ?T1 (WhenFn ?ORG))
% 					(holdsDuring ?T1 (part ?OBJ ?ORG))
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; [8a] - [8d] refine [8] and the rule in Merge.kif that
% ;; defines the Death of Organisms.
% ;;
% ;; [8a] The organic result of an organism's death is an
% ;; instance of OrganismRemains.
% )

fof( miloA4, axiom,
	(![ORG,DEATH,REM]: 
		(
			(
				(
					(
						p__d__instance(REM,c__OrganicObject)
					)
				 &
					(
						p__d__instance(DEATH,c__Death)
					)
				 &
					(
						p__d__instance(ORG,c__Organism)
					)
				 &
					(
						p__experiencer(DEATH,ORG)
					)
				 &
					(
						p__result(DEATH,REM)
					)
				)
			)
			=>
			(
				p__d__instance(REM,c__OrganismRemains)
			)
		)
	)
).


% ($comment 
% ;; [8b]
% )

fof( miloA5, axiom,
	(![REM]: 
		(
			(
				p__d__instance(REM,c__OrganismRemains)
			)
			=>
			(
				(?[DEATH]: 
					(
						(
							(
								p__d__instance(DEATH,c__Death)
							)
						 &
							(
								p__result(DEATH,REM)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; [8c]
% )

% 	(forall (?OBJ ?T1 ?T2 ?REM ?DEATH ?ORG)
% 		(=> 
% 			(and 
% 				($instance ?DEATH Death)
% 				($instance ?REM OrganismRemains)
% 				($instance ?ORG Organism)
% 				(holdsDuring ?T2 (part ?OBJ ?REM))
% 				(holdsDuring ?T1 (part ?OBJ ?ORG))
% 				(earlier ?T1 ?T2)
% 				(result ?DEATH ?REM)
% 			)
% 			(experiencer ?DEATH ?ORG)
% 		)
% 	)

% ($comment 
% ;; [8d]
% )

% 	(forall (?OBJ ?T1 ?T2 ?ORG ?DEATH ?REM)
% 		(=> 
% 			(and 
% 				($instance ?DEATH Death)
% 				($instance ?REM OrganismRemains)
% 				($instance ?ORG Organism)
% 				(holdsDuring ?T2 (part ?OBJ ?REM))
% 				(holdsDuring ?T1 (part ?OBJ ?ORG))
% 				(earlier ?T1 ?T2)
% 				(experiencer ?DEATH ?ORG)
% 			)
% 			(result ?DEATH ?REM)
% 		)
% 	)

% ($comment 
% ;; [9] Every Organism is alive.
% )

% 	(forall (?ORG)
% 		(=> 
% 			($instance ?ORG Organism)
% 			(holdsDuring (WhenFn ?ORG) (attribute ?ORG Living))
% 		)
% 	)

fof( miloA9, axiom,
	p__d__subclass(c__HumanCorpse,c__OrganismRemains)
).



% ($documentation HumanCorpse EnglishLanguage "&%HumanCorpse is the &%OrganismRemains of
% a &%Human")


% 	(forall (?X)
% 		(=> 
% 			($instance ?X HumanCorpse)
% 			($instance ?X (DeadFn Human))
% 		)
% 	)

% ($comment 
% ;; NS: new.  Add DeadFn and [11], below.
% )

fof( miloA11, axiom,
	p__d__instance(c__DeadFn,c__UnaryFunction)
).


% 	($domainSubclass DeadFn 1 Organism)

% 	($rangeSubclass DeadFn OrganismRemains)


% ($documentation DeadFn EnglishLanguage "(&%DeadFn ?ORGCLASS)
% denotes the &%Class of all remains that were once part
% of &%Living &%Organisms of the type ?ORGCLASS.")


% ($comment 
% ;; [11]
% )

% 	(forall (?REM ?DEATH ?ORG ?ORGTYPE)
% 		(=> 
% 			(and 
% 				($instance ?REM (DeadFn ?ORGTYPE))
% 				($instance ?DEATH Death)
% 				(result ?DEATH ?REM)
% 				(experiencer ?DEATH ?ORG)
% 			)
% 			($instance ?ORG ?ORGTYPE)
% 		)
% 	)

% ($comment 
% ;; [12]
% )

% 	(forall (?ORG ?DEATH ?REM ?ORGTYPE)
% 		(=> 
% 			(and 
% 				($instance ?REM OrganicObject)
% 				($instance ?DEATH Death)
% 				(experiencer ?DEATH ?ORG)
% 				($instance ?ORG ?ORGTYPE)
% 				($subclass ?ORG Organism)
% 				(result ?DEATH ?REM)
% 			)
% 			($instance ?REM (DeadFn ?ORGTYPE))
% 		)
% 	)

% ($comment 
% ;; NS: The diagram below depicts the temporal relationships
% ;; between the main attributes and classes mentioned above,
% ;; as applied to one instance of Organism.  Before it is the
% ;; experiencer of its Death, an Organism X has the
% ;; BiologicalAttribute Living.  X's Death has as its result
% ;; a new instance of OrganismRemains, Y, which consists of
% ;; the same material (parts) as the previously existing
% ;; Organism X.
% ;;
% ;;                        Death
% ;;                  (experiencer = X)
% ;;                       (result = Y)
% ;;                          ^
% ;;                          |
% ;; |------- Living --------|-|------- Dead -------->
% ;;
% ;; |----- Organism X -------|-- OrganismRemains Y -->???|
% ;;
% ;; The distinction between "existing" as a chunk of more or
% ;; less organism-shaped matter and simply being Dead (having
% ;; experienced death), as well as the temporal aspects, make
% ;; this all seem excessively difficult, but alternatives
% ;; that make it possible to express the same distinctions of
% ;; meaning all seem about equally awkward.  In the approach
% ;; chosen here, Organism and OrganismRemains are conceived
% ;; as temporally disjoint.  It would be a mistake to apply
% ;; Dead to an instance of Organism for any time interval,
% ;; and a mistake to apply Living to an instance of
% ;; OrganismRemains for any time interval.  In other words,
% ;; in this approach there are no Dead Organisms, only Living
% ;; Organisms or Dead OrganismRemains.
% ;;
% ;; End: OrganismRemains
% )

fof( miloA16, axiom,
	p__d__instance(c__HumanSlave,c__SocialRole)
).



% ($documentation HumanSlave EnglishLanguage "A &%Human who is owned by someone else.")


% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;    (attribute ?SLAVE HumanSlave)
% ;;    (exists (?PERSON)
% ;;       (and
% ;;          ($instance ?PERSON Human)
% ;;          (not (equal ?PERSON ?SLAVE))
% ;;          (possesses ?PERSON ?SLAVE))))
% ;;
% ;; NS: add.
% )

% 	(forall (?TIME ?SLAVE)
% 		(=> 
% 			(holdsDuring ?TIME (attribute ?SLAVE HumanSlave))
% 			(exists (?PERSON)
% 				(and 
% 					($instance ?PERSON Human)
% 					(not 
% 						(equal ?PERSON ?SLAVE)
% 					)
% 					(holdsDuring ?TIME (possesses ?PERSON ?SLAVE))
% 				)
% 			)
% 		)
% 	)

fof( miloA18, axiom,
	p__d__subclass(c__HumanAdult,c__Human)
).


% ($comment 
% ;; NS: add.
% ;; this is very unprecise as the age to become a legal agent depends on country and purpose
% )

fof( miloA19, axiom,
	p__d__subclass(c__HumanAdult,c__LegalAgent)
).



% ($documentation HumanAdult EnglishLanguage "The class of
% &%Humans that are 18 years of age or older.")


% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;    (and
% ;;       ($instance ?ADULT HumanAdult)
% ;;       (age ?ADULT (MeasureFn ?NUMBER YearDuration)))
% ;;    (greaterThanOrEqualTo ?NUMBER 18))
% ;;
% ;; NS: add.
% )

% 	(forall (?TIME ?ADULT ?NUMBER)
% 		(=> 
% 			(holdsDuring ?TIME (and ([|] ($instance ?ADULT HumanAdult) ([|] (age ?ADULT (MeasureFn ?NUMBER YearDuration)) []))))
% 			(greaterThanOrEqualTo ?NUMBER 18)
% 		)
% 	)

% ($comment 
% ;; NS. add. An alternate formulation.
% )

% 	(forall (?TIME ?H)
% 		(=> 
% 			(holdsDuring ?TIME ($instance ?H HumanAdult))
% 			(exists (?AGE)
% 				(and 
% 					(holdsDuring ?TIME (age ?H ?AGE))
% 					($instance ?AGE (IntervalFn (MeasureFn 18 YearDuration) (MeasureFn 120 YearDuration)))
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; NS: add.
% )

% 	(forall (?N ?T1 ?H)
% 		(=> 
% 			(and 
% 				($instance ?H Human)
% 				(holdsDuring ?T1 (age ?H (MeasureFn ?N YearDuration)))
% 				(greaterThanOrEqualTo ?N 18)
% 			)
% 			(holdsDuring ?T1 ($instance ?H HumanAdult))
% 		)
% 	)

% ($comment 
% ;; NS: add.
% )

% 	(forall (?TIME ?ADULT)
% 		(=> 
% 			(holdsDuring ?TIME ($instance ?ADULT HumanAdult))
% 			(holdsDuring ?TIME (developmentalForm ?ADULT FullyFormed))
% 		)
% 	)

% ($comment 
% ;; NS: add.
% )

% 	(forall (?TIME ?ORG)
% 		(=> 
% 			(and 
% 				($instance ?ORG Human)
% 				(holdsDuring ?TIME (attribute ?ORG FullyFormed))
% 			)
% 			(holdsDuring ?TIME ($instance ?ORG HumanAdult))
% 		)
% 	)

% ($comment 
% ;; NS: add.  Missing from Merge.kif.  Narrow to
% ;; developmentalForm.
% )

% 	(forall (?TIME ?ORG ?ATTR)
% 		(=> 
% 			(and 
% 				($instance ?ORG OrganicObject)
% 				($instance ?ATTR DevelopmentalAttribute)
% 				(holdsDuring ?TIME (property ?ORG ?ATTR))
% 			)
% 			(holdsDuring ?TIME (developmentalForm ?ORG ?ATTR))
% 		)
% 	)

fof( miloA26, axiom,
	p__d__subclass(c__HumanYouth,c__Human)
).



% ($documentation HumanYouth EnglishLanguage "The class of &%Humans that are younger than 
% 18 years of age.")


% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;    (and
% ;;       ($instance ?YOUTH HumanYouth)
% ;;       (age ?YOUTH (MeasureFn ?NUMBER YearDuration)))
% ;;    (lessThan ?NUMBER 18))
% ;;
% ;; NS: add.
% )

% 	(forall (?TIME ?YOUTH ?NUMBER)
% 		(=> 
% 			(holdsDuring ?TIME (and ([|] ($instance ?YOUTH HumanYouth) ([|] (age ?YOUTH (MeasureFn ?NUMBER YearDuration)) []))))
% 			(lessThan ?NUMBER 18)
% 		)
% 	)

% ($comment 
% ;; NS. An alternate formulation.
% )

% 	(forall (?TIME ?H)
% 		(=> 
% 			(holdsDuring ?TIME ($instance ?H HumanYouth))
% 			(exists (?AGE)
% 				(and 
% 					(holdsDuring ?TIME (age ?H ?AGE))
% 					($instance ?AGE (IntervalFn (MeasureFn 0 YearDuration) (MeasureFn 17 YearDuration)))
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; NS: add.
% )

% 	(forall (?N ?T1 ?H)
% 		(=> 
% 			(and 
% 				($instance ?H Human)
% 				(holdsDuring ?T1 (age ?H (MeasureFn ?N YearDuration)))
% 				(lessThan ?N 18)
% 			)
% 			(holdsDuring ?T1 ($instance ?H HumanYouth))
% 		)
% 	)

fof( miloA30, axiom,
	p__d__subclass(c__HumanChild,c__HumanYouth)
).



% ($documentation HumanChild EnglishLanguage "A &%HumanYouth between birth and puberty, i.e a 
% &%Human who is &%NonFullyFormed.")


% ($comment 
% ;; NS: edit.
% )

% 	(forall (?TIME ?CHILD)
% 		(=> 
% 			(holdsDuring ?TIME ($instance ?CHILD HumanChild))
% 			(holdsDuring ?TIME (developmentalForm ?CHILD NonFullyFormed))
% 		)
% 	)

% ($comment 
% ;; NS: add.  Narrowing from Human.
% )

% 	(forall (?TIME ?CHILD)
% 		(=> 
% 			(and 
% 				($instance ?CHILD Human)
% 				(holdsDuring ?TIME (attribute ?CHILD NonFullyFormed))
% 			)
% 			(holdsDuring ?TIME ($instance ?CHILD HumanYouth))
% 		)
% 	)

% ($comment 
% ;; NS: edit.
% )

% 	(forall (?TIME ?CHILD ?NUMBER)
% 		(=> 
% 			(holdsDuring ?TIME (and ([|] ($instance ?CHILD HumanChild) ([|] (age ?CHILD (MeasureFn ?NUMBER YearDuration)) []))))
% 			(lessThanOrEqualTo ?NUMBER 14)
% 		)
% 	)

% ($comment 
% ;; NS: add. An alternate formulation.
% )

% 	(forall (?TIME ?H)
% 		(=> 
% 			(holdsDuring ?TIME ($instance ?H HumanChild))
% 			(exists (?AGE)
% 				(and 
% 					(holdsDuring ?TIME (age ?H ?AGE))
% 					($instance ?AGE (IntervalFn (MeasureFn 0 YearDuration) (MeasureFn 14 YearDuration)))
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; NS: add.
% )

% 	(forall (?N ?T1 ?H)
% 		(=> 
% 			(and 
% 				($instance ?H Human)
% 				(holdsDuring ?T1 (age ?H (MeasureFn ?N YearDuration)))
% 				(lessThanOrEqualTo ?N 14)
% 			)
% 			(holdsDuring ?T1 ($instance ?H HumanChild))
% 		)
% 	)

% ($comment 
% ;; NS: edit.
% )

fof( miloA36, axiom,
	p__d__subclass(c__Teenager,c__Human)
).



% ($documentation Teenager EnglishLanguage "A &%Human between puberty and the age of 20.")


% 	(forall (?TIME ?TEEN ?NUMBER)
% 		(=> 
% 			(holdsDuring ?TIME (and ([|] ($instance ?TEEN Teenager) ([|] (age ?TEEN (MeasureFn ?NUMBER YearDuration)) []))))
% 			(and 
% 				(greaterThan ?NUMBER 12)
% 				(lessThan ?NUMBER 20)
% 			)
% 		)
% 	)

% ($comment 
% ;; NS: add.  An alternate formulation.
% )

% 	(forall (?TIME ?H)
% 		(=> 
% 			(holdsDuring ?TIME ($instance ?H Teenager))
% 			(exists (?AGE)
% 				(and 
% 					(holdsDuring ?TIME (age ?H ?AGE))
% 					($instance ?AGE (IntervalFn (MeasureFn 13 YearDuration) (MeasureFn 19 YearDuration)))
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; NS: add.
% )

% 	(forall (?N ?T1 ?H)
% 		(=> 
% 			(and 
% 				($instance ?H Human)
% 				(holdsDuring ?T1 (age ?H (MeasureFn ?N YearDuration)))
% 				(greaterThan ?N 12)
% 				(lessThan ?N 20)
% 			)
% 			(holdsDuring ?T1 ($instance ?H Teenager))
% 		)
% 	)

fof( miloA40, axiom,
	p__d__subclass(c__Boy,c__HumanChild)
).


fof( miloA41, axiom,
	p__d__subclass(c__Boy,c__Man)
).



% ($documentation Boy EnglishLanguage "A &%HumanChild who is &%Male.")


% ($comment 
% ;; NS: add.
% )

% 	(forall (?T1 ?H)
% 		(=> 
% 			(holdsDuring ?T1 (and ([|] ($instance ?H HumanChild) ([|] (attribute ?H Male) []))))
% 			(holdsDuring ?T1 ($instance ?H Boy))
% 		)
% 	)

fof( miloA43, axiom,
	p__d__subclass(c__Girl,c__HumanChild)
).


fof( miloA44, axiom,
	p__d__subclass(c__Girl,c__Woman)
).



% ($documentation Girl EnglishLanguage "A &%HumanChild who is &%Female.")


% ($comment 
% ;; NS: add.
% )

% 	(forall (?T1 ?H)
% 		(=> 
% 			(holdsDuring ?T1 (and ([|] ($instance ?H HumanChild) ([|] (attribute ?H Female) []))))
% 			(holdsDuring ?T1 ($instance ?H Girl))
% 		)
% 	)

fof( miloA46, axiom,
	p__d__subclass(c__HumanBaby,c__HumanChild)
).



% ($documentation HumanBaby EnglishLanguage "A &%Human between birth and the first year of age.")


% ($comment 
% ;; NS: edit.
% )

% 	(forall (?TIME ?BABY ?NUMBER)
% 		(=> 
% 			(holdsDuring ?TIME (and ([|] ($instance ?BABY HumanBaby) ([|] (age ?BABY (MeasureFn ?NUMBER YearDuration)) []))))
% 			(lessThanOrEqualTo ?NUMBER 1)
% 		)
% 	)

% ($comment 
% ;; NS: add.  An alternate formulation.  Constructing a query
% ;; to ask for the age of ?BABY is awkward with both
% ;; formulations, and probably won't give the
% ;; desired/expected answer.
% )

% 	(forall (?TIME ?BABY)
% 		(=> 
% 			(holdsDuring ?TIME ($instance ?BABY HumanBaby))
% 			(exists (?AGE)
% 				(and 
% 					(holdsDuring ?TIME (age ?BABY ?AGE))
% 					($instance ?AGE (IntervalFn (MeasureFn 0 YearDuration) (MeasureFn 1 YearDuration)))
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; NS: Note that ?BABY, above, will also inherit less restrictive
% ;; numeric age constraints from HumanChild and HumanYouth.  How
% ;; this will work out in inference depends on the inference
% ;; algorithm (presumably resolution), type of query (variable
% ;; binding or true/false), number of answers requested, and time
% ;; allowed for the inference engine to run.
% ;;
% ;; NS: add.
% )

% 	(forall (?N ?T1 ?H)
% 		(=> 
% 			(and 
% 				($instance ?H Human)
% 				(holdsDuring ?T1 (age ?H (MeasureFn ?N YearDuration)))
% 				(lessThanOrEqualTo ?N 1)
% 			)
% 			(holdsDuring ?T1 ($instance ?H HumanBaby))
% 		)
% 	)


% ($documentation older EnglishLanguage "(older ?OBJ1 ?OBJ2) means that ?OBJ1 is older than 
% ?OBJ2, i.e. the age of ?OBJ1 is &%greaterThan the age of ?OBJ2.")


fof( miloA50, axiom,
	p__d__instance(c__older,c__BinaryPredicate)
).


% 	($domain older 1 Object)

% 	($domain older 2 Object)

% 	(forall (?O1 ?O2)
% 		(=> 
% 			(older ?O1 ?O2)
% 			(exists (?N1 ?N2 ?U)
% 				(and 
% 					(age ?O1 (MeasureFn ?N1 ?U))
% 					(age ?O2 (MeasureFn ?N2 ?U))
% 					(greaterThan ?N1 ?N2)
% 				)
% 			)
% 		)
% 	)


% ($documentation StartFn EnglishLanguage "(StartFn ?PROCESS) denotes &%IntentionalProcesses 
% of bringing it about that &%Processes of type ?PROCESS begin, e.g. start 
% working, begin running, etc.")


fof( miloA54, axiom,
	p__d__instance(c__StartFn,c__UnaryFunction)
).


% 	($domain StartFn 1 Process)

% 	($rangeSubclass StartFn IntentionalProcess)

% 	(forall (?P ?S)
% 		(=> 
% 			($instance ?S (StartFn ?P))
% 			(exists (?I)
% 				(and 
% 					($instance ?I ?P)
% 					(starts (WhenFn ?S) (WhenFn ?I))
% 				)
% 			)
% 		)
% 	)


% ($documentation StopFn EnglishLanguage "(StopFn ?PROCESS) denotes &%IntentionalProcesses 
% of bringing it about that &%Processes of type ?PROCESS end, e.g. stop 
% walking, quit working, etc.")


fof( miloA58, axiom,
	p__d__instance(c__StopFn,c__UnaryFunction)
).


% 	($domain StopFn 1 Process)

% 	($rangeSubclass StopFn IntentionalProcess)

% 	(forall (?P ?S)
% 		(=> 
% 			($instance ?S (StopFn ?P))
% 			(exists (?I)
% 				(and 
% 					($instance ?I ?P)
% 					(finishes (WhenFn ?S) (WhenFn ?I))
% 				)
% 			)
% 		)
% 	)

fof( miloA62, axiom,
	p__d__subclass(c__Dodging,c__BodyMotion)
).


fof( miloA63, axiom,
	p__d__subclass(c__Dodging,c__IntentionalProcess)
).



% ($documentation Dodging EnglishLanguage "Purposely moving one's body in such a way as 
% to avoid being hit by something.")


% ($comment 
% ;; NS: edited to temporally relate ?I to ?D.
% )

% 	(forall (?D ?DT ?I ?A)
% 		(=> 
% 			(and 
% 				($instance ?D Dodging)
% 				(agent ?D ?A)
% 				(equal ?DT (WhenFn ?D))
% 			)
% 			(hasPurpose ?D (not (exists ([|] ?I []) (and ([|] (or ([|] (meetsTemporally ?DT (WhenFn ?I)) ([|] (overlapsTemporally ?DT (WhenFn ?I)) []))) ([|] ($instance ?I Impacting) ([|] (patient ?I ?A) [])))))))
% 		)
% 	)

fof( miloA65, axiom,
	p__d__subclass(c__Mounting,c__BodyMotion)
).



% ($documentation Mounting EnglishLanguage "Any &%BodyMotion which results in being &%On 
% something else.")


% 	(forall (?M ?A ?O)
% 		(=> 
% 			(and 
% 				($instance ?M Mounting)
% 				(agent ?M ?A)
% 				(patient ?M ?O)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?M)) (not (orientation ?A ?O On)))
% 				(holdsDuring (EndFn (WhenFn ?M)) (orientation ?A ?O On))
% 			)
% 		)
% 	)

fof( miloA67, axiom,
	p__d__subclass(c__Stepping,c__BodyMotion)
).



% ($documentation Stepping EnglishLanguage "The &%BodyMotion of
% extending one foot forward and then bringing the other foot
% to the same lateral position as the first leg.")


% ($comment 
% ;; NS. delete.
% ;; (=>
% ;;    ($instance ?AMBULATE Ambulating)
% ;;    (exists (?SUB)
% ;;       (and
% ;;          ($subclass ?SUB Stepping)
% ;;          (forall (?INST)
% ;;             (<=>
% ;;                ($instance ?INST ?SUB)
% ;;                (subProcess ?INST ?AMBULATE))))))
% ;;
% ;; NS: add.  The conception here is that each instance of
% ;; Ambulating (Walking or Running) includes at least two
% ;; Stepping subProcesses: a starting one, and an ending one.
% )

fof( miloA68, axiom,
	(![AMBULATE,DURATION]: 
		(
			(
				(
					(
						p__d__instance(DURATION,c__TimeInterval)
					)
				 &
					(
						p__d__instance(AMBULATE,c__Ambulating)
					)
				 &
					(
						( DURATION = f__WhenFn1(AMBULATE) )
					)
				)
			)
			=>
			(
				(?[STEP1,STEPN]: 
					(
						(
							(
								p__d__instance(STEP1,c__Stepping)
							)
						 &
							(
								p__d__instance(STEPN,c__Stepping)
							)
						 &
							(
								p__subProcess(STEP1,AMBULATE)
							)
						 &
							(
								p__subProcess(STEPN,AMBULATE)
							)
						 &
							(
								p__starts(f__WhenFn1(STEP1),DURATION)
							)
						 &
							(
								p__finishes(f__WhenFn1(STEPN),DURATION)
							)
						 &
							(
								~ (
									( STEP1 = STEPN )
								)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA69, axiom,
	(![A,S2START,S1START,S1,S2]: 
		(
			(
				(
					(
						p__d__instance(S1START,c__TimePoint)
					)
				 &
					(
						p__d__instance(S2START,c__TimePoint)
					)
				 &
					(
						p__d__instance(A,c__Ambulating)
					)
				 &
					(
						p__subProcess(S1,A)
					)
				 &
					(
						p__d__instance(S1,c__Stepping)
					)
				 &
					(
						p__subProcess(S2,A)
					)
				 &
					(
						p__d__instance(S2,c__Stepping)
					)
				 &
					(
						( S1START = f__BeginFn1(f__WhenFn1(S1)) )
					)
				 &
					(
						( S2START = f__BeginFn1(f__WhenFn1(S2)) )
					)
				 &
					(
						(
							(
								~ (
									p__before(S1START,S2START)
								)
							)
						 &
							(
								~ (
									p__before(S2START,S1START)
								)
							)
						)
					)
				)
			)
			=>
			(
				( S1 = S2 )
			)
		)
	)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA70, axiom,
	(![AMBULATE,STEP,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(AMBULATE,c__Ambulating)
					)
				 &
					(
						p__d__instance(STEP,c__Stepping)
					)
				 &
					(
						p__subProcess(STEP,AMBULATE)
					)
				 &
					(
						p__agent(AMBULATE,AGENT)
					)
				)
			)
			=>
			(
				p__agent(STEP,AGENT)
			)
		)
	)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA71, axiom,
	(![STEP,AMBULATE,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(AMBULATE,c__Ambulating)
					)
				 &
					(
						p__d__instance(STEP,c__Stepping)
					)
				 &
					(
						p__subProcess(STEP,AMBULATE)
					)
				 &
					(
						p__agent(STEP,AGENT)
					)
				)
			)
			=>
			(
				p__agent(AMBULATE,AGENT)
			)
		)
	)
).


fof( miloA72, axiom,
	p__d__subclass(c__Wading,c__Walking)
).



% ($documentation Wading EnglishLanguage "Any instance of &%Walking which occurs through a 
% &%BodyOfWater.")


fof( miloA73, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__Wading)
			)
			=>
			(
				(?[W]: 
					(
						(
							(
								p__d__instance(W,c__WaterArea)
							)
						 &
							(
								p__eventLocated(P,W)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA74, axiom,
	p__d__subclass(c__Jumping,c__BodyMotion)
).


fof( miloA75, axiom,
	p__d__subclass(c__Jumping,c__MotionUpward)
).



% ($documentation Jumping EnglishLanguage "Any &%MotionUpward which is done by one's body 
% and which results in a situation where one's feet are unsupported.")


% 	(forall (?J ?A)
% 		(=> 
% 			(and 
% 				($instance ?J Jumping)
% 				(agent ?J ?A)
% 			)
% 			(holdsDuring (EndFn (WhenFn ?J)) (not (attribute ?A Standing)))
% 		)
% 	)

fof( miloA77, axiom,
	p__d__subclass(c__Somersaulting,c__BodyMotion)
).



% ($documentation Somersaulting EnglishLanguage "Any &%BodyMotion which begins and ends in 
% a &%Sitting position and where the feet roll over the head and return to 
% their original position.")


% 	(forall (?S ?A)
% 		(=> 
% 			(and 
% 				($instance ?S Somersaulting)
% 				(agent ?S ?A)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?S)) (attribute ?A Sitting))
% 				(holdsDuring (EndFn (WhenFn ?S)) (attribute ?A Sitting))
% 			)
% 		)
% 	)

fof( miloA79, axiom,
	p__d__subclass(c__Reflecting,c__Radiating)
).



% ($documentation Reflecting EnglishLanguage "Any instance of &%Radiating where the radiated 
% waves rebound from a surface, e.g. an echo of sound or a reflection of 
% light.")


fof( miloA80, axiom,
	p__d__subclass(c__ReflectingLight,c__Reflecting)
).


fof( miloA81, axiom,
	p__d__subclass(c__ReflectingLight,c__RadiatingLight)
).



% ($documentation ReflectingLight EnglishLanguage "Those
% instances of &%RadiatingLight where the &%instrument is not
% a light source, but is simply a surface which bends light
% waves that come in contact with it.")



% ($documentation wavelength EnglishLanguage "(wavelength ?RADIATION ?MEASURE) means that the instance of radiation, ?RADIATION, has an average wavelength of ?MEASURE.")


fof( miloA82, axiom,
	p__d__instance(c__wavelength,c__SingleValuedRelation)
).


% 	($domain wavelength 1 Radiating)

% 	($domain wavelength 2 LengthMeasure)

fof( miloA85, axiom,
	p__subrelation(c__wavelength,c__measure)
).


fof( miloA86, axiom,
	p__d__subclass(c__RadiatingInfrared,c__Radiating)
).


fof( miloA87, axiom,
	p__d__disjoint(c__RadiatingInfrared,c__RadiatingLight)
).


fof( miloA88, axiom,
	p__d__disjoint(c__RadiatingInfrared,c__RadioEmission)
).



% ($documentation RadiatingInfrared EnglishLanguage "Any instance of &%Radiating where the 
% &%wavelengths are longer than those of visible light and shorter than those 
% of radio emissions.")


fof( miloA89, axiom,
	p__d__subclass(c__RadiatingUltraviolet,c__RadiatingElectromagnetic)
).


fof( miloA90, axiom,
	p__d__disjoint(c__RadiatingUltraviolet,c__RadiatingLight)
).


fof( miloA91, axiom,
	p__d__disjoint(c__RadiatingUltraviolet,c__XRayRadiation)
).



% ($documentation RadiatingUltraviolet EnglishLanguage "Any case of &%RadiatingElectromagnetic where the 
% &%wavelengths are shorter than those of visible light and longer than those 
% of X-Rays.")


% ($comment 
% ;; (abbreviation "UV" RadiatingUltraviolet)
% )

fof( miloA92, axiom,
	p__d__subclass(c__XRayRadiation,c__Radiating)
).



% ($documentation XRayRadiation EnglishLanguage "Electro-magnetic radiation of short wavelength, 
% often made use of by devices that scan the inside of objects.")


fof( miloA93, axiom,
	p__d__subclass(c__RadiatingVisibleLight,c__RadiatingLight)
).


fof( miloA94, axiom,
	p__d__disjoint(c__RadiatingVisibleLight,c__RadiatingUltraviolet)
).



% ($documentation RadiatingVisibleLight EnglishLanguage "Any instance of &%RadiatingLight that can 
% be detected by normal human visual perception.")


fof( miloA95, axiom,
	(![H,S,R]: 
		(
			(
				(
					(
						p__d__instance(R,c__RadiatingLight)
					)
				 &
					(
						p__d__instance(H,c__Human)
					)
				 &
					(
						p__d__instance(S,c__Seeing)
					)
				 &
					(
						p__agent(S,H)
					)
				 &
					(
						p__patient(S,R)
					)
				)
			)
			=>
			(
				p__d__instance(R,c__RadiatingVisibleLight)
			)
		)
	)
).


fof( miloA96, axiom,
	p__d__subclass(c__Sunlight,c__RadiatingLight)
).



% ($documentation Sunlight EnglishLanguage "Any instance of &%RadiatingLight where the 
% Sun (&%Sol) is the origin.")


fof( miloA97, axiom,
	p__d__subclass(c__RadioReceiver,c__ReceiverDevice)
).



% ($documentation RadioReceiver EnglishLanguage "A &%RadioReceiver is a &%Device for receiving 
% radio broadcast signals from a &%RadioStation.")


fof( miloA98, axiom,
	p__d__subclass(c__Script,c__Collection)
).



% ($documentation Script EnglishLanguage "The collection of &%Characters in a particular 
% written language.  Every &%WrittenCommunication consists of &%Characters 
% written in a particular script.  Scripts include different typefaces, as 
% well as entirely different characters.  'Times Roman' is a very specific 
% script.  While the 'latin' character set is a general one, that has 
% specific subclasses like Times Roman.  Other scripts include Devanagri 
% (which may be expressed in many different more specific typefaces), or 
% Simplified Chinese.") 


% ($comment 
% ;; NS: edited to fix argument order for &%part.
% )

fof( miloA99, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__WrittenCommunication)
			)
			=>
			(
				(?[T,C,S]: 
					(
						(
							(
								p__result(W,T)
							)
						 &
							(
								p__d__instance(T,c__Text)
							)
						 &
							(
								p__part(C,T)
							)
						 &
							(
								p__d__instance(C,c__Character)
							)
						 &
							(
								p__d__instance(S,c__Script)
							)
						 &
							(
								p__member(C,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA100, axiom,
	p__d__subclass(c__Orthography,c__Procedure)
).



% ($documentation Orthography EnglishLanguage "A method for representing the sounds of a &%Language 
% with written &%Characters.")


fof( miloA101, axiom,
	p__d__subclass(c__Lyrics,c__Text)
).



% ($documentation Lyrics EnglishLanguage "Any &%Text which is intended to be sung.")


% 	(forall (?SING ?LYRIC)
% 		(=> 
% 			($instance ?LYRIC Lyrics)
% 			(hasPurpose ?LYRIC (exists ([|] ?SING []) (and ([|] ($instance ?SING Singing) ([|] (patient ?SING ?LYRIC) [])))))
% 		)
% 	)

fof( miloA103, axiom,
	p__d__subclass(c__Paragraph,c__Text)
).



% ($documentation Paragraph EnglishLanguage "A &%Text which consists of one or more sentences, 
% begins with an indented line, and expresses a single topic.")


fof( miloA104, axiom,
	(![T]: 
		(
			(
				p__d__instance(T,c__Paragraph)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__Object)
							)
						 &
							(
								p__d__instance(S,c__Sentence)
							)
						 &
							(
								p__part(S,T)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation sententialObject EnglishLanguage "(sententialObject ?OBJECT ?SENTENCE) 
% means that the &%NounPhrase ?OBJECT is the object of the &%Sentence 
% ?SENTENCE.")


% 	($domain sententialObject 1 NounPhrase)

% 	($domain sententialObject 2 Sentence)

fof( miloA107, axiom,
	p__subrelation(c__sententialObject,c__grammaticalRelation)
).



% ($documentation sententialSubject EnglishLanguage "(sententialSubject ?SUBJECT ?SENTENCE) 
% means that the &%NounPhrase ?SUBJECT is the subject of the &%Sentence 
% ?SENTENCE.")


% 	($domain sententialSubject 1 NounPhrase)

% 	($domain sententialSubject 2 Sentence)

fof( miloA110, axiom,
	p__subrelation(c__sententialSubject,c__grammaticalRelation)
).



% ($documentation speaksLanguage EnglishLanguage "(speaksLanguage ?AGENT ?LANGUAGE) means that the 
% &%SentientAgent ?AGENT is capable of understanding and/or generating the &%Language 
% ?LANGUAGE.")


fof( miloA111, axiom,
	p__d__instance(c__speaksLanguage,c__BinaryPredicate)
).


% 	($domain speaksLanguage 1 SentientAgent)

% 	($domain speaksLanguage 2 Language)

% ($comment 
% ;; KJN: Deleting this.  Made MakingInstrumentalMusic in Music ontology and moved 
% ;; it to Merge
% ;;($subclass InstrumentalMusic Music)
% ;;(documentation InstrumentalMusic EnglishLanguage "&%Music
% ;;which is produced (at least in part) by a
% ;;&%MusicalInstrument.")
% ;;
% ;;(=>
% ;;   ($instance ?MUSIC InstrumentalMusic)
% ;;   (exists (?INSTRUMENT)
% ;;      (and
% ;;         ($instance ?INSTRUMENT MusicalInstrument)
% ;;         (instrument ?MUSIC ?INSTRUMENT))))
% ;;
% ;;(partition Music MonophonicMusic PolyphonicMusic)
% ;;
% ;; KJN: Making this into an attribute to describe a MakingMusic or
% ;; MusicRecording instance, instead of a subclass of MakingMusic
% )

fof( miloA114, axiom,
	p__d__instance(c__MonophonicMusic,c__RelationalAttribute)
).



% ($documentation MonophonicMusic EnglishLanguage "&%MakingMusic
% which has a single part, i.e. &%MakingMusic which cannot be
% divided into two or more contemporaneous &%subProcesses
% which are also instances of &%MakingMusic.")


fof( miloA115, axiom,
	p__d__instance(c__PolyphonicMusic,c__RelationalAttribute)
).



% ($documentation PolyphonicMusic EnglishLanguage "&%MakingMusic
% which has two or more parts, i.e. &%MakingMusic which can be
% divided into two or more contemporaneous &%subProcesses
% which are also instances of &%MakingMusic.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of attribute is Object, whereas MakingMusic is subclass of Process (Object and Process are disjoint)
% ;; TODO: Modify the domain information of attribute or use another relation
% ;;
% ;;(<=>
% ;;  (attribute ?MUSIC PolyphonicMusic)
% ;;  (exists (?PART1 ?PART2)
% ;;    (and
% ;;      ($instance ?MUSIC MakingMusic)
% ;;      ($instance ?PART1 MakingMusic)
% ;;      ($instance ?PART2 MakingMusic)
% ;;      (subProcess ?PART1 ?MUSIC)
% ;;      (subProcess ?PART2 ?MUSIC)
% ;;      (not (equal ?PART1 ?PART2))
% ;;      (cooccur ?PART1 ?MUSIC)
% ;;      (cooccur ?PART2 ?MUSIC))))  
% ;;
% ;; KJN: Removing this.  Created MakingVocalMusic and put it in Merge.kif      
% ;;($subclass VocalMusic Music)
% ;;(documentation VocalMusic EnglishLanguage "&%Music which is produced (at least in part)
% ;;by &%Singing.")
% ;;
% ;;(=>
% ;;  ($instance ?M VocalMusic)
% ;;  (exists (?S)
% ;;    (and
% ;;      ($instance ?S Singing)
% ;;      (subProcess ?S ?M))))
% )

fof( miloA116, axiom,
	p__d__subclass(c__MusicalTone,c__RadiatingSound)
).



% ($documentation MusicalTone EnglishLanguage "A &%Process of &%RadiatingSound where the
% sound has a fundamental frequency and 0 or more partial frequencies
% or unrelated transients or noise components that have a lesser
% amplitude than the fundamental.")


fof( miloA117, axiom,
	p__d__subclass(c__RadiatingSoundUltrasonic,c__RadiatingSound)
).



% ($documentation RadiatingSoundUltrasonic EnglishLanguage "All sound waves that have frequencies 
% above those that normal &%Human ears can detect.")


fof( miloA118, axiom,
	p__d__instance(c__soundFrequency,c__BinaryPredicate)
).



% ($documentation soundFrequency EnglishLanguage "A relation between a &%Process of 
% &%MusicalTone and the fundamental frequency of that tone.")


% 	($domain soundFrequency 1 MusicalTone)

% 	($domain soundFrequency 2 FunctionQuantity)

% ($comment 
% ;; NS: The ambiguity of &%patient, in particular, creates
% ;; unnecessary confusion for axiom authors, and definitely
% ;; will be a problem if SUMO is ever used in an application
% ;; requiring serious inference.  On the one hand, &%patient
% ;; is frequently used to indicate the object acted on (in
% ;; grammatical terms, the direct object) of a Process.  On
% ;; the other hand, it is also used to gather up just about
% ;; all of the objects that play any role in a Process,
% ;; except for &%agent, &%origin, &%destination, and perhaps
% ;; a few others.  This means that a user (human or
% ;; application) won't really be able to determine the object
% ;; acted on/direct object of a Process (e.g., Process1)
% ;; without posing a query like the following:
% ;;
% ;;     (and
% ;;       (patient Process1 ?X)
% ;;       (not (instrument Process1 ?X))
% ;;       (not (resource Process1 ?X))
% ;;       (not (result Process1 ?X))
% ;;       ... etc.)
% ;;
% ;; The solution is to (a) restrict the meaning of &%patient
% ;; to "object acted on/direct object" and define some new
% ;; predicate to gather up all of the non-&%agent
% ;; subrelations, or (b) define some new predicate that
% ;; strictly means "object acted on/direct object", relate it
% ;; to those predicates it should subsume, and redefine
% ;; &%patient to mean "every case role in a Process that is
% ;; not the &%agent".  Either way, all of the axioms that
% ;; currently use &%patient and its current subrelations will
% ;; have to be reviewed and, if necessary, rewritten.  This
% ;; should be done sooner rather than later.
% ;;
% ;; To determine all of the entities that play any role in
% ;; Process1, a user can pose this query:
% ;;
% ;;    (involvedInEvent Process1 ?X)
% )

fof( miloA121, axiom,
	p__d__subclass(c__WrittenCommunication,c__LinguisticCommunication)
).



% ($documentation WrittenCommunication EnglishLanguage "Any
% &%LinguisticCommunication where the &%instrument is a
% &%Text, e.g. a letter, an email, a memo, etc.")


% ($comment 
% ;; NS: There is a tendency throughout MILO and the domain
% ;; ontologies, and sometimes even within Merge.kif, to
% ;; compose rules in relative isolation, as if no more
% ;; general rule already stated somewhere else could possibly
% ;; be relevant.  One practical result is that we allow (or
% ;; force) inference engines to do unnecessary skolemization.
% ;; Typically, an inference engine will have no way of
% ;; proving that two skolemized terms should be considered
% ;; &%equal, so newly introduced terms that "pass in the
% ;; night" will proliferate during inference.  Another
% ;; problem is the relatively small and imprecise (at least
% ;; as used) set of CaseRoles.  Over-skolemization and
% ;; CaseRole imprecision combine to pretty much guarantee
% ;; that many of the rules in MILO and the domain ontologies
% ;; will not produce the intended or desired inference
% ;; results.  
% ;;
% ;; [12] - [24] below are interrelaed, but should be much
% ;; more so.
% ;;
% ;; Merge.kif
% ;;
% ;; [12] (documentation Communication EnglishLanguage "A
% ;;      SocialInteraction that involves the transfer of
% ;;      information between two or more
% ;;      CognitiveAgents. Note that Communication is closely
% ;;      related to, but essentially different from,
% ;;      ContentDevelopment. The latter involves the creation
% ;;      or modification of a ContentBearingObject, while
% ;;      Communication is the transfer of information for the
% ;;      purpose of conveying a message.")
% ;;
% ;; [13]
% ;; (=>
% ;;     ($instance ?COMMUNICATE Communication)
% ;;     (exists (?PHYS ?ENTITY ?AGENT1 ?AGENT2)
% ;;         (and
% ;;             (refers ?PHYS ?ENTITY)
% ;;             (patient ?COMMUNICATE ?PHYS)
% ;;             ($instance ?AGENT1 CognitiveAgent)
% ;;             (agent ?COMMUNICATE ?AGENT1)
% ;;             ($instance ?AGENT2 CognitiveAgent)
% ;;             (destination ?COMMUNICATE ?AGENT2))))
% ;;
% ;; NS: [12] and [13] seem not to correspond to each other.
% ;;
% ;; TO DO: Try to think of a more useful way to capture the
% ;;        salient meaning of Communication.  (refers ?PHYS
% ;;        ?ENTITY) seems so vague as to be pointless.
% ;;        According to the documentation statement, an
% ;;        instance of Communication is essentially a
% ;;        transfer of information from at least one agent to
% ;;        at least one other agent.  I understand why this
% ;;        rule is so general, but I'm inclined to view
% ;;        Communication as involving (at least)
% ;;        representation and ContentBearingPhysicals.
% ;;
% ;; Merge.kif
% ;;
% ;; [14] ($subclass LinguisticCommunication Communication)
% ;;
% ;; [15]
% ;; (=>
% ;;     ($instance ?COMMUNICATE LinguisticCommunication)
% ;;     (exists (?OBJ)
% ;;         (and
% ;;             (represents ?COMMUNICATE ?OBJ)
% ;;             ($instance ?OBJ LinguisticExpression)
% ;;             (patient ?COMMUNICATE ?OBJ))))
% ;;
% ;; TO DO: Relate [15] to [13], or to a revised version of [13].
% ;;
% ;; Merge.kif
% ;; 
% ;; [16] ($subclass Writing ContentDevelopment)
% ;;
% ;; [17]
% ;; (=>
% ;;     ($instance ?DEVELOP ContentDevelopment)
% ;;     (exists (?OBJ)
% ;;         (and
% ;;             ($instance ?OBJ ContentBearingObject)
% ;;             (result ?DEVELOP ?OBJ))))
% ;;
% ;; Mid-level-ontology.kif
% ;;
% ;; [18] ($subclass WrittenCommunication Communication)
% ;;
% ;; [19]
% ;; (=>
% ;;    ($instance ?COMMUNICATE WrittenCommunication)
% ;;    (exists (?WRITE ?READ ?TEXT)
% ;;       (and
% ;;          ($instance ?WRITE Writing)
% ;;          ($instance ?READ Reading)
% ;;          ($instance ?TEXT Text)
% ;;          (instrument ?COMMUNICATE ?TEXT)
% ;;          (result ?WRITE ?TEXT)
% ;;          (patient ?READ ?TEXT)
% ;;          (subProcess ?WRITE ?COMMUNICATE)
% ;;          (subProcess ?READ ?COMMUNICATE))))
% ;;
% ;; NS: In Merge.kif, the documentation for &%Reading
% ;; indicates that the term denotes the process of reading
% ;; aloud, but &%Reading is not related to &%Speaking.  The
% ;; process of reading silently is supposedly denoted by
% ;; &%Interpreting.  &%Reading is not usefully related to
% ;; &%Interpreting.  So, according to [19], an instance of
% ;; WrittenCommunication entails reading a text aloud, but
% ;; not interpreting (understanding) the text.  Also, [19]
% ;; fails to specify any temporal ordering between ?WRITE and
% ;; ?READ.
% ;;
% ;; TO DO: Fix [19].
% ;;
% ;; Merge.kif
% ;;
% ;; [20] ($subclass Speaking Vocalizing)
% ;;
% ;; [21] ($subclass Vocalizing RadiatingSound)
% ;;
% ;; [22] (documentation Vocalizing EnglishLanguage "Any
% ;; instance of RadiatingSound where the instrument is the
% ;; Human vocal cords. This covers grunts, screams, roars, as
% ;; well as Speaking.")
% ;; 
% ;; [23]
% ;; (=>
% ;;     ($instance ?VOCAL Vocalizing)
% ;;     (exists (?HUMAN)
% ;;         (and
% ;;             ($instance ?HUMAN Human)
% ;;             (agent ?VOCAL ?HUMAN)
% ;;             (instrument ?VOCAL ?HUMAN))))
% ;;
% ;; NS: [22] and [23] do not correspond, perhaps because
% ;; creating a term for vocal cord was not within the scope
% ;; of Merge.kif.
% ;;
% ;; Merge.kif
% ;;
% ;; [24]
% ;; (=>
% ;;     (and
% ;;         ($instance ?EMIT RadiatingSound)
% ;;         (agent ?EMIT ?SOUND))
% ;;     (exists (?ATTR)
% ;;         (and
% ;;             ($instance ?ATTR SoundAttribute)
% ;;             (attribute ?SOUND ?ATTR))))
% ;;
% ;; NS: [20], [21], [23], and [24] together entail a CaseRole
% ;; mismatch.  In [23], the &%agent is a Human.  In [24], the
% ;; &%agent is presumably a sound, but neither Merge.kif nor
% ;; Mid-level-ontology.kif contain a representation of
% ;; *Sound, *SoundWave, etc.  So, currently, [23] and [24]
% ;; entail that the Human who is the agent in a Speaking is
% ;; also the instrument (and, so, the patient) in the
% ;; Speaking, and is either &%Stressed or &%Audible as well.
% ;; 
% ;; TO DO: Clean up the CaseRole mess, creating the necessary
% ;;        concepts.
% )

fof( miloA122, axiom,
	p__d__subclass(c__Corresponding,c__LinguisticCommunication)
).



% ($documentation Corresponding EnglishLanguage "Instances of &%LinguisticCommunication which 
% are achieved by means of &%Texts that are mailed between the persons 
% communicating with one another.")


fof( miloA123, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Corresponding)
			)
			=>
			(
				(?[M,T]: 
					(
						(
							(
								p__d__instance(M,c__Mailing)
							)
						 &
							(
								p__subProcess(M,C)
							)
						 &
							(
								p__d__instance(T,c__Text)
							)
						 &
							(
								p__patient(M,T)
							)
						 &
							(
								p__patient(C,T)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA124, axiom,
	p__d__subclass(c__Reminding,c__Requesting)
).



% ($documentation Reminding EnglishLanguage "Any &%Requesting that is intended to cause a 
% &%Remembering of something.")


fof( miloA125, axiom,
	(![REMIND]: 
		(
			(
				p__d__instance(REMIND,c__Reminding)
			)
			=>
			(
				(?[REMEMBER]: 
					(
						(
							(
								p__d__instance(REMEMBER,c__Remembering)
							)
						 &
							(
								p__causes(REMIND,REMEMBER)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA126, axiom,
	p__d__subclass(c__Threatening,c__Committing)
).



% ($documentation Threatening EnglishLanguage "Any &%Committing where the thing promised 
% is something that is deemed undesirable by the &%destination of the 
% &%Committing.")


fof( miloA127, axiom,
	(![AGENT,THREATEN,DEST,PROP]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(PROP,c__Formula)
					)
				 &
					(
						p__d__instance(DEST,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(THREATEN,c__Threatening)
					)
				 &
					(
						p__agent(THREATEN,AGENT)
					)
				 &
					(
						p__patient(THREATEN,PROP)
					)
				 &
					(
						p__destination(THREATEN,DEST)
					)
				)
			)
			=>
			(
				~ (
					p__desires(DEST,PROP)
				)
			)
		)
	)
).


fof( miloA128, axiom,
	p__d__subclass(c__Punishing,c__RegulatoryProcess)
).



% ($documentation Punishing EnglishLanguage "A &%RegulatoryProcess where the agent does 
% something to the &%destination that the &%agent knows is undesirable 
% for the &%destination.")


% 	(forall (?P ?A ?D ?F)
% 		(=> 
% 			(and 
% 				($instance ?P Punishing)
% 				(agent ?P ?A)
% 				(patient ?P ?F)
% 				(destination ?P ?D)
% 			)
% 			(knows ?A (not (desires ?D ?F)))
% 		)
% 	)

fof( miloA130, axiom,
	p__d__subclass(c__Registering,c__Stating)
).


fof( miloA131, axiom,
	p__d__subclass(c__Registering,c__PoliticalProcess)
).



% ($documentation Registering EnglishLanguage "Submitting official paperwork in a government 
% agency, e.g. filing for divorce, making a legal claim against someone.")


fof( miloA132, axiom,
	(![ACTION]: 
		(
			(
				p__d__instance(ACTION,c__LegalAction)
			)
			=>
			(
				(?[REGISTER]: 
					(
						(
							(
								p__d__instance(REGISTER,c__Registering)
							)
						 &
							(
								p__subProcess(REGISTER,ACTION)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA133, axiom,
	p__d__subclass(c__Answering,c__Stating)
).



% ($documentation Answering EnglishLanguage "Responding to a &%Questioning, i.e. trying to answer 
% someone's question.")


fof( miloA134, axiom,
	(![ANSWER]: 
		(
			(
				p__d__instance(ANSWER,c__Answering)
			)
			=>
			(
				(?[QUESTION]: 
					(
						(
							(
								p__d__instance(QUESTION,c__Questioning)
							)
						 &
							(
								p__refers(ANSWER,QUESTION)
							)
						 &
							(
								p__earlier(f__WhenFn1(QUESTION),f__WhenFn1(ANSWER))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA135, axiom,
	p__d__subclass(c__Arguing,c__Stating)
).



% ($documentation Arguing EnglishLanguage "Any &%Stating which has the form of an &%Argument.")


fof( miloA136, axiom,
	(![ARGUE]: 
		(
			(
				p__d__instance(ARGUE,c__Arguing)
			)
			=>
			(
				(?[STATEMENT,ARGUMENT]: 
					(
						(
							(
								p__patient(ARGUE,STATEMENT)
							)
						 &
							(
								p__d__instance(STATEMENT,c__Statement)
							)
						 &
							(
								p__containsInformation(STATEMENT,ARGUMENT)
							)
						 &
							(
								p__d__instance(ARGUMENT,c__Argument)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; changing this to LinguisticCommunication
% ;;($subclass TellingALie Stating)
% )

fof( miloA137, axiom,
	p__d__subclass(c__TellingALie,c__LinguisticCommunication)
).



% ($documentation TellingALie EnglishLanguage "Any &%LinguisticCommunication which is both &%False and believed 
% to be &%False by the &%agent of the &%LinguisticCommunication.")


% 	(forall (?STATE ?AGENT ?STATEMENT)
% 		(=> 
% 			(and 
% 				($instance ?STATE TellingALie)
% 				(agent ?STATE ?AGENT)
% 				(patient ?STATE ?STATEMENT)
% 			)
% 			(holdsDuring (WhenFn ?STATE) (believes ?AGENT (truth ?STATEMENT False)))
% 		)
% 	)

fof( miloA139, axiom,
	p__d__subclass(c__Founding,c__Declaring)
).


fof( miloA140, axiom,
	p__d__subclass(c__Founding,c__OrganizationalProcess)
).



% ($documentation Founding EnglishLanguage "Setting up an &%Organization.")


fof( miloA141, axiom,
	(![FOUND]: 
		(
			(
				p__d__instance(FOUND,c__Founding)
			)
			=>
			(
				(?[ORG]: 
					(
						(
							(
								p__d__instance(ORG,c__Organization)
							)
						 &
							(
								p__result(FOUND,ORG)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA142, axiom,
	p__d__subclass(c__Club,c__Organization)
).



% ($documentation Club EnglishLanguage "A Club is an &%Organization of people that share some &%desire")


fof( miloA143, axiom,
	(![CLUB,MEM1,MEM2]: 
		(
			(
				(
					(
						p__d__instance(MEM1,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(MEM1,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(MEM2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(MEM2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(CLUB,c__Club)
					)
				 &
					(
						p__member(MEM1,CLUB)
					)
				 &
					(
						p__member(MEM2,CLUB)
					)
				)
			)
			=>
			(
				(?[DESIRE]: 
					(
						(
							(
								p__d__instance(DESIRE,c__Formula)
							)
						 &
							(
								p__desires(MEM1,DESIRE)
							)
						 &
							(
								p__desires(MEM2,DESIRE)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation yearOfFounding EnglishLanguage "(yearOfFounding ?ORG ?NUMBER) means that the &%Organization 
% ?ORG was founded in the year expressed in ?NUMBER.")


fof( miloA144, axiom,
	p__d__instance(c__yearOfFounding,c__BinaryPredicate)
).


fof( miloA145, axiom,
	p__d__instance(c__yearOfFounding,c__AsymmetricRelation)
).


% 	($domain yearOfFounding 1 Organization)

% 	($domain yearOfFounding 2 Integer)

fof( miloA148, axiom,
	(![O,Y]: 
		(
			(
				(
					(
						p__d__instance(Y,c__Integer)
					)
				 &
					(
						p__d__instance(O,c__Organization)
					)
				 &
					(
						p__yearOfFounding(O,Y)
					)
				)
			)
			=>
			(
				p__dateEstablished(O,f__YearFn1(Y))
			)
		)
	)
).


% 	(forall (?Y ?O)
% 		(<=> 
% 			(yearOfFounding ?O ?Y)
% 			(exists (?F)
% 				(and 
% 					(overlapsTemporally ?F (YearFn ?Y))
% 					($instance ?F Founding)
% 					(result ?F ?O)
% 				)
% 			)
% 		)
% 	)

fof( miloA150, axiom,
	p__d__instance(c__dateEstablished,c__BinaryPredicate)
).


% 	($domain dateEstablished 1 Physical)

% 	($domainSubclass dateEstablished 2 TimePosition)


% ($documentation dateEstablished EnglishLanguage "(&%dateEstablished ?THING ?TIME) means 
% that the &%Physical ?THING was founded on the date indicated by ?TIME.  
% For example, (&%dateEstablished &%UnitedNations 
% (&%DayFn 26 (&%MonthFn &%June (&%YearFn 1945)))).") 


% 	(forall (?DATE ?THING)
% 		(=> 
% 			(dateEstablished ?THING ?DATE)
% 			(exists (?DAY)
% 				(and 
% 					($instance ?DAY ?DATE)
% 					(overlapsTemporally ?DAY (BeginFn (WhenFn ?THING)))
% 				)
% 			)
% 		)
% 	)

fof( miloA154, axiom,
	p__d__instance(c__dateUsed,c__TernaryPredicate)
).


% 	($domain dateUsed 1 Object)

% 	($domain dateUsed 2 TimePoint)

% 	($domain dateUsed 3 Agent)


% ($documentation dateUsed EnglishLanguage "The date an &%Object is used by an &%Agent.")


% (termFormat EnglishLanguage dateUsed "date used")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of dateUsed is TimePoint, whereas the first argument of overlapsTemporally is TimeInterval  (TimePoint and TimeInterval are disjoint)
% ;;
% ;;(=>
% ;;  (dateUsed ?OBJECT ?DATE ?AGENT)
% ;;  (exists (?PROCESS)
% ;;    (and
% ;;      ($instance ?PROCESS Process)
% ;;      (patient ?PROCESS ?OBJECT)
% ;;      (agent ?PROCESS ?AGENT)
% ;;      (uses ?OBJECT ?AGENT)
% ;;      (overlapsTemporally ?DATE (WhenFn ?PROCESS)))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA158, axiom,
	(![OBJECT,AGENT,DATE]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(DATE,c__TimePoint)
					)
				 &
					(
						p__d__instance(OBJECT,c__Object)
					)
				 &
					(
						p__dateUsed(OBJECT,DATE,AGENT)
					)
				)
			)
			=>
			(
				(?[PROCESS]: 
					(
						(
							(
								p__d__instance(PROCESS,c__Process)
							)
						 &
							(
								p__patient(PROCESS,OBJECT)
							)
						 &
							(
								p__agent(PROCESS,AGENT)
							)
						 &
							(
								p__uses(OBJECT,AGENT)
							)
						 &
							(
								p__temporalPart(DATE,f__WhenFn1(PROCESS))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA159, axiom,
	p__d__subclass(c__Accrediting,c__Declaring)
).



% ($documentation Accrediting EnglishLanguage "Any process of certifying an &%EducationalOrganization.")


fof( miloA160, axiom,
	(![A,EO]: 
		(
			(
				(
					(
						p__d__instance(A,c__Accrediting)
					)
				 &
					(
						p__patient(A,EO)
					)
				)
			)
			=>
			(
				p__d__instance(EO,c__EducationalOrganization)
			)
		)
	)
).


fof( miloA161, axiom,
	p__d__subclass(c__Indicating,c__Communication)
).


fof( miloA162, axiom,
	p__d__subclass(c__Indicating,c__BodyMotion)
).



% ($documentation Indicating EnglishLanguage "Pointing out a person, place or thing with 
% one's hand or with an &%Artifact.")


fof( miloA163, axiom,
	p__d__subclass(c__Divorcing,c__Declaring)
).



% ($documentation Divorcing EnglishLanguage "A &%LegalAction whereby a marriage (&%Wedding) is dissolved.  This 
% includes annulments.")


% 	(forall (?D)
% 		(=> 
% 			($instance ?D Divorcing)
% 			(exists (?P1 ?P2 ?T1 ?T2)
% 				(and 
% 					(holdsDuring ?T1 (spouse ?P1 ?P2))
% 					(holdsDuring ?T2 (not (spouse ?P1 ?P2)))
% 					(finishes ?T1 ?D)
% 					(starts ?T2 ?D)
% 				)
% 			)
% 		)
% 	)

fof( miloA165, axiom,
	p__d__subclass(c__Appointing,c__Declaring)
).



% ($documentation Appointing EnglishLanguage "Any instance of &%Declaring by which the 
% patient is assigned to a &%Position within an &%Organization where 
% the patient previously had no position.  For example, the appointments 
% of people to non-elective offices in a government.")


% 	(forall (?A ?H)
% 		(=> 
% 			(and 
% 				($instance ?A Appointing)
% 				(patient ?A ?H)
% 			)
% 			(exists (?P ?ORG)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?A)) (not (occupiesPosition ?H ?P ?ORG)))
% 					(holdsDuring (EndFn (WhenFn ?A)) (occupiesPosition ?H ?P ?ORG))
% 				)
% 			)
% 		)
% 	)

fof( miloA167, axiom,
	(![A]: 
		(
			(
				p__d__instance(A,c__Appointing)
			)
			=>
			(
				(![H]: 
					(
						(
							~ (
								p__d__instance(H,c__Agent)
							)
						 |
							~ (
								p__agent(A,H)
							)
						 |
							~ (
								p__d__instance(H,c__Public)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA168, axiom,
	p__d__subclass(c__TurningOffDevice,c__InternalChange)
).



% ($documentation TurningOffDevice EnglishLanguage "Any &%Process whose result is that the patient 
% of the process is in the state of &%DeviceOff.  In other words, this class covers 
% any process of turning off a device, e.g. turning off the lights, switching off a 
% television set, etc.")


% 	(forall (?P ?D)
% 		(=> 
% 			(and 
% 				($instance ?P TurningOffDevice)
% 				(patient ?P ?D)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?P)) (attribute ?D DeviceOn))
% 				(holdsDuring (EndFn (WhenFn ?P)) (attribute ?D DeviceOff))
% 			)
% 		)
% 	)

fof( miloA170, axiom,
	(![P,D]: 
		(
			(
				(
					(
						p__d__instance(P,c__TurningOffDevice)
					)
				 &
					(
						p__patient(P,D)
					)
				)
			)
			=>
			(
				p__d__instance(D,c__Device)
			)
		)
	)
).


fof( miloA171, axiom,
	p__d__subclass(c__TurningOnDevice,c__InternalChange)
).



% ($documentation TurningOnDevice EnglishLanguage "Any &%Process whose result is that the patient 
% of the process is in the state of &%DeviceOn.  In other words, this class covers 
% any process of turning on a device, e.g. turning on the lights, switching on a 
% television set, etc.")


% 	(forall (?P ?D)
% 		(=> 
% 			(and 
% 				($instance ?P TurningOnDevice)
% 				(patient ?P ?D)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?P)) (attribute ?D DeviceOff))
% 				(holdsDuring (EndFn (WhenFn ?P)) (attribute ?D DeviceOn))
% 			)
% 		)
% 	)

fof( miloA173, axiom,
	(![P,D]: 
		(
			(
				(
					(
						p__d__instance(P,c__TurningOnDevice)
					)
				 &
					(
						p__patient(P,D)
					)
				)
			)
			=>
			(
				p__d__instance(D,c__Device)
			)
		)
	)
).


fof( miloA174, axiom,
	p__d__subclass(c__Projectile,c__Weapon)
).



% ($documentation Projectile EnglishLanguage "A missile, bullet, etc. that is fired from 
% a &%Weapon.")


fof( miloA175, axiom,
	(![PROJECTILE]: 
		(
			(
				p__d__instance(PROJECTILE,c__Projectile)
			)
			=>
			(
				p__capability(c__Shooting,c__patient,PROJECTILE)
			)
		)
	)
).


fof( miloA176, axiom,
	p__d__subclass(c__ProjectileShell,c__Container)
).



% ($documentation ProjectileShell EnglishLanguage "The outer casing of a &%Projectile.")


% ($comment 
% ;; NS: No.  Arrows don't have shells.  And the mechanics are
% ;; not described very precisely.  Typically, the casing
% ;; stays behind in the gun (does not move).  The true
% ;; projectile is the slug/warhead.  TO DO: rework this
% ;; subtopic someday.
% )

fof( miloA177, axiom,
	(![PROJECTILE]: 
		(
			(
				p__d__instance(PROJECTILE,c__Projectile)
			)
			=>
			(
				(?[SHELL]: 
					(
						(
							(
								p__d__instance(SHELL,c__ProjectileShell)
							)
						 &
							(
								p__part(SHELL,PROJECTILE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA178, axiom,
	p__d__subclass(c__ProjectileLauncher,c__Weapon)
).



% ($documentation ProjectileLauncher EnglishLanguage "A &%Weapon that shoots a &%Projectile.")


fof( miloA179, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__ProjectileLauncher)
			)
			=>
			(
				p__capability(c__Shooting,c__instrument,L)
			)
		)
	)
).


fof( miloA180, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Shooting)
			)
			=>
			(
				(?[P,L]: 
					(
						(
							(
								p__d__instance(P,c__Projectile)
							)
						 &
							(
								p__patient(S,P)
							)
						 &
							(
								p__d__instance(L,c__ProjectileLauncher)
							)
						 &
							(
								p__instrument(S,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA181, axiom,
	p__d__subclass(c__Spear,c__Weapon)
).



% ($documentation Spear EnglishLanguage "A &%Weapon with a long handle and a short 
% blade.")


fof( miloA182, axiom,
	p__d__subclass(c__Sword,c__Weapon)
).



% ($documentation Sword EnglishLanguage "A &%Weapon with a long blade and covered 
% handle.")


fof( miloA183, axiom,
	p__d__subclass(c__Whip,c__Weapon)
).



% ($documentation Whip EnglishLanguage "A &%Weapon that consists of a thin strand of 
% &%Fabric, usually &%Leather, and a handle by which the strand is 
% impelled at a high rate of speed.")


fof( miloA184, axiom,
	p__d__subclass(c__Gun,c__Weapon)
).


fof( miloA185, axiom,
	p__d__subclass(c__Gun,c__ProjectileLauncher)
).


fof( miloA186, axiom,
	p__d__partition3(c__Gun,c__ArtilleryGun,c__Firearm)
).



% ($documentation Gun EnglishLanguage "A &%Weapon that shoots a &%Projectile.")


fof( miloA187, axiom,
	(![GUN]: 
		(
			(
				p__d__instance(GUN,c__Gun)
			)
			=>
			(
				p__capability(c__Shooting,c__instrument,GUN)
			)
		)
	)
).


fof( miloA188, axiom,
	(![SHOOT]: 
		(
			(
				p__d__instance(SHOOT,c__Shooting)
			)
			=>
			(
				(?[PROJECTILE,GUN]: 
					(
						(
							(
								p__d__instance(PROJECTILE,c__Projectile)
							)
						 &
							(
								p__patient(SHOOT,PROJECTILE)
							)
						 &
							(
								p__d__instance(GUN,c__Gun)
							)
						 &
							(
								p__instrument(SHOOT,GUN)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA189, axiom,
	p__d__subclass(c__MortarGun,c__ArtilleryGun)
).



% ($documentation MortarGun EnglishLanguage "A short-range &%Gun that is positioned on the ground 
% at a high angle and fires explosive shells.")


fof( miloA190, axiom,
	p__d__subclass(c__Bullet,c__Projectile)
).



% ($documentation Bullet EnglishLanguage "A &%Projectile that is designed to be fired by a &%Gun.")


% 	(forall (?GUN ?S ?B)
% 		(=> 
% 			($instance ?B Bullet)
% 			(hasPurpose ?B (exists ([|] ?S ([|] ?GUN [])) (and ([|] ($instance ?S Shooting) ([|] (instrument ?S ?GUN) ([|] ($instance ?GUN Gun) ([|] (patient ?S ?B) [])))))))
% 		)
% 	)

fof( miloA192, axiom,
	p__d__subclass(c__BulletCartridge,c__Projectile)
).



% ($documentation BulletCartridge EnglishLanguage "The entire projectile consisting of a bullet, 
% casing, gunpowder, and primer.")


% (termFormat EnglishLanguage BulletCartridge "bullet cartridge")

% 	(forall (?BULLET ?CASE ?CARTRIDGE)
% 		(=> 
% 			($instance ?CARTRIDGE BulletCartridge)
% 			(hasPurpose ?CARTRIDGE (exists ([|] ?BULLET ([|] ?CASE [])) (and ([|] ($instance ?BULLET Bullet) ([|] ($instance ?CASE CartridgeCase) ([|] (properPart ?BULLET ?CARTRIDGE) ([|] (properPart ?CASE ?CARTRIDGE) [])))))))
% 		)
% 	)

fof( miloA194, axiom,
	p__d__subclass(c__CartridgeCase,c__EngineeringComponent)
).



% ($documentation CartridgeCase EnglishLanguage "the part of a cartridge that holds the bullet")


% (termFormat EnglishLanguage CartridgeCase "case")

fof( miloA195, axiom,
	(![CASE]: 
		(
			(
				(
					(
						p__d__instance(CASE,c__Agent)
					)
				 &
					(
						p__d__instance(CASE,c__CartridgeCase)
					)
				)
			)
			=>
			(
				(?[CARTRIDGE,BULLET,K]: 
					(
						(
							(
								p__d__instance(CARTRIDGE,c__BulletCartridge)
							)
						 &
							(
								p__d__instance(BULLET,c__Bullet)
							)
						 &
							(
								p__d__instance(K,c__Keeping)
							)
						 &
							(
								p__properPart(CASE,CARTRIDGE)
							)
						 &
							(
								p__properPart(BULLET,CARTRIDGE)
							)
						 &
							(
								p__agent(K,CASE)
							)
						 &
							(
								p__patient(K,BULLET)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA196, axiom,
	p__d__subclass(c__GunBarrel,c__EngineeringComponent)
).



% ($documentation GunBarrel EnglishLanguage "The part of a &%Gun through which a &%Projectile travels 
% when it is fired.")


fof( miloA197, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__GunBarrel)
			)
			=>
			(
				(?[G]: 
					(
						(
							(
								p__d__instance(G,c__Gun)
							)
						 &
							(
								p__part(B,G)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA198, axiom,
	(![G,GUN,P,S,B]: 
		(
			(
				(
					(
						p__d__instance(GUN,c__Physical)
					)
				 &
					(
						p__d__instance(G,c__Gun)
					)
				 &
					(
						p__d__instance(B,c__GunBarrel)
					)
				 &
					(
						p__part(B,G)
					)
				 &
					(
						p__d__instance(S,c__Shooting)
					)
				 &
					(
						p__instrument(S,GUN)
					)
				 &
					(
						p__patient(S,P)
					)
				 &
					(
						p__d__instance(P,c__Projectile)
					)
				)
			)
			=>
			(
				(?[SUB]: 
					(
						(
							(
								p__d__instance(SUB,c__Motion)
							)
						 &
							(
								p__subProcess(SUB,S)
							)
						 &
							(
								p__path(SUB,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA199, axiom,
	p__d__subclass(c__GunPowder,c__Mixture)
).



% ($documentation GunPowder EnglishLanguage "A &%Mixture of potassium nitrate, sulfur, and 
% charcoal that is used in &%ExplosiveDevices and to propell &%Projectiles 
% in &%ProjectileWeapons.")


fof( miloA200, axiom,
	p__d__subclass(c__Lever,c__Device)
).


% (termFormat EnglishLanguage Lever "lever")


% ($documentation Lever EnglishLanguage "Anything which is actually used
% as a lever, since many things can be used as such, regardless of the
% intent during their &%Manufacture.  A lever necessarily has a &%Fulcrum
% around which the lever exhibits &%Rotating.  A lever has a mechanical
% advantage at the point of output compared to the point of input of
% force.")


% ($comment 
% ;; (externalImage Lever "http://upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Palanca-ejemplo.jpg/800px-Palanca-ejemplo.jpg")
% )

fof( miloA201, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__Lever)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Object)
							)
						 &
							(
								p__axis(A,L)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?P ?L ?E1 ?M1 ?E2 ?P1 ?P2 ?P3 ?P4 ?D2 ?D1)
% 		(=> 
% 			(and 
% 				($instance ?L Lever)
% 				($instance ?P Pushing)
% 				($instance ?M1 Motion)
% 				(destination ?P ?E1)
% 				(physicalEnd ?E1 ?L)
% 				(physicalEnd ?E2 ?L)
% 				(not 
% 					(equal ?E1 ?E2)
% 				)
% 				(holdsDuring (ImmediatePastFn (WhenFn ?M1)) (located ?E1 ?P1))
% 				(holdsDuring (ImmediateFutureFn (WhenFn ?M1)) (located ?E1 ?P2))
% 				(holdsDuring (ImmediatePastFn (WhenFn ?M1)) (located ?E2 ?P3))
% 				(holdsDuring (ImmediateFutureFn (WhenFn ?M1)) (located ?E2 ?P4))
% 				(distance ?P1 ?P2 ?D1)
% 				(distance ?P3 ?P4 ?D2)
% 			)
% 			(greaterThan ?D2 ?D1)
% 		)
% 	)

fof( miloA203, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__GunPowder)
			)
			=>
			(
				p__capability(c__Explosion,c__instrument,P)
			)
		)
	)
).


fof( miloA204, axiom,
	p__d__subclass(c__GunTrigger,c__EngineeringComponent)
).


fof( miloA205, axiom,
	p__d__subclass(c__GunTrigger,c__Lever)
).



% ($documentation GunTrigger EnglishLanguage "The part of the &%Gun which is pulled in &%Shooting 
% the &%Gun.")


fof( miloA206, axiom,
	p__typicalPart(c__GunTrigger,c__Gun)
).


fof( miloA207, axiom,
	p__typicallyContainsPart(c__GunTrigger,c__Gun)
).


fof( miloA208, axiom,
	p__d__subclass(c__LoadingWeapon,c__Inserting)
).



% ($documentation LoadingWeapon EnglishLanguage "Inserting ammunition into a &%ProjectileWeapon 
% in such a way that the ammunition can be fired by the weapon.")


fof( miloA209, axiom,
	(![L,P]: 
		(
			(
				(
					(
						p__d__instance(L,c__LoadingWeapon)
					)
				 &
					(
						p__patient(L,P)
					)
				)
			)
			=>
			(
				p__d__instance(P,c__Projectile)
			)
		)
	)
).


fof( miloA210, axiom,
	(![L,W]: 
		(
			(
				(
					(
						p__d__instance(L,c__LoadingWeapon)
					)
				 &
					(
						p__destination(L,W)
					)
				)
			)
			=>
			(
				p__d__instance(W,c__ProjectileLauncher)
			)
		)
	)
).


fof( miloA211, axiom,
	p__d__instance(c__effectiveRange,c__BinaryPredicate)
).


fof( miloA212, axiom,
	p__d__instance(c__effectiveRange,c__SingleValuedRelation)
).


fof( miloA213, axiom,
	p__subrelation(c__effectiveRange,c__measure)
).


% 	($domain effectiveRange 1 Device)

% 	($domain effectiveRange 2 LengthMeasure)


% ($documentation effectiveRange EnglishLanguage "Models the effective range of some
% device that is able to move by itself (like vehicles, rockets and so
% on) or move other things (like weapons).")


% ($comment 
% ;; effectiveRange of weapons means the ability to damage objects
% )

% 	(forall (?LM1 ?LM ?DAMAGING ?O ?GUN)
% 		(=> 
% 			(and 
% 				($instance ?GUN Gun)
% 				(effectiveRange ?GUN ?LM)
% 				(distance ?GUN ?O ?LM1)
% 				(not 
% 					(exists (?O2)
% 						(between ?O ?O2 ?GUN)
% 					)
% 				)
% 				(lessThanOrEqualTo ?LM1 ?LM)
% 			)
% 			(capability (KappaFn ?DAMAGING (and ([|] ($instance ?DAMAGING Damaging) ([|] (patient ?DAMAGING ?O) [])))) instrument ?GUN)
% 		)
% 	)

% ($comment 
% ;; effectiveRange of weapons means the ability to kill living things
% )

% 	(forall (?LM1 ?LM ?KILLING ?O ?GUN)
% 		(=> 
% 			(and 
% 				($instance ?GUN Gun)
% 				(effectiveRange ?GUN ?LM)
% 				(distance ?GUN ?O ?LM1)
% 				($instance ?O Organism)
% 				(not 
% 					(exists (?O2)
% 						(between ?O ?O2 ?GUN)
% 					)
% 				)
% 				(lessThanOrEqualTo ?LM1 ?LM)
% 			)
% 			(capability (KappaFn ?KILLING (and ([|] ($instance ?KILLING Killing) ([|] (patient ?KILLING ?O) [])))) instrument ?GUN)
% 		)
% 	)

fof( miloA218, axiom,
	p__d__subclass(c__GunStock,c__EngineeringComponent)
).



% ($documentation GunStock EnglishLanguage "The part of a &%Gun that is placed against the 
% shoulder to absorb some of the recoil action when it is fired.")


fof( miloA219, axiom,
	(![STOCK]: 
		(
			(
				p__d__instance(STOCK,c__GunStock)
			)
			=>
			(
				(?[GUN]: 
					(
						(
							(
								p__d__instance(GUN,c__Gun)
							)
						 &
							(
								p__part(STOCK,GUN)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA220, axiom,
	p__d__subclass(c__WeaponOfMassDestruction,c__Weapon)
).



% ($documentation WeaponOfMassDestruction EnglishLanguage "Nuclear, chemical and biological weapons.  
% What these weapons have in common is that they are designed to kill large numbers 
% of people indiscriminately.")


% ($comment 
% ;; KJN: Moving to WMD.kif as BiochemicalWeapon is defined there
% ;;($subclass RadioactiveWeapon WeaponOfMassDestruction)
% ;;($disjoint RadioactiveWeapon BiochemicalWeapon)
% ;;(documentation RadioactiveWeapon EnglishLanguage "A &%WeaponOfMassDestruction which 
% ;;achieves its effect through radioactivity, either by an explosion resulting 
% ;;from nuclear fission or by a conventional explosive device that scatters 
% ;;radioactive debris.")
% ;;
% ;;(documentation RadiologicalWeapon EnglishLanguage "&%Weapons which are designed to spread 
% ;;radioactive particles over a large area by means of a conventional 
% ;;explosive device rather than a nuclear reaction.  These weapons are often 
% ;;referred to as 'dirty bombs'.")
% ;;($subclass RadiologicalWeapon RadioactiveWeapon)
% ;;
% ;;($subclass NuclearWeapon ExplosiveDevice)
% ;;($subclass NuclearWeapon Weapon)
% ;;(documentation NuclearWeapon EnglishLanguage "An &%ExplosiveDevice and &%RadioactiveWeapon
% ;;which achieves its effect by means of a critical mass of a radioactive substance.")
% ;;($subclass NuclearWeapon RadioactiveWeapon)
% ;;
% ;;(=>
% ;;  ($instance ?W NuclearWeapon)
% ;;  (capability RadiatingNuclear instrument ?W))
% )

fof( miloA221, axiom,
	p__d__subclass(c__Handle,c__EngineeringComponent)
).



% ($documentation Handle EnglishLanguage "The part or parts of an &%Artifact that are designed to be 
% held with the &%Hands when the &%Artifact is used or carried.")


% 	(forall (?H ?G ?D)
% 		(=> 
% 			($instance ?H Handle)
% 			(hasPurpose ?H (exists ([|] ?G ([|] ?D [])) (and ([|] ($instance ?G Grabbing) ([|] (patient ?G ?H) ([|] (instrument ?G ?D) ([|] ($instance ?D Hand) [])))))))
% 		)
% 	)

fof( miloA223, axiom,
	p__d__subclass(c__Shield,c__Artifact)
).



% ($documentation Shield EnglishLanguage "An &%Artifact that is held by the hand or whole arm and 
% is used to prevent injuries from &%Weapons.")


% 	(forall (?S ?W ?I ?P ?H)
% 		(=> 
% 			($instance ?S Shield)
% 			(hasPurpose ?S (exists ([|] ?P ([|] ?H [])) (and ([|] ($instance ?P Protecting) ([|] (instrument ?P ?S) ([|] ($instance ?H Human) ([|] (patient ?P ?H) ([|] (prevents ?P (KappaFn ?I (and ([|] ($instance ?I Injuring) ([|] (exists ([|] ?W []) (and ([|] ($instance ?W Weapon) ([|] (instrument ?I ?W) [])))) ([|] (implies (patient ?I ?H) (not (patient ?P ?H))) [])))))) []))))))))
% 		)
% 	)

fof( miloA225, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Shield)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__Handle)
							)
						 &
							(
								p__part(H,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA226, axiom,
	p__d__subclass(c__Mast,c__Artifact)
).



% ($documentation Mast EnglishLanguage "A large pole in the center of a &%WaterVehicle which is 
% used to support a sail.")


fof( miloA227, axiom,
	(![M]: 
		(
			(
				p__d__instance(M,c__Mast)
			)
			=>
			(
				(?[W]: 
					(
						(
							(
								p__d__instance(W,c__WaterVehicle)
							)
						 &
							(
								p__part(M,W)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moving this to Engineering.kif         
% ;;($subclass Rotor EngineeringComponent)
% ;;(documentation Rotor EnglishLanguage "The &%Rotating component of a motor, generator or similar 
% ;;&%Device.")
% ;;
% ;;(=>
% ;;  ($instance ?R Rotor)
% ;;  (capability Rotating instrument ?R))
% )

fof( miloA228, axiom,
	p__d__subclass(c__WingDevice,c__EngineeringComponent)
).



% ($documentation WingDevice EnglishLanguage "The wings of &%Aircraft, i.e. the parts of &%Aircraft 
% that allow them to become and remain airborne.")


fof( miloA229, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__WingDevice)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Aircraft)
							)
						 &
							(
								p__part(W,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA230, axiom,
	p__d__subclass(c__Tube,c__Artifact)
).



% ($documentation Tube EnglishLanguage "A long, narrow, and hollow &%Artifact that is designed for 
% moving &%Fluids from place to another.")


% 	(forall (?T ?P ?OBJ)
% 		(=> 
% 			($instance ?T Tube)
% 			(hasPurpose ?T (exists ([|] ?P ([|] ?OBJ [])) (and ([|] ($instance ?P Transfer) ([|] (path ?P ?T) ([|] (patient ?P ?OBJ) ([|] (attribute ?OBJ Fluid) [])))))))
% 		)
% 	)

fof( miloA232, axiom,
	p__d__subclass(c__PhotographicFilm,c__Artifact)
).



% ($documentation PhotographicFilm EnglishLanguage "Celluloid covered with an emulsion which can 
% be converted into photographic negatives by a &%Camera.")


fof( miloA233, axiom,
	p__d__subclass(c__PictureFrame,c__Artifact)
).



% ($documentation PictureFrame EnglishLanguage "A frame which surrounds a &%PaintedPicture or 
% &%Photograph and has the function of protecting and accenting the picture.")


% 	(forall (?F ?P)
% 		(=> 
% 			($instance ?F PictureFrame)
% 			(hasPurpose ?F (exists ([|] ?P []) (and ([|] (meetsSpatially ?F ?P) ([|] (or ([|] ($instance ?P PaintedPicture) ([|] ($instance ?P Photograph) []))) [])))))
% 		)
% 	)

fof( miloA235, axiom,
	p__d__subclass(c__Shelf,c__Artifact)
).



% ($documentation Shelf EnglishLanguage "An piece of &%Furniture or part of a piece of &%Furniture 
% that is used for keeping or displaying things.")


fof( miloA236, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Shelf)
			)
			=>
			(
				(?[F]: 
					(
						(
							(
								p__d__instance(F,c__Furniture)
							)
						 &
							(
								p__part(S,F)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA237, axiom,
	p__d__subclass(c__AutomaticGun,c__Gun)
).



% ($documentation AutomaticGun EnglishLanguage "A &%Gun that fires a burst of &%Projectiles 
% with each pull of the trigger.  Also known as a machine gun.")


% 	(forall (?T ?G ?S1 ?P ?S2)
% 		(=> 
% 			($instance ?G AutomaticGun)
% 			(hasPurpose ?G (exists ([|] ?S1 ([|] ?S2 ([|] ?P ([|] ?T [])))) (and ([|] ($instance ?P Pulling) ([|] ($instance ?T GunTrigger) ([|] (patient ?P ?T) ([|] (part ?T ?G) ([|] ($instance ?S1 Shooting) ([|] ($instance ?S2 Shooting) ([|] (instrument ?S1 ?G) ([|] (instrument ?S2 ?G) ([|] (not (equal ?S1 ?S2)) ([|] (causes ?P ?S1) ([|] (causes ?P ?S2) []))))))))))))))
% 		)
% 	)

% 	(forall (?T ?G ?P ?S)
% 		(=> 
% 			($instance ?T GunTrigger)
% 			(hasPurpose ?T (exists ([|] ?S ([|] ?G ([|] ?P []))) (and ([|] ($instance ?G AutomaticGun) ([|] (part ?T ?G) ([|] (patient ?P ?T) ([|] ($instance ?P Pulling) ([|] ($instance ?S Shooting) ([|] (instrument ?S ?G) ([|] (causes ?P ?S) []))))))))))
% 		)
% 	)

fof( miloA240, axiom,
	p__d__subclass(c__ArtilleryGun,c__Gun)
).



% ($documentation ArtilleryGun EnglishLanguage "A &%Gun that is too large to be carried and fired 
% by a single &%Human.  Typically, &%ArtilleryGuns are on wheels.") 


fof( miloA241, axiom,
	p__d__subclass(c__Firearm,c__Gun)
).


fof( miloA242, axiom,
	p__d__partition3(c__Firearm,c__Rifle,c__Pistol)
).



% ($documentation Firearm EnglishLanguage "A &%Gun that is small enough to be carried and fired by 
% a single &%Human.")


fof( miloA243, axiom,
	p__d__subclass(c__Rifle,c__Firearm)
).



% ($documentation Rifle EnglishLanguage "A &%Firearm with a long barrel that is intended to be fired 
% from the shoulder.")


fof( miloA244, axiom,
	p__d__subclass(c__Pistol,c__Firearm)
).



% ($documentation Pistol EnglishLanguage "A &%Firearm that is intended to be aimed and fired with a 
% single hand.")


fof( miloA245, axiom,
	p__d__subclass(c__RevolverGun,c__Pistol)
).



% ($documentation RevolverGun EnglishLanguage "A &%Pistol whose magazine is a revolving cylinder with 
% six chambers for &%Bullets.")


fof( miloA246, axiom,
	p__d__instance(c__ContainerEmpty,c__RelationalAttribute)
).



% ($documentation ContainerEmpty EnglishLanguage "&%ContainerEmpty is the &%Attribute of a 
% &%Container that is empty.")


fof( miloA247, axiom,
	(![C]: 
		(
			(
				(
					(
						p__d__instance(C,c__Object)
					)
				 &
					(
						p__attribute(C,c__ContainerEmpty)
					)
				)
			)
			=>
			(
				p__d__instance(C,c__Container)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misplaced variables
% ;;
% ;;(=>
% ;;  (attribute ?C ContainerEmpty)
% ;;  (not 
% ;;    (exists (?H ?S)
% ;;      (and 
% ;;        ($instance ?H Hole)
% ;;        (hole ?H ?C)
% ;;        (partiallyFills ?S ?C)))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA248, axiom,
	(![C]: 
		(
			(
				(
					(
						p__d__instance(C,c__SelfConnectedObject)
					)
				 &
					(
						p__attribute(C,c__ContainerEmpty)
					)
				)
			)
			=>
			(
				(![H,S]: 
					(
						(
							~ (
								p__d__instance(H,c__Hole)
							)
						 |
							~ (
								p__d__instance(S,c__Object)
							)
						 |
							~ (
								p__hole(H,C)
							)
						 |
							~ (
								p__partiallyFills(S,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA249, axiom,
	p__d__instance(c__ContainerFull,c__RelationalAttribute)
).


fof( miloA250, axiom,
	p__contraryAttribute2(c__ContainerFull,c__ContainerEmpty)
).



% ($documentation ContainerFull EnglishLanguage "&%ContainerFull is the &%Attribute of a 
% &%Container that is full to capacity.")


fof( miloA251, axiom,
	(![C]: 
		(
			(
				(
					(
						p__d__instance(C,c__Object)
					)
				 &
					(
						p__attribute(C,c__ContainerFull)
					)
				)
			)
			=>
			(
				p__d__instance(C,c__Container)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misplaced variables
% ;;
% ;;(=>
% ;;  (attribute ?C ContainerFull)
% ;;  (exists (?H ?S)
% ;;    (and 
% ;;      ($instance ?H Hole)
% ;;      (hole ?H ?C)
% ;;      (fills ?S ?C))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA252, axiom,
	(![C]: 
		(
			(
				(
					(
						p__d__instance(C,c__SelfConnectedObject)
					)
				 &
					(
						p__attribute(C,c__ContainerFull)
					)
				)
			)
			=>
			(
				(?[H,S]: 
					(
						(
							(
								p__d__instance(H,c__Hole)
							)
						 &
							(
								p__d__instance(S,c__Object)
							)
						 &
							(
								p__hole(H,C)
							)
						 &
							(
								p__fills(S,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA253, axiom,
	p__d__subclass(c__Holster,c__Container)
).



% ($documentation Holster EnglishLanguage "A &%Container for a &%Pistol.  It is generally made of 
% Leather and worn on either the shoulder or the waist.")


% 	(forall (?H ?P)
% 		(=> 
% 			($instance ?H Holster)
% 			(hasPurpose ?H (exists ([|] ?P []) (and ([|] ($instance ?P Pistol) ([|] (contains ?H ?P) [])))))
% 		)
% 	)

fof( miloA255, axiom,
	p__d__subclass(c__Wastebasket,c__Container)
).



% ($documentation Wastebasket EnglishLanguage "A &%Container which is used for trash.")


fof( miloA256, axiom,
	p__d__subclass(c__ArrowProjectile,c__Projectile)
).



% ($documentation ArrowProjectile EnglishLanguage "A long, thin &%Projectile with a pointed tip is 
% fired from a bow.")


fof( miloA257, axiom,
	p__d__subclass(c__DriveComponent,c__EngineeringComponent)
).



% ($documentation DriveComponent EnglishLanguage "An &%EngineeringComponent whose purpose is to 
% transfer force from one part of a &%Device to another part.")


% ($comment 
% ;; KJN: Moving this to Economy.kif as the definition for MiningProduct is found there
% ;;($subclass PetroleumProduct MiningProduct)
% )

fof( miloA258, axiom,
	p__d__subclass(c__PetroleumProduct,c__Oil)
).



% ($documentation PetroleumProduct EnglishLanguage "&%PetroleumProduct is a broad class that 
% includes both crude oil (Petroleum) and &%RefinedPetroleumProducts.")


fof( miloA259, axiom,
	(![PP]: 
		(
			(
				p__d__instance(PP,c__PetroleumProduct)
			)
			=>
			(
				(?[O]: 
					(
						(
							(
								p__d__instance(O,c__OrganicCompound)
							)
						 &
							(
								p__part(O,PP)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA260, axiom,
	p__d__subclass(c__FossilFuel,c__Fuel)
).


fof( miloA261, axiom,
	p__d__subclass(c__FossilFuel,c__PetroleumProduct)
).



% ($documentation FossilFuel EnglishLanguage "&%FossilFuel is the subclass of &%Fuel whose 
% instances are derived from fossilized organic deposits, such as &%Coal 
% and &%LiquefiedPetroleumGas.")


fof( miloA262, axiom,
	p__d__subclass(c__Fuel,c__Substance)
).



% ($documentation Fuel EnglishLanguage "Fuel is the class of &%Substances that can be 
% used as resources in Combustion processes in order to produce heat.  
% Mechanical energy can be produced by burning fuel in an &%Engine.")


fof( miloA263, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__FossilFuel)
			)
			=>
			(
				p__attribute(X,c__Flammable)
			)
		)
	)
).


fof( miloA264, axiom,
	p__d__subclass(c__Wax,c__Substance)
).



% ($documentation Wax EnglishLanguage "Any &%Substance of high molecular weight that resembles 
% beeswax.")


fof( miloA265, axiom,
	p__d__subclass(c__LiquefiedPetroleumGas,c__FossilFuel)
).


% ($comment 
% ;; KJN: Moving this to Economy.kif as the definition for RefinedPetroleumProduct is there
% ;;($subclass LiquefiedPetroleumGas RefinedPetroleumProduct)
% )


% ($documentation LiquefiedPetroleumGas EnglishLanguage "&%LiquefiedPetroleumGas is a 
% compressed hydrocarbon gas.")


fof( miloA266, axiom,
	p__d__subclass(c__Gasoline,c__FossilFuel)
).



% ($documentation Gasoline EnglishLanguage "&%Gasoline is the subclass of 
% RefinedPetroleumProducts that are fuels for internal combustion engines.")


fof( miloA267, axiom,
	p__d__subclass(c__DieselFuel,c__FossilFuel)
).



% ($documentation DieselFuel EnglishLanguage "&%DieselFuel is the subclass of 
% RefinedPetroleumProducts that are fuels for diesel engines.")



% ($documentation Transducer EnglishLanguage "A &%Device which is capable of converting one 
% form of energy into another.  Formally, a &%Twoport that neither stores 
% nor dissipates, but only transfers energy between its two ports.") 


fof( miloA268, axiom,
	p__d__subclass(c__Transducer,c__Device)
).


fof( miloA269, axiom,
	p__d__subclass(c__Engine,c__Transducer)
).



% ($documentation Engine EnglishLanguage "Engine is a subclass of &%Transducer.  &%Engines 
% are devices for converting some form of energy resource into mechanical 
% power.")



% ($documentation powerPlant EnglishLanguage "(powerPlant ?GENERATOR ?THING) means that 
% the &%Device ?GENERATOR is the power-producing component of the &%Artifact 
% ?THING which provides the energy for its operation.")


fof( miloA270, axiom,
	p__d__instance(c__powerPlant,c__BinaryPredicate)
).


fof( miloA271, axiom,
	p__d__instance(c__powerPlant,c__AsymmetricRelation)
).


fof( miloA272, axiom,
	p__d__instance(c__powerPlant,c__IrreflexiveRelation)
).


% 	($domain powerPlant 1 Device)

% 	($domain powerPlant 2 Artifact)

fof( miloA275, axiom,
	p__subrelation(c__powerPlant,c__component)
).


fof( miloA276, axiom,
	(![G,O]: 
		(
			(
				(
					(
						p__d__instance(G,c__Device)
					)
				 &
					(
						p__powerPlant(G,O)
					)
				 &
					(
						p__d__instance(O,c__Device)
					)
				)
			)
			=>
			(
				p__d__instance(O,c__SelfPoweredDevice)
			)
		)
	)
).


fof( miloA277, axiom,
	(![O,G]: 
		(
			(
				(
					(
						p__d__instance(O,c__Artifact)
					)
				 &
					(
						p__d__instance(G,c__Device)
					)
				 &
					(
						p__powerPlant(G,O)
					)
				)
			)
			=>
			(
				(
					p__d__instance(G,c__Engine)
				 |
					p__d__instance(G,c__Battery)
				)
			)
		)
	)
).


fof( miloA278, axiom,
	p__d__subclass(c__SteamEngine,c__Engine)
).



% ($documentation SteamEngine EnglishLanguage "&%SteamEngine is the subclass of &%Engines 
% that produce mechanical power from heat and steam pressure.")


fof( miloA279, axiom,
	p__d__subclass(c__Turbine,c__Engine)
).



% ($documentation Turbine EnglishLanguage "An &%Engine which converts the kinetic energy of a moving 
% &%Liquid (typically &%Water) into mechanical energy.")


fof( miloA280, axiom,
	p__d__subclass(c__Windmill,c__Engine)
).



% ($documentation Windmill EnglishLanguage "Windmill is the subclass of &%Engines that 
% produce mechanical power from &%Wind energy.")


fof( miloA281, axiom,
	p__d__subclass(c__InternalCombustionEngine,c__Engine)
).



% ($documentation InternalCombustionEngine EnglishLanguage "&%InternalCombustionEngine is 
% the subclass of &%Engines in which a heat reaction that occurs inside 
% the engine is transformed into mechanical energy.")


% 	(forall (?R)
% 		(=> 
% 			($instance ?R (OperatingFn InternalCombustionEngine))
% 			(exists (?E ?C ?F)
% 				(and 
% 					($instance ?E InternalCombustionEngine)
% 					(instrument ?R ?E)
% 					(hole ?C ?E)
% 					($instance ?F Combustion)
% 					(completelyFills ?F ?C)
% 				)
% 			)
% 		)
% 	)

fof( miloA283, axiom,
	p__d__subclass(c__Manifold,c__EngineeringComponent)
).



% ($documentation Manifold EnglishLanguage "A pipe which has several outlets for other pipes that flow 
% into or out of it.")


fof( miloA284, axiom,
	p__d__subclass(c__ElectricMotor,c__Engine)
).


fof( miloA285, axiom,
	p__d__subclass(c__ElectricMotor,c__ElectricDevice)
).



% ($documentation ElectricMotor EnglishLanguage "&%ElectricMotor is the subclass of &%Engines 
% that produce mechanical power from electricity.")


fof( miloA286, axiom,
	p__d__subclass(c__SwitchDevice,c__EngineeringComponent)
).



% ($documentation SwitchDevice EnglishLanguage "An &%EngineeringComponent which is capable of turning 
% an &%ElectricDevice on and off.")


fof( miloA287, axiom,
	(![DEVICE]: 
		(
			(
				p__d__instance(DEVICE,c__SwitchDevice)
			)
			=>
			(
				(?[PROC1,PROC2,ELECTRIC]: 
					(
						(
							(
								p__d__instance(PROC1,c__Process)
							)
						 &
							(
								p__d__instance(PROC2,c__Process)
							)
						 &
							(
								p__instrument(PROC1,DEVICE)
							)
						 &
							(
								p__causes(PROC1,PROC2)
							)
						 &
							(
								p__instrument(PROC2,ELECTRIC)
							)
						 &
							(
								p__d__instance(ELECTRIC,c__ElectricDevice)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA288, axiom,
	p__d__subclass(c__Microphone,c__ElectricDevice)
).


fof( miloA289, axiom,
	p__d__subclass(c__Microphone,c__CommunicationDevice)
).



% ($documentation Microphone EnglishLanguage "A &%CommunicationDevice that converts sound 
% into electrical energy.")


fof( miloA290, axiom,
	p__d__subclass(c__ReceiverDevice,c__CommunicationDevice)
).


fof( miloA291, axiom,
	p__d__subclass(c__ReceiverDevice,c__ElectricDevice)
).



% ($documentation ReceiverDevice EnglishLanguage "An &%ElectricDevice that is capable of 
% receiving and decoding &%RadioEmissions, e.g. &%Radios and &%Televisions.")


fof( miloA292, axiom,
	(![E,D]: 
		(
			(
				(
					(
						p__d__instance(E,c__RadioEmission)
					)
				 &
					(
						p__destination(E,D)
					)
				)
			)
			=>
			(
				p__d__instance(D,c__ReceiverDevice)
			)
		)
	)
).


fof( miloA293, axiom,
	p__d__subclass(c__Telegraph,c__ElectricDevice)
).


fof( miloA294, axiom,
	p__d__subclass(c__Telegraph,c__CommunicationDevice)
).



% ($documentation Telegraph EnglishLanguage "A &%Device that permits &%LinguisticCommunication 
% between remote points by means of a code of aural dots and dashes that can 
% be converted into letters of an alphabet.")


fof( miloA295, axiom,
	p__d__subclass(c__ProjectionScreen,c__CommunicationDevice)
).



% ($documentation ProjectionScreen EnglishLanguage "A &%CommunicationDevice upon which images 
% are projected so that they can be viewed.")


fof( miloA296, axiom,
	p__d__subclass(c__Pencil,c__WritingDevice)
).



% ($documentation Pencil EnglishLanguage "A &%WritingDevice that consists of an encased piece of 
% graphite.")


% ($comment 
% ;; NS: delete.  In general, it's bad practice to list
% ;; instances or subclasses in documentation, except as
% ;; designated examples.  Otherwise, changes to the file (or
% ;; another domain file) tend to make the documentation
% ;; obsolete.
% ;; (documentation DeviceAttribute EnglishLanguage "This class
% ;; contains two &%Attributes to indicate whether a &%Device is or is
% ;; not behaving as it is intended to behave, &%Functioning and
% ;; &%Malfunctioning.")
% ;;
% ;; NS: add.
% )

fof( miloA297, axiom,
	p__d__subclass(c__DeviceAttribute,c__ObjectiveNorm)
).



% ($documentation DeviceAttribute EnglishLanguage "This class
% contains &%Attributes that indicate how a &%Device is
% behaving with respect to some norm or expectation.
% Examples: &%Functioning, &%Malfunctioning.")


fof( miloA298, axiom,
	(![ATTRIBUTE,DEVICE]: 
		(
			(
				(
					(
						p__d__instance(DEVICE,c__Object)
					)
				 &
					(
						p__attribute(DEVICE,ATTRIBUTE)
					)
				 &
					(
						p__d__instance(ATTRIBUTE,c__DeviceAttribute)
					)
				)
			)
			=>
			(
				p__d__instance(DEVICE,c__Device)
			)
		)
	)
).


fof( miloA299, axiom,
	p__d__instance(c__Functioning,c__DeviceAttribute)
).


fof( miloA300, axiom,
	p__contraryAttribute2(c__Functioning,c__Malfunctioning)
).



% ($documentation Functioning EnglishLanguage "Indicates that a &%Device is performing its 
% intended function.")


fof( miloA301, axiom,
	(![DEVICE,PROP]: 
		(
			(
				(
					(
						p__d__instance(DEVICE,c__Object)
					)
				 &
					(
						p__d__instance(PROP,c__Formula)
					)
				 &
					(
						p__attribute(DEVICE,c__Functioning)
					)
				 &
					(
						p__hasPurpose(DEVICE,PROP)
					)
				)
			)
			=>
			(
				p__truth(PROP,c__True)
			)
		)
	)
).


fof( miloA302, axiom,
	p__d__instance(c__Malfunctioning,c__DeviceAttribute)
).



% ($documentation Malfunctioning EnglishLanguage "Indicates that a &%Device is not performing 
% its intended function.")


fof( miloA303, axiom,
	(![DEVICE,PROP]: 
		(
			(
				(
					(
						p__d__instance(DEVICE,c__Object)
					)
				 &
					(
						p__d__instance(PROP,c__Formula)
					)
				 &
					(
						p__attribute(DEVICE,c__Malfunctioning)
					)
				 &
					(
						p__hasPurpose(DEVICE,PROP)
					)
				)
			)
			=>
			(
				p__truth(PROP,c__False)
			)
		)
	)
).


% ($comment 
% ;; NS: delete.  This is wrong, because attributes such as
% ;; Malfunctioning and Functioning are instances of
% ;; ObjectiveNorm and, so, of RelationalAttribute.  Instances
% ;; of DeviceStateAttribute (DeviceOn, DeviceOff, etc.)
% ;; probably should be considered instances of
% ;; InternalAttribute, since they aren't "normative", but
% ;; rather simply descriptive of a device's state.
% ;;
% ;; ($subclass DeviceStateAttribute DeviceAttribute)
% ;;
% ;; NS: add.
% )

fof( miloA304, axiom,
	p__d__subclass(c__DeviceStateAttribute,c__InternalAttribute)
).



% ($documentation DeviceStateAttribute EnglishLanguage
% "&%DeviceStateAttribute is the class of attributes that represent
% different states that a Device may be in.  Examples: &%DeviceOff,
% &%DeviceOn, &%DeviceOpen, and &%DeviceClosed.")


fof( miloA305, axiom,
	p__d__instance(c__DeviceClosed,c__DeviceStateAttribute)
).


% ($comment 
% ;; NS: delete.  Now inconsistent.
% ;; ($instance DeviceClosed RelationalAttribute)
% ;;
% ;; NS: The treatment of attributes in MILO and even in SUMO
% ;; is confused, and confusing.  The partition of Attribute
% ;; into InternalAttribute and RelationalAttribute is not
% ;; explained well enough to prevent it from seeming
% ;; spurious.  I suspect that InternalAttribute was intended
% ;; to mean (and, perhaps, should be renamed to)
% ;; *IntrinsicAttribute.  There are no rules associated with
% ;; either InternalAttribute or RelationalAttribute, so the
% ;; basis of the partition and its utility are a little hazy.
% )

fof( miloA306, axiom,
	p__d__instance(c__DeviceOff,c__DeviceStateAttribute)
).


% ($comment 
% ;; NS: delete.  Now redundant.
% ;; ($instance DeviceOff InternalAttribute)
% )

fof( miloA307, axiom,
	p__d__instance(c__DeviceOn,c__DeviceStateAttribute)
).


% ($comment 
% ;; NS: delete.  Now redundant.
% ;; ($instance DeviceOn InternalAttribute)
% )

fof( miloA308, axiom,
	p__d__instance(c__DeviceOpen,c__DeviceStateAttribute)
).


% ($comment 
% ;; NS: delete.  Now inconsistent.
% ;; ($instance DeviceOpen RelationalAttribute)
% )


% ($documentation deviceState EnglishLanguage "(deviceState ?DEVICE ?STATE) means that 
% the &%Object ?DEVICE is in the &%DeviceStateAttribute ?STATE.")


fof( miloA309, axiom,
	p__d__instance(c__deviceState,c__BinaryPredicate)
).


% 	($domain deviceState 1 Object)

% 	($domain deviceState 2 DeviceStateAttribute)

fof( miloA312, axiom,
	p__subrelation(c__deviceState,c__attribute)
).


fof( miloA313, axiom,
	p__d__subclass(c__Aerator,c__Device)
).



% ($documentation Aerator EnglishLanguage "A &%Device whose purpose is to mix &%Substances with 
% &%Air.")


% 	(forall (?AIR ?COMBINE ?AERATOR)
% 		(=> 
% 			($instance ?AERATOR Aerator)
% 			(hasPurpose ?AERATOR (exists ([|] ?COMBINE ([|] ?AIR [])) (and ([|] ($instance ?COMBINE Combining) ([|] (resource ?COMBINE ?AIR) ([|] ($instance ?AIR Air) ([|] (instrument ?COMBINE ?AERATOR) [])))))))
% 		)
% 	)

fof( miloA315, axiom,
	p__d__subclass(c__Aerating,c__Combining)
).



% ($documentation Aerating EnglishLanguage "Combining a substance with &%Air.")


fof( miloA316, axiom,
	(![AERATE]: 
		(
			(
				p__d__instance(AERATE,c__Aerating)
			)
			=>
			(
				(?[AIR,S]: 
					(
						(
							(
								p__d__instance(S,c__Object)
							)
						 &
							(
								p__patient(AERATE,AIR)
							)
						 &
							(
								p__d__instance(AIR,c__Air)
							)
						 &
							(
								p__patient(AERATE,S)
							)
						 &
							(
								p__attribute(S,c__Liquid)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA317, axiom,
	p__d__subclass(c__Broom,c__BrushOrComb)
).



% ($documentation Broom EnglishLanguage "A &%BrushOrComb whose purpose is to remove dirt and other 
% small particles from floors.")


% 	(forall (?S ?B)
% 		(=> 
% 			($instance ?B Broom)
% 			(hasPurpose ?B (exists ([|] ?S []) (and ([|] ($instance ?S Sweeping) ([|] (instrument ?S ?B) [])))))
% 		)
% 	)

fof( miloA319, axiom,
	p__d__subclass(c__BrushOrComb,c__Device)
).



% ($documentation BrushOrComb EnglishLanguage "A &%Device which consists of a handle and bristles and 
% whose purpose is to remove particles from something or to smooth something out.")


% 	(forall (?S ?B)
% 		(=> 
% 			($instance ?B BrushOrComb)
% 			(hasPurpose ?B (exists ([|] ?S []) (and ([|] (or ([|] ($instance ?S Removing) ([|] ($instance ?S SurfaceChange) []))) ([|] (instrument ?S ?B) [])))))
% 		)
% 	)

fof( miloA321, axiom,
	p__d__subclass(c__MatchDevice,c__Device)
).



% ($documentation MatchDevice EnglishLanguage "A small stick of carboard or wood that is treated 
% with chemicals that can be easily ignited with friction.  MatchDevices are 
% used for starting fires.")


% 	(forall (?M)
% 		(=> 
% 			($instance ?M MatchDevice)
% 			(capability (StartFn Combustion) instrument ?M)
% 		)
% 	)

fof( miloA323, axiom,
	p__d__subclass(c__VendingDevice,c__Device)
).



% ($documentation VendingDevice EnglishLanguage "A &%Device which is capable of &%Selling a &%Product 
% to a customer automatically when the customer inserts the appropriate amount of 
% Currency.")


% 	(forall (?VD ?C ?T ?P)
% 		(=> 
% 			($instance ?VD VendingDevice)
% 			(hasPurpose ?VD (exists ([|] ?T ([|] ?C ([|] ?P []))) (and ([|] ($instance ?T FinancialTransaction) ([|] (instrument ?T ?VD) ([|] (patient ?T ?C) ([|] ($instance ?C Currency) ([|] (patient ?T ?P) ([|] ($instance ?P Product) [])))))))))
% 		)
% 	)

fof( miloA325, axiom,
	p__d__subclass(c__WritingDevice,c__Device)
).



% ($documentation WritingDevice EnglishLanguage "A &%Device whose purpose is to be an instrument 
% of &%Writing, e.g. pens, pencils, crayons, etc.")


% 	(forall (?W ?D)
% 		(=> 
% 			($instance ?D WritingDevice)
% 			(hasPurpose ?D (exists ([|] ?W []) (and ([|] ($instance ?W Writing) ([|] (instrument ?W ?D) [])))))
% 		)
% 	)

fof( miloA327, axiom,
	p__d__subclass(c__SmokingDevice,c__Device)
).



% ($documentation SmokingDevice EnglishLanguage "Any Device whose purpose is &%Smoking.")


% 	(forall (?S ?D)
% 		(=> 
% 			($instance ?D SmokingDevice)
% 			(hasPurpose ?D (exists ([|] ?S []) (and ([|] ($instance ?S Smoking) ([|] (instrument ?S ?D) [])))))
% 		)
% 	)

fof( miloA329, axiom,
	p__d__subclass(c__SmokingPipe,c__SmokingDevice)
).



% ($documentation SmokingPipe EnglishLanguage "A &%SmokingDevice consisting of a tube and a small 
% bowl.")


fof( miloA330, axiom,
	p__d__subclass(c__Shower,c__BathingDevice)
).



% ($documentation Shower EnglishLanguage "&%Shower refers to a plumbing fixture that
% sprays water over you.")


% (termFormat EnglishLanguage Shower "shower")

% 	(forall (?SPRAY ?SHOWER)
% 		(=> 
% 			($instance ?SHOWER Shower)
% 			(hasPurpose ?SHOWER (exists ([|] ?SPRAY []) (and ([|] ($instance ?SPRAY WaterMotion) ([|] (origin ?SPRAY ?SHOWER) [])))))
% 		)
% 	)

fof( miloA332, axiom,
	(![SHOWER]: 
		(
			(
				p__d__instance(SHOWER,c__Shower)
			)
			=>
			(
				(?[X,FLOOR]: 
					(
						(
							(
								p__d__instance(X,c__Object)
							)
						 &
							(
								(
									p__d__instance(X,c__Wall)
								 |
									p__d__instance(X,c__Ceiling)
								)
							)
						 &
							(
								p__connected(SHOWER,X)
							)
						 &
							(
								p__d__instance(FLOOR,c__Floor)
							)
						 &
							(
								p__orientation(SHOWER,FLOOR,c__Above)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA333, axiom,
	p__d__subclass(c__BathTub,c__BathingDevice)
).


fof( miloA334, axiom,
	p__d__subclass(c__BathTub,c__FluidContainer)
).



% ($documentation BathTub BathingDevice "&%BathTub refers to a &%BathingDevice that you
% can fill with water to use to watch the body")


% (termFormat EnglishLanguage BathTub "tub")

% 	(forall (?TUB ?WATER)
% 		(=> 
% 			($instance ?TUB BathTub)
% 			(hasPurpose ?TUB (exists ([|] ?WATER []) (and ([|] ($instance ?WATER Water) ([|] (contains ?TUB ?WATER) [])))))
% 		)
% 	)

fof( miloA336, axiom,
	p__d__subclass(c__Excrement,c__BodySubstance)
).



% ($documentation Excrement EnglishLanguage "&%Excrement refers to the waste matter 
% that is discharged from the body")


% (termFormat EnglishLanguage Excrement "excrement")

fof( miloA337, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Excrement)
			)
			=>
			(
				(?[PROC,ORG]: 
					(
						(
							(
								p__d__instance(ORG,c__Organism)
							)
						 &
							(
								p__d__instance(PROC,c__PhysiologicProcess)
							)
						 &
							(
								p__result(PROC,X)
							)
						 &
							(
								p__agent(PROC,ORG)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA338, axiom,
	p__d__subclass(c__Feces,c__Excrement)
).



% ($documentation Feces EnglishLanguage "&%Feces is a type of &%Solid &%Excrement 
% evacuated from the bowels")


% (termFormat EnglishLanguage Feces "feces")

fof( miloA339, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Feces)
			)
			=>
			(
				p__attribute(X,c__Solid)
			)
		)
	)
).


fof( miloA340, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Feces)
			)
			=>
			(
				(?[PROC,INT]: 
					(
						(
							(
								p__d__instance(PROC,c__PhysiologicProcess)
							)
						 &
							(
								p__instrument(PROC,INT)
							)
						 &
							(
								p__d__instance(INT,c__Intestine)
							)
						 &
							(
								p__result(PROC,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA341, axiom,
	p__d__subclass(c__Urine,c__Excrement)
).



% ($documentation Urine EnglishLanguage "&%Urine is a type of &%Liquid &%Excrement that
% is secreted by the &%Kidney")


% (termFormat EnglishLanguage Urine "urine")

fof( miloA342, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Urine)
			)
			=>
			(
				p__attribute(X,c__Liquid)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misspelled variable
% ;;
% ;;(=>
% ;;  ($instance ?X Urine)
% ;;  (exists (?PROC ?KIDNEY)
% ;;    (and
% ;;      ($instance ?PROC PhysiologicProcess)
% ;;      (instrument ?PROC ?KIDNEY)
% ;;      ($instance ?KIDNEY Kidney)
% ;;      (result ?PROX ?X))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA343, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Urine)
			)
			=>
			(
				(?[PROC,KIDNEY]: 
					(
						(
							(
								p__d__instance(PROC,c__PhysiologicProcess)
							)
						 &
							(
								p__instrument(PROC,KIDNEY)
							)
						 &
							(
								p__d__instance(KIDNEY,c__Kidney)
							)
						 &
							(
								p__result(PROC,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA344, axiom,
	p__d__subclass(c__Excretion,c__OrganismProcess)
).



% ($documentation Excretion EnglishLanguage "&%Excretion is a type of &%OrganismProcess
% that discharges waste from tissues, organs or the body")


% (termFormat EnglishLanguage Excretion "excretion")

fof( miloA345, axiom,
	(![PROC]: 
		(
			(
				p__d__instance(PROC,c__Excretion)
			)
			=>
			(
				(?[ORG,WASTE,PART]: 
					(
						(
							(
								p__d__instance(ORG,c__Organism)
							)
						 &
							(
								p__agent(PROC,ORG)
							)
						 &
							(
								p__patient(PROC,WASTE)
							)
						 &
							(
								p__d__instance(WASTE,c__Excrement)
							)
						 &
							(
								p__d__instance(PART,c__BodyPart)
							)
						 &
							(
								p__instrument(PROC,PART)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA346, axiom,
	p__d__subclass(c__Urination,c__Excretion)
).



% ($documentation Urination EnglishLanguage "&%Urination is a type of &%Excretion that 
% discharges &%Urine")


% (termFormat EnglishLanguage Urination "urination")

fof( miloA347, axiom,
	(![PROC]: 
		(
			(
				p__d__instance(PROC,c__Urination)
			)
			=>
			(
				(?[URINE]: 
					(
						(
							(
								p__d__instance(URINE,c__Urine)
							)
						 &
							(
								p__patient(PROC,URINE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA348, axiom,
	p__d__subclass(c__Defecation,c__Excretion)
).



% ($documentation Defecation EnglishLanguage "&%Defecation is a type of &%Excretion that
% discharges &%Feces")


% (termFormat EnglishLanguage Defecation "defecation")

fof( miloA349, axiom,
	(![PROC]: 
		(
			(
				p__d__instance(PROC,c__Defecation)
			)
			=>
			(
				(?[FECES]: 
					(
						(
							(
								p__d__instance(FECES,c__Feces)
							)
						 &
							(
								p__patient(PROC,FECES)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA350, axiom,
	p__d__subclass(c__Sewage,c__Mixture)
).



% ($documentation Sewage EnglishLanguage "The byproduct of &%Animal digestion.  Sewage is a 
% waste product that is removed from the body of an animal by a normally
% functioning &%BiologicalProcess.  Sewage consists largely of substances
% which the animal cannot digest, or may be harmful, so the breakdown of 
% the biological waste removal process can be evidence or cause of a 
% &%DiseaseOrSyndrome.")


fof( miloA351, axiom,
	(![D,ANI]: 
		(
			(
				(
					(
						p__d__instance(ANI,c__Animal)
					)
				 &
					(
						p__d__instance(D,c__DiseaseOrSyndrome)
					)
				 &
					(
						~ (
							p__attribute(ANI,D)
						)
					)
				)
			)
			=>
			(
				(?[P,W]: 
					(
						(
							(
								p__d__instance(P,c__BiologicalProcess)
							)
						 &
							(
								p__d__instance(P,c__Removing)
							)
						 &
							(
								p__origin(P,ANI)
							)
						 &
							(
								p__d__instance(W,c__Sewage)
							)
						 &
							(
								p__agent(P,ANI)
							)
						 &
							(
								p__patient(P,W)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA352, axiom,
	p__d__subclass(c__Bidet,c__WashingDevice)
).



% ($documentation Bidet EnglishLanguage "&%Bidet is a &%WashingDevice intended for
% washing genitals and the anal area while on the toilet")


% (termFormat EnglishLanguage Bidet "bidet")

% 	(forall (?PART ?X ?PROC ?WASH)
% 		(=> 
% 			($instance ?X Bidet)
% 			(hasPurpose ?X (exists ([|] ?PROC ([|] ?WASH ([|] ?PART []))) (and ([|] (or ([|] ($instance ?PROC Defecation) ([|] ($instance ?PROC Urination) []))) ([|] (instrument ?PROC ?PART) ([|] ($instance ?WASH Washing) ([|] (patient ?WASH ?PART) ([|] (instrument ?WASH ?X) ([|] (before (BeginFn (WhenFn ?PROC)) (BeginFn (WhenFn ?WASH))) [])))))))))
% 		)
% 	)

fof( miloA354, axiom,
	p__d__subclass(c__Toilet,c__Device)
).



% ($documentation Toilet EnglishLanguage "A &%Device for the disposal of wastes resulting from
% urination and defecation.")


fof( miloA355, axiom,
	(![T,R]: 
		(
			(
				(
					(
						p__located(T,R)
					)
				 &
					(
						p__d__instance(T,c__Toilet)
					)
				 &
					(
						p__d__instance(R,c__Room)
					)
				)
			)
			=>
			(
				p__d__instance(R,c__Bathroom)
			)
		)
	)
).


% 	(forall (?PROC ?X)
% 		(=> 
% 			($instance ?X Toilet)
% 			(hasPurpose ?X (exists ([|] ?PROC []) (and ([|] (or ([|] ($instance ?PROC Defecation) ([|] ($instance ?PROC Urination) []))) ([|] (destination ?PROC ?X) [])))))
% 		)
% 	)

fof( miloA357, axiom,
	p__d__subclass(c__Toothbrush,c__BrushOrComb)
).



% ($documentation Toothbrush EnglishLanguage "A small &%BrushOrComb with relatively soft
% bristles and a long handle, used for brushing teeth (see &%Tooth).  It is
% used help control bacteria living in the mouth.  While most typically used
% by humans on themselves, it can be used by &%Dentists on their
% patients and by adults assisting children.  They are occasionally used by
% humans caring for pets, zoo animals and valuable livestock.")


% 	(forall (?T ?B ?K ?TOOTH)
% 		(=> 
% 			($instance ?T Toothbrush)
% 			(hasPurpose ?T (exists ([|] ?K []) (and ([|] ($instance ?TOOTH Tooth) ([|] (instrument ?K ?T) ([|] ($instance ?K Killing) ([|] ($instance ?B Bacterium) ([|] (patient ?K ?B) ([|] (patient ?K ?TOOTH) [])))))))))
% 		)
% 	)

fof( miloA359, axiom,
	p__d__subclass(c__CigarOrCigarette,c__SmokingDevice)
).



% ($documentation CigarOrCigarette EnglishLanguage "A tube of thin paper containing finely ground 
% tobacco that is smoked.")


fof( miloA360, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__CigarOrCigarette)
			)
			=>
			(
				(?[T]: 
					(
						(
							(
								p__d__instance(T,c__Tobacco)
							)
						 &
							(
								p__part(T,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA361, axiom,
	p__d__subclass(c__Tableware,c__Device)
).



% ($documentation Tableware EnglishLanguage "&%Devices that are used in &%Ingesting (&%Eating 
% and/or &%Drinking) a meal.  This coves dishware, flatware, and glassware.")


% 	(forall (?I ?T)
% 		(=> 
% 			($instance ?T Tableware)
% 			(hasPurpose ?T (exists ([|] ?I []) (and ([|] ($instance ?I Ingesting) ([|] (instrument ?I ?T) [])))))
% 		)
% 	)

fof( miloA363, axiom,
	p__d__subclass(c__Compass,c__Device)
).


fof( miloA364, axiom,
	p__d__subclass(c__Compass,c__ContentBearingObject)
).



% ($documentation Compass EnglishLanguage "A &%Device that indicates the direction of the
% various &%DirectionalAttributes with respect to the device.")


fof( miloA365, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Compass)
			)
			=>
			(
				(?[D]: 
					(
						(
							(
								p__d__instance(D,c__DirectionalAttribute)
							)
						 &
							(
								p__represents(C,D)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA366, axiom,
	p__d__subclass(c__MajorAppliance,c__Device)
).


% ($comment 
% ;; TERMS - subclasses of &%MajorAppliance:
% )

fof( miloA367, axiom,
	p__d__subclass(c__Refrigerator,c__MajorAppliance)
).


fof( miloA368, axiom,
	p__d__subclass(c__Freezer,c__MajorAppliance)
).


fof( miloA369, axiom,
	p__d__subclass(c__CookingRange,c__MajorAppliance)
).


fof( miloA370, axiom,
	p__d__subclass(c__CookingOven,c__MajorAppliance)
).


fof( miloA371, axiom,
	p__d__subclass(c__HotWaterHeater,c__MajorAppliance)
).


fof( miloA372, axiom,
	p__d__subclass(c__ClothesWashingMachine,c__MajorAppliance)
).


fof( miloA373, axiom,
	p__d__subclass(c__ClothesDryer,c__MajorAppliance)
).


fof( miloA374, axiom,
	p__d__subclass(c__Dishwasher,c__MajorAppliance)
).


fof( miloA375, axiom,
	p__d__subclass(c__CoolingDevice,c__Device)
).



% ($documentation CoolingDevice EnglishLanguage "A &%Device whose purpose is &%Cooling something, 
% e.g. air conditioners, refrigerators, freezers, etc.")


% 	(forall (?C ?D)
% 		(=> 
% 			($instance ?D CoolingDevice)
% 			(hasPurpose ?D (exists ([|] ?C []) (and ([|] ($instance ?C Cooling) ([|] (instrument ?C ?D) [])))))
% 		)
% 	)

fof( miloA377, axiom,
	p__d__subclass(c__FanDevice,c__CoolingDevice)
).



% ($documentation FanDevice EnglishLanguage "A &%CoolingDevice which consists simply of one or more 
% blades that circulate the air.  Note that this class covers both electrical fans 
% and fans that are manually operated.")


% 	(forall (?W ?F)
% 		(=> 
% 			($instance ?F FanDevice)
% 			(hasPurpose ?F (exists ([|] ?W []) (and ([|] ($instance ?W Wind) ([|] (instrument ?W ?F) [])))))
% 		)
% 	)

fof( miloA379, axiom,
	p__d__subclass(c__HeatingDevice,c__Device)
).



% ($documentation HeatingDevice EnglishLanguage "A &%Device whose purpose is &%Heating something, 
% e.g. electric heaters, heat lamps, ovens, stoves, etc.")


% 	(forall (?H ?D)
% 		(=> 
% 			($instance ?D HeatingDevice)
% 			(hasPurpose ?D (exists ([|] ?H []) (and ([|] ($instance ?H Heating) ([|] (instrument ?H ?D) [])))))
% 		)
% 	)

fof( miloA381, axiom,
	p__d__subclass(c__Oven,c__HeatingDevice)
).


fof( miloA382, axiom,
	p__d__subclass(c__Oven,c__Container)
).



% ($documentation Oven EnglishLanguage "A &%HeatingDevice with a door for inserting and removing 
% &%Food that is to undergo &%Baking.")


% 	(forall (?C ?O)
% 		(=> 
% 			($instance ?O Oven)
% 			(hasPurpose ?O (exists ([|] ?C []) (and ([|] ($instance ?C Cooking) ([|] (instrument ?C ?O) [])))))
% 		)
% 	)

fof( miloA384, axiom,
	p__d__subclass(c__Stove,c__HeatingDevice)
).



% ($documentation Stove EnglishLanguage "A &%HeatingDevice which consists one or more burners for 
% heating pots and pans of &%Food.")


% 	(forall (?C ?S)
% 		(=> 
% 			($instance ?S Stove)
% 			(hasPurpose ?S (exists ([|] ?C []) (and ([|] ($instance ?C Cooking) ([|] (instrument ?C ?S) [])))))
% 		)
% 	)

fof( miloA386, axiom,
	p__d__subclass(c__Refrigerator,c__CoolingDevice)
).


fof( miloA387, axiom,
	p__d__subclass(c__Refrigerator,c__ElectricDevice)
).


fof( miloA388, axiom,
	p__d__subclass(c__Refrigerator,c__Container)
).



% ($documentation Refrigerator EnglishLanguage "The intersection of &%Containers and &%ElectricDevices 
% in which the temperature is reduced from that of the outside air by a &%Cooling 
% process.")


fof( miloA389, axiom,
	p__d__subclass(c__PotOrPan,c__Container)
).



% ($documentation PotOrPan EnglishLanguage "A &%Container which has a handle and is used for 
% &%Cooking.")


% 	(forall (?C ?P)
% 		(=> 
% 			($instance ?P PotOrPan)
% 			(hasPurpose ?P (exists ([|] ?C []) (and ([|] ($instance ?C Cooking) ([|] (instrument ?C ?P) [])))))
% 		)
% 	)

fof( miloA391, axiom,
	p__d__subclass(c__Ramp,c__SelfConnectedObject)
).



% ($documentation Ramp EnglishLanguage "Ramp is the class of &%SelfConnectedObjects that are 
% inclined planes used for moving objects from one level to another, 
% especially used for wheeled vehicles and people who cannot climb stairs.")


fof( miloA392, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__Ramp)
			)
			=>
			(
				p__capability(c__MotionUpward,c__path,R)
			)
		)
	)
).


fof( miloA393, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__Ramp)
			)
			=>
			(
				p__capability(c__MotionDownward,c__path,R)
			)
		)
	)
).


fof( miloA394, axiom,
	p__d__subclass(c__RecreationOrExerciseDevice,c__Device)
).



% ($documentation RecreationOrExerciseDevice EnglishLanguage "A &%Device whose purpose is &%RecreationOrExercise.")


% 	(forall (?E ?D)
% 		(=> 
% 			($instance ?D RecreationOrExerciseDevice)
% 			(hasPurpose ?D (exists ([|] ?E []) (and ([|] ($instance ?E RecreationOrExercise) ([|] (instrument ?E ?D) [])))))
% 		)
% 	)

fof( miloA396, axiom,
	p__d__subclass(c__WalkingCane,c__Device)
).



% ($documentation WalkingCane EnglishLanguage "A &%Device which has the form of a staff with 
% a handle and which enables some people to walk with greater assurance.")


% 	(forall (?W ?C)
% 		(=> 
% 			($instance ?C WalkingCane)
% 			(hasPurpose ?C (exists ([|] ?W []) (and ([|] ($instance ?W Walking) ([|] (instrument ?W ?C) [])))))
% 		)
% 	)

fof( miloA398, axiom,
	p__d__subclass(c__WashingDevice,c__Device)
).



% ($documentation WashingDevice EnglishLanguage "Any &%Device whose purpose is &%Washing 
% something, e.g. washing machines, dishwashers, bathtubs, etc.")


% 	(forall (?W ?D)
% 		(=> 
% 			($instance ?D WashingDevice)
% 			(hasPurpose ?D (exists ([|] ?W []) (and ([|] ($instance ?W Washing) ([|] (instrument ?W ?D) [])))))
% 		)
% 	)

fof( miloA400, axiom,
	p__d__subclass(c__MaterialHandlingEquipment,c__Device)
).



% ($documentation MaterialHandlingEquipment EnglishLanguage "&%MaterialHandlingEquipment 
% is a class of &%Devices that are equipment used for handling goods and 
% supplies more efficiently or safely.  Examples are cranes, hoists, 
% forklifts, conveyors, racks, etc.")


fof( miloA401, axiom,
	p__d__subclass(c__Crane,c__MaterialHandlingEquipment)
).



% ($documentation Crane EnglishLanguage "Crane is a subclass of mechanical &%Devices 
% that consist of a &%HoistingDevice on a moveable boom, designed to 
% assist in moving heavy loads.")


fof( miloA402, axiom,
	(![C]: 
		(
			(
				(
					(
						p__d__instance(C,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(C,c__Crane)
					)
				)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__CorpuscularObject)
							)
						 &
							(
								p__d__instance(H,c__HoistingDevice)
							)
						 &
							(
								p__component(H,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA403, axiom,
	p__d__subclass(c__HoistingDevice,c__MaterialHandlingEquipment)
).



% ($documentation HoistingDevice EnglishLanguage "&%HoistingDevice is a subclass of 
% mechanical &%Devices that provide a mechanical advantage in lifting 
% and lowering, e.g., by use of a block and tackle.")


fof( miloA404, axiom,
	(![H]: 
		(
			(
				p__d__instance(H,c__HoistingDevice)
			)
			=>
			(
				p__capability(c__MotionUpward,c__instrument,H)
			)
		)
	)
).


fof( miloA405, axiom,
	(![H]: 
		(
			(
				p__d__instance(H,c__HoistingDevice)
			)
			=>
			(
				p__capability(c__MotionDownward,c__instrument,H)
			)
		)
	)
).


fof( miloA406, axiom,
	p__d__subclass(c__OpticalDevice,c__Device)
).



% ($documentation OpticalDevice EnglishLanguage "A &%Device which enables someone to see something 
% more clearly or with greater magnification.")


% 	(forall (?S ?D)
% 		(=> 
% 			($instance ?D OpticalDevice)
% 			(hasPurpose ?D (exists ([|] ?S []) (and ([|] ($instance ?S Seeing) ([|] (instrument ?S ?D) [])))))
% 		)
% 	)

fof( miloA408, axiom,
	p__d__subclass(c__EyeGlass,c__OpticalDevice)
).



% ($documentation EyeGlass EnglishLanguage "A lens or pair of lenses with or without frames whose 
% purpose is to to correct a defect in vision.  This class covers ordinary eye 
% glasses, reading glasses, contact lenses, monocles, etc.")


fof( miloA409, axiom,
	p__d__subclass(c__Lens,c__OpticalDevice)
).



% ($documentation Lens EnglishLanguage "An &%OpticalDevice which consists of a polished, 
% transparent piece of glass or plastic.  Lenses are often part of 
% other &%OpticalDevices.")


fof( miloA410, axiom,
	p__d__subclass(c__Microscope,c__OpticalDevice)
).



% ($documentation Microscope EnglishLanguage "An &%OpticalDevice with a stand and a focus, which is 
% used for magnifying the images of things that are placed in the stand.")


fof( miloA411, axiom,
	p__d__subclass(c__Filter,c__Device)
).



% ($documentation Filter EnglishLanguage "A &%Device whose purpose is to remove part of a 
% &%Mixture that is passed through the &%Filter.")


% 	(forall (?M ?REMOVE ?FILTER)
% 		(=> 
% 			($instance ?FILTER Filter)
% 			(hasPurpose ?FILTER (exists ([|] ?REMOVE ([|] ?M [])) (and ([|] ($instance ?REMOVE Removing) ([|] (origin ?REMOVE ?M) ([|] ($instance ?M Mixture) ([|] (instrument ?REMOVE ?FILTER) [])))))))
% 		)
% 	)

fof( miloA413, axiom,
	p__d__subclass(c__FileDevice,c__Device)
).



% ($documentation FileDevice EnglishLanguage "A &%Device whose purpose is to make something 
% smoother.  For example, a nail file is used to even out the tips of one's 
% finger nails.")


fof( miloA414, axiom,
	(![DEVICE]: 
		(
			(
				p__d__instance(DEVICE,c__FileDevice)
			)
			=>
			(
				p__capability(c__SurfaceChange,c__instrument,DEVICE)
			)
		)
	)
).


fof( miloA415, axiom,
	p__d__subclass(c__ElectricDevice,c__Device)
).



% ($documentation ElectricDevice EnglishLanguage "A &%Device that uses &%Electricity as its
% primary power source.")


% ($comment 
% ;; NS: edit.  patient -> instrument.  If I put a toaster on
% ;; my counter, the toaster is a "patient" in the putting,
% ;; but no Electricity is required.
% )

fof( miloA416, axiom,
	(![DEV,EV]: 
		(
			(
				(
					(
						p__d__instance(DEV,c__ElectricDevice)
					)
				 &
					(
						p__d__instance(EV,c__Process)
					)
				 &
					(
						p__instrument(EV,DEV)
					)
				)
			)
			=>
			(
				(?[R]: 
					(
						(
							(
								p__d__instance(R,c__Electricity)
							)
						 &
							(
								p__resource(EV,R)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA417, axiom,
	p__d__subclass(c__Electricity,c__Substance)
).



% ($documentation Electricity EnglishLanguage "While electricity is typically thought of as just a difference
% in electrical potential, one way of modeling electricity is as a substance
% that can be moved from one point to another or consumed.  One could make the claim
% that subatomic physics also supports the classification as a substance since electrons
% are objects.")



% ($documentation PowerSource EnglishLanguage "A source of electrical power.")


% (termFormat EnglishLanguage PowerSource "power source")

fof( miloA418, axiom,
	p__d__subclass(c__PowerSource,c__Device)
).


fof( miloA419, axiom,
	(![PS]: 
		(
			(
				p__d__instance(PS,c__PowerSource)
			)
			=>
			(
				(?[RE]: 
					(
						(
							(
								p__d__instance(RE,c__RadiatingElectromagnetic)
							)
						 &
							(
								p__origin(RE,PS)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation DCPowerSource EnglishLanguage "A direct-current &%PowerSource.")


% (termFormat EnglishLanguage DCPowerSource "DC power source")

fof( miloA420, axiom,
	p__d__subclass(c__DCPowerSource,c__PowerSource)
).


fof( miloA421, axiom,
	p__d__subclass(c__Battery,c__DCPowerSource)
).


fof( miloA422, axiom,
	p__d__subclass(c__Battery,c__ElectricDevice)
).



% ($documentation Battery EnglishLanguage "Battery is a subclass of &%Device.  Batteries are 
% devices that use chemical means to store or produce electrical power.")


fof( miloA423, axiom,
	p__d__subclass(c__Radar,c__ElectricDevice)
).



% ($documentation Radar EnglishLanguage "An &%ElectricDevice that emits and receives microwave 
% radiation for the purpose of locating and tracking distant objects.")


% 	(forall (?DISCOVER ?RADAR)
% 		(=> 
% 			($instance ?RADAR Radar)
% 			(hasPurpose ?RADAR (exists ([|] ?DISCOVER []) (and ([|] ($instance ?DISCOVER Discovering) ([|] (instrument ?DISCOVER ?RADAR) [])))))
% 		)
% 	)

fof( miloA425, axiom,
	(![RADAR]: 
		(
			(
				p__d__instance(RADAR,c__Radar)
			)
			=>
			(
				p__capability(c__RadiatingElectromagnetic,c__agent,RADAR)
			)
		)
	)
).


fof( miloA426, axiom,
	p__d__instance(c__discovers,c__BinaryPredicate)
).


% 	($domain discovers 1 Agent)

% 	($domain discovers 2 Object)


% ($documentation discovers EnglishLanguage "(discovers ?AGENT ?OBJECT) means that the 
% &%Agent ?AGENT discovered the &%Object ?OBJECT.")


% (termFormat EnglishLanguage discovers "discovers")

fof( miloA429, axiom,
	(![AGENT,OBJECT]: 
		(
			(
				(
					(
						p__d__instance(OBJECT,c__Object)
					)
				 &
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__discovers(AGENT,OBJECT)
					)
				)
			)
			=>
			(
				(?[DISCOVERING]: 
					(
						(
							(
								p__d__instance(DISCOVERING,c__Discovering)
							)
						 &
							(
								p__agent(DISCOVERING,AGENT)
							)
						 &
							(
								p__patient(DISCOVERING,OBJECT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA430, axiom,
	p__d__subclass(c__Sonar,c__CorpuscularObject)
).



% ($documentation Sonar EnglishLanguage "Something that emits and receives sound 
% for the purpose of locating and tracking distant objects.  Note that
% this covers both manmade devices and &%BodyParts such as the sonar
% of bats and dolphins.")


% 	(forall (?DISCOVER ?SONAR)
% 		(=> 
% 			($instance ?SONAR Sonar)
% 			(hasPurpose ?SONAR (exists ([|] ?DISCOVER []) (and ([|] ($instance ?DISCOVER Discovering) ([|] (instrument ?DISCOVER ?SONAR) [])))))
% 		)
% 	)

fof( miloA432, axiom,
	(![SONAR]: 
		(
			(
				p__d__instance(SONAR,c__Sonar)
			)
			=>
			(
				p__capability(c__RadiatingSound,c__agent,SONAR)
			)
		)
	)
).


fof( miloA433, axiom,
	p__d__subclass(c__Echoing,c__RadiatingSound)
).



% ($documentation Echoing EnglishLanguage "Instances of &%RadiatingSound where the instrument 
% is a surface which bounces sound waves back to their origin, where they can 
% be heard again.")


fof( miloA434, axiom,
	p__d__subclass(c__ElectricalSignalling,c__Signalling)
).



% ($documentation ElectricalSignalling EnglishLanguage "&%ElectricalSignalling is the 
% subclass of &%Signalling processes that involve control of an electrical 
% current.  Cf. &%ElectronicSignalling.")


fof( miloA435, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__ElectricalSignalling)
			)
			=>
			(
				(?[D]: 
					(
						(
							(
								p__d__instance(D,c__ElectricDevice)
							)
						 &
							(
								p__instrument(S,D)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Not necessarily by a computer.  Read Wikipedia on Electronics and Signalling.    
% ;; Also, should probably be a subclass of ElectricalSignalling since theoretically
% ;; ElectronicSignalling cannot exist without Electricity as well  
% ;;($subclass ElectronicSignalling Signalling)
% )

fof( miloA436, axiom,
	p__d__subclass(c__ElectronicSignalling,c__ElectricalSignalling)
).



% ($documentation ElectronicSignalling EnglishLanguage "&%ElectronicSignalling is the 
% subclass of &%ElectricalSignalling that involve a signal generated through electronic
% means.")


% ($comment 
% ;; (=>
% ;;  ($instance ?S ElectronicSignalling)
% ;;  (exists (?D)
% ;;    (and
% ;;      ($instance ?D Computer)
% ;;      (instrument ?S ?D))))
% )

fof( miloA437, axiom,
	p__d__subclass(c__SecurityDevice,c__Device)
).



% ($documentation SecurityDevice EnglishLanguage "A &%Device whose purpose is to protect people or 
% property from kidnappers and/or thieves.")


fof( miloA438, axiom,
	p__d__subclass(c__Lock,c__SecurityDevice)
).



% ($documentation Lock EnglishLanguage "A &%Device, which, through a &%Key or a combination prevents 
% access to a &%Container or &%StationaryArtifact.")


fof( miloA439, axiom,
	p__d__subclass(c__Key,c__SecurityDevice)
).



% ($documentation Key EnglishLanguage "A &%Device which opens and closes a &%Lock.")


% 	(forall (?CLOSE ?OPEN ?LOCK ?X)
% 		(=> 
% 			($instance ?X Key)
% 			(hasPurpose ?X (exists ([|] ?LOCK []) (and ([|] ($instance ?LOCK Lock) ([|] (capability (KappaFn ?CLOSE (and ([|] ($instance ?CLOSE Closing) ([|] (patient ?CLOSE ?LOCK) ([|] (holdsDuring (ImmediateFutureFn ?CLOSE) (attribute ?LOCK Locked)) []))))) instrument ?X) ([|] (capability (KappaFn ?OPEN (and ([|] ($instance ?OPEN Closing) ([|] (patient ?OPEN ?LOCK) ([|] (holdsDuring (ImmediateFutureFn ?OPEN) (not (attribute ?LOCK Locked))) []))))) instrument ?X) []))))))
% 		)
% 	)

fof( miloA441, axiom,
	p__d__instance(c__Locked,c__RelationalAttribute)
).



% ($documentation Locked EnglishLanguage "An &%Attribute of &%Objects. A &%Locked &%Object is in some way restricted in movement, there is some movement, that the the &%Object can not performed, when it's locked.")


% 	(forall (?X)
% 		(=> 
% 			(attribute ?X Locked)
% 			(exists (?LOCK ?CLOSE ?MOVE)
% 				(and 
% 					($instance ?LOCK Lock)
% 					(connected ?LOCK ?X)
% 					($instance ?CLOSE Closing)
% 					(patient ?CLOSE ?LOCK)
% 					($instance ?MOVE Motion)
% 					(earlier (WhenFn ?CLOSE) (WhenFn (attribute ?X Locked)))
% 					(holdsDuring (WhenFn (attribute ?X Locked)) (not (modalAttribute (patient ?MOVE ?X) Possibility)))
% 				)
% 			)
% 		)
% 	)

fof( miloA443, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__Locked)
					)
				)
			)
			=>
			(
				p__d__instance(X,c__Object)
			)
		)
	)
).


fof( miloA444, axiom,
	p__d__subclass(c__SafeContainer,c__Container)
).


fof( miloA445, axiom,
	p__d__subclass(c__SafeContainer,c__SecurityDevice)
).



% ($documentation SafeContainer EnglishLanguage "A &%Container with a &%Lock which is intended 
% to secure items from theft.  Note that this covers safes, lockers, and locked 
% storage compartments.")


fof( miloA446, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__SafeContainer)
			)
			=>
			(
				(?[L]: 
					(
						(
							(
								p__d__instance(L,c__Lock)
							)
						 &
							(
								p__part(L,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA447, axiom,
	p__d__subclass(c__AnimalController,c__Device)
).



% ($documentation AnimalController EnglishLanguage "Any &%Device which is used to control the 
% movements of an &%Animal or &%Human, e.g. leashes, reins, harnesses, muzzles, 
% bridles, shackles, handcuffs, etc.")


% 	(forall (?AC ?G ?A)
% 		(=> 
% 			($instance ?AC AnimalController)
% 			(hasPurpose ?AC (exists ([|] ?G ([|] ?A [])) (and ([|] ($instance ?G Guiding) ([|] (instrument ?G ?AC) ([|] ($instance ?A Animal) ([|] (patient ?G ?A) [])))))))
% 		)
% 	)

fof( miloA449, axiom,
	p__d__subclass(c__SelfPoweredDevice,c__Device)
).



% ($documentation SelfPoweredDevice EnglishLanguage "&%SelfPoweredDevice is 
% the subclass of &%Devices whose action is powered by some kind of on-board 
% component or power source (not the user, which would be a 
% &%UserPoweredVehicle).") 


fof( miloA450, axiom,
	(![DEVICE]: 
		(
			(
				p__d__instance(DEVICE,c__SelfPoweredDevice)
			)
			=>
			(
				(?[SOURCE]: 
					(
						(
							(
								p__d__instance(SOURCE,c__Device)
							)
						 &
							(
								p__powerPlant(DEVICE,SOURCE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA451, axiom,
	p__d__subclass(c__AnimalPoweredDevice,c__Device)
).



% ($documentation AnimalPoweredDevice EnglishLanguage "&%AnimalPoweredDevice is the subclass 
% of &%Devices that function with power supplied by animals.  Examples: 
% oxcarts, horse-drawn plows, mule-driven mills.")


fof( miloA452, axiom,
	(![D,P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Process)
					)
				 &
					(
						p__d__instance(D,c__AnimalPoweredDevice)
					)
				 &
					(
						p__instrument(P,D)
					)
				)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Animal)
							)
						 &
							(
								p__instrument(P,A)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NS: delete.
% ;; (documentation Flat EnglishLanguage "A three dimensional object for which
% ;; two dimensions are markedly larger than the third the
% ;; two larger dimensions are also not of markedly different length.")
% ;;
% ;; NS: add.
% )


% ($documentation Flat EnglishLanguage "This &%ShapeAttribute
% describes a three dimensional &%Object for which two
% dimensions are markedly larger than the third, and the two
% larger dimensions also are not of markedly different
% lengths.")


fof( miloA453, axiom,
	p__d__instance(c__Flat,c__ShapeAttribute)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: wrongly quantified variables
% ;;
% ;;(=>
% ;;  (attribute ?F Flat)
% ;;  (and
% ;;    (side ?S1 ?F)
% ;;    (side ?S2 ?F)
% ;;    (meetsSpatially ?S1 ?S2)
% ;;    (not (equal ?S1 ?S2))
% ;;    (height ?F ?H)
% ;;    (greaterThan ?S1 (MultiplicationFn 2 ?H))
% ;;    (greaterThan ?S2 (MultiplicationFn 2 ?H))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA454, axiom,
	(![F]: 
		(
			(
				(
					(
						p__d__instance(F,c__SelfConnectedObject)
					)
				 &
					(
						p__attribute(F,c__Flat)
					)
				)
			)
			=>
			(
				(?[H,S1,S2,H1,H2]: 
					(
						(
							(
								p__d__instance(S1,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(S2,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(H,c__LengthMeasure)
							)
						 &
							(
								p__d__instance(H1,c__LengthMeasure)
							)
						 &
							(
								p__d__instance(H2,c__LengthMeasure)
							)
						 &
							(
								p__side(S1,F)
							)
						 &
							(
								p__side(S2,F)
							)
						 &
							(
								p__meetsSpatially(S1,S2)
							)
						 &
							(
								~ (
									( S1 = S2 )
								)
							)
						 &
							(
								p__height(F,H)
							)
						 &
							(
								p__height(S1,H1)
							)
						 &
							(
								p__height(S2,H2)
							)
						 &
							(
								p__greaterThan(H1,f__MultiplicationFn2(c__2,H))
							)
						 &
							(
								p__greaterThan(H2,f__MultiplicationFn2(c__2,H))
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NS: delete.
% ;; (documentation LongAndThin EnglishLanguage "A three dimensional object that
% ;; has two thin dimensions and one markedly larger one.") 
% ;;
% ;; NS: add.
% )


% ($documentation LongAndThin EnglishLanguage "This
% &%ShapeAttribute describes a three dimensional &%Object that
% is markedly longer in one dimension than in the other two.")


fof( miloA455, axiom,
	p__d__instance(c__LongAndThin,c__ShapeAttribute)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check
% ;;
% ;;(=>
% ;;  (attribute ?F LongAndThin)
% ;;  (and
% ;;    (side ?S1 ?F)
% ;;    (side ?S2 ?F)
% ;;    (meetsSpatially ?S1 ?S2)
% ;;    (not (equal ?S1 ?S2))
% ;;    (length ?F ?H)
% ;;    (lessThan ?S1 (MultiplicationFn 3 ?H))
% ;;    (lessThan ?S2 (MultiplicationFn 3 ?H))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA456, axiom,
	(![F]: 
		(
			(
				(
					(
						p__d__instance(F,c__SelfConnectedObject)
					)
				 &
					(
						p__attribute(F,c__LongAndThin)
					)
				)
			)
			=>
			(
				(?[H,S1,S2,H1,H2]: 
					(
						(
							(
								p__d__instance(S1,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(S2,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(H,c__LengthMeasure)
							)
						 &
							(
								p__d__instance(H1,c__LengthMeasure)
							)
						 &
							(
								p__d__instance(H2,c__LengthMeasure)
							)
						 &
							(
								p__side(S1,F)
							)
						 &
							(
								p__side(S2,F)
							)
						 &
							(
								p__meetsSpatially(S1,S2)
							)
						 &
							(
								~ (
									( S1 = S2 )
								)
							)
						 &
							(
								p__length(F,H)
							)
						 &
							(
								p__length(S1,H1)
							)
						 &
							(
								p__length(S2,H2)
							)
						 &
							(
								p__lessThan(H1,f__MultiplicationFn2(c__3,H))
							)
						 &
							(
								p__lessThan(H2,f__MultiplicationFn2(c__3,H))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA457, axiom,
	p__d__instance(c__LevelShape,c__ShapeAttribute)
).



% ($documentation LevelShape EnglishLanguage "The &%ShapeAttribute of &%Objects where no 
% part of the top of the &%Object is higher than any other part of the 
% top.")


fof( miloA458, axiom,
	(![O]: 
		(
			(
				(
					(
						p__d__instance(O,c__SelfConnectedObject)
					)
				 &
					(
						p__attribute(O,c__LevelShape)
					)
				)
			)
			=>
			(
				(![P1,P2,T,H1,H2]: 
					(
						(
							~ (
								p__d__instance(T,c__SelfConnectedObject)
							)
						 |
							~ (
								p__d__instance(P1,c__SelfConnectedObject)
							)
						 |
							~ (
								p__d__instance(P2,c__SelfConnectedObject)
							)
						 |
							~ (
								p__d__instance(H1,c__LengthMeasure)
							)
						 |
							~ (
								p__d__instance(H2,c__LengthMeasure)
							)
						 |
							~ (
								p__top(T,O)
							)
						 |
							~ (
								p__part(P1,T)
							)
						 |
							~ (
								p__part(P2,T)
							)
						 |
							~ (
								p__height(P1,H1)
							)
						 |
							~ (
								p__height(P2,H2)
							)
						 |
							~ (
								p__greaterThan(H1,H2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA459, axiom,
	p__d__instance(c__SymmetricShape,c__ShapeAttribute)
).



% ($documentation SymmetricShape EnglishLanguage "A &%ShapeAttribute that applies to a 
% &%SelfConnectedObject that can be divided into two copies of each other.")


fof( miloA460, axiom,
	(![T]: 
		(
			(
				(
					(
						p__d__instance(T,c__Object)
					)
				 &
					(
						p__attribute(T,c__SymmetricShape)
					)
				)
			)
			=>
			(
				(?[C1,C2]: 
					(
						(
							(
								p__d__instance(C2,c__Object)
							)
						 &
							(
								p__d__instance(C1,c__Object)
							)
						 &
							(
								p__copy(C1,C2)
							)
						 &
							(
								( T = f__MereologicalSumFn2(C1,C2) )
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA461, axiom,
	p__d__subclass(c__Baton,c__Device)
).



% ($documentation Baton EnglishLanguage "A thin stick which is used for &%MusicalConducting.")


% ($comment 
% ;; NS: edit.
% )

% 	(forall (?M ?G ?B)
% 		(=> 
% 			($instance ?B Baton)
% 			(hasPurpose ?B (exists ([|] ?M ([|] ?G [])) (and ([|] ($instance ?M MusicalPerformance) ([|] ($instance ?G Guiding) ([|] (subProcess ?G ?M) ([|] (instrument ?G ?B) [])))))))
% 		)
% 	)

fof( miloA463, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Baton)
			)
			=>
			(
				p__attribute(B,c__LongAndThin)
			)
		)
	)
).


% ($comment 
% ;; NS: Note that a baton (typically a cylindrical aluminum
% ;; tube or wooden dowel) would have some strange things
% ;; concluded about it, given the rule for LongAndThin stated
% ;; above.  In particular, what are the two shorter "sides"
% ;; that spatially meet?  In general, I think the current
% ;; naive (commonsense) treatment of object faces and
% ;; dimensions (&%side, &%top, &%bottom, &%BackFn, &%FrontFn,
% ;; etc.), with its implicit but unexplained notion of
% ;; default orientation, should be related to a more general
% ;; scheme that explicitly treats dimensions in terms of an
% ;; object's maximal extent along x, y, and z axes,
% ;; regardless of orientation.
% ;;
% ;; TO DO: Add the x, y, z axes representation mentioned above,
% ;; and relate it to the &%side, &%top, etc. one, where possible.
% )

fof( miloA464, axiom,
	p__d__subclass(c__SecurityAlarm,c__SecurityDevice)
).


fof( miloA465, axiom,
	p__d__subclass(c__SecurityAlarm,c__ElectricDevice)
).



% ($documentation SecurityAlarm EnglishLanguage "A &%SecurityDevice that detects intrusions to 
% a &%StationaryArtifact and issues a warning of some sort.")


fof( miloA466, axiom,
	p__d__partition3(c__Quantity,c__FiniteQuantity,c__InfiniteQuantity)
).


fof( miloA467, axiom,
	p__d__subclass(c__FiniteQuantity,c__Quantity)
).



% ($documentation FiniteQuantity EnglishLanguage "Any &%Quantity that is limited or bounded in 
% magnitude.")


fof( miloA468, axiom,
	p__d__subclass(c__InfiniteQuantity,c__Quantity)
).



% ($documentation InfiniteQuantity EnglishLanguage "Any &%Quantity that is not limited or bounded 
% in magnitude.")


fof( miloA469, axiom,
	p__d__subclass(c__Clock,c__MeasuringDevice)
).



% ($documentation Clock EnglishLanguage "Any &%Device that measures and represents &%TimeDuration 
% or &%TimePosition.")


fof( miloA470, axiom,
	(![M,C,Q]: 
		(
			(
				(
					(
						p__d__instance(M,c__Measuring)
					)
				 &
					(
						p__result(M,Q)
					)
				 &
					(
						p__instrument(M,C)
					)
				 &
					(
						p__d__instance(C,c__Clock)
					)
				)
			)
			=>
			(
				p__d__instance(Q,c__TimeMeasure)
			)
		)
	)
).


fof( miloA471, axiom,
	p__d__subclass(c__WatchClock,c__Clock)
).



% ($documentation WatchClock EnglishLanguage "A &%Clock that can be worn on the &%Wrist.")


fof( miloA472, axiom,
	(![P,W,C]: 
		(
			(
				(
					(
						p__d__instance(C,c__WearableItem)
					)
				 &
					(
						p__d__instance(P,c__Animal)
					)
				 &
					(
						p__wears(P,C)
					)
				 &
					(
						p__located(C,W)
					)
				 &
					(
						p__d__instance(C,c__Clock)
					)
				 &
					(
						p__d__instance(W,c__Wrist)
					)
				)
			)
			=>
			(
				p__d__instance(C,c__WatchClock)
			)
		)
	)
).


fof( miloA473, axiom,
	p__d__subclass(c__Thermometer,c__MeasuringDevice)
).



% ($documentation Thermometer EnglishLanguage "Any &%Device that measures and represents 
% &%TemperatureMeasure.")


fof( miloA474, axiom,
	(![MEASURE,THERMOMETER,QUANTITY]: 
		(
			(
				(
					(
						p__d__instance(MEASURE,c__Measuring)
					)
				 &
					(
						p__result(MEASURE,QUANTITY)
					)
				 &
					(
						p__instrument(MEASURE,THERMOMETER)
					)
				 &
					(
						p__d__instance(THERMOMETER,c__Thermometer)
					)
				)
			)
			=>
			(
				p__d__instance(QUANTITY,c__TemperatureMeasure)
			)
		)
	)
).


fof( miloA475, axiom,
	p__d__subclass(c__PressureMeasuringDevice,c__MeasuringDevice)
).



% ($documentation PressureMeasuringDevice EnglishLanguage "Any &%Device that measures and 
% represents &%PressureMeasure.")


fof( miloA476, axiom,
	(![M,T,Q]: 
		(
			(
				(
					(
						p__d__instance(M,c__Measuring)
					)
				 &
					(
						p__result(M,Q)
					)
				 &
					(
						p__instrument(M,T)
					)
				 &
					(
						p__d__instance(T,c__Thermometer)
					)
				)
			)
			=>
			(
				p__d__instance(Q,c__TemperatureMeasure)
			)
		)
	)
).



% ($documentation measurementReading EnglishLanguage "(measurementReading ?DEVICE ?QUANTITY) 
% means that ?QUANTITY is a reading of the &%MeasuringDevice ?DEVICE, e.g. if 
% ?THERMOMETER is a &%Thermometer, (measurementReading ?THERMOMETER 
% (&%MeasureFn 42 &%CelsiusDegree)) would mean that ?THERMOMETER registers 42 
% degrees &%Celsius.")


fof( miloA477, axiom,
	p__d__instance(c__measurementReading,c__BinaryPredicate)
).


% 	($domain measurementReading 1 MeasuringDevice)

% 	($domain measurementReading 2 ConstantQuantity)

fof( miloA480, axiom,
	p__d__subclass(c__CommunicationDevice,c__EngineeringComponent)
).



% ($documentation CommunicationDevice EnglishLanguage "A
% &%CommunicationDevice is a &%Device which serves at the
% &%instrument in a &%Communication &%Process by allowing the
% communicated message to be conveyed between the participants.")


% 	(relatedInternalConcept Communication CommunicationDevice)

fof( miloA482, axiom,
	(![DEVICE]: 
		(
			(
				p__d__instance(DEVICE,c__CommunicationDevice)
			)
			=>
			(
				p__capability(c__Communication,c__instrument,DEVICE)
			)
		)
	)
).


fof( miloA483, axiom,
	p__d__subclass(c__Telephone,c__ElectricDevice)
).


fof( miloA484, axiom,
	p__d__subclass(c__Telephone,c__CommunicationDevice)
).



% ($documentation Telephone EnglishLanguage "A &%Telephone is a
% &%CommunicationDevice that enables &%LinguisticCommunication
% between nodes in a &%TelephoneSystem by converting sound into
% electrical signals that are then transmitted.  When the signals
% are received, they are converted back into sound.")


% ($comment 
% ;; NS: edit.  Speaking -> Communication.
% )

fof( miloA485, axiom,
	p__d__subclass(c__Telephoning,c__Communication)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation Telephoning EnglishLanguage "A &%Telephoning is a
% &%Communication in which the &%instrument is a &%Telephone, and
% which typically includes an &%instance of &%Speaking as a
% &%subProcess.")


fof( miloA486, axiom,
	(![TEL]: 
		(
			(
				p__d__instance(TEL,c__Telephoning)
			)
			=>
			(
				(?[DEVICE]: 
					(
						(
							(
								p__d__instance(DEVICE,c__Telephone)
							)
						 &
							(
								p__instrument(TEL,DEVICE)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA487, axiom,
	(![TEL,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(TEL,c__Telephoning)
					)
				)
			)
			=>
			(
				(?[SPEAK]: 
					(
						(
							(
								p__d__instance(SPEAK,c__Speaking)
							)
						 &
							(
								p__subProcess(SPEAK,TEL)
							)
						 &
							(
								(
									p__agent(TEL,AGENT)
								)
								=>
								(
									p__agent(SPEAK,AGENT)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA488, axiom,
	p__d__subclass(c__Fax,c__ArtifactMediatedCommunication)
).



% ($documentation Fax EnglishLanguage "The communication of a printed page between remote locations.") 


fof( miloA489, axiom,
	(![Fax]: 
		(
			(
				p__d__instance(Fax,c__Fax)
			)
			=>
			(
				(?[FaxMachine]: 
					(
						(
							(
								p__d__instance(FaxMachine,c__FaxMachine)
							)
						 &
							(
								p__instrument(Fax,FaxMachine)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NS: add.  Device -> TelephonyDevice (in OntologyX.kif).
% )

fof( miloA490, axiom,
	p__d__subclass(c__FaxMachine,c__TelephonyDevice)
).


% ($comment 
% ;; NS: edit.
% )

fof( miloA491, axiom,
	p__d__subclass(c__FaxMachine,c__ElectricDevice)
).


fof( miloA492, axiom,
	p__d__subclass(c__FaxMachine,c__CommunicationDevice)
).



% ($documentation FaxMachine EnglishLanguage "A &%FaxMachine is a
% &%TelephonyDevice that scans a paper page and transmits a coded
% image of the page over a &%TelephoneSystem to a receiving
% &%FaxMachine, which decodes the coded and image and prints a
% replica of the original.  A typical &%FaxMachine is made up of a
% scanner, a printer, a modem, and a control panel with some sort
% of status display.")


% ($comment 
% ;; NS: delete.
% ;; (subrelation telephoneNumber uniqueIdentifier)
% ;;
% ;; NS: &%telephoneNumber is defined further in OntologyX.kif.
% ;;     &%postAddress is defined in OntologyX.kif.
% ;;
% ;; NS: delete phoneNumber, dayPhone, eveningPhone.  The rules
% ;; commented out below are absurd, and the relations are
% ;; superceded by others in OntologyX.kif.
% ;;
% ;; ($instance phoneNumber BinaryPredicate)
% ;; (subrelation phoneNumber refers)
% ;; (domain phoneNumber 1 SymbolicString)
% ;; (domain phoneNumber 2 Telephone)
% ;; (documentation phoneNumber EnglishLanguage "(&%phoneNumber ?Phone ?Agent) holds if ?Phone is 
% ;; a phone number corresponding to the Telephone ?Phone.")
% ;;
% ;; ($instance dayPhone BinaryPredicate)
% ;; (domain dayPhone 1 SymbolicString)
% ;; (domain dayPhone 2 Agent) 
% ;; (documentation dayPhone EnglishLanguage "(&%dayPhone ?Phone ?Agent) means that ?Phone is a phone 
% ;; number corresponding to the location where ?Agent can be reached during the day.")
% ;;
% ;; (=>
% ;; 	(and
% ;; 		(dayPhone ?Number ?Agent)
% ;; 		($instance ?Day Day))
% ;; 	(exists (?Phone)
% ;; 		(and
% ;; 			(phoneNumber ?Number ?Phone)
% ;; 			(holdsDuring (HourFn ?Number ?Day) (possesses ?Agent ?Phone))
% ;; 			(lessThan ?Number 18))))
% ;;
% ;; ($instance eveningPhone BinaryPredicate)
% ;; (domain eveningPhone 1 SymbolicString)
% ;; (domain eveningPhone 2 Agent) 
% ;; (documentation eveningPhone EnglishLanguage "(&%eveningPhone ?Phone ?Agent) means that ?Phone 
% ;; is a phone number corresponidng to the location where ?Agent can be reached 
% ;; during the evening.")
% ;;
% ;; (=>
% ;; 	(and
% ;; 		(eveningPhone ?Number ?Agent)
% ;; 		($instance ?Day Day))
% ;; 	(exists (?Phone)
% ;; 		(and
% ;; 			(phoneNumber ?Number ?Phone)
% ;; 			(holdsDuring (HourFn ?Number ?Day) (possesses ?Agent ?Phone))
% ;; 			(greaterThan ?Number 18))))
% )

fof( miloA493, axiom,
	p__d__instance(c__emailAddress,c__BinaryPredicate)
).


fof( miloA494, axiom,
	p__subrelation(c__emailAddress,c__refers)
).


% 	($domain emailAddress 1 SymbolicString)

% 	($domain emailAddress 2 Agent)

% ($comment 
% ;; NS: edit.
% )


% ($documentation emailAddress EnglishLanguage "(&%emailAddress
% ?Address ?Agent) means that ?Address denotes a &%VirtualPlace at
% which ?Agent can be contacted.")


fof( miloA497, axiom,
	p__d__subclass(c__LightFixture,c__Device)
).



% ($documentation LightFixture EnglishLanguage "Any &%Device whose purpose is to be a source of 
% visible light.")


fof( miloA498, axiom,
	(![F]: 
		(
			(
				p__d__instance(F,c__LightFixture)
			)
			=>
			(
				p__capability(c__RadiatingLight,c__instrument,F)
			)
		)
	)
).


fof( miloA499, axiom,
	p__d__subclass(c__Candle,c__LightFixture)
).



% ($documentation Candle EnglishLanguage "An &%LightFixture that consists of &%Wax and a wick, 
% which is lit with a flame.")


fof( miloA500, axiom,
	(![CANDLE]: 
		(
			(
				(
					(
						p__d__instance(CANDLE,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(CANDLE,c__Candle)
					)
				)
			)
			=>
			(
				p__material(c__Wax,CANDLE)
			)
		)
	)
).


% 	(forall (?F ?C)
% 		(=> 
% 			($instance ?C Candle)
% 			(hasPurpose ?C (exists ([|] ?F []) (and ([|] ($instance ?F Fire) ([|] (resource ?F ?C) [])))))
% 		)
% 	)

fof( miloA502, axiom,
	p__d__subclass(c__Lightning,c__WeatherProcess)
).


fof( miloA503, axiom,
	p__d__subclass(c__Lightning,c__Radiating)
).



% ($documentation Lightning EnglishLanguage "A &%WeatherProcess which involves a significant 
% release of electricity from a &%Cloud.")


fof( miloA504, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__Lightning)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__Cloud)
							)
						 &
							(
								p__eventLocated(L,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA505, axiom,
	p__d__subclass(c__Thunder,c__WeatherProcess)
).


fof( miloA506, axiom,
	p__d__subclass(c__Thunder,c__RadiatingSound)
).



% ($documentation Thunder EnglishLanguage "Any instance of &%RadiatingSound which is caused by 
% an instance of Lightning.")


fof( miloA507, axiom,
	(![T]: 
		(
			(
				p__d__instance(T,c__Thunder)
			)
			=>
			(
				(?[L]: 
					(
						(
							(
								p__d__instance(L,c__Lightning)
							)
						 &
							(
								p__causes(L,T)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA508, axiom,
	p__d__subclass(c__VehicleLight,c__LightFixture)
).



% ($documentation VehicleLight EnglishLanguage "Any &%LightFixture which is attached to the 
% surface of a &%Vehicle and whose purpose is to illuminate that area around 
% the &%Vehicle so that potential obstacles can be detected or alerted.")


fof( miloA509, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__VehicleLight)
			)
			=>
			(
				(?[V]: 
					(
						(
							(
								p__d__instance(V,c__Vehicle)
							)
						 &
							(
								p__part(L,V)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA510, axiom,
	p__d__subclass(c__Headlight,c__VehicleLight)
).



% ($documentation Headlight EnglishLanguage "Any &%VehicleLight which is attached to the front 
% of a &%Vehicle.")


fof( miloA511, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__Headlight)
			)
			=>
			(
				(?[V]: 
					(
						(
							(
								p__d__instance(V,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(V,c__Vehicle)
							)
						 &
							(
								p__part(L,f__FrontFn1(V))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA512, axiom,
	p__d__subclass(c__Taillight,c__VehicleLight)
).



% ($documentation Taillight EnglishLanguage "Any &%VehicleLight which is attached to the back 
% of a &%Vehicle.")


fof( miloA513, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__Taillight)
			)
			=>
			(
				(?[V]: 
					(
						(
							(
								p__d__instance(V,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(V,c__Vehicle)
							)
						 &
							(
								p__part(L,f__BackFn1(V))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA514, axiom,
	p__d__subclass(c__PaintedPicture,c__ArtWork)
).



% ($documentation PaintedPicture EnglishLanguage "Any &%ArtWork which is produced by &%Painting.")


fof( miloA515, axiom,
	(![PP]: 
		(
			(
				p__d__instance(PP,c__PaintedPicture)
			)
			=>
			(
				(?[PAINT,PAINTING]: 
					(
						(
							(
								p__d__instance(PAINT,c__Paint)
							)
						 &
							(
								p__d__instance(PAINTING,c__Painting)
							)
						 &
							(
								p__resource(PAINTING,PAINT)
							)
						 &
							(
								p__result(PAINTING,PP)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA516, axiom,
	p__d__subclass(c__WatercolorPicture,c__PaintedPicture)
).



% ($documentation WatercolorPicture EnglishLanguage "Any &%PaintedPicture which is created 
% with water-based paints.")


fof( miloA517, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__WatercolorPicture)
			)
			=>
			(
				(?[WP,P]: 
					(
						(
							(
								p__d__instance(WP,c__WatercolorPaint)
							)
						 &
							(
								p__d__instance(P,c__Painting)
							)
						 &
							(
								p__resource(P,WP)
							)
						 &
							(
								p__result(P,W)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA518, axiom,
	p__d__subclass(c__Wallpaper,c__ArtWork)
).



% ($documentation Wallpaper EnglishLanguage "Any decorative paper that is used to cover the 
% &%Walls of &%Rooms.")


fof( miloA519, axiom,
	(![W,P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Object)
					)
				 &
					(
						p__d__instance(W,c__Wallpaper)
					)
				 &
					(
						p__part(P,W)
					)
				)
			)
			=>
			(
				p__d__instance(P,c__Paper)
			)
		)
	)
).


% 	(forall (?R ?W ?C ?P)
% 		(=> 
% 			($instance ?P Wallpaper)
% 			(hasPurpose ?P (exists ([|] ?W ([|] ?R ([|] ?C []))) (and ([|] ($instance ?W Wall) ([|] (part ?W ?R) ([|] ($instance ?R Room) ([|] ($instance ?C Covering) ([|] (patient ?C ?W) ([|] (instrument ?C ?P) [])))))))))
% 		)
% 	)

fof( miloA521, axiom,
	p__d__subclass(c__Sculpture,c__ArtWork)
).



% ($documentation Sculpture EnglishLanguage "Any &%ArtWork which is not constructed on the 
% two-dimensional surface of a canvas, piece of paper, etc.")


fof( miloA522, axiom,
	p__d__subclass(c__Portrait,c__PaintedPicture)
).



% ($documentation Portrait EnglishLanguage "A &%PaintedPicture that represents someone's &%Face.")


fof( miloA523, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__Portrait)
			)
			=>
			(
				(?[F]: 
					(
						(
							(
								p__d__instance(F,c__Face)
							)
						 &
							(
								p__represents(P,F)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA524, axiom,
	p__d__subclass(c__Sketch,c__ArtWork)
).



% ($documentation Sketch EnglishLanguage "Any &%ArtWork which is produced by a pencil or 
% piece of charcoal.")


fof( miloA525, axiom,
	p__d__subclass(c__Collage,c__ArtWork)
).



% ($documentation Collage EnglishLanguage "Any abstract &%ArtWork that is produced by arranging 
% bits of paper or photographs.")


fof( miloA526, axiom,
	p__d__subclass(c__Folding,c__ShapeChange)
).



% ($documentation Folding EnglishLanguage "Bending something in such a way that one part of 
% it covers another part.")


fof( miloA527, axiom,
	(![F,O]: 
		(
			(
				(
					(
						p__d__instance(O,c__Object)
					)
				 &
					(
						p__d__instance(F,c__Folding)
					)
				 &
					(
						p__patient(F,O)
					)
				)
			)
			=>
			(
				(?[C,P1,P2]: 
					(
						(
							(
								p__d__instance(P1,c__Object)
							)
						 &
							(
								p__d__instance(P2,c__Object)
							)
						 &
							(
								p__d__instance(C,c__Covering)
							)
						 &
							(
								p__subProcess(C,F)
							)
						 &
							(
								p__part(P1,O)
							)
						 &
							(
								p__part(P2,O)
							)
						 &
							(
								p__instrument(C,P1)
							)
						 &
							(
								p__patient(C,P2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA528, axiom,
	p__d__subclass(c__Painting,c__Covering)
).


fof( miloA529, axiom,
	p__d__subclass(c__Painting,c__Coloring)
).



% ($documentation Painting EnglishLanguage "The application of &%Paint to a &%surface.  Note that 
% this class covers both &%ArtPainting (the creation of &%PaintedPictures), as 
% well as painting one's kitchen, for example.")


fof( miloA530, axiom,
	(![PAINT,SURFACE,STUFF]: 
		(
			(
				(
					(
						p__d__instance(SURFACE,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(STUFF,c__Object)
					)
				 &
					(
						p__d__instance(PAINT,c__Painting)
					)
				 &
					(
						p__patient(PAINT,SURFACE)
					)
				 &
					(
						p__resource(PAINT,STUFF)
					)
				)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__SelfConnectedObject)
							)
						 &
							(
								p__surface(SURFACE,OBJ)
							)
						 &
							(
								p__d__instance(STUFF,c__Paint)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA531, axiom,
	p__d__subclass(c__Paint,c__Solution)
).



% ($documentation Paint EnglishLanguage "Any &%Solution which is capable of &%Coloring something.")


fof( miloA532, axiom,
	(![PAINT]: 
		(
			(
				p__d__instance(PAINT,c__Paint)
			)
			=>
			(
				p__capability(c__Coloring,c__instrument,PAINT)
			)
		)
	)
).


fof( miloA533, axiom,
	p__d__subclass(c__WatercolorPaint,c__Paint)
).



% ($documentation WatercolorPaint EnglishLanguage "Any &%Paint which is a water-based &%Solution.")


fof( miloA534, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__WatercolorPaint)
			)
			=>
			(
				(?[W]: 
					(
						(
							(
								p__d__instance(W,c__Water)
							)
						 &
							(
								p__part(W,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA535, axiom,
	p__d__subclass(c__OilPaint,c__Paint)
).


fof( miloA536, axiom,
	p__d__disjoint(c__OilPaint,c__WatercolorPaint)
).



% ($documentation OilPaint EnglishLanguage "Any &%Paint which is an oil-based &%Solution.")


fof( miloA537, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__OilPaint)
			)
			=>
			(
				(?[O]: 
					(
						(
							(
								p__d__instance(O,c__Oil)
							)
						 &
							(
								p__part(O,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA538, axiom,
	p__d__subclass(c__OilPicture,c__PaintedPicture)
).


fof( miloA539, axiom,
	p__d__disjoint(c__OilPicture,c__WatercolorPicture)
).



% ($documentation OilPicture EnglishLanguage "Any &%OilPicture which is created 
% with oil-based paints.")


fof( miloA540, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__OilPicture)
			)
			=>
			(
				(?[O,PAINTING]: 
					(
						(
							(
								p__d__instance(O,c__OilPaint)
							)
						 &
							(
								p__d__instance(PAINTING,c__Painting)
							)
						 &
							(
								p__resource(PAINTING,O)
							)
						 &
							(
								p__result(PAINTING,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA541, axiom,
	p__d__subclass(c__ArtPainting,c__ContentDevelopment)
).


fof( miloA542, axiom,
	p__d__subclass(c__ArtPainting,c__Painting)
).



% ($documentation ArtPainting EnglishLanguage "Any &%ContentDevelopment that results in a 
% &%PaintedPicture.")


fof( miloA543, axiom,
	(![PAINT]: 
		(
			(
				p__d__instance(PAINT,c__ArtPainting)
			)
			=>
			(
				(?[PICTURE]: 
					(
						(
							(
								p__d__instance(PICTURE,c__PaintedPicture)
							)
						 &
							(
								p__result(PAINT,PICTURE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA544, axiom,
	p__d__subclass(c__PaintingDevice,c__Device)
).



% ($documentation PaintingDevice EnglishLanguage "A &%Device used as an &%instrument for &%Painting. Paintbrushes, rollers or sprayers can belong into this class.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of capability is subclass(Process)
% ;;
% ;;(=>
% ;;  ($instance ?PD PaintingDevice)
% ;;  (exists (?PAINT)
% ;;    (and
% ;;      ($instance ?PAINT Painting)
% ;;      (capability ?PAINT instrument ?PD))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA545, axiom,
	(![PD]: 
		(
			(
				p__d__instance(PD,c__PaintingDevice)
			)
			=>
			(
				(?[PAINT]: 
					(
						(
							(
								p__d__subclass(PAINT,c__Painting)
							)
						 &
							(
								p__capability(PAINT,c__instrument,PD)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?OBJ ?PD ?STUFF ?COVER ?SURF)
% 		(=> 
% 			($instance ?PD PaintingDevice)
% 			(hasPurpose ?PD (exists ([|] ?STUFF ([|] ?COVER ([|] ?SURF ([|] ?OBJ [])))) (and ([|] ($instance ?STUFF Substance) ([|] ($instance ?COVER Covering) ([|] ($instance ?OBJ Object) ([|] (surface ?SURF ?OBJ) ([|] (agent ?COVER ?PD) ([|] (instrument ?COVER ?STUFF) ([|] (patient ?COVER ?SURF) []))))))))))
% 		)
% 	)


% ($documentation potentialOfHydrogen EnglishLanguage "(potentialOfHydrogen ?SOLUTION ?NUMBER) 
% means that the Solution ?SOLUTION has a pH value of ?NUMBER.  The ph varies 
% between 0 and 14, and it is a measure of the acidity or alkalinity of ?SOLUTION.  
% More precisely,  and it is the logarithm of the reciprocal of the quantity of 
% &%AtomGrams of &%Hydrogen ions.")


fof( miloA547, axiom,
	p__d__instance(c__potentialOfHydrogen,c__BinaryPredicate)
).


% 	($domain potentialOfHydrogen 1 Solution)

% 	($domain potentialOfHydrogen 2 RealNumber)

fof( miloA550, axiom,
	(![S,N]: 
		(
			(
				(
					(
						p__d__instance(N,c__RealNumber)
					)
				 &
					(
						p__d__instance(S,c__Solution)
					)
				 &
					(
						p__potentialOfHydrogen(S,N)
					)
				)
			)
			=>
			(
				(
					(
						p__greaterThanOrEqualTo(N,c__0)
					)
				 &
					(
						p__lessThanOrEqualTo(N,c__14)
					)
				)
			)
		)
	)
).


fof( miloA551, axiom,
	p__d__subclass(c__Tracing,c__ContentDevelopment)
).


fof( miloA552, axiom,
	p__d__subclass(c__Tracing,c__SurfaceChange)
).



% ($documentation Tracing EnglishLanguage "Any &%ContentDevelopment that results in a &%Blueprint.")


fof( miloA553, axiom,
	(![T]: 
		(
			(
				p__d__instance(T,c__Tracing)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__d__instance(P,c__Blueprint)
							)
						 &
							(
								p__result(T,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA554, axiom,
	p__d__subclass(c__ComposingMusic,c__ContentDevelopment)
).



% ($documentation ComposingMusic EnglishLanguage "&%ComposingMusic is a type of &%ContentDevelopment
% that results in a &%MusicalComposition")


% (termFormat EnglishLanguage ComposingMusic "composing music")

fof( miloA555, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__ComposingMusic)
			)
			=>
			(
				(?[M]: 
					(
						(
							(
								p__d__instance(M,c__MusicalComposition)
							)
						 &
							(
								p__result(C,M)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA556, axiom,
	p__d__subclass(c__Drawing,c__ContentDevelopment)
).


fof( miloA557, axiom,
	p__d__subclass(c__Drawing,c__SurfaceChange)
).



% ($documentation Drawing EnglishLanguage "Any &%ContentDevelopment that results in a &%Sketch.")


fof( miloA558, axiom,
	(![DRAW]: 
		(
			(
				p__d__instance(DRAW,c__Drawing)
			)
			=>
			(
				(?[SKETCH]: 
					(
						(
							(
								p__d__instance(SKETCH,c__Sketch)
							)
						 &
							(
								p__result(DRAW,SKETCH)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA559, axiom,
	p__d__subclass(c__Focusing,c__QuantityChange)
).



% ($documentation Focusing EnglishLanguage "Altering the relative distance of a &%Lens 
% so that a visual image is sharper.")


fof( miloA560, axiom,
	(![F]: 
		(
			(
				p__d__instance(F,c__Focusing)
			)
			=>
			(
				(?[L]: 
					(
						(
							(
								p__d__instance(L,c__Lens)
							)
						 &
							(
								p__patient(F,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA561, axiom,
	p__d__subclass(c__DisplayArtifact,c__Artifact)
).



% ($documentation DisplayArtifact EnglishLanguage "Something for posting content so 
% that it can be disseminated to the public.")


% 	(forall (?D ?I ?P ?DA)
% 		(=> 
% 			($instance ?DA DisplayArtifact)
% 			(hasPurpose ?DA (exists ([|] ?P ([|] ?D ([|] ?I []))) (and ([|] ($instance ?P Putting) ([|] ($instance ?D Disseminating) ([|] ($instance ?I ContentBearingObject) ([|] (patient ?P ?I) ([|] (patient ?D ?I) ([|] (destination ?P ?DA) [])))))))))
% 		)
% 	)

fof( miloA563, axiom,
	p__d__subclass(c__VehicleWheel,c__Wheel)
).



% ($documentation VehicleWheel EnglishLanguage "&%VehicleWheel is a class of cylindrical 
% &%Devices used to move a &%RoadVehicle along a road, running either  
% directly on the wheel rims or on tires attached to the wheel rims.")


fof( miloA564, axiom,
	p__d__subclass(c__Wheel,c__Artifact)
).



% ($documentation Wheel EnglishLanguage "A circular &%Artifact which is a component of 
% &%LandVehicles and of some &%Devices.")


fof( miloA565, axiom,
	(![VEHICLE]: 
		(
			(
				p__d__instance(VEHICLE,c__LandVehicle)
			)
			=>
			(
				(?[WHEEL]: 
					(
						(
							(
								p__d__instance(WHEEL,c__Wheel)
							)
						 &
							(
								p__part(WHEEL,VEHICLE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA566, axiom,
	p__d__subclass(c__VehicleController,c__Device)
).



% ($documentation VehicleController EnglishLanguage "Any &%Device which is used to start, stop or 
% control the movements of a &%Vehicle.  This class covers steering wheels, brakes, 
% acceleration pedals, airplane sticks, etc.")


fof( miloA567, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__VehicleController)
			)
			=>
			(
				(?[V]: 
					(
						(
							(
								p__d__instance(V,c__Vehicle)
							)
						 &
							(
								p__part(C,V)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?D ?C)
% 		(=> 
% 			($instance ?C VehicleController)
% 			(hasPurpose ?C (exists ([|] ?D []) (and ([|] ($instance ?D Driving) ([|] (instrument ?D ?C) [])))))
% 		)
% 	)

fof( miloA569, axiom,
	p__d__subclass(c__SteeringWheel,c__VehicleController)
).



% ($documentation SteeringWheel EnglishLanguage "A &%VehicleController which enables one to steer 
% a &%Vehicle.")


fof( miloA570, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__SteeringWheel)
			)
			=>
			(
				p__capability(c__DirectionChange,c__instrument,W)
			)
		)
	)
).


fof( miloA571, axiom,
	p__d__subclass(c__VehicleBrake,c__VehicleController)
).



% ($documentation VehicleBrake EnglishLanguage "A &%VehicleController which is capable of stopping 
% the motion of a &%Vehicle.")


% 	(forall (?V ?S ?B)
% 		(=> 
% 			(and 
% 				($instance ?B VehicleBrake)
% 				($instance ?V Vehicle)
% 				(part ?B ?V)
% 			)
% 			(hasPurpose ?B (exists ([|] ?S []) (and ([|] ($instance ?S (StopFn Motion)) ([|] (patient ?S ?V) ([|] (instrument ?S ?B) []))))))
% 		)
% 	)

fof( miloA573, axiom,
	p__d__subclass(c__VehicleThrottle,c__VehicleController)
).



% ($documentation VehicleThrottle EnglishLanguage "A &%VehicleController which controls the amount 
% of &%Fuel which is supplied to the &%Engine.")


fof( miloA574, axiom,
	p__d__subclass(c__VehicleTire,c__Artifact)
).



% ($documentation VehicleTire EnglishLanguage "A covering, usually made of rubber, for a &%Wheel.")


fof( miloA575, axiom,
	(![T]: 
		(
			(
				p__d__instance(T,c__VehicleTire)
			)
			=>
			(
				(?[W]: 
					(
						(
							(
								p__d__instance(W,c__VehicleWheel)
							)
						 &
							(
								p__part(T,W)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA576, axiom,
	p__d__subclass(c__VehicleWindow,c__Window)
).



% ($documentation VehicleWindow EnglishLanguage "Any &%Window which is part of a &%Vehicle, 
% e.g. the &%Windshield and &%RearWindow of an &%Automobile.")


fof( miloA577, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__VehicleWindow)
			)
			=>
			(
				(?[V]: 
					(
						(
							(
								p__d__instance(V,c__Vehicle)
							)
						 &
							(
								p__part(W,V)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA578, axiom,
	p__d__subclass(c__Windshield,c__VehicleWindow)
).


fof( miloA579, axiom,
	p__d__disjoint(c__Windshield,c__RearWindow)
).



% ($documentation Windshield EnglishLanguage "Any &%VehicleWindow which located at the front 
% of a &%RoadVehicle.")


fof( miloA580, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__Windshield)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(A,c__RoadVehicle)
							)
						 &
							(
								p__part(W,f__FrontFn1(A))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA581, axiom,
	p__d__subclass(c__LandVehicle,c__Vehicle)
).



% ($documentation LandVehicle EnglishLanguage 
% "&%LandVehicle is the class of &%TransportationDevices that travel on 
% land.  The two main types of &%LandVehicle are &%RoadVehicle and 
% &%RailVehicle. Note that this includes vehicles which travel on any solid
% surface, including a frozen body of water or snow.")


% 	(forall (?EV ?X ?SURF)
% 		(=> 
% 			($instance ?X LandVehicle)
% 			(hasPurpose ?X (exists ([|] ?EV ([|] ?SURF [])) (and ([|] (surface ?SURF GeographicArea) ([|] ($instance ?EV Transportation) ([|] (holdsDuring (WhenFn ?EV) (meetsSpatially ?X ?SURF)) []))))))
% 		)
% 	)

fof( miloA583, axiom,
	p__d__subclass(c__WaterVehicle,c__Vehicle)
).



% ($documentation WaterVehicle EnglishLanguage "&%WaterVehicle is the class of all 
% &%TransportationDevices used to travel on or in water.")


% 	(forall (?EV ?X ?SURF)
% 		(=> 
% 			($instance ?X WaterVehicle)
% 			(hasPurpose ?X (exists ([|] ?EV ([|] ?SURF [])) (and ([|] ($instance ?SURF Water) ([|] ($instance ?EV Transportation) ([|] (holdsDuring (WhenFn ?EV) (meetsSpatially ?X ?SURF)) []))))))
% 		)
% 	)

fof( miloA585, axiom,
	(![CRAFT,EVENT]: 
		(
			(
				(
					(
						p__d__instance(CRAFT,c__WaterVehicle)
					)
				 &
					(
						p__d__instance(EVENT,c__Transportation)
					)
				 &
					(
						p__instrument(EVENT,CRAFT)
					)
				)
			)
			=>
			(
				(?[WATER]: 
					(
						(
							(
								p__d__instance(WATER,c__WaterArea)
							)
						 &
							(
								p__eventLocated(EVENT,WATER)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA586, axiom,
	p__d__subclass(c__RoadVehicle,c__LandVehicle)
).



% ($documentation RoadVehicle EnglishLanguage "The class of &%LandVehicles that are not 
% &%RollingStock.")


fof( miloA587, axiom,
	p__d__subclass(c__Fleet,c__Collection)
).



% ($documentation Fleet EnglishLanguage "A &%Collection of &%Vehicle")


% (termFormat EnglishLanguage Fleet "Fleet")

% 	(forall (?FLEET)
% 		(=> 
% 			($instance ?FLEET Fleet)
% 			(memberType ?FLEET Vehicle)
% 		)
% 	)

fof( miloA589, axiom,
	p__d__instance(c__fleetSize,c__BinaryPredicate)
).


% 	($domain fleetSize 1 Agent)

% 	($domain fleetSize 2 Integer)


% ($documentation fleetSize EnglishLanguage "(fleetSize ?AGENT ?NUM) means the &%Agent 
% ?AGENT has a fleet size of an &%Integer ?NUM. The &%Fleet can consists of any type of 
% &%Vehicle")


% (termFormat EnglishLanguage fleetSize "Fleet Size")

fof( miloA592, axiom,
	(![AGENT,FLEET,NUM]: 
		(
			(
				(
					(
						p__d__instance(NUM,c__Integer)
					)
				 &
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(FLEET,c__Fleet)
					)
				 &
					(
						p__fleetSize(AGENT,NUM)
					)
				 &
					(
						p__possesses(AGENT,FLEET)
					)
				)
			)
			=>
			(
				p__memberCount(FLEET,NUM)
			)
		)
	)
).


fof( miloA593, axiom,
	p__d__subclass(c__Axle,c__Device)
).



% ($documentation Axle EnglishLanguage "Axle is a class of &%Devices each of which can 
% be paired with two &%VehicleWheels to rotate and move a &%RoadVehicle.")


fof( miloA594, axiom,
	(![V,W]: 
		(
			(
				(
					(
						p__d__instance(V,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(W,c__VehicleWheel)
					)
				 &
					(
						p__d__instance(V,c__RoadVehicle)
					)
				 &
					(
						p__part(W,V)
					)
				)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__CorpuscularObject)
							)
						 &
							(
								p__d__instance(A,c__Axle)
							)
						 &
							(
								p__component(A,V)
							)
						 &
							(
								p__connected(W,A)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; MSv:changed definition of paper based on use to one based on production
% )


% ($documentation Paper EnglishLanguage "Paper is a flat sheet
% of fibers, usually produced by spreading a wet solution of
% wood particles on a flat surface and drying through heat and
% pressure.  The fibers can also be cotton or a synthetic,
% although typically the bulk of the substance is wood fibers.
% This includes all manner of paper products that may have
% varying thicknesses, colors or texture.  This is
% distinguished from flat wood products such as plywood and
% particle board which have a structural function in building
% construction.  Sheathing materials such as the paper affixed
% to sheetrock however, is paper.")


fof( miloA595, axiom,
	p__d__subclass(c__Paper,c__Artifact)
).


% 	(forall (?X)
% 		(=> 
% 			($instance ?X Paper)
% 			(exists (?MAKE ?CELL ?PRESS)
% 				(and 
% 					($instance ?MAKE Making)
% 					($instance ?CELL Cellulose)
% 					($instance ?PRESS Compressing)
% 					(resource ?MAKE ?CELL)
% 					(result ?MAKE ?X)
% 					(subProcess ?MAKE ?PRESS)
% 					(patient ?PRESS ?CELL)
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; (=>
% ;;  ($instance ?PAPER Paper)
% ;;  (hasPurpose ?PAPER 
% ;;    (exists (?TEXT) 
% ;;      (and
% ;;        ($instance ?TEXT Text)
% ;;        (part ?TEXT ?PAPER)))))
% )

fof( miloA597, axiom,
	p__d__subclass(c__CurrencyBill,c__Currency)
).


fof( miloA598, axiom,
	p__d__partition3(c__Currency,c__CurrencyBill,c__CurrencyCoin)
).



% ($documentation CurrencyBill EnglishLanguage "Any instance of &%Currency that is made 
% of paper.")


fof( miloA599, axiom,
	(![BILL]: 
		(
			(
				p__d__instance(BILL,c__CurrencyBill)
			)
			=>
			(
				(?[PAPER]: 
					(
						(
							(
								p__d__instance(PAPER,c__Paper)
							)
						 &
							(
								p__part(PAPER,BILL)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA600, axiom,
	p__d__subclass(c__CurrencyCoin,c__Currency)
).



% ($documentation CurrencyCoin EnglishLanguage "Any instance of &%Currency that is made 
% of &%Metal.")


fof( miloA601, axiom,
	(![COIN]: 
		(
			(
				p__d__instance(COIN,c__CurrencyCoin)
			)
			=>
			(
				(?[METAL]: 
					(
						(
							(
								p__d__subclass(METAL,c__Metal)
							)
						 &
							(
								p__material(METAL,COIN)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA602, axiom,
	p__d__subclass(c__Wire,c__Artifact)
).



% ($documentation Wire EnglishLanguage "A long, thin strand of &%Metal that is used in a wide 
% range of applications, including the wiring of electrical systems, creating 
% bundles and the construction of cages.")


fof( miloA603, axiom,
	(![WIRE]: 
		(
			(
				(
					(
						p__d__instance(WIRE,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(WIRE,c__Wire)
					)
				)
			)
			=>
			(
				p__material(c__Metal,WIRE)
			)
		)
	)
).


fof( miloA604, axiom,
	p__d__subclass(c__WireSpring,c__Wire)
).


fof( miloA605, axiom,
	p__d__subclass(c__WireSpring,c__EngineeringComponent)
).



% ($documentation WireSpring EnglishLanguage "An &%EngineeringComponent consisting of a coil of 
% &%Wire that returns to its original shape when pulled apart or pressed together.")


fof( miloA606, axiom,
	p__d__subclass(c__WireLine,c__Wire)
).


fof( miloA607, axiom,
	p__d__subclass(c__WireLine,c__EngineeringComponent)
).



% ($documentation WireLine EnglishLanguage "A &%Wire that is designed for conducting electricity.")


% 	(forall (?R ?WL)
% 		(=> 
% 			($instance ?WL WireLine)
% 			(hasPurpose ?WL (exists ([|] ?R []) (and ([|] ($instance ?R Radiating) ([|] (path ?R ?WL) [])))))
% 		)
% 	)

fof( miloA609, axiom,
	p__d__subclass(c__TelephoneLine,c__WireLine)
).



% ($documentation TelephoneLine EnglishLanguage "A &%WireLine that carries telephone signals and 
% allows users of &%Telephones or &%Telegraphs to communicate with one another.")


fof( miloA610, axiom,
	(![TL]: 
		(
			(
				(
					(
						p__d__instance(TL,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(TL,c__TelephoneLine)
					)
				)
			)
			=>
			(
				(?[T1,T2]: 
					(
						(
							(
								p__d__instance(T1,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(T2,c__SelfConnectedObject)
							)
						 &
							(
								(
									p__d__instance(T1,c__Telephone)
								 |
									p__d__instance(T1,c__Telegraph)
								)
							)
						 &
							(
								(
									p__d__instance(T2,c__Telephone)
								 |
									p__d__instance(T2,c__Telegraph)
								)
							)
						 &
							(
								~ (
									( T1 = T2 )
								)
							)
						 &
							(
								p__connects(TL,T1,T2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA611, axiom,
	p__d__subclass(c__String,c__Artifact)
).



% ($documentation String EnglishLanguage "A long, thin strand of Fabric that is used for &%Tying 
% things together, etc.  Note that this class covers a cord of any width, including 
% rope, twine, and thread, for example.")


% 	(forall (?S)
% 		(=> 
% 			($instance ?S String)
% 			(material Fabric ?S)
% 		)
% 	)

fof( miloA613, axiom,
	p__d__subclass(c__Plug,c__Artifact)
).



% ($documentation Plug EnglishLanguage "An &%Artifact which is designed to fit snugly within 
% a &%Hole.")


fof( miloA614, axiom,
	(![PLUG]: 
		(
			(
				p__d__instance(PLUG,c__Plug)
			)
			=>
			(
				(?[HOLE]: 
					(
						(
							(
								p__d__instance(HOLE,c__Hole)
							)
						 &
							(
								p__completelyFills(PLUG,HOLE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA615, axiom,
	p__d__subclass(c__Pottery,c__Artifact)
).



% ($documentation Pottery EnglishLanguage "Household &%Artifacts that are made out of baked &%Clay.")


fof( miloA616, axiom,
	(![POTTERY]: 
		(
			(
				p__d__instance(POTTERY,c__Pottery)
			)
			=>
			(
				(?[CLAY]: 
					(
						(
							(
								p__d__instance(CLAY,c__Clay)
							)
						 &
							(
								p__part(CLAY,POTTERY)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA617, axiom,
	p__d__subclass(c__Pillow,c__Artifact)
).



% ($documentation Pillow EnglishLanguage "A soft, stuffed &%Artifact to support the &%Head or 
% the body as a whole while one is sleeping or relaxing.")


fof( miloA618, axiom,
	p__d__subclass(c__Mirror,c__Artifact)
).



% ($documentation Mirror EnglishLanguage "An &%Artifact with a surface that is capable of 
% displaying an image by reflecting light.")


fof( miloA619, axiom,
	(![M]: 
		(
			(
				p__d__instance(M,c__Mirror)
			)
			=>
			(
				p__capability(c__ReflectingLight,c__instrument,M)
			)
		)
	)
).


fof( miloA620, axiom,
	p__d__subclass(c__Furniture,c__Artifact)
).



% ($documentation Furniture EnglishLanguage "Any free-standing and movable 
% &%Artifacts which which are used in day-to-day living and designed 
% to rest on the &%Floor of a &%Room.  This excludes items such as a rock 
% which may serve as a chair but was not created with the intention of 
% supporting that use.") 


% 	(forall (?F ?FL)
% 		(=> 
% 			($instance ?F Furniture)
% 			(hasPurpose ?F (exists ([|] ?FL []) (and ([|] ($instance ?FL Floor) ([|] (meetsSpatially ?F ?FL) [])))))
% 		)
% 	)

fof( miloA622, axiom,
	(![F]: 
		(
			(
				p__d__instance(F,c__Furniture)
			)
			=>
			(
				p__capability(c__Translocation,c__moves,F)
			)
		)
	)
).


fof( miloA623, axiom,
	p__d__disjoint(c__Furniture,c__EngineeringComponent)
).


fof( miloA624, axiom,
	p__d__disjoint(c__Furniture,c__Machine)
).


fof( miloA625, axiom,
	p__d__disjoint(c__Furniture,c__TransportationDevice)
).


fof( miloA626, axiom,
	p__d__disjoint(c__Furniture,c__Weapon)
).


fof( miloA627, axiom,
	p__d__subclass(c__Seat,c__Furniture)
).



% ($documentation Seat EnglishLanguage "Any instance of &%Furniture which is designed to 
% accommodate &%Humans who are &%Sitting.")


% 	(forall (?SEAT ?PERSON)
% 		(=> 
% 			($instance ?SEAT Seat)
% 			(hasPurpose ?SEAT (exists ([|] ?PERSON []) (and ([|] ($instance ?PERSON Human) ([|] (located ?PERSON ?SEAT) ([|] (attribute ?PERSON Sitting) []))))))
% 		)
% 	)

fof( miloA629, axiom,
	p__d__subclass(c__Chair,c__Seat)
).



% ($documentation Chair EnglishLanguage "A &%Seat that is designed to accommodate a single 
% &%Human.")


fof( miloA630, axiom,
	(![CHAIR]: 
		(
			(
				p__d__instance(CHAIR,c__Chair)
			)
			=>
			(
				(![PERSON1,PERSON2]: 
					(
						(
							~ (
								p__d__instance(PERSON1,c__Object)
							)
						 |
							~ (
								p__d__instance(PERSON2,c__Object)
							)
						 |
							~ (
								p__d__instance(PERSON1,c__Human)
							)
						 |
							~ (
								p__d__instance(PERSON2,c__Human)
							)
						 |
							~ (
								p__attribute(PERSON1,c__Sitting)
							)
						 |
							~ (
								p__attribute(PERSON2,c__Sitting)
							)
						 |
							~ (
								p__located(PERSON1,CHAIR)
							)
						 |
							~ (
								p__located(PERSON2,CHAIR)
							)
						 |
							( PERSON1 = PERSON2 )
						)
					)
				)
			)
		)
	)
).


fof( miloA631, axiom,
	p__d__subclass(c__Sofa,c__Seat)
).



% ($documentation Sofa EnglishLanguage "A padded &%Seat that is designed to accommodate more 
% than one &%Human.")


% 	(forall (?T ?P1 ?P2 ?S)
% 		(=> 
% 			($instance ?S Sofa)
% 			(hasPurpose ?S (exists ([|] ?P1 ([|] ?P2 ([|] ?T []))) (and ([|] (not (equal ?P1 ?P2)) ([|] ($instance ?P1 Human) ([|] ($instance ?P2 Human) ([|] (holdsDuring ?T (and ([|] (attribute ?P1 Sitting) ([|] (attribute ?P2 Sitting) ([|] (eventLocated ?P1 ?S) ([|] (eventLocated ?P2 ?S) [])))))) [])))))))
% 		)
% 	)

fof( miloA633, axiom,
	p__d__subclass(c__Bed,c__Furniture)
).



% ($documentation Bed EnglishLanguage "A piece of &%Furniture which is primarily for sleeping.")


% 	(forall (?PERSON ?BED)
% 		(=> 
% 			($instance ?BED Bed)
% 			(hasPurpose ?BED (exists ([|] ?PERSON []) (and ([|] (attribute ?PERSON Asleep) ([|] (located ?PERSON ?BED) [])))))
% 		)
% 	)

fof( miloA635, axiom,
	p__d__subclass(c__KingBed,c__Bed)
).



% ($documentation KingBed EnglishLanguage "A &%KingBed is a type of &%Bed that is 1.9m
% by 2.0m in size")


% (termFormat EnglishLanguage KingBed "king-sized bed")

% ($comment 
% ;; (=>
% ;;   ($instance ?X KingBed)
% ;;   (and
% ;;     (width ?X (MeasureFn 1.9 Meter))
% ;;     (length ?X (MeasureFn 2.0 Meter))))
% )

% 	(forall (?TIME ?P1 ?P2 ?P3 ?X)
% 		(=> 
% 			($instance ?X KingBed)
% 			(modalAttribute (exists ([|] ?P1 ([|] ?P2 ([|] ?P3 ([|] ?TIME [])))) (and ([|] (not (equal ?P1 ?P2)) ([|] (not (equal ?P2 ?P3)) ([|] (not (equal ?P1 ?P3)) ([|] (attribute ?P1 Asleep) ([|] (attribute ?P2 Asleep) ([|] (attribute ?P3 Asleep) ([|] ($instance ?P1 Human) ([|] ($instance ?P2 Human) ([|] ($instance ?P3 Human) ([|] (holdsDuring ?TIME (and ([|] (located ?P1 ?X) ([|] (located ?P2 ?X) ([|] (located ?P3 ?X) []))))) [])))))))))))) Possibility)
% 		)
% 	)

fof( miloA637, axiom,
	p__d__subclass(c__QueenBed,c__Bed)
).



% ($documentation QueenBed EnglishLanguage "A &%QueenBed is a type of &%Bed that is 1.5m
% by 2.0m in size")


% (termFormat EnglishLanguage QueenBed "queen-sized bed")

% ($comment 
% ;; (=>
% ;;   ($instance ?X QueenBed)
% ;;   (and
% ;;     (width ?X (MeasureFn 1.5 Meter))
% ;;     (length ?X (MeasureFn 2.0 Meter))))
% )

% 	(forall (?P3 ?TIME ?P1 ?P2 ?X)
% 		(=> 
% 			($instance ?X QueenBed)
% 			(modalAttribute (exists ([|] ?P1 ([|] ?P2 [])) (and ([|] (not (equal ?P1 ?P2)) ([|] (not (equal ?P2 ?P3)) ([|] (attribute ?P1 Asleep) ([|] (attribute ?P2 Asleep) ([|] ($instance ?P1 Human) ([|] ($instance ?P2 Human) ([|] (holdsDuring ?TIME (and ([|] (located ?P1 ?X) ([|] (located ?P2 ?X) [])))) []))))))))) Possibility)
% 		)
% 	)

fof( miloA639, axiom,
	p__d__subclass(c__DoubleBed,c__Bed)
).



% ($documentation DoubleBed EnglishLanguage "A &%DoubleBed is a type of &%Bed that is 1.35m
% by 2.0m in size")


% (termFormat EnglishLanguage DoubleBed "full-sized bed")

% ($comment 
% ;; (=>
% ;;   ($instance ?X DoubleBed)
% ;;   (and
% ;;     (width ?X (MeasureFn 1.35 Meter))
% ;;     (length ?X (MeasureFn 2.0 Meter))))
% )

% 	(forall (?P3 ?TIME ?P1 ?P2 ?X)
% 		(=> 
% 			($instance ?X DoubleBed)
% 			(modalAttribute (exists ([|] ?P1 ([|] ?P2 [])) (and ([|] (not (equal ?P1 ?P2)) ([|] (not (equal ?P2 ?P3)) ([|] (attribute ?P1 Asleep) ([|] (attribute ?P2 Asleep) ([|] ($instance ?P1 Human) ([|] ($instance ?P2 Human) ([|] (holdsDuring ?TIME (and ([|] (located ?P1 ?X) ([|] (located ?P2 ?X) [])))) []))))))))) Possibility)
% 		)
% 	)

fof( miloA641, axiom,
	p__d__subclass(c__SingleBed,c__Bed)
).



% ($documentation SingleBed EnglishLanguage "A &%SingleBed is a type of &%Bed that is 1m
% by 2.0m in size")


% (termFormat EnglishLanguage SingleBed "twin-sized bed")

% ($comment 
% ;; (=>
% ;;   ($instance ?X SingleBed)
% ;;   (and
% ;;     (width ?X (MeasureFn 1.0 Meter))
% ;;     (length ?X (MeasureFn 2.0 Meter))))
% )

fof( miloA642, axiom,
	p__d__subclass(c__BunkBed,c__Bed)
).



% ($documentation BunkBed EnglishLanguage "A &%BunkBed is a type of &%Bed has one bed 
% directly above another")


% (termFormat EnglishLanguage BunkBed "bunk bed")

fof( miloA643, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__BunkBed)
			)
			=>
			(
				(?[BED1,BED2]: 
					(
						(
							(
								p__d__instance(BED1,c__SingleBed)
							)
						 &
							(
								p__d__instance(BED2,c__SingleBed)
							)
						 &
							(
								p__part(BED1,X)
							)
						 &
							(
								p__part(BED2,X)
							)
						 &
							(
								p__orientation(BED1,BED2,c__Above)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA644, axiom,
	p__d__subclass(c__MurphyBed,c__Bed)
).



% ($documentation MurphyBed EnglishLanguage "A &%MurphyBed is a type of &%Bed that can
% be stored vertically inside a wall, closet or cabinet")


% (termFormat EnglishLanguage MurphyBed "pull-down bed")

% 	(forall (?K ?X)
% 		(=> 
% 			($instance ?X MurphyBed)
% 			(exists (?STORAGE)
% 				(and 
% 					($instance ?STORAGE Compartment)
% 					(meetsSpatially ?STORAGE ?X)
% 					(hasPurpose ?STORAGE (exists ([|] ?K []) (and ([|] ($instance ?K Keeping) ([|] (patient ?K ?X) ([|] (destination ?K ?STORAGE) ([|] (holdsDuring (WhenFn ?K) (attribute ?X Vertical)) [])))))))
% 				)
% 			)
% 		)
% 	)

fof( miloA646, axiom,
	p__d__subclass(c__RollawayBed,c__Bed)
).



% ($documentation RollawayBed EnglishLanguage "A &%RollawayBed is a type of &%Bed that is
% mounted on rollers so that it can be easily moved")


% (termFormat EnglishLanguage RollawayBed "rollaway bed")

fof( miloA647, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__RollawayBed)
			)
			=>
			(
				(?[WHEEL]: 
					(
						(
							(
								p__d__instance(WHEEL,c__Wheel)
							)
						 &
							(
								p__part(WHEEL,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA648, axiom,
	p__d__subclass(c__SofaBed,c__Bed)
).



% ($documentation SofaBed EnglishLanguage "A &%SofaBed is a &%Bed that can be kept inside
% a compartment in a &%Sofa")


% (termFormat EnglishLanguage SofaBed "sofa bed")

% 	(forall (?X ?K)
% 		(=> 
% 			($instance ?X SofaBed)
% 			(exists (?SOFA ?STORAGE)
% 				(and 
% 					($instance ?STORAGE Compartment)
% 					(part ?STORAGE ?SOFA)
% 					($instance ?SOFA Sofa)
% 					(hasPurpose ?STORAGE (exists ([|] ?K []) (and ([|] ($instance ?K Keeping) ([|] (patient ?K ?X) ([|] (destination ?K ?STORAGE) []))))))
% 				)
% 			)
% 		)
% 	)

fof( miloA650, axiom,
	p__d__subclass(c__Crib,c__Bed)
).



% ($documentation Crib EnglishLanguage "A &%Crib is a &%Bed for babies")


% (termFormat EnglishLanguage Crib "crib")

% 	(forall (?BABY ?X)
% 		(=> 
% 			($instance ?X Crib)
% 			(hasPurpose ?X (exists ([|] ?BABY []) (and ([|] ($instance ?BABY HumanBaby) ([|] (attribute ?BABY Asleep) ([|] (located ?BABY ?X) []))))))
% 		)
% 	)

fof( miloA652, axiom,
	p__d__subclass(c__Hammock,c__Bed)
).



% ($documentation Hammock EnglishLanguage "&%Hammock is a type of &%Bed made of rope or 
% canvas and is suspended between two stationary objects")


% (termFormat EnglishLanguage Hammock "hammock")

% 	(forall (?X)
% 		(=> 
% 			($instance ?X Hammock)
% 			(and 
% 				(material Fabric ?X)
% 				(exists (?POLE1 ?POLE2 ?GROUND)
% 					(and 
% 						(orientation ?POLE1 ?POLE2 Near)
% 						(connected ?POLE1 ?X)
% 						(connected ?POLE2 ?X)
% 						($instance ?GROUND LandArea)
% 						(located ?X ?GROUND)
% 						(orientation ?X ?GROUND Above)
% 					)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?PROC ?X)
% 		(=> 
% 			($instance ?X Hammock)
% 			(hasPurpose ?X (exists ([|] ?PROC []) (and ([|] ($instance ?PROC LyingDown) ([|] (eventLocated ?PROC ?X) [])))))
% 		)
% 	)

fof( miloA655, axiom,
	p__d__subclass(c__Mattress,c__Artifact)
).



% ($documentation Mattress EnglishLanguage "A &%Mattress is a &%component of a &%Bed 
% that is a cushion to make it more comfortable")


% (termFormat EnglishLanguage Mattress "mattress")

fof( miloA656, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(X,c__Mattress)
					)
				)
			)
			=>
			(
				(?[BED]: 
					(
						(
							(
								p__d__instance(BED,c__CorpuscularObject)
							)
						 &
							(
								p__d__instance(BED,c__Bed)
							)
						 &
							(
								p__component(X,BED)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?PERSON ?X)
% 		(=> 
% 			($instance ?X Mattress)
% 			(hasPurpose ?X (exists ([|] ?PERSON []) (and ([|] (attribute ?PERSON Asleep) ([|] (orientation ?PERSON ?X On) [])))))
% 		)
% 	)

fof( miloA658, axiom,
	p__d__subclass(c__BedFrame,c__Artifact)
).



% ($documentation BedFrame EnglishLanguage "A &%BedFrame is a %&component of a &%Bed that
% supports the mattress")


% (termFormat EnglishLanguage BedFrame "bed frame")

fof( miloA659, axiom,
	(![X,MATTRESS,BEDFRAME]: 
		(
			(
				(
					(
						p__d__instance(X,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(BEDFRAME,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(MATTRESS,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(X,c__Bed)
					)
				 &
					(
						p__component(BEDFRAME,X)
					)
				 &
					(
						p__d__instance(BEDFRAME,c__BedFrame)
					)
				 &
					(
						p__component(MATTRESS,X)
					)
				 &
					(
						p__d__instance(MATTRESS,c__Mattress)
					)
				)
			)
			=>
			(
				p__orientation(MATTRESS,BEDFRAME,c__On)
			)
		)
	)
).


fof( miloA660, axiom,
	p__d__subclass(c__FourPosterBed,c__BedFrame)
).



% ($documentation FourPosterBed EnglishLanguage "&%FourPosterBed is a type of &%BedFrame
% with a post at each corner to support curtains or a canopy")


% (termFormat EnglishLanguage FourPosterBed "four-poster bed")

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the third argument of pointOfIntersection is GeometricPoint, which is subclass of Abstract, whereas the first argument of meetsSpatially is Object, which is subclass of Physical (Physical and Abstract are disjoint)
% ;;
% ;;(=>
% ;;  ($instance ?X FourPosterBed)
% ;;  (exists (?SHAPE)
% ;;    (and
% ;;      (attribute ?X ?SHAPE)
% ;;      ($instance ?SHAPE Quadrilateral)
% ;;      (forall (?CORNER)
% ;;        (=>
% ;;          (and
% ;;            (pointOfIntersection ?SIDE1 ?SIDE2 ?CORNER)
% ;;            (sideOfFigure ?SIDE1 ?SHAPE)
% ;;            (sideOfFigure ?SIDE2 ?SHAPE)
% ;;            (not (equal ?SIDE1 ?SIDE2)))
% ;;          (exists (?POST ?FLOOR)
% ;;            (and
% ;;              (meetsSpatially ?CORNER ?POST)
% ;;              ($instance ?POST Artifact)
% ;;              ($instance ?FLOOR Floor)
% ;;              (orientation ?BED ?FLOOR On)
% ;;              (orientation ?POST ?FLOOR Vertical))))))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA661, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__FourPosterBed)
			)
			=>
			(
				(?[SHAPE]: 
					(
						(
							(
								p__attribute(X,SHAPE)
							)
						 &
							(
								p__d__instance(SHAPE,c__Quadrilateral)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA662, axiom,
	p__d__subclass(c__BedAttribute,c__RelationalAttribute)
).



% ($documentation BedAttribute EnglishLanguage "&%BedAttribute is the class of attributes
% attached to the type of cushion a &%Bed has")


% (termFormat EnglishLanguage BedAttribute "bed attribute")

fof( miloA663, axiom,
	(![ATTR,X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,ATTR)
					)
				 &
					(
						p__d__instance(ATTR,c__BedAttribute)
					)
				)
			)
			=>
			(
				p__d__instance(X,c__Bed)
			)
		)
	)
).


fof( miloA664, axiom,
	p__d__instance(c__WaterBed,c__BedAttribute)
).



% ($documentation WaterBed EnglishLanguage "&%WaterBed describes how the cushion of a &%Bed
% is filled with water")


% (termFormat EnglishLanguage WaterBed "water bed")

fof( miloA665, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__CorpuscularObject)
					)
				 &
					(
						p__attribute(X,c__WaterBed)
					)
				)
			)
			=>
			(
				(?[MATTRESS,WATER]: 
					(
						(
							(
								p__d__instance(MATTRESS,c__CorpuscularObject)
							)
						 &
							(
								p__component(MATTRESS,X)
							)
						 &
							(
								p__contains(MATTRESS,WATER)
							)
						 &
							(
								p__d__instance(WATER,c__Water)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA666, axiom,
	p__d__subclass(c__BedLinen,c__Artifact)
).



% ($documentation BedLinen EnglishLanguage "&%BedLinen is an &%Artifact made of &%Fabric
% that is used to &%Covering a &%Bed")


% (termFormat EnglishLanguage BedLinen "bed linen")

% 	(forall (?X)
% 		(=> 
% 			($instance ?X BedLinen)
% 			(material Fabric ?X)
% 		)
% 	)

% 	(forall (?BED ?COVER ?X)
% 		(=> 
% 			($instance ?X BedLinen)
% 			(hasPurpose ?X (exists ([|] ?COVER ([|] ?BED [])) (and ([|] ($instance ?COVER Covering) ([|] (patient ?COVER ?BED) ([|] ($instance ?BED Bed) ([|] (instrument ?COVER ?X) [])))))))
% 		)
% 	)

fof( miloA669, axiom,
	p__d__subclass(c__Table,c__Furniture)
).



% ($documentation Table EnglishLanguage "A piece of &%Furniture with four legs and a flat top.  
% It is used either for eating, paperwork or meetings.")


fof( miloA670, axiom,
	p__d__subclass(c__Desk,c__Table)
).



% ($documentation Desk EnglishLanguage "A &%Table for a single person which is intended to be 
% used for paperwork.")


fof( miloA671, axiom,
	p__d__subclass(c__ChestOrCabinet,c__Furniture)
).


fof( miloA672, axiom,
	p__d__subclass(c__ChestOrCabinet,c__Container)
).



% ($documentation ChestOrCabinet EnglishLanguage "Any piece of &%Furniture which is also a 
% Container, e.g. a chest of drawers, a memory chest, an armoire, etc.")


fof( miloA673, axiom,
	p__d__subclass(c__Coffin,c__Container)
).



% ($documentation Coffin EnglishLanguage "A &%Container for a &%HumanCorpse.")


% 	(forall (?HC ?C)
% 		(=> 
% 			($instance ?C Coffin)
% 			(hasPurpose ?C (exists ([|] ?HC []) (and ([|] ($instance ?HC HumanCorpse) ([|] (located ?HC ?C) [])))))
% 		)
% 	)

fof( miloA675, axiom,
	p__d__subclass(c__Compartment,c__Container)
).



% ($documentation Compartment EnglishLanguage "A &%Container which is part of another &%Container, 
% e.g. a drawer, a zippered pouch in a piece of luggage, a compartment in a TV 
% dinner, etc.")


fof( miloA676, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Compartment)
			)
			=>
			(
				(?[O]: 
					(
						(
							(
								p__d__instance(O,c__Container)
							)
						 &
							(
								~ (
									( C = O )
								)
							)
						 &
							(
								p__part(C,O)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA677, axiom,
	p__d__subclass(c__Mailbox,c__Container)
).



% ($documentation Mailbox EnglishLanguage "A &%Container whose purpose is to receive items 
% that are mailed to the address associated with the &%Mailbox.")


% 	(forall (?I ?M ?B)
% 		(=> 
% 			($instance ?B Mailbox)
% 			(hasPurpose ?B (exists ([|] ?M ([|] ?I [])) (and ([|] ($instance ?M Mailing) ([|] (patient ?M ?I) ([|] (destination ?M ?B) []))))))
% 		)
% 	)

fof( miloA679, axiom,
	p__d__subclass(c__Screw,c__AttachingDevice)
).



% ($documentation Screw EnglishLanguage "An &%AttachingDevice which contains a spiral of grooves to 
% hold it in place and which is fastened with a &%Screwdriver.")


fof( miloA680, axiom,
	p__d__subclass(c__Screwdriver,c__Device)
).



% ($documentation Screwdriver EnglishLanguage "A &%Device that is used to rotate
% a &%Screw, which by the action of its helical threads is driven into a 
% medium that is softer than the material of the screw itself.")


% 	(forall (?D ?R ?S)
% 		(=> 
% 			($instance ?D Screwdriver)
% 			(hasPurpose ?D (exists ([|] ?R ([|] ?S [])) (and ([|] ($instance ?R Rotating) ([|] (instrument ?R ?D) ([|] (patient ?R ?S) ([|] ($instance ?S Screw) [])))))))
% 		)
% 	)

fof( miloA682, axiom,
	p__d__subclass(c__Hammer,c__Device)
).



% ($documentation Hammer EnglishLanguage "A &%Device that is used to pound &%Nails into a 
% surface, where they become firmly attached.")


% 	(forall (?H ?I ?N)
% 		(=> 
% 			($instance ?H Hammer)
% 			(hasPurpose ?H (exists ([|] ?I ([|] ?N [])) (and ([|] ($instance ?I Impelling) ([|] (instrument ?I ?H) ([|] (patient ?I ?N) ([|] ($instance ?N Nail) [])))))))
% 		)
% 	)

fof( miloA684, axiom,
	p__d__subclass(c__Nail,c__AttachingDevice)
).



% ($documentation Nail EnglishLanguage "An &%AttachingDevice which is a thin piece of metal, with 
% or without a head, that is fastened with a &%Hammer.")


fof( miloA685, axiom,
	p__d__subclass(c__Tape,c__AttachingDevice)
).



% ($documentation Tape EnglishLanguage "A thin strip of &%Fabric or &%Paper that is used to attach 
% two things.")


fof( miloA686, axiom,
	(![TAPE]: 
		(
			(
				p__d__instance(TAPE,c__Tape)
			)
			=>
			(
				(?[PART]: 
					(
						(
							(
								p__d__instance(PART,c__Object)
							)
						 &
							(
								p__part(PART,TAPE)
							)
						 &
							(
								(
									p__d__instance(PART,c__Paper)
								 |
									p__d__instance(PART,c__Fabric)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA687, axiom,
	p__d__subclass(c__Anchor,c__AttachingDevice)
).



% ($documentation Anchor EnglishLanguage "An &%AttachingDevice which is large hook or set of hooks 
% that are used to secure a &%WaterVehicle on the open water.")


fof( miloA688, axiom,
	(![A,ATTACH,S]: 
		(
			(
				(
					(
						p__d__instance(A,c__Anchor)
					)
				 &
					(
						p__d__instance(ATTACH,c__Attaching)
					)
				 &
					(
						p__instrument(ATTACH,A)
					)
				 &
					(
						p__patient(ATTACH,S)
					)
				)
			)
			=>
			(
				p__d__instance(S,c__WaterVehicle)
			)
		)
	)
).


fof( miloA689, axiom,
	p__d__subclass(c__BoatDeck,c__Artifact)
).



% ($documentation BoatDeck EnglishLanguage "One of the levels of a &%WaterVehicle, e.g. the 
% upper deck and lower deck of small boats with a cabin.")


fof( miloA690, axiom,
	(![D]: 
		(
			(
				p__d__instance(D,c__BoatDeck)
			)
			=>
			(
				(?[B]: 
					(
						(
							(
								p__d__instance(B,c__WaterVehicle)
							)
						 &
							(
								p__part(D,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA691, axiom,
	p__d__subclass(c__Button,c__AttachingDevice)
).



% ($documentation Button EnglishLanguage "An &%AttachingDevice that is used on &%Clothing.")


% 	(forall (?B ?C)
% 		(=> 
% 			($instance ?B Button)
% 			(hasPurpose ?B (exists ([|] ?C []) (and ([|] ($instance ?C Clothing) ([|] (part ?B ?C) [])))))
% 		)
% 	)

fof( miloA693, axiom,
	p__d__subclass(c__Clamp,c__AttachingDevice)
).



% ($documentation Clamp EnglishLanguage "An &%AttachingDevice which is designed to attach 
% two things together by means of a movable part which can be tightened 
% or loosened.")


fof( miloA694, axiom,
	p__d__subclass(c__Washer,c__Device)
).



% ($documentation Washer EnglishLanguage "A thin plate (typically disk-shaped) with a &%Hole (typically in the middle) that is normally used to distribute the load of a threaded &%AttachingDevice, but can have also other functions")


% 	(forall (?O1 ?W ?O2)
% 		(=> 
% 			($instance ?W Washer)
% 			(hasPurpose ?W (exists ([|] ?O1 ([|] ?O2 [])) (and ([|] ($instance ?O1 CorpuscularObject) ([|] ($instance ?O2 AttachingDevice) ([|] (meetsSpatially ?O1 ?W) ([|] (contains ?W ?O2) [])))))))
% 		)
% 	)

fof( miloA696, axiom,
	(![O1,O2,W]: 
		(
			(
				(
					(
						p__d__instance(W,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(W,c__Washer)
					)
				 &
					(
						p__d__instance(O1,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(O2,c__AttachingDevice)
					)
				 &
					(
						p__meetsSpatially(O1,W)
					)
				 &
					(
						p__contains(W,O2)
					)
				)
			)
			=>
			(
				(?[PURPOSE]: 
					(
						(
							(
								p__d__instance(PURPOSE,c__Formula)
							)
						 &
							(
								p__hasPurpose(W,PURPOSE)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?W)
% 		(=> 
% 			($instance ?W Washer)
% 			(attribute ?W RingTorus)
% 		)
% 	)

fof( miloA698, axiom,
	p__d__subclass(c__Holder,c__Device)
).



% ($documentation Holder EnglishLanguage "A large class of &%Devices whose purpose is to hold 
% something else, i.e. be the &%instrument of a &%Keeping.")


fof( miloA699, axiom,
	(![DEVICE]: 
		(
			(
				p__d__instance(DEVICE,c__Holder)
			)
			=>
			(
				p__capability(c__Keeping,c__instrument,DEVICE)
			)
		)
	)
).


fof( miloA700, axiom,
	p__d__subclass(c__Saddle,c__Holder)
).



% ($documentation Saddle EnglishLanguage "A &%Device which allows a &%Human to ride on a 
% &%Horse.")


% 	(forall (?HUMAN ?RIDE ?HORSE ?SADDLE)
% 		(=> 
% 			($instance ?SADDLE Saddle)
% 			(capability (KappaFn ?RIDE (exists ([|] ?HUMAN ([|] ?HORSE [])) (and ([|] ($instance ?RIDE Carrying) ([|] (patient ?RIDE ?HUMAN) ([|] ($instance ?HUMAN Human) ([|] (agent ?RIDE ?HORSE) ([|] ($instance ?HORSE Horse) [])))))))) instrument ?SADDLE)
% 		)
% 	)

fof( miloA702, axiom,
	p__d__subclass(c__HorseRiding,c__Carrying)
).



% ($documentation HorseRiding EnglishLanguage "Any instance of &%Carrying where the &%Animal is 
% a &%Horse.")


fof( miloA703, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__HorseRiding)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__Horse)
							)
						 &
							(
								p__instrument(R,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA704, axiom,
	p__d__instance(c__carries,c__BinaryPredicate)
).


% ($comment 
% ;; KJN: Editing this to be more general not only to Animal but to any Agent
% ;;(domain carries 1 Animal)
% )

% 	($domain carries 1 Agent)

% 	($domain carries 2 Object)

% ($comment 
% ;; (documentation carries EnglishLanguage "(carries ?ANIMAL ?OBJECT) means that 
% ;;an &%Animal ?ANIMAL transers an &%OBJECT ?OBJECT from one point to another")
% )


% ($documentation carries EnglishLanguage "(carries ?AGENT ?OBJECT) means that 
% an &%Agent ?AGENT transers an &%OBJECT ?OBJECT from one point to another")


% (termFormat EnglishLanguage carries "carries")

fof( miloA707, axiom,
	(![AGENT,OBJECT]: 
		(
			(
				(
					(
						p__d__instance(OBJECT,c__Object)
					)
				 &
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__carries(AGENT,OBJECT)
					)
				)
			)
			=>
			(
				(?[CARRYING]: 
					(
						(
							(
								p__d__instance(CARRYING,c__Process)
							)
						 &
							(
								p__instrument(CARRYING,AGENT)
							)
						 &
							(
								p__patient(CARRYING,OBJECT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA708, axiom,
	p__d__subclass(c__Tray,c__Holder)
).



% ($documentation Tray EnglishLanguage "A &%Holder that is designed for &%Food, dishes, and 
% flatware.")


fof( miloA709, axiom,
	p__d__subclass(c__Dish,c__Holder)
).



% ($documentation Dish EnglishLanguage "A &%Holder for &%Food while the &%Food is being eaten.")


% 	(forall (?E ?F ?D)
% 		(=> 
% 			($instance ?D Dish)
% 			(hasPurpose ?D (exists ([|] ?F ([|] ?E [])) (and ([|] ($instance ?E Eating) ([|] (patient ?E ?F) ([|] (patient ?E ?D) ([|] ($instance ?F (FoodForFn Animal)) ([|] (located ?F ?D) []))))))))
% 		)
% 	)

fof( miloA711, axiom,
	p__d__subclass(c__Container,c__Holder)
).



% ($documentation Container EnglishLanguage "Any &%Holder whose purpose is to contain 
% something else.  Note that &%Container is more specific in meaning 
% than &%Holder, because a &%Container must have a &%Hole that is at 
% least partially filled by the thing contained.")


% 	(forall (?CONTAINER ?OBJ)
% 		(=> 
% 			($instance ?CONTAINER Container)
% 			(hasPurpose ?CONTAINER (exists ([|] ?OBJ []) (contains ?CONTAINER ?OBJ)))
% 		)
% 	)

fof( miloA713, axiom,
	p__d__subclass(c__Bag,c__Container)
).



% ($documentation Bag EnglishLanguage "A &%Pliable &%Container with the purpose of &%Transfer of &%Object.")


% ($comment 
% ;; MS: Changing the rules so that it becomes a more general term, removing the restriction on material of the container.
% ;;(documentation Bag EnglishLanguage "Any &%Container which is made of &%Fabric.")
% ;;(=>
% ;;  ($instance ?BAG Bag)
% ;;  (exists (?PART)
% ;;    (and
% ;;      (part ?PART ?BAG)
% ;;      ($instance ?PART Fabric))))
% )

fof( miloA714, axiom,
	(![BAG]: 
		(
			(
				p__d__instance(BAG,c__Bag)
			)
			=>
			(
				p__attribute(BAG,c__Pliable)
			)
		)
	)
).


% 	(forall (?BAG ?T ?OBJ)
% 		(=> 
% 			($instance ?BAG Bag)
% 			(hasPurpose ?BAG (exists ([|] ?T ([|] ?OBJ [])) (and ([|] ($instance ?T Transfer) ([|] ($instance ?OBJ Object) ([|] (contains ?BAG ?OBJ) ([|] (instrument ?T ?BAG) ([|] (patient ?T ?OBJ) []))))))))
% 		)
% 	)

fof( miloA716, axiom,
	p__d__subclass(c__Box,c__Container)
).



% ($documentation Box EnglishLanguage "Any six-sided &%Container whose sides are 
% rectangular in shape.")


% 	(forall (?SIDE ?BOX)
% 		(=> 
% 			($instance ?BOX Box)
% 			(equal (CardinalityFn (KappaFn ?SIDE (or ([|] (top ?SIDE ?BOX) ([|] (bottom ?SIDE ?BOX) ([|] (side ?SIDE ?BOX) [])))))) 6)
% 		)
% 	)

fof( miloA718, axiom,
	p__d__subclass(c__TrapOrCage,c__Holder)
).



% ($documentation TrapOrCage EnglishLanguage "A &%Device whose purpose is to trap or cage &%Animals, 
% i.e. to be in instrument in an act of &%Confining.")


% 	(forall (?C ?T)
% 		(=> 
% 			($instance ?T TrapOrCage)
% 			(hasPurpose ?T (exists ([|] ?C []) (and ([|] ($instance ?C Confining) ([|] (instrument ?C ?T) [])))))
% 		)
% 	)

fof( miloA720, axiom,
	p__d__subclass(c__Envelope,c__Container)
).



% ($documentation Envelope EnglishLanguage "A sealable &%Container for one or more pieces of 
% paper which is designed to protect the papers while they are transferred to 
% someone.")


fof( miloA721, axiom,
	p__d__subclass(c__TravelContainer,c__Container)
).



% ($documentation TravelContainer EnglishLanguage "Any &%Container which is intended to be 
% used for carrying clothing, toiletries, and other personal effects that 
% would be needed on a overnight trip.")   


fof( miloA722, axiom,
	p__d__subclass(c__FluidContainer,c__Container)
).



% ($documentation FluidContainer EnglishLanguage "A &%Container which is used to store &%Fluids,  
% i.e. &%Liquids and &%Gases.")


fof( miloA723, axiom,
	(![TANK,STUFF]: 
		(
			(
				(
					(
						p__d__instance(TANK,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(STUFF,c__Object)
					)
				 &
					(
						p__d__instance(TANK,c__FluidContainer)
					)
				 &
					(
						p__contains(TANK,STUFF)
					)
				)
			)
			=>
			(
				p__attribute(STUFF,c__Fluid)
			)
		)
	)
).


fof( miloA724, axiom,
	p__d__subclass(c__Bottle,c__FluidContainer)
).



% ($documentation Bottle EnglishLanguage "A &%Container whose top is narrower than its bottom, which 
% has no handle, and which is intended to store &%Liquids.")


fof( miloA725, axiom,
	(![BOTTLE,STUFF]: 
		(
			(
				(
					(
						p__d__instance(BOTTLE,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(STUFF,c__Object)
					)
				 &
					(
						p__d__instance(BOTTLE,c__Bottle)
					)
				 &
					(
						p__contains(BOTTLE,STUFF)
					)
				)
			)
			=>
			(
				p__attribute(STUFF,c__Liquid)
			)
		)
	)
).


fof( miloA726, axiom,
	(![BOTTLE,BOTTOM,TOP,WIDTH2,WIDTH1]: 
		(
			(
				(
					(
						p__d__instance(BOTTLE,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(BOTTOM,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(TOP,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(WIDTH1,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(WIDTH2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(BOTTLE,c__Bottle)
					)
				 &
					(
						p__bottom(BOTTOM,BOTTLE)
					)
				 &
					(
						p__top(TOP,BOTTLE)
					)
				 &
					(
						p__width(BOTTOM,WIDTH1)
					)
				 &
					(
						p__width(TOP,WIDTH2)
					)
				)
			)
			=>
			(
				p__lessThan(WIDTH2,WIDTH1)
			)
		)
	)
).


fof( miloA727, axiom,
	p__d__subclass(c__DrinkingCup,c__FluidContainer)
).



% ($documentation DrinkingCup EnglishLanguage "An open &%FluidContainer that is intended to serve a &%Beverage 
% to a single person.  Note that this class includes both cups with handles and 
% drinking glasses.")


fof( miloA728, axiom,
	(![CUP,STUFF]: 
		(
			(
				(
					(
						p__d__instance(CUP,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(STUFF,c__Object)
					)
				 &
					(
						p__d__instance(CUP,c__DrinkingCup)
					)
				 &
					(
						p__contains(CUP,STUFF)
					)
				)
			)
			=>
			(
				p__d__instance(STUFF,c__Beverage)
			)
		)
	)
).


fof( miloA729, axiom,
	p__d__subclass(c__SwimmingPool,c__FluidContainer)
).


fof( miloA730, axiom,
	p__d__subclass(c__SwimmingPool,c__StationaryArtifact)
).



% ($documentation SwimmingPool EnglishLanguage "A &%FluidContainer that is filled with &%Water 
% and that is used for &%Swimming.")


% 	(forall (?S ?P)
% 		(=> 
% 			($instance ?P SwimmingPool)
% 			(hasPurpose ?P (exists ([|] ?S []) (and ([|] ($instance ?S Swimming) ([|] (eventLocated ?S ?P) [])))))
% 		)
% 	)

% 	(forall (?P ?F)
% 		(=> 
% 			(and 
% 				($instance ?P SwimmingPool)
% 				(contains ?P ?F)
% 				($instance ?F Fluid)
% 			)
% 			($instance ?F Water)
% 		)
% 	)

fof( miloA733, axiom,
	p__d__subclass(c__BoardOrBlock,c__Artifact)
).



% ($documentation BoardOrBlock EnglishLanguage "A piece of material with flat, rectangular sides.  
% Note that boards and blocks are lumped into a single concept, because the 
% difference between these notions cannot be precisely defined.")


fof( miloA734, axiom,
	(![BOARD]: 
		(
			(
				p__d__instance(BOARD,c__BoardOrBlock)
			)
			=>
			(
				p__capability(c__Constructing,c__resource,BOARD)
			)
		)
	)
).


fof( miloA735, axiom,
	p__d__subclass(c__Brick,c__BoardOrBlock)
).



% ($documentation Brick EnglishLanguage "A block of fired &%Clay that is used in &%Constructing.")


fof( miloA736, axiom,
	(![B]: 
		(
			(
				(
					(
						p__d__instance(B,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(B,c__Brick)
					)
				)
			)
			=>
			(
				p__material(c__Clay,B)
			)
		)
	)
).


% 	(forall (?C ?B)
% 		(=> 
% 			($instance ?B Brick)
% 			(hasPurpose ?B (exists ([|] ?C []) (and ([|] ($instance ?C Constructing) ([|] (resource ?C ?B) [])))))
% 		)
% 	)

fof( miloA738, axiom,
	p__d__subclass(c__Veneer,c__Artifact)
).



% ($documentation Veneer EnglishLanguage "A thin layer covering an &%Object (like &%Furniture) or a &%Wall for decorative or productive purposes.")


fof( miloA739, axiom,
	(![V]: 
		(
			(
				p__d__instance(V,c__Veneer)
			)
			=>
			(
				p__attribute(V,c__Flat)
			)
		)
	)
).


% 	(forall (?V ?OBJ)
% 		(=> 
% 			($instance ?V Veneer)
% 			(hasPurpose ?V (exists ([|] ?OBJ []) (covers ?V ?OBJ)))
% 		)
% 	)

fof( miloA741, axiom,
	p__d__instance(c__tangent,c__BinaryPredicate)
).


% 	($domain tangent 1 OneDimensionalFigure)

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: TwoDimensionalObject is subclass of Physical, whereas the second argument of pointOfFigure is GeometricFigure, which is subclass of Abstract (Physical and Abstract are disjoint)
% ;;
% ;;($domain tangent 2 TwoDimensionalObject)
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

% 	($domain tangent 2 TwoDimensionalFigure)


% ($documentation tangent EnglishLanguage "(&%tangent ?LINE ?CIRCLE) means that the straight line 
% ?LINE is tangent to the figure ?CIRCLE, i.e. ?LINE touches ?CIRCLE without 
% intersecting it.")


fof( miloA744, axiom,
	(![LINE,CIRCLE]: 
		(
			(
				(
					(
						p__d__instance(CIRCLE,c__TwoDimensionalFigure)
					)
				 &
					(
						p__d__instance(LINE,c__OneDimensionalFigure)
					)
				 &
					(
						p__tangent(LINE,CIRCLE)
					)
				)
			)
			=>
			(
				(?[POINT1]: 
					(
						(
							(
								p__d__instance(POINT1,c__GeometricPoint)
							)
						 &
							(
								p__pointOfFigure(POINT1,LINE)
							)
						 &
							(
								p__pointOfFigure(POINT1,CIRCLE)
							)
						 &
							(
								(![POINT2]: 
									(
										(
											(
												(
													p__d__instance(POINT2,c__GeometricPoint)
												)
											 &
												(
													p__pointOfFigure(POINT2,LINE)
												)
											 &
												(
													p__pointOfFigure(POINT2,CIRCLE)
												)
											)
										)
										=>
										(
											( POINT1 = POINT2 )
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA745, axiom,
	p__d__subclass(c__TwoDimensionalObject,c__Object)
).



% ($documentation TwoDimensionalObject EnglishLanguage "A real-world physical object
% with a very flat aspect.  This includes drawings on paper, cave
% paintings and other surface alterations.")


% ($comment 
% ;;(=>
% ;;  ($instance ?T TwoDimensionalObject)
% ;;  (attribute ?T TwoDimensionalFigure))
% )

fof( miloA746, axiom,
	p__d__instance(c__sliceOfFigure,c__BinaryPredicate)
).



% ($documentation sliceOfFigure EnglishLanguage "(sliceOfFigure ?SLICE ?FIGURE) indicates
% that ?SLICE is a 2-d section of the 3-d figure ?FIGURE.  Or, more 
% formally, ?SLICE is 2-d figure formed by the intersection of a plane
% with the 3-d figure ?FIGURE.")


% 	($domain sliceOfFigure 1 TwoDimensionalObject)

% 	($domain sliceOfFigure 2 CorpuscularObject)

fof( miloA749, axiom,
	p__d__instance(c__RoundShape,c__ThreeDimensionalFigure)
).



% ($documentation RoundShape EnglishLanguage "Any &%ThreeDimensionalFigure that has a single
% tangent at every point on its surface.")


% ($comment 
% ;; NS: fixed misspelled name: tangent.
% )

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of meetsSpatially is Object, which is subclass of Physical, whereas the second argument of pointOfFigure is GeometricFigure, which is subclass of Abstract (Physical and Abstract are disjoint)
% ;;
% ;;(=>
% ;;  (attribute ?O RoundShape)
% ;;  (forall (?P)
% ;;    (and
% ;;      (pointOfFigure ?P ?O)
% ;;      ($instance ?TO TwoDimensionalObject)
% ;;      (meetsSpatially ?P ?O)
% ;;      (meetsSpatially ?P ?TO)
% ;;      (exists (?T)       
% ;;        (tangent ?T ?TO)))))
% )

fof( miloA750, axiom,
	p__d__subclass(c__Cone,c__ThreeDimensionalFigure)
).



% ($documentation Cone EnglishLanguage "The class of &%ThreeDimensionalFigures which are 
% produced by rotating a &%RightTriangle around its &%RightAngle.")


fof( miloA751, axiom,
	p__d__subclass(c__Cylinder,c__ThreeDimensionalFigure)
).



% ($documentation Cylinder EnglishLanguage "The class of &%ThreeDimensionalFigures such that 
% all &%GeometricPoints that make up the &%Cylinder are equidistant from a 
% &%OneDimensionalFigure, known as the axis of the &%Cylinder.")


fof( miloA752, axiom,
	p__d__subclass(c__ObliqueAngle,c__TwoDimensionalAngle)
).



% ($documentation ObliqueAngle EnglishLanguage "Any &%TwoDimensionalAngle that has an 
% &%angularMeasure that is greater than 90 &%AngularDegrees.")


% 	(forall (?A ?N)
% 		(=> 
% 			(and 
% 				($instance ?A ObliqueAngle)
% 				(angularMeasure ?A (MeasureFn ?N AngularDegree))
% 			)
% 			(greaterThan ?N 90)
% 		)
% 	)

fof( miloA754, axiom,
	p__d__subclass(c__RightAngle,c__TwoDimensionalAngle)
).



% ($documentation RightAngle EnglishLanguage "Any &%TwoDimensionalAngle that has the 
% &%angularMeasure of 90 &%AngularDegrees.")


% 	(forall (?A)
% 		(=> 
% 			($instance ?A RightAngle)
% 			(angularMeasure ?A (MeasureFn 90 AngularDegree))
% 		)
% 	)

fof( miloA756, axiom,
	p__d__subclass(c__AcuteAngle,c__TwoDimensionalAngle)
).



% ($documentation AcuteAngle EnglishLanguage "Any &%TwoDimensionalAngle that has an 
% &%angularMeasure that is less than 90 &%AngularDegrees.")


fof( miloA757, axiom,
	p__d__partition4(c__TwoDimensionalAngle,c__RightAngle,c__ObliqueAngle,c__AcuteAngle)
).


% 	(forall (?A ?N)
% 		(=> 
% 			(and 
% 				($instance ?A AcuteAngle)
% 				(angularMeasure ?A (MeasureFn ?N AngularDegree))
% 			)
% 			(lessThan ?N 90)
% 		)
% 	)

fof( miloA759, axiom,
	p__d__subclass(c__Polygon,c__ClosedTwoDimensionalFigure)
).



% ($documentation Polygon EnglishLanguage "A &%ClosedTwoDimensionalFigure that is composed 
% exclusively of straight lines, i.e. &%OneDimensionalFigures.")


fof( miloA760, axiom,
	(![POLYGON,PART]: 
		(
			(
				(
					(
						p__d__instance(PART,c__OneDimensionalFigure)
					)
				 &
					(
						p__d__instance(POLYGON,c__Polygon)
					)
				 &
					(
						p__geometricPart(PART,POLYGON)
					)
				)
			)
			=>
			(
				(
					p__sideOfFigure(PART,POLYGON)
				 |
					(?[SIDE]: 
						(
							(
								(
									p__d__instance(SIDE,c__OneDimensionalFigure)
								)
							 &
								(
									p__sideOfFigure(SIDE,POLYGON)
								)
							 &
								(
									p__geometricPart(PART,SIDE)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA761, axiom,
	p__d__subclass(c__Triangle,c__Polygon)
).



% ($documentation Triangle EnglishLanguage "Any three-sided &%Polygon.")


% 	(forall (?SIDE ?TRIANGLE)
% 		(=> 
% 			($instance ?TRIANGLE Triangle)
% 			(equal (CardinalityFn (KappaFn ?SIDE (sideOfFigure ?SIDE ?TRIANGLE))) 3)
% 		)
% 	)

fof( miloA763, axiom,
	p__d__subclass(c__RightTriangle,c__Triangle)
).



% ($documentation RightTriangle EnglishLanguage "Any &%Triangle that contains a &%RightAngle.")


fof( miloA764, axiom,
	(![T]: 
		(
			(
				p__d__instance(T,c__RightTriangle)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__RightAngle)
							)
						 &
							(
								p__angleOfFigure(A,T)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA765, axiom,
	p__d__subclass(c__Quadrilateral,c__Polygon)
).



% ($documentation Quadrilateral EnglishLanguage "Any four-sided &%Polygon.")


% 	(forall (?SIDE ?QUAD)
% 		(=> 
% 			($instance ?QUAD Quadrilateral)
% 			(equal (CardinalityFn (KappaFn ?SIDE (sideOfFigure ?SIDE ?QUAD))) 4)
% 		)
% 	)

fof( miloA767, axiom,
	p__d__subclass(c__Rectangle,c__Quadrilateral)
).



% ($documentation Rectangle EnglishLanguage "Any &%Quadrilateral whose angles are all 
% &%RightAngles.")


fof( miloA768, axiom,
	(![RECTANGLE,ANGLE]: 
		(
			(
				(
					(
						p__d__instance(ANGLE,c__TwoDimensionalAngle)
					)
				 &
					(
						p__d__instance(RECTANGLE,c__Rectangle)
					)
				 &
					(
						p__angleOfFigure(ANGLE,RECTANGLE)
					)
				)
			)
			=>
			(
				p__d__instance(ANGLE,c__RightAngle)
			)
		)
	)
).


fof( miloA769, axiom,
	p__d__subclass(c__Square,c__Rectangle)
).



% ($documentation Square EnglishLanguage "Any &%Rectangle whose sides are all equal.")


fof( miloA770, axiom,
	(![SQUARE]: 
		(
			(
				p__d__instance(SQUARE,c__Square)
			)
			=>
			(
				(?[LENGTH]: 
					(
						(
							(
								p__d__instance(LENGTH,c__LengthMeasure)
							)
						 &
							(
								(![SIDE]: 
									(
										(
											(
												(
													p__d__instance(SIDE,c__OneDimensionalFigure)
												)
											 &
												(
													p__sideOfFigure(SIDE,SQUARE)
												)
											)
										)
										=>
										(
											p__lineMeasure(SIDE,LENGTH)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation DiameterFn EnglishLanguage "(DiameterFn ?CIRCLE) denotes the length of the 
% diameter of the &%Circle ?CIRCLE.")


fof( miloA771, axiom,
	p__d__instance(c__DiameterFn,c__UnaryFunction)
).


fof( miloA772, axiom,
	p__d__instance(c__DiameterFn,c__TotalValuedRelation)
).


% 	($domain DiameterFn 1 Circle)

% 	($range DiameterFn LengthMeasure)

fof( miloA775, axiom,
	(![C,L]: 
		(
			(
				(
					(
						p__d__instance(C,c__Circle)
					)
				 &
					(
						p__d__instance(L,c__LengthMeasure)
					)
				 &
					(
						( f__DiameterFn1(C) = L )
					)
				)
			)
			=>
			(
				(?[R]: 
					(
						(
							(
								p__d__instance(R,c__LengthMeasure)
							)
						 &
							(
								( f__RadiusFn1(C) = R )
							)
						 &
							(
								( f__MultiplicationFn2(R,c__2) = L )
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation RadiusFn EnglishLanguage "(RadiusFn ?CIRCLE) denotes the length of the radius 
% of the &%Circle ?CIRCLE.")


fof( miloA776, axiom,
	p__d__instance(c__RadiusFn,c__UnaryFunction)
).


fof( miloA777, axiom,
	p__d__instance(c__RadiusFn,c__TotalValuedRelation)
).


% 	($domain RadiusFn 1 Circle)

% 	($range RadiusFn LengthMeasure)

fof( miloA780, axiom,
	(![P2,P,C,R]: 
		(
			(
				(
					(
						p__d__instance(C,c__Circle)
					)
				 &
					(
						p__d__instance(P,c__GeometricPoint)
					)
				 &
					(
						p__d__instance(P2,c__GeometricPoint)
					)
				 &
					(
						p__d__instance(R,c__LengthMeasure)
					)
				 &
					(
						( f__CenterOfCircleFn1(C) = P )
					)
				 &
					(
						p__pointOfFigure(P2,C)
					)
				 &
					(
						p__geometricDistance(P2,P,R)
					)
				)
			)
			=>
			(
				( f__RadiusFn1(C) = R )
			)
		)
	)
).


fof( miloA781, axiom,
	p__d__subclass(c__CircleSector,c__ClosedTwoDimensionalFigure)
).



% ($documentation CircleSector EnglishLanguage "A slice of a &%Circle, i.e. any 
% &%ClosedTwoDimensionalFigure which consists of two Radii and the arc of 
% the &%Circle that they bound.")


fof( miloA782, axiom,
	p__subrelation(c__sideOfFigure,c__geometricPart)
).


% 	($domain sideOfFigure 1 OneDimensionalFigure)

% 	($domain sideOfFigure 2 GeometricFigure)


% ($documentation sideOfFigure EnglishLanguage "(&%sideOfFigure ?SIDE ?FIGURE) means that the 
% &%OneDimensionalFigure ?POINT is a side of the &%GeometricFigure ?FIGURE.")


fof( miloA785, axiom,
	p__d__subclass(c__Sphere,c__ThreeDimensionalFigure)
).



% ($documentation Sphere EnglishLanguage "The class of &%ThreeDimensionalFigures such that 
% all &%GeometricPoints that make up the &%Sphere are equidistant from a 
% single &%GeometricPoint, known as the center of the &%Sphere.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the axiom is not correctly written
% ;;
% ;;(=>
% ;;  (and
% ;;    (attribute ?OBJ ?SPHERE)
% ;;    ($instance ?SPHERE Sphere))
% ;;  (exists (?CENTER ?DIST)
% ;;    (forall (?PT)
% ;;      (=>
% ;;        (pointOfFigure ?PT ?OBJ)
% ;;        (geometricDistance ?PT ?CENTER ?DIST)))))
% )

fof( miloA786, axiom,
	p__d__subclass(c__Bubble,c__CorpuscularObject)
).



% ($documentation Bubble EnglishLanguage "A globe which has a &%Liquid surface and which contains 
% a &%Gas.")


fof( miloA787, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Bubble)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__SelfConnectedObject)
							)
						 &
							(
								p__surface(S,B)
							)
						 &
							(
								p__attribute(S,c__Liquid)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA788, axiom,
	(![B,P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Object)
					)
				 &
					(
						p__d__instance(B,c__Bubble)
					)
				 &
					(
						p__interiorPart(P,B)
					)
				)
			)
			=>
			(
				p__attribute(P,c__Gas)
			)
		)
	)
).


fof( miloA789, axiom,
	(![B]: 
		(
			(
				(
					(
						p__d__instance(B,c__Bubble)
					)
				 &
					(
						(![X,S]: 
							(
								(
									~ (
										p__d__instance(S,c__Attribute)
									)
								 |
									~ (
										p__d__instance(X,c__Object)
									)
								 |
									~ (
										p__attribute(X,S)
									)
								 |
									( X = c__Gas )
								 |
									~ (
										p__meetsSpatially(X,B)
									)
								)
							)
						)
					)
				)
			)
			=>
			(
				p__attribute(B,c__RoundShape)
			)
		)
	)
).


fof( miloA790, axiom,
	p__d__subclass(c__Nest,c__CorpuscularObject)
).



% ($documentation Nest EnglishLanguage "Any structure which is created by nonhuman &%Animals for 
% the purpose of giving birth to their offspring.")


% 	(forall (?BIRTH ?NEST)
% 		(=> 
% 			($instance ?NEST Nest)
% 			(hasPurpose ?NEST (exists ([|] ?BIRTH []) (and ([|] ($instance ?BIRTH Birth) ([|] (eventLocated ?BIRTH ?NEST) [])))))
% 		)
% 	)

fof( miloA792, axiom,
	p__d__subclass(c__OutdoorClothing,c__Clothing)
).



% ($documentation OutdoorClothing EnglishLanguage "&%Clothing that is intended to be worn 
% outdoors.")  


% 	(forall (?CLOTHING ?TIME ?PERSON)
% 		(=> 
% 			(and 
% 				($instance ?CLOTHING OutdoorClothing)
% 				(holdsDuring ?TIME (wears ?PERSON ?CLOTHING))
% 			)
% 			(not 
% 				(exists (?BUILDING)
% 					(and 
% 						($instance ?BUILDING Building)
% 						(holdsDuring ?TIME (located ?PERSON ?BUILDING))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA794, axiom,
	p__d__subclass(c__Apron,c__Clothing)
).



% ($documentation Apron EnglishLanguage "An item of &%Clothing that protects the front and 
% middle part of the body while one is &%Cooking or doing other work.")


% 	(forall (?C ?P ?A)
% 		(=> 
% 			($instance ?A Apron)
% 			(hasPurpose ?A (exists ([|] ?P ([|] ?C [])) (and ([|] ($instance ?C Cooking) ([|] (agent ?C ?P) ([|] (holdsDuring (WhenFn ?C) (wears ?P ?A)) []))))))
% 		)
% 	)

fof( miloA796, axiom,
	p__d__subclass(c__Belt,c__Clothing)
).



% ($documentation Belt EnglishLanguage "A piece of &%Clothing that is worn around the waist 
% to restrain another piece of clothing.")


fof( miloA797, axiom,
	(![P,B]: 
		(
			(
				(
					(
						p__d__instance(P,c__Animal)
					)
				 &
					(
						p__wears(P,B)
					)
				 &
					(
						p__d__instance(B,c__Belt)
					)
				)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__Clothing)
							)
						 &
							(
								p__wears(P,C)
							)
						 &
							(
								p__meetsSpatially(B,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA798, axiom,
	p__d__subclass(c__TieClothing,c__Clothing)
).



% ($documentation TieClothing EnglishLanguage "&%Clothing that is intended to be worn around the 
% &%Neck and knotted at the front.")


fof( miloA799, axiom,
	(![P,T]: 
		(
			(
				(
					(
						p__d__instance(T,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(P,c__Animal)
					)
				 &
					(
						p__wears(P,T)
					)
				 &
					(
						p__d__instance(T,c__TieClothing)
					)
				)
			)
			=>
			(
				(?[N]: 
					(
						(
							(
								p__d__instance(N,c__Neck)
							)
						 &
							(
								p__part(N,P)
							)
						 &
							(
								p__contains(T,N)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA800, axiom,
	p__d__subclass(c__Cloak,c__Clothing)
).



% ($documentation Cloak EnglishLanguage "A piece of &%Clothing that covers the whole body 
% except the face (and possibly entire head), hands, and feet.")


fof( miloA801, axiom,
	p__d__subclass(c__Collar,c__Clothing)
).



% ($documentation Collar EnglishLanguage "A piece of &%Clothing that fits around the &%Neck.  
% A &%Collar is always part of a &%Coat or a &%Shirt.")


fof( miloA802, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Collar)
			)
			=>
			(
				(?[OC]: 
					(
						(
							(
								p__d__instance(OC,c__Object)
							)
						 &
							(
								p__part(C,OC)
							)
						 &
							(
								(
									p__d__instance(OC,c__Coat)
								 |
									p__d__instance(OC,c__Shirt)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA803, axiom,
	(![P,C]: 
		(
			(
				(
					(
						p__d__instance(P,c__Animal)
					)
				 &
					(
						p__wears(P,C)
					)
				 &
					(
						p__d__instance(C,c__Collar)
					)
				)
			)
			=>
			(
				(?[N]: 
					(
						(
							(
								p__d__instance(N,c__Neck)
							)
						 &
							(
								p__part(N,P)
							)
						 &
							(
								p__meetsSpatially(C,N)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA804, axiom,
	p__d__subclass(c__Glove,c__Clothing)
).



% ($documentation Glove EnglishLanguage "Clothing that is intended to be worn on the &%Hand.  
% Note that this class covers both gloves which have individual compartments 
% for each of the &%Fingers and mittens.")


fof( miloA805, axiom,
	(![P,G]: 
		(
			(
				(
					(
						p__d__instance(P,c__Animal)
					)
				 &
					(
						p__wears(P,G)
					)
				 &
					(
						p__d__instance(G,c__Glove)
					)
				)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__Hand)
							)
						 &
							(
								p__part(H,P)
							)
						 &
							(
								p__meetsSpatially(G,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA806, axiom,
	p__d__subclass(c__Hat,c__Clothing)
).



% ($documentation Hat EnglishLanguage "A type of &%Clothing that is worn on the &%Head.  Note 
% that this class covers caps, bonnets, berets, etc.")


fof( miloA807, axiom,
	(![PERSON,HAT]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Animal)
					)
				 &
					(
						p__wears(PERSON,HAT)
					)
				 &
					(
						p__d__instance(HAT,c__Hat)
					)
				)
			)
			=>
			(
				(?[HEAD]: 
					(
						(
							(
								p__d__instance(HEAD,c__Head)
							)
						 &
							(
								p__part(HEAD,PERSON)
							)
						 &
							(
								p__meetsSpatially(HAT,HEAD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA808, axiom,
	p__d__subclass(c__Coat,c__OutdoorClothing)
).



% ($documentation Coat EnglishLanguage "&%Clothing that has sleeves and covers from the neck 
% down.  &%Coats are intended to be worn outdoors.")


fof( miloA809, axiom,
	p__d__subclass(c__Trousers,c__Clothing)
).



% ($documentation Trousers EnglishLanguage "A piece of &%Clothing that covers each &%Leg 
% of a person separately.")


fof( miloA810, axiom,
	(![H,T]: 
		(
			(
				(
					(
						p__d__instance(T,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(H,c__Animal)
					)
				 &
					(
						p__wears(H,T)
					)
				 &
					(
						p__d__instance(T,c__Trousers)
					)
				)
			)
			=>
			(
				(?[L]: 
					(
						(
							(
								p__d__instance(L,c__Leg)
							)
						 &
							(
								p__part(L,H)
							)
						 &
							(
								p__contains(T,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA811, axiom,
	p__d__subclass(c__Shoe,c__Clothing)
).



% ($documentation Shoe EnglishLanguage "&%Clothing that is intended to be worn on the &%Foot.  
% It consists of an upper, a sole, and a heel.")


fof( miloA812, axiom,
	(![PERSON,SHOE]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Animal)
					)
				 &
					(
						p__wears(PERSON,SHOE)
					)
				 &
					(
						p__d__instance(SHOE,c__Shoe)
					)
				)
			)
			=>
			(
				(?[FOOT]: 
					(
						(
							(
								p__d__instance(FOOT,c__Foot)
							)
						 &
							(
								p__part(FOOT,PERSON)
							)
						 &
							(
								p__meetsSpatially(SHOE,FOOT)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation ShoeSole EnglishLanguage "The bottom part of a &%Shoe that is
% intended to be the point of contact with the ground while the
% shoe is being worn.")


fof( miloA813, axiom,
	p__d__subclass(c__ShoeSole,c__Artifact)
).


fof( miloA814, axiom,
	(![SS]: 
		(
			(
				(
					(
						p__d__instance(SS,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(SS,c__ShoeSole)
					)
				)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(S,c__Shoe)
							)
						 &
							(
								p__bottom(SS,S)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation Sandal EnglishLanguage "Any kind of open shoe lacking a markedly
% thicker heel.  The toe may be enclosed, but there must be some opening in the upper
% other than the &%Hole through which the foot is inserted.")


fof( miloA815, axiom,
	p__d__subclass(c__Sandal,c__Shoe)
).


% 	(forall (?S ?A ?D ?F ?I)
% 		(=> 
% 			($instance ?S Sandal)
% 			(exists (?H1 ?H2)
% 				(and 
% 					($instance ?H1 Hole)
% 					($instance ?H2 Hole)
% 					(not 
% 						(equal ?H1 ?H2)
% 					)
% 					(hasPurpose ?H1 (exists ([|] ?D ([|] ?F ([|] ?A ([|] ?I [])))) (and ([|] ($instance ?D Dressing) ([|] ($instance ?F Foot) ([|] (agent ?D ?A) ([|] (part ?F ?A) ([|] (subProcess ?I ?D) ([|] ($instance ?I Inserting) ([|] (patient ?I ?F) ([|] (destination ?I ?H1) [])))))))))))
% 				)
% 			)
% 		)
% 	)

fof( miloA817, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Sandal)
			)
			=>
			(
				(?[SOLE]: 
					(
						(
							(
								p__d__instance(SOLE,c__ShoeSole)
							)
						 &
							(
								p__part(SOLE,S)
							)
						 &
							(
								p__attribute(SOLE,c__Flat)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA818, axiom,
	p__d__subclass(c__Sock,c__Clothing)
).



% ($documentation Sock EnglishLanguage "A piece of &%Clothing that is made of a soft &%Fabric 
% like &%Cotton and that is intended to be worn on the &%Foot.")


fof( miloA819, axiom,
	(![P,S]: 
		(
			(
				(
					(
						p__d__instance(S,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(P,c__Animal)
					)
				 &
					(
						p__wears(P,S)
					)
				 &
					(
						p__d__instance(S,c__Sock)
					)
				)
			)
			=>
			(
				(?[F]: 
					(
						(
							(
								p__d__instance(F,c__Foot)
							)
						 &
							(
								p__part(F,P)
							)
						 &
							(
								p__contains(S,F)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA820, axiom,
	p__d__subclass(c__Shirt,c__Clothing)
).



% ($documentation Shirt EnglishLanguage "An item of &%Clothing which covers the upper body of a 
% &%Human.")


fof( miloA821, axiom,
	(![SHIRT,PERSON]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Animal)
					)
				 &
					(
						p__d__instance(SHIRT,c__Shirt)
					)
				 &
					(
						p__wears(PERSON,SHIRT)
					)
				)
			)
			=>
			(
				p__d__instance(PERSON,c__Human)
			)
		)
	)
).


fof( miloA822, axiom,
	p__d__subclass(c__Sleeve,c__Clothing)
).



% ($documentation Sleeve EnglishLanguage "A piece of &%Clothing that covers the Arm.  A 
% &%Sleeve is always part of a &%Coat or a &%Shirt.")


fof( miloA823, axiom,
	(![P,S]: 
		(
			(
				(
					(
						p__d__instance(S,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(P,c__Animal)
					)
				 &
					(
						p__wears(P,S)
					)
				 &
					(
						p__d__instance(S,c__Sleeve)
					)
				)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Arm)
							)
						 &
							(
								p__part(A,P)
							)
						 &
							(
								p__contains(S,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA824, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Sleeve)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__Object)
							)
						 &
							(
								p__part(S,C)
							)
						 &
							(
								(
									p__d__instance(C,c__Shirt)
								 |
									p__d__instance(C,c__Coat)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA825, axiom,
	p__d__subclass(c__Dress,c__Clothing)
).



% ($documentation Dress EnglishLanguage "An item of &%Clothing which covers the lower body of a 
% &%Woman.")


fof( miloA826, axiom,
	(![DRESS,PERSON]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Animal)
					)
				 &
					(
						p__d__instance(DRESS,c__Dress)
					)
				 &
					(
						p__wears(PERSON,DRESS)
					)
				)
			)
			=>
			(
				p__d__instance(PERSON,c__Woman)
			)
		)
	)
).


fof( miloA827, axiom,
	p__d__subclass(c__ClothingSuit,c__Collection)
).



% ($documentation ClothingSuit EnglishLanguage "A &%Collection of instances of &%Clothing that 
% are designed to be worn together.")


% 	(forall (?ITEM1 ?SUIT ?TIME ?PERSON)
% 		(=> 
% 			(and 
% 				($instance ?SUIT ClothingSuit)
% 				(member ?ITEM1 ?SUIT)
% 				(holdsDuring ?TIME (wears ?PERSON ?ITEM1))
% 			)
% 			(forall (?ITEM2)
% 				(=> 
% 					(member ?ITEM2 ?SUIT)
% 					(holdsDuring ?TIME (wears ?PERSON ?ITEM2))
% 				)
% 			)
% 		)
% 	)

fof( miloA829, axiom,
	p__d__subclass(c__Rug,c__Fabric)
).



% ($documentation Rug EnglishLanguage "A piece of &%Fabric whose purpose is to cover a &%Floor.")


% 	(forall (?R ?C ?F)
% 		(=> 
% 			($instance ?R Rug)
% 			(hasPurpose ?R (exists ([|] ?C []) (and ([|] ($instance ?C Covering) ([|] (instrument ?C ?R) ([|] (patient ?C ?F) ([|] ($instance ?F Floor) [])))))))
% 		)
% 	)


% ($documentation Towel EnglishLanguage "A piece of &%Fabric which is used for &%Drying.")


fof( miloA831, axiom,
	p__d__subclass(c__Towel,c__Fabric)
).


fof( miloA832, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Towel)
			)
			=>
			(
				p__capability(c__Drying,c__instrument,X)
			)
		)
	)
).


% 	(forall (?D ?T)
% 		(=> 
% 			($instance ?T Towel)
% 			(hasPurpose ?T (exists ([|] ?D []) (and ([|] ($instance ?D Drying) ([|] (instrument ?D ?T) [])))))
% 		)
% 	)

fof( miloA834, axiom,
	p__d__subclass(c__Leather,c__Fabric)
).



% ($documentation Leather EnglishLanguage "A &%Fabric that is the result of tanning an &%Animal 
% &%Skin.")


fof( miloA835, axiom,
	(![LEATHER]: 
		(
			(
				p__d__instance(LEATHER,c__Leather)
			)
			=>
			(
				(?[MAKE,SKIN]: 
					(
						(
							(
								p__d__instance(MAKE,c__Making)
							)
						 &
							(
								p__resource(MAKE,SKIN)
							)
						 &
							(
								p__d__instance(SKIN,c__Skin)
							)
						 &
							(
								p__result(MAKE,LEATHER)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA836, axiom,
	p__d__subclass(c__Silk,c__Fabric)
).



% ($documentation Silk EnglishLanguage "Fabric that is woven from the strands produced by 
% certain &%Larval &%Insects.")


fof( miloA837, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Silk)
			)
			=>
			(
				(?[M,T,I]: 
					(
						(
							(
								p__d__instance(T,c__Object)
							)
						 &
							(
								p__d__instance(M,c__Making)
							)
						 &
							(
								p__result(M,S)
							)
						 &
							(
								p__resource(M,T)
							)
						 &
							(
								p__part(T,I)
							)
						 &
							(
								p__d__instance(I,c__Insect)
							)
						 &
							(
								p__attribute(I,c__Larval)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA838, axiom,
	p__d__subclass(c__Wool,c__Fabric)
).



% ($documentation Wool EnglishLanguage "&%Fabric that is made from the &%Hair of &%Sheep.")


fof( miloA839, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__Wool)
			)
			=>
			(
				(?[M,H,S]: 
					(
						(
							(
								p__d__instance(M,c__Making)
							)
						 &
							(
								p__result(M,W)
							)
						 &
							(
								p__resource(M,H)
							)
						 &
							(
								p__part(H,S)
							)
						 &
							(
								p__d__instance(H,c__Hair)
							)
						 &
							(
								p__d__instance(S,c__Sheep)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA840, axiom,
	p__d__subclass(c__Pocket,c__Fabric)
).



% ($documentation Pocket EnglishLanguage "A pouch of &%Fabric in an instance of &%Clothing where 
% something can be kept.")


fof( miloA841, axiom,
	(![POCKET]: 
		(
			(
				p__d__instance(POCKET,c__Pocket)
			)
			=>
			(
				(?[CLOTHING]: 
					(
						(
							(
								p__d__instance(CLOTHING,c__Clothing)
							)
						 &
							(
								p__part(POCKET,CLOTHING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA842, axiom,
	(![POCKET]: 
		(
			(
				p__d__instance(POCKET,c__Pocket)
			)
			=>
			(
				p__capability(c__Keeping,c__instrument,POCKET)
			)
		)
	)
).


fof( miloA843, axiom,
	p__d__subclass(c__Blanket,c__Fabric)
).



% ($documentation Blanket EnglishLanguage "A piece of &%Fabric whose purpose is to keep a 
% person who is in bed warm.")


% 	(forall (?BLANKET ?HEAT ?PERSON ?BED)
% 		(=> 
% 			($instance ?BLANKET Blanket)
% 			(hasPurpose ?BLANKET (exists ([|] ?HEAT ([|] ?PERSON ([|] ?BED []))) (and ([|] ($instance ?HEAT Heating) ([|] (patient ?HEAT ?PERSON) ([|] ($instance ?PERSON Human) ([|] (located ?PERSON ?BED) ([|] ($instance ?BED Bed) []))))))))
% 		)
% 	)

fof( miloA845, axiom,
	p__d__subclass(c__Cotton,c__PlantAnatomicalStructure)
).



% ($documentation Cotton EnglishLanguage "Fibers from the cotton plant that are used in 
% &%Making &%CottonFabric.")


fof( miloA846, axiom,
	p__d__subclass(c__CottonFabric,c__Fabric)
).



% ($documentation CottonFabric EnglishLanguage "Any &%Fabric that is made entirely out of &%Cotton.")


fof( miloA847, axiom,
	(![F]: 
		(
			(
				p__d__instance(F,c__CottonFabric)
			)
			=>
			(
				(?[M,C]: 
					(
						(
							(
								p__d__instance(M,c__Making)
							)
						 &
							(
								p__resource(M,C)
							)
						 &
							(
								p__d__instance(C,c__Cotton)
							)
						 &
							(
								p__result(M,F)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?F)
% 		(=> 
% 			($instance ?F CottonFabric)
% 			(material Cotton ?F)
% 		)
% 	)


% ($documentation Veil EnglishLanguage "A piece of &%Clothing intended to cover or
% obscure the face or hair of a &%Woman.  This is commonly worn for
% religious reasons when in public in &%Muslim countries, but is also customary
% at &%Weddings and &%Funerals among some non-Muslim women.")


fof( miloA849, axiom,
	p__d__subclass(c__Veil,c__Clothing)
).


% 	(forall (?F ?V ?H)
% 		(=> 
% 			($instance ?V Veil)
% 			(hasPurpose ?V (exists ([|] ?F ([|] ?H [])) (or ([|] (and ([|] ($instance ?F Face) ([|] (meetsSpatially ?V ?F) []))) ([|] (and ([|] ($instance ?H Hair) ([|] (meetsSpatially ?V ?H) []))) [])))))
% 		)
% 	)

fof( miloA851, axiom,
	p__d__subclass(c__Concealing,c__Putting)
).



% ($documentation Concealing EnglishLanguage "Locating something in such a way that it cannot 
% be seen.")


% 	(forall (?C ?S ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?C Concealing)
% 				(patient ?C ?OBJ)
% 			)
% 			(hasPurpose ?C (not (exists ([|] ?S []) (and ([|] ($instance ?S Seeing) ([|] (patient ?S ?OBJ) []))))))
% 		)
% 	)

fof( miloA853, axiom,
	p__d__subclass(c__Dressing,c__Putting)
).



% ($documentation Dressing EnglishLanguage "The &%Process of putting on &%Clothing.")


% 	(forall (?DRESS ?AGENT ?CLOTHING)
% 		(=> 
% 			(and 
% 				($instance ?DRESS Dressing)
% 				(agent ?DRESS ?AGENT)
% 				(patient ?DRESS ?CLOTHING)
% 			)
% 			(and 
% 				($instance ?CLOTHING Clothing)
% 				(holdsDuring (BeginFn (WhenFn ?DRESS)) (not (wears ?AGENT ?CLOTHING)))
% 				(holdsDuring (EndFn (WhenFn ?DRESS)) (wears ?AGENT ?CLOTHING))
% 			)
% 		)
% 	)

fof( miloA855, axiom,
	p__d__subclass(c__ChangingClothing,c__Transfer)
).



% ($documentation ChangingClothing EnglishLanguage "Any instance of a process of 
% &%RemovingClothing and &%Dressing.")


fof( miloA856, axiom,
	(![CC]: 
		(
			(
				p__d__instance(CC,c__ChangingClothing)
			)
			=>
			(
				(?[R,D]: 
					(
						(
							(
								p__d__instance(R,c__RemovingClothing)
							)
						 &
							(
								p__d__instance(D,c__Dressing)
							)
						 &
							(
								p__subProcess(R,CC)
							)
						 &
							(
								p__subProcess(D,CC)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA857, axiom,
	p__d__subclass(c__RemovingClothing,c__Uncovering)
).



% ($documentation RemovingClothing EnglishLanguage "Removing &%Clothing from a &%Human or 
% &%Animal in such a way that the &%Human or &%Animal no longer wears the 
% &%Clothing.")


% 	(forall (?REMOVE ?AGENT ?CLOTHING)
% 		(=> 
% 			(and 
% 				($instance ?REMOVE RemovingClothing)
% 				(agent ?REMOVE ?AGENT)
% 				(patient ?REMOVE ?CLOTHING)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?REMOVE)) (wears ?AGENT ?CLOTHING))
% 				(holdsDuring (EndFn (WhenFn ?REMOVE)) (not (wears ?AGENT ?CLOTHING)))
% 			)
% 		)
% 	)

% ($comment 
% ;; MS: Moved from Hotel.kif because how general this term is.
% )

fof( miloA859, axiom,
	p__d__subclass(c__Cleaning,c__Maintaining)
).



% ($documentation Cleaning EnglishLanguage "&%Cleaning refers to the &%Process of removing
% dirt and arranging things")


% 	(forall (?X)
% 		(=> 
% 			($instance ?X Cleaning)
% 			(exists (?OBJ)
% 				(and 
% 					(patient ?X ?OBJ)
% 					(holdsDuring (EndFn (WhenFn ?X)) (attribute ?OBJ Clean))
% 				)
% 			)
% 		)
% 	)

fof( miloA861, axiom,
	p__d__subclass(c__Sweeping,c__Removing)
).



% ($documentation Sweeping EnglishLanguage "Removing small particles from the floor by means of 
% a &%Broom.")


fof( miloA862, axiom,
	(![S,B]: 
		(
			(
				(
					(
						p__d__instance(B,c__Physical)
					)
				 &
					(
						p__d__instance(S,c__Sweeping)
					)
				 &
					(
						p__instrument(S,B)
					)
				)
			)
			=>
			(
				p__d__instance(B,c__Broom)
			)
		)
	)
).


fof( miloA863, axiom,
	p__d__subclass(c__Washing,c__Removing)
).


fof( miloA864, axiom,
	p__d__subclass(c__Washing,c__Cleaning)
).



% ($documentation Washing EnglishLanguage "&%Removing small particles from something by means of 
% a &%Detergent and &%Water.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check:
% ;; - instrument is subrelation of patient
% ;; - The patient of bathing is Animal
% ;; - Animal is subclass of CorpuscularObject
% ;; - Detergent is subclass of Substance
% ;; - CorpuscularObject and Substance are disjoint
% ;;
% ;;(=>
% ;;  ($instance ?P Washing)
% ;;  (exists (?D ?W)
% ;;    (and
% ;;      ($instance ?D Detergent)
% ;;      (instrument ?P ?D)
% ;;      ($instance ?W Water)
% ;;      (instrument ?P ?W))))
% )

fof( miloA865, axiom,
	p__d__subclass(c__CleaningDevice,c__Device)
).



% ($documentation CleaningDevice EnglishLanguage "Any &%Device whose purpose is &%Cleaning something.")


% 	(forall (?C ?D)
% 		(=> 
% 			($instance ?D CleaningDevice)
% 			(hasPurpose ?D (exists ([|] ?C []) (and ([|] ($instance ?C Cleaning) ([|] (instrument ?C ?D) [])))))
% 		)
% 	)

fof( miloA867, axiom,
	p__d__subclass(c__Tying,c__Attaching)
).



% ($documentation Tying EnglishLanguage "The &%Process of tying two things, or two strands of 
% the same thing, together.") 


fof( miloA868, axiom,
	p__d__subclass(c__Untying,c__Detaching)
).


fof( miloA869, axiom,
	p__d__disjoint(c__Untying,c__Tying)
).



% ($documentation Untying EnglishLanguage "The &%Process of untying two things, or two strands 
% of the same thing.") 


fof( miloA870, axiom,
	p__d__subclass(c__Sewing,c__Attaching)
).



% ($documentation Sewing EnglishLanguage "Attaching two pieces of &%Fabric or one part of a 
% piece of &%Fabric to another part by means of needle and thread.")


fof( miloA871, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Sewing)
			)
			=>
			(
				(?[F]: 
					(
						(
							(
								p__d__instance(F,c__Fabric)
							)
						 &
							(
								p__patient(S,F)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA872, axiom,
	p__d__subclass(c__Soldering,c__Attaching)
).



% ($documentation Soldering EnglishLanguage "Attaching two things by means of a &%MetallicAlloy.")


fof( miloA873, axiom,
	(![S,OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(OBJ2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(S,c__Soldering)
					)
				 &
					(
						p__patient(S,OBJ1)
					)
				 &
					(
						p__patient(S,OBJ2)
					)
				 &
					(
						~ (
							( OBJ1 = OBJ2 )
						)
					)
				)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__MetallicAlloy)
							)
						 &
							(
								p__connects(A,OBJ1,OBJ2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA874, axiom,
	p__d__subclass(c__SolderingIron,c__ElectricDevice)
).



% ($documentation SolderingIron EnglishLanguage "An &%ElectricDevice
% for melting &%Solder and thereby &%Attaching metallic objects
% to one another.")


fof( miloA875, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Soldering)
			)
			=>
			(
				(?[SI]: 
					(
						(
							(
								p__d__instance(SI,c__SolderingIron)
							)
						 &
							(
								p__instrument(S,SI)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA876, axiom,
	(![SI]: 
		(
			(
				p__d__instance(SI,c__SolderingIron)
			)
			=>
			(
				(?[X]: 
					(
						(
							(
								p__d__instance(X,c__CorpuscularObject)
							)
						 &
							(
								p__part(X,SI)
							)
						 &
							(
								p__material(c__Metal,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA877, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Soldering)
			)
			=>
			(
				(?[M]: 
					(
						(
							(
								p__d__instance(M,c__Melting)
							)
						 &
							(
								p__subProcess(M,S)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; Start of Pathologies and Diseases
% ;;
% ;; NS: TO DO: In general, it would be better to treat all
% ;; pathologies (diseases, illnesses) as processes, and
% ;; deprecate nearly all uses of DiseaseOrSyndrome.  Clean up
% ;; this area.
% )

fof( miloA878, axiom,
	p__d__instance(c__patientMedical,c__BinaryPredicate)
).


% 	($domain patientMedical 1 Human)

% 	($domain patientMedical 2 CognitiveAgent)


% ($documentation patientMedical EnglishLanguage "The relation of receiving medical care 
% from a recognized medical practitioner.  (&%patientMedical ?PATIENT 
% ?DOCTOR) means that ?PATIENT is the patient of ?DOCTOR.  Note that 
% argument type restriction on the second argument is &%CognitiveAgent 
% to allow for cases where someone is the patient of an &%Organization, 
% viz. a &%CareOrganization.")


fof( miloA881, axiom,
	(![PATIENT,DOCTOR]: 
		(
			(
				(
					(
						p__d__instance(DOCTOR,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(PATIENT,c__Human)
					)
				 &
					(
						p__patientMedical(PATIENT,DOCTOR)
					)
				)
			)
			=>
			(
				(?[PROCESS]: 
					(
						(
							(
								p__d__instance(PROCESS,c__Process)
							)
						 &
							(
								p__patient(PROCESS,PATIENT)
							)
						 &
							(
								p__agent(PROCESS,DOCTOR)
							)
						 &
							(
								(
									p__d__instance(PROCESS,c__DiagnosticProcess)
								 |
									p__d__instance(PROCESS,c__TherapeuticProcess)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA882, axiom,
	p__d__subclass(c__Bandage,c__Fabric)
).



% ($documentation Bandage EnglishLanguage "A piece of &%Fabric that is used in &%Covering an 
% open wound.")


% 	(forall (?TP ?C ?B)
% 		(=> 
% 			($instance ?B Bandage)
% 			(hasPurpose ?B (exists ([|] ?TP ([|] ?C [])) (and ([|] ($instance ?TP TherapeuticProcess) ([|] ($instance ?C Covering) ([|] (subProcess ?C ?TP) ([|] (instrument ?C ?B) [])))))))
% 		)
% 	)

fof( miloA884, axiom,
	p__d__subclass(c__Massaging,c__TherapeuticProcess)
).


fof( miloA885, axiom,
	p__d__subclass(c__Massaging,c__Touching)
).



% ($documentation Massaging EnglishLanguage "A subclass of &%TherapeuticProcess which involves 
% kneading &%Muscles in such a way that tension is relieved, blood circulation 
% is increased, etc.")


fof( miloA886, axiom,
	p__d__subclass(c__RelievingPain,c__TherapeuticProcess)
).



% ($documentation RelievingPain EnglishLanguage "Any &%TherapeuticProcess that removes &%Pain from 
% the patient of the process.")


% 	(forall (?R ?P)
% 		(=> 
% 			(and 
% 				($instance ?R RelievingPain)
% 				(patient ?R ?P)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?R)) (attribute ?P Pain))
% 				(holdsDuring (EndFn (WhenFn ?R)) (not (attribute ?P Pain)))
% 			)
% 		)
% 	)

fof( miloA888, axiom,
	p__d__subclass(c__NonspecificDisease,c__DiseaseOrSyndrome)
).



% ($documentation NonspecificDisease EnglishLanguage "The class of &%DiseaseOrSyndromes that are not 
% caused by a single type of &%Microorganism.")


fof( miloA889, axiom,
	(![DISEASE]: 
		(
			(
				p__d__instance(DISEASE,c__NonspecificDisease)
			)
			=>
			(
				(![AGENT]: 
					(
						(
							~ (
								p__d__instance(AGENT,c__Physical)
							)
						 |
							~ (
								p__d__instance(AGENT,c__Microorganism)
							)
						 |
							(?[VICTIM]: 
								(
									(
										(
											(
												(
													p__d__instance(VICTIM,c__Object)
												)
											 &
												(
													p__attribute(VICTIM,DISEASE)
												)
											)
										)
									 &
										(
											~ (
												p__located(AGENT,VICTIM)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA890, axiom,
	p__d__subclass(c__BacterialDisease,c__InfectiousDisease)
).



% ($documentation BacterialDisease EnglishLanguage "A disease that is caused by instances of 
% &%Bacterium.")


fof( miloA891, axiom,
	p__d__subclass(c__InfectiousDisease,c__DiseaseOrSyndrome)
).



% ($documentation InfectiousDisease EnglishLanguage "Any &%DiseaseOrSyndrome that is caused by a 
% &%Microorganism.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: wrongly quantified variables
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?I InfectiousDisease)
% ;;    (attribute ?A ?I))
% ;;  (exists (?P)
% ;;    (and
% ;;      ($instance ?P PathologicProcess)
% ;;      (agent ?P ?O)
% ;;      ($instance ?O Microorganism)
% ;;      (experiencer ?P ?A))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA892, axiom,
	(![I,A]: 
		(
			(
				(
					(
						p__d__instance(A,c__Agent)
					)
				 &
					(
						p__d__instance(I,c__InfectiousDisease)
					)
				 &
					(
						p__attribute(A,I)
					)
				)
			)
			=>
			(
				(?[P,O]: 
					(
						(
							(
								p__d__instance(P,c__PathologicProcess)
							)
						 &
							(
								p__agent(P,O)
							)
						 &
							(
								p__d__instance(O,c__Microorganism)
							)
						 &
							(
								p__experiencer(P,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA893, axiom,
	p__d__subclass(c__TakingIll,c__PathologicProcess)
).



% ($documentation TakingIll EnglishLanguage "Any &%Process where the experiencer contracts a 
% &%DiseaseOrSyndrome.")


% 	(forall (?T ?A)
% 		(=> 
% 			(and 
% 				($instance ?T TakingIll)
% 				(experiencer ?T ?A)
% 			)
% 			(exists (?D)
% 				(and 
% 					($instance ?D DiseaseOrSyndrome)
% 					(holdsDuring (BeginFn (WhenFn ?T)) (not (attribute ?A ?D)))
% 					(holdsDuring (EndFn (WhenFn ?T)) (attribute ?A ?D))
% 				)
% 			)
% 		)
% 	)

fof( miloA895, axiom,
	p__d__subclass(c__ViralDisease,c__InfectiousDisease)
).



% ($documentation ViralDisease EnglishLanguage "A disease that is caused by instances of 
% &%Virus.")


fof( miloA896, axiom,
	p__d__instance(c__Diarrhea,c__DiseaseOrSyndrome)
).



% ($documentation Diarrhea EnglishLanguage "A &%DiseaseOrSyndrome of frequent, watery bowel 
% movements.  Severe cases can be fatal for the young or weak.  It is
% a common cause of death for the very young in poor developing countries.")


fof( miloA897, axiom,
	p__d__instance(c__Emphysema,c__DiseaseOrSyndrome)
).



% ($documentation Emphysema EnglishLanguage "A &%DiseaseOrSyndrome that affects the &%Lungs and 
% which results in a decrease of breathing ability.")


fof( miloA898, axiom,
	(![H]: 
		(
			(
				(
					(
						p__d__instance(H,c__Object)
					)
				 &
					(
						p__attribute(H,c__Emphysema)
					)
				)
			)
			=>
			(
				(?[L,P]: 
					(
						(
							(
								p__d__instance(L,c__Lung)
							)
						 &
							(
								p__part(L,H)
							)
						 &
							(
								p__d__instance(P,c__PathologicProcess)
							)
						 &
							(
								p__eventLocated(P,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA899, axiom,
	p__d__instance(c__Fever,c__DiseaseOrSyndrome)
).



% ($documentation Fever EnglishLanguage "Having a body temperature which is (significantly) greater 
% than 98.6 degrees Fahrenheit.  This syndrome is often associated with dehydration 
% and chills.")


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?H Human)
% ;;     (attribute ?H Fever))
% ;;   (exists (?N)
% ;;     (and
% ;;       (measure ?H 
% ;;         (MeasureFn ?N FahrenheitDegree))
% ;;       (greaterThan ?N 98.6))))
% )

fof( miloA900, axiom,
	p__d__instance(c__Goiter,c__DiseaseOrSyndrome)
).



% ($documentation Goiter EnglishLanguage "A &%DiseaseOrSyndrome which is due to an &%Iodine deficiency 
% and which results in an enlarged &%ThyroidGland.")


fof( miloA901, axiom,
	(![H]: 
		(
			(
				(
					(
						p__d__instance(H,c__Object)
					)
				 &
					(
						p__attribute(H,c__Goiter)
					)
				)
			)
			=>
			(
				(?[G,P]: 
					(
						(
							(
								p__d__instance(G,c__ThyroidGland)
							)
						 &
							(
								p__part(G,H)
							)
						 &
							(
								p__d__instance(P,c__PathologicProcess)
							)
						 &
							(
								p__eventLocated(P,G)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA902, axiom,
	p__d__instance(c__Tuberculosis,c__BacterialDisease)
).



% ($documentation Tuberculosis EnglishLanguage "A &%BacterialDisease caused by the &%Tubercle &%Bacillus 
% that results in lesions on various body parts, especially the &%Lungs.")


fof( miloA903, axiom,
	p__d__subclass(c__RecoveringFromIllness,c__OrganismProcess)
).



% ($documentation RecoveringFromIllness EnglishLanguage "Any &%Process where the experiencer recovers 
% from a &%DiseaseOrSyndrome.")


% 	(forall (?R ?T ?A)
% 		(=> 
% 			(and 
% 				($instance ?R RecoveringFromIllness)
% 				(experiencer ?R ?A)
% 			)
% 			(exists (?D)
% 				(and 
% 					($instance ?D DiseaseOrSyndrome)
% 					(holdsDuring (BeginFn (WhenFn ?T)) (attribute ?A ?D))
% 					(holdsDuring (EndFn (WhenFn ?T)) (not (attribute ?A ?D)))
% 				)
% 			)
% 		)
% 	)

fof( miloA905, axiom,
	p__d__subclass(c__Protozoa,c__Microorganism)
).



% ($documentation Protozoa EnglishLanguage "Unicellular &%Organisms that are capable of movement 
% and that are found in almost every part of the world.  This class includes 
% amoebas, sporozoans, and paramecia.")



% ($documentation parasite EnglishLanguage "(parasite ?ORGANISM1 ?ORGANISM2) means that there 
% is a parasitic relationship between ?ORGANISM1 and ?ORGANISM2, i.e. ?ORGANISM1 
% inhabits and obtains nourishment from ?ORGANISM2 in such a way that 
% ?ORGANISM2 is injured.")


fof( miloA906, axiom,
	p__d__instance(c__parasite,c__BinaryPredicate)
).


% 	($domain parasite 1 Organism)

% 	($domain parasite 2 Organism)

fof( miloA909, axiom,
	(![O1,O2]: 
		(
			(
				(
					(
						p__d__instance(O2,c__Organism)
					)
				 &
					(
						p__d__instance(O1,c__Organism)
					)
				 &
					(
						p__parasite(O1,O2)
					)
				)
			)
			=>
			(
				p__inhabits(O1,O2)
			)
		)
	)
).


fof( miloA910, axiom,
	(![O1,O2]: 
		(
			(
				(
					(
						p__d__instance(O2,c__Organism)
					)
				 &
					(
						p__d__instance(O1,c__Organism)
					)
				 &
					(
						p__parasite(O1,O2)
					)
				)
			)
			=>
			(
				(?[I]: 
					(
						(
							(
								p__d__instance(I,c__Injuring)
							)
						 &
							(
								p__agent(I,O1)
							)
						 &
							(
								p__patient(I,O2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA911, axiom,
	p__d__instance(c__Cancer,c__DiseaseOrSyndrome)
).



% ($documentation Cancer EnglishLanguage "A &%DiseaseOrSyndrome characterized by pathologic and 
% uncontrolled cell division that results in a &%Tumor.")


fof( miloA912, axiom,
	(![PERSON]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Object)
					)
				 &
					(
						p__attribute(PERSON,c__Cancer)
					)
				)
			)
			=>
			(
				(?[TUMOR]: 
					(
						(
							(
								p__d__instance(TUMOR,c__Tumor)
							)
						 &
							(
								p__part(TUMOR,PERSON)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA913, axiom,
	p__d__subclass(c__Neurosis,c__PsychologicalDysfunction)
).



% ($documentation Neurosis EnglishLanguage "Any &%PsychologicalDysfunction which is not due 
% to an organic impairment of the &%NervousSystem.")


fof( miloA914, axiom,
	p__d__subclass(c__Psychosis,c__PsychologicalDysfunction)
).



% ($documentation Psychosis EnglishLanguage "Any &%PsychologicalDysfunction which is the 
% result of an organic impairment of the &%NervousSystem.")


fof( miloA915, axiom,
	p__d__subclass(c__Atrophy,c__PathologicProcess)
).


fof( miloA916, axiom,
	p__d__subclass(c__Atrophy,c__Decreasing)
).



% ($documentation Atrophy EnglishLanguage "Any decrease in the size of a &%BodyPart which is due to 
% disease or lack of use.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: BodyPart cannot be experiencer (only Organisms)
% ;;
% ;;(=>
% ;;  ($instance ?A Atrophy)
% ;;  (exists (?B)
% ;;    (and
% ;;      (experiencer ?A ?B)
% ;;      ($instance ?B BodyPart))))
% )

fof( miloA917, axiom,
	p__d__subclass(c__Bloating,c__Increasing)
).


fof( miloA918, axiom,
	p__d__subclass(c__Bloating,c__PathologicProcess)
).



% ($documentation Bloating EnglishLanguage "Any &%Process where the stomach or instestines of a 
% &%Human or &%Animal become distended from excessive gas.")


% 	(forall (?B)
% 		(=> 
% 			($instance ?B Bloating)
% 			(exists (?P ?S ?I ?G)
% 				(and 
% 					(experiencer ?B ?P)
% 					($instance ?G Gas)
% 					(or 
% 						(and 
% 							(part ?I ?P)
% 							($instance ?I Intestine)
% 							(contains ?I ?G)
% 						)
% 						(and 
% 							(part ?S ?P)
% 							($instance ?S Stomach)
% 							(contains ?S ?G)
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; End of Pathologies and Diseases
% )

fof( miloA920, axiom,
	p__d__subclass(c__ConjugatedSubstance,c__CompoundSubstance)
).



% ($documentation ConjugatedSubstance EnglishLanguage "A &%CompoundSubstance that results from 
% the &%ChemicalSynthesis of two or more &%CompoundSubstances.")


fof( miloA921, axiom,
	(![CS]: 
		(
			(
				p__d__instance(CS,c__ConjugatedSubstance)
			)
			<=>
			(
				(?[C1,C2,P]: 
					(
						(
							(
								p__d__instance(C1,c__CompoundSubstance)
							)
						 &
							(
								p__d__instance(C2,c__CompoundSubstance)
							)
						 &
							(
								~ (
									( C1 = C2 )
								)
							)
						 &
							(
								p__d__instance(P,c__ChemicalSynthesis)
							)
						 &
							(
								p__resource(P,C1)
							)
						 &
							(
								p__resource(P,C2)
							)
						 &
							(
								p__result(P,CS)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA922, axiom,
	p__d__instance(c__conjugate,c__BinaryPredicate)
).


fof( miloA923, axiom,
	p__d__instance(c__conjugate,c__IrreflexiveRelation)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: a relation cannot be irreflexive, symmetric and transitive
% ;;
% ;;($instance conjugate SymmetricRelation)
% )

fof( miloA924, axiom,
	p__d__instance(c__conjugate,c__TransitiveRelation)
).


% 	($domain conjugate 1 CompoundSubstance)

% 	($domain conjugate 2 CompoundSubstance)


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: a relation cannot be irreflexive, symmetric and transitive
% ;;
% ;;($documentation conjugate EnglishLanguage "(&%conjugate ?COMPOUND1 ?COMPOUND2) means that 
% ;;?COMPOUND1 and ?COMPOUND2 are identical &%CompoundSubstances except that 
% ;;one has one more &%Proton than the other.")
% ;;
% ;;(=>
% ;;   (conjugate ?COMPOUND1 ?COMPOUND2)
% ;;   (exists (?NUMBER1 ?NUMBER2)
% ;;      (and
% ;;         (protonNumber ?COMPOUND1 ?NUMBER1) 
% ;;         (protonNumber ?COMPOUND2 ?NUMBER2)
% ;;         (or
% ;;            (equal ?NUMBER1 (AdditionFn ?NUMBER2 1))
% ;;            (equal ?NUMBER2 (AdditionFn ?NUMBER1 1))))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

% ($documentation conjugate EnglishLanguage "(&%conjugate ?COMPOUND1 ?COMPOUND2) means that 
% ?COMPOUND1 and ?COMPOUND2 are identical &%CompoundSubstances except that 
% ?COMPOUND1 has one more &%Proton than ?COMPOUND2.")

fof( miloA927, axiom,
	(![COMPOUND1,COMPOUND2]: 
		(
			(
				(
					(
						p__d__instance(COMPOUND2,c__CompoundSubstance)
					)
				 &
					(
						p__d__instance(COMPOUND1,c__CompoundSubstance)
					)
				 &
					(
						p__conjugate(COMPOUND1,COMPOUND2)
					)
				)
			)
			=>
			(
				(?[NUMBER1,NUMBER2]: 
					(
						(
							(
								p__d__instance(NUMBER1,c__PositiveInteger)
							)
						 &
							(
								p__d__instance(NUMBER2,c__PositiveInteger)
							)
						 &
							(
								p__protonNumber(COMPOUND1,NUMBER1)
							)
						 &
							(
								p__protonNumber(COMPOUND2,NUMBER2)
							)
						 &
							(
								( NUMBER1 = f__AdditionFn2(NUMBER2,c__1) )
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA928, axiom,
	p__d__subclass(c__Biting,c__Grabbing)
).



% ($documentation Biting EnglishLanguage "Any instance of &%Grabbing where the &%instrument is 
% the &%Mouth of the &%agent.")


fof( miloA929, axiom,
	(![ANIMAL,BITE]: 
		(
			(
				(
					(
						p__d__instance(ANIMAL,c__Agent)
					)
				 &
					(
						p__d__instance(BITE,c__Biting)
					)
				 &
					(
						p__agent(BITE,ANIMAL)
					)
				)
			)
			=>
			(
				(?[MOUTH]: 
					(
						(
							(
								p__d__instance(MOUTH,c__Mouth)
							)
						 &
							(
								p__part(MOUTH,ANIMAL)
							)
						 &
							(
								p__instrument(BITE,MOUTH)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA930, axiom,
	p__d__subclass(c__Strangling,c__Grabbing)
).



% ($documentation Strangling EnglishLanguage "Any instance of &%Grabbing where the patient is 
% someone else's throat and the intention is to make it impossible for the other 
% person to breathe.")


fof( miloA931, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Strangling)
			)
			=>
			(
				(?[T]: 
					(
						(
							(
								p__patient(S,T)
							)
						 &
							(
								p__d__instance(T,c__Throat)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?A ?S ?B ?V)
% 		(=> 
% 			(and 
% 				($instance ?S Strangling)
% 				(agent ?S ?A)
% 				(patient ?S ?V)
% 				($instance ?V Human)
% 			)
% 			(hasPurpose ?S (not (exists ([|] ?B []) (and ([|] ($instance ?B Breathing) ([|] (agent ?B ?V) []))))))
% 		)
% 	)

fof( miloA933, axiom,
	p__d__subclass(c__Spitting,c__Impelling)
).



% ($documentation Spitting EnglishLanguage "Any instance of &%Impelling where the &%origin is 
% the &%Mouth of the &%agent.")


fof( miloA934, axiom,
	(![ANIMAL,SPIT]: 
		(
			(
				(
					(
						p__d__instance(ANIMAL,c__Agent)
					)
				 &
					(
						p__d__instance(SPIT,c__Spitting)
					)
				 &
					(
						p__agent(SPIT,ANIMAL)
					)
				)
			)
			=>
			(
				(?[MOUTH]: 
					(
						(
							(
								p__d__instance(MOUTH,c__Mouth)
							)
						 &
							(
								p__part(MOUTH,ANIMAL)
							)
						 &
							(
								p__origin(SPIT,MOUTH)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA935, axiom,
	p__d__subclass(c__Punching,c__Impelling)
).



% ($documentation Punching EnglishLanguage "Any instance of &%Impelling where the instrument 
% is a &%Fist of the agent.")


fof( miloA936, axiom,
	(![A,P]: 
		(
			(
				(
					(
						p__d__instance(A,c__Agent)
					)
				 &
					(
						p__d__instance(P,c__Punching)
					)
				 &
					(
						p__agent(P,A)
					)
				)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__Hand)
							)
						 &
							(
								p__attribute(H,c__Fist)
							)
						 &
							(
								p__part(H,A)
							)
						 &
							(
								p__instrument(P,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA937, axiom,
	p__d__subclass(c__Kicking,c__Impelling)
).



% ($documentation Kicking EnglishLanguage "Any instance of &%Impelling where the &%instrument 
% is a &%Foot of the &%agent.")


fof( miloA938, axiom,
	(![ANIMAL,KICK]: 
		(
			(
				(
					(
						p__d__instance(ANIMAL,c__Agent)
					)
				 &
					(
						p__d__instance(KICK,c__Kicking)
					)
				 &
					(
						p__agent(KICK,ANIMAL)
					)
				)
			)
			=>
			(
				(?[FOOT]: 
					(
						(
							(
								p__d__instance(FOOT,c__Foot)
							)
						 &
							(
								p__part(FOOT,ANIMAL)
							)
						 &
							(
								p__instrument(KICK,FOOT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA939, axiom,
	p__d__subclass(c__Mailing,c__Transfer)
).



% ($documentation Mailing EnglishLanguage "Any instance of &%Transfer where a postal system is 
% used to move the &%patient, either a letter or a package.")


fof( miloA940, axiom,
	p__d__subclass(c__Messaging,c__Transfer)
).



% ($documentation Messaging EnglishLanguage "Any instance of &%Transfer where a &%Message is the 
% patient.")


fof( miloA941, axiom,
	(![MESSAGING]: 
		(
			(
				p__d__instance(MESSAGING,c__Messaging)
			)
			=>
			(
				(?[M]: 
					(
						(
							(
								p__d__instance(M,c__Message)
							)
						 &
							(
								p__patient(MESSAGING,M)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA942, axiom,
	p__d__instance(c__neighbor,c__BinaryPredicate)
).


fof( miloA943, axiom,
	p__d__instance(c__neighbor,c__SymmetricRelation)
).


fof( miloA944, axiom,
	p__d__instance(c__neighbor,c__IrreflexiveRelation)
).


% 	($domain neighbor 1 Human)

% 	($domain neighbor 2 Human)


% ($documentation neighbor EnglishLanguage "(&%neighbor ?PERSON1 ?PERSON2) means that ?PERSON1 is 
% a neighbor of ?PERSON2, i.e. ?PERSON1 and ?PERSON2 have their &%homes &%Near 
% one another.")


fof( miloA947, axiom,
	(![PERSON1,PERSON2]: 
		(
			(
				(
					(
						p__d__instance(PERSON2,c__Human)
					)
				 &
					(
						p__d__instance(PERSON1,c__Human)
					)
				 &
					(
						p__neighbor(PERSON1,PERSON2)
					)
				)
			)
			=>
			(
				(?[HOME1,HOME2]: 
					(
						(
							(
								p__d__instance(HOME1,c__PermanentResidence)
							)
						 &
							(
								p__d__instance(HOME2,c__PermanentResidence)
							)
						 &
							(
								p__home(PERSON1,HOME1)
							)
						 &
							(
								p__home(PERSON2,HOME2)
							)
						 &
							(
								~ (
									( HOME1 = HOME2 )
								)
							)
						 &
							(
								p__orientation(HOME1,HOME2,c__Near)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA948, axiom,
	p__d__instance(c__capacity,c__BinaryPredicate)
).


% 	($domain capacity 1 SelfConnectedObject)

% 	($domain capacity 2 ConstantQuantity)

fof( miloA951, axiom,
	p__relatedInternalConcept(c__capacity,c__humanCapacity)
).



% ($documentation capacity EnglishLanguage "(&%capacity ?OBJ ?QUANTITY) means that ?OBJ can contain 
% something that has the &%measure of ?QUANTITY.  This predicate denotes maximal 
% capacity, i.e. ?OBJ can hold no more than ?QUANTITY.  Note, however, that this 
% does not mean that &%capacity is a &%SingleValuedRelation, since an object may 
% have various maximal capacities across different dimensions, e.g. a particular 
% box may have a &%capacity of 3 pounds and a &%capacity of 1 liter.")


fof( miloA952, axiom,
	(![OBJ1,OBJ2,MEAS]: 
		(
			(
				(
					(
						p__d__instance(MEAS,c__ConstantQuantity)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__d__instance(OBJ2,c__SelfConnectedObject)
					)
				 &
					(
						p__measure(OBJ1,MEAS)
					)
				 &
					(
						p__contains(OBJ2,OBJ1)
					)
				)
			)
			=>
			(
				p__capacity(OBJ2,MEAS)
			)
		)
	)
).


fof( miloA953, axiom,
	p__d__instance(c__humanCapacity,c__BinaryPredicate)
).


fof( miloA954, axiom,
	p__d__instance(c__humanCapacity,c__SingleValuedRelation)
).


% 	($domain humanCapacity 1 StationaryArtifact)

% 	($domain humanCapacity 2 PositiveInteger)


% ($documentation humanCapacity EnglishLanguage "(&%humanCapacity ?CONSTRUCT ?NUMBER) means that the 
% &%StationaryArtifact ?CONSTRUCT, e.g. a &%Building or a &%Room, can hold a maximum 
% of ?NUMBER &%Humans without crowding.")


fof( miloA957, axiom,
	p__d__instance(c__LastFn,c__UnaryFunction)
).


% 	($domain LastFn 1 List)

% 	($range LastFn Entity)


% ($documentation LastFn EnglishLanguage "(&%LastFn ?LIST) returns the last item in the 
% &%List ?LIST.  For example, (&%LastFn (&%ListFn &%Monday &%Tuesday 
% &%Wednesday)) would return the value of &%Wednesday.")


% 	(forall (?LIST ?ITEM)
% 		(<=> 
% 			(equal (LastFn ?LIST) ?ITEM)
% 			(exists (?NUMBER)
% 				(and 
% 					(equal (ListLengthFn ?LIST) ?NUMBER)
% 					(equal (ListOrderFn ?LIST ?NUMBER) ?ITEM)
% 				)
% 			)
% 		)
% 	)

fof( miloA961, axiom,
	p__d__instance(c__FirstFn,c__UnaryFunction)
).


% 	($domain FirstFn 1 List)

% 	($range FirstFn Entity)


% ($documentation FirstFn EnglishLanguage "(&%FirstFn ?LIST) returns the first item in 
% the &%List ?LIST.  For example, (&%FirstFn (&%ListFn &%Monday &%Tuesday 
% &%Wednesday)) would return the value of &%Monday.")


% 	(forall (?LIST)
% 		(=> 
% 			(and 
% 				($instance ?LIST List)
% 				(not 
% 					(equal ?LIST NullList)
% 				)
% 			)
% 			(equal (FirstFn ?LIST) (ListOrderFn ?LIST 1))
% 		)
% 	)

fof( miloA965, axiom,
	p__d__instance(c__StreetAddressFn,c__QuaternaryFunction)
).


% 	($domain StreetAddressFn 1 StationaryArtifact)

% 	($domain StreetAddressFn 2 Roadway)

% 	($domain StreetAddressFn 3 City)

% 	($domain StreetAddressFn 4 Nation)

% 	($range StreetAddressFn Agent)


% ($documentation StreetAddressFn EnglishLanguage "(&%StreetAddressFn ?BUILDING ?ROAD ?CITY 
% ?COUNTRY) returns the &%Agent, e.g. a family, an organization, a person, 
% etc. that resides or conducts business at the corresponding &%postContactSite.")


fof( miloA971, axiom,
	(![ROAD,CITY,COUNTRY,PLACE,AGENT]: 
		(
			(
				(
					(
						p__d__instance(COUNTRY,c__Nation)
					)
				 &
					(
						p__d__instance(CITY,c__City)
					)
				 &
					(
						p__d__instance(ROAD,c__Roadway)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				 &
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						( f__StreetAddressFn4(PLACE,ROAD,CITY,COUNTRY) = AGENT )
					)
				)
			)
			=>
			(
				p__postContactSite(PLACE,AGENT)
			)
		)
	)
).


fof( miloA972, axiom,
	(![ROAD,CITY,COUNTRY,AGENT,PLACE]: 
		(
			(
				(
					(
						p__d__instance(COUNTRY,c__Nation)
					)
				 &
					(
						p__d__instance(CITY,c__City)
					)
				 &
					(
						p__d__instance(ROAD,c__Roadway)
					)
				 &
					(
						p__d__instance(PLACE,c__StationaryArtifact)
					)
				 &
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						( f__StreetAddressFn4(PLACE,ROAD,CITY,COUNTRY) = AGENT )
					)
				)
			)
			=>
			(
				(?[BUILDING]: 
					(
						(
							(
								p__d__instance(BUILDING,c__Building)
							)
						 &
							(
								p__part(PLACE,BUILDING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA973, axiom,
	p__d__subclass(c__ArtStudio,c__Workshop)
).



% ($documentation ArtStudio EnglishLanguage "A &%Workshop, which is 
% devoted to the creation of &%ArtWorks.")


% 	(forall (?STUDIO ?MAKE ?WORK)
% 		(=> 
% 			($instance ?STUDIO ArtStudio)
% 			(hasPurpose ?STUDIO (exists ([|] ?MAKE ([|] ?WORK [])) (and ([|] ($instance ?MAKE Making) ([|] (result ?MAKE ?WORK) ([|] ($instance ?WORK ArtWork) []))))))
% 		)
% 	)

fof( miloA975, axiom,
	p__d__subclass(c__Mine,c__StationaryArtifact)
).



% ($documentation Mine EnglishLanguage "An construction in the earth from which &%Minerals are removed, 
% either in pure form or as part of ores.")


% 	(forall (?MINERAL ?REMOVE ?MINE)
% 		(=> 
% 			($instance ?MINE Mine)
% 			(hasPurpose ?MINE (exists ([|] ?REMOVE ([|] ?MINERAL [])) (and ([|] ($instance ?REMOVE Removing) ([|] (patient ?REMOVE ?MINERAL) ([|] ($instance ?MINERAL Mineral) ([|] (origin ?REMOVE ?MINE) [])))))))
% 		)
% 	)

fof( miloA977, axiom,
	p__d__subclass(c__MobileResidence,c__Artifact)
).


fof( miloA978, axiom,
	p__d__disjoint(c__MobileResidence,c__Residence)
).



% ($documentation MobileResidence EnglishLanguage "Anything which serves to house people but 
% which changes its location from time to time, e.g. a motorhome, a mobile 
% home, a camp, etc.  Note that &%MobileResidence is disjoint from &%Residence, 
% because the latter is a subclass of &%StationaryArtifact.")


fof( miloA979, axiom,
	p__d__subclass(c__Prison,c__StationaryArtifact)
).



% ($documentation Prison EnglishLanguage "An installation which is owned and maintained by 
% a &%Government for the purpose of &%Confining people.  This class covers 
% jails, federal prisons, concentration camps, gulags, etc.")


% 	(forall (?P ?H ?C ?G)
% 		(=> 
% 			($instance ?P Prison)
% 			(hasPurpose ?P (exists ([|] ?C ([|] ?H ([|] ?G []))) (and ([|] ($instance ?C Confining) ([|] (eventLocated ?C ?P) ([|] (patient ?C ?H) ([|] ($instance ?H Human) ([|] (agent ?C ?G) ([|] ($instance ?G Government) [])))))))))
% 		)
% 	)


% ($documentation detainee EnglishLanguage "(detainee ?EVENT ?OBJECT) means that in the 
% Confining ?EVENT, the Object ?OBJECT is restrained by force, threat, or 
% other form of intimidation.")


fof( miloA981, axiom,
	p__d__instance(c__detainee,c__CaseRole)
).


% 	($domain detainee 1 Confining)

% 	($domain detainee 2 Animal)

fof( miloA984, axiom,
	p__subrelation(c__detainee,c__patient)
).


fof( miloA985, axiom,
	p__d__instance(c__targetInAttack,c__BinaryPredicate)
).


fof( miloA986, axiom,
	p__d__instance(c__targetInAttack,c__CaseRole)
).


% 	($domain targetInAttack 1 Process)

% 	($domain targetInAttack 2 Object)

fof( miloA989, axiom,
	p__subrelation(c__targetInAttack,c__patient)
).



% ($documentation targetInAttack EnglishLanguage "This relation 
% identifies the &%patient in the event that is the object of the
% attack.")


fof( miloA990, axiom,
	p__d__subclass(c__VotingPoll,c__StationaryArtifact)
).



% ($documentation VotingPoll EnglishLanguage "A structure where Voting for an &%Election 
% takes place.")


fof( miloA991, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__VotingPoll)
			)
			=>
			(
				(?[V]: 
					(
						(
							(
								p__d__instance(V,c__Voting)
							)
						 &
							(
								p__eventLocated(V,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA992, axiom,
	p__d__subclass(c__Camp,c__MobileResidence)
).



% ($documentation Camp EnglishLanguage "A &%MobileResidence consisting of tents and other temporary 
% living quarters that is constructed on an undeveloped &%LandArea.")


fof( miloA993, axiom,
	(![CAMP]: 
		(
			(
				p__d__instance(CAMP,c__Camp)
			)
			=>
			(
				(?[TENT]: 
					(
						(
							(
								p__d__instance(TENT,c__Tent)
							)
						 &
							(
								p__part(TENT,CAMP)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA994, axiom,
	p__d__subclass(c__Tent,c__MobileResidence)
).



% ($documentation Tent EnglishLanguage "A &%MobileResidence that is made of &%Fabric and poles and 
% can be easily assembled and disassembled.")


fof( miloA995, axiom,
	(![TENT]: 
		(
			(
				p__d__instance(TENT,c__Tent)
			)
			=>
			(
				(?[FABRIC]: 
					(
						(
							(
								p__d__instance(FABRIC,c__Fabric)
							)
						 &
							(
								p__part(FABRIC,TENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA996, axiom,
	p__d__subclass(c__Monument,c__StationaryArtifact)
).



% ($documentation Monument EnglishLanguage "A &%StationaryArtifact whose purpose is to commemorate 
% a person, animal or event.")


% 	(forall (?R ?M)
% 		(=> 
% 			($instance ?M Monument)
% 			(hasPurpose ?M (exists ([|] ?R []) (and ([|] ($instance ?R Remembering) ([|] (instrument ?R ?M) [])))))
% 		)
% 	)

fof( miloA998, axiom,
	p__d__subclass(c__Tomb,c__StationaryArtifact)
).



% ($documentation Tomb EnglishLanguage "A &%StationaryArtifact which is meant to contain someone 
% who is &%Dead.")


% 	(forall (?T ?P)
% 		(=> 
% 			($instance ?T Tomb)
% 			(hasPurpose ?T (exists ([|] ?P []) (and ([|] (attribute ?P Dead) ([|] (contains ?T ?P) [])))))
% 		)
% 	)

fof( miloA1000, axiom,
	p__d__subclass(c__Workshop,c__StationaryArtifact)
).



% ($documentation Workshop EnglishLanguage "A &%Room, suite of &%Rooms or &%Building which is 
% devoted to hand-crafting &%Artifacts.")


% 	(forall (?S ?M ?W)
% 		(=> 
% 			($instance ?S Workshop)
% 			(hasPurpose ?S (exists ([|] ?M []) (and ([|] ($instance ?M Making) ([|] (result ?M ?W) ([|] ($instance ?W Artifact) []))))))
% 		)
% 	)

% ($comment 
% ;; KJN: Moving this to Government.kif as chiefOfState is defined there.        
% ;;($subclass ExecutiveResidence PermanentResidence)
% ;;(documentation ExecutiveResidence EnglishLanguage "A &%Residence of a &%chiefOfState, e.g. 
% ;;the White House, a state governor's mansion, Buckingham Palace, etc.")
% ;;
% ;;(=>
% ;;   ($instance ?RESIDENCE ExecutiveResidence)
% ;;   (exists (?AREA ?POSITION ?PERSON)
% ;;      (and
% ;;         (located ?RESIDENCE ?AREA)
% ;;         (home ?PERSON ?RESIDENCE)
% ;;         (chiefOfState ?AREA ?POSITION ?PERSON)))) 
% )

fof( miloA1002, axiom,
	p__d__subclass(c__ApartmentUnit,c__SingleFamilyResidence)
).



% ($documentation ApartmentUnit EnglishLanguage "A &%SingleFamilyResidence that is not owned 
% by any member of the &%SocialUnit that lives there.")


fof( miloA1003, axiom,
	(![PERSON,UNIT]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__d__instance(UNIT,c__ApartmentUnit)
					)
				 &
					(
						p__home(PERSON,UNIT)
					)
				)
			)
			=>
			(
				~ (
					p__possesses(PERSON,UNIT)
				)
			)
		)
	)
).


fof( miloA1004, axiom,
	(![UNIT]: 
		(
			(
				p__d__instance(UNIT,c__ApartmentUnit)
			)
			=>
			(
				(?[BUILDING]: 
					(
						(
							(
								p__d__instance(BUILDING,c__ApartmentBuilding)
							)
						 &
							(
								p__part(UNIT,BUILDING)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation landlord EnglishLanguage "(landlord ?PERSON ?UNIT) means that ?PERSON is a 
% landlord of the &%Residence ?UNIT, i.e. he or she owns ?UNIT and is renting 
% the unit to someone else.")


fof( miloA1005, axiom,
	p__d__instance(c__landlord,c__BinaryPredicate)
).


% 	($domain landlord 1 Agent)

% 	($domain landlord 2 PermanentResidence)

fof( miloA1008, axiom,
	(![L,U]: 
		(
			(
				(
					(
						p__d__instance(U,c__PermanentResidence)
					)
				 &
					(
						p__d__instance(L,c__Agent)
					)
				 &
					(
						p__landlord(L,U)
					)
				)
			)
			=>
			(
				(?[R,P]: 
					(
						(
							(
								p__d__instance(P,c__Agent)
							)
						 &
							(
								p__possesses(L,U)
							)
						 &
							(
								p__tenant(P,U)
							)
						 &
							(
								p__agent(R,P)
							)
						 &
							(
								p__d__instance(R,c__Renting)
							)
						 &
							(
								p__patient(R,U)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation tenant EnglishLanguage "(tenant ?PERSON ?UNIT) means that ?PERSON is a tenant 
% of the &%Residence ?UNIT, i.e. he or she is renting the unit.")


fof( miloA1009, axiom,
	p__d__instance(c__tenant,c__BinaryPredicate)
).


% 	($domain tenant 1 Agent)

% 	($domain tenant 2 Residence)

fof( miloA1012, axiom,
	(![P,U]: 
		(
			(
				(
					(
						p__d__instance(U,c__PermanentResidence)
					)
				 &
					(
						p__d__instance(P,c__Agent)
					)
				 &
					(
						p__tenant(P,U)
					)
				)
			)
			=>
			(
				(?[L,R]: 
					(
						(
							(
								p__d__instance(L,c__Agent)
							)
						 &
							(
								p__d__instance(R,c__Renting)
							)
						 &
							(
								p__landlord(L,U)
							)
						 &
							(
								p__agent(R,P)
							)
						 &
							(
								p__possesses(L,U)
							)
						 &
							(
								p__patient(R,U)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1013, axiom,
	p__d__subclass(c__CondominiumUnit,c__SingleFamilyResidence)
).



% ($documentation CondominiumUnit EnglishLanguage "A &%SingleFamilyResidence that may be owned 
% by a member of the &%SocialUnit that lives there.")


fof( miloA1014, axiom,
	(![PERSON,UNIT]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__d__instance(UNIT,c__SingleFamilyResidence)
					)
				 &
					(
						p__home(PERSON,UNIT)
					)
				 &
					(
						p__possesses(PERSON,UNIT)
					)
				 &
					(
						~ (
							p__d__instance(UNIT,c__Building)
						)
					)
				)
			)
			=>
			(
				p__d__instance(UNIT,c__CondominiumUnit)
			)
		)
	)
).


fof( miloA1015, axiom,
	(![UNIT]: 
		(
			(
				p__d__instance(UNIT,c__CondominiumUnit)
			)
			=>
			(
				(?[BUILDING]: 
					(
						(
							(
								p__d__instance(BUILDING,c__CondominiumBuilding)
							)
						 &
							(
								p__part(UNIT,BUILDING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1016, axiom,
	p__d__subclass(c__ApartmentBuilding,c__ResidentialBuilding)
).


fof( miloA1017, axiom,
	p__d__disjoint(c__ApartmentBuilding,c__SingleFamilyResidence)
).



% ($documentation ApartmentBuilding EnglishLanguage "A &%ResidentialBuilding containing 
% &%ApartmentUnits.")


fof( miloA1018, axiom,
	(![BUILDING]: 
		(
			(
				p__d__instance(BUILDING,c__ApartmentBuilding)
			)
			=>
			(
				(?[UNIT1,UNIT2]: 
					(
						(
							(
								p__d__instance(UNIT1,c__ApartmentUnit)
							)
						 &
							(
								p__d__instance(UNIT2,c__ApartmentUnit)
							)
						 &
							(
								p__part(UNIT1,BUILDING)
							)
						 &
							(
								p__part(UNIT2,BUILDING)
							)
						 &
							(
								~ (
									( UNIT1 = UNIT2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1019, axiom,
	p__d__subclass(c__CondominiumBuilding,c__ResidentialBuilding)
).


fof( miloA1020, axiom,
	p__d__disjoint(c__CondominiumBuilding,c__SingleFamilyResidence)
).



% ($documentation CondominiumBuilding EnglishLanguage "A &%ResidentialBuilding containing 
% &%CondominiumUnits.")


fof( miloA1021, axiom,
	(![BUILDING]: 
		(
			(
				p__d__instance(BUILDING,c__CondominiumBuilding)
			)
			=>
			(
				(?[UNIT1,UNIT2]: 
					(
						(
							(
								p__d__instance(UNIT1,c__CondominiumUnit)
							)
						 &
							(
								p__d__instance(UNIT2,c__CondominiumUnit)
							)
						 &
							(
								p__part(UNIT1,BUILDING)
							)
						 &
							(
								p__part(UNIT2,BUILDING)
							)
						 &
							(
								~ (
									( UNIT1 = UNIT2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1022, axiom,
	p__d__subclass(c__Dormitory,c__ResidentialBuilding)
).


fof( miloA1023, axiom,
	p__d__subclass(c__Dormitory,c__TemporaryResidence)
).


fof( miloA1024, axiom,
	p__d__disjoint(c__Dormitory,c__SingleFamilyResidence)
).



% ($documentation Dormitory EnglishLanguage "A &%TemporaryResidence which is owned by a &%School 
% and which is used to house students while they take classes at the &%School.")


fof( miloA1025, axiom,
	(![D]: 
		(
			(
				p__d__instance(D,c__Dormitory)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__School)
							)
						 &
							(
								p__possesses(S,D)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1026, axiom,
	p__d__subclass(c__AnimalResidence,c__Artifact)
).



% ($documentation AnimalResidence EnglishLanguage "An &%Artifact which is intended to house 
% &%Animals and not &%Humans.  Note that an &%AnimalResidence may or may not 
% be a &%StationaryArtifact, e.g. a horse stall is stationary while a doghouse 
% generally is not.")


% 	(forall (?ANIMAL ?RESIDENCE)
% 		(=> 
% 			($instance ?RESIDENCE AnimalResidence)
% 			(hasPurpose ?RESIDENCE (exists ([|] ?ANIMAL []) (and ([|] ($instance ?ANIMAL Animal) ([|] (not ($instance ?ANIMAL Human)) ([|] (inhabits ?ANIMAL ?RESIDENCE) []))))))
% 		)
% 	)

fof( miloA1028, axiom,
	p__d__subclass(c__SportsFacility,c__StationaryArtifact)
).



% ($documentation SportsFacility EnglishLanguage "A specially designated and maintained facility 
% where &%Sports are played.  Note that this covers sports fields, stadiums, 
% and gymnasiums.")


% 	(forall (?S ?G)
% 		(=> 
% 			($instance ?G SportsFacility)
% 			(hasPurpose ?G (exists ([|] ?S []) (and ([|] ($instance ?S Sport) ([|] (eventLocated ?S ?G) [])))))
% 		)
% 	)

fof( miloA1030, axiom,
	p__d__subclass(c__SportsLeague,c__Organization)
).



% ($documentation SportsLeague EnglishLanguage "An &%Organization whose members are &%SportsTeams 
% and whose purpose is to set up games between its members.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of member is SelfConnectedObject, whereas SportsTeam is subclass of Collection (SelfConnnectedObject and Collection are disjoint)
% ;; TODO: Modify the domain information of member or use another relation
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?L SportsLeague)
% ;;    (member ?M ?L))
% ;;  ($instance ?M SportsTeam))
% )

fof( miloA1031, axiom,
	p__d__subclass(c__PlaceOfCommerce,c__StationaryArtifact)
).


fof( miloA1032, axiom,
	p__d__partition3(c__PlaceOfCommerce,c__CommercialBuilding,c__CommercialUnit)
).



% ($documentation PlaceOfCommerce EnglishLanguage "A &%Building or part of a &%Building which is 
% intended for organizational activities, e.g. retail or wholesale selling, 
% manufacturing, office work, etc.")


fof( miloA1033, axiom,
	(![OFFICE]: 
		(
			(
				p__d__instance(OFFICE,c__PlaceOfCommerce)
			)
			=>
			(
				(
					p__d__instance(OFFICE,c__CommercialBuilding)
				 |
					(?[BUILDING]: 
						(
							(
								(
									p__d__instance(BUILDING,c__CommercialBuilding)
								)
							 &
								(
									p__part(OFFICE,BUILDING)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1034, axiom,
	p__d__subclass(c__CommercialBuilding,c__Building)
).


fof( miloA1035, axiom,
	p__d__subclass(c__CommercialBuilding,c__PlaceOfCommerce)
).



% ($documentation CommercialBuilding EnglishLanguage "A &%Building which is intended for 
% organizational activities, e.g. retail or wholesale selling, manufacturing, 
% office work, etc.")


fof( miloA1036, axiom,
	p__d__subclass(c__Warehouse,c__CommercialBuilding)
).



% ($documentation Warehouse EnglishLanguage "A very large &%CommercialBuilding whose purpose is 
% to store commodities.")


% 	(forall (?P ?K ?B)
% 		(=> 
% 			($instance ?B Warehouse)
% 			(hasPurpose ?B (exists ([|] ?K ([|] ?P [])) (and ([|] ($instance ?K Keeping) ([|] (patient ?K ?P) ([|] ($instance ?P Product) ([|] (eventLocated ?K ?B) [])))))))
% 		)
% 	)

fof( miloA1038, axiom,
	p__d__subclass(c__CommercialUnit,c__PlaceOfCommerce)
).



% ($documentation CommercialUnit EnglishLanguage "A &%Room or suite of &%Rooms intended for 
% clerical and/or professional work of a single &%Organization.")


fof( miloA1039, axiom,
	(![UNIT,ORG]: 
		(
			(
				(
					(
						p__d__instance(UNIT,c__CommercialUnit)
					)
				 &
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__located(ORG,UNIT)
					)
				)
			)
			=>
			(
				(![OTHER]: 
					(
						(
							~ (
								p__d__instance(OTHER,c__Physical)
							)
						 |
							~ (
								p__d__instance(OTHER,c__Organization)
							)
						 |
							~ (
								p__located(OTHER,UNIT)
							)
						 |
							( OTHER = ORG )
						)
					)
				)
			)
		)
	)
).


fof( miloA1040, axiom,
	p__d__subclass(c__Store,c__Building)
).



% ($documentation Store EnglishLanguage "A &%Building that has the purpose of housing
% &%FinancialTransactions.")


% 	(forall (?EV ?X)
% 		(=> 
% 			($instance ?X Store)
% 			(hasPurpose ?X (exists ([|] ?EV []) (and ([|] ($instance ?EV FinancialTransaction) ([|] (eventLocated ?EV ?X) [])))))
% 		)
% 	)

% ($comment 
% ;; adjusting this in Society.kif to avoid duplication between Factory and IndustrialPlant
% ;;($subclass Factory Building)
% ;;(documentation FactoryBuilding EnglishLanguage "A &%Building intended to house a &%Manufacture process that produces goods of some value.")
% ;;(=>
% ;;  ($instance ?X Factory)
% ;;  (hasPurpose ?X
% ;;    (exists (?EV)
% ;;      (and
% ;;        ($instance ?EV Manufacture)
% ;;        (eventLocated ?EV ?X)))))
% )

fof( miloA1042, axiom,
	p__d__subclass(c__FarmBuilding,c__Building)
).


fof( miloA1043, axiom,
	p__d__disjoint(c__FarmBuilding,c__ResidentialBuilding)
).



% ($documentation FarmBuilding EnglishLanguage "A &%Building on a &%Farm that is used for keeping 
% &%DomesticAnimals, &%Fodder or harvested crops.")


fof( miloA1044, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__FarmBuilding)
			)
			=>
			(
				(?[F]: 
					(
						(
							(
								p__d__instance(F,c__Farm)
							)
						 &
							(
								p__located(B,F)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Edit. Subclassing Agency from Business, which is also a CommercialAgent
% )

fof( miloA1045, axiom,
	p__d__subclass(c__Agency,c__Business)
).



% ($documentation Agency EnglishLanguage "A &%Business whose customers are all other 
% &%CommercialAgents, e.g. staffing agencies, food-service providers, etc.")


fof( miloA1046, axiom,
	(![A,C]: 
		(
			(
				(
					(
						p__d__instance(A,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(C,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(A,c__Agency)
					)
				 &
					(
						p__customer(C,A)
					)
				)
			)
			=>
			(
				p__d__instance(C,c__CommercialAgent)
			)
		)
	)
).


% ($comment 
% ;; KJN: Edit. Making it subclass from Business, which is also a CommercialAgent
% )

fof( miloA1047, axiom,
	p__d__subclass(c__EntertainmentCompany,c__Business)
).



% ($documentation EntertainmentCompany EnglishLanguage "Any &%Business whose services include 
% &%Performances.  This class covers nightclubs, commercial live theaters, 
% and comedy clubs.")


fof( miloA1048, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__EntertainmentCompany)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__d__instance(P,c__CommercialService)
							)
						 &
							(
								p__agent(P,C)
							)
						 &
							(
								p__d__instance(P,c__Performance)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Edit. Making it subclass from Business instead of CommercialAgent
% )

fof( miloA1049, axiom,
	p__d__subclass(c__FinancialCompany,c__Business)
).



% ($documentation FinancialCompany EnglishLanguage "The class &%FinancialCompany 
% includes, as subclasses, &%FinancialBank, &%CreditUnion and &%SavingsAndLoan.")


% ($comment 
% ;; KJN: Moving this to FinancialOntology.kif to remove dependencies since Stock is defined there
% ;;(documentation stockHolder EnglishLanguage "(stockHolder ?Stock ?Agent) means that 
% ;;?Agent possesses the &%Stock ?Stock.")
% ;;($instance stockHolder BinaryPredicate)
% ;;(domain stockHolder 1 Stock)
% ;;(domain stockHolder 2 CognitiveAgent)
% )

fof( miloA1050, axiom,
	p__d__subclass(c__SavingsAndLoan,c__FinancialCompany)
).



% ($documentation SavingsAndLoan EnglishLanguage "A federally or state chartered 
% &%FinancialCompany that takes &%Deposits from individuals, funds 
% &%Mortgages, and pays &%Dividends.")


% ($comment 
% ;; KJN: Moved from FinancialOntology.kif.  Changing definition as Contract is used
% ;; incorrectly.
% )

fof( miloA1051, axiom,
	p__d__instance(c__insured,c__BinaryPredicate)
).


fof( miloA1052, axiom,
	p__d__instance(c__insured,c__AsymmetricRelation)
).


% ($comment 
% ;; (domain insured 1 Contract)
% )

% 	($domain insured 1 Proposition)

% 	($domain insured 2 Organization)


% ($documentation insured EnglishLanguage "(insured ?Contract ?Org) means that ?Contract is insured 
% by the ?Organization.")


% ($comment 
% ;; KJN: Added.
% )

fof( miloA1055, axiom,
	(![ORG,PROP]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__d__instance(PROP,c__Proposition)
					)
				 &
					(
						p__insured(PROP,ORG)
					)
				)
			)
			=>
			(
				p__property(PROP,c__Contract)
			)
		)
	)
).


% ($comment 
% ;; KJN: Edit.  Subclassing from Business instead of CommercialAgent
% )

fof( miloA1056, axiom,
	p__d__subclass(c__InsuranceCompany,c__Business)
).



% ($documentation InsuranceCompany EnglishLanguage "A &%Business that insures &%Agents 
% for the payment of a premium or premiums.")


fof( miloA1057, axiom,
	(![I]: 
		(
			(
				p__d__instance(I,c__InsuranceCompany)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__Proposition)
							)
						 &
							(
								p__insured(C,I)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Edit.  Subclassing from Business instead of CommercialAgent    
% )

fof( miloA1058, axiom,
	p__d__subclass(c__TransportationCompany,c__Business)
).



% ($documentation TransportationCompany EnglishLanguage "A &%Business whose services 
% include &%Transportation, e.g. a &%RailroadCompany, an airline, a cruise 
% ship line, etc.")


fof( miloA1059, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__TransportationCompany)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__CommercialService)
							)
						 &
							(
								p__agent(S,C)
							)
						 &
							(
								p__d__instance(S,c__Transportation)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1060, axiom,
	p__d__subclass(c__FinancialService,c__CommercialService)
).



% ($documentation FinancialService EnglishLanguage "&%Services performed by a
% &%FinancialCompany.")


fof( miloA1061, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__FinancialService)
			)
			=>
			(
				(?[O]: 
					(
						(
							(
								p__d__instance(O,c__FinancialCompany)
							)
						 &
							(
								p__agent(S,O)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation loss EnglishLanguage "The amount by which the cost of an investment or 
% business operation exceeds its return, i.e. the negative quantity left 
% after subtracting for all expenses.")


fof( miloA1062, axiom,
	p__d__instance(c__loss,c__AsymmetricRelation)
).


% 	($domain loss 1 FinancialTransaction)

% 	($domain loss 2 CurrencyMeasure)

fof( miloA1065, axiom,
	p__d__subclass(c__Financing,c__Funding)
).


fof( miloA1066, axiom,
	p__d__subclass(c__Financing,c__FinancialService)
).



% ($documentation Financing EnglishLanguage "Any &%Funding which is provided by a &%FinancialCompany 
% with the aim of making a profit on the money invested.")


% ($comment 
% ;; KJN: Edit.  Subclassing from Business instead of CommercialAgent
% )

fof( miloA1067, axiom,
	p__d__subclass(c__Partnership,c__Business)
).



% ($documentation Partnership EnglishLanguage "A &%Business that is owned by more 
% than one person.")


fof( miloA1068, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Partnership)
			)
			=>
			(
				(?[H1,H2]: 
					(
						(
							(
								p__d__instance(H1,c__Human)
							)
						 &
							(
								p__d__instance(H2,c__Human)
							)
						 &
							(
								~ (
									( H1 = H2 )
								)
							)
						 &
							(
								p__possesses(H1,C)
							)
						 &
							(
								p__possesses(H2,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1069, axiom,
	p__d__subclass(c__Scholarship,c__Funding)
).



% ($documentation Scholarship EnglishLanguage "Any &%Funding which is made on the basis of merit 
% and whose purpose is to allow the destination to realize an 
% &%EducationalProgram.")


% 	(forall (?F ?EP ?P ?H)
% 		(=> 
% 			(and 
% 				($instance ?F Scholarship)
% 				(destination ?F ?H)
% 			)
% 			(hasPurpose ?F (exists ([|] ?EP ([|] ?P [])) (and ([|] ($instance ?EP EducationalProgram) ([|] (realization ?P ?EP) ([|] (experiencer ?P ?H) []))))))
% 		)
% 	)

fof( miloA1071, axiom,
	p__d__subclass(c__Welfare,c__Funding)
).



% ($documentation Welfare EnglishLanguage "Any &%Funding which is provided by a &%ServiceOrganization 
% to people in need.")


fof( miloA1072, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__Welfare)
			)
			=>
			(
				(?[O]: 
					(
						(
							(
								p__d__instance(O,c__ServiceOrganization)
							)
						 &
							(
								p__agent(W,O)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Edit.  Subclassing from Business instead of CommercialAgent      
% ;; Manufacturer (imported from Media.kif) is already a Business
% ;;($subclass Publisher Business)
% )

fof( miloA1073, axiom,
	p__d__subclass(c__Publisher,c__Manufacturer)
).



% ($documentation Publisher EnglishLanguage "Any &%Business whose services include the 
% &%Publication of &%Texts.")


fof( miloA1074, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Publisher)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__CommercialService)
							)
						 &
							(
								p__agent(S,C)
							)
						 &
							(
								p__d__instance(S,c__Publication)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1075, axiom,
	p__d__subclass(c__FamilyBusiness,c__Partnership)
).



% ($documentation FamilyBusiness EnglishLanguage "A &%Partnership that is owned by a single 
% family.")


fof( miloA1076, axiom,
	(![C,P1,P2]: 
		(
			(
				(
					(
						p__d__instance(P1,c__Organism)
					)
				 &
					(
						p__d__instance(P2,c__Organism)
					)
				 &
					(
						p__d__instance(C,c__FamilyBusiness)
					)
				 &
					(
						p__possesses(P1,C)
					)
				 &
					(
						p__possesses(P2,C)
					)
				)
			)
			=>
			(
				p__familyRelation(P1,P2)
			)
		)
	)
).


% ($comment 
% ;; KJN: Edit.  Subclassing from Business instead of CommercialAgent  
% )

fof( miloA1077, axiom,
	p__d__subclass(c__Restaurant,c__Business)
).



% ($documentation Restaurant EnglishLanguage "Any &%Business whose services include selling 
% Food to customers which is intended to be eaten on the premises.")


% ($comment 
% ;; wikipedia has: A restaurant *prepares* and serves food and drink to customers in return for money.
% )

% 	(forall (?C)
% 		(=> 
% 			($instance ?C Restaurant)
% 			(exists (?S ?F ?B)
% 				(and 
% 					($instance ?S CommercialService)
% 					(agent ?S ?C)
% 					($instance ?S Selling)
% 					($instance ?B RestaurantBuilding)
% 					(eventLocated ?S ?B)
% 					(patient ?S ?F)
% 					($instance ?F (FoodForFn Human))
% 				)
% 			)
% 		)
% 	)

fof( miloA1079, axiom,
	(![PLACE]: 
		(
			(
				p__d__instance(PLACE,c__RestaurantBuilding)
			)
			=>
			(
				p__capability(c__Cooking,c__eventLocated,PLACE)
			)
		)
	)
).


fof( miloA1080, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__Restaurant)
			)
			=>
			(
				(?[D]: 
					(
						(
							(
								p__possesses(R,D)
							)
						 &
							(
								p__d__instance(D,c__DiningArea)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Edit.  Subclassing from Business instead of CommercialAgent    
% )

fof( miloA1081, axiom,
	p__d__subclass(c__Proprietorship,c__Business)
).



% ($documentation Proprietorship EnglishLanguage "A &%Business that is owned by a 
% single person.")


fof( miloA1082, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Proprietorship)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__Human)
							)
						 &
							(
								p__possesses(H,C)
							)
						 &
							(
								(![H2]: 
									(
										(
											~ (
												p__d__instance(H2,c__Agent)
											)
										 |
											( H = H2 )
										 |
											~ (
												p__possesses(H2,C)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1083, axiom,
	p__d__subclass(c__Auditorium,c__Building)
).



% ($documentation Auditorium EnglishLanguage "Any &%Building whose purpose is to hold concerts, 
% sports events, plays, etc. before an audience.  This class includes theaters, 
% sports stadiums, university auditoriums, etc.")


% 	(forall (?DEMO ?AUDITORIUM)
% 		(=> 
% 			($instance ?AUDITORIUM Auditorium)
% 			(hasPurpose ?AUDITORIUM (exists ([|] ?DEMO []) (and ([|] ($instance ?DEMO Demonstrating) ([|] (eventLocated ?DEMO ?AUDITORIUM) [])))))
% 		)
% 	)

fof( miloA1085, axiom,
	(![AUDITORIUM]: 
		(
			(
				p__d__instance(AUDITORIUM,c__Auditorium)
			)
			=>
			(
				(?[STAGE]: 
					(
						(
							(
								p__d__instance(STAGE,c__PerformanceStage)
							)
						 &
							(
								p__part(STAGE,AUDITORIUM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1086, axiom,
	p__d__subclass(c__AuditoriumSeat,c__Seat)
).



% ($documentation AuditoriumSeat EnglishLanguage "A &%Seat within an &%Auditorium from which one 
% can observe the &%PerformanceStage.")


fof( miloA1087, axiom,
	(![SEAT]: 
		(
			(
				p__d__instance(SEAT,c__AuditoriumSeat)
			)
			=>
			(
				(?[AUDITORIUM]: 
					(
						(
							(
								p__d__instance(AUDITORIUM,c__Auditorium)
							)
						 &
							(
								p__part(SEAT,AUDITORIUM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1088, axiom,
	(![AUDITORIUM,SEAT,STAGE,SEE,PERSON]: 
		(
			(
				(
					(
						p__d__instance(SEAT,c__AuditoriumSeat)
					)
				 &
					(
						p__part(SEAT,AUDITORIUM)
					)
				 &
					(
						p__part(STAGE,AUDITORIUM)
					)
				 &
					(
						p__d__instance(AUDITORIUM,c__Auditorium)
					)
				 &
					(
						p__d__instance(STAGE,c__PerformanceStage)
					)
				 &
					(
						p__located(PERSON,SEAT)
					)
				 &
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__d__subclass(SEE,c__Seeing)
					)
				 &
					(
						(![INST]: 
							(
								(
									(
										(
											p__d__instance(INST,c__Process)
										)
									 &
										(
											p__d__instance(INST,SEE)
										)
									)
								)
								=>
								(
									p__patient(INST,STAGE)
								)
							)
						)
					)
				)
			)
			=>
			(
				p__capability(SEE,c__agent,PERSON)
			)
		)
	)
).


fof( miloA1089, axiom,
	p__subrelation(c__enjoys,c__inScopeOfInterest)
).


% 	($domain enjoys 1 CognitiveAgent)

% 	($domainSubclass enjoys 2 IntentionalProcess)


% ($documentation enjoys EnglishLanguage "(&%enjoys ?AGENT ?PROCESS) means that the 
% &%CognitiveAgent ?AGENT tends to enjoy actions of type ?PROCESS, 
% i.e. tends to enjoy being the &%agent or &%experiencer of such 
% actions.")


% 	(forall (?PROCESS ?INSTANCE ?AGENT)
% 		(=> 
% 			(enjoys ?AGENT ?PROCESS)
% 			(desires ?AGENT (exists ([|] ?INSTANCE []) (and ([|] ($instance ?INSTANCE ?PROCESS) ([|] (or ([|] (agent ?INSTANCE ?AGENT) ([|] (experiencer ?INSTANCE ?AGENT) []))) [])))))
% 		)
% 	)

% ($comment 
% ;; NS: The propositional attitude stuff below appears to have been
% ;; written without an understanding of temporal issues, or of the
% ;; English meanings of "hope" and "fear".
% ;;
% ;; NS: delete.
% ;; (subrelation expects believes)
% ;;
% ;; NS: delete.
% ;; (documentation expects EnglishLanguage "Any belief about the future.  (&%expects 
% ;; ?AGENT ?BELIEF) means that (&%believes ?AGENT ?BELIEF) and, if 
% ;; ?BELIEF happens, it will happen in the future, i.e. after the 
% ;; expectation.")
% ;;
% ;; NS: add.
% )

fof( miloA1093, axiom,
	p__d__instance(c__expects,c__BinaryPredicate)
).


% 	($domain expects 1 CognitiveAgent)

% 	($domain expects 2 Formula)


% ($documentation expects EnglishLanguage "(&%holdsDuring ?T1 (&%expects
% ?AGENT ?BELIEF)) means (and (&%holdDuring ?T1 (&%believes
% ?AGENT (&%holdsDuring ?T2 ?BELIEF))) (&%earlier ?T1 ?T2)).")


% ($comment 
% ;; NS: delete.  This could easily cause temporal contradictions.  Note
% ;; that ?FORMULA might have been True at some time before ?AGENT's
% ;; expectation (or existence).  Also, ?FORMULA might never be True.
% ;; (=>
% ;;    (and
% ;;       (holdsDuring ?TIME1 (expects ?AGENT ?FORMULA))
% ;;       (holdsDuring ?TIME2 (truth ?FORMULA True)))
% ;;    (earlier ?TIME1 ?TIME2))
% ;;
% ;; NS: add.  Unfortunately, this might be wrong.  Since the second
% ;; argument to &%believes is an opaque context (i.e., quoted), ?T2
% ;; probably isn't accessible for use in the &%earlier literal.
% )

% 	(forall (?AGENT ?FORMULA ?T1 ?T2)
% 		(=> 
% 			(holdsDuring ?T1 (expects ?AGENT ?FORMULA))
% 			(and 
% 				(holdsDuring ?T1 (believes ?AGENT (holdsDuring ?T2 ?FORMULA)))
% 				(earlier ?T1 ?T2)
% 			)
% 		)
% 	)

fof( miloA1097, axiom,
	p__subrelation(c__fears,c__expects)
).



% ($documentation fears EnglishLanguage "(&%fears ?AGENT ?FORMULA) means
% that ?AGENT fears that the proposition ?FORMULA will be true,
% i.e. he/she believes that it will come to pass in the future and that
% it will be undesirable for ?AGENT.")


fof( miloA1098, axiom,
	(![AGENT,FORMULA]: 
		(
			(
				(
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__fears(AGENT,FORMULA)
					)
				)
			)
			=>
			(
				~ (
					p__desires(AGENT,FORMULA)
				)
			)
		)
	)
).


fof( miloA1099, axiom,
	p__subrelation(c__hopes,c__expects)
).



% ($documentation hopes EnglishLanguage "(&%hopes ?AGENT ?FORMULA) means that ?AGENT hopes that 
% the proposition ?FORMULA will be true, i.e. he/she believes that it will 
% come to pass in the future and that it will be desirable for ?AGENT.")


fof( miloA1100, axiom,
	(![AGENT,FORMULA]: 
		(
			(
				(
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__hopes(AGENT,FORMULA)
					)
				)
			)
			=>
			(
				p__desires(AGENT,FORMULA)
			)
		)
	)
).


fof( miloA1101, axiom,
	p__d__instance(c__doubts,c__PropositionalAttitude)
).


fof( miloA1102, axiom,
	p__d__instance(c__doubts,c__BinaryPredicate)
).


% 	($domain doubts 1 CognitiveAgent)

% 	($domain doubts 2 Formula)


% ($documentation doubts EnglishLanguage "(&%doubts ?AGENT ?FORMULA) means that ?AGENT is unsure 
% about the truth of ?FORMULA, in particular ?AGENT does not believe that 
% ?FORMULA is true.")


fof( miloA1105, axiom,
	(![AGENT,FORMULA]: 
		(
			(
				(
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__doubts(AGENT,FORMULA)
					)
				)
			)
			=>
			(
				~ (
					p__believes(AGENT,FORMULA)
				)
			)
		)
	)
).


fof( miloA1106, axiom,
	p__d__instance(c__dislikes,c__ObjectAttitude)
).


fof( miloA1107, axiom,
	p__subrelation(c__dislikes,c__inScopeOfInterest)
).


fof( miloA1108, axiom,
	p__disjointRelation(c__dislikes,c__wants)
).


fof( miloA1109, axiom,
	p__relatedInternalConcept(c__dislikes,c__disapproves)
).


% 	($domain dislikes 1 CognitiveAgent)

% 	($domain dislikes 2 Object)


% ($documentation dislikes EnglishLanguage "(&%dislikes ?AGENT ?OBJECT) means that ?AGENT has a 
% feeling of antipathy to ?OBJECT, i.e. ?AGENT believes that ?OBJECT will 
% thwart one of his/her goals.  Note that there is no implication that what 
% is hated by an agent is not already possessed by the agent.")


% 	(forall (?AGENT ?OBJECT)
% 		(=> 
% 			(dislikes ?AGENT ?OBJECT)
% 			(desires ?AGENT (not (possesses ?AGENT ?OBJECT)))
% 		)
% 	)

fof( miloA1113, axiom,
	p__d__instance(c__disapproves,c__PropositionalAttitude)
).


fof( miloA1114, axiom,
	p__d__instance(c__disapproves,c__BinaryPredicate)
).


fof( miloA1115, axiom,
	p__subrelation(c__disapproves,c__inScopeOfInterest)
).


fof( miloA1116, axiom,
	p__disjointRelation(c__disapproves,c__desires)
).


% 	($domain disapproves 1 CognitiveAgent)

% 	($domain disapproves 2 Formula)


% ($documentation disapproves EnglishLanguage "(&%disapproves ?AGENT ?FORMULA) means that 
% ?AGENT has a feeling of antipathy to the state of affairs represented by 
% ?FORMULA, i.e. ?AGENT believes that the realization of ?FORMULA will 
% thwart one of his/her goals.  Note that there is no implication that what 
% is disapproved of by an agent is not already true.")


fof( miloA1119, axiom,
	p__subrelation(c__lacks,c__needs)
).



% ($documentation lacks EnglishLanguage "(&%lacks ?AGENT ?OBJECT) means that ?AGENT &%needs 
% ?OBJECT and it is not currently the case that ?AGENT &%possesses ?OBJECT.")


% 	(forall (?TIME ?AGENT ?OBJECT)
% 		(=> 
% 			(holdsDuring ?TIME (lacks ?AGENT ?OBJECT))
% 			(holdsDuring ?TIME (not (possesses ?AGENT ?OBJECT)))
% 		)
% 	)

% ($comment 
% ;; KJN: Moving this to People.kif as the rest of BeliefGroups are defined there.   
% ;;($instance Antisemitism BeliefGroup)
% ;;(documentation Antisemitism EnglishLanguage "The &%BeliefGroup that is characterized by a 
% ;;dislike for &%Judaism.")
% ;;
% ;;(=>
% ;;   (member ?MEMBER Antisemitism)
% ;;   (dislikes ?MEMBER Judaism))
% )

fof( miloA1121, axiom,
	p__d__instance(c__DescendantsFn,c__UnaryFunction)
).


% 	($domain DescendantsFn 1 Human)

% 	($range DescendantsFn FamilyGroup)


% ($documentation DescendantsFn EnglishLanguage "(&%DescendantsFn ?PERSON) denotes all and only 
% the descendants of ?PERSON, i.e. the &%Group consisting of ?OFFSPRING who 
% satisfy the following formula:  (&%ancestor ?OFFSPRING ?PERSON).")


fof( miloA1124, axiom,
	(![DESCENDANTS,PERSON,MEMBER]: 
		(
			(
				(
					(
						p__d__instance(DESCENDANTS,c__FamilyGroup)
					)
				 &
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						( f__DescendantsFn1(PERSON) = DESCENDANTS )
					)
				 &
					(
						p__d__instance(MEMBER,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__member(MEMBER,DESCENDANTS)
				)
				<=>
				(
					p__ancestor(MEMBER,PERSON)
				)
			)
		)
	)
).


fof( miloA1125, axiom,
	p__d__subclass(c__GroupOfAnimals,c__Group)
).



% ($documentation GroupOfAnimals EnglishLanguage "Any &%Group which contains exclusively 
% non-human &%members.")


fof( miloA1126, axiom,
	(![GROUP,MEMBER]: 
		(
			(
				(
					(
						p__d__instance(MEMBER,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(GROUP,c__GroupOfAnimals)
					)
				 &
					(
						p__member(MEMBER,GROUP)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(MEMBER,c__Animal)
					)
				 &
					(
						~ (
							p__d__instance(MEMBER,c__Human)
						)
					)
				)
			)
		)
	)
).


fof( miloA1127, axiom,
	p__d__subclass(c__Brood,c__GroupOfAnimals)
).



% ($documentation Brood EnglishLanguage "A &%GroupOfAnimals that are all born at the same time 
% and to the same parents.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: sibling is irreflexive
% ;;
% ;;(=>
% ;;   ($instance ?BROOD Brood)
% ;;   (forall (?MEMBER1 ?MEMBER2)
% ;;      (=>
% ;;         (and
% ;;            (member ?MEMBER1 ?BROOD)
% ;;            (member ?MEMBER2 ?BROOD))
% ;;         (sibling ?MEMBER1 ?MEMBER2))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA1128, axiom,
	(![BROOD,MEMBER1,MEMBER2]: 
		(
			(
				(
					(
						p__d__instance(MEMBER1,c__Organism)
					)
				 &
					(
						p__d__instance(MEMBER2,c__Organism)
					)
				 &
					(
						p__d__instance(BROOD,c__Brood)
					)
				 &
					(
						p__member(MEMBER1,BROOD)
					)
				 &
					(
						p__member(MEMBER2,BROOD)
					)
				 &
					(
						~ (
							( MEMBER1 = MEMBER2 )
						)
					)
				)
			)
			=>
			(
				p__sibling(MEMBER1,MEMBER2)
			)
		)
	)
).


fof( miloA1129, axiom,
	(![BROOD]: 
		(
			(
				p__d__instance(BROOD,c__Brood)
			)
			=>
			(
				(?[TIME]: 
					(
						(
							(
								p__d__instance(TIME,c__TimeInterval)
							)
						 &
							(
								(![MEMBER]: 
									(
										(
											(
												(
													p__d__instance(MEMBER,c__SelfConnectedObject)
												)
											 &
												(
													p__d__instance(MEMBER,c__Agent)
												)
											 &
												(
													p__member(MEMBER,BROOD)
												)
											)
										)
										=>
										(
											(?[BIRTH]: 
												(
													(
														(
															p__d__instance(BIRTH,c__Birth)
														)
													 &
														(
															p__experiencer(BIRTH,MEMBER)
														)
													 &
														(
															( TIME = f__WhenFn1(BIRTH) )
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1130, axiom,
	p__d__subclass(c__AnimalTeam,c__GroupOfAnimals)
).



% ($documentation AnimalTeam EnglishLanguage "A &%GroupOfAnimals which are &%Pulling something.")


fof( miloA1131, axiom,
	(![AT]: 
		(
			(
				p__d__instance(AT,c__AnimalTeam)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__d__instance(P,c__Pulling)
							)
						 &
							(
								p__agent(P,AT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1132, axiom,
	p__d__subclass(c__SportsTeam,c__GroupOfPeople)
).



% ($documentation SportsTeam EnglishLanguage "A &%GroupOfPeople who habitually play a &%Sport 
% together, either as an occupation or as a leisure activity.")


fof( miloA1133, axiom,
	(![TEAM]: 
		(
			(
				p__d__instance(TEAM,c__SportsTeam)
			)
			=>
			(
				(?[SPORT]: 
					(
						(
							(
								p__d__subclass(SPORT,c__Sport)
							)
						 &
							(
								p__capability(SPORT,c__agent,TEAM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1134, axiom,
	p__d__subclass(c__TeamSport,c__Sport)
).



% ($documentation TeamSport EnglishLanguage "Any &%Sport which is played by &%SportsTeams, e.g. 
% &%Baseball and &%Football.")


fof( miloA1135, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__TeamSport)
			)
			=>
			(
				(?[T1,T2]: 
					(
						(
							(
								p__contestParticipant(S,T1)
							)
						 &
							(
								p__contestParticipant(S,T2)
							)
						 &
							(
								p__d__instance(T1,c__SportsTeam)
							)
						 &
							(
								p__d__instance(T2,c__SportsTeam)
							)
						 &
							(
								~ (
									( T1 = T2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1136, axiom,
	p__d__subclass(c__Racing,c__Sport)
).



% ($documentation Racing EnglishLanguage "A sport which involves a contest of speed between the 
% participants.  Note that this covers a variety of things, including auto 
% racing, running competitions, etc.")


fof( miloA1137, axiom,
	p__subrelation(c__groupMember,c__member)
).


% 	($domain groupMember 1 Human)

% 	($domain groupMember 2 GroupOfPeople)


% ($documentation groupMember EnglishLanguage "A &%subrelation of &%member, &%groupMember 
% is used to relate a &%Human to a &%GroupOfPeople of which he/she is a 
% &%member.")



% ($documentation headquartersOfOrganization EnglishLanguage "(headquartersOfOrganization ?ORG ?AREA) 
% means that the &%Organization ?ORG is headquartered in ?AREA.")


% 	($domain headquartersOfOrganization 1 Organization)

% 	($domain headquartersOfOrganization 2 GeopoliticalArea)

fof( miloA1142, axiom,
	p__subrelation(c__headquartersOfOrganization,c__located)
).


fof( miloA1143, axiom,
	p__d__subclass(c__CommunicationOrganization,c__Organization)
).



% ($documentation CommunicationOrganization EnglishLanguage "&%CommunicationOrganization is 
% the subclass of &%Organizations that manage &%Communications over physical 
% infrastructure owned or leased by the organization.  Such organizations 
% may also produce and disseminate information, entertainment, or other 
% content.  Also see &%MediaOrganization.")


fof( miloA1144, axiom,
	(![CO]: 
		(
			(
				p__d__instance(CO,c__CommunicationOrganization)
			)
			=>
			(
				(?[CS,C]: 
					(
						(
							(
								p__d__instance(C,c__Communication)
							)
						 &
							(
								p__d__instance(CS,c__CommunicationSystem)
							)
						 &
							(
								p__instrument(C,CS)
							)
						 &
							(
								p__agent(C,CO)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1145, axiom,
	p__d__subclass(c__MediaOrganization,c__Organization)
).



% ($documentation MediaOrganization EnglishLanguage "&%MediaOrganization is the subclass 
% of &%Organization for groups whose primary purpose is the production or 
% dissemination of media content.  For organizations that physically enable 
% &%Communication, see &%CommunicationOrganization.")


fof( miloA1146, axiom,
	p__d__instance(c__profit,c__AsymmetricRelation)
).


% 	($domain profit 1 FinancialTransaction)

% 	($domain profit 2 CurrencyMeasure)


% ($documentation profit EnglishLanguage "The positive gain from an investment or business operation after 
% subtracting for all expenses.") 


fof( miloA1149, axiom,
	p__d__subclass(c__NonprofitOrganization,c__Organization)
).


fof( miloA1150, axiom,
	p__d__disjoint(c__NonprofitOrganization,c__CommercialAgent)
).



% ($documentation NonprofitOrganization EnglishLanguage "Any &%Organization whose purpose is something 
% other than making a profit.")


% 	(forall (?N ?P)
% 		(=> 
% 			($instance ?N NonprofitOrganization)
% 			(not 
% 				(hasPurpose ?N (exists ([|] ?P []) (profit ?N ?P)))
% 			)
% 		)
% 	)

fof( miloA1152, axiom,
	p__d__subclass(c__CommunicationSystem,c__Collection)
).



% ($documentation CommunicationSystem EnglishLanguage "&%CommunicationSystem is a complex 
% system with various components, enabling communication (in some 
% medium) between points in a specific area, whether local or worldwide.")


fof( miloA1153, axiom,
	p__d__subclass(c__CareOrganization,c__Organization)
).


fof( miloA1154, axiom,
	p__d__partition3(c__CareOrganization,c__HospitalOrganization,c__MedicalClinic)
).



% ($documentation CareOrganization EnglishLanguage "Any &%Organization whose purpose is to 
% provide medical care for for &%Humans who reside there, either permanently 
% or temporarily.")  


fof( miloA1155, axiom,
	p__d__instance(c__medicalPatient,c__BinaryPredicate)
).



% ($documentation medicalPatient EnglishLanguage "A relation between a &%Human and a 
% &%CareOrganization that treats the patient.")


% 	($domain medicalPatient 1 Human)

% 	($domain medicalPatient 2 CareOrganization)

% 	(forall (?PATIENT ?ORG)
% 		(=> 
% 			($instance ?ORG CareOrganization)
% 			(hasPurpose ?ORG (exists ([|] ?PATIENT []) (medicalPatient ?PATIENT ?ORG)))
% 		)
% 	)

fof( miloA1159, axiom,
	p__d__subclass(c__HospitalOrganization,c__CareOrganization)
).



% ($documentation HospitalOrganization EnglishLanguage "A &%CareOrganization where patients reside for a 
% short period of time while they undergo treatment for a disease or disorder.")


fof( miloA1160, axiom,
	p__d__subclass(c__HospitalBuilding,c__TemporaryResidence)
).



% ($documentation HospitalBuilding EnglishLanguage "A &%Building that serves at the place of business for
% a &%HospitalOrganization.")


fof( miloA1161, axiom,
	p__d__subclass(c__MedicalClinic,c__CareOrganization)
).



% ($documentation MedicalClinic EnglishLanguage "A &%CareOrganization which provides medical care 
% on an out-patient basis only, i.e. there are no rooms where patients may take 
% up residence for a period of time while they receive care.")


% 	($subclass MedicalClinicBuilding (ComplementFn Residence))

fof( miloA1163, axiom,
	p__d__subclass(c__MedicalClinicBuilding,c__Building)
).


fof( miloA1164, axiom,
	p__d__subclass(c__Cafeteria,c__Restaurant)
).



% ($documentation Cafeteria EnglishLanguage "Any &%Restaurant which does not offer table service.  
% Food is selected and purchased at a central counter.")


% 	(forall (?COMPANY)
% 		(=> 
% 			($instance ?COMPANY Cafeteria)
% 			(not 
% 				(exists (?PERSON)
% 					(occupiesPosition ?PERSON ServicePosition ?COMPANY)
% 				)
% 			)
% 		)
% 	)

fof( miloA1166, axiom,
	p__d__subclass(c__Tavern,c__Restaurant)
).



% ($documentation Tavern EnglishLanguage "A &%Restaurant whose primary service is selling 
% &%AlcoholicBeverages to customers.")


fof( miloA1167, axiom,
	(![COMPANY]: 
		(
			(
				p__d__instance(COMPANY,c__Tavern)
			)
			=>
			(
				(?[SERVICE,BEVERAGE]: 
					(
						(
							(
								p__d__instance(SERVICE,c__CommercialService)
							)
						 &
							(
								p__agent(SERVICE,COMPANY)
							)
						 &
							(
								p__d__instance(SERVICE,c__Selling)
							)
						 &
							(
								p__patient(SERVICE,BEVERAGE)
							)
						 &
							(
								p__d__instance(BEVERAGE,c__AlcoholicBeverage)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1168, axiom,
	p__d__subclass(c__Shipping,c__Transportation)
).



% ($documentation Shipping EnglishLanguage "Shipping is the subclass of &%Transportation 
% events in which goods are transported from one place to another by an 
% agent who is entrusted with the goods temporarily just in order to move 
% them.  Shipping may be done within an organization or it may be done 
% by an outside commercial agent.  See &%CommercialShipping.")


fof( miloA1169, axiom,
	p__d__subclass(c__CommercialShipping,c__Shipping)
).


fof( miloA1170, axiom,
	p__d__subclass(c__CommercialShipping,c__CommercialService)
).



% ($documentation CommercialShipping EnglishLanguage "&%CommercialShipping is the subclass of 
% &%Transportation events in which a commercial agent provides transportation 
% of goods for remuneration.")


fof( miloA1171, axiom,
	p__d__subclass(c__Smuggling,c__Transportation)
).


fof( miloA1172, axiom,
	p__d__subclass(c__Smuggling,c__CriminalAction)
).



% ($documentation Smuggling EnglishLanguage "Any instance &%Transportation which is also a 
% &%CriminalAction.")


% ($comment 
% ;; KJN: Moving to Transportation.kif as Train is defined there
% ;;($subclass RailroadCompany TransportationCompany)
% ;;(documentation RailroadCompany EnglishLanguage "Any &%TransportationCompany whose services 
% ;;include &%Transportation by &%Train.")
% ;;
% ;;(=>
% ;;   ($instance ?COMPANY RailroadCompany)
% ;;   (exists (?SERVICE ?TRAIN)
% ;;      (and
% ;;         ($instance ?SERVICE CommercialService)
% ;;         (agent ?SERVICE ?COMPANY)
% ;;         ($instance ?SERVICE Transportation)
% ;;         (instrument ?SERVICE ?TRAIN)
% ;;         ($instance ?TRAIN Train))))
% )

fof( miloA1173, axiom,
	p__d__instance(c__customer,c__IrreflexiveRelation)
).


fof( miloA1174, axiom,
	p__d__instance(c__customer,c__BinaryPredicate)
).


fof( miloA1175, axiom,
	p__d__instance(c__customer,c__AsymmetricRelation)
).


% 	($domain customer 1 CognitiveAgent)

% 	($domain customer 2 CognitiveAgent)


% ($documentation customer EnglishLanguage "A very general relation that exists whenever there
% is a &%FinancialTransaction between the two &%Agents such that the first is
% the &%destination of the &%FinancialTransaction and the second is the
% &%agent.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: customer is irreflexive
% ;;
% ;;(<=>
% ;;  (customer ?AGENT1 ?AGENT2)
% ;;  (exists (?SERVICE)
% ;;    (and
% ;;      ($instance ?SERVICE FinancialTransaction)
% ;;      (agent ?SERVICE ?AGENT2)
% ;;      (destination ?SERVICE ?AGENT1))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

fof( miloA1178, axiom,
	(![AGENT2,AGENT1]: 
		(
			(
				(
					(
						p__d__instance(AGENT2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(AGENT1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__customer(AGENT1,AGENT2)
				)
				<=>
				(
					(?[SERVICE]: 
						(
							(
								(
									p__d__instance(SERVICE,c__FinancialTransaction)
								)
							 &
								(
									p__origin(SERVICE,AGENT2)
								)
							 &
								(
									p__destination(SERVICE,AGENT1)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1179, axiom,
	p__d__instance(c__price,c__TernaryPredicate)
).


% 	($domain price 1 Physical)

% 	($domain price 2 CurrencyMeasure)

% 	($domain price 3 Agent)


% ($documentation price EnglishLanguage "(&%price ?Obj ?Money ?Agent) means that ?Agent 
% pays the amount of money ?Money for ?Obj.")


fof( miloA1183, axiom,
	(![Agent,Obj,Money]: 
		(
			(
				(
					(
						p__d__instance(Agent,c__Agent)
					)
				 &
					(
						p__d__instance(Money,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(Obj,c__Physical)
					)
				 &
					(
						p__price(Obj,Money,Agent)
					)
				)
			)
			=>
			(
				(?[Buying]: 
					(
						(
							(
								p__d__instance(Buying,c__Buying)
							)
						 &
							(
								p__agent(Buying,Agent)
							)
						 &
							(
								p__patient(Buying,Obj)
							)
						 &
							(
								p__transactionAmount(Buying,Money)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1184, axiom,
	p__d__subclass(c__WholesaleStore,c__MercantileOrganization)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation WholesaleStore EnglishLanguage "A
% &%MercantileOrganization that sells its goods exclusively to
% &%CommercialAgents, typically for resale, rather than to end-point
% consumers.")


fof( miloA1185, axiom,
	(![STORE,CUSTOMER]: 
		(
			(
				(
					(
						p__d__instance(STORE,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(CUSTOMER,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(STORE,c__WholesaleStore)
					)
				 &
					(
						p__customer(CUSTOMER,STORE)
					)
				)
			)
			=>
			(
				p__d__instance(CUSTOMER,c__CommercialAgent)
			)
		)
	)
).


fof( miloA1186, axiom,
	p__d__subclass(c__RetailStore,c__MercantileOrganization)
).


fof( miloA1187, axiom,
	p__d__disjoint(c__RetailStore,c__WholesaleStore)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation RetailStore EnglishLanguage "A &%RetailStore is a
% &%MercantileOrganization that sells goods to customers who are
% end-point consumers, rather than to &%CommercialAgents who are
% buying the goods in order to resell them at a higher price.  This
% distinguishes retail stores from wholesale establishments, where
% the purchasers are businesses or their representatives, as well
% as mail order or office buildings where transactions are
% facillitated but the consumer does not take possession of the
% item on the premises.  More succinctly, &%RetailStore is the
% complement of &%WholesaleStore, which is the class of
% &%MercantileOrganizations that sell goods to the general
% public.")


% ($comment 
% ;; NS: edit.  located -> agent.
% )

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the existence of an instance of Selling and an instance of Human related by destination is independent from the antecedent of the axiom)
% ;;
% ;;(=>
% ;;  ($instance ?X RetailStore)
% ;;  (and 
% ;;    (capability Selling agent ?X)
% ;;    (exists (?P ?EV)
% ;;      (and
% ;;        ($instance ?EV Selling)
% ;;        (destination ?EV ?P)
% ;;        ($instance ?P Human)))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA1188, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__RetailStore)
			)
			=>
			(
				p__capability(c__Selling,c__agent,X)
			)
		)
	)
).


fof( miloA1189, axiom,
	p__d__subclass(c__ShoppingMall,c__MercantileOrganization)
).



% ($documentation ShoppingMall EnglishLanguage "A &%MercantileOrganization which is a collection 
% of various shops gathered together in a single, modern development.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of member is SelfConnectedObject, whereas RetailStore is subclass of Collection (SelfConnnectedObject and Collection are disjoint)
% ;; TODO: Modify the domain information of member or use another relation
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?M ShoppingMall)
% ;;    (member ?S ?M))
% ;;  ($instance ?S RetailStore)) 
% )

fof( miloA1190, axiom,
	p__d__subclass(c__DrugStore,c__RetailStore)
).



% ($documentation DrugStore EnglishLanguage "A &%RetailStore that sells &%Medicine, and 
% perhaps other items as well.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: wrongly quantified variables
% ;;
% ;;(=>
% ;;  ($instance ?D DrugStore)
% ;;  (exists (?S)
% ;;    (and
% ;;      ($instance ?S Selling)
% ;;      (agent ?S ?D)
% ;;      (patient ?S ?M)
% ;;      ($instance ?M Medicine))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% ;; Warning: The axiom is not appropiated: DrugStore is a place, not an agent)
% )

fof( miloA1191, axiom,
	(![D]: 
		(
			(
				p__d__instance(D,c__DrugStore)
			)
			=>
			(
				(?[S,M]: 
					(
						(
							(
								p__d__instance(S,c__Selling)
							)
						 &
							(
								p__agent(S,D)
							)
						 &
							(
								p__patient(S,M)
							)
						 &
							(
								p__d__instance(M,c__Medicine)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1192, axiom,
	p__d__subclass(c__GroceryStore,c__RetailStore)
).



% ($documentation GroceryStore EnglishLanguage "A &%RetailStore that sells Food, and perhaps 
% other items as well.")


% 	(forall (?STORE)
% 		(=> 
% 			($instance ?STORE GroceryStore)
% 			(exists (?SELL ?FOOD)
% 				(and 
% 					($instance ?SELL Selling)
% 					(agent ?SELL ?STORE)
% 					(patient ?SELL ?FOOD)
% 					($instance ?FOOD (FoodForFn Animal))
% 				)
% 			)
% 		)
% 	)

fof( miloA1194, axiom,
	p__d__subclass(c__OfferingForSale,c__Offering)
).



% ($documentation OfferingForSale EnglishLanguage "&%Offering to sell something to someone.")


% 	(forall (?SALE ?OBJ ?SELL ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?SALE OfferingForSale)
% 				(agent ?SALE ?AGENT)
% 			)
% 			(patient ?SALE (exists ([|] ?SELL ([|] ?OBJ [])) (and ([|] ($instance ?SELL Selling) ([|] (patient ?SELL ?OBJ) ([|] (agent ?SELL ?AGENT) []))))))
% 		)
% 	)

fof( miloA1196, axiom,
	p__d__subclass(c__OfferingToPurchase,c__Offering)
).



% ($documentation OfferingToPurchase EnglishLanguage "&%Offering to buy something from someone.")


fof( miloA1197, axiom,
	p__d__subclass(c__BargainSale,c__Offering)
).



% ($documentation BargainSale EnglishLanguage "&%Offering to sell something to someone at a 
% reduced price.")


% 	(forall (?SALE ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?SALE BargainSale)
% 				(patient ?SALE ?OBJ)
% 				($instance ?OBJ Object)
% 			)
% 			(exists (?PRICE1 ?PRICE2 ?AGENT1 ?AGENT2)
% 				(and 
% 					(holdsDuring (ImmediatePastFn (WhenFn ?SALE)) (price ?OBJ ?PRICE1 ?AGENT1))
% 					(holdsDuring (WhenFn ?SALE) (price ?OBJ ?PRICE2 ?AGENT2))
% 					(lessThan ?PRICE2 ?PRICE1)
% 				)
% 			)
% 		)
% 	)

fof( miloA1199, axiom,
	p__d__subclass(c__ChristianBible,c__Book)
).


fof( miloA1200, axiom,
	p__subsumesContentClass(c__ChristianBible,c__NewTestament)
).


fof( miloA1201, axiom,
	p__subsumesContentClass(c__ChristianBible,c__OldTestament)
).



% ($documentation ChristianBible EnglishLanguage "Any instance of the collection of writings which 
% is regarded as scripture by those who embrace &%Christianity.")


fof( miloA1202, axiom,
	p__d__subclass(c__ChristianGospel,c__Text)
).



% ($documentation ChristianGospel EnglishLanguage "Four books in the New Testament of the 
% &%ChristianBible that describe the life and teachings of Jesus Christ 
% and that are referred to, respectively, as Matthew, Mark, Luke, and John.")


fof( miloA1203, axiom,
	p__d__subclass(c__OldTestament,c__Book)
).



% ($documentation OldTestament EnglishLanguage "The first part of the &%ChristianBible, describing 
% the history of the Hebrew people.")


fof( miloA1204, axiom,
	p__d__subclass(c__NewTestament,c__Book)
).


fof( miloA1205, axiom,
	p__subsumesContentClass(c__NewTestament,c__ChristianGospel)
).



% ($documentation NewTestament EnglishLanguage "The second and final part of the &%ChristianBible,
% describing the life and teachings of Jesus Christ and the activities of his 
% apostles.")


fof( miloA1206, axiom,
	p__d__instance(c__BeforeCommonEra,c__TimeInterval)
).



% ($documentation BeforeCommonEra EnglishLanguage "The &%TimeInterval that runs from 
% &%NegativeInfinity to the time of the birth of Christ.")


fof( miloA1207, axiom,
	( f__BeginFn1(c__BeforeCommonEra) = c__NegativeInfinity )
).


fof( miloA1208, axiom,
	~ (
		p__overlapsTemporally(c__CommonEra,c__BeforeCommonEra)
	)
).


fof( miloA1209, axiom,
	p__d__instance(c__CommonEra,c__TimeInterval)
).



% ($documentation CommonEra EnglishLanguage "The &%TimeInterval that runs from the supposed 
% time of the death of Christ to &%PositiveInfinity.")


fof( miloA1210, axiom,
	( f__EndFn1(c__CommonEra) = c__PositiveInfinity )
).


fof( miloA1211, axiom,
	p__d__subclass(c__MissionOrganization,c__ReligiousOrganization)
).



% ($documentation MissionOrganization EnglishLanguage "The class of &%ReligiousOrganizations 
% that send members to foreign countries with the aim of coverting citizens 
% of those countries to the beliefs of the &%ReligiousOrganization.")


fof( miloA1212, axiom,
	p__d__subclass(c__ReligiousBuilding,c__Building)
).


fof( miloA1213, axiom,
	p__d__subclass(c__ReligiousBuilding,c__PlaceOfWorship)
).



% ($documentation ReligiousBuilding EnglishLanguage "A &%Building which is intended to be 
% used for religious worship.  This class covers churches, temples, religious shrines, etc.")


% ($comment 
% ;; this rule is not needed as we have a more general one in Mid-level-ontology.kif relating PlacesOfWorship to
% ;; ReligiousProcess es in them.
% ;;(=>
% ;;   ($instance ?BUILDING ReligiousBuilding)
% ;;   (hasPurpose ?BUILDING (exists (?SERVICE)
% ;;                            (and
% ;;                               ($instance ?SERVICE ReligiousService)
% ;;                               (eventLocated ?SERVICE ?BUILDING)))))
% )

fof( miloA1214, axiom,
	p__d__subclass(c__Steeple,c__StationaryArtifact)
).



% ($documentation Steeple EnglishLanguage "A component of a &%ReligiousBuilding that is tall 
% and narrow and symbolizes the connection between humanity and a deity.")


fof( miloA1215, axiom,
	(![STEEPLE]: 
		(
			(
				p__d__instance(STEEPLE,c__Steeple)
			)
			=>
			(
				(?[BUILDING]: 
					(
						(
							(
								p__d__instance(BUILDING,c__Building)
							)
						 &
							(
								p__part(STEEPLE,BUILDING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1216, axiom,
	p__d__subclass(c__Ceremony,c__IntentionalProcess)
).


fof( miloA1217, axiom,
	p__d__subclass(c__Ceremony,c__SocialInteraction)
).



% ($documentation Ceremony EnglishLanguage "An &%instance of
% &%Ceremony is a relatively stylized, highly conventional
% &%SocialInteraction, typically guided or controlled by officials
% or professionals, to commemorate or mark some transformative
% event, such as a &%Wedding or a &%Baptizing.")


% ($comment 
% ;; TO DO: Probably it would be best to make the now more or less
% ;; standard anthropological distinction between &%Ceremony (past
% ;; to present looking status confirmation events) and *Ritual
% ;; (present to future looking status transformation events), but
% ;; that seems more technical than required here, and for unknown
% ;; utility.
% )

fof( miloA1218, axiom,
	p__d__subclass(c__Wedding,c__Ceremony)
).


fof( miloA1219, axiom,
	p__d__subclass(c__Wedding,c__Declaring)
).



% ($documentation Wedding EnglishLanguage "Any &%Declaring that leads to one person being 
% the &%spouse of another.")


% 	(forall (?WED)
% 		(=> 
% 			($instance ?WED Wedding)
% 			(exists (?PERSON1 ?PERSON2)
% 				(holdsDuring (ImmediateFutureFn (WhenFn ?WED)) (spouse ?PERSON1 ?PERSON2))
% 			)
% 		)
% 	)

% 	(forall (?P1 ?P2 ?T1)
% 		(=> 
% 			(and 
% 				(holdsDuring ?T1 (spouse ?P1 ?P2))
% 				($instance ?T1 TimeInterval)
% 			)
% 			(exists (?WED)
% 				(and 
% 					($instance ?WED Wedding)
% 					(patient ?WED ?P1)
% 					(patient ?WED ?P2)
% 					(earlier (WhenFn ?WED) ?T1)
% 				)
% 			)
% 		)
% 	)

fof( miloA1222, axiom,
	p__d__subclass(c__ReligiousService,c__ReligiousProcess)
).


fof( miloA1223, axiom,
	p__d__subclass(c__ReligiousService,c__Demonstrating)
).



% ($documentation ReligiousService EnglishLanguage "A formal process of public worship which is 
% typically carried out in a church, temple or other sanctified building and 
% which typically accords with a prescribed set of rules.")


% ($comment 
% ;; Moving this to People.kif, where Christianity is defined.
% ;;($subclass ChristianService ReligiousService)
% ;;(documentation ChristianService EnglishLanguage "Any &%ReligiousService that is conducted by 
% ;;&%members of &%Christianity.")
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?SERVICE ChristianService)
% ;;      (agent ?SERVICE ?PERSON)
% ;;      ($instance ?PERSON Human))
% ;;   (member ?PERSON Christianity))
% )

fof( miloA1224, axiom,
	p__d__subclass(c__Baptizing,c__Ceremony)
).


fof( miloA1225, axiom,
	p__d__subclass(c__Baptizing,c__ReligiousProcess)
).


fof( miloA1226, axiom,
	p__d__subclass(c__Baptizing,c__JoiningAnOrganization)
).



% ($documentation Baptizing EnglishLanguage "A &%ReligiousProcess which marks the acceptance of 
% the person being baptized into the &%ReligiousOrganization.")


fof( miloA1227, axiom,
	(![B,H]: 
		(
			(
				(
					(
						p__d__instance(B,c__Baptizing)
					)
				 &
					(
						p__patient(B,H)
					)
				)
			)
			=>
			(
				p__d__instance(H,c__Human)
			)
		)
	)
).


fof( miloA1228, axiom,
	p__d__subclass(c__Praying,c__ReligiousProcess)
).


fof( miloA1229, axiom,
	p__d__subclass(c__Praying,c__Requesting)
).



% ($documentation Praying EnglishLanguage "A formal or informal process of private worship which 
% may or may not be carried out in a &%ReligiousBuilding.")


% ($comment 
% ;; KJN: Moving this to Government.kif as the definition for PoliticalParty is there.
% ;;($subclass PartyPlatform FactualText)
% ;;(documentation PartyPlatform EnglishLanguage "A &%Text which is authored by a &%PoliticalParty 
% ;;and which contains the core goals and principles of the &%PoliticalParty for a 
% ;;particular year or election cycle.")
% ;;
% ;;(=>
% ;;   (and
% ;;      ($subclass ?PLATFORM PartyPlatform)
% ;;      (authors ?PARTY ?PLATFORM)
% ;;      ($instance ?PARTY Organization))
% ;;   ($instance ?PARTY PoliticalParty))
% ;;
% ;;(=>
% ;;   (and
% ;;      ($subclass ?PLATFORM PartyPlatform)
% ;;      (authors ?PARTY ?PLATFORM)
% ;;      ($instance ?PARTY PoliticalParty)
% ;;      ($instance ?INST ?PLATFORM)
% ;;      (containsInformation ?INST ?PROP))
% ;;   (believes ?PARTY ?PROP))
% ;;
% ;; KJN: Moving this to Government.kif as CommunistState is defined there.   
% ;;($subclass CommunistParty PoliticalParty)
% ;;(documentation CommunistParty EnglishLanguage "Any &%PoliticalParty that advocates for a 
% ;;&%CommunistState.")
% ;;(=>
% ;;  (and
% ;;    ($instance ?P CommunistParty)
% ;;    (member ?M ?P)
% ;;    ($instance ?A GeopoliticalArea))
% ;;  (desires ?M (governmentType ?A CommunistState)))
% ;;
% ;; KJN: Moving this to Government.kif to remove dependency to CountriesAndRegions.kif
% ;;($instance DemocraticPartyUS PoliticalParty)
% ;;(documentation DemocraticPartyUS EnglishLanguage "One of the two major political parties in 
% ;;the &%UnitedStates.  The &%DemocraticPartyUS represents liberal values.")
% ;;
% ;;($instance NaziParty PoliticalParty)
% ;;(documentation NaziParty EnglishLanguage "The German &%PoliticalParty headed by Adolf Hitler.")
% ;;
% ;; KJN: Moving this to Government.kif to remove dependency to CountriesAndRegions.kif
% ;;($instance RepublicanPartyUS PoliticalParty)
% ;;(documentation RepublicanPartyUS EnglishLanguage "One of the two major political parties in 
% ;;the &%UnitedStates.  The &%RepublicanPartyUS represents traditional, 
% ;;conservative values.")
% )

fof( miloA1230, axiom,
	p__d__subclass(c__ReferenceText,c__FactualText)
).



% ($documentation ReferenceText EnglishLanguage "A &%Text which is not intended to be read 
% from beginning to end, but which is meant to be consulted to answer specific 
% factual questions, e.g. about the meaning of a word, the location of a 
% country, etc.")


fof( miloA1231, axiom,
	p__d__subclass(c__IndependentState,c__GeopoliticalArea)
).


fof( miloA1232, axiom,
	p__d__subclass(c__IndependentState,c__Nation)
).



% ($documentation IndependentState EnglishLanguage "&%IndependentState is a subclass of 
% &%GeopoliticalArea, representing the classification 'Independent State' 
% used by the CIA World Fact Book.  Cf. 
% &%DependencyOrSpecialSovereigntyArea.")


fof( miloA1233, axiom,
	p__d__subclass(c__DependencyOrSpecialSovereigntyArea,c__GeopoliticalArea)
).


fof( miloA1234, axiom,
	p__d__disjoint(c__IndependentState,c__DependencyOrSpecialSovereigntyArea)
).


fof( miloA1235, axiom,
	p__d__subclass(c__OverseasArea,c__DependencyOrSpecialSovereigntyArea)
).



% ($documentation DependencyOrSpecialSovereigntyArea EnglishLanguage 
% "&%DependencyOrSpecialSovereigntyArea is a subclass of 
% &%GeopoliticalArea, representing the classification 'Dependency or Special 
% Sovereignty Area' used by the CIA World Fact Book.  Cf. 
% &%IndependentState.")


fof( miloA1236, axiom,
	p__d__instance(c__ResidentFn,c__UnaryFunction)
).


% 	($domain ResidentFn 1 GeopoliticalArea)

% 	($range ResidentFn GroupOfPeople)


% ($documentation ResidentFn EnglishLanguage "(&%ResidentFn ?AREA) denotes the 
% &%GroupOfPeople who have their &%home in ?AREA.")


fof( miloA1239, axiom,
	(![PERSON,AREA]: 
		(
			(
				(
					(
						p__d__instance(AREA,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(AREA,c__PermanentResidence)
					)
				 &
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__member(PERSON,f__ResidentFn1(AREA))
					)
				)
			)
			=>
			(
				p__home(PERSON,AREA)
			)
		)
	)
).


fof( miloA1240, axiom,
	p__subrelation(c__CitizenryFn,c__ResidentFn)
).


% 	($domain CitizenryFn 1 GeopoliticalArea)

% 	($range CitizenryFn GroupOfPeople)


% ($documentation CitizenryFn EnglishLanguage "(&%CitizenryFn ?AREA) denotes the 
% &%GroupOfPeople who are legal and permanent residents of the 
% &%GeopoliticalArea ?AREA.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check:
% ;; - Range of CitizenryFn and ResidentFn is GroupOfPeople, which is subclass of Physical
% ;; - Domain of greaterThanOrEqualTo is Quantity, which is subclass of Abstract
% ;; - Physical and Abstract are disjoint
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?AREA GeopoliticalArea)
% ;;      (equal ?CITIZENRY (CitizenryFn ?AREA))
% ;;      (equal ?POPULATION (ResidentFn ?AREA)))
% ;;   (greaterThanOrEqualTo ?POPULATION ?CITIZENRY))
% )

fof( miloA1243, axiom,
	p__d__instance(c__PerCapitaFn,c__BinaryFunction)
).


% 	($domain PerCapitaFn 1 Quantity)

% 	($domain PerCapitaFn 2 GeopoliticalArea)

% 	($range PerCapitaFn Quantity)


% ($documentation PerCapitaFn EnglishLanguage "(&%PerCapitaFn ?AREA ?QUANTITY) denotes the 
% average amount of ?QUANTITY possessed by a resident of &%GeopoliticalArea 
% ?AREA.")


fof( miloA1247, axiom,
	(![AREA,QUANTITY2,QUANTITY1]: 
		(
			(
				(
					(
						p__d__instance(AREA,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(QUANTITY1,c__Quantity)
					)
				 &
					(
						p__d__instance(QUANTITY2,c__Quantity)
					)
				 &
					(
						( f__PerCapitaFn2(QUANTITY1,AREA) = QUANTITY2 )
					)
				)
			)
			=>
			(
				(?[POPULATION]: 
					(
						(
							(
								p__d__instance(POPULATION,c__Number)
							)
						 &
							(
								( POPULATION = f__CardinalityFn1(f__ResidentFn1(AREA)) )
							)
						 &
							(
								( QUANTITY2 = f__DivisionFn2(QUANTITY1,POPULATION) )
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1248, axiom,
	p__d__subclass(c__CityDistrict,c__GeopoliticalArea)
).



% ($documentation CityDistrict EnglishLanguage "Any &%geopoliticalSubdivision of a &%City.")


fof( miloA1249, axiom,
	(![DISTRICT]: 
		(
			(
				p__d__instance(DISTRICT,c__GeopoliticalArea)
			)
			=>
			(
				(
					p__d__instance(DISTRICT,c__CityDistrict)
				)
				<=>
				(
					(?[CITY]: 
						(
							(
								(
									p__d__instance(CITY,c__City)
								)
							 &
								(
									p__geopoliticalSubdivision(DISTRICT,CITY)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1250, axiom,
	p__d__subclass(c__Downtown,c__CityDistrict)
).



% ($documentation Downtown EnglishLanguage "The commercial center of a &%City.  The part of the 
% &%City that contains more shops and offices than any other part.")


fof( miloA1251, axiom,
	p__d__subclass(c__Cemetery,c__LandArea)
).



% ($documentation Cemetery EnglishLanguage "A &%LandArea which is used for burying the dead.")


fof( miloA1252, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Cemetery)
			)
			=>
			(
				(?[T]: 
					(
						(
							(
								p__d__instance(T,c__Tomb)
							)
						 &
							(
								p__located(T,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1253, axiom,
	p__d__subclass(c__Park,c__LandArea)
).



% ($documentation Park EnglishLanguage "A publicly owned &%LandArea which is intended to be used 
% for recreation and/or exercise.")


fof( miloA1254, axiom,
	(![PARK]: 
		(
			(
				p__d__instance(PARK,c__Park)
			)
			=>
			(
				(?[GOV]: 
					(
						(
							(
								p__d__instance(GOV,c__Government)
							)
						 &
							(
								p__possesses(GOV,PARK)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?REC ?PARK)
% 		(=> 
% 			($instance ?PARK Park)
% 			(hasPurpose ?PARK (exists ([|] ?REC []) (and ([|] ($instance ?REC RecreationOrExercise) ([|] (eventLocated ?REC ?PARK) [])))))
% 		)
% 	)

fof( miloA1256, axiom,
	p__d__subclass(c__PublicPark,c__Park)
).



% ($documentation PublicPark EnglishLanguage "A &%Park that is publicly owned, i.e. owned 
% by a &%Government.")


fof( miloA1257, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__PublicPark)
			)
			=>
			(
				(?[G]: 
					(
						(
							(
								p__d__instance(G,c__Government)
							)
						 &
							(
								p__possesses(G,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1258, axiom,
	p__d__subclass(c__CultivatedLandArea,c__LandArea)
).



% ($documentation CultivatedLandArea EnglishLanguage "A &%LandArea which is dedicated to 
% &%Agriculture, e.g. &%Lawns, gardens, and fields for growing crops.")


fof( miloA1259, axiom,
	(![A]: 
		(
			(
				p__d__instance(A,c__CultivatedLandArea)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__Agriculture)
							)
						 &
							(
								p__eventLocated(C,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1260, axiom,
	p__d__subclass(c__Campground,c__LandArea)
).



% ($documentation Campground EnglishLanguage "A &%LandArea whose purpose is to have &%MobileResidences 
% (e.g. recreational vehicles, mobile homes, &%Tents, etc.) located there.")


% 	(forall (?R ?C)
% 		(=> 
% 			($instance ?C Campground)
% 			(hasPurpose ?C (exists ([|] ?R []) (and ([|] ($instance ?R MobileResidence) ([|] (located ?R ?C) [])))))
% 		)
% 	)

fof( miloA1262, axiom,
	p__d__subclass(c__CityBlock,c__LandArea)
).



% ($documentation CityBlock EnglishLanguage "A square-shaped area surrounded by &%Roadways 
% which is part of a &%City and typically contains &%Buildings.")


fof( miloA1263, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__CityBlock)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__City)
							)
						 &
							(
								p__part(B,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1264, axiom,
	p__d__subclass(c__AerobicExerciseDevice,c__RecreationOrExerciseDevice)
).



% ($documentation AerobicExerciseDevice EnglishLanguage "An &%RecreationOrExerciseDevice whose purpose is 
% to develop the cardiovascular system.")


fof( miloA1265, axiom,
	p__d__subclass(c__AnaerobicExerciseDevice,c__RecreationOrExerciseDevice)
).


fof( miloA1266, axiom,
	p__d__disjoint(c__AnaerobicExerciseDevice,c__AerobicExerciseDevice)
).



% ($documentation AnaerobicExerciseDevice EnglishLanguage "An &%RecreationOrExerciseDevice whose purpose 
% is to develop &%Muscles without also developing the cardiovascular system.")


% ($comment 
% ;; KJN: Moving this to Government.kif to remove dependency to CountriesAndRegions.kif
% ;;($instance UnitedStatesDepartmentOfState GovernmentOrganization)
% ;;(subOrganization UnitedStatesDepartmentOfState (GovernmentFn UnitedStates))
% ;;(documentation UnitedStatesDepartmentOfState EnglishLanguage "The &%subOrganization of the US 
% ;;government that sets and enforces foreign policy.")
% ;;
% ;;($instance UnitedStatesDepartmentOfInterior GovernmentOrganization)
% ;;(subOrganization UnitedStatesDepartmentOfInterior (GovernmentFn UnitedStates))
% ;;(documentation UnitedStatesDepartmentOfInterior EnglishLanguage "Manages and preserves public lands 
% ;;and natural resources in the &%UnitedStates.")
% ;;
% ;; NS: delete.
% ;; ($subclass SkilledOccupation Position)
% ;;
% ;; NS: add.
% )

fof( miloA1267, axiom,
	p__d__subclass(c__SkilledOccupation,c__OccupationalRole)
).



% ($documentation SkilledOccupation EnglishLanguage "Any &%Position which requires 
% learning a set of skills.")


fof( miloA1268, axiom,
	(![OCCUPATION,PERSON]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__Object)
					)
				 &
					(
						p__d__instance(OCCUPATION,c__SkilledOccupation)
					)
				 &
					(
						p__attribute(PERSON,OCCUPATION)
					)
				)
			)
			=>
			(
				(?[TRAINING]: 
					(
						(
							(
								p__d__instance(TRAINING,c__EducationalProcess)
							)
						 &
							(
								p__destination(TRAINING,PERSON)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NS: edit.
% )

fof( miloA1269, axiom,
	p__d__subclass(c__ManualLabor,c__Position)
).


fof( miloA1270, axiom,
	p__d__subclass(c__ManualLabor,c__OccupationalRole)
).



% ($documentation ManualLabor EnglishLanguage "Any &%Position which involves manual 
% work.")


fof( miloA1271, axiom,
	p__d__subclass(c__UnskilledOccupation,c__ManualLabor)
).


fof( miloA1272, axiom,
	p__d__disjoint(c__UnskilledOccupation,c__SkilledOccupation)
).



% ($documentation UnskilledOccupation EnglishLanguage "Any &%Position which does not 
% require learning a set of skills.") 


fof( miloA1273, axiom,
	p__d__subclass(c__OccupationalTrade,c__SkilledOccupation)
).


fof( miloA1274, axiom,
	p__d__subclass(c__OccupationalTrade,c__ManualLabor)
).



% ($documentation OccupationalTrade EnglishLanguage "Any &%Position that involves skilled 
% manual work.")


fof( miloA1275, axiom,
	p__d__subclass(c__Profession,c__SkilledOccupation)
).


fof( miloA1276, axiom,
	p__d__disjoint(c__Profession,c__OccupationalTrade)
).



% ($documentation Profession EnglishLanguage "Any occupation that requires at least a bachelor's
% degree.")


% ($comment 
% ;; NS: edit.
% )

% 	(forall (?ROLE ?T1 ?HUMAN)
% 		(=> 
% 			(and 
% 				(or 
% 					($instance ?ROLE OccupationalTrade)
% 					($instance ?ROLE Profession)
% 				)
% 				(holdsDuring ?T1 (attribute ?HUMAN ?ROLE))
% 			)
% 			(exists (?FIELD)
% 				(and 
% 					($instance ?FIELD FieldOfStudy)
% 					(holdsDuring ?T1 (knows ?HUMAN ?FIELD))
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; NS: edit.
% )


% ($documentation GovernmentSecretary EnglishLanguage "This
% &%Position &%Attribute describes a person who is head of an
% adminstrative department of &%Government.")


% ($comment 
% ;; NS: delete.  Redundant.
% ;; ($subclass GovernmentSecretary SkilledOccupation)
% ;;
% ;; NS: edit.  Renamed GovernmentOfficer to GovernmentPosition.
% ;; NS: add.
% )

fof( miloA1278, axiom,
	p__d__instance(c__GovernmentSecretary,c__GovernmentPosition)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA1279, axiom,
	p__d__instance(c__SecretaryOfTheInterior,c__GovernmentPosition)
).


% ($comment 
% ;; NS: edit.
% )

fof( miloA1280, axiom,
	p__subAttribute(c__SecretaryOfTheInterior,c__GovernmentSecretary)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation SecretaryOfTheInterior EnglishLanguage "This
% &%Position &%Attribute describes the head of the
% &%UnitedStatesDepartmentOfInterior.")


% ($comment 
% ;; NS: edit.
% ;; KJN: Moving this very specific rule to Government.kif where the US Government is
% ;; discussed in more detail
% ;;(=>
% ;;  (holdsDuring ?T1
% ;;    (occupiesPosition ?PERSON SecretaryOfTheInterior UnitedStatesDepartmentOfInterior))
% ;;  (holdsDuring ?T1
% ;;    (leader UnitedStatesDepartmentOfInterior ?PERSON)))
% ;;
% ;; NS: add.
% )

fof( miloA1281, axiom,
	p__d__instance(c__SecretaryOfTheTreasury,c__GovernmentPosition)
).


% ($comment 
% ;; NS: edit.
% )

fof( miloA1282, axiom,
	p__subAttribute(c__SecretaryOfTheTreasury,c__GovernmentSecretary)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation SecretaryOfTheTreasury EnglishLanguage "This
% &%Position &%Attribute describes the head of the United
% States Treasury Department.")


fof( miloA1283, axiom,
	p__d__subclass(c__StateGovernment,c__Government)
).



% ($documentation StateGovernment EnglishLanguage "The class of &%Governments whose 
% jurisdictions are &%StateOrProvinces.")


% ($comment 
% ;; NS: delete.  This is just silly.  It will add two new terms
% ;; during inference -- a skolemized StateOrProvince, P1, plus
% ;; (GovernmentFn P1) -- neither of which can be usefully related
% ;; to any other concepts.
% ;; (=>
% ;;    ($instance ?GOVERNMENT StateGovernment)
% ;;    (exists (?STATE)
% ;;       (and
% ;;          ($instance ?STATE StateOrProvince)
% ;;          (equal (GovernmentFn ?STATE) ?GOVERNMENT))))
% ;;
% ;; NS: add.
% )

% 	(forall (?STATE)
% 		(<=> 
% 			($instance ?STATE StateOrProvince)
% 			($instance (GovernmentFn ?STATE) StateGovernment)
% 		)
% 	)

fof( miloA1285, axiom,
	p__d__subclass(c__CityGovernment,c__Government)
).



% ($documentation CityGovernment EnglishLanguage "&%CityGovernment is the class of 
% governments of &%Cities.")


% 	(forall (?C)
% 		(<=> 
% 			($instance ?C City)
% 			($instance (GovernmentFn ?C) CityGovernment)
% 		)
% 	)

% ($comment 
% ;; KJN: Moving this to Government.kif as the definition for GeneralElection as well
% ;; as most of the rules for PopularElection are located there.  
% ;;($subclass PopularElection GeneralElection)
% ;;(documentation PopularElection EnglishLanguage "&%PopularElection is the class of 
% ;;&%Elections in which office-holders and issues are determined directly by 
% ;;the outcome of the votes cast by the enfranchised.  For example, U.S.  
% ;;Senators and Representatives are elected by &%PopularElection.  By 
% ;;contrast, U.S. Presidents are elected by indirect elections, in which the 
% ;;Electoral College determines the actual outcome.  See &%electionWinner.")
% ;;
% ;;($subclass ElectoralCollegeElection GeneralElection)
% ;;(documentation ElectoralCollegeElection EnglishLanguage "&%ElectoralCollegeElection is 
% ;;the class of &%Elections in which the outcome is decided by the votes of 
% ;;electors who have been chosen by popular vote, rather than directly by 
% ;;results of the popular vote.  &%ElectoralCollegeElection is an indirect 
% ;;method of election, in contrast to &%PopularElection.")
% ;;
% ;; KJN: Moving this to Government.kif to remove dependency to CountriesAndRegions.kif
% ;;($instance UnitedStatesCongress LegislativeOrganization)
% ;;(subOrganization UnitedStatesCongress (GovernmentFn UnitedStates))
% ;;(documentation UnitedStatesCongress EnglishLanguage "The legislative branch of the government 
% ;;of the &%UnitedStates.")
% )

fof( miloA1287, axiom,
	p__d__subclass(c__MilitaryService,c__MilitaryOrganization)
).



% ($documentation MilitaryService EnglishLanguage "A branch of the armed forces of a &%Nation.  
% For example, there are five military services in the United States, the army, 
% the navy, the air force, the marines, and the coast guard.")


fof( miloA1288, axiom,
	p__d__subclass(c__CoastGuard,c__GovernmentOrganization)
).



% ($documentation CoastGuard EnglishLanguage "&%CoastGuard is the subclass of &%GovernmentOrganizations 
% that enforce the maritime laws of a &%Nation and guard its &%Seacoast.  This may be 
% a military or quasi-military organization.")


fof( miloA1289, axiom,
	p__d__subclass(c__Army,c__MilitaryService)
).



% ($documentation Army EnglishLanguage "&%MilitaryServices that are land forces.")


fof( miloA1290, axiom,
	p__d__subclass(c__AirForce,c__MilitaryService)
).



% ($documentation AirForce EnglishLanguage "&%AirForce is the subclass of &%MilitaryService 
% that comprises military air forces.")


fof( miloA1291, axiom,
	p__d__subclass(c__MilitaryUnit,c__MilitaryOrganization)
).



% ($documentation MilitaryUnit EnglishLanguage "Any &%MilitaryOrganization that can be dispatched 
% to an area of operations.")


fof( miloA1292, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Battle)
			)
			=>
			(
				(?[U1,U2]: 
					(
						(
							(
								p__d__instance(U1,c__MilitaryUnit)
							)
						 &
							(
								p__d__instance(U2,c__MilitaryUnit)
							)
						 &
							(
								~ (
									( U1 = U2 )
								)
							)
						 &
							(
								p__agent(B,U1)
							)
						 &
							(
								p__agent(B,U2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1293, axiom,
	p__d__subclass(c__MilitaryReserveForce,c__MilitaryOrganization)
).



% ($documentation MilitaryReserveForce EnglishLanguage "&%MilitaryReserveForce is the subclass 
% of &%MilitaryOrganizations that consist of forces trained in military 
% procedures and activities, which are subject to being called to active duty 
% if needed.")


fof( miloA1294, axiom,
	p__d__subclass(c__MilitarySquad,c__MilitaryUnit)
).



% ($documentation MilitarySquad EnglishLanguage "Any &%MilitaryUnit with the rank of squad.")


fof( miloA1295, axiom,
	p__d__subclass(c__MilitaryCorps,c__MilitaryUnit)
).



% ($documentation MilitaryCorps EnglishLanguage "Any &%MilitaryUnit with the rank of 
% corps.")


fof( miloA1296, axiom,
	p__d__subclass(c__CavalryUnit,c__MilitaryUnit)
).



% ($documentation CavalryUnit EnglishLanguage "&%MilitaryUnits composed primarily of &%Soldiers 
% who are mounted, i.e. who perform their combat missions from a &%Horse or 
% &%Vehicle.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of agent is Process, which is subclass of Physical, whereas the second argument of during is TimeInterval, which is subclass of Abstract (Physical and Abstract are disjoint)
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?C CavalryUnit)
% ;;    ($instance ?B Battle)
% ;;    (agent ?B ?C))
% ;;  (exists (?P ?V ?T)
% ;;    (and
% ;;      (attribute ?P Soldier)
% ;;      (member ?P ?C)
% ;;      ($instance ?T Transportation)
% ;;      (agent ?T ?P)
% ;;      ($instance ?V Vehicle)
% ;;      (patient ?T ?V)
% ;;      (during ?T ?B))))
% )

fof( miloA1297, axiom,
	p__d__subclass(c__MilitarySurplus,c__MilitaryArtifact)
).



% ($documentation MilitarySurplus EnglishLanguage "Any &%MilitaryArtifact which is sold to a 
% non-military customer.")


% 	(forall (?S)
% 		(=> 
% 			($instance ?S MilitarySurplus)
% 			(exists (?A ?B)
% 				(and 
% 					($instance ?B Buying)
% 					(patient ?B ?A)
% 					(not 
% 						($instance ?A MilitaryOrganization)
% 					)
% 					(not 
% 						(member ?A MilitaryOrganization)
% 					)
% 				)
% 			)
% 		)
% 	)


% ($documentation hostileForces EnglishLanguage "(hostileForces ?UNIT1 ?UNIT2) means that 
% the &%MilitaryUnits ?UNIT1 and ?UNIT2 are, respectively, allied with 
% &%GeopoliticalAreas that are at war with one another.")


fof( miloA1299, axiom,
	p__d__instance(c__hostileForces,c__BinaryPredicate)
).


fof( miloA1300, axiom,
	p__d__instance(c__hostileForces,c__IrreflexiveRelation)
).


% 	($domain hostileForces 1 MilitaryUnit)

% 	($domain hostileForces 2 MilitaryUnit)

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misspelled variable
% ;;
% ;;(=>
% ;;  (hostileForces ?U1 ?U2)
% ;;  (exists (?W ?A1 ?A2)
% ;;    (and
% ;;      ($instance ?WAR War)
% ;;      (contestParticipant ?W ?A1)
% ;;      (contestParticipant ?W ?A2)
% ;;      (subOrganization ?U1 (GovernmentFn ?A1))
% ;;      (subOrganization ?U2 (GovernmentFn ?A2)))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA1303, axiom,
	(![U1,U2]: 
		(
			(
				(
					(
						p__d__instance(U2,c__MilitaryUnit)
					)
				 &
					(
						p__d__instance(U1,c__MilitaryUnit)
					)
				 &
					(
						p__hostileForces(U1,U2)
					)
				)
			)
			=>
			(
				(?[W,A1,A2]: 
					(
						(
							(
								p__d__instance(A1,c__GeopoliticalArea)
							)
						 &
							(
								p__d__instance(A2,c__GeopoliticalArea)
							)
						 &
							(
								p__d__instance(W,c__War)
							)
						 &
							(
								p__contestParticipant(W,A1)
							)
						 &
							(
								p__contestParticipant(W,A2)
							)
						 &
							(
								p__subOrganization(U1,f__GovernmentFn1(A1))
							)
						 &
							(
								p__subOrganization(U2,f__GovernmentFn1(A2))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1304, axiom,
	p__d__subclass(c__Commission,c__Organization)
).



% ($documentation Commission EnglishLanguage "A small, temporary &%Organization whose purpose 
% is to investigate some issue.")


% 	(forall (?ISSUE ?INVESTIGATE ?COMMISSION)
% 		(=> 
% 			($instance ?COMMISSION Commission)
% 			(hasPurpose ?COMMISSION (exists ([|] ?INVESTIGATE ([|] ?ISSUE [])) (and ([|] ($instance ?INVESTIGATE Investigating) ([|] (patient ?INVESTIGATE ?ISSUE) ([|] (agent ?INVESTIGATE ?COMMISSION) []))))))
% 		)
% 	)

fof( miloA1306, axiom,
	p__d__subclass(c__ServiceOrganization,c__Organization)
).



% ($documentation ServiceOrganization EnglishLanguage "An &%Organization that performs 
% a public service and is regulated by the &%Government.")


fof( miloA1307, axiom,
	(![ORG]: 
		(
			(
				p__d__instance(ORG,c__ServiceOrganization)
			)
			=>
			(
				(?[PROC,GOV]: 
					(
						(
							(
								p__d__instance(PROC,c__RegulatoryProcess)
							)
						 &
							(
								p__patient(PROC,ORG)
							)
						 &
							(
								p__agent(PROC,GOV)
							)
						 &
							(
								p__d__instance(GOV,c__Government)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1308, axiom,
	p__d__subclass(c__Library,c__EducationalOrganization)
).



% ($documentation Library EnglishLanguage "An &%EducationalOrganization which is a repository 
% of &%Texts which have been classified for efficient retrieval.")


fof( miloA1309, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__Library)
			)
			=>
			(
				(?[B,T]: 
					(
						(
							(
								p__possesses(L,B)
							)
						 &
							(
								p__d__instance(B,c__Building)
							)
						 &
							(
								p__d__instance(T,c__Text)
							)
						 &
							(
								p__located(T,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1310, axiom,
	p__d__subclass(c__PublicLibrary,c__Library)
).


fof( miloA1311, axiom,
	p__d__subclass(c__PublicLibrary,c__GovernmentOrganization)
).



% ($documentation PublicLibrary EnglishLanguage "A &%Library which is financed by taxes and which 
% is open to everyone.")


fof( miloA1312, axiom,
	p__d__subclass(c__Museum,c__EducationalOrganization)
).



% ($documentation Museum EnglishLanguage "An &%EducationalOrganization where &%Artifacts of historic, 
% scientific or aesthetic value are collected and exhibited.")


fof( miloA1313, axiom,
	p__d__subclass(c__OrganizationalBoard,c__Organization)
).



% ($documentation OrganizationalBoard EnglishLanguage "Part of an &%Organization that 
% is responsible for managing the &%Organization.")


fof( miloA1314, axiom,
	(![BOARD]: 
		(
			(
				p__d__instance(BOARD,c__OrganizationalBoard)
			)
			=>
			(
				(?[ORG,MANAGE]: 
					(
						(
							(
								p__d__instance(ORG,c__Organization)
							)
						 &
							(
								p__subOrganization(BOARD,ORG)
							)
						 &
							(
								p__d__instance(MANAGE,c__Managing)
							)
						 &
							(
								p__agent(MANAGE,BOARD)
							)
						 &
							(
								p__patient(MANAGE,ORG)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1315, axiom,
	p__d__subclass(c__SecurityUnit,c__Organization)
).



% ($documentation SecurityUnit EnglishLanguage "The &%Organization that is charged with 
% ensuring the security of members of the overall &%Organization and the 
% property of the &%Organization.")


% 	(forall (?MAINTAIN ?ORG ?UNIT)
% 		(=> 
% 			(and 
% 				($instance ?UNIT SecurityUnit)
% 				(subOrganization ?UNIT ?ORG)
% 			)
% 			(holdsObligation (exists ([|] ?MAINTAIN []) (and ([|] ($instance ?MAINTAIN Maintaining) ([|] (agent ?MAINTAIN ?UNIT) ([|] (patient ?MAINTAIN ?ORG) []))))) ?UNIT)
% 		)
% 	)

fof( miloA1317, axiom,
	p__d__subclass(c__UnionOrganization,c__Organization)
).



% ($documentation UnionOrganization EnglishLanguage "An &%Organization comprised of workers from 
% the same &%Corporation or &%Industry.  The purpose of the &%UnionOrganization 
% is to strengthen its representation in bargaining with the &%Corporation or 
% &%Industry.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check:
% ;; - The first argument of member is SelfConnectedObject
% ;; - The first argument of employs is Organization
% ;;	- SelfConnectedObject and Organization are disjoint
% ;;
% ;;(=>
% ;;   ($instance ?ORG UnionOrganization)
% ;;   (exists (?COLL)
% ;;      (=>
% ;;         (member ?MEMBER ?ORG)
% ;;         (or
% ;;            (and
% ;;               ($instance ?COLL Corporation)
% ;;               (employs ?COLL ?MEMBER)) 
% ;;            (exists (?CORP)
% ;;               (and
% ;;                  ($instance ?COLL Industry)
% ;;                  (member ?CORP ?COLL)
% ;;                  (employs ?CORP ?MEMBER)))))))
% )

fof( miloA1318, axiom,
	p__d__subclass(c__OrganicCompound,c__CompoundSubstance)
).



% ($documentation OrganicCompound EnglishLanguage "Any &%CompoundSubstance that has a &%Carbon 
% base.")


fof( miloA1319, axiom,
	(![COMPOUND]: 
		(
			(
				(
					(
						p__d__instance(COMPOUND,c__OrganicCompound)
					)
				 &
					(
						p__d__instance(COMPOUND,c__Molecule)
					)
				)
			)
			=>
			(
				(?[CARBON]: 
					(
						(
							(
								p__d__instance(CARBON,c__Carbon)
							)
						 &
							(
								p__part(CARBON,COMPOUND)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1320, axiom,
	p__d__subclass(c__Urea,c__OrganicCompound)
).



% ($documentation Urea EnglishLanguage "Urea is a dry, soluble, nitrogenous substance 
% that is the major solid component of the urine of mammals, and which 
% may be synthesized from ammonia and carbon dioxide, it is useful in the 
% production of &%Plastic and in &%Fertilizers.") 


fof( miloA1321, axiom,
	p__d__subclass(c__Steroid,c__OrganicCompound)
).


fof( miloA1322, axiom,
	p__d__subclass(c__Steroid,c__BiologicallyActiveSubstance)
).



% ($documentation Steroid EnglishLanguage "A class of &%OrganicCompounds having the same basic 
% chemical structure and having significant physiological effects.")


fof( miloA1323, axiom,
	p__d__subclass(c__Hydrocarbon,c__OrganicCompound)
).



% ($documentation Hydrocarbon EnglishLanguage "Any &%OrganicCompound that contains only &%Carbon 
% and &%Hydrogen.")


fof( miloA1324, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Hydrocarbon)
			)
			=>
			(
				(?[P1,P2]: 
					(
						(
							(
								( S = f__MereologicalSumFn2(P1,P2) )
							)
						 &
							(
								p__d__instance(P1,c__Carbon)
							)
						 &
							(
								p__d__instance(P2,c__Hydrogen)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1325, axiom,
	p__d__subclass(c__Alcohol,c__OrganicCompound)
).



% ($documentation Alcohol EnglishLanguage "&%OrganicCompounds that are produced from hydrocarbons 
% by distillation.")


fof( miloA1326, axiom,
	p__d__subclass(c__Alkaloid,c__ChemicalBase)
).


fof( miloA1327, axiom,
	p__d__subclass(c__Alkaloid,c__PlantSubstance)
).


fof( miloA1328, axiom,
	p__d__subclass(c__Alkaloid,c__BiologicallyActiveSubstance)
).



% ($documentation Alkaloid EnglishLanguage "A &%ChemicalBase found in &%Plants that has 
% physiological and psychological effects.")


fof( miloA1329, axiom,
	(![A]: 
		(
			(
				p__d__instance(A,c__Alkaloid)
			)
			=>
			(
				(?[N]: 
					(
						(
							(
								p__d__instance(N,c__Nitrogen)
							)
						 &
							(
								p__part(N,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1330, axiom,
	p__d__instance(c__Drugged,c__ConsciousnessAttribute)
).


fof( miloA1331, axiom,
	p__contraryAttribute2(c__Drugged,c__Sober)
).



% ($documentation Drugged EnglishLanguage "The &%ConsciousnessAttribute of someone whose motor and/or 
% cognitive faculties are significantly impaired by a &%BiologicallyActiveSubstance.")


% 	(forall (?T ?B ?P)
% 		(=> 
% 			(holdsDuring ?T (attribute ?P Drugged))
% 			(holdsDuring ?T (exists ([|] ?B []) (and ([|] ($instance ?B BiologicallyActiveSubstance) ([|] (part ?B ?P) [])))))
% 		)
% 	)

fof( miloA1333, axiom,
	p__subAttribute(c__Drunk,c__Drugged)
).



% ($documentation Drunk EnglishLanguage "The &%ConsciousnessAttribute of someone whose motor and 
% cognitive faculties are significantly impaired by &%Alcohol.")


% 	(forall (?TIME ?ALCOHOL ?DRINK ?PERSON)
% 		(=> 
% 			(holdsDuring ?TIME (attribute ?PERSON Drunk))
% 			(exists (?PAST)
% 				(and 
% 					(temporalPart ?PAST (PastFn ?TIME))
% 					(holdsDuring ?PAST (exists ([|] ?DRINK ([|] ?ALCOHOL [])) (and ([|] ($instance ?DRINK Drinking) ([|] (patient ?DRINK ?ALCOHOL) ([|] ($instance ?ALCOHOL AlcoholicBeverage) ([|] (agent ?DRINK ?PERSON) [])))))))
% 				)
% 			)
% 		)
% 	)

% 	(forall (?T ?B ?P)
% 		(=> 
% 			(holdsDuring ?T (attribute ?P Drunk))
% 			(holdsDuring ?T (exists ([|] ?B []) (and ([|] ($instance ?B Alcohol) ([|] (part ?B ?P) [])))))
% 		)
% 	)

fof( miloA1336, axiom,
	p__d__subclass(c__AminoAcid,c__ChemicalAcid)
).


fof( miloA1337, axiom,
	p__d__subclass(c__AminoAcid,c__OrganicCompound)
).



% ($documentation AminoAcid EnglishLanguage "Organic acids that are the building blocks of 
% &%Proteins.")


fof( miloA1338, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__Protein)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__AminoAcid)
							)
						 &
							(
								p__part(A,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1339, axiom,
	p__d__subclass(c__Cholesterol,c__Steroid)
).


fof( miloA1340, axiom,
	p__d__subclass(c__Cholesterol,c__AnimalSubstance)
).



% ($documentation Cholesterol EnglishLanguage "A &%Steroid that is produced by the &%Liver and that 
% is believed to be closely associated with various cardiological disorders.")


fof( miloA1341, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Cholesterol)
			)
			=>
			(
				(?[P,L]: 
					(
						(
							(
								p__d__instance(P,c__BiologicalProcess)
							)
						 &
							(
								p__eventLocated(P,L)
							)
						 &
							(
								p__d__instance(L,c__Liver)
							)
						 &
							(
								p__result(P,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1342, axiom,
	p__d__subclass(c__ChemicalAcid,c__CompoundSubstance)
).


fof( miloA1343, axiom,
	p__d__disjoint(c__ChemicalAcid,c__ChemicalBase)
).



% ($documentation ChemicalAcid EnglishLanguage "A bitter &%CompoundSubstance that is capable of 
% reacting with a &%ChemicalBase and forming a &%ChemicalSalt.")


fof( miloA1344, axiom,
	(![CA,CB,C]: 
		(
			(
				(
					(
						p__d__instance(CA,c__ChemicalAcid)
					)
				 &
					(
						p__d__instance(CB,c__ChemicalBase)
					)
				 &
					(
						p__d__instance(C,c__ChemicalProcess)
					)
				 &
					(
						p__patient(C,CA)
					)
				 &
					(
						p__patient(C,CB)
					)
				)
			)
			=>
			(
				(?[CS]: 
					(
						(
							(
								p__d__instance(CS,c__ChemicalSalt)
							)
						 &
							(
								p__result(C,CS)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1345, axiom,
	p__d__subclass(c__ChemicalBase,c__CompoundSubstance)
).



% ($documentation ChemicalBase EnglishLanguage "A &%CompoundSubstance that is capable of 
% reacting with a &%ChemicalAcid and forming a &%ChemicalSalt.")


fof( miloA1346, axiom,
	p__d__subclass(c__ChemicalSalt,c__CompoundSubstance)
).



% ($documentation ChemicalSalt EnglishLanguage "A bitter &%CompoundSubstance that is formed in a 
% chemical reaction of a &%ChemicalBase with a &%ChemicalAcid.")


fof( miloA1347, axiom,
	p__d__subclass(c__SodiumChloride,c__ChemicalSalt)
).


% ($comment 
% ;; (names "salt" SodiumChloride)
% ;;
% ;; (names "NaCl" SodiumChloride)
% )


% ($documentation SodiumChloride EnglishLanguage "&%SodiumChloride is the compound of &%Sodium and &%Chloride,
% which may appear in crystalline form or in solution with water or other substances.
% It is a compound found in solution in significant quantities in sea water.")


fof( miloA1348, axiom,
	(![SALT]: 
		(
			(
				p__d__instance(SALT,c__SodiumChloride)
			)
			=>
			(
				(?[SYNTHESIS,SODIUM,CHLORINE]: 
					(
						(
							(
								p__d__instance(SYNTHESIS,c__ChemicalSynthesis)
							)
						 &
							(
								p__resource(SYNTHESIS,SODIUM)
							)
						 &
							(
								p__d__instance(SODIUM,c__Sodium)
							)
						 &
							(
								p__resource(SYNTHESIS,CHLORINE)
							)
						 &
							(
								p__d__instance(CHLORINE,c__Chlorine)
							)
						 &
							(
								p__result(SYNTHESIS,SALT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1349, axiom,
	p__d__subclass(c__Diamond,c__Mineral)
).


fof( miloA1350, axiom,
	p__d__subclass(c__Diamond,c__Carbon)
).



% ($documentation Diamond EnglishLanguage "Crystalline &%Carbon that is valued as a gem and 
% used in industrial applications.")


fof( miloA1351, axiom,
	p__d__subclass(c__SalineSolution,c__Solution)
).



% ($documentation SalineSolution EnglishLanguage "A &%Solution consisting of &%SodiumChloride and 
% &%Water.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: SalineSolution is subclass of Mixture, whereas SodiumChloride and Water are instances of PureSubstance (Mixture and PureSubstance are disjoint)
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?SOLUTION SalineSolution)
% ;;      (part ?PART ?SOLUTION))
% ;;   (or
% ;;      ($instance ?PART SodiumChloride)
% ;;      ($instance ?PART Water)))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

fof( miloA1352, axiom,
	(![SOLUTION,PART]: 
		(
			(
				(
					(
						p__d__instance(PART,c__Object)
					)
				 &
					(
						p__d__instance(SOLUTION,c__SalineSolution)
					)
				 &
					(
						p__properPart(PART,SOLUTION)
					)
				)
			)
			=>
			(
				(
					p__d__instance(PART,c__SodiumChloride)
				 |
					p__d__instance(PART,c__Water)
				)
			)
		)
	)
).


fof( miloA1353, axiom,
	(![WATER]: 
		(
			(
				p__d__instance(WATER,c__Water)
			)
			=>
			(
				(?[SYNTHESIS,HYDROGEN,OXYGEN]: 
					(
						(
							(
								p__d__instance(SYNTHESIS,c__ChemicalSynthesis)
							)
						 &
							(
								p__resource(SYNTHESIS,HYDROGEN)
							)
						 &
							(
								p__d__instance(HYDROGEN,c__Hydrogen)
							)
						 &
							(
								p__resource(SYNTHESIS,OXYGEN)
							)
						 &
							(
								p__d__instance(OXYGEN,c__Oxygen)
							)
						 &
							(
								p__result(SYNTHESIS,WATER)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation reactant EnglishLanguage "(reactant ?PROCESS ?SUBSTANCE) means that ?SUBSTANCE 
% is a chemical reactant in the chemical reaction ?PROCESS, i.e. ?SUBSTANCE is 
% present at the beginning of the chemical reaction ?PROCESS.")


% 	($domain reactant 1 ChemicalProcess)

% 	($domain reactant 2 Substance)

fof( miloA1356, axiom,
	p__subrelation(c__reactant,c__resource)
).



% ($documentation reagent EnglishLanguage "(reagent ?PROCESS ?SUBSTANCE) means that ?SUBSTANCE 
% is a chemical agent in the chemical reaction ?PROCESS.")


% 	($domain reagent 1 ChemicalProcess)

% 	($domain reagent 2 Substance)

fof( miloA1359, axiom,
	p__subrelation(c__reagent,c__instrument)
).


fof( miloA1360, axiom,
	p__d__subclass(c__Oil,c__Solution)
).



% ($documentation Oil EnglishLanguage "A greasy, viscous &%Solution that cannot be mixed with &%Water.  
% Note that this general class covers petroleum oil, vegetable oil, animal fat, etc.")


fof( miloA1361, axiom,
	(![OIL]: 
		(
			(
				p__d__instance(OIL,c__Oil)
			)
			=>
			(
				(![MIX,WATER]: 
					(
						(
							~ (
								p__d__instance(MIX,c__Object)
							)
						 |
							~ (
								p__d__instance(WATER,c__Object)
							)
						 |
							~ (
								p__d__instance(MIX,c__Mixture)
							)
						 |
							~ (
								p__part(WATER,MIX)
							)
						 |
							~ (
								p__d__instance(WATER,c__Water)
							)
						 |
							~ (
								p__part(OIL,MIX)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1362, axiom,
	p__d__subclass(c__Surfactant,c__Substance)
).



% ($documentation Surfactant EnglishLanguage "Surfactants, also known as &%Wetting agents, 
% lower the surface tension of a &%Liquid, allowing easier spreading.  The 
% term surfactant is a compression of 'Surface active agent'.  Surfactants 
% are usually organic compounds that contain both hydrophobic and 
% hydrophilic groups, and are thus semi-soluble in both organic and aqueous 
% solvents.") 


fof( miloA1363, axiom,
	p__d__subclass(c__Detergent,c__Surfactant)
).


fof( miloA1364, axiom,
	p__d__subclass(c__Detergent,c__Mixture)
).



% ($documentation Detergent EnglishLanguage "A detergent is a compound, or a mixture of 
% compounds, whose molecules have two distinct regions: one that is 
% hydrophilic, and dissolves easily in water, and another region that is 
% hydrophobic, with little (if any) affinity for water.  As a consequence, 
% these compounds can aid in the solubilization of hydrophobic compounds in 
% water, and usually are optimized for this property.  Though &%Soap also has 
% these properties, soaps in general are not considered detergents.  &%Soap is 
% a particular type of surfactant that is derived from oils and fats.  They 
% are created through the saponification process whereby the ester linkage 
% in a vegetable oil or fat is hydrolytically cleaved, creating a sodium or 
% potassium salt of a fatty acid (i.e.  soap).  Both detergents and soaps 
% are considered to be surfactants.  &%Surfactants that are not soaps are 
% considered to be detergents.  Detergents are also commonly known as any 
% cleaning mixture containing surfactants.  (from Wikipedia)") 


% 	(forall (?DETERGENT ?SUBSTANCE ?REMOVE ?SURFACE ?OBJECT)
% 		(=> 
% 			($instance ?DETERGENT Detergent)
% 			(hasPurpose ?DETERGENT (exists ([|] ?REMOVE ([|] ?SUBSTANCE ([|] ?SURFACE ([|] ?OBJECT [])))) (and ([|] ($instance ?REMOVE Removing) ([|] ($instance ?SUBSTANCE Substance) ([|] (patient ?REMOVE ?SUBSTANCE) ([|] (origin ?REMOVE ?SURFACE) ([|] (surface ?SURFACE ?OBJECT) []))))))))
% 		)
% 	)

fof( miloA1366, axiom,
	p__d__subclass(c__Bathing,c__Washing)
).



% ($documentation Bathing EnglishLanguage "&%Washing the entire body of a &%Human or &%Animal.")


fof( miloA1367, axiom,
	(![B,A]: 
		(
			(
				(
					(
						p__d__instance(B,c__Bathing)
					)
				 &
					(
						p__patient(B,A)
					)
				)
			)
			=>
			(
				p__d__instance(A,c__Animal)
			)
		)
	)
).


fof( miloA1368, axiom,
	p__d__subclass(c__BathingDevice,c__WashingDevice)
).



% ($documentation BathingDevice EnglishLanguage "A &%WashingDevice which is intended to be used by 
% Humans for washing their bodies.  Note that this class covers bathtubs, showers, 
% etc.")


% 	(forall (?BD ?B ?PERSON ?P)
% 		(=> 
% 			($instance ?BD BathingDevice)
% 			(hasPurpose ?BD (exists ([|] ?B ([|] ?P [])) (and ([|] ($instance ?B Bathing) ([|] (instrument ?B ?BD) ([|] (patient ?B ?PERSON) ([|] ($instance ?P Human) [])))))))
% 		)
% 	)

fof( miloA1370, axiom,
	p__d__subclass(c__WashBasin,c__WashingDevice)
).



% ($documentation WashBasin EnglishLanguage "A &%WashingDevice which is intended to be used by 
% &%Humans for washing their &%Hands.")


% 	(forall (?B ?W ?H)
% 		(=> 
% 			($instance ?B WashBasin)
% 			(hasPurpose ?B (exists ([|] ?W ([|] ?H [])) (and ([|] ($instance ?W Washing) ([|] (instrument ?W ?B) ([|] (patient ?W ?H) ([|] ($instance ?H Hand) [])))))))
% 		)
% 	)

fof( miloA1372, axiom,
	p__d__subclass(c__Glue,c__Mixture)
).


fof( miloA1373, axiom,
	p__d__subclass(c__Glue,c__AttachingDevice)
).



% ($documentation Glue EnglishLanguage "Any &%Mixture whose purpose is to be used as the &%instrument 
% of &%Attaching one thing to another.")


% 	(forall (?ATTACH ?GLUE)
% 		(=> 
% 			($instance ?GLUE Glue)
% 			(hasPurpose ?GLUE (exists ([|] ?ATTACH []) (and ([|] ($instance ?ATTACH Attaching) ([|] (instrument ?ATTACH ?GLUE) [])))))
% 		)
% 	)

fof( miloA1375, axiom,
	p__d__subclass(c__Glass,c__Mixture)
).



% ($documentation Glass EnglishLanguage "A transparent or translucent &%Mixture of silicates.")


fof( miloA1376, axiom,
	p__d__subclass(c__MetallicAlloy,c__Mixture)
).



% ($documentation MetallicAlloy EnglishLanguage "A &%Mixture of two or more &%Metals, and possibly 
% nonmetallic elements as well.  For example, steel is an alloy containing iron 
% and manganese.")


fof( miloA1377, axiom,
	(![ALLOY]: 
		(
			(
				p__d__instance(ALLOY,c__MetallicAlloy)
			)
			=>
			(
				(?[METAL1,METAL2]: 
					(
						(
							(
								p__d__instance(METAL1,c__Metal)
							)
						 &
							(
								p__d__instance(METAL2,c__Metal)
							)
						 &
							(
								~ (
									( METAL1 = METAL2 )
								)
							)
						 &
							(
								p__part(METAL1,ALLOY)
							)
						 &
							(
								p__part(METAL2,ALLOY)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1378, axiom,
	p__d__subclass(c__Steel,c__MetallicAlloy)
).



% ($documentation Steel EnglishLanguage "A &%MetallicAlloy made from &%Iron and other elements.")


fof( miloA1379, axiom,
	(![STEEL]: 
		(
			(
				p__d__instance(STEEL,c__Steel)
			)
			=>
			(
				(?[IRON]: 
					(
						(
							(
								p__d__instance(IRON,c__Iron)
							)
						 &
							(
								p__part(IRON,STEEL)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1380, axiom,
	p__d__subclass(c__Brass,c__MetallicAlloy)
).



% ($documentation Brass EnglishLanguage "A &%MetallicAlloy made from &%Copper and &%Zinc.")


fof( miloA1381, axiom,
	(![BRASS]: 
		(
			(
				p__d__instance(BRASS,c__Brass)
			)
			=>
			(
				(?[COPPER,ZINC]: 
					(
						(
							(
								p__d__instance(COPPER,c__Copper)
							)
						 &
							(
								p__d__instance(ZINC,c__Zinc)
							)
						 &
							(
								p__part(COPPER,BRASS)
							)
						 &
							(
								p__part(ZINC,BRASS)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1382, axiom,
	p__d__subclass(c__Powder,c__Substance)
).



% ($documentation Powder EnglishLanguage "Any &%Solid &%Substance which consists of loose, 
% identical, and very small particles.")


fof( miloA1383, axiom,
	(![POWDER]: 
		(
			(
				p__d__instance(POWDER,c__Powder)
			)
			=>
			(
				p__attribute(POWDER,c__Solid)
			)
		)
	)
).


fof( miloA1384, axiom,
	p__d__subclass(c__Fallout,c__Powder)
).



% ($documentation Fallout EnglishLanguage "Radioactive powder that is typically dispersed by 
% the explosion of a nuclear weapon.")


fof( miloA1385, axiom,
	(![POWDER]: 
		(
			(
				p__d__instance(POWDER,c__Fallout)
			)
			=>
			(
				p__capability(c__RadiatingNuclear,c__instrument,POWDER)
			)
		)
	)
).


fof( miloA1386, axiom,
	p__d__subclass(c__Fog,c__WaterCloud)
).



% ($documentation Fog EnglishLanguage "Any &%WaterCloud that is in contact with the ground.")


fof( miloA1387, axiom,
	(![FOG]: 
		(
			(
				p__d__instance(FOG,c__Fog)
			)
			=>
			(
				(?[LAND]: 
					(
						(
							(
								p__d__instance(LAND,c__LandArea)
							)
						 &
							(
								p__meetsSpatially(FOG,LAND)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1388, axiom,
	p__d__subclass(c__Ice,c__Water)
).



% ($documentation Ice EnglishLanguage "&%Water that has the &%PhysicalState of &%Solid.")


fof( miloA1389, axiom,
	(![ICE]: 
		(
			(
				p__d__instance(ICE,c__Object)
			)
			=>
			(
				(
					p__d__instance(ICE,c__Ice)
				)
				<=>
				(
					(
						(
							p__d__instance(ICE,c__Water)
						)
					 &
						(
							p__attribute(ICE,c__Solid)
						)
					)
				)
			)
		)
	)
).


fof( miloA1390, axiom,
	(![ICE,NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						p__d__instance(ICE,c__Ice)
					)
				 &
					(
						p__measure(ICE,f__MeasureFn2(NUMBER,c__CelsiusDegree))
					)
				)
			)
			=>
			(
				p__lessThanOrEqualTo(NUMBER,c__0)
			)
		)
	)
).


fof( miloA1391, axiom,
	p__d__subclass(c__Field,c__LandArea)
).



% ($documentation Field EnglishLanguage "A &%LandArea that has been cleared of &%BotanicalTrees.  
% Note that a &%Field is not necessarily used for the cultivation of crops and 
% that a &%Field may be very small, e.g. &%Lawn is a subclass of &%Field.")


fof( miloA1392, axiom,
	(![FIELD]: 
		(
			(
				p__d__instance(FIELD,c__Field)
			)
			=>
			(
				(![TREE]: 
					(
						(
							~ (
								p__d__instance(TREE,c__Physical)
							)
						 |
							~ (
								p__d__instance(TREE,c__BotanicalTree)
							)
						 |
							~ (
								p__located(TREE,FIELD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1393, axiom,
	p__d__subclass(c__Lawn,c__Field)
).



% ($documentation Lawn EnglishLanguage "A &%Field of cultivated and mowed &%Grass.")


fof( miloA1394, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__Lawn)
			)
			=>
			(
				(?[G]: 
					(
						(
							(
								p__d__instance(G,c__Grass)
							)
						 &
							(
								p__located(G,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1395, axiom,
	p__d__subclass(c__MilitaryFront,c__GeographicArea)
).



% ($documentation MilitaryFront EnglishLanguage "A &%GeographicArea along which opposing military 
% forces confront one another in a &%Battle.")


% 	(forall (?AREA ?TIME)
% 		(=> 
% 			(holdsDuring ?TIME ($instance ?AREA MilitaryFront))
% 			(exists (?BATTLE)
% 				(and 
% 					($instance ?BATTLE Battle)
% 					(eventLocated ?BATTLE ?AREA)
% 					(temporalPart ?TIME ?BATTLE)
% 				)
% 			)
% 		)
% 	)

fof( miloA1397, axiom,
	p__d__partition3(c__Region,c__GeographicArea,c__SpaceRegion)
).


% ($comment 
% ;; KJN: Moving this to Geography.kif as PlanetEarth is defined there, as well as
% ;; an area for Astronomical bodies
% ;;($subclass Meteorite Meteoroid)
% ;;(documentation Meteorite EnglishLanguage "Any &%Meteoroid that leaves traces on the surface 
% ;;of &%Earth.")
% ;;
% ;;(=>
% ;;  ($instance ?M Meteorite)
% ;;  (exists (?T)
% ;;    (holdsDuring ?T
% ;;      (meetsSpatially ?M PlanetEarth))))
% ;;
% ;; KJN: changing the definition of this based on Wikipedia      
% ;;($subclass Meteoroid AstronomicalBody)
% ;;(documentation Meteoroid EnglishLanguage "Any &%AstronomicalBody that breaks through the 
% ;;&%Atmosphere of &%Earth.")
% ;;(documentation Meteoroid EnglishLanguage "According to the International Astronomical
% ;;Union, a &%Meteoroid is a solid object moving in interplanetary space, of a size 
% ;;considerably smaller than an asteroid and considerably larger than an atom.")
% ;;
% ;; KJN: Changing this rule based on new linguistic definition
% ;;(=>
% ;;  ($instance ?M Meteoroid)
% ;;  (exists (?T)
% ;;    (holdsDuring ?T
% ;;      (meetsSpatially ?M EarthsAtmosphere))))
% ;;
% ;;(=>
% ;;  ($instance ?M Meteoroid)
% ;;  (exists (?R)
% ;;    (and
% ;;      ($instance ?R OuterSpaceRegion)
% ;;      (located ?M ?R))))
% )

fof( miloA1398, axiom,
	p__d__subclass(c__AtmosphericRegion,c__SpaceRegion)
).



% ($documentation AtmosphericRegion EnglishLanguage "&%AtmosphericRegion is the class of 
% all subregions of &%EarthsAtmosphere.")


% ($comment 
% ;; KJN: Moving this to Geography.kif to remove dependencies  
% ;;($subclass Creek BodyOfWater)
% ;;($subclass Creek StreamWaterArea)
% ;;($subclass Creek FreshWaterArea)
% ;;($disjoint Creek River)
% ;;(documentation Creek EnglishLanguage "Creek is the class of small streams of fresh 
% ;;water flowing through land, usually into a &%River.")
% ;;(=>
% ;;  (and
% ;;    ($instance ?C Creek)
% ;;    ($instance ?R River))
% ;;  (smaller ?C ?R))
% )

fof( miloA1399, axiom,
	p__d__subclass(c__StreamWaterArea,c__WaterArea)
).


fof( miloA1400, axiom,
	p__d__subclass(c__StreamWaterArea,c__FlowRegion)
).


fof( miloA1401, axiom,
	p__d__disjoint(c__StreamWaterArea,c__StaticWaterArea)
).



% ($documentation StreamWaterArea EnglishLanguage "A relatively narrow &%WaterArea where the 
% water flows constantly and in the same direction, e.g. a river, a stream, 
% etc.")


fof( miloA1402, axiom,
	p__d__subclass(c__StaticWaterArea,c__WaterArea)
).



% ($documentation StaticWaterArea EnglishLanguage "A &%WaterArea in which water does not flow 
% constantly or in the same direction, e.g. most lakes and ponds.")


fof( miloA1403, axiom,
	p__d__subclass(c__FlowRegion,c__Region)
).



% ($documentation FlowRegion EnglishLanguage "&%FlowRegion is a class of things whose 
% boundaries are relatively stable but whose constitutive &%material is continuously moving 
% through the region itself and being replaced by 
% other, similar material.  Each &%FlowRegion is constituted by a stream 
% of matter moving as a whole.  A &%FlowRegion may be liquid or gaseous.  
% A wind may be considered as a &%Process or as a &%FlowRegion, similarly 
% an OceanCurrent or a &%WaterWave.  The motion process associated with a 
% &%FlowRegion F is denoted by (&%FlowFn F).  Note that certain 
% properties belong to the &%FlowRegion itself (e.g., mass, length, volume, 
% temperature, and speed or velocity of the region moving as a whole), 
% while other properties of interest belong to the &%Motion of its 
% constitutive stuff (e.g., velocity, direction).  The motion of 
% a &%FlowRegion as a whole (e.g., &%JetStream moves within the atmosphere) 
% is distinguished from the motion of the &%pieces of stuff constituting the 
% &%FlowRegion.  See &%FlowFn and &%FlowRegionFn.")


fof( miloA1404, axiom,
	(![FR,FLUID]: 
		(
			(
				(
					(
						p__d__instance(FLUID,c__Object)
					)
				 &
					(
						p__d__instance(FR,c__FlowRegion)
					)
				 &
					(
						p__located(FLUID,FR)
					)
				)
			)
			=>
			(
				p__attribute(FLUID,c__Fluid)
			)
		)
	)
).


fof( miloA1405, axiom,
	p__d__subclass(c__SpaceRegion,c__Region)
).


fof( miloA1406, axiom,
	p__d__disjoint(c__SpaceRegion,c__GeographicArea)
).


fof( miloA1407, axiom,
	p__d__partition3(c__SpaceRegion,c__AtmosphericRegion,c__OuterSpaceRegion)
).



% ($documentation SpaceRegion EnglishLanguage "The class of all &%Regions which are not 
% &%GeographicAreas.")


fof( miloA1408, axiom,
	p__d__subclass(c__OuterSpaceRegion,c__SpaceRegion)
).



% ($documentation OuterSpaceRegion EnglishLanguage "The class of all &%Regions which are 
% neither &%GeographicAreas nor &%AtmosphericRegions.")


fof( miloA1409, axiom,
	p__d__subclass(c__StormFront,c__AtmosphericRegion)
).



% ($documentation StormFront EnglishLanguage "The &%Region where two or more unstable air 
% masses meet.")


fof( miloA1410, axiom,
	(![FRONT]: 
		(
			(
				p__d__instance(FRONT,c__StormFront)
			)
			=>
			(
				(?[AIR1,AIR2]: 
					(
						(
							(
								p__d__instance(AIR1,c__Air)
							)
						 &
							(
								p__d__instance(AIR2,c__Air)
							)
						 &
							(
								p__between(AIR1,FRONT,AIR2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1411, axiom,
	p__d__instance(c__Inside,c__PositionalAttribute)
).



% ($documentation Inside EnglishLanguage "&%Inside is a &%PositionalAttribute used to 
% describe the relative location of one object or region to another 
% region.")


% ($comment 
% ;; KJN: Removing this example to remove dependency to CountriesAndRegions.kif
% ;;For example, (&%orientation &%Virginia &%UnitedStates &%Inside).")
% )

% 	(forall (?INSIDE)
% 		(=> 
% 			($instance ?INSIDE Inside)
% 			(exists (?OBJECT)
% 				(forall (?THING)
% 					(=> 
% 						(located ?THING ?INSIDE)
% 						(exists (?PART)
% 							(and 
% 								(interiorPart ?PART ?OBJECT)
% 								(located ?THING ?PART)
% 							)
% 						)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA1413, axiom,
	p__d__instance(c__Outside,c__PositionalAttribute)
).


fof( miloA1414, axiom,
	p__contraryAttribute2(c__Inside,c__Outside)
).



% ($documentation Outside EnglishLanguage "&%Outside is a &%PositionalAttribute used to 
% describe the relative location of one object or region to another 
% region. ")


% ($comment 
% ;; KJN: Removing this example to remove dependency to CountriesAndRegions.kif
% ;;For example, (&%orientation &%Cuba &%UnitedStates &%Outside).")
% )

fof( miloA1415, axiom,
	(![OBJ,REGION]: 
		(
			(
				(
					(
						p__d__instance(REGION,c__Object)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__orientation(OBJ,REGION,c__Outside)
					)
				)
			)
			=>
			(
				p__d__instance(REGION,c__Region)
			)
		)
	)
).


fof( miloA1416, axiom,
	(![OBJ,REGION]: 
		(
			(
				(
					(
						p__d__instance(REGION,c__Object)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__orientation(OBJ,REGION,c__Inside)
					)
				)
			)
			=>
			(
				p__d__instance(REGION,c__Region)
			)
		)
	)
).


fof( miloA1417, axiom,
	(![OBJ,REGION]: 
		(
			(
				(
					(
						p__d__instance(REGION,c__Object)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				)
			)
			=>
			(
				(
					p__orientation(OBJ,REGION,c__Outside)
				)
				<=>
				(
					~ (
						p__partlyLocated(OBJ,REGION)
					)
				)
			)
		)
	)
).


fof( miloA1418, axiom,
	(![OBJ,REGION]: 
		(
			(
				(
					(
						p__d__instance(REGION,c__Object)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__part(OBJ,REGION)
					)
				)
			)
			=>
			(
				~ (
					p__orientation(OBJ,REGION,c__Outside)
				)
			)
		)
	)
).


fof( miloA1419, axiom,
	p__d__subclass(c__Outdoors,c__Region)
).



% ($documentation Outdoors EnglishLanguage "Any &%Region which is not enclosed by a &%Building 
% or part of a &%Building.")


fof( miloA1420, axiom,
	(![OUTDOORS]: 
		(
			(
				p__d__instance(OUTDOORS,c__Outdoors)
			)
			=>
			(
				(![BUILDING]: 
					(
						(
							~ (
								p__d__instance(BUILDING,c__Object)
							)
						 |
							~ (
								p__d__instance(BUILDING,c__Building)
							)
						 |
							~ (
								p__orientation(OUTDOORS,BUILDING,c__Inside)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1421, axiom,
	p__d__subclass(c__Indoors,c__Region)
).


fof( miloA1422, axiom,
	p__d__disjoint(c__Indoors,c__Outdoors)
).



% ($documentation Indoors EnglishLanguage "Any &%Region which is enclosed by a &%Building.")


fof( miloA1423, axiom,
	(![INDOORS]: 
		(
			(
				p__d__instance(INDOORS,c__Indoors)
			)
			=>
			(
				(?[BUILDING]: 
					(
						(
							(
								p__d__instance(BUILDING,c__Building)
							)
						 &
							(
								p__orientation(INDOORS,BUILDING,c__Inside)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1424, axiom,
	p__d__subclass(c__BiologicalSpecies,c__Class)
).



% ($documentation BiologicalSpecies EnglishLanguage "The &%Class of all biological species, i.e. 
% the class of all classes of &%Organism whose instances can interbreed.")


fof( miloA1425, axiom,
	(![SPECIES]: 
		(
			(
				p__d__instance(SPECIES,c__BiologicalSpecies)
			)
			=>
			(
				p__d__subclass(SPECIES,c__Organism)
			)
		)
	)
).


fof( miloA1426, axiom,
	p__d__subclass(c__Wood,c__Tissue)
).


fof( miloA1427, axiom,
	p__d__subclass(c__Wood,c__PlantSubstance)
).



% ($documentation Wood EnglishLanguage "&%Tissue that comprises the inner trunk of &%BotanicalTrees.  
% It is often used in constructing &%Buildings and other &%Artifacts.
% Wood is the principal substance making up a tree, and is distinguished from the
% bark, roots, flowers, seeds, fruit and leaves.") 


fof( miloA1428, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Wood)
			)
			=>
			(
				(?[CELL]: 
					(
						(
							(
								p__d__instance(CELL,c__Cellulose)
							)
						 &
							(
								p__part(CELL,X)
							)
						)
					)
				)
			)
		)
	)
).


% 	(relatedInternalConcept Wood WoodArtifact)

fof( miloA1430, axiom,
	p__d__subclass(c__WoodArtifact,c__Artifact)
).



% ($documentation WoodArtifact EnglishLanguage "&%Wood that has been cut (and perhaps treated) for 
% some purpose, e.g. &%Constructing or &%Combustion.  Note that this class covers 
% both lumber and firewood.")


fof( miloA1431, axiom,
	(![W]: 
		(
			(
				(
					(
						p__d__instance(W,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(W,c__WoodArtifact)
					)
				)
			)
			=>
			(
				p__material(c__Wood,W)
			)
		)
	)
).


fof( miloA1432, axiom,
	p__d__subclass(c__OakWood,c__WoodArtifact)
).



% ($documentation OakWood EnglishLanguage "Any &%WoodArtifact that is made from the &%Wood of an 
% oak tree.")


fof( miloA1433, axiom,
	p__d__subclass(c__Rubber,c__PlantSubstance)
).


fof( miloA1434, axiom,
	p__d__subclass(c__Rubber,c__BodySubstance)
).


fof( miloA1435, axiom,
	p__d__subclass(c__Rubber,c__Hydrocarbon)
).



% ($documentation Rubber EnglishLanguage "Natural rubber, as opposed to synthetic rubber
% which is a &%Plastic, is a product of the rubber tree, genus Hevea or Ficus. 
% It is the coagulated form of the milky juice secreted by these trees.  
% Rubber is essentially a polymer of isoprene. ")


fof( miloA1436, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__Rubber)
			)
			=>
			(
				(?[T]: 
					(
						(
							(
								p__d__instance(T,c__BotanicalTree)
							)
						 &
							(
								p__part(R,T)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1437, axiom,
	p__d__subclass(c__Plastic,c__Hydrocarbon)
).



% ($documentation Plastic EnglishLanguage "Any of a large set of hydrocarbon materials, in 
% the form of polymers, which are usually derived from &%Petroleum products.  
% Plastics have a tremendous variety of material properties including a wide 
% range of values for opacity, density, ductility etc. and are pervasive in 
% modern &%Manufacture (-ing).")


fof( miloA1438, axiom,
	p__d__subclass(c__Polypropylene,c__Plastic)
).



% ($documentation Polypropylene EnglishLanguage "Polypropylene (PP), also known as polypropene, is a thermoplastic polymer used in a wide variety of applications including packaging and labeling, textiles (e.g., ropes, thermal underwear and carpets), stationery, plastic parts and reusable containers of various types, laboratory equipment, loudspeakers, automotive components, and polymer banknotes. An addition polymer made from the monomer propylene, it is rugged and unusually resistant to many chemical solvents, bases and acids.(Wikipedia)")


fof( miloA1439, axiom,
	p__d__subclass(c__Polystyrene,c__Plastic)
).



% ($documentation Polystyrene EnglishLanguage "Polystyrene (PS) is a synthetic aromatic polymer made from the monomer styrene, a liquid petrochemical. Polystyrene can be rigid or foamed. General purpose polystyrene is clear, hard and brittle. It is a very inexpensive resin per unit weight. It is a rather poor barrier to oxygen and water vapor and has relatively low melting point. Polystyrene is one of the most widely used plastics, the scale of its production being several billion kilograms per year. Polystyrene can be naturally transparent, but can be colored with colorants. Uses include protective packaging (such as packing peanuts and CD and DVD cases), containers (such as 'clamshells'), lids, bottles, trays, tumblers, and disposable cutlery. As a thermoplastic polymer, polystyrene is in a solid (glassy) state at room temperature but flows if heated above about 100 °C, its glass transition temperature. It becomes rigid again when cooled. This temperature behavior is exploited for extrusion, and also for molding and vacuum forming, since it can be cast into molds with fine detail. It is very slow to biodegrade and therefore a focus of controversy, since it is often abundant as a form of litter in the outdoor environment, particularly along shores and waterways especially in its foam form. (Wikipedia)")


fof( miloA1440, axiom,
	p__d__subclass(c__Cellulose,c__PlantSubstance)
).


fof( miloA1441, axiom,
	p__d__subclass(c__Cellulose,c__Carbohydrate)
).



% ($documentation Cellulose EnglishLanguage "The main component of &%Plant &%Tissue.")


fof( miloA1442, axiom,
	p__d__subclass(c__Starch,c__Carbohydrate)
).



% ($documentation Starch EnglishLanguage "A complex &%Carbohydrate that is the main form in 
% which &%Carbohydrates are stored.")


fof( miloA1443, axiom,
	p__d__subclass(c__Sugar,c__Carbohydrate)
).



% ($documentation Sugar EnglishLanguage "A simple &%Carbohydrate that has a sweet taste and 
% consists mostly or entirely of sucrose.")


fof( miloA1444, axiom,
	p__d__subclass(c__Nectar,c__PlantSubstance)
).



% ($documentation Nectar EnglishLanguage "A sweet, sticky liquid that is produced by &%Plants 
% and that attracts Insects.")


fof( miloA1445, axiom,
	p__d__subclass(c__Medicine,c__BiologicallyActiveSubstance)
).



% ($documentation Medicine EnglishLanguage "Any &%BiologicallyActiveSubstance which has a 
% therapeutic effect under certain conditions.")


fof( miloA1446, axiom,
	(![M]: 
		(
			(
				p__d__instance(M,c__Medicine)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__d__instance(P,c__TherapeuticProcess)
							)
						 &
							(
								p__instrument(P,M)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1447, axiom,
	p__d__subclass(c__Stimulant,c__BiologicallyActiveSubstance)
).


fof( miloA1448, axiom,
	p__d__disjoint(c__Stimulant,c__Depressant)
).



% ($documentation Stimulant EnglishLanguage "Any &%BiologicallyActiveSubstance which has 
% the effect of stimulating the central nervous system, i.e. increasing 
% function or activity in the &%Brain or &%SpinalCord.")


fof( miloA1449, axiom,
	p__d__subclass(c__Depressant,c__BiologicallyActiveSubstance)
).



% ($documentation Depressant EnglishLanguage "Any &%BiologicallyActiveSubstance which has 
% the effect of depressing the central nervous system, i.e. decreasing 
% function or activity in the &%Brain or &%SpinalCord.")


fof( miloA1450, axiom,
	p__d__subclass(c__Opium,c__BiologicallyActiveSubstance)
).


fof( miloA1451, axiom,
	p__d__subclass(c__Opium,c__PlantSubstance)
).



% ($documentation Opium EnglishLanguage "A substance harvested from the seed capsules of the 
% opium poppy that contains various powerful alkaloids.")


fof( miloA1452, axiom,
	p__d__subclass(c__Opium,c__Depressant)
).


fof( miloA1453, axiom,
	(![O]: 
		(
			(
				p__d__instance(O,c__Opium)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Alkaloid)
							)
						 &
							(
								p__part(A,O)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1454, axiom,
	p__d__subclass(c__Grass,c__FloweringPlant)
).



% ($documentation Grass EnglishLanguage "&%FloweringPlants with green, narrow leaves that are 
% used for lawns and &%Fields. &%Grass includes any plant of the family 
% Gramineae, a widely distributed group of mostly annual and perennial 
% herbs.")


fof( miloA1455, axiom,
	p__d__subclass(c__Lilac,c__FloweringPlant)
).



% ($documentation Lilac EnglishLanguage "A &%FloweringPlant that has large clusters of 
% aromatic flowers.")


fof( miloA1456, axiom,
	p__d__subclass(c__Tobacco,c__FloweringPlant)
).



% ($documentation Tobacco EnglishLanguage "A &%FloweringPlant containing nicotine whose leaves 
% are dried and then smoked or ingested.")


fof( miloA1457, axiom,
	p__d__subclass(c__Lesion,c__AbnormalAnatomicalStructure)
).



% ($documentation Lesion EnglishLanguage "Any &%AbnormalAnatomicalStructure which is the result of 
% an Injuring and which is found on the surface of an &%Organ.")


fof( miloA1458, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__Lesion)
			)
			=>
			(
				(?[I]: 
					(
						(
							(
								p__d__instance(I,c__Injuring)
							)
						 &
							(
								p__result(I,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1459, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__Lesion)
			)
			=>
			(
				(?[S,O]: 
					(
						(
							(
								p__d__instance(S,c__SelfConnectedObject)
							)
						 &
							(
								p__surface(S,O)
							)
						 &
							(
								p__d__instance(O,c__Organ)
							)
						 &
							(
								p__located(L,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1460, axiom,
	p__d__subclass(c__Scar,c__AbnormalAnatomicalStructure)
).



% ($documentation Scar EnglishLanguage "Any &%AbnormalAnatomicalStructure which results from the 
% healing of a &%Lesion.")


% 	(forall (?S)
% 		(=> 
% 			($instance ?S Scar)
% 			(exists (?T ?OP ?L)
% 				(and 
% 					(temporalPart ?T (PastFn (WhenFn ?S)))
% 					(holdsDuring ?T ($instance ?L Lesion))
% 					($instance ?OP OrganOrTissueProcess)
% 					(patient ?OP ?L)
% 					(result ?OP ?S)
% 				)
% 			)
% 		)
% 	)

fof( miloA1462, axiom,
	p__d__subclass(c__Tumor,c__AbnormalAnatomicalStructure)
).



% ($documentation Tumor EnglishLanguage "Any &%AbnormalAnatomicalStructure which consists of a 
% mass of &%Tissue.  Note that this class covers both malignant (i.e. cancerous) 
% and benign tumors.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: Cell is subclass of CorpuscularObject, whereas Tissue is subclass of Substance (CorpuscularObject and Substance are disjoint)
% ;; From merge:
% ;;	(=>
% ;;		($instance ?PART AnatomicalStructure)
% ;;			(exists (?CELL)
% ;;				(and
% ;;					($instance ?CELL Cell)
% ;;					(part ?CELL ?PART))))
% ;;
% ;;(=>
% ;;   ($instance ?TUMOR Tumor)
% ;;   (forall (?PART)
% ;;      (=>
% ;;         (part ?PART ?TUMOR)
% ;;         ($instance ?PART Tissue))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA1463, axiom,
	(![TUMOR,PART]: 
		(
			(
				(
					(
						p__d__subclass(PART,c__Substance)
					)
				 &
					(
						p__d__instance(TUMOR,c__Tumor)
					)
				 &
					(
						p__material(PART,TUMOR)
					)
				)
			)
			=>
			(
				p__d__subclass(PART,c__Tissue)
			)
		)
	)
).


fof( miloA1464, axiom,
	p__d__subclass(c__Tendon,c__Tissue)
).


fof( miloA1465, axiom,
	p__d__subclass(c__Tendon,c__AnimalSubstance)
).



% ($documentation Tendon EnglishLanguage "&%Tissue that connects &%Muscle to &%Bone.")


fof( miloA1466, axiom,
	(![T]: 
		(
			(
				p__d__instance(T,c__Tendon)
			)
			=>
			(
				(?[M,B]: 
					(
						(
							(
								p__d__instance(M,c__Muscle)
							)
						 &
							(
								p__d__instance(B,c__Bone)
							)
						 &
							(
								p__connects(T,M,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1467, axiom,
	p__d__subclass(c__Sweat,c__AnimalSubstance)
).



% ($documentation Sweat EnglishLanguage "An &%AnimalSubstance that contains &%SodiumChloride 
% and is produced by the sweat glands.")


fof( miloA1468, axiom,
	(![SWEAT]: 
		(
			(
				p__d__instance(SWEAT,c__Sweat)
			)
			=>
			(
				(?[PART]: 
					(
						(
							(
								p__d__instance(PART,c__SodiumChloride)
							)
						 &
							(
								p__part(PART,SWEAT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1469, axiom,
	p__d__subclass(c__PlantLeaf,c__PlantAnatomicalStructure)
).


fof( miloA1470, axiom,
	p__d__subclass(c__PlantLeaf,c__Organ)
).



% ($documentation PlantLeaf EnglishLanguage "An &%Organ of &%Plants whose main purpose is 
% photosynthesis.")


fof( miloA1471, axiom,
	p__d__subclass(c__PlantBranch,c__PlantAnatomicalStructure)
).


fof( miloA1472, axiom,
	p__d__subclass(c__PlantBranch,c__BodyPart)
).



% ($documentation PlantBranch EnglishLanguage "The stem of a &%Plant or any shoot arising from 
% the stem of a &%Plant.")


fof( miloA1473, axiom,
	p__d__subclass(c__BotanicalTree,c__FloweringPlant)
).


fof( miloA1474, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__BotanicalTree)
			)
			=>
			(
				p__material(c__Wood,X)
			)
		)
	)
).



% ($documentation BotanicalTree EnglishLanguage "&%BotanicalTree is an imprecise term 
% for a perennial woody plant that is larger than a bush or shrub, 
% generally understood to describe a large growth having one main trunk 
% with few or no branches projecting from its base, a well-developed crown 
% of foliage, and a height at maturity of at least 12 feet.")


fof( miloA1475, axiom,
	p__d__subclass(c__TreeBranch,c__PlantBranch)
).



% ($documentation TreeBranch EnglishLanguage "Any &%PlantBranch which is part of a 
% &%BotanicalTree.")


fof( miloA1476, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__TreeBranch)
			)
			=>
			(
				(?[T]: 
					(
						(
							(
								p__d__instance(T,c__BotanicalTree)
							)
						 &
							(
								p__part(B,T)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1477, axiom,
	p__d__subclass(c__WillowTree,c__BotanicalTree)
).



% ($documentation WillowTree EnglishLanguage "A &%BotanicalTree of the genus &%Salix.")


fof( miloA1478, axiom,
	p__d__subclass(c__PlantRoot,c__PlantAnatomicalStructure)
).


fof( miloA1479, axiom,
	p__d__subclass(c__PlantRoot,c__Organ)
).



% ($documentation PlantRoot EnglishLanguage "An &%Organ of &%Plants whose main purpose is 
% twofold, viz. to absorb nutrients from the ground and to anchor the &%Plant 
% in place.")


fof( miloA1480, axiom,
	p__d__subclass(c__Flower,c__PlantAnatomicalStructure)
).


fof( miloA1481, axiom,
	p__d__subclass(c__Flower,c__Organ)
).



% ($documentation Flower EnglishLanguage "The reproductive organ of &%FloweringPlants.")


% 	(forall (?FLOWER)
% 		(=> 
% 			($instance ?FLOWER Flower)
% 			(exists (?PLANT ?TIME)
% 				(and 
% 					($instance ?PLANT FloweringPlant)
% 					(holdsDuring ?TIME (part ?FLOWER ?PLANT))
% 				)
% 			)
% 		)
% 	)

fof( miloA1483, axiom,
	p__d__subclass(c__Antibody,c__Protein)
).



% ($documentation Antibody EnglishLanguage "An immunoglobulin which is produced by the body 
% and which has the ability to neutralize &%Antigens.")


% 	(forall (?BODY ?DEST ?ANTI)
% 		(=> 
% 			($instance ?BODY Antibody)
% 			(hasPurpose ?BODY (exists ([|] ?DEST ([|] ?ANTI [])) (and ([|] ($instance ?DEST Destruction) ([|] (agent ?DEST ?BODY) ([|] (patient ?DEST ?ANTI) ([|] ($instance ?ANTI Antigen) [])))))))
% 		)
% 	)

fof( miloA1485, axiom,
	p__d__subclass(c__Antibiotic,c__BiologicallyActiveSubstance)
).



% ($documentation Antibiotic EnglishLanguage "A &%BiologicallyActiveSubstance than can kill 
% instances of &%Bacterium.")


fof( miloA1486, axiom,
	p__d__subclass(c__Antigen,c__BiologicallyActiveSubstance)
).



% ($documentation Antigen EnglishLanguage "Any &%BiologicallyActiveSubstance that has the 
% capacity to stimulate the production of &%Antibodies.")


fof( miloA1487, axiom,
	p__d__subclass(c__AntigenA,c__Antigen)
).



% ($documentation AntigenA EnglishLanguage "An &%Antigen that is carried in the red blood 
% cells of those with &%BloodTypeA.")


fof( miloA1488, axiom,
	p__d__subclass(c__AntigenB,c__Antigen)
).



% ($documentation AntigenB EnglishLanguage "An &%Antigen that is carried in the red blood 
% cells of those with &%BloodTypeB.")


fof( miloA1489, axiom,
	p__d__subclass(c__BloodCell,c__Cell)
).


fof( miloA1490, axiom,
	p__d__subclass(c__BloodCell,c__AnimalAnatomicalStructure)
).



% ($documentation BloodCell EnglishLanguage "A &%Cell that is normally present in &%Blood.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check:
% ;; - Parts of substance inherit the attributes of Substance, in particular PhysicalState
% ;; - Anything that has PhysicalState as attribute is Substance
% ;; - Parts of Substance can be CorpuscularObject
% ;; - CorpuscularObject and Substance are disjoint
% ;;
% ;;(=>
% ;;  ($instance ?C BloodCell)
% ;;  (exists (?B)
% ;;    (and
% ;;      ($instance ?B Blood)
% ;;      (part ?C ?B))))
% )

fof( miloA1491, axiom,
	p__d__subclass(c__RedBloodCell,c__BloodCell)
).



% ($documentation RedBloodCell EnglishLanguage "&%BloodCells that contain hemoglobin, lack a 
% &%CellNucleus, and carry &%Oxygen to the tissues of the body.")


fof( miloA1492, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__RedBloodCell)
			)
			=>
			(
				(![N]: 
					(
						(
							~ (
								p__d__instance(N,c__Object)
							)
						 |
							~ (
								p__d__instance(N,c__CellNucleus)
							)
						 |
							~ (
								p__part(N,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1493, axiom,
	p__d__subclass(c__WhiteBloodCell,c__BloodCell)
).



% ($documentation WhiteBloodCell EnglishLanguage "&%BloodCells that lack hemoglobin, contain a 
% &%CellNucleus, and have no color.")


fof( miloA1494, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__WhiteBloodCell)
			)
			=>
			(
				(?[N]: 
					(
						(
							(
								p__d__instance(N,c__CellNucleus)
							)
						 &
							(
								p__part(N,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1495, axiom,
	p__d__subclass(c__BloodTypeA,c__Blood)
).



% ($documentation BloodTypeA EnglishLanguage "The subclass of &%Blood that contains &%AntigenA 
% and does not contain &%AntigenB.")


fof( miloA1496, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__BloodTypeA)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__AntigenA)
							)
						 &
							(
								p__part(A,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1497, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__BloodTypeA)
			)
			=>
			(
				(![A]: 
					(
						(
							~ (
								p__d__instance(A,c__Object)
							)
						 |
							~ (
								p__d__instance(A,c__AntigenB)
							)
						 |
							~ (
								p__part(A,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1498, axiom,
	p__d__subclass(c__BloodTypeAB,c__Blood)
).



% ($documentation BloodTypeAB EnglishLanguage "The subclass of &%Blood that contains both 
% &%AntigenA and &%AntigenB.")


fof( miloA1499, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__BloodTypeAB)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__AntigenA)
							)
						 &
							(
								p__part(A,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1500, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__BloodTypeAB)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__AntigenB)
							)
						 &
							(
								p__part(A,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1501, axiom,
	p__d__subclass(c__BloodTypeB,c__Blood)
).



% ($documentation BloodTypeB EnglishLanguage "The subclass of &%Blood that contains &%AntigenB 
% and does not contain &%AntigenA.")


fof( miloA1502, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__BloodTypeB)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__AntigenB)
							)
						 &
							(
								p__part(A,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1503, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__BloodTypeB)
			)
			=>
			(
				(![A]: 
					(
						(
							~ (
								p__d__instance(A,c__Object)
							)
						 |
							~ (
								p__d__instance(A,c__AntigenA)
							)
						 |
							~ (
								p__part(A,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1504, axiom,
	p__d__subclass(c__BloodTypeO,c__Blood)
).



% ($documentation BloodTypeO EnglishLanguage "The subclass of &%Blood that contains neither 
% &%AntigenA nor &%AntigenB.")


fof( miloA1505, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__BloodTypeO)
			)
			=>
			(
				(![A]: 
					(
						(
							~ (
								p__d__instance(A,c__Object)
							)
						 |
							~ (
								p__d__instance(A,c__AntigenA)
							)
						 |
							~ (
								p__part(A,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1506, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__BloodTypeO)
			)
			=>
			(
				(![A]: 
					(
						(
							~ (
								p__d__instance(A,c__Object)
							)
						 |
							~ (
								p__d__instance(A,c__AntigenB)
							)
						 |
							~ (
								p__part(A,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1507, axiom,
	p__d__subclass(c__NerveCell,c__Cell)
).


fof( miloA1508, axiom,
	p__d__subclass(c__NerveCell,c__AnimalAnatomicalStructure)
).



% ($documentation NerveCell EnglishLanguage "The &%Cells that make up a &%NervousSystem.")


fof( miloA1509, axiom,
	(![N]: 
		(
			(
				p__d__instance(N,c__NerveCell)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__NervousSystem)
							)
						 &
							(
								p__part(N,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1510, axiom,
	p__d__subclass(c__LiquidBodySubstance,c__BodySubstance)
).



% ($documentation LiquidBodySubstance EnglishLanguage "Any &%BodySubstance which is &%Liquid 
% under normal circumstances.")


fof( miloA1511, axiom,
	(![SUBSTANCE]: 
		(
			(
				p__d__instance(SUBSTANCE,c__LiquidBodySubstance)
			)
			=>
			(
				p__attribute(SUBSTANCE,c__Liquid)
			)
		)
	)
).


fof( miloA1512, axiom,
	p__d__subclass(c__Serum,c__LiquidBodySubstance)
).


fof( miloA1513, axiom,
	p__d__disjoint(c__Serum,c__Blood)
).



% ($documentation Serum EnglishLanguage "Any &%LiquidBodySubstance other than &%Blood.")


fof( miloA1514, axiom,
	p__d__subclass(c__TearSubstance,c__LiquidBodySubstance)
).


fof( miloA1515, axiom,
	p__d__subclass(c__TearSubstance,c__SalineSolution)
).



% ($documentation TearSubstance EnglishLanguage "The class of &%SalineSolutions produced by 
% the lacrimal glands of the &%Eyes.")


fof( miloA1516, axiom,
	(![T]: 
		(
			(
				p__d__instance(T,c__TearSubstance)
			)
			=>
			(
				(?[P,E]: 
					(
						(
							(
								p__d__instance(P,c__Process)
							)
						 &
							(
								p__d__instance(E,c__Eye)
							)
						 &
							(
								p__instrument(P,E)
							)
						 &
							(
								p__result(P,T)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1517, axiom,
	p__d__subclass(c__Milk,c__LiquidBodySubstance)
).


fof( miloA1518, axiom,
	p__d__subclass(c__Milk,c__Beverage)
).



% ($documentation Milk EnglishLanguage "A nutritious &%BodySubstance produced by &%Mammals
% that has evolved to provide nourishment for their offspring during
% their initial period of life.")


fof( miloA1519, axiom,
	(![MILK]: 
		(
			(
				p__d__instance(MILK,c__Milk)
			)
			=>
			(
				(?[PROCESS,MAMMAL]: 
					(
						(
							(
								p__d__instance(PROCESS,c__Process)
							)
						 &
							(
								p__d__instance(MAMMAL,c__Mammal)
							)
						 &
							(
								p__attribute(MAMMAL,c__Female)
							)
						 &
							(
								p__instrument(PROCESS,MAMMAL)
							)
						 &
							(
								p__result(PROCESS,MILK)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1520, axiom,
	p__d__subclass(c__CellPart,c__BodyPart)
).



% ($documentation CellPart EnglishLanguage "&%part of a &%Cell")


fof( miloA1521, axiom,
	(![OBJ1]: 
		(
			(
				p__d__instance(OBJ1,c__CellPart)
			)
			=>
			(
				(?[CELL]: 
					(
						(
							(
								p__d__instance(CELL,c__Cell)
							)
						 &
							(
								p__properPart(OBJ1,CELL)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1522, axiom,
	p__d__subclass(c__CellNucleus,c__CellPart)
).


% ($comment 
% ;; KJN: Removing this as CellPart is already an OrganicObject         
% ;;($subclass CellNucleus OrganicObject)
% )


% ($documentation CellNucleus EnglishLanguage "The part of the &%Cell that contains DNA and 
% RNA.")


fof( miloA1523, axiom,
	(![NUCLEUS]: 
		(
			(
				p__d__instance(NUCLEUS,c__CellNucleus)
			)
			=>
			(
				(?[CELL]: 
					(
						(
							(
								p__d__instance(CELL,c__Cell)
							)
						 &
							(
								p__part(NUCLEUS,CELL)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1524, axiom,
	p__d__subclass(c__Tea,c__Beverage)
).


fof( miloA1525, axiom,
	p__d__subclass(c__Tea,c__PreparedFood)
).



% ($documentation Tea EnglishLanguage "A &%Beverage which is prepared by infusing tea leaves 
% into hot water.")


fof( miloA1526, axiom,
	p__d__subclass(c__AlcoholicBeverage,c__Beverage)
).


fof( miloA1527, axiom,
	p__d__subclass(c__AlcoholicBeverage,c__Depressant)
).



% ($documentation AlcoholicBeverage EnglishLanguage "Any &%Beverage that contains &%Alcohol.")


fof( miloA1528, axiom,
	(![BEVERAGE]: 
		(
			(
				p__d__instance(BEVERAGE,c__AlcoholicBeverage)
			)
			=>
			(
				(?[ALCOHOL]: 
					(
						(
							(
								p__d__instance(ALCOHOL,c__Alcohol)
							)
						 &
							(
								p__part(ALCOHOL,BEVERAGE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1529, axiom,
	p__d__subclass(c__Wine,c__AlcoholicBeverage)
).


% ($comment 
% ;; doc moved to Society.kif
% ;(documentation Wine EnglishLanguage "An &%AlcoholicBeverage that is prepared by fermenting  the juice of grapes.")
% )

fof( miloA1530, axiom,
	p__d__subclass(c__DistilledAlcoholicBeverage,c__AlcoholicBeverage)
).



% ($documentation DistilledAlcoholicBeverage EnglishLanguage "An &%AlcoholicBeverage that has 
% had some part of its &%Water content removed by distillation.  This class 
% covers drinks of unmixed, hard liquor.")


fof( miloA1531, axiom,
	(![BEVERAGE]: 
		(
			(
				p__d__instance(BEVERAGE,c__DistilledAlcoholicBeverage)
			)
			=>
			(
				(?[REMOVE,WATER]: 
					(
						(
							(
								p__d__instance(REMOVE,c__Removing)
							)
						 &
							(
								p__patient(REMOVE,WATER)
							)
						 &
							(
								p__d__instance(WATER,c__Water)
							)
						 &
							(
								p__origin(REMOVE,BEVERAGE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1532, axiom,
	p__d__subclass(c__Beer,c__AlcoholicBeverage)
).


% ($comment 
% ;; doc moved to Society.kif
% ;;(documentation Beer EnglishLanguage "An &%AlcoholicBeverage that is prepared by fermenting malt and hops.") 
% ;;
% ;; KJN: Moving this to Food.kif to remove dependency to Economy.kif
% ;;($subclass Brandy DistilledAlcoholicBeverage)
% ;;(documentation Brandy EnglishLanguage "A &%DistilledAlcoholicBeverage that is prepared by 
% ;;distilling &%Wine.")
% ;;(=>
% ;;  ($instance ?B Brandy)
% ;;  (exists (?D ?W)
% ;;    (and
% ;;      ($instance ?D Distilling)
% ;;      ($instance ?W Wine)
% ;;      (resource ?D ?W)
% ;;      (result ?D ?B))))
% )

fof( miloA1533, axiom,
	p__d__subclass(c__SpinalColumn,c__Organ)
).


fof( miloA1534, axiom,
	p__d__subclass(c__SpinalColumn,c__AnimalAnatomicalStructure)
).



% ($documentation SpinalColumn EnglishLanguage "A flexible column made out of bones called 
% vertebrae. The main function of the &%SpinalColumn is to protect the 
% spinal cord.") 


fof( miloA1535, axiom,
	(![VERT]: 
		(
			(
				p__d__instance(VERT,c__CorpuscularObject)
			)
			=>
			(
				(
					p__d__instance(VERT,c__Vertebrate)
				)
				<=>
				(
					(?[SPINE]: 
						(
							(
								(
									p__d__instance(VERT,c__Animal)
								)
							 &
								(
									p__component(SPINE,VERT)
								)
							 &
								(
									p__d__instance(SPINE,c__SpinalColumn)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1536, axiom,
	p__d__subclass(c__SpinalCord,c__Organ)
).



% ($documentation SpinalCord EnglishLanguage "A cord of nerves that carries impulses to 
% and from the &%Brain.  It is contained within the &%SpinalColumn.")


fof( miloA1537, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__SpinalCord)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__NervousSystem)
							)
						 &
							(
								p__part(C,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1538, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__SpinalCord)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__SpinalColumn)
							)
						 &
							(
								p__contains(S,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1539, axiom,
	p__d__subclass(c__Tail,c__AnimalAnatomicalStructure)
).



% ($documentation Tail EnglishLanguage "A &%BodyPart which extends from the rear of the 
% main body of some &%Vertebrates.")


fof( miloA1540, axiom,
	(![T]: 
		(
			(
				p__d__instance(T,c__Tail)
			)
			=>
			(
				(?[V]: 
					(
						(
							(
								p__d__instance(V,c__Vertebrate)
							)
						 &
							(
								p__part(T,V)
							)
						 &
							(
								~ (
									p__d__instance(V,c__Human)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1541, axiom,
	p__d__subclass(c__Wing,c__Limb)
).



% ($documentation Wing EnglishLanguage "Any &%Limb which is capable of being an 
% instrument in &%Flying.")


fof( miloA1542, axiom,
	p__d__subclass(c__Skin,c__BodyCovering)
).


fof( miloA1543, axiom,
	p__d__subclass(c__Skin,c__AnimalAnatomicalStructure)
).



% ($documentation Skin EnglishLanguage "A BodyCovering that comprises part of the surface 
% of &%Animals.")


fof( miloA1544, axiom,
	(![SKIN]: 
		(
			(
				p__d__instance(SKIN,c__Skin)
			)
			=>
			(
				(?[SURFACE,ANIMAL]: 
					(
						(
							(
								p__d__instance(SURFACE,c__SelfConnectedObject)
							)
						 &
							(
								p__surface(SURFACE,ANIMAL)
							)
						 &
							(
								p__part(SKIN,ANIMAL)
							)
						 &
							(
								p__d__instance(ANIMAL,c__Animal)
							)
						 &
							(
								p__overlapsSpatially(SKIN,SURFACE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1545, axiom,
	p__d__subclass(c__Retina,c__Organ)
).


fof( miloA1546, axiom,
	p__d__subclass(c__Retina,c__AnimalAnatomicalStructure)
).



% ($documentation Retina EnglishLanguage "A membrane that covers the &%Eye and converts 
% the image formed by the lens of the &%Eye into neurochemical impulses 
% which can be processed by the &%Brain.")


fof( miloA1547, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__Retina)
			)
			=>
			(
				(?[E]: 
					(
						(
							(
								p__d__instance(E,c__Eye)
							)
						 &
							(
								p__part(R,E)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1548, axiom,
	p__d__subclass(c__BronchialDuct,c__BodyVessel)
).


fof( miloA1549, axiom,
	p__d__subclass(c__BronchialDuct,c__AnimalAnatomicalStructure)
).



% ($documentation BronchialDuct EnglishLanguage "Any &%BodyVessel which is located in a 
% &%Lung and which carries oxygen from the trachea to the alveoli.")


fof( miloA1550, axiom,
	(![DUCT]: 
		(
			(
				p__d__instance(DUCT,c__BronchialDuct)
			)
			=>
			(
				(?[LUNG]: 
					(
						(
							(
								p__d__instance(LUNG,c__Lung)
							)
						 &
							(
								p__located(DUCT,LUNG)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1551, axiom,
	p__d__subclass(c__BloodVessel,c__BodyVessel)
).


fof( miloA1552, axiom,
	p__d__subclass(c__BloodVessel,c__AnimalAnatomicalStructure)
).



% ($documentation BloodVessel EnglishLanguage "Any &%BodyVessel which is used to circulate 
% &%Blood from one part of the body to another.")


fof( miloA1553, axiom,
	(![VESSEL]: 
		(
			(
				p__d__instance(VESSEL,c__BloodVessel)
			)
			=>
			(
				(?[BLOOD,TRANSFER]: 
					(
						(
							(
								p__d__instance(BLOOD,c__Blood)
							)
						 &
							(
								p__d__instance(TRANSFER,c__Transfer)
							)
						 &
							(
								p__patient(TRANSFER,BLOOD)
							)
						 &
							(
								p__instrument(TRANSFER,VESSEL)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1554, axiom,
	p__d__subclass(c__Alveolus,c__BodyVessel)
).


fof( miloA1555, axiom,
	p__d__subclass(c__Alveolus,c__AnimalAnatomicalStructure)
).



% ($documentation Alveolus EnglishLanguage "Tiny sacs in the &%Lung which absorb &%Oxygen 
% which is delivered to them by the &%BronchialDucts.")


fof( miloA1556, axiom,
	(![A]: 
		(
			(
				p__d__instance(A,c__Alveolus)
			)
			=>
			(
				(?[L]: 
					(
						(
							(
								p__d__instance(L,c__Lung)
							)
						 &
							(
								p__located(A,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1557, axiom,
	p__d__subclass(c__Artery,c__BloodVessel)
).



% ($documentation Artery EnglishLanguage "Any &%BloodVessel which transfers &%Blood from 
% the &%Heart to the extremities of the body.")


fof( miloA1558, axiom,
	(![ARTERY,BLOOD,TRANSFER]: 
		(
			(
				(
					(
						p__d__instance(ARTERY,c__Artery)
					)
				 &
					(
						p__d__instance(TRANSFER,c__Transfer)
					)
				 &
					(
						p__patient(TRANSFER,BLOOD)
					)
				 &
					(
						p__instrument(TRANSFER,ARTERY)
					)
				 &
					(
						p__d__instance(BLOOD,c__Blood)
					)
				)
			)
			=>
			(
				(?[HEART]: 
					(
						(
							(
								p__d__instance(HEART,c__Heart)
							)
						 &
							(
								p__origin(TRANSFER,HEART)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1559, axiom,
	p__d__subclass(c__Vein,c__BloodVessel)
).


% 	(relatedInternalConcept Vein Artery)


% ($documentation Vein EnglishLanguage "Any &%BloodVessel which transfers &%Blood from 
% the extremities of the body to the &%Heart.")


fof( miloA1561, axiom,
	(![V,B,T]: 
		(
			(
				(
					(
						p__d__instance(V,c__Vein)
					)
				 &
					(
						p__d__instance(T,c__Transfer)
					)
				 &
					(
						p__patient(T,B)
					)
				 &
					(
						p__instrument(T,V)
					)
				 &
					(
						p__d__instance(B,c__Blood)
					)
				)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__Heart)
							)
						 &
							(
								p__destination(T,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1562, axiom,
	p__d__subclass(c__PulmonaryArtery,c__Artery)
).



% ($documentation PulmonaryArtery EnglishLanguage "An &%Artery that carries &%Blood from 
% the &%Heart to a &%Lung.")


fof( miloA1563, axiom,
	(![ARTERY,BLOOD,TRANSFER]: 
		(
			(
				(
					(
						p__d__instance(ARTERY,c__PulmonaryArtery)
					)
				 &
					(
						p__d__instance(TRANSFER,c__Transfer)
					)
				 &
					(
						p__patient(TRANSFER,BLOOD)
					)
				 &
					(
						p__instrument(TRANSFER,ARTERY)
					)
				 &
					(
						p__d__instance(BLOOD,c__Blood)
					)
				)
			)
			=>
			(
				(?[LUNG]: 
					(
						(
							(
								p__d__instance(LUNG,c__Lung)
							)
						 &
							(
								p__destination(TRANSFER,LUNG)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1564, axiom,
	p__d__subclass(c__PulmonaryVein,c__Vein)
).



% ($documentation PulmonaryVein EnglishLanguage "A &%Vein that carries &%Blood from the 
% &%Lungs to the &%Heart.")


fof( miloA1565, axiom,
	(![B,V,T]: 
		(
			(
				(
					(
						p__d__instance(V,c__PulmonaryVein)
					)
				 &
					(
						p__d__instance(T,c__Transfer)
					)
				 &
					(
						p__patient(T,B)
					)
				 &
					(
						p__instrument(T,V)
					)
				 &
					(
						p__d__instance(B,c__Blood)
					)
				)
			)
			=>
			(
				(?[L,H,P]: 
					(
						(
							(
								p__d__instance(P,c__Object)
							)
						 &
							(
								p__d__instance(L,c__Lung)
							)
						 &
							(
								p__origin(T,L)
							)
						 &
							(
								p__part(V,P)
							)
						 &
							(
								p__part(L,P)
							)
						 &
							(
								p__part(H,P)
							)
						 &
							(
								p__d__instance(H,c__Heart)
							)
						 &
							(
								p__destination(T,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1566, axiom,
	p__d__subclass(c__Capillary,c__BloodVessel)
).



% ($documentation Capillary EnglishLanguage "A very small &%BloodVessel that connects arterioles 
% (very small &%Arteries) with venules (very small &%Veins).")


fof( miloA1567, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Capillary)
			)
			=>
			(
				(?[A,V]: 
					(
						(
							(
								p__d__instance(A,c__Artery)
							)
						 &
							(
								p__d__instance(V,c__Vein)
							)
						 &
							(
								p__connects(C,A,V)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1568, axiom,
	p__d__subclass(c__Lung,c__Organ)
).


fof( miloA1569, axiom,
	p__d__subclass(c__Lung,c__AnimalAnatomicalStructure)
).



% ($documentation Lung EnglishLanguage "A respiratory organ of &%Vertebrates.  Its function is 
% to furnish the blood with oxygen and to remove carbon dioxide.")


fof( miloA1570, axiom,
	(![ANIMAL]: 
		(
			(
				(
					(
						p__d__instance(ANIMAL,c__Object)
					)
				 &
					(
						p__capability(c__Breathing,c__experiencer,ANIMAL)
					)
				)
			)
			=>
			(
				(?[LUNG]: 
					(
						(
							(
								p__properPart(LUNG,ANIMAL)
							)
						 &
							(
								p__d__instance(LUNG,c__Lung)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1571, axiom,
	p__d__subclass(c__Kidney,c__Organ)
).


fof( miloA1572, axiom,
	p__d__subclass(c__Kidney,c__AnimalAnatomicalStructure)
).



% ($documentation Kidney EnglishLanguage "An &%Organ that separates urine from other 
% &%BodySubstances and passes it to the bladder.")


fof( miloA1573, axiom,
	p__d__subclass(c__Spleen,c__Organ)
).


fof( miloA1574, axiom,
	p__d__subclass(c__Spleen,c__AnimalAnatomicalStructure)
).



% ($documentation Spleen EnglishLanguage "An &%Organ on the left side of the body that produces 
% &%Cells that play a crucial role in immune response.")


fof( miloA1575, axiom,
	p__d__subclass(c__Inhaling,c__Breathing)
).



% ($documentation Inhaling EnglishLanguage "Any instance of &%Breathing where the breath is 
% taken into the &%Lungs.")


fof( miloA1576, axiom,
	(![I]: 
		(
			(
				p__d__instance(I,c__Inhaling)
			)
			=>
			(
				(?[L]: 
					(
						(
							(
								p__d__instance(L,c__Lung)
							)
						 &
							(
								p__destination(I,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1577, axiom,
	p__d__subclass(c__Exhaling,c__Breathing)
).



% ($documentation Exhaling EnglishLanguage "Any instance of &%Breathing where the breath is 
% expelled from the &%Lungs.")


fof( miloA1578, axiom,
	(![E]: 
		(
			(
				p__d__instance(E,c__Exhaling)
			)
			=>
			(
				(?[L]: 
					(
						(
							(
								p__d__instance(L,c__Lung)
							)
						 &
							(
								p__origin(E,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1579, axiom,
	p__d__subclass(c__Nostril,c__BodyVessel)
).


fof( miloA1580, axiom,
	p__d__subclass(c__Nostril,c__AnimalAnatomicalStructure)
).



% ($documentation Nostril EnglishLanguage "Either of two &%BodyVessels that run through the &%Nose 
% and connect it to the &%Throat.")


fof( miloA1581, axiom,
	(![NOSE]: 
		(
			(
				p__d__instance(NOSE,c__Nose)
			)
			=>
			(
				(?[N1,N2]: 
					(
						(
							(
								p__d__instance(N1,c__Nostril)
							)
						 &
							(
								p__d__instance(N2,c__Nostril)
							)
						 &
							(
								~ (
									( N1 = N2 )
								)
							)
						 &
							(
								p__connected(N1,NOSE)
							)
						 &
							(
								p__connected(N2,NOSE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1582, axiom,
	(![NOS]: 
		(
			(
				p__d__instance(NOS,c__Nostril)
			)
			=>
			(
				(?[N,T]: 
					(
						(
							(
								p__d__instance(N,c__Nose)
							)
						 &
							(
								p__d__instance(T,c__Throat)
							)
						 &
							(
								p__connects(NOS,N,T)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1583, axiom,
	p__d__subclass(c__Heart,c__Organ)
).


fof( miloA1584, axiom,
	p__d__subclass(c__Heart,c__AnimalAnatomicalStructure)
).



% ($documentation Heart EnglishLanguage "The &%Organ that pumps &%Blood throughout the body.")


fof( miloA1585, axiom,
	(![HEART]: 
		(
			(
				p__d__instance(HEART,c__Heart)
			)
			=>
			(
				(?[TRANSFER,BLOOD]: 
					(
						(
							(
								p__d__instance(TRANSFER,c__Transfer)
							)
						 &
							(
								p__d__instance(BLOOD,c__Blood)
							)
						 &
							(
								p__instrument(TRANSFER,HEART)
							)
						 &
							(
								p__patient(TRANSFER,BLOOD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1586, axiom,
	p__d__subclass(c__Liver,c__Organ)
).


fof( miloA1587, axiom,
	p__d__subclass(c__Liver,c__AnimalAnatomicalStructure)
).



% ($documentation Liver EnglishLanguage "An &%Organ that secretes bile and serves metabolic 
% functions.")


fof( miloA1588, axiom,
	p__d__subclass(c__Mouth,c__AnimalAnatomicalStructure)
).


fof( miloA1589, axiom,
	p__d__subclass(c__Mouth,c__BodyPart)
).



% ($documentation Mouth EnglishLanguage "Part of the &%Face, used for &%Ingesting Food 
% and &%Vocalizing.")


fof( miloA1590, axiom,
	(![MOUTH]: 
		(
			(
				p__d__instance(MOUTH,c__Mouth)
			)
			=>
			(
				(?[FACE]: 
					(
						(
							(
								p__d__instance(FACE,c__Face)
							)
						 &
							(
								p__part(MOUTH,FACE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1591, axiom,
	p__d__subclass(c__Tongue,c__AnimalAnatomicalStructure)
).


fof( miloA1592, axiom,
	p__d__subclass(c__Tongue,c__BodyPart)
).



% ($documentation Tongue EnglishLanguage "Part of the &%Mouth, used for &%Tasting Food, 
% &%Vocalizing, and the initial stage of &%Digesting.")


fof( miloA1593, axiom,
	(![TONGUE]: 
		(
			(
				p__d__instance(TONGUE,c__Tongue)
			)
			=>
			(
				(?[MOUTH]: 
					(
						(
							(
								p__d__instance(MOUTH,c__Mouth)
							)
						 &
							(
								p__part(TONGUE,MOUTH)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1594, axiom,
	p__d__subclass(c__NervousSystem,c__Organ)
).


fof( miloA1595, axiom,
	p__d__subclass(c__NervousSystem,c__AnimalAnatomicalStructure)
).



% ($documentation NervousSystem EnglishLanguage "A system in &%Vertebrates that is made up of 
% the &%Brain, the spinal cord, nerves, etc.")


fof( miloA1596, axiom,
	(![S,A]: 
		(
			(
				(
					(
						p__d__instance(S,c__NervousSystem)
					)
				 &
					(
						p__part(S,A)
					)
				 &
					(
						p__d__instance(A,c__Animal)
					)
				)
			)
			=>
			(
				p__d__instance(A,c__Vertebrate)
			)
		)
	)
).


fof( miloA1597, axiom,
	p__d__subclass(c__Hoof,c__AnimalAnatomicalStructure)
).


fof( miloA1598, axiom,
	p__d__subclass(c__Hoof,c__BodyPart)
).



% ($documentation Hoof EnglishLanguage "The hard end of the &%Foot of a &%HoofedMammal.")


fof( miloA1599, axiom,
	(![H]: 
		(
			(
				p__d__instance(H,c__Hoof)
			)
			=>
			(
				(?[F,A]: 
					(
						(
							(
								p__d__instance(F,c__Foot)
							)
						 &
							(
								p__d__instance(A,c__HoofedMammal)
							)
						 &
							(
								p__part(H,F)
							)
						 &
							(
								p__part(F,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1600, axiom,
	p__d__subclass(c__Tooth,c__Bone)
).



% ($documentation Tooth EnglishLanguage "Part of the &%Mouth, used for biting and chewing.")


fof( miloA1601, axiom,
	(![TOOTH]: 
		(
			(
				p__d__instance(TOOTH,c__Tooth)
			)
			=>
			(
				(?[MOUTH]: 
					(
						(
							(
								p__d__instance(MOUTH,c__Mouth)
							)
						 &
							(
								p__part(TOOTH,MOUTH)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1602, axiom,
	p__d__subclass(c__Skull,c__Bone)
).



% ($documentation Skull EnglishLanguage "The &%Bone that is found in the &%Heads of &%Vertebrates.")


fof( miloA1603, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Skull)
			)
			=>
			(
				(?[V,H]: 
					(
						(
							(
								p__d__instance(V,c__Vertebrate)
							)
						 &
							(
								p__d__instance(H,c__Head)
							)
						 &
							(
								p__part(H,V)
							)
						 &
							(
								p__part(S,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1604, axiom,
	p__d__subclass(c__Horn,c__Bone)
).



% ($documentation Horn EnglishLanguage "An outgrowth of &%Bone that is found on some 
% &%HoofedMammals.")


fof( miloA1605, axiom,
	(![H]: 
		(
			(
				p__d__instance(H,c__Horn)
			)
			=>
			(
				(?[M]: 
					(
						(
							(
								p__d__instance(M,c__HoofedMammal)
							)
						 &
							(
								p__part(H,M)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1606, axiom,
	p__d__subclass(c__Ivory,c__Bone)
).



% ($documentation Ivory EnglishLanguage "A very hard substance that makes up the tusks of 
% elephants and walruses.")


fof( miloA1607, axiom,
	p__d__subclass(c__AnimalShell,c__AnimalAnatomicalStructure)
).


fof( miloA1608, axiom,
	p__d__subclass(c__AnimalShell,c__BodyPart)
).



% ($documentation AnimalShell EnglishLanguage "A hard shell of calcium that serves as a 
% supporting structure for some &%Invertebrates.")


fof( miloA1609, axiom,
	(![S,A]: 
		(
			(
				(
					(
						p__d__instance(A,c__Animal)
					)
				 &
					(
						p__d__instance(S,c__AnimalShell)
					)
				 &
					(
						p__part(S,A)
					)
				)
			)
			=>
			(
				(
					p__d__instance(A,c__Invertebrate)
				 |
					p__d__instance(A,c__Reptile)
				)
			)
		)
	)
).


fof( miloA1610, axiom,
	p__d__subclass(c__Ossification,c__OrganOrTissueProcess)
).



% ($documentation Ossification EnglishLanguage "Any &%BiologicalProcess that results in the 
% formation of &%Bones.")


fof( miloA1611, axiom,
	(![O]: 
		(
			(
				p__d__instance(O,c__Ossification)
			)
			=>
			(
				(?[B]: 
					(
						(
							(
								p__d__instance(B,c__Bone)
							)
						 &
							(
								p__result(O,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1612, axiom,
	p__d__subclass(c__Chewing,c__BodyMotion)
).



% ($documentation Chewing EnglishLanguage "Breaking up or mashing Food with one's teeth.")


% 	(forall (?CHEW ?FOOD)
% 		(=> 
% 			(and 
% 				($instance ?CHEW Chewing)
% 				(resource ?CHEW ?FOOD)
% 			)
% 			($instance ?FOOD (FoodForFn Organism))
% 		)
% 	)

fof( miloA1614, axiom,
	(![CHEW,TOOTH]: 
		(
			(
				(
					(
						p__d__instance(TOOTH,c__Physical)
					)
				 &
					(
						p__d__instance(CHEW,c__Chewing)
					)
				 &
					(
						p__instrument(CHEW,TOOTH)
					)
				)
			)
			=>
			(
				p__d__instance(TOOTH,c__Tooth)
			)
		)
	)
).


fof( miloA1615, axiom,
	(![CHEW]: 
		(
			(
				p__d__instance(CHEW,c__Chewing)
			)
			=>
			(
				(?[EAT]: 
					(
						(
							(
								p__d__instance(EAT,c__Eating)
							)
						 &
							(
								p__subProcess(CHEW,EAT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1616, axiom,
	p__d__subclass(c__Feeding,c__Giving)
).



% ($documentation Feeding EnglishLanguage "Giving Food to a &%Human or &%Animal.")


% 	(forall (?F ?O)
% 		(=> 
% 			(and 
% 				($instance ?F Feeding)
% 				(patient ?F ?O)
% 			)
% 			($instance ?O (FoodForFn Animal))
% 		)
% 	)

fof( miloA1618, axiom,
	(![F,A]: 
		(
			(
				(
					(
						p__d__instance(F,c__Feeding)
					)
				 &
					(
						p__destination(F,A)
					)
				)
			)
			=>
			(
				p__d__instance(A,c__Animal)
			)
		)
	)
).


fof( miloA1619, axiom,
	p__d__subclass(c__Lip,c__AnimalAnatomicalStructure)
).


fof( miloA1620, axiom,
	p__d__subclass(c__Lip,c__BodyPart)
).



% ($documentation Lip EnglishLanguage "Folds of &%Tissue surrounding the mouths of some 
% &%Vertebrates.")


fof( miloA1621, axiom,
	(![LIP]: 
		(
			(
				p__d__instance(LIP,c__Lip)
			)
			=>
			(
				(?[MOUTH]: 
					(
						(
							(
								p__d__instance(MOUTH,c__Mouth)
							)
						 &
							(
								p__part(LIP,MOUTH)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1622, axiom,
	p__d__subclass(c__Kissing,c__Touching)
).



% ($documentation Kissing EnglishLanguage "The class of &%Touching processes where the lips 
% of two persons are brought into contact with each other.")


% 	(forall (?KISS)
% 		(=> 
% 			($instance ?KISS Kissing)
% 			(exists (?PERSON1 ?PERSON2 ?LIP1 ?LIP2)
% 				(and 
% 					(agent ?KISS ?PERSON1)
% 					(agent ?KISS ?PERSON2)
% 					($instance ?PERSON1 Human)
% 					($instance ?PERSON2 Human)
% 					(not 
% 						(equal ?PERSON1 ?PERSON2)
% 					)
% 					($instance ?LIP1 Lip)
% 					($instance ?LIP2 Lip)
% 					(part ?LIP1 ?PERSON1)
% 					(part ?LIP2 ?PERSON2)
% 					(holdsDuring (BeginFn (WhenFn ?KISS)) (not (meetsSpatially ?LIP1 ?LIP2)))
% 					(holdsDuring (EndFn (WhenFn ?KISS)) (meetsSpatially ?LIP1 ?LIP2))
% 				)
% 			)
% 		)
% 	)

fof( miloA1624, axiom,
	p__d__subclass(c__Licking,c__Touching)
).



% ($documentation Licking EnglishLanguage "The class of &%Touching processes where the &%Tongue 
% is brought into contact with something else.")


fof( miloA1625, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__Licking)
			)
			=>
			(
				(?[T]: 
					(
						(
							(
								p__d__instance(T,c__Tongue)
							)
						 &
							(
								p__instrument(L,T)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1626, axiom,
	p__d__subclass(c__Embracing,c__Touching)
).



% ($documentation Embracing EnglishLanguage "The class of &%Touching processes where one &%Human 
% hugs another one.")


fof( miloA1627, axiom,
	(![E]: 
		(
			(
				p__d__instance(E,c__Embracing)
			)
			=>
			(
				(?[P1,P2]: 
					(
						(
							(
								p__d__instance(P1,c__Human)
							)
						 &
							(
								p__d__instance(P2,c__Human)
							)
						 &
							(
								~ (
									( P1 = P2 )
								)
							)
						 &
							(
								p__agent(E,P1)
							)
						 &
							(
								p__agent(E,P2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1628, axiom,
	p__d__subclass(c__Skeleton,c__AnimalAnatomicalStructure)
).


fof( miloA1629, axiom,
	p__d__subclass(c__Skeleton,c__BodyPart)
).



% ($documentation Skeleton EnglishLanguage "The system of &%Bones that make up the supporting structure 
% of &%Vertebrates.")


fof( miloA1630, axiom,
	(![SKELETON,ANIMAL]: 
		(
			(
				(
					(
						p__d__instance(ANIMAL,c__Animal)
					)
				 &
					(
						p__d__instance(SKELETON,c__Skeleton)
					)
				 &
					(
						p__part(SKELETON,ANIMAL)
					)
				)
			)
			=>
			(
				p__d__instance(ANIMAL,c__Vertebrate)
			)
		)
	)
).


fof( miloA1631, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Skeleton)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Animal)
							)
						 &
							(
								p__interiorPart(S,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1632, axiom,
	p__d__subclass(c__Exoskeleton,c__AnimalAnatomicalStructure)
).


fof( miloA1633, axiom,
	p__d__subclass(c__Exoskeleton,c__BodyPart)
).



% ($documentation Exoskeleton EnglishLanguage "The system of &%Bones that are on the &%Outside of an organism and 
% make up the supporting structure of many &%Invertebrates.")


fof( miloA1634, axiom,
	(![SKELETON,ANIMAL]: 
		(
			(
				(
					(
						p__d__instance(ANIMAL,c__Animal)
					)
				 &
					(
						p__d__instance(SKELETON,c__Exoskeleton)
					)
				 &
					(
						p__part(SKELETON,ANIMAL)
					)
				)
			)
			=>
			(
				p__d__instance(ANIMAL,c__Invertebrate)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: Exoskeleton is subclass of CorpuscularObject and Bone is subclass of Substance, which are disjoint
% ;;
% ;;(<=>
% ;;   ($instance ?BONE Bone)
% ;;   (exists (?SKELETON)
% ;;      (and
% ;;        (or
% ;;           ($instance ?SKELETON Skeleton)
% ;;           ($instance ?SKELETON Exoskeleton))
% ;;         (part ?BONE ?SKELETON))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA1635, axiom,
	(![BONE]: 
		(
			(
				p__d__instance(BONE,c__Object)
			)
			=>
			(
				(
					p__d__instance(BONE,c__Bone)
				)
				<=>
				(
					(?[SKELETON]: 
						(
							(
								(
									p__d__instance(SKELETON,c__Object)
								)
							 &
								(
									(
										p__d__instance(SKELETON,c__Skeleton)
									 |
										p__d__instance(SKELETON,c__Exoskeleton)
									)
								)
							 &
								(
									p__properPart(BONE,SKELETON)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1636, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Exoskeleton)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Animal)
							)
						 &
							(
								p__part(X,A)
							)
						 &
							(
								(![PART]: 
									(
										(
											~ (
												p__d__instance(PART,c__Object)
											)
										 |
											~ (
												p__properPart(PART,A)
											)
										 |
											~ (
												p__orientation(PART,X,c__Outside)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1637, axiom,
	p__d__subclass(c__BodyJoint,c__BodyJunction)
).



% ($documentation BodyJoint EnglishLanguage "&%BodyJunctions where different parts of the same 
% &%Skeleton come together.")


fof( miloA1638, axiom,
	(![J]: 
		(
			(
				p__d__instance(J,c__BodyJoint)
			)
			=>
			(
				(?[S,P1,P2]: 
					(
						(
							(
								p__d__instance(P1,c__CorpuscularObject)
							)
						 &
							(
								p__d__instance(P2,c__CorpuscularObject)
							)
						 &
							(
								p__d__instance(S,c__Skeleton)
							)
						 &
							(
								p__component(P1,S)
							)
						 &
							(
								p__component(P2,S)
							)
						 &
							(
								p__component(J,S)
							)
						 &
							(
								p__connects(J,P1,P2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1639, axiom,
	p__d__subclass(c__Airway,c__Transitway)
).



% ($documentation Airway EnglishLanguage "The class of Transitways used to transport Air 
% to a location where it is absent or insufficient.")


fof( miloA1640, axiom,
	p__d__subclass(c__Throat,c__AnimalAnatomicalStructure)
).


fof( miloA1641, axiom,
	p__d__subclass(c__Throat,c__BodyVessel)
).


fof( miloA1642, axiom,
	p__d__subclass(c__Throat,c__Airway)
).



% ($documentation Throat EnglishLanguage "A &%BodyVessel which connects the &%Mouth to the 
% lungs and stomach.")


fof( miloA1643, axiom,
	(![THROAT]: 
		(
			(
				p__d__instance(THROAT,c__Throat)
			)
			=>
			(
				(?[MOUTH]: 
					(
						(
							(
								p__d__instance(MOUTH,c__Mouth)
							)
						 &
							(
								p__connected(THROAT,MOUTH)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1644, axiom,
	p__d__subclass(c__Hair,c__AnimalAnatomicalStructure)
).



% ($documentation Hair EnglishLanguage "A filament that covers part of the body of many 
% &%Mammals.")


% 	(forall (?HAIR)
% 		(=> 
% 			($instance ?HAIR Hair)
% 			(exists (?MAMMAL ?TIME)
% 				(and 
% 					($instance ?MAMMAL Mammal)
% 					(holdsDuring ?TIME (part ?HAIR ?MAMMAL))
% 				)
% 			)
% 		)
% 	)

fof( miloA1646, axiom,
	p__d__subclass(c__FacialHair,c__Hair)
).



% ($documentation FacialHair EnglishLanguage "&%Hair that grows on the &%Face.  This 
% class covers beards, mustaches, sideburns, midnight shadow, etc.")


fof( miloA1647, axiom,
	(![H]: 
		(
			(
				p__d__instance(H,c__FacialHair)
			)
			=>
			(
				(?[F]: 
					(
						(
							(
								p__d__instance(F,c__Face)
							)
						 &
							(
								p__part(H,F)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1648, axiom,
	p__d__subclass(c__HairRemoval,c__Removing)
).



% ($documentation HairRemoval EnglishLanguage "&%Removing (some or all) the &%Hair from the 
% body of an &%Animal.  Note that this covers shaving hair, cutting hair, 
% pulling hair out by the roots, etc.")


fof( miloA1649, axiom,
	(![REMOVE,HAIR]: 
		(
			(
				(
					(
						p__d__instance(HAIR,c__Object)
					)
				 &
					(
						p__d__instance(REMOVE,c__HairRemoval)
					)
				 &
					(
						p__resource(REMOVE,HAIR)
					)
				)
			)
			=>
			(
				p__d__instance(HAIR,c__Hair)
			)
		)
	)
).


fof( miloA1650, axiom,
	p__d__subclass(c__Peeling,c__Removing)
).



% ($documentation Peeling EnglishLanguage "Removing the &%Skin (or part of the &%Skin) from 
% an &%Organism.  Note that this class covers a large range of cases, including 
% peeling an orange, pelting an &%Animal, etc.")


fof( miloA1651, axiom,
	(![P,O]: 
		(
			(
				(
					(
						p__d__instance(O,c__Object)
					)
				 &
					(
						p__d__instance(P,c__Peeling)
					)
				 &
					(
						p__patient(P,O)
					)
				)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__Skin)
							)
						 &
							(
								p__part(O,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1652, axiom,
	p__d__subclass(c__Brain,c__Organ)
).


fof( miloA1653, axiom,
	p__d__subclass(c__Brain,c__AnimalAnatomicalStructure)
).



% ($documentation Brain EnglishLanguage "The seat of the central nervous system.")



% ($documentation intelligenceQuotient EnglishLanguage "(intelligenceQuotient ?PERSON ?NUMBER) 
% means that ?NUMBER is the I.Q. of ?PERSON.  The I.Q. of a person is the ratio 
% of their mental age (determined by a standardized test) divided by their 
% chronological age, multiplied by 100.")


fof( miloA1654, axiom,
	p__d__instance(c__intelligenceQuotient,c__BinaryPredicate)
).


fof( miloA1655, axiom,
	p__d__instance(c__intelligenceQuotient,c__SingleValuedRelation)
).


% 	($domain intelligenceQuotient 1 Human)

% 	($domain intelligenceQuotient 2 RationalNumber)

fof( miloA1658, axiom,
	p__d__subclass(c__Stomach,c__Organ)
).


fof( miloA1659, axiom,
	p__d__subclass(c__Stomach,c__AnimalAnatomicalStructure)
).



% ($documentation Stomach EnglishLanguage "A muscular sac that is the principal organ of 
% digestion.")


fof( miloA1660, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Stomach)
			)
			=>
			(
				p__capability(c__Digesting,c__instrument,S)
			)
		)
	)
).


fof( miloA1661, axiom,
	p__d__subclass(c__Intestine,c__BodyVessel)
).


fof( miloA1662, axiom,
	p__d__subclass(c__Intestine,c__AnimalAnatomicalStructure)
).



% ($documentation Intestine EnglishLanguage "A &%BodyVessel which connects the &%Stomach to 
% the anus and which is used in digesting Food.")


fof( miloA1663, axiom,
	(![I]: 
		(
			(
				p__d__instance(I,c__Intestine)
			)
			=>
			(
				p__capability(c__Digesting,c__instrument,I)
			)
		)
	)
).


fof( miloA1664, axiom,
	(![I]: 
		(
			(
				p__d__instance(I,c__Intestine)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__Stomach)
							)
						 &
							(
								p__connected(I,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1665, axiom,
	p__d__subclass(c__Hypothalamus,c__BodyPart)
).


fof( miloA1666, axiom,
	p__d__subclass(c__Hypothalamus,c__AnimalAnatomicalStructure)
).



% ($documentation Hypothalamus EnglishLanguage "The part of the &%Brain lying below the 
% thalamus that serves to regulate &%AutonomicProcesses.")


fof( miloA1667, axiom,
	(![HYPO]: 
		(
			(
				p__d__instance(HYPO,c__Hypothalamus)
			)
			=>
			(
				(?[BRAIN]: 
					(
						(
							(
								p__d__instance(BRAIN,c__Brain)
							)
						 &
							(
								p__part(HYPO,BRAIN)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1668, axiom,
	p__d__subclass(c__Eye,c__Organ)
).


fof( miloA1669, axiom,
	p__d__subclass(c__Eye,c__AnimalAnatomicalStructure)
).



% ($documentation Eye EnglishLanguage "The &%Organ of sight.")


fof( miloA1670, axiom,
	(![EYE]: 
		(
			(
				p__d__instance(EYE,c__Eye)
			)
			=>
			(
				p__capability(c__Seeing,c__instrument,EYE)
			)
		)
	)
).


fof( miloA1671, axiom,
	(![EYE]: 
		(
			(
				p__d__instance(EYE,c__Eye)
			)
			=>
			(
				(?[HEAD]: 
					(
						(
							(
								p__d__instance(HEAD,c__Head)
							)
						 &
							(
								p__part(EYE,HEAD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1672, axiom,
	p__d__subclass(c__Ear,c__Organ)
).


fof( miloA1673, axiom,
	p__d__subclass(c__Ear,c__AnimalAnatomicalStructure)
).



% ($documentation Ear EnglishLanguage "The &%Organ of hearing.")


fof( miloA1674, axiom,
	(![EAR]: 
		(
			(
				p__d__instance(EAR,c__Ear)
			)
			=>
			(
				p__capability(c__Hearing,c__instrument,EAR)
			)
		)
	)
).


fof( miloA1675, axiom,
	(![EAR]: 
		(
			(
				p__d__instance(EAR,c__Ear)
			)
			=>
			(
				(?[HEAD]: 
					(
						(
							(
								p__d__instance(HEAD,c__Head)
							)
						 &
							(
								p__part(EAR,HEAD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1676, axiom,
	p__d__subclass(c__Eyelid,c__Skin)
).



% ($documentation Eyelid EnglishLanguage "Folds of &%Skin that can be manipulated to 
% cover or uncover &%Eyes.")


fof( miloA1677, axiom,
	(![E]: 
		(
			(
				p__d__instance(E,c__Eyelid)
			)
			=>
			(
				p__capability(c__Covering,c__instrument,E)
			)
		)
	)
).


% 	(forall (?C ?EYE ?E ?P)
% 		(=> 
% 			($instance ?E Eyelid)
% 			(hasPurpose ?E (exists ([|] ?EYE ([|] ?P ([|] ?C []))) (and ([|] ($instance ?C Covering) ([|] ($instance ?C BodyMotion) ([|] ($instance ?P Human) ([|] (experiencer ?C ?P) ([|] (instrument ?C ?E) ([|] (patient ?C ?EYE) ([|] ($instance ?EYE Eye) ([|] (part ?EYE ?P) ([|] (part ?E ?P) []))))))))))))
% 		)
% 	)

fof( miloA1679, axiom,
	p__d__subclass(c__Nose,c__Organ)
).


fof( miloA1680, axiom,
	p__d__subclass(c__Nose,c__AnimalAnatomicalStructure)
).



% ($documentation Nose EnglishLanguage "The &%Organ of &%Smelling.")


fof( miloA1681, axiom,
	(![NOSE]: 
		(
			(
				p__d__instance(NOSE,c__Nose)
			)
			=>
			(
				p__capability(c__Smelling,c__instrument,NOSE)
			)
		)
	)
).


fof( miloA1682, axiom,
	(![NOSE]: 
		(
			(
				p__d__instance(NOSE,c__Nose)
			)
			=>
			(
				(?[FACE]: 
					(
						(
							(
								p__d__instance(FACE,c__Face)
							)
						 &
							(
								p__part(NOSE,FACE)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation secretesSubstance EnglishLanguage "(secretesSubstance ?OBJ ?STUFF) means 
% that the subclass of &%OrganicObject (either &%Organism or &%BodyPart) 
% ?OBJ produces the subclass of &%Substance ?STUFF.")


fof( miloA1683, axiom,
	p__d__instance(c__secretesSubstance,c__BinaryPredicate)
).


% 	($domainSubclass secretesSubstance 1 OrganicObject)

% 	($domainSubclass secretesSubstance 2 NaturalSubstance)

fof( miloA1686, axiom,
	(![O,S,I1]: 
		(
			(
				(
					(
						p__d__subclass(S,c__NaturalSubstance)
					)
				 &
					(
						p__d__subclass(O,c__OrganicObject)
					)
				 &
					(
						p__d__instance(I1,c__Object)
					)
				 &
					(
						p__secretesSubstance(O,S)
					)
				 &
					(
						p__d__instance(I1,O)
					)
				)
			)
			=>
			(
				(?[P,I2]: 
					(
						(
							(
								p__d__instance(P,c__BiologicalProcess)
							)
						 &
							(
								p__eventLocated(P,I1)
							)
						 &
							(
								p__result(P,I2)
							)
						 &
							(
								p__d__instance(I2,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1687, axiom,
	p__d__subclass(c__ThyroidGland,c__Gland)
).



% ($documentation ThyroidGland EnglishLanguage "A &%Gland in the neck that produces 
% &%HormoneTSH, which regulates body weight, metabolic rate, etc.")


fof( miloA1688, axiom,
	p__d__subclass(c__ThyroidHormone,c__Hormone)
).



% ($documentation ThyroidHormone EnglishLanguage "A &%Hormone secreted by the &%ThyroidGland.")


fof( miloA1689, axiom,
	p__d__subclass(c__PituitaryGland,c__Gland)
).



% ($documentation PituitaryGland EnglishLanguage "The main &%Gland of the endocrine system.")


fof( miloA1690, axiom,
	p__d__subclass(c__HormoneTSH,c__Hormone)
).



% ($documentation HormoneTSH EnglishLanguage "A &%Hormone secreted by the &%ThyroidGland.")


fof( miloA1691, axiom,
	(![HORMONE]: 
		(
			(
				p__d__instance(HORMONE,c__HormoneTSH)
			)
			=>
			(
				(?[PROC,GLAND]: 
					(
						(
							(
								p__d__instance(PROC,c__Process)
							)
						 &
							(
								p__d__instance(GLAND,c__ThyroidGland)
							)
						 &
							(
								p__instrument(PROC,GLAND)
							)
						 &
							(
								p__result(PROC,HORMONE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1692, axiom,
	p__d__subclass(c__Pancreas,c__Gland)
).



% ($documentation Pancreas EnglishLanguage "A large &%Gland that secretes &%Insulin and other 
% substances.")


% 	(forall (?P)
% 		(=> 
% 			($instance ?P Pancreas)
% 			(secretesSubstance ?P Insulin)
% 		)
% 	)

fof( miloA1694, axiom,
	p__d__subclass(c__Insulin,c__Hormone)
).



% ($documentation Insulin EnglishLanguage "A &%Hormone secreted by the &%Pancreas that is used 
% to regulate the metabolism of &%Carbohydrates.")


fof( miloA1695, axiom,
	p__d__subclass(c__Arm,c__Limb)
).



% ($documentation Arm EnglishLanguage "The upper &%Limbs of a &%Primate.")


fof( miloA1696, axiom,
	(![ARM]: 
		(
			(
				p__d__instance(ARM,c__Arm)
			)
			=>
			(
				(?[PRIMATE]: 
					(
						(
							(
								p__d__instance(PRIMATE,c__Primate)
							)
						 &
							(
								p__part(ARM,PRIMATE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1697, axiom,
	p__d__subclass(c__Hand,c__AnimalAnatomicalStructure)
).


fof( miloA1698, axiom,
	p__d__subclass(c__Hand,c__BodyPart)
).



% ($documentation Hand EnglishLanguage "The grasping, fingered part of an upper limb of a 
% &%Primate.")


fof( miloA1699, axiom,
	(![HAND]: 
		(
			(
				p__d__instance(HAND,c__Hand)
			)
			=>
			(
				(?[ARM]: 
					(
						(
							(
								p__d__instance(ARM,c__Arm)
							)
						 &
							(
								p__part(HAND,ARM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1700, axiom,
	p__d__subclass(c__DigitAppendage,c__AnimalAnatomicalStructure)
).


fof( miloA1701, axiom,
	p__d__subclass(c__DigitAppendage,c__BodyPart)
).



% ($documentation DigitAppendage EnglishLanguage "Any of the extremities of &%Limbs that are 
% found in the higer &%Vertebrates and the &%Amphibians.")


fof( miloA1702, axiom,
	(![DIGIT]: 
		(
			(
				p__d__instance(DIGIT,c__DigitAppendage)
			)
			=>
			(
				(?[LIMB]: 
					(
						(
							(
								p__d__instance(LIMB,c__Limb)
							)
						 &
							(
								p__part(DIGIT,LIMB)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1703, axiom,
	p__d__subclass(c__Toad,c__Amphibian)
).



% ($documentation Toad EnglishLanguage "An &%Amphibian that lacks a &%Tail and lives at least 
% partially outside of water.")


fof( miloA1704, axiom,
	(![A]: 
		(
			(
				p__d__instance(A,c__Toad)
			)
			=>
			(
				(![T]: 
					(
						(
							~ (
								p__d__instance(T,c__Object)
							)
						 |
							~ (
								p__d__instance(T,c__Tail)
							)
						 |
							~ (
								p__part(T,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1705, axiom,
	p__initialPart(c__DigitAppendage,c__Limb)
).


fof( miloA1706, axiom,
	p__d__subclass(c__Finger,c__DigitAppendage)
).



% ($documentation Finger EnglishLanguage "The five extremities of &%Hands.")


fof( miloA1707, axiom,
	(![FINGER]: 
		(
			(
				p__d__instance(FINGER,c__Finger)
			)
			=>
			(
				(?[HAND]: 
					(
						(
							(
								p__d__instance(HAND,c__Hand)
							)
						 &
							(
								p__part(FINGER,HAND)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1708, axiom,
	p__d__subclass(c__Thumb,c__Finger)
).



% ($documentation Thumb EnglishLanguage "The thick, short &%Finger of each &%Hand.")


fof( miloA1709, axiom,
	p__d__subclass(c__NailDigit,c__AnimalAnatomicalStructure)
).



% ($documentation NailDigit EnglishLanguage "Any of the horny structures which are found 
% on the &%DigitAppendages of &%Primates and other &%Animals.  This includes
% fingernails and toenails.")


fof( miloA1710, axiom,
	(![N]: 
		(
			(
				p__d__instance(N,c__NailDigit)
			)
			=>
			(
				(?[D]: 
					(
						(
							(
								p__d__instance(D,c__DigitAppendage)
							)
						 &
							(
								p__part(N,D)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1711, axiom,
	p__d__subclass(c__Fingerprint,c__ShapeAttribute)
).


fof( miloA1712, axiom,
	p__d__subclass(c__Fingerprint,c__BiologicalAttribute)
).



% ($documentation Fingerprint EnglishLanguage "That pattern of arches, loops, and whorls that mark 
% the imprint of a &%Finger.")


fof( miloA1713, axiom,
	(![P,O]: 
		(
			(
				(
					(
						p__d__instance(O,c__Object)
					)
				 &
					(
						p__attribute(O,P)
					)
				 &
					(
						p__d__instance(P,c__Fingerprint)
					)
				 &
					(
						~ (
							p__d__instance(O,c__Finger)
						)
					)
				)
			)
			=>
			(
				(?[PR,F]: 
					(
						(
							(
								p__d__instance(PR,c__Process)
							)
						 &
							(
								p__instrument(PR,F)
							)
						 &
							(
								p__d__instance(F,c__Finger)
							)
						 &
							(
								p__attribute(F,P)
							)
						 &
							(
								p__patient(PR,O)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1714, axiom,
	p__d__subclass(c__Limb,c__AnimalAnatomicalStructure)
).


fof( miloA1715, axiom,
	p__d__subclass(c__Limb,c__BodyPart)
).



% ($documentation Limb EnglishLanguage "Any of the limbs of a &%Vertebrate.
% Animal Appendages with joints that are used for movement 
% and grasping.")


fof( miloA1716, axiom,
	(![LIMB]: 
		(
			(
				p__d__instance(LIMB,c__Limb)
			)
			=>
			(
				(?[VERTEBRATE]: 
					(
						(
							(
								p__d__instance(VERTEBRATE,c__Vertebrate)
							)
						 &
							(
								p__part(LIMB,VERTEBRATE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1717, axiom,
	p__d__subclass(c__Snake,c__Reptile)
).



% ($documentation Snake EnglishLanguage "A long and narrow &%Reptile which lacks &%Limbs.")


fof( miloA1718, axiom,
	(![SNAKE]: 
		(
			(
				p__d__instance(SNAKE,c__Snake)
			)
			=>
			(
				(![LIMB]: 
					(
						(
							~ (
								p__d__instance(LIMB,c__Object)
							)
						 |
							~ (
								p__d__instance(LIMB,c__Limb)
							)
						 |
							~ (
								p__part(LIMB,SNAKE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1719, axiom,
	p__d__subclass(c__Rattlesnake,c__Snake)
).



% ($documentation Rattlesnake EnglishLanguage "A subclass of &%Snake which derives its name 
% from the fact that it can manipulate its tail in such a way as to produce 
% a sound like that of a rattle.")


fof( miloA1720, axiom,
	p__d__subclass(c__ConstrictorSnake,c__Snake)
).



% ($documentation ConstrictorSnake EnglishLanguage "A &%Snake that lacks venom and kills its 
% prey by crushing it to death.")


fof( miloA1721, axiom,
	p__d__subclass(c__AntInsect,c__Insect)
).



% ($documentation AntInsect EnglishLanguage "A colony &%Insect of three types:  males, 
% &%QueenInsect, and worker ants.")


fof( miloA1722, axiom,
	p__d__subclass(c__Anaconda,c__ConstrictorSnake)
).



% ($documentation Anaconda EnglishLanguage "A very large Boa that is found in South America.")


fof( miloA1723, axiom,
	p__d__subclass(c__Bee,c__Insect)
).



% ($documentation Bee EnglishLanguage "A hairy &%Insect, some species of which produce honey 
% and/or sting.")


fof( miloA1724, axiom,
	p__d__subclass(c__BumbleBee,c__Bee)
).



% ($documentation BumbleBee EnglishLanguage "A large &%Bee which lacks a stinger.")


fof( miloA1725, axiom,
	p__d__subclass(c__FlyInsect,c__Insect)
).



% ($documentation FlyInsect EnglishLanguage "&%Insects with &%Wings and two &%Limbs.")


fof( miloA1726, axiom,
	p__d__subclass(c__Grasshopper,c__Insect)
).



% ($documentation Grasshopper EnglishLanguage "&%Insects with enormous legs that are used for 
% jumping.")


fof( miloA1727, axiom,
	p__d__subclass(c__Moth,c__Insect)
).



% ($documentation Moth EnglishLanguage "Nocturnal &%Insect with a large body and antennae.")


fof( miloA1728, axiom,
	p__d__subclass(c__QueenInsect,c__Insect)
).


fof( miloA1729, axiom,
	p__d__disjoint(c__QueenInsect,c__WorkerInsect)
).



% ($documentation QueenInsect EnglishLanguage "A &%Female &%Insect which is the sole member of 
% her colony with the capability to reproduce.") 


fof( miloA1730, axiom,
	(![INSECT]: 
		(
			(
				p__d__instance(INSECT,c__QueenInsect)
			)
			=>
			(
				(
					(
						p__attribute(INSECT,c__Female)
					)
				 &
					(
						p__capability(c__Replication,c__agent,INSECT)
					)
				)
			)
		)
	)
).


fof( miloA1731, axiom,
	(![INSECT]: 
		(
			(
				p__d__instance(INSECT,c__QueenInsect)
			)
			=>
			(
				(?[GROUP]: 
					(
						(
							(
								p__d__instance(GROUP,c__Group)
							)
						 &
							(
								p__member(INSECT,GROUP)
							)
						 &
							(
								(![MEMBER]: 
									(
										(
											~ (
												p__d__instance(MEMBER,c__SelfConnectedObject)
											)
										 |
											~ (
												p__member(MEMBER,GROUP)
											)
										 |
											~ (
												p__capability(c__Replication,c__agent,MEMBER)
											)
										 |
											( MEMBER = INSECT )
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1732, axiom,
	p__d__subclass(c__WorkerInsect,c__Insect)
).



% ($documentation WorkerInsect EnglishLanguage "Sterile members of an &%Insect colony which 
% are responsible for locating food and caring for eggs, larvae, etc.")


% ($comment 
% ;; a structure in animals that is similar to a human leg and used for locomotion. 
% )

fof( miloA1733, axiom,
	p__d__subclass(c__Leg,c__Limb)
).



% ($documentation Leg EnglishLanguage "The lower &%Limbs of &%Animals, used for locomotion.")


fof( miloA1734, axiom,
	(![LEG]: 
		(
			(
				p__d__instance(LEG,c__Leg)
			)
			=>
			(
				(?[ANIMAL]: 
					(
						(
							(
								p__d__instance(ANIMAL,c__Animal)
							)
						 &
							(
								p__part(LEG,ANIMAL)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1735, axiom,
	p__d__subclass(c__Foot,c__AnimalAnatomicalStructure)
).


fof( miloA1736, axiom,
	p__d__subclass(c__Foot,c__BodyPart)
).



% ($documentation Foot EnglishLanguage "The lower part of a &%Limb, the part which makes contact 
% with the ground in locomotion of the &%Animal.")


fof( miloA1737, axiom,
	(![FOOT]: 
		(
			(
				p__d__instance(FOOT,c__Foot)
			)
			=>
			(
				(?[LIMB]: 
					(
						(
							(
								p__d__instance(LIMB,c__Leg)
							)
						 &
							(
								p__part(FOOT,LIMB)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1738, axiom,
	p__d__subclass(c__Ankle,c__BodyJoint)
).



% ($documentation Ankle EnglishLanguage "The joint in the &%Leg that connects the tibia and the 
% fibula to the talus.")


fof( miloA1739, axiom,
	(![A]: 
		(
			(
				p__d__instance(A,c__Ankle)
			)
			=>
			(
				(?[L]: 
					(
						(
							(
								p__d__instance(L,c__Leg)
							)
						 &
							(
								p__part(A,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1740, axiom,
	p__d__subclass(c__Elbow,c__BodyJoint)
).



% ($documentation Elbow EnglishLanguage "The joint in the &%Arm connecting the forearm and the 
% upper arm.")


fof( miloA1741, axiom,
	(![E]: 
		(
			(
				p__d__instance(E,c__Elbow)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Arm)
							)
						 &
							(
								p__part(E,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1742, axiom,
	p__d__subclass(c__Wrist,c__BodyJoint)
).



% ($documentation Wrist EnglishLanguage "The joint in the &%Arm connecting the radius and carpal 
% bones.")


fof( miloA1743, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__Wrist)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Arm)
							)
						 &
							(
								p__part(W,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1744, axiom,
	p__d__subclass(c__Toe,c__AnimalAnatomicalStructure)
).


fof( miloA1745, axiom,
	p__d__subclass(c__Toe,c__BodyPart)
).


fof( miloA1746, axiom,
	p__d__subclass(c__Toe,c__DigitAppendage)
).



% ($documentation Toe EnglishLanguage "The five extremities of a &%Foot.")


fof( miloA1747, axiom,
	(![TOE]: 
		(
			(
				p__d__instance(TOE,c__Toe)
			)
			=>
			(
				(?[FOOT]: 
					(
						(
							(
								p__d__instance(FOOT,c__Foot)
							)
						 &
							(
								p__part(TOE,FOOT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1748, axiom,
	p__d__subclass(c__Knee,c__BodyJoint)
).



% ($documentation Knee EnglishLanguage "The joint in the &%Leg connecting the tibia and fibula 
% with the femur.")


fof( miloA1749, axiom,
	(![KNEE]: 
		(
			(
				p__d__instance(KNEE,c__Knee)
			)
			=>
			(
				(?[LEG]: 
					(
						(
							(
								p__d__instance(LEG,c__Leg)
							)
						 &
							(
								p__part(KNEE,LEG)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1750, axiom,
	p__d__subclass(c__Shoulder,c__AnimalAnatomicalStructure)
).


fof( miloA1751, axiom,
	p__d__subclass(c__Shoulder,c__BodyPart)
).



% ($documentation Shoulder EnglishLanguage "The part of a &%Primate between the &%Arm and 
% the neck.")


fof( miloA1752, axiom,
	(![SHOULDER]: 
		(
			(
				p__d__instance(SHOULDER,c__Shoulder)
			)
			=>
			(
				(?[PRIMATE]: 
					(
						(
							(
								p__d__instance(PRIMATE,c__Primate)
							)
						 &
							(
								p__part(SHOULDER,PRIMATE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1753, axiom,
	p__d__subclass(c__Knuckle,c__BodyJoint)
).



% ($documentation Knuckle EnglishLanguage "Any joint in a &%Finger.")


fof( miloA1754, axiom,
	(![KNUCKLE]: 
		(
			(
				p__d__instance(KNUCKLE,c__Knuckle)
			)
			=>
			(
				(?[FINGER]: 
					(
						(
							(
								p__d__instance(FINGER,c__Finger)
							)
						 &
							(
								p__part(KNUCKLE,FINGER)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1755, axiom,
	p__d__subclass(c__Torso,c__AnimalAnatomicalStructure)
).


fof( miloA1756, axiom,
	p__d__subclass(c__Torso,c__BodyPart)
).



% ($documentation Torso EnglishLanguage "The body of a &%Primate excluding its &%Limbs.")


fof( miloA1757, axiom,
	(![TORSO,LIMB]: 
		(
			(
				(
					(
						p__d__instance(TORSO,c__Torso)
					)
				 &
					(
						p__d__instance(LIMB,c__Limb)
					)
				)
			)
			=>
			(
				~ (
					p__overlapsSpatially(TORSO,LIMB)
				)
			)
		)
	)
).


fof( miloA1758, axiom,
	p__d__subclass(c__Breast,c__AnimalAnatomicalStructure)
).


fof( miloA1759, axiom,
	p__d__subclass(c__Breast,c__Organ)
).



% ($documentation Breast EnglishLanguage "The paired &%Organs which are part of the chests 
% of &%Primates.")


fof( miloA1760, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Breast)
			)
			=>
			(
				(?[T]: 
					(
						(
							(
								p__d__instance(T,c__Torso)
							)
						 &
							(
								p__part(B,f__FrontFn1(T))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1761, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Breast)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__d__instance(P,c__Primate)
							)
						 &
							(
								p__part(B,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1762, axiom,
	p__d__subclass(c__Head,c__AnimalAnatomicalStructure)
).


fof( miloA1763, axiom,
	p__d__subclass(c__Head,c__BodyPart)
).



% ($documentation Head EnglishLanguage "The part of the body containing the sense organs and 
% the brain.")


fof( miloA1764, axiom,
	p__d__subclass(c__Neck,c__AnimalAnatomicalStructure)
).


fof( miloA1765, axiom,
	p__d__subclass(c__Neck,c__BodyPart)
).



% ($documentation Neck EnglishLanguage "The part of the body that connects the &%Head to the 
% rest of the body.")


fof( miloA1766, axiom,
	(![NECK]: 
		(
			(
				p__d__instance(NECK,c__Neck)
			)
			=>
			(
				(?[HEAD]: 
					(
						(
							(
								p__d__instance(HEAD,c__Head)
							)
						 &
							(
								p__connected(NECK,HEAD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1767, axiom,
	p__d__subclass(c__Face,c__AnimalAnatomicalStructure)
).


fof( miloA1768, axiom,
	p__d__subclass(c__Face,c__BodyPart)
).



% ($documentation Face EnglishLanguage "The part of the &%Head from forehead to chin and 
% from ear to ear.")


fof( miloA1769, axiom,
	(![FACE]: 
		(
			(
				p__d__instance(FACE,c__Face)
			)
			=>
			(
				(?[HEAD]: 
					(
						(
							(
								p__d__instance(HEAD,c__Head)
							)
						 &
							(
								p__part(FACE,HEAD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1770, axiom,
	(![FACE]: 
		(
			(
				p__d__instance(FACE,c__Face)
			)
			=>
			(
				(?[VERTEBRATE]: 
					(
						(
							(
								p__d__instance(VERTEBRATE,c__Vertebrate)
							)
						 &
							(
								p__part(FACE,VERTEBRATE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1771, axiom,
	p__d__subclass(c__Chin,c__AnimalAnatomicalStructure)
).


fof( miloA1772, axiom,
	p__d__subclass(c__Chin,c__BodyPart)
).



% ($documentation Chin EnglishLanguage "A part of the &%Face which protrudes slightly and which 
% is lower than all other parts of the &%Face.")


fof( miloA1773, axiom,
	(![CHIN]: 
		(
			(
				p__d__instance(CHIN,c__Chin)
			)
			=>
			(
				(?[FACE]: 
					(
						(
							(
								p__d__instance(FACE,c__Face)
							)
						 &
							(
								p__part(CHIN,FACE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1774, axiom,
	(![FACE,CHIN,PART]: 
		(
			(
				(
					(
						p__d__instance(FACE,c__Object)
					)
				 &
					(
						p__d__instance(PART,c__Object)
					)
				 &
					(
						p__d__instance(CHIN,c__Chin)
					)
				 &
					(
						p__part(PART,FACE)
					)
				 &
					(
						~ (
							p__part(PART,CHIN)
						)
					)
				)
			)
			=>
			(
				p__orientation(PART,CHIN,c__Below)
			)
		)
	)
).


% 	($partition Expressing @(Gesture,ExpressingInLanguage))

fof( miloA1776, axiom,
	p__d__disjointDecomposition3(c__Expressing,c__ExpressingApproval,c__ExpressingDisapproval)
).


fof( miloA1777, axiom,
	p__d__subclass(c__ExpressingApproval,c__Expressing)
).



% ($documentation ExpressingApproval EnglishLanguage "&%Expressing favor about a physical thing 
% or a state of affairs.")


fof( miloA1778, axiom,
	(![EXPRESS,AGENT,THING]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(THING,c__Formula)
					)
				 &
					(
						p__d__instance(EXPRESS,c__ExpressingApproval)
					)
				 &
					(
						p__agent(EXPRESS,AGENT)
					)
				 &
					(
						p__patient(EXPRESS,THING)
					)
				)
			)
			=>
			(
				(
					p__wants(AGENT,THING)
				 |
					p__desires(AGENT,THING)
				)
			)
		)
	)
).


fof( miloA1779, axiom,
	p__d__subclass(c__ExpressingDisapproval,c__Expressing)
).



% ($documentation ExpressingDisapproval EnglishLanguage "&%Expressing disfavor about a physical 
% thing or a state of affairs.")


fof( miloA1780, axiom,
	(![EXPRESS,AGENT,THING]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(THING,c__Object)
					)
				 &
					(
						p__d__instance(THING,c__Formula)
					)
				 &
					(
						p__d__instance(EXPRESS,c__ExpressingDisapproval)
					)
				 &
					(
						p__agent(EXPRESS,AGENT)
					)
				 &
					(
						p__patient(EXPRESS,THING)
					)
				)
			)
			=>
			(
				(
					p__dislikes(AGENT,THING)
				 |
					p__disapproves(AGENT,THING)
				)
			)
		)
	)
).


fof( miloA1781, axiom,
	p__d__subclass(c__Regretting,c__ExpressingDisapproval)
).



% ($documentation Regretting EnglishLanguage "&%ExpressingDisapproval about a state of affairs 
% that has already occurred.")


fof( miloA1782, axiom,
	(![R,T]: 
		(
			(
				(
					(
						p__d__instance(R,c__Regretting)
					)
				 &
					(
						p__patient(R,T)
					)
				 &
					(
						p__d__instance(T,c__Sentence)
					)
				)
			)
			=>
			(
				p__truth(T,c__True)
			)
		)
	)
).


fof( miloA1783, axiom,
	p__d__subclass(c__ExpressingFarewell,c__Expressing)
).



% ($documentation ExpressingFarewell EnglishLanguage "Any instance of &%Expressing an acknowledgment 
% of a person's departure.  Note that this class is not a subclass of 
% &%LinguisticCommunication, because it covers gestures of departure, e.g. &%Waving 
% and &%Nodding in certain circumstances.")


fof( miloA1784, axiom,
	p__d__subclass(c__Congratulating,c__ExpressingApproval)
).



% ($documentation Congratulating EnglishLanguage "Any &%ExpressingApproval to a person for 
% something that the person did in the past and that is regarded as being 
% to the benefit of the person congratulated.")


fof( miloA1785, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Congratulating)
			)
			=>
			(
				(?[P,A,D]: 
					(
						(
							(
								p__d__instance(D,c__Agent)
							)
						 &
							(
								p__d__instance(P,c__Process)
							)
						 &
							(
								p__d__instance(A,c__CognitiveAgent)
							)
						 &
							(
								p__destination(C,D)
							)
						 &
							(
								p__agent(P,D)
							)
						 &
							(
								p__agent(C,A)
							)
						 &
							(
								p__wants(A,P)
							)
						 &
							(
								p__refers(C,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1786, axiom,
	p__d__subclass(c__FacialExpression,c__Gesture)
).



% ($documentation FacialExpression EnglishLanguage "Any &%Gesture whose &%instrument is the &%Face.")


fof( miloA1787, axiom,
	(![AGENT,EXPRESS]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(EXPRESS,c__FacialExpression)
					)
				 &
					(
						p__agent(EXPRESS,AGENT)
					)
				)
			)
			=>
			(
				(?[FACE]: 
					(
						(
							(
								p__part(FACE,AGENT)
							)
						 &
							(
								p__d__instance(FACE,c__Face)
							)
						 &
							(
								p__instrument(EXPRESS,FACE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1788, axiom,
	p__d__subclass(c__Smiling,c__FacialExpression)
).



% ($documentation Smiling EnglishLanguage "Spreading the lips in such a way as to convey 
% happiness.")


% 	(forall (?SMILE ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?SMILE Smiling)
% 				(agent ?SMILE ?AGENT)
% 			)
% 			(holdsDuring (WhenFn ?SMILE) (attribute ?AGENT Happiness))
% 		)
% 	)

fof( miloA1790, axiom,
	p__d__subclass(c__Frowning,c__FacialExpression)
).



% ($documentation Frowning EnglishLanguage "Furrowing the forehead in such a way as to convey 
% unhappiness.")


% 	(forall (?FROWN ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?FROWN Frowning)
% 				(agent ?FROWN ?AGENT)
% 			)
% 			(holdsDuring (WhenFn ?FROWN) (attribute ?AGENT Unhappiness))
% 		)
% 	)

fof( miloA1792, axiom,
	p__d__subclass(c__Laughing,c__Vocalizing)
).


fof( miloA1793, axiom,
	p__d__subclass(c__Laughing,c__FacialExpression)
).



% ($documentation Laughing EnglishLanguage "Expressing happiness by &%Vocalizing in a 
% certain way.")


fof( miloA1794, axiom,
	(![LAUGH]: 
		(
			(
				p__d__instance(LAUGH,c__Laughing)
			)
			=>
			(
				(?[SMILE]: 
					(
						(
							(
								p__d__instance(SMILE,c__Smiling)
							)
						 &
							(
								p__subProcess(SMILE,LAUGH)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1795, axiom,
	p__d__subclass(c__Weeping,c__FacialExpression)
).



% ($documentation Weeping EnglishLanguage "&%Expressing unhappiness by shedding tears.")


% 	(forall (?WEEP ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?WEEP Weeping)
% 				(agent ?WEEP ?AGENT)
% 			)
% 			(holdsDuring (WhenFn ?WEEP) (attribute ?AGENT Unhappiness))
% 		)
% 	)

fof( miloA1797, axiom,
	p__d__subclass(c__Nodding,c__Gesture)
).



% ($documentation Nodding EnglishLanguage "Moving the &%Head up and down or side to side 
% to indicate approval or disapproval.")


fof( miloA1798, axiom,
	(![NOD,HEAD]: 
		(
			(
				(
					(
						p__d__instance(NOD,c__Nodding)
					)
				 &
					(
						p__patient(NOD,HEAD)
					)
				)
			)
			=>
			(
				p__d__instance(HEAD,c__Head)
			)
		)
	)
).


fof( miloA1799, axiom,
	p__d__subclass(c__HandGesture,c__Gesture)
).



% ($documentation HandGesture EnglishLanguage "Any &%Gesture which involves the &%Hands.")


fof( miloA1800, axiom,
	(![HG]: 
		(
			(
				p__d__instance(HG,c__HandGesture)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__Hand)
							)
						 &
							(
								p__patient(HG,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1801, axiom,
	p__d__subclass(c__Waving,c__HandGesture)
).



% ($documentation Waving EnglishLanguage "Moving a &%Hand to indicate a greeting, farewell, 
% recognition, goodwill, etc.")


fof( miloA1802, axiom,
	(![WAVE,HAND]: 
		(
			(
				(
					(
						p__d__instance(WAVE,c__Waving)
					)
				 &
					(
						p__patient(WAVE,HAND)
					)
				)
			)
			=>
			(
				p__d__instance(HAND,c__Hand)
			)
		)
	)
).


fof( miloA1803, axiom,
	p__d__subclass(c__Clapping,c__HandGesture)
).


fof( miloA1804, axiom,
	p__d__subclass(c__Clapping,c__RadiatingSound)
).


fof( miloA1805, axiom,
	p__d__subclass(c__Clapping,c__Impacting)
).



% ($documentation Clapping EnglishLanguage "Bringing the &%Hands together repeatedly to make 
% a loud noise.")


fof( miloA1806, axiom,
	p__d__subclass(c__Inclining,c__BodyMotion)
).


fof( miloA1807, axiom,
	p__d__subclass(c__Inclining,c__MotionDownward)
).



% ($documentation Inclining EnglishLanguage "Moving one's body downward from a vertical position.  
% Note that this class covers cases of leaning forward, as well as those of 
% reclining backwards.")


fof( miloA1808, axiom,
	p__d__subclass(c__Bowing,c__Gesture)
).


fof( miloA1809, axiom,
	p__d__subclass(c__Bowing,c__Inclining)
).


fof( miloA1810, axiom,
	p__d__subclass(c__Bowing,c__MotionDownward)
).



% ($documentation Bowing EnglishLanguage "Any downward motion of the body that indicates respect 
% for or submission to another &%Agent.")


fof( miloA1811, axiom,
	p__d__subclass(c__Sinking,c__Falling)
).



% ($documentation Sinking EnglishLanguage "The class of &%Falling processes that occur 
% in a &%WaterArea.")


fof( miloA1812, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Sinking)
			)
			=>
			(
				(?[W]: 
					(
						(
							(
								p__d__instance(W,c__WaterArea)
							)
						 &
							(
								p__eventLocated(S,W)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1813, axiom,
	p__d__subclass(c__Ducking,c__IntentionalProcess)
).


fof( miloA1814, axiom,
	p__d__subclass(c__Ducking,c__BodyMotion)
).


fof( miloA1815, axiom,
	p__d__subclass(c__Ducking,c__MotionDownward)
).



% ($documentation Ducking EnglishLanguage "Purposely moving one's body downward in such a way as 
% to avoid being hit by something.")


% 	(forall (?MOTION ?IMPACT ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?MOTION Ducking)
% 				(agent ?MOTION ?AGENT)
% 			)
% 			(hasPurpose ?MOTION (not (exists ([|] ?IMPACT []) (and ([|] ($instance ?IMPACT Impacting) ([|] (patient ?IMPACT ?AGENT) []))))))
% 		)
% 	)

fof( miloA1817, axiom,
	p__d__subclass(c__ExpressingInLanguage,c__Expressing)
).


fof( miloA1818, axiom,
	p__d__subclass(c__ExpressingInLanguage,c__LinguisticCommunication)
).



% ($documentation ExpressingInLanguage EnglishLanguage "Any instance of &%Expressing that is also an 
% instance of &%LinguisticCommunication, e.g. thanking someone, expressing condolence, 
% expressing disapproval with an utterance rather than a &%Gesture, etc.")


fof( miloA1819, axiom,
	p__d__subclass(c__TonalLanguage,c__SpokenHumanLanguage)
).



% ($documentation TonalLanguage EnglishLanguage "Any &%SpokenHumanLanguage that uses pitch to 
% differentiate otherwise identical words, e.g. Chinese.")


fof( miloA1820, axiom,
	p__d__subclass(c__Thanking,c__ExpressingInLanguage)
).


fof( miloA1821, axiom,
	p__d__subclass(c__Thanking,c__ExpressingApproval)
).



% ($documentation Thanking EnglishLanguage "Any &%ExpressingInLanguage of appreciation to a person 
% for something that the person did in the past.")


% 	(forall (?PERSON ?THANK ?AGENT ?THING)
% 		(=> 
% 			(and 
% 				($instance ?THANK Thanking)
% 				(agent ?THANK ?AGENT)
% 				(patient ?THANK ?THING)
% 				(destination ?THANK ?PERSON)
% 			)
% 			(and 
% 				($instance ?PERSON Human)
% 				(or 
% 					(holdsDuring (WhenFn ?THANK) (wants ?AGENT ?THING))
% 					(holdsDuring (WhenFn ?THANK) (desires ?AGENT ?THING))
% 				)
% 			)
% 		)
% 	)

fof( miloA1823, axiom,
	(![T,P]: 
		(
			(
				(
					(
						p__d__instance(T,c__Thanking)
					)
				 &
					(
						p__destination(T,P)
					)
				)
			)
			=>
			(
				p__d__instance(P,c__Human)
			)
		)
	)
).


fof( miloA1824, axiom,
	p__d__subclass(c__Greeting,c__Expressing)
).



% ($documentation Greeting EnglishLanguage "Any instance of &%Expressing an acknowledgment of a 
% person's arrival.  Note that this class is not a subclass of &%ExpressingInLanguage, 
% because it covers gestures of greeting, e.g. &%Waving and &%Nodding in certain 
% circumstances.")


fof( miloA1825, axiom,
	p__subrelation(c__half,c__part)
).



% ($documentation half EnglishLanguage "(&%half ?HALF ?WHOLE) means that ?HALF is one half 
% of ?WHOLE.")


fof( miloA1826, axiom,
	(![WHOLE,HALF]: 
		(
			(
				(
					(
						p__d__instance(WHOLE,c__Object)
					)
				 &
					(
						p__d__instance(HALF,c__Object)
					)
				 &
					(
						p__half(HALF,WHOLE)
					)
				)
			)
			=>
			(
				(?[OTHER]: 
					(
						(
							(
								p__d__instance(OTHER,c__Object)
							)
						 &
							(
								p__half(OTHER,WHOLE)
							)
						 &
							(
								~ (
									( OTHER = HALF )
								)
							)
						 &
							(
								( WHOLE = f__MereologicalSumFn2(HALF,OTHER) )
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation third EnglishLanguage "(third ?THIRD ?WHOLE) means that ?THIRD is one 
% third of ?WHOLE.")


fof( miloA1827, axiom,
	p__subrelation(c__third,c__part)
).


fof( miloA1828, axiom,
	(![W,T]: 
		(
			(
				(
					(
						p__d__instance(W,c__Object)
					)
				 &
					(
						p__d__instance(T,c__Object)
					)
				 &
					(
						p__third(T,W)
					)
				)
			)
			=>
			(
				(?[O1,O2]: 
					(
						(
							(
								p__d__instance(O1,c__Object)
							)
						 &
							(
								p__d__instance(O2,c__Object)
							)
						 &
							(
								p__third(O1,W)
							)
						 &
							(
								p__third(O2,W)
							)
						 &
							(
								~ (
									( O1 = T )
								)
							)
						 &
							(
								~ (
									( O2 = T )
								)
							)
						 &
							(
								~ (
									( O1 = O2 )
								)
							)
						 &
							(
								( W = f__MereologicalSumFn2(T,f__MereologicalSumFn2(O1,O2)) )
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation quarter EnglishLanguage "(quarter ?QUART ?WHOLE) means that ?QUART is a 
% quarter of ?WHOLE.")


fof( miloA1829, axiom,
	p__subrelation(c__quarter,c__part)
).


fof( miloA1830, axiom,
	(![W,Q]: 
		(
			(
				(
					(
						p__d__instance(W,c__Object)
					)
				 &
					(
						p__d__instance(Q,c__Object)
					)
				)
			)
			=>
			(
				(
					p__quarter(Q,W)
				)
				<=>
				(
					(?[H]: 
						(
							(
								(
									p__d__instance(H,c__Object)
								)
							 &
								(
									p__half(H,W)
								)
							 &
								(
									p__half(Q,H)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1831, axiom,
	p__subrelation(c__most,c__part)
).



% ($documentation most EnglishLanguage "(&%most ?MOST ?WHOLE) means that ?MOST is a &%part 
% of ?WHOLE that is greater than &%half of ?WHOLE.")


fof( miloA1832, axiom,
	(![WHOLE,MOST]: 
		(
			(
				(
					(
						p__d__instance(WHOLE,c__Object)
					)
				 &
					(
						p__d__instance(MOST,c__Object)
					)
				 &
					(
						p__most(MOST,WHOLE)
					)
				)
			)
			=>
			(
				(?[HALF,NUMBER1,NUMBER2,UNIT]: 
					(
						(
							(
								p__d__instance(HALF,c__Object)
							)
						 &
							(
								p__d__instance(UNIT,c__UnitOfMeasure)
							)
						 &
							(
								p__d__instance(NUMBER1,c__RealNumber)
							)
						 &
							(
								p__d__instance(NUMBER2,c__RealNumber)
							)
						 &
							(
								p__half(HALF,WHOLE)
							)
						 &
							(
								p__measure(HALF,f__MeasureFn2(NUMBER1,UNIT))
							)
						 &
							(
								p__measure(MOST,f__MeasureFn2(NUMBER2,UNIT))
							)
						 &
							(
								p__greaterThan(NUMBER2,NUMBER1)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1833, axiom,
	p__d__subclass(c__Blueprint,c__Icon)
).



% ($documentation Blueprint EnglishLanguage "An &%Icon which is a scale model of an &%Artifact, 
% whether the &%Artifact actually exists or not.")


% 	(forall (?PLAN ?ARTIFACT)
% 		(=> 
% 			($instance ?PLAN Blueprint)
% 			(hasPurpose ?PLAN (exists ([|] ?ARTIFACT []) (and ([|] ($instance ?ARTIFACT Artifact) ([|] (represents ?PLAN ?ARTIFACT) [])))))
% 		)
% 	)

fof( miloA1835, axiom,
	p__d__subclass(c__Chart,c__Icon)
).



% ($documentation Chart EnglishLanguage "An &%Icon which depicts one or more quantities.")


fof( miloA1836, axiom,
	(![CHART]: 
		(
			(
				p__d__instance(CHART,c__Chart)
			)
			=>
			(
				(?[QUANTITY]: 
					(
						(
							(
								p__d__instance(QUANTITY,c__PhysicalQuantity)
							)
						 &
							(
								p__refers(CHART,QUANTITY)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1837, axiom,
	p__d__subclass(c__Flag,c__Icon)
).



% ($documentation Flag EnglishLanguage "An &%Icon made of &%Fabric that refers to a particular 
% &%GeopoliticalArea.")


fof( miloA1838, axiom,
	(![FLAG]: 
		(
			(
				(
					(
						p__d__instance(FLAG,c__Object)
					)
				 &
					(
						p__d__instance(FLAG,c__Flag)
					)
				)
			)
			=>
			(
				(?[FABRIC]: 
					(
						(
							(
								p__d__instance(FABRIC,c__Fabric)
							)
						 &
							(
								p__part(FABRIC,FLAG)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1839, axiom,
	p__d__subclass(c__NationalFlag,c__Flag)
).



% ($documentation NationalFlag EnglishLanguage "A &%Flag that is the official flag of a &%Nation, 
% e.g. the stars and stripes is the &%NationalFlag of the United States.")


fof( miloA1840, axiom,
	(![F]: 
		(
			(
				p__d__instance(F,c__NationalFlag)
			)
			=>
			(
				(?[N]: 
					(
						(
							(
								p__d__instance(N,c__Nation)
							)
						 &
							(
								p__refers(F,N)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1841, axiom,
	p__d__subclass(c__GraphDiagram,c__Icon)
).



% ($documentation GraphDiagram EnglishLanguage "An &%Icon which depicts one or more quantities.")


fof( miloA1842, axiom,
	(![G]: 
		(
			(
				p__d__instance(G,c__GraphDiagram)
			)
			=>
			(
				(?[Q]: 
					(
						(
							(
								p__d__instance(Q,c__PhysicalQuantity)
							)
						 &
							(
								p__refers(G,Q)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1843, axiom,
	p__d__subclass(c__ArrowIcon,c__Icon)
).



% ($documentation ArrowIcon EnglishLanguage "An &%Icon which has the shape of an arrow and which 
% is used to indicate direction or a relationship between two things.")


fof( miloA1844, axiom,
	p__d__subclass(c__Map,c__Icon)
).



% ($documentation Map EnglishLanguage "An &%Icon which represents one or more &%GeographicAreas 
% (or even the entire &%Earth).")


fof( miloA1845, axiom,
	(![M]: 
		(
			(
				p__d__instance(M,c__Map)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__GeographicArea)
							)
						 &
							(
								p__represents(M,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1846, axiom,
	p__d__subclass(c__Photograph,c__Image)
).


fof( miloA1847, axiom,
	p__d__subclass(c__Photograph,c__Recording)
).



% ($documentation Photograph EnglishLanguage "An &%Image that is the result of a process of 
% &%Photographing.")


fof( miloA1848, axiom,
	p__d__subclass(c__Photographing,c__ContentDevelopment)
).



% ($documentation Photographing EnglishLanguage "&%ContentDevelopment where the &%instrument 
% is a camera and the &%result is a &%Photograph.")


fof( miloA1849, axiom,
	(![SHOOT]: 
		(
			(
				p__d__instance(SHOOT,c__Photographing)
			)
			=>
			(
				(?[PHOTO,CAMERA]: 
					(
						(
							(
								p__d__instance(PHOTO,c__Photograph)
							)
						 &
							(
								p__result(SHOOT,PHOTO)
							)
						 &
							(
								p__instrument(SHOOT,CAMERA)
							)
						 &
							(
								p__d__instance(CAMERA,c__Camera)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1850, axiom,
	p__d__subclass(c__Camera,c__Device)
).



% ($documentation Camera EnglishLanguage "A &%Device which is capable of &%Photographing.")


fof( miloA1851, axiom,
	(![CAMERA]: 
		(
			(
				p__d__instance(CAMERA,c__Camera)
			)
			=>
			(
				p__capability(c__Photographing,c__instrument,CAMERA)
			)
		)
	)
).


% ($comment 
% ;; KJN: Removing this as it is basically the same as ComposingMusic.   
% ;;($subclass Composing ContentDevelopment)
% ;;(documentation Composing EnglishLanguage "&%ContentDevelopment which results in a 
% ;;&%MusicalComposition.")
% ;;
% ;;(=>
% ;;   ($instance ?COMPOSE Composing)
% ;;   (exists (?MUSIC)
% ;;      (and
% ;;         ($instance ?MUSIC MusicalComposition)
% ;;         (result ?COMPOSE ?MUSIC)))) 
% )

fof( miloA1852, axiom,
	p__d__instance(c__TonMass,c__UnitOfMass)
).



% ($documentation TonMass EnglishLanguage "English mass unit that is equal to 2000 pounds.")


fof( miloA1853, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__TonMass) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__2000),c__PoundMass) )
			)
		)
	)
).


fof( miloA1854, axiom,
	p__d__instance(c__MetricTon,c__UnitOfMass)
).



% ($documentation MetricTon EnglishLanguage "&%MetricTon is a &%UnitOfMeasure that represents 
% a weight of 2,205 &%PoundMass.")


fof( miloA1855, axiom,
	( f__MeasureFn2(c__1,c__MetricTon) = f__MeasureFn2(c__2205,c__PoundMass) )
).


% 	(forall (?O ?A)
% 		(<=> 
% 			(measure ?O (MeasureFn ?A MetricTon))
% 			(measure ?O (MeasureFn (MultiplicationFn ?A 2205) PoundMass))
% 		)
% 	)

fof( miloA1857, axiom,
	p__d__instance(c__LongTon,c__UnitOfMass)
).



% ($documentation LongTon EnglishLanguage "&%LongTon is the &%UnitOfMeasure, 
% equal to 2,240 &%PoundMass, which is used to measure Dead Weight 
% Tonnage capacity of &%Ships.")


fof( miloA1858, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__LongTon) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__2240),c__PoundMass) )
			)
		)
	)
).


fof( miloA1859, axiom,
	p__d__instance(c__CubicFoot,c__UnitOfVolume)
).



% ($documentation CubicFoot EnglishLanguage "&%CubicFoot is a unit for measuring volume, 
% equal to a volume of one foot length in each dimension of length, width, 
% and height.")


fof( miloA1860, axiom,
	( f__MeasureFn2(c__1,c__CubicFoot) = f__MultiplicationFn2(f__MeasureFn2(c__1,c__FootLength),f__MultiplicationFn2(f__MeasureFn2(c__1,c__FootLength),f__MeasureFn2(c__1,c__FootLength))) )
).


fof( miloA1861, axiom,
	(![N1,N2,N3,QUANT,N4]: 
		(
			(
				(
					(
						p__d__instance(N3,c__RealNumber)
					)
				 &
					(
						p__d__instance(N2,c__RealNumber)
					)
				 &
					(
						p__d__instance(N1,c__RealNumber)
					)
				 &
					(
						p__d__instance(N4,c__RealNumber)
					)
				 &
					(
						p__d__instance(QUANT,c__PhysicalQuantity)
					)
				 &
					(
						( N4 = f__MultiplicationFn2(N1,f__MultiplicationFn2(N2,N3)) )
					)
				 &
					(
						( QUANT = f__MultiplicationFn2(f__MeasureFn2(N1,c__FootLength),f__MultiplicationFn2(f__MeasureFn2(N2,c__FootLength),f__MeasureFn2(N3,c__FootLength))) )
					)
				)
			)
			=>
			(
				( QUANT = f__MeasureFn2(N4,c__CubicFoot) )
			)
		)
	)
).


% ($comment 
% ;; (names "Registry Ton" RegistryTon)
% ;;
% ;; (names "Gross Ton" RegistryTon)
% )

fof( miloA1862, axiom,
	p__d__instance(c__RegistryTon,c__UnitOfVolume)
).



% ($documentation RegistryTon EnglishLanguage "&%RegistryTon is a unit of
% measure used to represent the Gross Registered Tonnage (GRT) capacity
% of &%Ships.  GRT is based on a volume measure, with one &%RegistryTon
% equal to a volume of 100 cubic feet.")


fof( miloA1863, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__RegistryTon) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__100),c__CubicFoot) )
			)
		)
	)
).


fof( miloA1864, axiom,
	p__d__instance(c__Page,c__UnitOfInformation)
).



% ($documentation Page EnglishLanguage "A single page of &%Text.")


fof( miloA1865, axiom,
	p__d__instance(c__LiquorShot,c__UnitOfVolume)
).



% ($documentation LiquorShot EnglishLanguage "A &%UnitOfMeasure used in preparing &%AlcoholicBeverages.")


fof( miloA1866, axiom,
	p__d__instance(c__MillenniumDuration,c__UnitOfDuration)
).



% ($documentation MillenniumDuration EnglishLanguage "The &%UnitOfDuration of 1000 years.")


fof( miloA1867, axiom,
	(![N]: 
		(
			(
				(
					(
						p__d__instance(N,c__RealNumber)
					)
				 &
					(
						( N = f__MultiplicationFn2(c__1,N) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(N,c__MillenniumDuration) = f__MeasureFn2(f__MultiplicationFn2(N,c__1000),c__YearDuration) )
			)
		)
	)
).


fof( miloA1868, axiom,
	p__d__instance(c__Acre,c__UnitOfArea)
).



% ($documentation Acre EnglishLanguage "A &%UnitOfMeasure equal to 4840 square yards.")


fof( miloA1869, axiom,
	p__d__instance(c__SquareMile,c__UnitOfArea)
).



% ($documentation SquareMile EnglishLanguage "&%SquareMile represents a &%UnitOfMeasure 
% equal to one square &%Mile.")


fof( miloA1870, axiom,
	( f__MeasureFn2(c__1,c__SquareMile) = f__PerFn2(f__MeasureFn2(c__1,c__Mile),f__MeasureFn2(c__1,c__Mile)) )
).


fof( miloA1871, axiom,
	p__d__instance(c__SquareYard,c__UnitOfArea)
).



% ($documentation SquareYard EnglishLanguage "&%SquareYard represents a &%UnitOfMeasure 
% equal to one square &%YardLength.")


fof( miloA1872, axiom,
	( f__MeasureFn2(c__1,c__SquareYard) = f__PerFn2(f__MeasureFn2(c__1,c__YardLength),f__MeasureFn2(c__1,c__YardLength)) )
).


% ($comment 
% ;; KJN: Removing this and replacing it with new definitions    
% ;;($subclass MusicalComposition Text)
% ;;(documentation MusicalComposition EnglishLanguage "A &%Text that expresses the notes, 
% ;;words, etc. of a song or other sort of &%MakingMusic.")
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?COMP MusicalComposition)
% ;;      (containsInformation ?COMP ?INFO)
% ;;      (realization ?MUSIC ?INFO))
% ;;   ($instance ?MUSIC MakingMusic))
% ;;
% ;;($subclass Song MusicalComposition)
% ;;(documentation Song EnglishLanguage "Any &%MusicalComposition which contains &%Lyrics.")
% ;;
% ;;(=>
% ;;  ($instance ?S Song)
% ;;  (exists (?L)
% ;;    (and
% ;;      ($instance ?L Lyrics)
% ;;      (part ?L ?S))))
% )

fof( miloA1873, axiom,
	p__d__instance(c__creator,c__BinaryPredicate)
).


% 	($domain creator 1 Agent)

% 	($domain creator 2 Entity)


% ($documentation creator EnglishLanguage "(creator ?AGENT ?ENTITY) means that 
% some &%Agent ?AGENT is the creator of some &%Entity ?ENTITY")


% (termFormat EnglishLanguage creator "creator")

fof( miloA1876, axiom,
	(![AGENT,ENTITY]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__creator(AGENT,ENTITY)
					)
				)
			)
			=>
			(
				(?[CREATION]: 
					(
						(
							(
								p__d__instance(CREATION,c__Creation)
							)
						 &
							(
								p__agent(CREATION,AGENT)
							)
						 &
							(
								p__result(CREATION,ENTITY)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1877, axiom,
	p__d__subclass(c__Music,c__Proposition)
).



% ($documentation Music EnglishLanguage "&%Music refers to the conception of music - it's
% notes, tempo, arrangement, lyrics, etc. as thought by its composers and lyricist.  Some
% types of &%Music are conceptualized with only the background instrumentation thought of,
% while some types of &%Music are conceptualized with the thought of having both lyrics
% and musical composition combined.")


% (termFormat EnglishLanguage Music "music")

fof( miloA1878, axiom,
	(![MC,MUSIC]: 
		(
			(
				(
					(
						p__d__instance(MUSIC,c__Process)
					)
				 &
					(
						p__d__instance(MC,c__Music)
					)
				 &
					(
						p__realization(MUSIC,MC)
					)
				)
			)
			=>
			(
				p__d__instance(MUSIC,c__MakingMusic)
			)
		)
	)
).


fof( miloA1879, axiom,
	p__d__subclass(c__MusicalComposition,c__Music)
).



% ($documentation MusicalComposition EnglishLanguage "&%MusicalComposition refers to the
% the conception of a musical arrangement not including any &%LyricalContent.")


% (termFormat EnglishLanguage MusicalComposition "musical composition")

% ($comment 
% ;; (comment MusicalComposition "Currently, MusicalComposition is treated as text, and there is no propositional content related to it.  This is dangerous, as there could be millions of instances of (for instance) sheet music containing Beethoven's Fifth Symphony, and only having MusicalComposition equal to an object would imply that all of this different instances are different from each other.  You could also have many different arrangements of the same musical composition.  As such, I propose making MusicalComposition a Proposition, which refers more to the conception of the music, and SheetMusic the content bearing object that contains information about a particular MusicalComposition.  (09-13-2011)" "KJN")
% )

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of realization is Proposition, which is subclass of Abstract, and the second argument of subProcess is Process, which is subclass of Object (Process and Object are disjoint)
% ;;
% ;;(=> 
% ;;  (and
% ;;    ($instance ?MC MusicalComposition)
% ;;    (realization ?MC ?MUSIC))
% ;;  (not
% ;;    (exists (?LC ?V)
% ;;      (and
% ;;        ($instance ?V Singing)
% ;;        (patient ?V ?LC)
% ;;        ($instance ?LC LyricalContent)
% ;;        (subProcess ?V ?MUSIC)))))
% )

fof( miloA1880, axiom,
	p__d__subclass(c__Song,c__Music)
).



% ($documentation Song EnglishLanguage "&%Song refers to the conception of music that 
% includes both &%MusicalComposition and &%LyricalComposition.  While a &%Song can be
% interpreted without its &%LyricalContent, or its &%LyricalContent is used elsewhere, 
% the idea of &%Song as it was originally conceptualized is that it contains both.")


% (termFormat EnglishLanguage Song "song")

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of realization is Proposition, which is subclass of Abstract, and the second argument of subProcess is Process, which is subclass of Object (Process and Object are disjoint)
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?S Song)
% ;;    (realization ?S ?MUSIC))
% ;;  (exists (?MM ?MV ?LC ?MC)
% ;;    (and
% ;;      ($instance ?MM MakingMusic)
% ;;      ($instance ?MV Singing)
% ;;      ($instance ?LC LyricalContent)
% ;;      ($instance ?MC MusicalComposition)
% ;;      (patient ?MM ?MC)
% ;;      (patient ?MV ?LC)
% ;;      (subProcess ?MM ?MUSIC)
% ;;      (subProcess ?MV ?MUSIC))))
% )

fof( miloA1881, axiom,
	p__d__subclass(c__LyricalContent,c__Proposition)
).



% ($documentation LyricalContent EnglishLanguage "&%LyricalContent is the conceptual 
% idea of &%Lyrics.")


% ($comment 
% ;; (comment LyricalContent "It is important to distinguish the propositional content of &%Lyrics from the text that displays it.  Some songs are translated from one language to another, but use essentially the same Lyrical content. (09-15-2011)" "KJN")
% )

% (termFormat EnglishLanguage LyricalContent "lyrical content")

% 	(forall (?S ?X)
% 		(=> 
% 			($instance ?X LyricalContent)
% 			(hasPurpose ?X (exists ([|] ?S []) (and ([|] ($instance ?S Singing) ([|] (patient ?S ?X) [])))))
% 		)
% 	)

fof( miloA1883, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__LyricalContent)
			)
			=>
			(
				(?[W,I]: 
					(
						(
							(
								p__d__instance(I,c__Proposition)
							)
						 &
							(
								p__d__instance(W,c__Word)
							)
						 &
							(
								p__containsInformation(W,I)
							)
						 &
							(
								p__subProposition(I,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1884, axiom,
	p__d__instance(c__LegislativeBill,c__DeonticAttribute)
).



% ($documentation LegislativeBill EnglishLanguage "The &%Attribute of being a proposed law, 
% i.e. being under consideration by a legislative body of &%Government.")


% 	(forall (?TEXT ?TIME1)
% 		(=> 
% 			(holdsDuring ?TIME1 (modalAttribute ?TEXT Law))
% 			(exists (?TIME2)
% 				(and 
% 					(holdsDuring ?TIME2 (attribute ?TEXT LegislativeBill))
% 					(earlier ?TIME2 ?TIME1)
% 				)
% 			)
% 		)
% 	)

fof( miloA1886, axiom,
	p__d__subclass(c__PassingABill,c__PoliticalProcess)
).


fof( miloA1887, axiom,
	p__d__subclass(c__PassingABill,c__Declaring)
).



% ($documentation PassingABill EnglishLanguage "The &%Process of converting a &%LegislativeBill 
% into &%Law by a duly authorized legislative body of &%Government.")


% ($comment 
% ;; KJN: Moving this to Government.kif as definition for LegislativeOrganization is there
% ;;(=>
% ;;   ($instance ?ORG LegislativeOrganization)
% ;;   (capability PassingABill agent ?ORG))
% )

% 	(forall (?PASS ?TEXT)
% 		(=> 
% 			(and 
% 				($instance ?PASS PassingABill)
% 				(patient ?PASS ?TEXT)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?PASS)) (attribute ?TEXT LegislativeBill))
% 				(holdsDuring (EndFn (WhenFn ?PASS)) (attribute ?TEXT Law))
% 			)
% 		)
% 	)

fof( miloA1889, axiom,
	p__subAttribute(c__InternationalLaw,c__Law)
).



% ($documentation InternationalLaw EnglishLanguage "An &%Attribute that applies to &%Propositions 
% that express &%Laws concerning the relations between &%Nations.")


fof( miloA1890, axiom,
	p__subAttribute(c__Illegal,c__Prohibition)
).


fof( miloA1891, axiom,
	p__contraryAttribute2(c__Illegal,c__Legal)
).



% ($documentation Illegal EnglishLanguage "A proposition is &%Illegal just in case it is inconsistent 
% with any proposition that is a &%Law.")


fof( miloA1892, axiom,
	p__subAttribute(c__Legal,c__Permission)
).



% ($documentation Legal EnglishLanguage "A proposition is &%Legal just in case it is not inconsistent 
% with any proposition that is a &%Law.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of modalAttribute is Formula, whereas the first argument of consistent is Proposition (Formula and Proposition are incompatible)
% ;;
% ;;(<=>
% ;;  (modalAttribute ?F1 Legal)
% ;;  (not 
% ;;    (exists (?F2)
% ;;      (and
% ;;        (modalAttribute ?F2 Law)
% ;;        (not 
% ;;	  (consistent ?F1 ?F2))))))
% )

fof( miloA1893, axiom,
	p__d__subclass(c__CriminalAction,c__IntentionalProcess)
).



% ($documentation CriminalAction EnglishLanguage "Any &%IntentionalProcess that violates a &%Law.")


fof( miloA1894, axiom,
	(![ACTION]: 
		(
			(
				p__d__instance(ACTION,c__CriminalAction)
			)
			=>
			(
				(?[LAW,CONTENT,CRIME]: 
					(
						(
							(
								p__d__instance(LAW,c__Formula)
							)
						 &
							(
								p__d__instance(CONTENT,c__Proposition)
							)
						 &
							(
								p__d__instance(CRIME,c__Proposition)
							)
						 &
							(
								p__modalAttribute(LAW,c__Law)
							)
						 &
							(
								p__containsInformation(LAW,CONTENT)
							)
						 &
							(
								p__realization(ACTION,CRIME)
							)
						 &
							(
								~ (
									p__consistent(CONTENT,CRIME)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1895, axiom,
	p__d__subclass(c__PoliticalCrime,c__CriminalAction)
).


fof( miloA1896, axiom,
	p__d__subclass(c__PoliticalCrime,c__PoliticalProcess)
).



% ($documentation PoliticalCrime EnglishLanguage "A &%CriminalAction that is committed by or 
% against &%Governments.")


fof( miloA1897, axiom,
	p__d__subclass(c__PoliticalRevolution,c__PoliticalProcess)
).


fof( miloA1898, axiom,
	p__d__subclass(c__PoliticalRevolution,c__ViolentContest)
).



% ($documentation PoliticalRevolution EnglishLanguage "The violent overthrow of one &%Government 
% and its replacement by another.  This covers grass-roots revolutions, as well 
% as coups d'etat.")


fof( miloA1899, axiom,
	(![R,A]: 
		(
			(
				(
					(
						p__d__instance(R,c__PoliticalRevolution)
					)
				 &
					(
						p__patient(R,A)
					)
				)
			)
			=>
			(
				p__d__instance(A,c__GeopoliticalArea)
			)
		)
	)
).


% 	(forall (?R ?A)
% 		(=> 
% 			(and 
% 				($instance ?R PoliticalRevolution)
% 				(patient ?R ?A)
% 			)
% 			(exists (?GOV1 ?GOV2)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?R)) (equal ?GOV1 (GovernmentFn ?A)))
% 					(holdsDuring (EndFn (WhenFn ?R)) (equal ?GOV2 (GovernmentFn ?A)))
% 					(not 
% 						(equal ?GOV1 ?GOV2)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA1901, axiom,
	p__d__subclass(c__LawEnforcement,c__PoliticalProcess)
).


fof( miloA1902, axiom,
	p__d__subclass(c__LawEnforcement,c__RegulatoryProcess)
).



% ($documentation LawEnforcement EnglishLanguage "Any &%RegulatoryProcess where the agent is either 
% a &%PoliceOrganization or a member of a &%PoliceOrganization.  This covers 
% everything from issuing a traffic ticket to arresting someone on suspicion of having 
% committed a &%Murder.")


fof( miloA1903, axiom,
	(![L,AGENT,P]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(P,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(L,c__LawEnforcement)
					)
				 &
					(
						p__agent(L,AGENT)
					)
				)
			)
			=>
			(
				(
					p__d__instance(P,c__PoliceOrganization)
				 |
					(?[O]: 
						(
							(
								(
									p__d__instance(O,c__PoliceOrganization)
								)
							 &
								(
									p__member(P,O)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1904, axiom,
	p__d__subclass(c__Imprisoning,c__Confining)
).



% ($documentation Imprisoning EnglishLanguage "The class of &%Confining processes where the detainee 
% is put in &%Prison.")


fof( miloA1905, axiom,
	(![I]: 
		(
			(
				p__d__instance(I,c__Imprisoning)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__d__instance(P,c__Prison)
							)
						 &
							(
								p__eventLocated(I,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1906, axiom,
	p__d__subclass(c__Espionage,c__PoliticalProcess)
).


fof( miloA1907, axiom,
	p__d__subclass(c__Espionage,c__Investigating)
).



% ($documentation Espionage EnglishLanguage "Any Investigating by one &%Government of another 
% &%Government where the second Government does not know that it is being 
% spied upon.")


fof( miloA1908, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Espionage)
			)
			=>
			(
				(?[GOV1,GOV2]: 
					(
						(
							(
								p__d__instance(GOV1,c__Government)
							)
						 &
							(
								p__d__instance(GOV2,c__Government)
							)
						 &
							(
								p__agent(S,GOV1)
							)
						 &
							(
								p__patient(S,GOV2)
							)
						 &
							(
								~ (
									( GOV1 = GOV2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1909, axiom,
	p__d__subclass(c__Polling,c__Investigating)
).



% ($documentation Polling EnglishLanguage "Investigating what people believe (and in what proportions) 
% by asking a set of structured questions to a random sample of people.")


fof( miloA1910, axiom,
	p__d__subclass(c__MilitaryInfiltration,c__MilitaryProcess)
).


fof( miloA1911, axiom,
	p__d__subclass(c__MilitaryInfiltration,c__Translocation)
).



% ($documentation MilitaryInfiltration EnglishLanguage "Any &%Process by a &%MilitaryOrganization 
% which involves moving through enemy positions without detection by the enemy.")


fof( miloA1912, axiom,
	p__d__subclass(c__Agreement,c__Proposition)
).



% ($documentation Agreement EnglishLanguage "&%Agreement is the class of &%Propositions 
% that express the contents of agreements entered into by &%CognitiveAgents. &%Agreement 
% includes treaties, contracts, purchase orders, pledges, marriage vows, etc.  An 
% &%Agreement may be written down in a document or other &%ContentBearingObject, it
% can be verbal &%Communication, it can even be an implied agreement.")


% (termFormat EnglishLanguage Agreement "agreement")

fof( miloA1913, axiom,
	(![COMPACT]: 
		(
			(
				p__d__instance(COMPACT,c__Agreement)
			)
			=>
			(
				(?[COMM]: 
					(
						(
							(
								p__d__instance(COMM,c__Committing)
							)
						 &
							(
								p__represents(COMM,COMPACT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1914, axiom,
	(![AGREEMENT]: 
		(
			(
				p__d__instance(AGREEMENT,c__Agreement)
			)
			=>
			(
				(?[AGENT1,AGENT2]: 
					(
						(
							(
								p__d__instance(AGENT1,c__CognitiveAgent)
							)
						 &
							(
								p__d__instance(AGENT2,c__CognitiveAgent)
							)
						 &
							(
								p__partyToAgreement(AGENT1,AGREEMENT)
							)
						 &
							(
								p__partyToAgreement(AGENT2,AGREEMENT)
							)
						 &
							(
								~ (
									( AGENT1 = AGENT2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; Initially modeled Contract (which is an enforcaeble agreement as a subclass of
% ;; Agreement, but later realized that an agreement is only a "contract" or is only
% ;; enforceable for a certain period of time, meaning that the same provision or 
% ;; clause can exist with the same people agreeing to it, but it's not a valid 
% ;; contract because it is not within a specified date.  So instead of subclassing
% ;; it from Agreement, a Normative attribute, ActiveAgreement, is now created describing
% ;; attaching a validity / contractual time interval to the agreement      
% ;;
% ;; ---------------------------------------------------------------------------------
% ;; Agreement Relationships
% ;; ---------------------------------------------------------------------------------
% )

fof( miloA1915, axiom,
	p__d__instance(c__partyToAgreement,c__BinaryPredicate)
).



% ($documentation partyToAgreement EnglishLanguage "(&%partyToAgreement ?AGENT ?PROP) 
% means that the &%Agent ?AGENT has committed to the agreement ?PROP.")


% (termFormat EnglishLanguage partyToAgreement "party to agreement")

% 	($domain partyToAgreement 1 CognitiveAgent)

% 	($domain partyToAgreement 2 Agreement)

fof( miloA1918, axiom,
	(![AGENT,CONTENT]: 
		(
			(
				(
					(
						p__d__instance(CONTENT,c__Agreement)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__partyToAgreement(AGENT,CONTENT)
					)
				)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__Committing)
							)
						 &
							(
								p__agent(C,AGENT)
							)
						 &
							(
								p__patient(C,CONTENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1919, axiom,
	p__d__instance(c__agreementPeriod,c__BinaryPredicate)
).


% 	($domain agreementPeriod 1 Agreement)

% 	($domain agreementPeriod 2 TimeInterval)


% ($documentation agreementPeriod EnglishLanguage "(&%agreementPeriod ?AGREEMENT ?DURATION) 
% holds if ?DURATION specifies a &%TimeDuration, which is the length of time that the
% ?AGREEMENT is &%ActiveAgreement.")


% 	(forall (?STARTDATE ?DURATION ?AGREEMENT)
% 		(=> 
% 			(and 
% 				(agreementPeriod ?AGREEMENT ?DURATION)
% 				(agreementEffectiveDate ?AGREEMENT ?STARTDATE)
% 			)
% 			(holdsDuring (TimePeriodFn ?STARTDATE ?DURATION) (property ?AGREEMENT ActiveAgreement))
% 		)
% 	)

fof( miloA1923, axiom,
	p__d__instance(c__agreementEffectiveDate,c__BinaryPredicate)
).


% 	($domain agreementEffectiveDate 1 Agreement)

% 	($domain agreementEffectiveDate 2 TimePoint)


% ($documentation agreementEffectiveDate EnglishLanguage "(&%agreementEffectiveDate ?AGREEMENT 
% ?TIME) means that ?AGREEMENT goes into effect at &%TimePoint ?TIME, and remains an 
% &%ActiveAgreement for &%TimeDuration ?DURATION.")


fof( miloA1926, axiom,
	p__d__instance(c__TimePeriodFn,c__BinaryFunction)
).



% ($documentation TimePeriodFn EnglishLanguage "(&%TimePeriodFn ?TIMEPOINT ?DURATION) 
% accepts &%TimePoint ?TIMEPOINT and &%TimeDuration ?DURATION and returns a &%TimeInterval
% that starts from ?TIMEPOINT and ends at the end of ?DURATION")


% (termFormat EnglishLanguage TimePeriodFn "time period function")

% 	($domain TimePeriodFn 1 TimePoint)

% 	($domain TimePeriodFn 2 TimeDuration)

% 	($range TimePeriodFn TimeInterval)

fof( miloA1930, axiom,
	(![T2,INTERVAL,T1,PERIOD]: 
		(
			(
				(
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				 &
					(
						p__d__instance(PERIOD,c__TimeDuration)
					)
				 &
					(
						p__d__instance(T1,c__TimePoint)
					)
				 &
					(
						p__d__instance(T2,c__TimePoint)
					)
				 &
					(
						( INTERVAL = f__TimeIntervalFn2(T1,T2) )
					)
				 &
					(
						p__duration(INTERVAL,PERIOD)
					)
				)
			)
			=>
			(
				( INTERVAL = f__TimePeriodFn2(T1,PERIOD) )
			)
		)
	)
).


fof( miloA1931, axiom,
	p__d__instance(c__agreementExpirationDate,c__BinaryPredicate)
).


% 	($domain agreementExpirationDate 1 Agreement)

% 	($domain agreementExpirationDate 2 TimePoint)


% ($documentation agreementExpirationDate EnglishLanguage "(&%agreementExpirationDate 
% ?AGREEMENT ?ENDDATE) means that ?ENDDATE is the date on which ?AGREEMENT is no longer 
% &%ActiveAgreement.")


% 	(forall (?ENDDATE ?AGREEMENT)
% 		(=> 
% 			(agreementExpirationDate ?AGREEMENT ?ENDDATE)
% 			(holdsDuring (FutureFn ?ENDDATE) (not (property ?AGREEMENT ActiveAgreement)))
% 		)
% 	)

fof( miloA1935, axiom,
	p__d__instance(c__agreementClause,c__QuaternaryPredicate)
).



% ($documentation agreementClause EnglishLanguage "(&%agreementClause ?PROP ?ATTR
% ?AGREEMENT ?AGENT) means that &%Proposition ?PROP, which has &%modalAttribute ?ATTR, 
% is part of &%Agreement ?AGREEMENT and, with &%CognitiveAgent ?AGENT being the one
% responsible to make the statement true")


% (termFormat EnglishLanguage agreementClause "agreement clause")

% 	($domain agreementClause 1 Proposition)

% 	($domain agreementClause 2 DeonticAttribute)

% 	($domain agreementClause 3 Agreement)

% 	($domain agreementClause 4 CognitiveAgent)

fof( miloA1940, axiom,
	(![ATTR,PROP,AGENT,AGREEMENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(AGREEMENT,c__Agreement)
					)
				 &
					(
						p__d__instance(ATTR,c__DeonticAttribute)
					)
				 &
					(
						p__d__instance(PROP,c__Proposition)
					)
				 &
					(
						p__agreementClause(PROP,ATTR,AGREEMENT,AGENT)
					)
				)
			)
			=>
			(
				(
					(
						(?[CLAUSE]: 
							(
								(
									(
										p__d__instance(CLAUSE,c__ContentBearingPhysical)
									)
								 &
									(
										p__containsInformation(CLAUSE,PROP)
									)
								)
							)
						)
					)
				 &
					(
						p__partyToAgreement(AGENT,AGREEMENT)
					)
				)
			)
		)
	)
).


% 	(forall (?AGREEMENT ?ATTR ?PROP ?PROC ?AGENT)
% 		(=> 
% 			(and 
% 				(agreementClause ?PROP ?ATTR ?AGREEMENT ?AGENT)
% 				(or 
% 					(equal ?ATTR Obligation)
% 					(equal ?ATTR Promise)
% 				)
% 			)
% 			(modalAttribute (exists ([|] ?PROC []) (and ([|] (realization ?PROC ?PROP) ([|] (agent ?PROC ?AGENT) [])))) Likely)
% 		)
% 	)

% 	(forall (?AGREEMENT ?PROP ?PROC ?AGENT)
% 		(=> 
% 			(agreementClause ?PROP Prohibition ?AGREEMENT ?AGENT)
% 			(not 
% 				(holdsRight (exists ([|] ?PROC []) (and ([|] (realization ?PROC ?PROP) ([|] (agent ?PROC ?AGENT) [])))) ?AGENT)
% 			)
% 		)
% 	)

% 	(forall (?AGREEMENT ?PROP ?PROC ?AGENT)
% 		(=> 
% 			(agreementClause ?PROP Permission ?AGREEMENT ?AGENT)
% 			(holdsRight (exists ([|] ?PROC []) (and ([|] (realization ?PROC ?PROP) ([|] (agent ?PROC ?AGENT) [])))) ?AGENT)
% 		)
% 	)

fof( miloA1944, axiom,
	p__d__instance(c__ActiveAgreement,c__RelationalAttribute)
).



% ($documentation ActiveAgreement EnglishLanguage "&%ActiveAgreement describes an &%Agreement
% that is still binding or is still in effect")


% (termFormat EnglishLanguage ActiveAgreement "active agreement")

fof( miloA1945, axiom,
	(![AGREEMENT]: 
		(
			(
				p__property(AGREEMENT,c__ActiveAgreement)
			)
			=>
			(
				p__d__instance(AGREEMENT,c__Agreement)
			)
		)
	)
).


% 	(forall (?PROC ?AGREEMENT)
% 		(=> 
% 			(property ?AGREEMENT ActiveAgreement)
% 			(modalAttribute (exists ([|] ?PROC []) (realization ?PROC ?AGREEMENT)) Obligation)
% 		)
% 	)

% ($comment 
% ;; ($instance agreementActive BinaryPredicate)
% ;; (domain agreementActive 1 Agreement)
% ;; (domain agreementActive 2 TimeInterval)
% ;; (documentation agreementActive EnglishLanguage "(&%agreementActive ?AGREEMENT ?TIME) 
% ;; means that ?AGREEMENT is an &%Obligation within &%TimeInterval ?TIME")v
% ;;
% ;; (<=>
% ;;  (and
% ;;    (agreementPeriod ?Agreement ?Period)
% ;;    (overlapsTemporally ?Date ?Period))
% ;;  (agreementActive ?Agreement ?Date))
% ;; transform this into ActiveAgreement:
% )

fof( miloA1947, axiom,
	(![ENTITY]: 
		(
			(
				p__property(ENTITY,c__Promise)
			)
			=>
			(
				(
					p__property(ENTITY,c__Contract)
				 |
					p__property(ENTITY,c__NakedPromise)
				)
			)
		)
	)
).


fof( miloA1948, axiom,
	p__subAttribute(c__NakedPromise,c__Promise)
).



% ($documentation NakedPromise EnglishLanguage "A &%Promise where nothing is promised in return, 
% i.e. a nudum pactum.")


fof( miloA1949, axiom,
	p__subAttribute(c__Contract,c__ActiveAgreement)
).


fof( miloA1950, axiom,
	p__subAttribute(c__Contract,c__Promise)
).



% ($documentation Contract EnglishLanguage "&%Contract is a type of &%Agreement that is 
% legally enforceable, meaning a &%CognitiveAgent can pursue other parties of the 
% agreement in a court of law if provisions of the contract are not followed or kept.  
% It follows that all subpropositions of the &%Contract is &%Legal.")


% (termFormat EnglishLanguage Contract "contract")

fof( miloA1951, axiom,
	p__contraryAttribute2(c__NakedPromise,c__Contract)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of modalAttribute is Formula, whereas the first argument of subProposition is Proposition (Formula and Proposition are incompatible)
% ;;
% ;;(=>
% ;;  (property ?AGREEMENT Contract)
% ;;  (forall (?X)
% ;;    (=>
% ;;      (subProposition ?X ?AGREEMENT)
% ;;      (modalAttribute ?X Legal))))
% )

% 	(forall (?PROC ?PROP ?AGREEMENT ?AGENT2 ?LEGAL ?AGENT1)
% 		(=> 
% 			(and 
% 				(property ?AGREEMENT Contract)
% 				(partyToAgreement ?AGENT1 ?AGREEMENT)
% 				(partyToAgreement ?AGENT2 ?AGREEMENT)
% 				($instance ?PROC IntentionalProcess)
% 				(agent ?PROC ?AGENT1)
% 				(realization ?PROC ?PROP)
% 				(not 
% 					(consistent ?PROP ?AGREEMENT)
% 				)
% 			)
% 			(modalAttribute (exists ([|] ?LEGAL []) (and ([|] ($instance ?LEGAL LegalAction) ([|] (plaintiff ?LEGAL ?AGENT2) ([|] (defendant ?LEGAL ?AGENT1) []))))) Possibility)
% 		)
% 	)

fof( miloA1953, axiom,
	p__subAttribute(c__MarriageContract,c__Contract)
).



% ($documentation MarriageContract EnglishLanguage "An &%Contract between a married couple 
% about how assets owned by the couple will be distributed in the event 
% that the couple is divorced.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misplaced variables
% ;;
% ;;(=>
% ;;  (property ?C MarriageContract)
% ;;  (exists (?P1 ?P2)
% ;;    (and
% ;;      (partyToAgreement ?C ?P1)
% ;;      (partyToAgreement ?C ?P2)
% ;;      (spouse ?P1 ?P2))))    
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA1954, axiom,
	(![C]: 
		(
			(
				(
					(
						p__d__instance(C,c__Agreement)
					)
				 &
					(
						p__property(C,c__MarriageContract)
					)
				)
			)
			=>
			(
				(?[P1,P2]: 
					(
						(
							(
								p__d__instance(P1,c__Human)
							)
						 &
							(
								p__d__instance(P2,c__Human)
							)
						 &
							(
								p__partyToAgreement(P1,C)
							)
						 &
							(
								p__partyToAgreement(P2,C)
							)
						 &
							(
								p__spouse(P1,P2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1955, axiom,
	p__subAttribute(c__PurchaseContract,c__Contract)
).



% ($documentation PurchaseContract EnglishLanguage "A &%Contract between two &%Agents in 
% which one &%Agent agrees to render the other some good or service in exchange for 
% currency.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of realization is Proposition, which is subclass of Abstract, whereas the first argument of partyToAgreement is CognitiveAgent, which is subclass of Physical (Abstract and Physical are disjoint)
% ;;
% ;;(=>
% ;;  (property ?C PurchaseContract)
% ;;  (exists (?S ?SELLER ?BUYER)
% ;;    (and
% ;;      ($instance ?S Selling)
% ;;      (agent ?S ?SELLER)
% ;;      (destination ?S ?BUYER)
% ;;      (realization ?S ?C)
% ;;      (partyToAgreement ?C ?SELLER)
% ;;      (partyToAgreement ?C ?BUYER))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA1956, axiom,
	(![C]: 
		(
			(
				(
					(
						p__d__instance(C,c__Agreement)
					)
				 &
					(
						p__property(C,c__PurchaseContract)
					)
				)
			)
			=>
			(
				(?[S,SELLER,BUYER]: 
					(
						(
							(
								p__d__instance(SELLER,c__CognitiveAgent)
							)
						 &
							(
								p__d__instance(BUYER,c__CognitiveAgent)
							)
						 &
							(
								p__d__instance(S,c__Selling)
							)
						 &
							(
								p__origin(S,SELLER)
							)
						 &
							(
								p__destination(S,BUYER)
							)
						 &
							(
								p__realization(S,C)
							)
						 &
							(
								p__partyToAgreement(SELLER,C)
							)
						 &
							(
								p__partyToAgreement(BUYER,C)
							)
						)
					)
				)
			)
		)
	)
).



fof( miloA1957, axiom,
	p__subAttribute(c__ServiceContract,c__Contract)
).



% ($documentation ServiceContract EnglishLanguage "A &%Contract where an &%Agent agrees to 
% perform a service for another &%Agent (usually for a price).")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argumento of realization is Proposition, which is subclass of Abstract, whereas the first argument of partyToAgreement is CognitiveAgent, which is subclass of Physical (Abstract and Physical are disjoint)
% ;;
% ;;(=>
% ;;  (property ?C ServiceContract)
% ;;  (exists (?SP ?SERVICE ?CUST)
% ;;    (and
% ;;      ($instance ?SP ServiceProcess)
% ;;      (realization ?SP ?C)
% ;;      (serviceProvider ?SP ?SERVICE)
% ;;      (serviceRecipient ?SP ?CUST)
% ;;      (partyToAgreement ?C ?SERVICE)
% ;;      (partyToAgreement ?C ?CUST))))      
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA1958, axiom,
	(![C]: 
		(
			(
				(
					(
						p__d__instance(C,c__Agreement)
					)
				 &
					(
						p__property(C,c__ServiceContract)
					)
				)
			)
			=>
			(
				(?[SP,SERVICE,CUST]: 
					(
						(
							(
								p__d__instance(SERVICE,c__CognitiveAgent)
							)
						 &
							(
								p__d__instance(CUST,c__CognitiveAgent)
							)
						 &
							(
								p__d__instance(SP,c__ServiceProcess)
							)
						 &
							(
								p__realization(SP,C)
							)
						 &
							(
								p__serviceProvider(SP,SERVICE)
							)
						 &
							(
								p__serviceRecipient(SP,CUST)
							)
						 &
							(
								p__partyToAgreement(SERVICE,C)
							)
						 &
							(
								p__partyToAgreement(CUST,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1959, axiom,
	p__subAttribute(c__Warranty,c__ServiceContract)
).



% ($documentation Warranty EnglishLanguage "A &%Contract that states the cirumstances 
% under which defects in the product will be corrected for no charge.  
% A &%Warranty is usually limited to a length of time that is specified 
% in the &%Warranty itself.  A &%Warranty also includes information about 
% what is not covered and actions that invalidate the &%Warranty.")


fof( miloA1960, axiom,
	p__subAttribute(c__Treaty,c__Contract)
).



% ($documentation Treaty EnglishLanguage "Any &%Contract which holds between two or more 
% &%Nations.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misplaced variables
% ;;
% ;;(=>
% ;;  (property ?T Treaty)
% ;;  (exists (?N1 ?N2)
% ;;    (and
% ;;      (partyToAgreement ?T ?N1)
% ;;      (partyToAgreement ?T ?N2)
% ;;      ($instance ?N1 Nation)
% ;;      ($instance ?N2 Nation)
% ;;      (not 
% ;;        (equal ?N1 ?N2)))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA1961, axiom,
	(![T]: 
		(
			(
				(
					(
						p__d__instance(T,c__Agreement)
					)
				 &
					(
						p__property(T,c__Treaty)
					)
				)
			)
			=>
			(
				(?[N1,N2]: 
					(
						(
							(
								p__d__instance(N1,c__CognitiveAgent)
							)
						 &
							(
								p__d__instance(N2,c__CognitiveAgent)
							)
						 &
							(
								p__partyToAgreement(N1,T)
							)
						 &
							(
								p__partyToAgreement(N2,T)
							)
						 &
							(
								p__d__instance(N1,c__Nation)
							)
						 &
							(
								p__d__instance(N2,c__Nation)
							)
						 &
							(
								~ (
									( N1 = N2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1962, axiom,
	p__d__disjointDecomposition6(c__Sentence,c__Statement,c__Supposition,c__Question,c__Request,c__Order)
).


fof( miloA1963, axiom,
	p__d__subclass(c__Statement,c__Sentence)
).



% ($documentation Statement EnglishLanguage "A &%Sentence that is stated to be true.")


fof( miloA1964, axiom,
	(![STATE,SENTENCE]: 
		(
			(
				(
					(
						p__d__instance(STATE,c__Stating)
					)
				 &
					(
						p__result(STATE,SENTENCE)
					)
				 &
					(
						p__d__instance(SENTENCE,c__Sentence)
					)
				)
			)
			=>
			(
				p__d__instance(SENTENCE,c__Statement)
			)
		)
	)
).


fof( miloA1965, axiom,
	p__d__subclass(c__Fact,c__Statement)
).



% ($documentation Fact EnglishLanguage "The class of &%Statements that are &%True.")


fof( miloA1966, axiom,
	(![FACT]: 
		(
			(
				p__d__instance(FACT,c__Fact)
			)
			=>
			(
				p__truth(FACT,c__True)
			)
		)
	)
).


fof( miloA1967, axiom,
	p__d__subclass(c__Question,c__Sentence)
).



% ($documentation Question EnglishLanguage "An interrogative &%Sentence, a &%Sentence that 
% poses a question.")


fof( miloA1968, axiom,
	(![QUESTION,SENTENCE]: 
		(
			(
				(
					(
						p__d__instance(QUESTION,c__Questioning)
					)
				 &
					(
						p__result(QUESTION,SENTENCE)
					)
				 &
					(
						p__d__instance(SENTENCE,c__Sentence)
					)
				)
			)
			=>
			(
				p__d__instance(SENTENCE,c__Question)
			)
		)
	)
).


fof( miloA1969, axiom,
	p__d__subclass(c__Supposition,c__Sentence)
).



% ($documentation Supposition EnglishLanguage "A &%Sentence that is assumed to be true, possibly 
% just for the sake of argument.")


fof( miloA1970, axiom,
	(![SUPPOSE,SENTENCE]: 
		(
			(
				(
					(
						p__d__instance(SUPPOSE,c__Supposing)
					)
				 &
					(
						p__result(SUPPOSE,SENTENCE)
					)
				 &
					(
						p__d__instance(SENTENCE,c__Sentence)
					)
				)
			)
			=>
			(
				p__d__instance(SENTENCE,c__Supposition)
			)
		)
	)
).


fof( miloA1971, axiom,
	p__d__subclass(c__Request,c__Sentence)
).



% ($documentation Request EnglishLanguage "A &%Sentence that expresses a request for something or 
% that something be done.")


fof( miloA1972, axiom,
	(![REQUEST,SENTENCE]: 
		(
			(
				(
					(
						p__d__instance(REQUEST,c__Requesting)
					)
				 &
					(
						p__result(REQUEST,SENTENCE)
					)
				 &
					(
						p__d__instance(SENTENCE,c__Sentence)
					)
				)
			)
			=>
			(
				p__d__instance(SENTENCE,c__Request)
			)
		)
	)
).


fof( miloA1973, axiom,
	p__d__subclass(c__Order,c__Sentence)
).



% ($documentation Order EnglishLanguage "A &%Sentence that expresses an order for something or 
% that something be done.")


fof( miloA1974, axiom,
	(![ORDER,SENTENCE]: 
		(
			(
				(
					(
						p__d__instance(ORDER,c__Ordering)
					)
				 &
					(
						p__result(ORDER,SENTENCE)
					)
				 &
					(
						p__d__instance(SENTENCE,c__Sentence)
					)
				)
			)
			=>
			(
				p__d__instance(SENTENCE,c__Order)
			)
		)
	)
).


fof( miloA1975, axiom,
	p__d__subclass(c__AudioRecording,c__Recording)
).


% ($comment 
% ;; (comment AudioRecording "In ver 1.111 of Mid-level-ontology.kif , it says that (&%subclass &%AudioRecording &%Text).  This does not seem right.  Deleting that statement.  Creating a parent class called &%Recording which means something that captures a &%Process that happened in real life.  &%AudioRecording and &%VideoRecording will inherit from there.  A &%Photograph is also a still recording of what happened in real life - as opposed to Graphic Art which is more of an &%ArtWork than a &%Recording, so it will also inherit from &%Recording. (09-14-2011)" "KJN")
% )


% ($documentation AudioRecording EnglishLanguage "A representation of sound on some medium such
% as wax cylinder, vinyl record, magnetic tape, CD or flash memory, that is 
% intended to be used in some machine to reproduce that sound.")


fof( miloA1976, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__AudioRecording)
			)
			=>
			(
				(?[EV]: 
					(
						(
							(
								p__d__instance(EV,c__RadiatingSound)
							)
						 &
							(
								p__represents(X,EV)
							)
						 &
							(
								p__capability(c__RadiatingSound,c__patient,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1977, axiom,
	(![RECORD]: 
		(
			(
				p__d__instance(RECORD,c__AudioRecording)
			)
			=>
			(
				(?[INFO,SOUND]: 
					(
						(
							(
								p__d__instance(INFO,c__Proposition)
							)
						 &
							(
								p__containsInformation(RECORD,INFO)
							)
						 &
							(
								p__realization(SOUND,INFO)
							)
						 &
							(
								p__d__instance(SOUND,c__RadiatingSound)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1978, axiom,
	p__subrelation(c__record,c__represents)
).



% ($documentation record EnglishLanguage "(&%record ?OBJ ?PHYS), a more specific relationship
% than &%represents, means that some &%Physical ?PHYS is captured and interpreted into a 
% &%ContentBearingObject that is stored in some &%DataStorageDevice")


% (termFormat EnglishLanguage record "record")

% ($comment 
% ;; (comment record "Adding a more specific relation than &%represents.  While &%represents can be something like a &%Logo that represents a &%Brand, &%record is more strict in the sense that it is an accurate rendering of some &%Process that occurred in real life. (09-14-2011)." "KJN")
% )

% 	($domain record 1 ContentBearingObject)

% 	($domain record 2 Physical)

fof( miloA1981, axiom,
	(![REC,PHYS]: 
		(
			(
				(
					(
						p__d__instance(PHYS,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(REC,c__ContentBearingObject)
					)
				 &
					(
						p__record(REC,PHYS)
					)
				)
			)
			=>
			(
				p__equivalentContentInstance(REC,PHYS)
			)
		)
	)
).


fof( miloA1982, axiom,
	(![PHYS,REC]: 
		(
			(
				(
					(
						p__d__instance(PHYS,c__Physical)
					)
				 &
					(
						p__d__instance(REC,c__ContentBearingObject)
					)
				 &
					(
						p__record(REC,PHYS)
					)
				)
			)
			=>
			(
				(?[DS]: 
					(
						(
							(
								p__d__instance(DS,c__DataStorageDevice)
							)
						 &
							(
								p__stored(REC,DS)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1983, axiom,
	p__d__instance(c__stored,c__BinaryPredicate)
).


fof( miloA1984, axiom,
	p__d__instance(c__stored,c__AntisymmetricRelation)
).


fof( miloA1985, axiom,
	p__d__instance(c__stored,c__TransitiveRelation)
).



% ($documentation stored EnglishLanguage "(&%stored ?REC ?OBJ) means that some 
% &%ContentBearingObject, encoded in some format, is saved in some &%DataStorageDevice
% and can be accessed in some future date.")


% (termFormat EnglishLanguage stored "stored")

% ($comment 
% ;; (comment stored "Adding a stored method that is specific to storing &%ContentBearingObject such as &%SymbolicString, &%Recording, etc. in a &%DataStorageDevice.  Will be changing some axioms to use this instead of other, vaguer ways of describing it." "KJN")
% )

% 	($domain stored 1 ContentBearingObject)

% 	($domain stored 2 DataStorageDevice)

fof( miloA1988, axiom,
	(![D,O]: 
		(
			(
				(
					(
						p__d__instance(D,c__DataStorageDevice)
					)
				 &
					(
						p__d__instance(O,c__ContentBearingObject)
					)
				 &
					(
						p__stored(O,D)
					)
				)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__d__instance(P,c__Writing)
							)
						 &
							(
								p__destination(P,D)
							)
						 &
							(
								p__patient(P,O)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?D ?TIME ?P ?O)
% 		(=> 
% 			(equal ?TIME (WhenFn (stored ?O ?D)))
% 			(holdsDuring ?TIME (modalAttribute (exists ([|] ?P []) (patient ?P ?O)) Possibility))
% 		)
% 	)

fof( miloA1990, axiom,
	p__d__instance(c__Blank,c__RelationalAttribute)
).



% ($documentation Blank EnglishLanguage "A &%RelationalAttribute meaning that there is no &%ContentBearingObject located on the &%Object with this attribute")


fof( miloA1991, axiom,
	(![DSTORE]: 
		(
			(
				(
					(
						p__d__instance(DSTORE,c__DataStorageDevice)
					)
				 &
					(
						p__attribute(DSTORE,c__Blank)
					)
				)
			)
			=>
			(
				(![DATA]: 
					(
						(
							~ (
								p__d__instance(DATA,c__ContentBearingObject)
							)
						 |
							~ (
								p__stored(DATA,DSTORE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1992, axiom,
	p__d__subclass(c__Recording,c__ContentBearingObject)
).



% ($documentation Recording EnglishLanguage "&%Recording refers to a &%ContentBearingObject
% that represents some &%Process that happened in real life")


% (termFormat EnglishLanguage Recording "recording")

fof( miloA1993, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__Recording)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__d__instance(P,c__Process)
							)
						 &
							(
								p__record(R,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1994, axiom,
	p__d__subclass(c__MusicRecording,c__AudioRecording)
).



% ($documentation MusicRecording EnglishLanguage "&%MusicRecording refers to an &%AudioRecording
% of the &%Process of &%MakingMusic.")


% (termFormat EnglishLanguage MusicRecording "music recording")

fof( miloA1995, axiom,
	(![M]: 
		(
			(
				p__d__instance(M,c__MusicRecording)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__d__instance(P,c__MakingMusic)
							)
						 &
							(
								p__record(M,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1996, axiom,
	p__d__subclass(c__SheetMusic,c__ContentBearingObject)
).



% ($documentation SheetMusic EnglishLanguage "&%SheetMusic refers to the &%ContentBearingObject
% that contains a representation of a &%MusicalComposition, using different musical 
% symbols")


% (termFormat EnglishLanguage SheetMusic "sheet music")

fof( miloA1997, axiom,
	(![SM]: 
		(
			(
				p__d__instance(SM,c__SheetMusic)
			)
			=>
			(
				(?[MC]: 
					(
						(
							(
								p__d__instance(MC,c__MusicalComposition)
							)
						 &
							(
								p__containsInformation(SM,MC)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA1998, axiom,
	p__d__subclass(c__MusicText,c__Text)
).



% ($documentation MusicText EnglishLanguage "A &%Text in a &%Language that represents a form
% of music.")


fof( miloA1999, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__MusicText)
			)
			=>
			(
				p__capability(c__MakingMusic,c__patient,X)
			)
		)
	)
).


fof( miloA2000, axiom,
	p__d__subclass(c__VideoRecording,c__Recording)
).



% ($documentation VideoRecording EnglishLanguage "A representation of video on some medium such
% as film, videotape or DVD.  Instances of this class are also commonly
% instances of &%AudioRecording.")


fof( miloA2001, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__VideoRecording)
			)
			=>
			(
				(?[EV]: 
					(
						(
							(
								p__d__instance(EV,c__Process)
							)
						 &
							(
								p__represents(X,EV)
							)
						 &
							(
								p__capability(c__RadiatingLight,c__patient,X)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?AUDIO ?VIDEO)
% 		(=> 
% 			($instance ?VIDEO VideoRecording)
% 			(modalAttribute (exists ([|] ?AUDIO []) (and ([|] ($instance ?AUDIO AudioRecording) ([|] (part ?AUDIO ?VIDEO) [])))) Possibility)
% 		)
% 	)

fof( miloA2003, axiom,
	p__d__subclass(c__MediaSystem,c__Collection)
).



% ($documentation MediaSystem EnglishLanguage "&%MediaSystem is a &%Collection of 
% components that enable the &%RadiatingSound of &%AudioRecording and &%RadiatingLight 
% of &%VideoRecording")


% (termFormat EnglishLanguage MediaSystem "media system")

% 	(forall (?VIDEO ?RL ?AUDIO ?RS ?PLAYER)
% 		(=> 
% 			($instance ?PLAYER MediaSystem)
% 			(hasPurpose ?PLAYER (or ([|] (exists ([|] ?VIDEO ([|] ?RL [])) (and ([|] ($instance ?VIDEO VideoRecording) ([|] ($instance ?RL RadiatingLight) ([|] (patient ?RL ?VIDEO) ([|] (instrument ?RL ?PLAYER) [])))))) ([|] (exists ([|] ?AUDIO ([|] ?RS [])) (and ([|] ($instance ?AUDIO AudioRecording) ([|] ($instance ?RS RadiatingSound) ([|] (patient ?RS ?AUDIO) ([|] (instrument ?RS ?PLAYER) [])))))) []))))
% 		)
% 	)

% ($comment 
% ;; KJN: Moving this to Media.kif as that is where CompactDisc is defined.          
% ;;($subclass AudioCDSystem MediaSystem)
% ;;(documentation AudioCDSystem EnglishLanguage "&%AudioCDSystem is a type of &%MediaSystem that
% ;;plays &%AudioRecording")
% ;;(termFormat EnglishLanguage AudioCDSystem "cd player")
% ;;
% ;;(=>
% ;;  ($instance ?PLAYER AudioCDSystem)
% ;;  (hasPurpose ?PLAYER
% ;;    (exists (?DISC ?AUDIO ?RS ?DIGITAL ?PROC)
% ;;      (and
% ;;        (instrument ?PROC ?PLAYER)
% ;;       (patient ?PROC ?DISC)
% ;;        ($instance ?DISC CompactDisc)
% ;;        ($instance ?AUDIO AudioRecording)
% ;;        (represents ?DIGITAL ?AUDIO)
% ;;        (part ?DIGITAL ?DISC)
% ;;        ($instance ?RS RadiatingSound)
% ;;        (subProcess ?RS ?PROC)
% ;;        (instrument ?RS ?PLAYER)
% ;;        (patient ?RS ?DISC)))))
% ;;
% ;; KJN: Moving this to Media.kif as that is where DVD is defined.          
% ;;($subclass DVDSystem MediaSystem)
% ;;(documentation DVDSystem EnglishLanguage "&%DVDSystem is a type of &%MediaSystem
% ;;that is able to play the contents of &%VideoRecording and &%AudioRecording stored
% ;;in a &%DVD")
% ;;(termFormat EnglishLanguage DVDSystem "dvd player")
% ;;
% ;;(=>
% ;;  ($instance ?X DVDSystem)
% ;;  (hasPurpose ?X
% ;;    (exists (?DVD ?PROC)
% ;;      (and
% ;;        ($instance ?DVD DVD)
% ;;        (instrument ?PROC ?X)
% ;;        (patient ?PROC ?DVD)
% ;;        (or
% ;;          (exists (?VIDEO ?DVIDEO ?RL)
% ;;            (and
% ;;              ($instance ?VIDEO VideoRecording)
% ;;              (represents ?DVIDEO ?VIDEO)
% ;;              (part ?DVIDEO ?DVD)
% ;;              ($instance ?RL RadiatingLight)
% ;;              (subProcess ?RL ?PROC)
% ;;              (instrument ?RL ?X)
% ;;              (patient ?RL ?VIDEO)))
% ;;          (exists (?AUDIO ?DAUDIO ?RS)
% ;;            (and        
% ;;              ($instance ?AUDIO AudioRecording)
% ;;              (represents ?DAUDIO ?AUDIO)
% ;;              (part ?DAUDIO ?DVD)
% ;;              ($instance ?RS RadiatingSound)
% ;;              (subProcess ?RS ?PROC)
% ;;              (instrument ?RS ?X)
% ;;              (patient ?RL ?AUDIO))))))))
% ;;
% ;; KJN: Moving this to Media as VHSCassette is defined there.
% ;;($subclass VCRSystem MediaSystem)
% ;;(documentation VCRSystem EnglishLanguage "&%VCRSystem is a type of &%MediaSystem that
% ;;can play &%AudioRecording and &%VideoRecording that is stored in a &%VHS")
% ;;(termFormat EnglishLanguage VCRSystem "vcr system")
% ;;
% ;;(=>
% ;; ($instance ?VCR VCRSystem)
% ;;  (hasPurpose ?VCR
% ;;    (exists (?VHS ?PROC ?VIDEO ?AVIDEO ?RL ?AUDIO ?AAUDIO ?RS)
% ;;      (and
% ;;        ($instance ?VHS VHSCassette)
% ;;        (instrument ?PROC ?VCR)
% ;;        (patient ?PROC ?VHS)
% ;;        ($instance ?VIDEO VideoRecording)
% ;;        (represents ?AVIDEO ?VIDEO)
% ;;        (part ?VIDEO ?VHS)
% ;;        ($instance ?AUDIO AudioRecording)
% ;;        (represents ?AAUDIO ?AUDIO)
% ;;        (part ?AAUDIO ?AVIDEO)
% ;;        (part ?AUDIO ?VHS)
% ;;        ($instance ?RL RadiatingLight)
% ;;        (patient ?RL ?VIDEO)
% ;;        (subProcess ?RL ?PROC)
% ;;        ($instance ?RS RadiatingSound)
% ;;        (patient ?RS ?AUDIO)
% ;;        (subProcess ?RS ?PROC)))))
% )

fof( miloA2005, axiom,
	p__d__subclass(c__Label,c__Text)
).



% ($documentation Label EnglishLanguage "A very brief &%Text that is attached to an &%Object 
% and that indicates very specific information about the &%Object, e.g. its 
% name, its &%monetaryValue, etc.")


fof( miloA2006, axiom,
	(![LABEL]: 
		(
			(
				p__d__instance(LABEL,c__Label)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__SelfConnectedObject)
							)
						 &
							(
								p__connected(LABEL,OBJ)
							)
						 &
							(
								p__refers(LABEL,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2007, axiom,
	p__d__subclass(c__FormText,c__Text)
).



% ($documentation FormText EnglishLanguage "A page or set of pages containing spaces where 
% information is to be entered by an &%Agent.")


fof( miloA2008, axiom,
	p__d__subclass(c__TestForm,c__FormText)
).


fof( miloA2009, axiom,
	p__d__subclass(c__TestForm,c__MeasuringDevice)
).



% ($documentation TestForm EnglishLanguage "A &%FormText which is intended to measure some aspect 
% of the cognitive capabilities, e.g. intelligence or knowledge of a domain, 
% of the person taking the test.")


% ($comment 
% ;; KJN: Moving all tax-related stuff to FinancialOntology.kif as the definition for Tax is there.
% ;;($subclass TaxReturn FormText)
% ;;(documentation TaxReturn EnglishLanguage "A &%FormText that is used for calculating the amount 
% ;;of income tax owed in a given year.")
% ;;
% ;;(=>
% ;; ($instance ?RETURN TaxReturn)
% ;; (hasPurpose ?RETURN 
% ;;    (exists (?CALCULATE ?AMOUNT ?TAX)
% ;;      (and
% ;;        ($instance ?CALCULATE Calculating)
% ;;        (instrument ?CALCULATE ?RETURN)
% ;;        (result ?CALCULATE ?AMOUNT)
% ;;        (transactionAmount ?TAX ?AMOUNT)
% ;;        ($instance ?TAX Tax)))))
% ;;
% ;;($subclass IncomeTax Tax)
% ;;(documentation IncomeTax EnglishLanguage "A &%Tax on annual income.")
% ;;
% ;;($subclass DutyTax Tax)
% ;;(documentation DutyTax EnglishLanguage "A &%Tax that is levied on imports and/or exports.")
% ;;(=>
% ;;  (and
% ;;    ($instance ?X DutyTax)
% ;;    (refers ?X ?OBJ)
% ;;    (patient ?X ?OBJ))
% ;;  (exists (?T ?N1 ?N2)
% ;;    (and
% ;;      ($instance ?T Transfer)
% ;;      (patient ?T ?OBJ)
% ;;      (origin ?T ?N1)
% ;;      (destination ?T ?N2)
% ;;      ($instance ?N1 Nation)
% ;;      ($instance ?N2 Nation)
% ;;      (not (equal ?N1 ?N2))
% ;;      (earlier (WhenFn ?T) (WhenFn ?X))
% ;;      (causes ?T ?X))))
% )

fof( miloA2010, axiom,
	p__d__subclass(c__Ballot,c__FormText)
).



% ($documentation Ballot EnglishLanguage "A &%FormText which is used in &%Voting.  A list of 
% candidates is printed on the form, and the voter selects the candidate he/she 
% wants to vote for.")


% 	(forall (?V ?B)
% 		(=> 
% 			($instance ?B Ballot)
% 			(hasPurpose ?B (exists ([|] ?V []) (and ([|] ($instance ?V Voting) ([|] (instrument ?V ?B) [])))))
% 		)
% 	)

fof( miloA2012, axiom,
	p__d__subclass(c__Application,c__FormText)
).



% ($documentation Application EnglishLanguage "A &%FormText whose purpose is to obtain admission 
% to an &%Organization or to receive assistance from an &%Organization.")


% 	(forall (?APP ?JOIN ?GIVE)
% 		(=> 
% 			($instance ?APP Application)
% 			(hasPurpose ?APP (exists ([|] ?JOIN ([|] ?GIVE [])) (or ([|] ($instance ?JOIN JoiningAnOrganization) ([|] ($instance ?GIVE UnilateralGiving) [])))))
% 		)
% 	)

fof( miloA2014, axiom,
	p__d__subclass(c__Announcement,c__FactualText)
).



% ($documentation Announcement EnglishLanguage "Any &%Text which contains information about 
% an event in the future.")


fof( miloA2015, axiom,
	(![A]: 
		(
			(
				p__d__instance(A,c__Announcement)
			)
			=>
			(
				(?[CD,I]: 
					(
						(
							(
								p__d__instance(CD,c__ContentDevelopment)
							)
						 &
							(
								p__result(CD,A)
							)
						 &
							(
								p__refers(A,I)
							)
						 &
							(
								p__d__instance(I,c__SocialInteraction)
							)
						 &
							(
								p__earlier(f__WhenFn1(CD),f__WhenFn1(I))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2016, axiom,
	p__d__subclass(c__PerformanceProgram,c__FactualText)
).



% ($documentation PerformanceProgram EnglishLanguage "A &%Text that describes the events 
% and/or participants in a &%Performance.")


fof( miloA2017, axiom,
	(![PROG]: 
		(
			(
				p__d__instance(PROG,c__PerformanceProgram)
			)
			=>
			(
				(?[PERF,PROP]: 
					(
						(
							(
								p__d__instance(PROP,c__Proposition)
							)
						 &
							(
								p__containsInformation(PROG,PROP)
							)
						 &
							(
								p__realization(PERF,PROP)
							)
						 &
							(
								p__d__instance(PERF,c__Performance)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2018, axiom,
	p__d__subclass(c__MotionPictureShot,c__MotionPicture)
).



% ($documentation MotionPictureShot EnglishLanguage "A unit of action in a &%MotionPicture, a 
% &%MotionPictureShot is a sequence of images which are captured by a single 
% camera without interruption.")


fof( miloA2019, axiom,
	(![SHOT]: 
		(
			(
				p__d__instance(SHOT,c__MotionPictureShot)
			)
			=>
			(
				(?[MOVIE]: 
					(
						(
							(
								p__d__instance(MOVIE,c__MotionPicture)
							)
						 &
							(
								p__subsumesContentInstance(MOVIE,SHOT)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: MotionPictureShot is subclass of Object, whereas the first argument of instrument is Process (Object and Process are disjoint)
% ;;
% ;;(=>
% ;;  ($instance ?SHOT MotionPictureShot)
% ;;  (exists (?C)
% ;;    (and
% ;;       ($instance ?C Camera)
% ;;       (instrument ?SHOT ?C)
% ;;       (not
% ;;         (exists (?C2)
% ;;           (and
% ;;             ($instance ?C2 Camera)
% ;;             (not (equal ?C ?C2))
% ;;             (instrument ?SHOT ?C2)))))))
% )

fof( miloA2020, axiom,
	p__d__subclass(c__MotionPictureScene,c__MotionPicture)
).



% ($documentation MotionPictureScene EnglishLanguage "A discrete part of a &%MotionPicture which is set in 
% the same time period and the same location.")


fof( miloA2021, axiom,
	(![MOVIE,S]: 
		(
			(
				(
					(
						p__d__instance(MOVIE,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(S,c__MotionPictureScene)
					)
				)
			)
			=>
			(
				(?[M]: 
					(
						(
							(
								p__d__instance(M,c__MotionPicture)
							)
						 &
							(
								p__subsumesContentInstance(MOVIE,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2022, axiom,
	p__d__subclass(c__Documentary,c__MotionPicture)
).


fof( miloA2023, axiom,
	p__d__subclass(c__Documentary,c__FactualText)
).



% ($documentation Documentary EnglishLanguage "A &%MotionPicture which purports to represent the 
% facts about a person, event, etc.")


fof( miloA2024, axiom,
	p__d__subclass(c__BroadcastProgram,c__Series)
).



% ($documentation BroadcastProgram EnglishLanguage "A &%Series of episodes that are broadcast 
% on television or radio.")


fof( miloA2025, axiom,
	(![PROGRAM]: 
		(
			(
				p__d__instance(PROGRAM,c__BroadcastProgram)
			)
			=>
			(
				(?[BROADCAST]: 
					(
						(
							(
								p__d__instance(BROADCAST,c__Broadcasting)
							)
						 &
							(
								p__patient(BROADCAST,PROGRAM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2026, axiom,
	p__d__subclass(c__NewsProgram,c__BroadcastProgram)
).



% ($documentation NewsProgram EnglishLanguage "A &%BroadcastProgram that is devoted to 
% reporting the latest events in a city, region, nation or the world at 
% large.")


fof( miloA2027, axiom,
	(![PROGRAM,NUMBER,EPISODE]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(EPISODE,c__Text)
					)
				 &
					(
						p__d__subclass(PROGRAM,c__NewsProgram)
					)
				 &
					(
						( EPISODE = f__SeriesVolumeFn2(PROGRAM,NUMBER) )
					)
				)
			)
			=>
			(
				(?[DISSEMINATE]: 
					(
						(
							(
								p__d__instance(DISSEMINATE,c__Disseminating)
							)
						 &
							(
								p__patient(DISSEMINATE,EPISODE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2028, axiom,
	p__d__instance(c__SeriesVolumeFn,c__BinaryFunction)
).


fof( miloA2029, axiom,
	p__d__instance(c__SeriesVolumeFn,c__PartialValuedRelation)
).


% 	($domainSubclass SeriesVolumeFn 1 Series)

% 	($domain SeriesVolumeFn 2 PositiveInteger)

% 	($rangeSubclass SeriesVolumeFn Text)


% ($documentation SeriesVolumeFn EnglishLanguage "A &%BinaryFunction that maps a type of &%Series 
% (e.g. the Encyclopedia_Britannica or the Popular_Mechanics periodical) and a 
% number to the volumes of the text type designated by the number.")


fof( miloA2033, axiom,
	(![TEXT,INT2,INT1,VOLUME1,VOLUME2,CBO1,CBO2,PUB1,PUB2,DATE1,DATE2]: 
		(
			(
				(
					(
						p__d__instance(INT1,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(VOLUME1,c__Text)
					)
				 &
					(
						p__d__instance(INT2,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(VOLUME2,c__Text)
					)
				 &
					(
						p__d__instance(DATE1,c__Day)
					)
				 &
					(
						p__d__instance(DATE2,c__Day)
					)
				 &
					(
						p__d__subclass(TEXT,c__Periodical)
					)
				 &
					(
						( f__SeriesVolumeFn2(TEXT,INT1) = VOLUME1 )
					)
				 &
					(
						( f__SeriesVolumeFn2(TEXT,INT2) = VOLUME2 )
					)
				 &
					(
						p__greaterThan(INT2,INT1)
					)
				 &
					(
						p__d__instance(PUB1,c__Publication)
					)
				 &
					(
						p__d__instance(PUB2,c__Publication)
					)
				 &
					(
						p__d__instance(CBO1,VOLUME1)
					)
				 &
					(
						p__d__instance(CBO2,VOLUME2)
					)
				 &
					(
						p__patient(PUB1,CBO1)
					)
				 &
					(
						p__patient(PUB2,CBO2)
					)
				 &
					(
						p__date(PUB1,DATE1)
					)
				 &
					(
						p__date(PUB2,DATE2)
					)
				)
			)
			=>
			(
				p__before(f__EndFn1(DATE1),f__EndFn1(DATE2))
			)
		)
	)
).


fof( miloA2034, axiom,
	(![NUMBER,SERIES,VOLUME]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(SERIES,c__Series)
					)
				 &
					(
						p__d__subclass(VOLUME,c__Text)
					)
				 &
					(
						( f__SeriesVolumeFn2(SERIES,NUMBER) = VOLUME )
					)
				)
			)
			=>
			(
				p__subsumesContentClass(SERIES,VOLUME)
			)
		)
	)
).


fof( miloA2035, axiom,
	p__d__subclass(c__Series,c__Text)
).



% ($documentation Series EnglishLanguage "A &%Text consisting of multiple self-contained units.  
% Some examples are an encyclopedia containing a couple dozen volumes, a television 
% series made up of many episodes, a film serial, etc.")


fof( miloA2036, axiom,
	(![SERIES]: 
		(
			(
				p__d__instance(SERIES,c__Series)
			)
			=>
			(
				(?[BOOK1,BOOK2]: 
					(
						(
							(
								p__d__instance(BOOK1,c__Book)
							)
						 &
							(
								p__d__instance(BOOK2,c__Book)
							)
						 &
							(
								p__subsumesContentInstance(SERIES,BOOK1)
							)
						 &
							(
								p__subsumesContentInstance(SERIES,BOOK2)
							)
						 &
							(
								~ (
									( BOOK1 = BOOK2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2037, axiom,
	p__d__instance(c__PeriodicalIssueFn,c__BinaryFunction)
).


fof( miloA2038, axiom,
	p__d__instance(c__PeriodicalIssueFn,c__PartialValuedRelation)
).


% 	($domainSubclass PeriodicalIssueFn 1 Periodical)

% 	($domain PeriodicalIssueFn 2 PositiveInteger)

% 	($rangeSubclass PeriodicalIssueFn Periodical)


% ($documentation PeriodicalIssueFn EnglishLanguage "A &%BinaryFunction that maps a subclass of 
% &%Periodical and a number to all of the issues of the &%Periodical corresponding 
% to the number.") 


fof( miloA2042, axiom,
	(![NUMBER,PERIODICAL,ISSUE]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(PERIODICAL,c__Periodical)
					)
				 &
					(
						p__d__subclass(ISSUE,c__Periodical)
					)
				 &
					(
						( f__PeriodicalIssueFn2(PERIODICAL,NUMBER) = ISSUE )
					)
				)
			)
			=>
			(
				p__subsumesContentClass(PERIODICAL,ISSUE)
			)
		)
	)
).


fof( miloA2043, axiom,
	p__d__subclass(c__Periodical,c__Series)
).



% ($documentation Periodical EnglishLanguage "A &%Series whose elements are published separately 
% and on a periodic basis.")


fof( miloA2044, axiom,
	p__d__subclass(c__Article,c__Text)
).


fof( miloA2045, axiom,
	p__d__disjoint(c__Article,c__Book)
).



% ($documentation Article EnglishLanguage "A relatively short &%Text that either is unbound or is 
% bound with other &%Articles in a &%Book.") 


fof( miloA2046, axiom,
	(![ARTICLE1,BOOK]: 
		(
			(
				(
					(
						p__d__instance(ARTICLE1,c__Article)
					)
				 &
					(
						p__d__instance(BOOK,c__Book)
					)
				 &
					(
						p__subsumesContentInstance(BOOK,ARTICLE1)
					)
				)
			)
			=>
			(
				(?[ARTICLE2]: 
					(
						(
							(
								p__d__instance(ARTICLE2,c__Article)
							)
						 &
							(
								~ (
									( ARTICLE2 = ARTICLE1 )
								)
							)
						 &
							(
								p__subsumesContentInstance(BOOK,ARTICLE2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2047, axiom,
	p__d__subclass(c__Chapter,c__Article)
).



% ($documentation Chapter EnglishLanguage "A numbered and/or titled
% section of a &%Book, which is typically indicated in a table of
% contents for the &%Book.")


fof( miloA2048, axiom,
	(![CHAPTER]: 
		(
			(
				p__d__instance(CHAPTER,c__Chapter)
			)
			=>
			(
				(?[BOOK]: 
					(
						(
							(
								p__d__instance(BOOK,c__Book)
							)
						 &
							(
								p__subsumesContentInstance(BOOK,CHAPTER)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2049, axiom,
	p__subrelation(c__titles,c__names)
).


% 	($domain titles 1 SymbolicString)

% 	($domainSubclass titles 2 ContentBearingPhysical)


% ($documentation titles EnglishLanguage "A &%BinaryPredicate used to
% indicate the title of a &%ContentBearingPhysical.  Note that the
% second argument type restriction is a subclass, rather than an
% instance, of &%ContentBearingPhysical.  Thus, the title
% Murder_on_the_Orient_Express corresponds to a large class of &%Books,
% and not just to a single copy of the book.")



% ($documentation formerName EnglishLanguage "(formerName ?NAME ?THING) means that the 
% string ?NAME is a name formerly used for ?THING.")


fof( miloA2052, axiom,
	p__subrelation(c__formerName,c__names)
).


fof( miloA2053, axiom,
	p__d__instance(c__familyName,c__BinaryPredicate)
).


fof( miloA2054, axiom,
	p__d__instance(c__familyName,c__AsymmetricRelation)
).


% 	($domain familyName 1 SymbolicString)

% 	($domain familyName 2 Human)

fof( miloA2057, axiom,
	p__subrelation(c__familyName,c__names)
).



% ($documentation familyName EnglishLanguage "(&%familyName ?STRING
% ?HUMAN) means that the &%SymbolicString ?STRING denotes a non-optional
% name that ?HUMAN has inherited by virtue of being born into a
% particular family (kin group).  surname is another word for this type
% of name.  Cf. &%givenName.")



% ($documentation middleName EnglishLanguage "(middleName ?CHAR ?INDIV) means that the 
% &%SymbolicString ?CHAR contains the middle name of the &%Human ?INDIV.")


fof( miloA2058, axiom,
	p__d__instance(c__middleName,c__BinaryPredicate)
).


fof( miloA2059, axiom,
	p__d__instance(c__middleName,c__AsymmetricRelation)
).


% 	($domain middleName 1 SymbolicString)

% 	($domain middleName 2 Human)

fof( miloA2062, axiom,
	p__subrelation(c__middleName,c__names)
).


fof( miloA2063, axiom,
	p__d__instance(c__givenName,c__BinaryPredicate)
).


fof( miloA2064, axiom,
	p__d__instance(c__givenName,c__AsymmetricRelation)
).


fof( miloA2065, axiom,
	p__subrelation(c__givenName,c__names)
).


% 	($domain givenName 1 SymbolicString)

% 	($domain givenName 2 Human)


% ($documentation givenName EnglishLanguage "(&%givenName ?STRING ?HUMAN)
% means that ?STRING is a name selected for ?HUMAN, usually from among
% many options, as opposed to a mandatory name (cf. &%familyName) that
% ?HUMAN has inherited by virtue of being born into a certain kin group,
% caste, or occupation.")


fof( miloA2068, axiom,
	p__d__instance(c__localLongName,c__BinaryPredicate)
).


% 	($domain localLongName 1 SymbolicString)

% 	($domain localLongName 2 Entity)


% ($documentation localLongName EnglishLanguage "(localLongName ?NAME ?THING) means that 
% the string ?NAME is the long form of the name used for ?THING in its local 
% area or language.")


fof( miloA2071, axiom,
	p__subrelation(c__localLongName,c__names)
).



% ($documentation localShortName EnglishLanguage "(localShortName ?NAME ?THING) means that 
% the string ?NAME is the short form of the name used for ?THING in its 
% local area or language.")


fof( miloA2072, axiom,
	p__subrelation(c__localShortName,c__names)
).


fof( miloA2073, axiom,
	p__d__instance(c__localShortName,c__BinaryPredicate)
).


% 	($domain localShortName 1 SymbolicString)

% 	($domain localShortName 2 Entity)

fof( miloA2076, axiom,
	p__d__subclass(c__Message,c__FactualText)
).



% ($documentation Message EnglishLanguage "A &%FactualText which is intended to be delivered to 
% and read by a &%Human, &%GroupOfPeople or &%Organization.")


fof( miloA2077, axiom,
	p__d__subclass(c__Report,c__FactualText)
).


fof( miloA2078, axiom,
	p__d__subclass(c__Report,c__Article)
).



% ($documentation Report EnglishLanguage "A relatively brief &%FactualText, often it 
% describes the findings of a study or experiment, or a series of 
% observations.")


fof( miloA2079, axiom,
	p__d__subclass(c__Newspaper,c__Periodical)
).



% ($documentation Newspaper EnglishLanguage "A &%Periodical that is published on a daily or 
% weekly basis, that contains &%Reports, and whose issues are printed on 
% newsprint paper.")


fof( miloA2080, axiom,
	(![PAPER]: 
		(
			(
				p__d__instance(PAPER,c__Newspaper)
			)
			=>
			(
				(?[REPORT]: 
					(
						(
							(
								p__d__instance(REPORT,c__Report)
							)
						 &
							(
								p__subsumesContentInstance(PAPER,REPORT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2081, axiom,
	(![WEEK,PAPER]: 
		(
			(
				(
					(
						p__d__subclass(PAPER,c__Newspaper)
					)
				 &
					(
						p__d__instance(WEEK,c__Week)
					)
				)
			)
			=>
			(
				(?[PUBLICATION,ISSUE]: 
					(
						(
							(
								p__d__instance(PUBLICATION,c__Publication)
							)
						 &
							(
								p__temporalPart(f__WhenFn1(PUBLICATION),WEEK)
							)
						 &
							(
								p__result(PUBLICATION,ISSUE)
							)
						 &
							(
								p__d__instance(ISSUE,PAPER)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2082, axiom,
	p__d__subclass(c__Magazine,c__Periodical)
).



% ($documentation Magazine EnglishLanguage "A &%Periodical that is softbound and printed on 
% glossy paper.")


fof( miloA2083, axiom,
	p__d__subclass(c__Letter,c__FactualText)
).



% ($documentation Letter EnglishLanguage "A brief message which is intended to be mailed 
% to a person or &%Organization.")


fof( miloA2084, axiom,
	p__d__subclass(c__Holiday,c__TimeInterval)
).



% ($documentation Holiday EnglishLanguage "&%Holiday is the class of time periods that are 
% observed as holidays in a country, culture, or religion.  Holidays may 
% recur annually on the same date, or they may be moveable, for example, 
% &%UnitedStatesThanksgivingDay falls on the last &%Thursday of each 
% &%November.") 


fof( miloA2085, axiom,
	p__d__subclass(c__FixedHoliday,c__Holiday)
).



% ($documentation FixedHoliday EnglishLanguage "&%FixedHoliday is the class of &%Holidays 
% whose observance is fixed to recurrences of the calendar day that the 
% holiday commemorates.  See &%commemoratesDate.") 


fof( miloA2086, axiom,
	p__d__subclass(c__MoveableHoliday,c__Holiday)
).



% ($documentation MoveableHoliday EnglishLanguage "&%MoveableHoliday is the class of 
% &%Holidays whose observance is not fixed to recurrences of any particular 
% calendar day.  For example, &%UnitedStatesMemorialDay is observed on the 
% last &%Monday of &%May.") 


fof( miloA2087, axiom,
	p__d__subclass(c__HolidayCard,c__ContentBearingObject)
).



% ($documentation HolidayCard EnglishLanguage "A stiff piece of &%Paper, usually folded over, which 
% is sent to others in celebration of a &%Holiday.")


% 	(forall (?C)
% 		(=> 
% 			($instance ?C HolidayCard)
% 			(material Paper ?C)
% 		)
% 	)

fof( miloA2089, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__HolidayCard)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__Holiday)
							)
						 &
							(
								p__refers(C,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2090, axiom,
	p__d__subclass(c__HistoricalAccount,c__NarrativeText)
).


fof( miloA2091, axiom,
	p__d__subclass(c__HistoricalAccount,c__FactualText)
).



% ($documentation HistoricalAccount EnglishLanguage "A &%FactualAccount that describes 
% significant events that occurred in the past.")


fof( miloA2092, axiom,
	(![ACCOUNT]: 
		(
			(
				p__d__instance(ACCOUNT,c__HistoricalAccount)
			)
			=>
			(
				(?[EVENT]: 
					(
						(
							(
								p__d__instance(EVENT,c__Physical)
							)
						 &
							(
								p__represents(ACCOUNT,EVENT)
							)
						 &
							(
								p__earlier(f__WhenFn1(EVENT),f__WhenFn1(ACCOUNT))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2093, axiom,
	p__d__subclass(c__Biography,c__HistoricalAccount)
).



% ($documentation Biography EnglishLanguage "A &%HistoricalAccount which is concerned 
% with the life of a single &%Human.")


fof( miloA2094, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Biography)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__Human)
							)
						 &
							(
								p__refers(B,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2095, axiom,
	p__d__subclass(c__FinancialText,c__Report)
).



% ($documentation FinancialText EnglishLanguage "A &%Report about monetary figures.  This 
% class covers &%FinancialBills, balance sheets, account statements, etc.")


fof( miloA2096, axiom,
	p__d__subclass(c__FinancialBill,c__FinancialText)
).



% ($documentation FinancialBill EnglishLanguage "A brief statement that the stated amount 
% of money is owed by the person to whom the bill is delivered.")


fof( miloA2097, axiom,
	p__d__subclass(c__ReferenceBook,c__Book)
).


fof( miloA2098, axiom,
	p__d__subclass(c__ReferenceBook,c__FactualText)
).



% ($documentation ReferenceBook EnglishLanguage "A &%Book which is not intended to be read 
% from cover to cover, but which is meant to be consulted to answer specific 
% factual questions, e.g. about the meaning of a word, the location of a 
% country, etc.")


fof( miloA2099, axiom,
	p__d__subclass(c__Dictionary,c__ReferenceBook)
).



% ($documentation Dictionary EnglishLanguage "A &%ReferenceBook which specifies the meanings 
% of the &%Words of a &%Language.")


fof( miloA2100, axiom,
	p__d__subclass(c__NarrativeText,c__Text)
).


% 	($partition NarrativeText @(FictionalText,HistoricalAccount))


% ($documentation NarrativeText EnglishLanguage "Any &%Text that tells a story, whether true 
% or false.")


fof( miloA2102, axiom,
	p__d__subclass(c__ShortStory,c__FictionalText)
).


fof( miloA2103, axiom,
	p__d__subclass(c__ShortStory,c__Article)
).



% ($documentation ShortStory EnglishLanguage "A brief work of fiction, often bound with other 
% short stories in a &%Book or &%Periodical.")


fof( miloA2104, axiom,
	p__d__subclass(c__MysteryStory,c__FictionalText)
).



% ($documentation MysteryStory EnglishLanguage "A &%FictionalText whose central plot element is a 
% crime of some sort, usually a murder.")


fof( miloA2105, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__MysteryStory)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__CriminalAction)
							)
						 &
							(
								p__refers(S,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2106, axiom,
	p__d__subclass(c__Novel,c__FictionalText)
).


fof( miloA2107, axiom,
	p__d__subclass(c__Novel,c__Book)
).



% ($documentation Novel EnglishLanguage "A &%FictionalText that is larger than a &%ShortStory 
% and that is bound independently (i.e. it is a &%Book).")


fof( miloA2108, axiom,
	p__d__subclass(c__DramaticPlay,c__FictionalText)
).



% ($documentation DramaticPlay EnglishLanguage "A &%FictionalText that is intended to be realized 
% as &%DramaticActing.")


% 	(forall (?PLAY ?ACT ?PROP)
% 		(=> 
% 			($instance ?PLAY DramaticPlay)
% 			(hasPurpose ?PLAY (exists ([|] ?ACT ([|] ?PROP [])) (and ([|] ($instance ?ACT DramaticActing) ([|] (containsInformation ?PLAY ?PROP) ([|] (realization ?ACT ?PROP) []))))))
% 		)
% 	)

fof( miloA2110, axiom,
	p__d__subclass(c__Opera,c__DramaticPlay)
).



% ($documentation Opera EnglishLanguage "A &%DramaticPlay that is set to &%MakingMusic.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of realization is Proposition, which is subclass of Abstract, and Opera is subclass of Object (Abstract and Object are disjoint)
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?OPERA Opera)
% ;;      (realization ?ACT ?OPERA))
% ;;   ($instance ?ACT MakingMusic))
% )

fof( miloA2111, axiom,
	p__d__instance(c__FrenchLanguage,c__SpokenHumanLanguage)
).


fof( miloA2112, axiom,
	p__d__instance(c__FrenchLanguage,c__NaturalLanguage)
).



% ($documentation FrenchLanguage EnglishLanguage "A &%Romance language that is the official language 
% of France and Belgium, and is widely spoken in Africa.")


fof( miloA2113, axiom,
	p__d__instance(c__GermanLanguage,c__SpokenHumanLanguage)
).


fof( miloA2114, axiom,
	p__d__instance(c__GermanLanguage,c__NaturalLanguage)
).



% ($documentation GermanLanguage EnglishLanguage "A &%Germanic language that is spoken primarily in 
% Germany and Austria.")


fof( miloA2115, axiom,
	p__d__instance(c__GreekLanguage,c__SpokenHumanLanguage)
).


fof( miloA2116, axiom,
	p__d__instance(c__GreekLanguage,c__NaturalLanguage)
).



% ($documentation GreekLanguage EnglishLanguage "An Indo-European language that is spoken in &%Greece.")


fof( miloA2117, axiom,
	p__d__instance(c__LatinLanguage,c__SpokenHumanLanguage)
).


fof( miloA2118, axiom,
	p__d__instance(c__LatinLanguage,c__NaturalLanguage)
).



% ($documentation LatinLanguage EnglishLanguage "A &%Language that was spoken in ancient &%Rome and 
% is still the official language of the &%Vatican.")


fof( miloA2119, axiom,
	p__d__instance(c__RussianLanguage,c__SpokenHumanLanguage)
).


fof( miloA2120, axiom,
	p__d__instance(c__RussianLanguage,c__NaturalLanguage)
).



% ($documentation RussianLanguage EnglishLanguage "A Slavic language that is spoken in &%Russia.")


fof( miloA2121, axiom,
	p__d__instance(c__SpanishLanguage,c__SpokenHumanLanguage)
).


fof( miloA2122, axiom,
	p__d__instance(c__SpanishLanguage,c__NaturalLanguage)
).



% ($documentation SpanishLanguage EnglishLanguage "A &%Romance language that is the official language 
% of Spain, Mexico, and many Central and South American countries.")


% 	(forall (?H)
% 		(<=> 
% 			(attribute ?H LiteracyAttribute)
% 			(and 
% 				(hasSkill Reading ?H)
% 				(hasSkill Writing ?H)
% 			)
% 		)
% 	)

fof( miloA2124, axiom,
	p__d__subclass(c__LiteracyAttribute,c__TraitAttribute)
).



% ($documentation LiteracyAttribute EnglishLanguage "If an individual has the &%attribute 
% &%LiteracyAttribute, that individual is able to read and write.")


fof( miloA2125, axiom,
	p__d__subclass(c__Industry,c__Collection)
).



% ($documentation Industry EnglishLanguage "The class of &%Collections of &%Corporations 
% which are in the same line of business.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; $instance missing
% ;;(=>
% ;;   ($instance ?INDUSTRY Industry)
% ;;   (=>
% ;;      (and
% ;;         (member ?MEMB1 ?INDUSTRY)
% ;;         (member ?MEMB2 ?INDUSTRY))
% ;;      (exists (?CLASS)
% ;;         (and
% ;;            ($subclass ?CLASS Corporation)
% ;;            (immediateInstance ?MEMB1 ?CLASS)
% ;;            (immediateInstance ?MEMB2 ?CLASS)))))
% ;; Also checked:
% ;;(=>
% ;;   ($instance ?INDUSTRY Industry)
% ;;   (=>
% ;;      (and
% ;;         (member ?MEMB1 ?INDUSTRY)
% ;;         (member ?MEMB2 ?INDUSTRY))
% ;;      (exists (?CLASS)
% ;;         (and
% ;;            ($subclass ?CLASS Corporation)
% ;;            ($instance ?MEMB1 ?CLASS)
% ;;            ($instance ?MEMB2 ?CLASS)))))
% ;; Detected using automatic check: the argument of member is SelfConnectedObject, whereas Bussines is subclass of Collection (SelfConnected and Collection are disjoint)
% )

fof( miloA2126, axiom,
	p__d__subclass(c__Chimney,c__StationaryArtifact)
).


fof( miloA2127, axiom,
	p__d__subclass(c__Chimney,c__Device)
).



% ($documentation Chimney EnglishLanguage "A thin passageway through which &%Smoke from a controlled 
% fire is conducted &%Outside of a &%Building or &%Room.")


% 	(forall (?S ?R ?C)
% 		(=> 
% 			($instance ?C Chimney)
% 			(hasPurpose ?C (exists ([|] ?S ([|] ?R [])) (and ([|] ($instance ?S Smoke) ([|] ($instance ?R Removing) ([|] (instrument ?R ?C) []))))))
% 		)
% 	)

fof( miloA2129, axiom,
	p__d__subclass(c__Curb,c__StationaryArtifact)
).



% ($documentation Curb EnglishLanguage "A raised concrete or asphalt structure that connects a 
% &%Sidewalk with a &%Roadway.")


fof( miloA2130, axiom,
	(![C]: 
		(
			(
				(
					(
						p__d__instance(C,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(C,c__Curb)
					)
				)
			)
			=>
			(
				(?[S,R]: 
					(
						(
							(
								p__d__instance(S,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(S,c__Sidewalk)
							)
						 &
							(
								p__d__instance(R,c__Roadway)
							)
						 &
							(
								p__connects(C,S,R)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2131, axiom,
	p__d__instance(c__Paved,c__Attribute)
).


fof( miloA2132, axiom,
	p__d__instance(c__Unpaved,c__Attribute)
).


fof( miloA2133, axiom,
	p__d__subclass(c__Stairway,c__StationaryArtifact)
).



% ($documentation Stairway EnglishLanguage "A &%StationaryArtifact which allows one to climb, step 
% by step, from one level to another.")


fof( miloA2134, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Stairway)
			)
			=>
			(
				(
					(
						p__capability(c__MotionUpward,c__instrument,S)
					)
				 &
					(
						p__capability(c__MotionDownward,c__instrument,S)
					)
				)
			)
		)
	)
).


% 	(forall (?B ?S ?L1 ?L2)
% 		(=> 
% 			(and 
% 				($instance ?S Stairway)
% 				(part ?S ?B)
% 				($instance ?B Building)
% 			)
% 			(hasPurpose ?S (exists ([|] ?L1 ([|] ?L2 [])) (and ([|] ($instance ?L1 BuildingLevel) ([|] ($instance ?L2 BuildingLevel) ([|] (part ?L1 ?B) ([|] (part ?L2 ?B) ([|] (connects ?S ?L1 ?L2) []))))))))
% 		)
% 	)

fof( miloA2136, axiom,
	p__d__subclass(c__Steps,c__StationaryArtifact)
).



% ($documentation Steps EnglishLanguage "A &%StationaryArtifact which allows one to climb, step 
% by step, from one level to another.")


fof( miloA2137, axiom,
	(![STEPS]: 
		(
			(
				p__d__instance(STEPS,c__Steps)
			)
			=>
			(
				(
					(
						p__capability(c__MotionUpward,c__instrument,STEPS)
					)
				 &
					(
						p__capability(c__MotionDownward,c__instrument,STEPS)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: connects is defined using connected as follows
% ;;		(<=>
% ;;			(connects ?OBJ1 ?OBJ2 ?OBJ3)
% ;;			(and
% ;;				(connected ?OBJ1 ?OBJ2)
% ;;				(connected ?OBJ1 ?OBJ3)
% ;;				(not
% ;;					(connected ?OBJ2 ?OBJ3))))
% ;; And connected is a reflexive relation.
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?LEVEL1 BuildingLevel)
% ;;      ($instance ?LEVEL2 BuildingLevel)
% ;;      ($instance ?BUILDING Building)
% ;;      (part ?LEVEL1 ?BUILDING)
% ;;      (part ?LEVEL2 ?BUILDING))
% ;;   (exists (?STEPS)
% ;;      (and
% ;;         ($instance ?STEPS Steps)
% ;;         (connects ?STEPS ?LEVEL1 ?LEVEL2))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA2138, axiom,
	(![BUILDING,LEVEL1,LEVEL2]: 
		(
			(
				(
					(
						p__d__instance(LEVEL1,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(LEVEL2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(LEVEL1,c__BuildingLevel)
					)
				 &
					(
						p__d__instance(LEVEL2,c__BuildingLevel)
					)
				 &
					(
						~ (
							( LEVEL1 = LEVEL2 )
						)
					)
				 &
					(
						p__d__instance(BUILDING,c__Building)
					)
				 &
					(
						p__part(LEVEL1,BUILDING)
					)
				 &
					(
						p__part(LEVEL2,BUILDING)
					)
				)
			)
			=>
			(
				(?[STEPS]: 
					(
						(
							(
								p__d__instance(STEPS,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(STEPS,c__Steps)
							)
						 &
							(
								p__connects(STEPS,LEVEL1,LEVEL2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2139, axiom,
	p__d__subclass(c__Ladder,c__Artifact)
).



% ($documentation Ladder EnglishLanguage "An &%Artifact which consists of two parallel supports 
% connected by a series of rungs which can be used to ascend or descend.")


fof( miloA2140, axiom,
	(![LADDER]: 
		(
			(
				p__d__instance(LADDER,c__Ladder)
			)
			=>
			(
				(
					(
						p__capability(c__MotionUpward,c__instrument,LADDER)
					)
				 &
					(
						p__capability(c__MotionDownward,c__instrument,LADDER)
					)
				)
			)
		)
	)
).


fof( miloA2141, axiom,
	p__d__instance(c__Transparent,c__InternalAttribute)
).



% ($documentation Transparent EnglishLanguage "A Transparent material is one through which
% it is possible to have &%Seeing.")


% 	(forall (?S ?O ?A ?D)
% 		(=> 
% 			(attribute ?O Transparent)
% 			(modalAttribute (exists ([|] ?S []) (and ([|] ($instance ?S Seeing) ([|] (agent ?S ?A) ([|] (destination ?S ?D) ([|] (between ?O ?A ?D) [])))))) Possibility)
% 		)
% 	)

fof( miloA2143, axiom,
	p__d__subclass(c__Curtain,c__WindowCovering)
).


fof( miloA2144, axiom,
	p__d__subclass(c__Curtain,c__Fabric)
).



% ($documentation Curtain EnglishLanguage "A piece of &%Fabric whose purpose is &%Covering a 
% &%Window so as to keep out the light or prevent people from seeing inside.")


fof( miloA2145, axiom,
	p__d__subclass(c__Window,c__Artifact)
).



% ($documentation Window EnglishLanguage "An &%Artifact composed of transparent material 
% that admits light (and possibly air) into a &%Room, &%Building 
% or &%Vehicle.")


fof( miloA2146, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__Window)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Object)
							)
						 &
							(
								p__part(W,A)
							)
						 &
							(
								(
									p__d__instance(A,c__Building)
								 |
									p__d__instance(A,c__Room)
								 |
									p__d__instance(A,c__Vehicle)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2147, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__Window)
			)
			=>
			(
				p__attribute(W,c__Transparent)
			)
		)
	)
).


fof( miloA2148, axiom,
	p__d__subclass(c__Skylight,c__Window)
).



% ($documentation Skylight EnglishLanguage "A &%Window that is part of the &%Ceiling of 
% a &%Room.")


fof( miloA2149, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__Skylight)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__Ceiling)
							)
						 &
							(
								p__part(W,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2150, axiom,
	p__d__subclass(c__RearWindow,c__VehicleWindow)
).



% ($documentation RearWindow EnglishLanguage "Any &%VehicleWindow which is located at the back 
% of an &%RoadVehicle.")


fof( miloA2151, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__RearWindow)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(A,c__RoadVehicle)
							)
						 &
							(
								p__part(W,f__BackFn1(A))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2152, axiom,
	p__d__subclass(c__WindowCovering,c__Artifact)
).



% ($documentation WindowCovering EnglishLanguage "An &%Artifact that is used to cover 
% Windows.  Note that this class includes blinds, drapes, shutters, 
% etc.")


% 	(forall (?W ?C ?WC)
% 		(=> 
% 			($instance ?WC WindowCovering)
% 			(hasPurpose ?WC (exists ([|] ?C ([|] ?W [])) (and ([|] ($instance ?C Covering) ([|] (patient ?C ?W) ([|] ($instance ?W Window) ([|] (instrument ?C ?WC) [])))))))
% 		)
% 	)

fof( miloA2154, axiom,
	p__d__instance(c__AdjoiningRoom,c__RelationalAttribute)
).



% ($documentation AdjoiningRoom EnglishLanguage "&%AdjoiningRoom describes a &%Room that
% has another Room &%Adjacent to it, and a doorway existing on their common wall to
% allow access from one room to another")


% (termFormat EnglishLanguage AdjoiningRoom "adjoining room")

fof( miloA2155, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__AdjoiningRoom)
					)
				)
			)
			=>
			(
				p__d__instance(X,c__Room)
			)
		)
	)
).


fof( miloA2156, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__AdjoiningRoom)
					)
				)
			)
			=>
			(
				(?[ROOM,WALL,DOOR]: 
					(
						(
							(
								p__d__instance(ROOM,c__Object)
							)
						 &
							(
								p__attribute(ROOM,c__AdjoiningRoom)
							)
						 &
							(
								~ (
									( ROOM = X )
								)
							)
						 &
							(
								p__orientation(X,ROOM,c__Adjacent)
							)
						 &
							(
								p__d__instance(WALL,c__Wall)
							)
						 &
							(
								p__part(WALL,ROOM)
							)
						 &
							(
								p__part(WALL,X)
							)
						 &
							(
								p__d__instance(DOOR,c__Door)
							)
						 &
							(
								p__part(DOOR,WALL)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2157, axiom,
	p__d__subclass(c__TransitwayObstacle,c__Object)
).



% ($documentation TransitwayObstacle EnglishLanguage "&%TransitwayObstacle is the general 
% class of &%Objects that can act as obstacles to &%Motion along a 
% &%Transitway.")


fof( miloA2158, axiom,
	p__d__subclass(c__Door,c__TransitwayObstacle)
).


fof( miloA2159, axiom,
	p__d__subclass(c__Door,c__Device)
).


% ($comment 
% ;; KJN: Removing this as Device is already an Artifact      
% ;;($subclass Door Artifact)
% )


% ($documentation Door EnglishLanguage "An &%Artifact that restricts and permits access to a 
% &%StationaryArtifact (e.g. &%Building or &%Room) depending on whether the 
% &%Door is open or locked.  Note that the class &%Door also covers gates, 
% because it is not possible to define objective criteria that reliably 
% distinguish doors from gates.")


fof( miloA2160, axiom,
	(![DOOR]: 
		(
			(
				p__d__instance(DOOR,c__Door)
			)
			=>
			(
				(?[WAY]: 
					(
						(
							(
								p__part(DOOR,WAY)
							)
						 &
							(
								p__d__instance(WAY,c__Doorway)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2161, axiom,
	p__d__subclass(c__Hinge,c__EngineeringComponent)
).



% ($documentation Hinge EnglishLanguage "An &%EngineeringComponent that connects one thing to 
% another in such a way that they can move relative to one another.")


% 	(forall (?HINGE ?OBJ1 ?OBJ2)
% 		(=> 
% 			($instance ?HINGE Hinge)
% 			(hasPurpose ?HINGE (exists ([|] ?OBJ1 ([|] ?OBJ2 [])) (and ([|] (connects ?HINGE ?OBJ1 ?OBJ2) ([|] (or ([|] (capability Rotating patient ?OBJ1) ([|] (capability Rotating patient ?OBJ2) []))) [])))))
% 		)
% 	)

fof( miloA2163, axiom,
	p__d__subclass(c__Doorway,c__StationaryArtifact)
).



% ($documentation Doorway EnglishLanguage "A &%StationaryArtifact consisting of a frame that 
% holds a &%Door.")


fof( miloA2164, axiom,
	(![WAY]: 
		(
			(
				p__d__instance(WAY,c__Doorway)
			)
			=>
			(
				(?[ARTIFACT]: 
					(
						(
							(
								p__d__instance(ARTIFACT,c__Object)
							)
						 &
							(
								p__part(WAY,ARTIFACT)
							)
						 &
							(
								(
									p__d__instance(ARTIFACT,c__Building)
								 |
									p__d__instance(ARTIFACT,c__Room)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2165, axiom,
	(![DOOR]: 
		(
			(
				p__d__instance(DOOR,c__Door)
			)
			=>
			(
				(?[ARTIFACT]: 
					(
						(
							(
								p__d__instance(ARTIFACT,c__Object)
							)
						 &
							(
								p__part(DOOR,ARTIFACT)
							)
						 &
							(
								(
									p__d__instance(ARTIFACT,c__Building)
								 |
									p__d__instance(ARTIFACT,c__Room)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2166, axiom,
	p__d__subclass(c__Wall,c__StationaryArtifact)
).



% ($documentation Wall EnglishLanguage "A &%StationaryArtifact that supports a &%Building or 
% partitions it into &%Rooms.")


fof( miloA2167, axiom,
	(![WALL]: 
		(
			(
				p__d__instance(WALL,c__Wall)
			)
			=>
			(
				(?[ARTIFACT]: 
					(
						(
							(
								p__d__instance(ARTIFACT,c__Object)
							)
						 &
							(
								p__part(WALL,ARTIFACT)
							)
						 &
							(
								(
									p__d__instance(ARTIFACT,c__Building)
								 |
									p__d__instance(ARTIFACT,c__Room)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2168, axiom,
	p__d__subclass(c__Floor,c__StationaryArtifact)
).



% ($documentation Floor EnglishLanguage "A &%StationaryArtifact that is the bottom surface 
% of a &%Room.")


fof( miloA2169, axiom,
	(![FLOOR]: 
		(
			(
				p__d__instance(FLOOR,c__Floor)
			)
			=>
			(
				(?[ARTIFACT]: 
					(
						(
							(
								p__part(FLOOR,ARTIFACT)
							)
						 &
							(
								p__d__instance(ARTIFACT,c__Room)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2170, axiom,
	p__d__subclass(c__Ceiling,c__StationaryArtifact)
).



% ($documentation Ceiling EnglishLanguage "A &%StationaryArtifact that is the top surface 
% of a &%Room.")


fof( miloA2171, axiom,
	(![C]: 
		(
			(
				(
					(
						p__d__instance(C,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(C,c__Ceiling)
					)
				)
			)
			=>
			(
				(?[R]: 
					(
						(
							(
								p__d__instance(R,c__SelfConnectedObject)
							)
						 &
							(
								p__top(C,R)
							)
						 &
							(
								p__d__instance(R,c__Room)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2172, axiom,
	p__d__subclass(c__Roof,c__StationaryArtifact)
).



% ($documentation Roof EnglishLanguage "The &%top of a &%Building.")


fof( miloA2173, axiom,
	(![ROOF]: 
		(
			(
				(
					(
						p__d__instance(ROOF,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(ROOF,c__Roof)
					)
				)
			)
			=>
			(
				(?[BUILDING]: 
					(
						(
							(
								p__d__instance(BUILDING,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(BUILDING,c__Building)
							)
						 &
							(
								p__top(ROOF,BUILDING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2174, axiom,
	p__d__subclass(c__Fireplace,c__StationaryArtifact)
).


fof( miloA2175, axiom,
	p__d__subclass(c__Fireplace,c__Device)
).



% ($documentation Fireplace EnglishLanguage "A &%Device in a &%Building which is used for burning wood, 
% coal, etc for heat.")


% 	(forall (?C ?F)
% 		(=> 
% 			($instance ?F Fireplace)
% 			(hasPurpose ?F (exists ([|] ?C []) (and ([|] ($instance ?C Combustion) ([|] (eventLocated ?C ?F) [])))))
% 		)
% 	)

fof( miloA2177, axiom,
	(![F]: 
		(
			(
				p__d__instance(F,c__Fireplace)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__Chimney)
							)
						 &
							(
								p__connected(F,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2178, axiom,
	(![F]: 
		(
			(
				p__d__instance(F,c__Fireplace)
			)
			=>
			(
				(?[B]: 
					(
						(
							(
								p__d__instance(B,c__Building)
							)
						 &
							(
								p__part(F,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2179, axiom,
	p__d__subclass(c__Balcony,c__StationaryArtifact)
).



% ($documentation Balcony EnglishLanguage "A &%Balcony is a platform projecting from the
% wall of a building, surrounded by some type of railing")


% (termFormat EnglishLanguage Balcony "balcony")

fof( miloA2180, axiom,
	(![BALCONY]: 
		(
			(
				p__d__instance(BALCONY,c__Balcony)
			)
			=>
			(
				(?[WALL,LANDAREA]: 
					(
						(
							(
								p__d__instance(WALL,c__Object)
							)
						 &
							(
								p__meetsSpatially(WALL,BALCONY)
							)
						 &
							(
								p__d__instance(LANDAREA,c__LandArea)
							)
						 &
							(
								p__located(WALL,LANDAREA)
							)
						 &
							(
								p__orientation(BALCONY,LANDAREA,c__Above)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2181, axiom,
	p__d__subclass(c__BuildingLevel,c__StationaryArtifact)
).



% ($documentation BuildingLevel EnglishLanguage "The story or level of a building, e.g. the &%Basement, 
% the &%Attic, the ground level, the fourteenth floor, etc.")


fof( miloA2182, axiom,
	(![LEVEL]: 
		(
			(
				p__d__instance(LEVEL,c__BuildingLevel)
			)
			=>
			(
				(?[BUILDING]: 
					(
						(
							(
								p__d__instance(BUILDING,c__Building)
							)
						 &
							(
								p__part(LEVEL,BUILDING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2183, axiom,
	p__d__subclass(c__Basement,c__BuildingLevel)
).



% ($documentation Basement EnglishLanguage "A &%BuildingLevel which satisfies two conditions, viz. it is 
% lower than all of the other &%BuildingLevels in the same &%Building and it is below 
% ground level.")


fof( miloA2184, axiom,
	(![BASEMENT]: 
		(
			(
				p__d__instance(BASEMENT,c__Basement)
			)
			=>
			(
				(![LEVEL,BUILDING]: 
					(
						(
							~ (
								p__d__instance(LEVEL,c__Object)
							)
						 |
							~ (
								p__d__instance(BUILDING,c__Object)
							)
						 |
							~ (
								p__d__instance(LEVEL,c__BuildingLevel)
							)
						 |
							~ (
								p__d__instance(BUILDING,c__Building)
							)
						 |
							~ (
								p__part(LEVEL,BUILDING)
							)
						 |
							~ (
								p__part(BASEMENT,BUILDING)
							)
						 |
							( LEVEL = BASEMENT )
						 |
							~ (
								p__orientation(LEVEL,BASEMENT,c__Below)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2185, axiom,
	p__d__subclass(c__Elevator,c__TransportationDevice)
).



% ($documentation Elevator EnglishLanguage "A &%TransportationDevice consisting of a car that moves 
% up and down in a vertical shaft so that people or objects can move from one floor to another 
% in a building.")


% 	(forall (?E ?T ?L1 ?L2 ?B)
% 		(=> 
% 			($instance ?E Elevator)
% 			(hasPurpose ?E (exists ([|] ?T ([|] ?L1 ([|] ?L2 ([|] ?B [])))) (and ([|] ($instance ?T Transportation) ([|] (origin ?T ?L1) ([|] ($instance ?L1 BuildingLevel) ([|] (destination ?T ?L2) ([|] ($instance ?L2 BuildingLevel) ([|] (not (equal ?L1 ?L2)) ([|] (part ?L1 ?B) ([|] (part ?L2 ?B) ([|] ($instance ?B Building) []))))))))))))
% 		)
% 	)

fof( miloA2187, axiom,
	(![E]: 
		(
			(
				p__d__instance(E,c__Elevator)
			)
			=>
			(
				(
					(
						p__capability(c__MotionUpward,c__instrument,E)
					)
				 &
					(
						p__capability(c__MotionDownward,c__instrument,E)
					)
				)
			)
		)
	)
).


fof( miloA2188, axiom,
	p__d__subclass(c__Pump,c__TransportationDevice)
).



% ($documentation Pump EnglishLanguage "A &%Device that moves &%Fluids by means of pressure or suction.")


fof( miloA2189, axiom,
	(![D,T]: 
		(
			(
				(
					(
						p__d__instance(T,c__Transportation)
					)
				 &
					(
						p__instrument(T,D)
					)
				 &
					(
						p__d__instance(D,c__Pump)
					)
				)
			)
			=>
			(
				(?[F]: 
					(
						(
							(
								p__d__instance(F,c__Object)
							)
						 &
							(
								p__instrument(T,F)
							)
						 &
							(
								p__attribute(F,c__Fluid)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2190, axiom,
	p__d__subclass(c__Oar,c__TransportationDevice)
).



% ($documentation Oar EnglishLanguage "A &%Device consisting of a flat, broad surface attached to a 
% handle that is used as an instrument in &%Rowing.")


% 	(forall (?R ?O)
% 		(=> 
% 			($instance ?O Oar)
% 			(hasPurpose ?O (exists ([|] ?R []) (and ([|] ($instance ?R Rowing) ([|] (instrument ?R ?O) [])))))
% 		)
% 	)

fof( miloA2192, axiom,
	p__d__subclass(c__Garage,c__StationaryArtifact)
).



% ($documentation Garage EnglishLanguage "A &%Building or part of a &%Building which is intended to house 
% one or more &%RoadVehicle when they are not in use or are under
% repair.")


% 	(forall (?AUTO ?GARAGE ?Automobile)
% 		(=> 
% 			($instance ?GARAGE Garage)
% 			(hasPurpose ?GARAGE (exists ([|] ?AUTO []) (and ([|] ($instance ?AUTO RoadVehicle) ([|] (contains ?GARAGE ?Automobile) [])))))
% 		)
% 	)

fof( miloA2194, axiom,
	(![GARAGE]: 
		(
			(
				p__d__instance(GARAGE,c__Garage)
			)
			=>
			(
				(?[BUILDING]: 
					(
						(
							(
								p__d__instance(BUILDING,c__Building)
							)
						 &
							(
								p__part(GARAGE,BUILDING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2195, axiom,
	p__d__subclass(c__Bathroom,c__Room)
).



% ($documentation Bathroom EnglishLanguage "A &%Room that contains a &%WashBasin and 
% possibly a &%Toilet.")


fof( miloA2196, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Bathroom)
			)
			=>
			(
				(?[W]: 
					(
						(
							(
								p__d__instance(W,c__WashBasin)
							)
						 &
							(
								p__located(W,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2197, axiom,
	p__d__subclass(c__Closet,c__Room)
).



% ($documentation Closet EnglishLanguage "A relatively small &%Room used for storage.")


% 	(forall (?K ?O ?R)
% 		(=> 
% 			($instance ?R Closet)
% 			(hasPurpose ?R (exists ([|] ?K ([|] ?O [])) (and ([|] ($instance ?K Keeping) ([|] (patient ?K ?O) ([|] (located ?O ?R) []))))))
% 		)
% 	)

fof( miloA2199, axiom,
	p__d__subclass(c__DressingRoom,c__Room)
).



% ($documentation DressingRoom EnglishLanguage "Any &%Room which is intended for 
% &%ChangingClothing.")


% 	(forall (?C ?R)
% 		(=> 
% 			($instance ?R DressingRoom)
% 			(hasPurpose ?R (exists ([|] ?C []) (and ([|] ($instance ?C ChangingClothing) ([|] (eventLocated ?C ?R) [])))))
% 		)
% 	)

fof( miloA2201, axiom,
	p__d__subclass(c__SittingArea,c__Region)
).



% ($documentation SittingArea EnglishLanguage "&%SittingArea refers to a &%Region, either
% &%Indoor (like a Living Room) or &%Outdoor (like a Garden sitting area) where people
% normally sit and entertain guests")


% (termFormat EnglishLanguage SittingArea "sitting area")

fof( miloA2202, axiom,
	(![AREA]: 
		(
			(
				p__d__instance(AREA,c__SittingArea)
			)
			=>
			(
				(?[SEAT]: 
					(
						(
							(
								p__d__instance(SEAT,c__Seat)
							)
						 &
							(
								p__located(SEAT,AREA)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2203, axiom,
	p__d__subclass(c__KitchenArea,c__Region)
).



% ($documentation KitchenArea EnglishLanguage "a &%KitchenArea refers to a 
% &%Region, either &%Outdoors or &%Indoors, that is intended for &%Cooking")


% (termFormat EnglishLanguage KitchenArea "kitchen area")

% 	(forall (?C ?K)
% 		(=> 
% 			($instance ?K KitchenArea)
% 			(hasPurpose ?K (exists ([|] ?C []) (and ([|] ($instance ?C Cooking) ([|] (eventLocated ?C ?K) [])))))
% 		)
% 	)

fof( miloA2205, axiom,
	p__d__subclass(c__Kitchen,c__Room)
).


fof( miloA2206, axiom,
	p__d__subclass(c__Kitchen,c__KitchenArea)
).



% ($documentation Kitchen EnglishLanguage "A &%Room intended for &%Cooking.")


% 	(forall (?COOK ?ROOM)
% 		(=> 
% 			($instance ?ROOM Kitchen)
% 			(hasPurpose ?ROOM (exists ([|] ?COOK []) (and ([|] ($instance ?COOK Cooking) ([|] (located ?COOK ?ROOM) [])))))
% 		)
% 	)

fof( miloA2208, axiom,
	p__d__subclass(c__DiningArea,c__Region)
).



% ($documentation DiningArea EnglishLanguage "a &%DiningArea refers to a 
% &%Region, either &%Outdoors or &%Indoors, that is intended for &%Eating")


% (termFormat EnglishLanguage DiningArea "dining area")

% 	(forall (?E ?D)
% 		(=> 
% 			($instance ?D DiningArea)
% 			(hasPurpose ?D (exists ([|] ?E []) (and ([|] ($instance ?E Eating) ([|] (eventLocated ?E ?D) [])))))
% 		)
% 	)

fof( miloA2210, axiom,
	p__d__subclass(c__DiningRoom,c__Room)
).


fof( miloA2211, axiom,
	p__d__subclass(c__DiningRoom,c__DiningArea)
).



% ($documentation DiningRoom EnglishLanguage "A &%Room intended primarily for &%Eating.")


fof( miloA2212, axiom,
	p__d__subclass(c__Bedroom,c__Room)
).



% ($documentation Bedroom EnglishLanguage "A &%Room intended primarily for sleeping.")


fof( miloA2213, axiom,
	(![ROOM]: 
		(
			(
				p__d__instance(ROOM,c__Bedroom)
			)
			=>
			(
				(?[BED]: 
					(
						(
							(
								p__d__instance(BED,c__Bed)
							)
						 &
							(
								p__located(BED,ROOM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2214, axiom,
	p__d__subclass(c__Classroom,c__Room)
).



% ($documentation Classroom EnglishLanguage "Any Room in a &%School where education 
% takes place.")


fof( miloA2215, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__Classroom)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__School)
							)
						 &
							(
								p__part(R,S)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?E ?R)
% 		(=> 
% 			($instance ?R Classroom)
% 			(hasPurpose ?R (exists ([|] ?E []) (and ([|] ($instance ?E EducationalProcess) ([|] (eventLocated ?E ?R) [])))))
% 		)
% 	)

fof( miloA2217, axiom,
	p__d__subclass(c__Porch,c__StationaryArtifact)
).



% ($documentation Porch EnglishLanguage "A &%StationaryArtifact which is &%connected to a 
% &%Building and which provides some shelter in entering or leaving the 
% &%Building or in sitting outside.")


fof( miloA2218, axiom,
	(![PORCH]: 
		(
			(
				p__d__instance(PORCH,c__Porch)
			)
			=>
			(
				(?[BUILDING]: 
					(
						(
							(
								p__d__instance(BUILDING,c__Building)
							)
						 &
							(
								p__connected(PORCH,BUILDING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2219, axiom,
	p__d__subclass(c__Sidewalk,c__StationaryArtifact)
).



% ($documentation Sidewalk EnglishLanguage "A prepared path for pedestrians alongside a &%Roadway.")


% 	(forall (?WALK ?SIDE)
% 		(=> 
% 			($instance ?SIDE Sidewalk)
% 			(hasPurpose ?SIDE (exists ([|] ?WALK []) (and ([|] ($instance ?WALK Walking) ([|] (path ?WALK ?SIDE) [])))))
% 		)
% 	)

fof( miloA2221, axiom,
	(![SIDE]: 
		(
			(
				p__d__instance(SIDE,c__Sidewalk)
			)
			=>
			(
				(?[ROAD]: 
					(
						(
							(
								p__d__instance(ROAD,c__Roadway)
							)
						 &
							(
								p__orientation(SIDE,ROAD,c__Near)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2222, axiom,
	p__d__subclass(c__Fence,c__StationaryArtifact)
).



% ($documentation Fence EnglishLanguage "A &%StationaryArtifact that serves to demarcate or
% to prevent access to or from the area that the &%Fence surrounds.")


fof( miloA2223, axiom,
	p__d__subclass(c__SportsGround,c__StationaryArtifact)
).



% ($documentation SportsGround EnglishLanguage "A specially designated and maintained area 
% where &%Sports are played.")


% 	(forall (?SPORT ?GROUND)
% 		(=> 
% 			($instance ?GROUND SportsGround)
% 			(hasPurpose ?GROUND (exists ([|] ?SPORT []) (and ([|] ($instance ?SPORT Sport) ([|] (eventLocated ?SPORT ?GROUND) [])))))
% 		)
% 	)

fof( miloA2225, axiom,
	p__d__subclass(c__IndustrialPlant,c__StationaryArtifact)
).



% ($documentation IndustrialPlant EnglishLanguage "A &%Building or part of a &%Building or group 
% of &%Buildings whose purpose is to &%Manufacture something.")


fof( miloA2226, axiom,
	(![PLANT]: 
		(
			(
				p__d__instance(PLANT,c__IndustrialPlant)
			)
			=>
			(
				(
					p__d__instance(PLANT,c__Building)
				 |
					(?[BUILDING]: 
						(
							(
								(
									p__d__instance(BUILDING,c__Building)
								)
							 &
								(
									p__located(BUILDING,PLANT)
								)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?MANUFACTURE ?PLANT)
% 		(=> 
% 			($instance ?PLANT IndustrialPlant)
% 			(hasPurpose ?PLANT (exists ([|] ?MANUFACTURE []) (and ([|] ($instance ?MANUFACTURE Manufacture) ([|] (eventLocated ?MANUFACTURE ?PLANT) [])))))
% 		)
% 	)

fof( miloA2228, axiom,
	p__d__subclass(c__Laboratory,c__StationaryArtifact)
).



% ($documentation Laboratory EnglishLanguage "A &%Building, &%Room or suite of &%Rooms where 
% scientific research, i.e. &%Experimenting, is conducted.")


fof( miloA2229, axiom,
	(![LAB]: 
		(
			(
				p__d__instance(LAB,c__Laboratory)
			)
			=>
			(
				(?[EXPERIMENT]: 
					(
						(
							(
								p__d__instance(EXPERIMENT,c__Experimenting)
							)
						 &
							(
								p__eventLocated(EXPERIMENT,LAB)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation experimentalControl EnglishLanguage "(experimentalControl ?EXPERIMENT ?OBJ) 
% means that the Object ?OBJ serves as a control in the instance of 
% &%Experimenting ?EXPERIMENT, i.e. ?OBJ is the standard against which something 
% else in the experiment can be compared.")


fof( miloA2230, axiom,
	p__d__instance(c__experimentalControl,c__CaseRole)
).


% 	($domain experimentalControl 1 Experimenting)

% 	($domain experimentalControl 2 Object)

fof( miloA2233, axiom,
	p__subrelation(c__experimentalControl,c__patient)
).


fof( miloA2234, axiom,
	p__d__subclass(c__MilitaryInstallation,c__StationaryArtifact)
).


fof( miloA2235, axiom,
	p__d__subclass(c__MilitaryInstallation,c__MilitaryArtifact)
).



% ($documentation MilitaryInstallation EnglishLanguage "A &%StationaryArtifact consisting of grounds 
% and &%Buildings that is intended to be used by a &%MilitaryOrganization.")


fof( miloA2236, axiom,
	p__d__subclass(c__Farm,c__StationaryArtifact)
).



% ($documentation Farm EnglishLanguage "A &%StationaryArtifact consisting of a cultivated 
% &%LandArea and &%Buildings for maintaining the land and/or the &%Animals 
% on the land.") 


fof( miloA2237, axiom,
	p__d__subclass(c__Barn,c__Building)
).


fof( miloA2238, axiom,
	p__d__disjoint(c__Barn,c__ResidentialBuilding)
).



% ($documentation Barn EnglishLanguage "A &%Building on a &%Farm that is used for keeping 
% &%DomesticAnimals, &%Fodder or harvested crops.")


fof( miloA2239, axiom,
	(![BARN]: 
		(
			(
				p__d__instance(BARN,c__Barn)
			)
			=>
			(
				(?[FARM]: 
					(
						(
							(
								p__d__instance(FARM,c__Farm)
							)
						 &
							(
								p__located(BARN,FARM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2240, axiom,
	p__d__subclass(c__PerformanceStage,c__StationaryArtifact)
).



% ($documentation PerformanceStage EnglishLanguage "A large platform for theatrical plays, 
% lectures, dances, music recitals, etc, which can be observed by an audience.")


% 	(forall (?PERF ?STAGE)
% 		(=> 
% 			($instance ?STAGE PerformanceStage)
% 			(hasPurpose ?STAGE (exists ([|] ?PERF []) (and ([|] ($instance ?PERF Demonstrating) ([|] (eventLocated ?PERF ?STAGE) [])))))
% 		)
% 	)

fof( miloA2242, axiom,
	(![STAGE]: 
		(
			(
				p__d__instance(STAGE,c__PerformanceStage)
			)
			=>
			(
				(?[AUDITORIUM]: 
					(
						(
							(
								p__d__instance(AUDITORIUM,c__Auditorium)
							)
						 &
							(
								p__part(STAGE,AUDITORIUM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2243, axiom,
	p__d__subclass(c__PerformanceStageWing,c__StationaryArtifact)
).



% ($documentation PerformanceStageWing EnglishLanguage "A part of the &%PerformanceStage that is not 
% visible to members of the audience.")


fof( miloA2244, axiom,
	(![W]: 
		(
			(
				p__d__instance(W,c__PerformanceStageWing)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__PerformanceStage)
							)
						 &
							(
								p__part(W,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2245, axiom,
	p__d__subclass(c__Magnetism,c__RadiatingElectromagnetic)
).



% ($documentation Magnetism EnglishLanguage "Any instance of &%RadiatingElectromagnetic which 
% involves the attraction of &%Iron.")


fof( miloA2246, axiom,
	p__d__subclass(c__RadioEmission,c__RadiatingElectromagnetic)
).



% ($documentation RadioEmission EnglishLanguage "Any instance of &%RadiatingElectromagnetic 
% where the waves have a wavelength between 5 milimeters and 30,000 meters.")


fof( miloA2247, axiom,
	p__d__subclass(c__Broadcasting,c__Disseminating)
).


fof( miloA2248, axiom,
	p__d__subclass(c__Broadcasting,c__RadioEmission)
).



% ($documentation Broadcasting EnglishLanguage "&%Disseminating information by using a 
% &%CommunicationDevice that radiates &%RadioEmissions.")


fof( miloA2249, axiom,
	(![BROADCAST]: 
		(
			(
				p__d__instance(BROADCAST,c__Broadcasting)
			)
			=>
			(
				(?[DEVICE]: 
					(
						(
							(
								p__d__instance(DEVICE,c__CommunicationDevice)
							)
						 &
							(
								p__instrument(BROADCAST,DEVICE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2250, axiom,
	p__d__subclass(c__RadioBroadcasting,c__Broadcasting)
).



% ($documentation RadioBroadcasting EnglishLanguage "Any instance of &%Broadcasting which is 
% intended to be received by a &%RadioReceiver.")


fof( miloA2251, axiom,
	(![RADIO]: 
		(
			(
				p__d__instance(RADIO,c__RadioReceiver)
			)
			=>
			(
				p__capability(c__RadioBroadcasting,c__patient,RADIO)
			)
		)
	)
).


fof( miloA2252, axiom,
	p__d__subclass(c__TelevisionBroadcasting,c__Broadcasting)
).



% ($documentation TelevisionBroadcasting EnglishLanguage "Any instance of &%Broadcasting which 
% is intended to be received by a &%Television.")


% ($comment 
% ;; KJN: Moving this to Communications.kif as TelevisionReceiver is defined there.
% ;;(=>
% ;;	($instance ?TELEVISION TelevisionReceiver)
% ;;  (capability TelevisionBroadcasting patient ?TELEVISION))
% )

fof( miloA2253, axiom,
	p__d__subclass(c__PeriodicalPublisher,c__Publisher)
).



% ($documentation PeriodicalPublisher EnglishLanguage "Any &%Publisher that publishes 
% &%Periodicals, e.g. newspaper and magazine publishing houses.")


fof( miloA2254, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__PeriodicalPublisher)
			)
			=>
			(
				(?[PUBLISH,PERIODICAL]: 
					(
						(
							(
								p__d__instance(PUBLISH,c__Publication)
							)
						 &
							(
								p__agent(PUBLISH,C)
							)
						 &
							(
								p__patient(PUBLISH,PERIODICAL)
							)
						 &
							(
								p__d__instance(PERIODICAL,c__Periodical)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2255, axiom,
	p__d__subclass(c__Antenna,c__CommunicationDevice)
).



% ($documentation Antenna EnglishLanguage "A &%CommunicationDevice which enables or improves 
% the reception of &%RadioEmissions by another &%CommunicationDevice (the 
% radio or television receiver).")


fof( miloA2256, axiom,
	(![ANTENNA]: 
		(
			(
				p__d__instance(ANTENNA,c__Antenna)
			)
			=>
			(
				p__capability(c__RadioEmission,c__instrument,ANTENNA)
			)
		)
	)
).


fof( miloA2257, axiom,
	p__d__subclass(c__Explosion,c__Radiating)
).



% ($documentation Explosion EnglishLanguage "Any sudden and massive release of energy that is 
% the product of a chemical reaction.")


fof( miloA2258, axiom,
	(![EXPLOSION]: 
		(
			(
				p__d__instance(EXPLOSION,c__Explosion)
			)
			=>
			(
				(?[PROC]: 
					(
						(
							(
								p__d__instance(PROC,c__ChemicalProcess)
							)
						 &
							(
								p__causes(PROC,EXPLOSION)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the third argument of capability is Object, whereas Explosion is subclass of Process (Object and Process are disjoint)
% ;;
% ;;(=>
% ;;   ($instance ?EXPLOSION Explosion)
% ;;   (capability Damaging instrument ?EXPLOSION))
% )

fof( miloA2259, axiom,
	p__d__subclass(c__Performance,c__Demonstrating)
).



% ($documentation Performance EnglishLanguage "A &%Demonstrating which includes &%DramaticActing 
% and/or &%MakingMusic and which is intended to entertain the audience.")


fof( miloA2260, axiom,
	(![PERFORMANCE]: 
		(
			(
				p__d__instance(PERFORMANCE,c__Performance)
			)
			=>
			(
				(?[SUB]: 
					(
						(
							(
								p__d__instance(SUB,c__Process)
							)
						 &
							(
								p__subProcess(SUB,PERFORMANCE)
							)
						 &
							(
								(
									p__d__instance(SUB,c__DramaticActing)
								 |
									p__d__instance(SUB,c__MakingMusic)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2261, axiom,
	(![PERFORMANCE]: 
		(
			(
				p__d__instance(PERFORMANCE,c__Performance)
			)
			=>
			(
				(?[STAGE]: 
					(
						(
							(
								p__d__instance(STAGE,c__PerformanceStage)
							)
						 &
							(
								p__eventLocated(PERFORMANCE,STAGE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2262, axiom,
	p__d__subclass(c__PerformanceAct,c__Performance)
).



% ($documentation PerformanceAct EnglishLanguage "A discrete &%subProcess of a &%Performance, 
% e.g. an act of a play, a movement of a performance of a symphony, etc.")


fof( miloA2263, axiom,
	p__d__subclass(c__Lecture,c__Demonstrating)
).


fof( miloA2264, axiom,
	p__d__subclass(c__Lecture,c__Speaking)
).



% ($documentation Lecture EnglishLanguage "Any instance of &%Speaking which is done before an 
% assembled audience.")


fof( miloA2265, axiom,
	p__d__subclass(c__Proclaiming,c__Lecture)
).


fof( miloA2266, axiom,
	p__d__subclass(c__Proclaiming,c__Declaring)
).



% ($documentation Proclaiming EnglishLanguage "Any instance of &%Speaking before an assembled 
% audience that effects an institutional change, e.g. a change in the laws of 
% the government.")


fof( miloA2267, axiom,
	p__d__subclass(c__Commenting,c__IntentionalProcess)
).



% ($documentation Commenting EnglishLanguage "Commenting is an &%IntentionalProcess 
% where an &%Agent speaks about a &%Process it is &%Looking at.")


% (termFormat EnglishLanguage Commenting "Commenting")

fof( miloA2268, axiom,
	(![COMMENTING,PROCESS]: 
		(
			(
				(
					(
						p__d__instance(COMMENTING,c__Commenting)
					)
				 &
					(
						p__d__instance(PROCESS,c__Process)
					)
				 &
					(
						p__patient(COMMENTING,PROCESS)
					)
				)
			)
			=>
			(
				(?[AGENT,SPEAKING,LOOKING]: 
					(
						(
							(
								p__d__instance(AGENT,c__Agent)
							)
						 &
							(
								p__d__instance(SPEAKING,c__Speaking)
							)
						 &
							(
								p__d__instance(LOOKING,c__Looking)
							)
						 &
							(
								p__agent(SPEAKING,AGENT)
							)
						 &
							(
								p__agent(LOOKING,AGENT)
							)
						 &
							(
								p__patient(LOOKING,PROCESS)
							)
						 &
							(
								p__refers(SPEAKING,PROCESS)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2269, axiom,
	p__d__instance(c__commentator,c__BinaryPredicate)
).


% 	($domain commentator 1 Agent)

% 	($domain commentator 2 Process)


% ($documentation commentator EnglishLanguage "(commentator ?AGENT ?PROCESS) means that some &%Agent 
% ?AGENT is &%Looking at some &%Process ?PROCESS and &%Speaking about it simultaneously.")


% (termFormat EnglishLanguage commentator "commentator")

fof( miloA2272, axiom,
	(![AGENT,PROCESS]: 
		(
			(
				(
					(
						p__d__instance(PROCESS,c__Process)
					)
				 &
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__commentator(AGENT,PROCESS)
					)
				)
			)
			=>
			(
				(?[COMMENTING]: 
					(
						(
							(
								p__d__instance(COMMENTING,c__Commenting)
							)
						 &
							(
								p__agent(COMMENTING,AGENT)
							)
						 &
							(
								p__patient(COMMENTING,PROCESS)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2273, axiom,
	p__d__subclass(c__Reciting,c__Speaking)
).



% ($documentation Reciting EnglishLanguage "Any instance of &%Speaking where what is 
% uttered is contained within a &%Text.")


fof( miloA2274, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__Reciting)
			)
			=>
			(
				(?[P,T]: 
					(
						(
							(
								p__d__instance(P,c__Proposition)
							)
						 &
							(
								p__realization(R,P)
							)
						 &
							(
								p__containsInformation(T,P)
							)
						 &
							(
								p__d__instance(T,c__Text)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2275, axiom,
	p__d__subclass(c__MusicalPerformance,c__Performance)
).



% ($documentation MusicalPerformance EnglishLanguage "A &%Performance that consists exclusively of 
% &%MakingMusic, e.g. an orchestra playing a symphony to an assembled audience.")


fof( miloA2276, axiom,
	(![P,M]: 
		(
			(
				(
					(
						p__d__instance(M,c__Process)
					)
				 &
					(
						p__d__instance(P,c__MusicalPerformance)
					)
				 &
					(
						p__subProcess(M,P)
					)
				)
			)
			=>
			(
				p__d__instance(M,c__MakingMusic)
			)
		)
	)
).


fof( miloA2277, axiom,
	p__d__subclass(c__Sermon,c__Lecture)
).



% ($documentation Sermon EnglishLanguage "A &%Lecture that is part of a &%ReligiousService.")


fof( miloA2278, axiom,
	(![SERMON]: 
		(
			(
				p__d__instance(SERMON,c__Sermon)
			)
			=>
			(
				(?[SERVICE]: 
					(
						(
							(
								p__d__instance(SERVICE,c__ReligiousService)
							)
						 &
							(
								p__subProcess(SERMON,SERVICE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2279, axiom,
	p__d__subclass(c__DramaticActing,c__Pretending)
).



% ($documentation DramaticActing EnglishLanguage "Playing a character in a &%Performance, 
% &%MotionPicture, etc.") 


fof( miloA2280, axiom,
	p__d__subclass(c__DramaticPerformance,c__Performance)
).



% ($documentation DramaticPerformance EnglishLanguage "A &%Performance that consists exclusively of 
% &%DramaticActing, e.g. a live performance of Death_of_a_Salesman in front 
% of an audience.")


fof( miloA2281, axiom,
	(![P,A]: 
		(
			(
				(
					(
						p__d__instance(A,c__Process)
					)
				 &
					(
						p__d__instance(P,c__DramaticPerformance)
					)
				 &
					(
						p__subProcess(A,P)
					)
				)
			)
			=>
			(
				p__d__instance(A,c__DramaticActing)
			)
		)
	)
).


fof( miloA2282, axiom,
	p__d__subclass(c__DramaticCast,c__GroupOfPeople)
).



% ($documentation DramaticCast EnglishLanguage "The &%GroupOfPeople who engage in &%DramaticActing 
% as part of the realization of a single &%FictionalText.")


fof( miloA2283, axiom,
	(![CAST]: 
		(
			(
				p__d__instance(CAST,c__DramaticCast)
			)
			=>
			(
				(?[TEXT,PROP,PROC]: 
					(
						(
							(
								p__d__instance(PROP,c__Proposition)
							)
						 &
							(
								p__d__instance(PROC,c__Process)
							)
						 &
							(
								p__d__instance(TEXT,c__FictionalText)
							)
						 &
							(
								p__containsInformation(TEXT,PROP)
							)
						 &
							(
								p__realization(PROC,PROP)
							)
						 &
							(
								(![MEMBER]: 
									(
										(
											(
												(
													p__d__instance(MEMBER,c__SelfConnectedObject)
												)
											 &
												(
													p__d__instance(MEMBER,c__Agent)
												)
											 &
												(
													p__member(MEMBER,CAST)
												)
											)
										)
										=>
										(
											(?[SUB]: 
												(
													(
														(
															p__d__instance(SUB,c__DramaticActing)
														)
													 &
														(
															p__agent(SUB,MEMBER)
														)
													 &
														(
															p__subProcess(SUB,PROC)
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2284, axiom,
	p__d__subclass(c__SocialParty,c__Meeting)
).


fof( miloA2285, axiom,
	p__d__subclass(c__SocialParty,c__RecreationOrExercise)
).



% ($documentation SocialParty EnglishLanguage "Any &%Meeting where the intent is primarily 
% to socialize and be entertained.")


fof( miloA2286, axiom,
	p__d__subclass(c__FormalMeeting,c__Meeting)
).


fof( miloA2287, axiom,
	p__d__disjoint(c__FormalMeeting,c__SocialParty)
).



% ($documentation FormalMeeting EnglishLanguage "Any &%Meeting which is the result of &%Planning 
% and whose purpose is not socializing.")


fof( miloA2288, axiom,
	(![MEETING]: 
		(
			(
				p__d__instance(MEETING,c__FormalMeeting)
			)
			=>
			(
				(?[PLANNING]: 
					(
						(
							(
								p__d__instance(PLANNING,c__Planning)
							)
						 &
							(
								p__result(PLANNING,MEETING)
							)
						 &
							(
								p__earlier(f__WhenFn1(PLANNING),f__WhenFn1(MEETING))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2289, axiom,
	p__d__subclass(c__Funeral,c__Ceremony)
).


fof( miloA2290, axiom,
	p__d__subclass(c__Funeral,c__FormalMeeting)
).



% ($documentation Funeral EnglishLanguage "A &%FormalMeeting whose purpose is to commemorate 
% the &%Death of someone.")


fof( miloA2291, axiom,
	(![F]: 
		(
			(
				p__d__instance(F,c__Funeral)
			)
			=>
			(
				(?[D]: 
					(
						(
							(
								p__d__instance(D,c__Death)
							)
						 &
							(
								p__refers(F,D)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2292, axiom,
	p__d__subclass(c__Interviewing,c__FormalMeeting)
).



% ($documentation Interviewing EnglishLanguage "A &%FormalMeeting whose purpose is to acquire 
% information from the interviewee that can be used in a media report.")


fof( miloA2293, axiom,
	p__d__subclass(c__Choreographing,c__Planning)
).



% ($documentation Choreographing EnglishLanguage "&%Planning that results in a sequence of dance 
% steps that are executed as part of a &%Performance.")


fof( miloA2294, axiom,
	(![G,P,D]: 
		(
			(
				(
					(
						p__d__instance(P,c__Proposition)
					)
				 &
					(
						p__d__instance(D,c__Process)
					)
				 &
					(
						p__d__instance(G,c__Choreographing)
					)
				 &
					(
						p__result(G,P)
					)
				 &
					(
						p__realization(D,P)
					)
				)
			)
			=>
			(
				p__d__instance(D,c__Dancing)
			)
		)
	)
).


fof( miloA2295, axiom,
	p__d__subclass(c__Resolution,c__Deciding)
).



% ($documentation Resolution EnglishLanguage "Any instance of &%Deciding which is conducted at a 
% &%FormalMeeting and where the &%agent is an &%Organization.")


fof( miloA2296, axiom,
	(![RESOLUTION]: 
		(
			(
				p__d__instance(RESOLUTION,c__Resolution)
			)
			=>
			(
				(?[AGENT,MEETING]: 
					(
						(
							(
								p__d__instance(AGENT,c__Organization)
							)
						 &
							(
								p__agent(RESOLUTION,AGENT)
							)
						 &
							(
								p__subProcess(RESOLUTION,MEETING)
							)
						 &
							(
								p__d__instance(MEETING,c__FormalMeeting)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2297, axiom,
	p__d__subclass(c__Smoking,c__RecreationOrExercise)
).



% ($documentation Smoking EnglishLanguage "Inhaling and exhaling &%Smoke produced by a 
% &%CigarOrCigarette.")

% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check:
% ;;	- The instance of CigarOrCigarrete is forced to be instance of PureSubstance by the following axiom:
% ;;		(=>
% ;;		   (and
% ;;			  ($instance ?PROC ChemicalProcess)
% ;;			  (or
% ;;				 (resource ?PROC ?STUFF)
% ;;				 (result ?PROC ?STUFF)))
% ;;		   ($instance ?STUFF PureSubstance))
% ;;	- CigarOrCigarrete is subclass of SmokingDevice and has Tobacco as part by the following axiom: 
% ;;		(=>
% ;;		  ($instance ?C CigarOrCigarette)
% ;;		  (exists (?T)
% ;;			(and
% ;;			  ($instance ?T Tobacco)
% ;;			  (part ?T ?C))))
% ;; - Tobacco is subclass of FloweringPlant, which is subclass of CorpuscularObject
% ;; - The instance of Tobacco inherits the restriction of being instance of PureSubstance by:
% ;;		(<=>
% ;;		   ($instance ?OBJ Substance)
% ;;		   (exists (?ATTR)
% ;;			  (and
% ;;				 ($instance ?ATTR PhysicalState)
% ;;				 (attribute ?OBJ ?ATTR))))
% ;;		(=>
% ;;		   (and
% ;;			  ($instance ?OBJ Substance)
% ;;			  (attribute ?OBJ ?ATTR)
% ;;			  (part ?PART ?OBJ))
% ;;		   (attribute ?PART ?ATTR))
% ;;  - PureSubstance is subclass of Subclass
% ;;	- CorpuscularObject and Substance are disjoint
% ;;
% ;;(=>
% ;;   ($instance ?SMOKING Smoking)
% ;;   (exists (?BURN ?CIGAR ?BREATHE ?SMOKE)
% ;;      (and
% ;;         (subProcess ?BURN ?SMOKING)
% ;;         ($instance ?BURN Combustion)
% ;;         (resource ?BURN ?CIGAR)
% ;;         ($instance ?CIGAR CigarOrCigarette)
% ;;         (result ?BURN ?SMOKE)
% ;;         (patient ?BREATHE ?SMOKE)
% ;;         ($instance ?BREATHE Breathing)
% ;;         (subProcess ?BREATHE ?SMOKING))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

fof( miloA2298, axiom,
	(![SMOKING]: 
		(
			(
				p__d__instance(SMOKING,c__Smoking)
			)
			=>
			(
				(?[BURN,BREATHE,SMOKE]: 
					(
						(
							(
								p__subProcess(BURN,SMOKING)
							)
						 &
							(
								p__d__instance(BURN,c__Combustion)
							)
						 &
							(
								p__result(BURN,SMOKE)
							)
						 &
							(
								p__patient(BREATHE,SMOKE)
							)
						 &
							(
								p__d__instance(BREATHE,c__Breathing)
							)
						 &
							(
								p__subProcess(BREATHE,SMOKING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2299, axiom,
	p__d__subclass(c__Jury,c__GroupOfPeople)
).



% ($documentation Jury EnglishLanguage "A &%GroupOfPeople who are given the duty of rendering a 
% verdict with respect to a &%LegalAction.")


% 	(forall (?DECISION ?JURY)
% 		(=> 
% 			($instance ?JURY Jury)
% 			(holdsRight (exists ([|] ?DECISION []) (and ([|] ($instance ?DECISION LegalDecision) ([|] (agent ?DECISION ?JURY) [])))) ?JURY)
% 		)
% 	)

fof( miloA2301, axiom,
	p__d__subclass(c__CriminalGang,c__GroupOfPeople)
).



% ($documentation CriminalGang EnglishLanguage "A &%GroupOfPeople which exists (partially or 
% wholly) for the purpose of CriminalAction.")


% 	(forall (?A ?G)
% 		(=> 
% 			($instance ?G CriminalGang)
% 			(hasPurpose ?G (exists ([|] ?A []) (and ([|] ($instance ?A CriminalAction) ([|] (agent ?A ?G) [])))))
% 		)
% 	)

fof( miloA2303, axiom,
	p__d__subclass(c__LegalCharge,c__LegalAction)
).



% ($documentation LegalCharge EnglishLanguage "Any &%LegalAction of which a &%Government is 
% the &%agent.")


fof( miloA2304, axiom,
	(![CHARGE]: 
		(
			(
				p__d__instance(CHARGE,c__LegalCharge)
			)
			=>
			(
				(?[GOV]: 
					(
						(
							(
								p__d__instance(GOV,c__Government)
							)
						 &
							(
								p__agent(CHARGE,GOV)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2305, axiom,
	p__d__subclass(c__LegalAppeal,c__Requesting)
).


fof( miloA2306, axiom,
	p__d__subclass(c__LegalAppeal,c__JudicialProcess)
).



% ($documentation LegalAppeal EnglishLanguage "Asking that a higher court reconsider a &%LegalDecision 
% of a lower court.")


fof( miloA2307, axiom,
	p__d__subclass(c__Pleading,c__Stating)
).



% ($documentation Pleading EnglishLanguage "&%Stating in a court of law a claim about whether or 
% not one is guilty of the crime of which one has been accused.")


fof( miloA2308, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__Pleading)
			)
			=>
			(
				(?[J]: 
					(
						(
							(
								p__d__instance(J,c__JudicialProcess)
							)
						 &
							(
								p__subProcess(P,J)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2309, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__Pleading)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__CriminalAction)
							)
						 &
							(
								p__refers(P,C)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2310, axiom,
	p__d__instance(c__describes,c__BinaryPredicate)
).


% 	($domain describes 1 Formula)

% 	($domain describes 2 Object)


% ($documentation describes EnglishLanguage "(describes ?FORMULA ?OBJECT) means that some 
% &%Formula ?FORMULA, as said by some &%Agent, is a statement regarding some &%Object ?OBJECT")


% (termFormat EnglishLanguage describes "describes")      

fof( miloA2313, axiom,
	(![FORMULA,OBJECT]: 
		(
			(
				(
					(
						p__d__instance(OBJECT,c__Object)
					)
				 &
					(
						p__d__instance(FORMULA,c__Formula)
					)
				 &
					(
						p__describes(FORMULA,OBJECT)
					)
				)
			)
			=>
			(
				(?[STATING,AGENT]: 
					(
						(
							(
								p__d__instance(AGENT,c__Agent)
							)
						 &
							(
								p__d__instance(STATING,c__Stating)
							)
						 &
							(
								p__agent(STATING,AGENT)
							)
						 &
							(
								p__patient(STATING,FORMULA)
							)
						 &
							(
								p__refers(STATING,OBJECT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2314, axiom,
	p__d__subclass(c__Testifying,c__Stating)
).



% ($documentation Testifying EnglishLanguage "Giving testimony as part of a &%JudicialProcess.")


fof( miloA2315, axiom,
	(![TESTIFY]: 
		(
			(
				p__d__instance(TESTIFY,c__Testifying)
			)
			=>
			(
				(?[PROC]: 
					(
						(
							(
								p__d__instance(PROC,c__JudicialProcess)
							)
						 &
							(
								p__subProcess(TESTIFY,PROC)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2316, axiom,
	p__d__subclass(c__CourtRoom,c__Room)
).



% ($documentation CourtRoom EnglishLanguage "Any &%Room whose purpose is to realize 
% &%JudicialProcesses.")


fof( miloA2317, axiom,
	(![PROCESS]: 
		(
			(
				p__d__instance(PROCESS,c__JudicialProcess)
			)
			=>
			(
				(?[ROOM]: 
					(
						(
							(
								p__d__instance(ROOM,c__CourtRoom)
							)
						 &
							(
								p__eventLocated(PROCESS,ROOM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2318, axiom,
	p__d__subclass(c__LegalOpinion,c__Argument)
).



% ($documentation LegalOpinion EnglishLanguage "An &%Argument that explains the reasoning behind a 
% &%LegalDecision.")


fof( miloA2319, axiom,
	(![OPINION]: 
		(
			(
				p__d__instance(OPINION,c__LegalOpinion)
			)
			=>
			(
				(?[DECISION,TEXT,PROPOSITION]: 
					(
						(
							(
								p__d__instance(TEXT,c__ContentBearingPhysical)
							)
						 &
							(
								p__d__instance(PROPOSITION,c__Argument)
							)
						 &
							(
								p__d__instance(DECISION,c__LegalDecision)
							)
						 &
							(
								p__result(DECISION,TEXT)
							)
						 &
							(
								p__containsInformation(TEXT,PROPOSITION)
							)
						 &
							(
								p__conclusion(PROPOSITION,OPINION)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2320, axiom,
	p__d__subclass(c__LegalAward,c__LegalDecision)
).



% ($documentation LegalAward EnglishLanguage "Any &%LegalDecision which gives to the plaintiff of 
% the corresponding &%LegalAction some amount of monetary compensation.")


% 	(forall (?ACTION ?GET ?OBJ ?VALUE ?AWARD ?PLAINTIFF)
% 		(=> 
% 			(and 
% 				($instance ?AWARD LegalAward)
% 				(refers ?AWARD ?ACTION)
% 				($instance ?ACTION LegalAction)
% 				(agent ?ACTION ?PLAINTIFF)
% 			)
% 			(confersRight (exists ([|] ?GET ([|] ?OBJ ([|] ?VALUE []))) (and ([|] ($instance ?GET Getting) ([|] (experiencer ?GET ?PLAINTIFF) ([|] (patient ?GET ?OBJ) ([|] (monetaryValue ?OBJ ?VALUE) [])))))) ?AWARD ?PLAINTIFF)
% 		)
% 	)

fof( miloA2322, axiom,
	p__d__subclass(c__LegalConviction,c__LegalDecision)
).



% ($documentation LegalConviction EnglishLanguage "Any &%LegalDecision where the defendant is found 
% guilty of the crime for which the corresponding trial was held.")


fof( miloA2323, axiom,
	p__d__subclass(c__LegalDismissal,c__LegalDecision)
).



% ($documentation LegalDismissal EnglishLanguage "Any &%LegalDecision where the &%LegalAction of 
% the plaintiff is dismissed by the court, e.g. for lack of merit.")


fof( miloA2324, axiom,
	p__d__subclass(c__LegalSummons,c__Ordering)
).


fof( miloA2325, axiom,
	p__d__subclass(c__LegalSummons,c__JudicialProcess)
).



% ($documentation LegalSummons EnglishLanguage "An official order that a person appear at a 
% &%CourtRoom at a specified time.")


% 	(forall (?S ?O ?P)
% 		(=> 
% 			(and 
% 				($instance ?S LegalSummons)
% 				(patient ?S ?O)
% 				(destination ?S ?P)
% 			)
% 			(exists (?C ?T)
% 				(and 
% 					($instance ?C CourtRoom)
% 					(containsInformation ?O (modalAttribute (holdsDuring ?T (located ?P ?C)) Law))
% 				)
% 			)
% 		)
% 	)

fof( miloA2327, axiom,
	p__d__subclass(c__LegalAquittal,c__LegalDecision)
).



% ($documentation LegalAquittal EnglishLanguage "Any &%LegalDecision where the defendant is found 
% not to be guilty of the crime for which the corresponding trial was held.")


fof( miloA2328, axiom,
	p__d__subclass(c__Sentencing,c__LegalDecision)
).



% ($documentation Sentencing EnglishLanguage "Any &%LegalDecision where the defendant is assigned 
% a punishment for a &%CriminalAction which was the subject of an earlier 
% &%LegalConviction.")


fof( miloA2329, axiom,
	(![P,S]: 
		(
			(
				(
					(
						p__d__instance(S,c__Sentencing)
					)
				 &
					(
						p__patient(S,P)
					)
				)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__causes(C,S)
							)
						 &
							(
								p__d__instance(C,c__LegalConviction)
							)
						 &
							(
								p__patient(C,P)
							)
						 &
							(
								p__earlier(f__WhenFn1(C),f__WhenFn1(S))
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation defendant EnglishLanguage "(defendant ?AGENT ?ACTION) means the &%LegalAction 
% ?ACTION makes a legal claim against ?AGENT.")


% 	($domain defendant 1 CognitiveAgent)

% 	($domain defendant 2 LegalAction)

fof( miloA2332, axiom,
	p__subrelation(c__defendant,c__patient)
).



% ($documentation plaintiff EnglishLanguage "(plaintiff ?ACTION ?AGENT) means that ?AGENT 
% is responsible for initiating the &%LegalAction ?ACTION.")


% 	($domain plaintiff 1 LegalAction)

% 	($domain plaintiff 2 CognitiveAgent)

fof( miloA2335, axiom,
	p__subrelation(c__plaintiff,c__agent)
).


fof( miloA2336, axiom,
	p__d__subclass(c__GameCall,c__Deciding)
).


fof( miloA2337, axiom,
	p__d__subclass(c__GameCall,c__Declaring)
).



% ($documentation GameCall EnglishLanguage "A decision issued by an official referee in a 
% &%Game.  Note that &%GameCall is a subclass of &%Declaring, because these 
% decisions have binding, normative force.")


fof( miloA2338, axiom,
	(![CALL]: 
		(
			(
				p__d__instance(CALL,c__GameCall)
			)
			=>
			(
				(?[GAME]: 
					(
						(
							(
								p__d__instance(GAME,c__Game)
							)
						 &
							(
								p__refers(CALL,GAME)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2339, axiom,
	p__d__subclass(c__BeginningOperations,c__OrganizationalProcess)
).


fof( miloA2340, axiom,
	p__d__disjoint(c__BeginningOperations,c__CeasingOperations)
).



% ($documentation BeginningOperations EnglishLanguage "The process of an &%Organization 
% commencing operations.  In the case of a &%Corporation, this would be 
% the process of going into business.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of agent is Agent, which is subclass of Physical, whereas the first argument of starts is TimeInterval, which is subclass of Abstract (Physical and Abstract are disjoint)
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?OP BeginningOperations)
% ;;      ($instance ?ORG Organization)
% ;;      (agent ?OP ?ORG))
% ;;   (starts ?OP (WhenFn ?ORG)))
% )

fof( miloA2341, axiom,
	p__d__subclass(c__OrganizationalMerging,c__OrganizationalProcess)
).



% ($documentation OrganizationalMerging EnglishLanguage "The process of two or more 
% &%Organizations merging into a single &%Organization.")


% 	(forall (?S1 ?M ?ORG1 ?ORG2 ?S2)
% 		(=> 
% 			(and 
% 				($instance ?M OrganizationalMerging)
% 				(patient ?M ?ORG1)
% 				(patient ?M ?ORG2)
% 				(not 
% 					(equal ?ORG1 ?ORG2)
% 				)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?M)) (not (exists ([|] ?S1 []) (and ([|] (subOrganization ?ORG1 ?S1) ([|] (subOrganization ?ORG2 ?S1) []))))))
% 				(holdsDuring (EndFn (WhenFn ?M)) (exists ([|] ?S2 []) (and ([|] (subOrganization ?ORG1 ?S2) ([|] (subOrganization ?ORG2 ?S2) [])))))
% 			)
% 		)
% 	)

fof( miloA2343, axiom,
	p__d__subclass(c__CeasingOperations,c__OrganizationalProcess)
).



% ($documentation CeasingOperations EnglishLanguage "The process of an &%Organization 
% ceasing operations, i.e. its folding or going out of business in 
% some other fashion.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of agent is Agent, which is subclass of Physical, whereas the first argument of finishes is TimeInterval, which is subclass of Abstract (Physical and Abstract are disjoint)
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?OP CeasingOperations)
% ;;      ($instance ?ORG Organization)
% ;;      (agent ?OP ?ORG))
% ;;   (finishes ?OP (WhenFn ?ORG)))
% )

fof( miloA2344, axiom,
	p__d__subclass(c__BecomingDrunk,c__PsychologicalProcess)
).


fof( miloA2345, axiom,
	p__d__disjoint(c__BecomingDrunk,c__SoberingUp)
).



% ($documentation BecomingDrunk EnglishLanguage "The process of transitioning from a state of 
% being &%Sober to a state of being &%Drunk.")


% 	(forall (?B ?A)
% 		(=> 
% 			(and 
% 				($instance ?B BecomingDrunk)
% 				(experiencer ?B ?A)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?B)) (attribute ?A Sober))
% 				(holdsDuring (EndFn (WhenFn ?B)) (attribute ?A Drunk))
% 			)
% 		)
% 	)

fof( miloA2347, axiom,
	p__d__instance(c__Sober,c__ConsciousnessAttribute)
).



% ($documentation Sober EnglishLanguage "The &%ConsciousnessAttribute of someone whose motor and
% cognitive faculties are not significantly impaired by a &%BiologicallyActiveSubstance.")


fof( miloA2348, axiom,
	p__d__subclass(c__SoberingUp,c__PsychologicalProcess)
).



% ($documentation SoberingUp EnglishLanguage "The process of transitioning from a state of 
% being &%Drunk to a state of being &%Sober.")


% 	(forall (?B ?A)
% 		(=> 
% 			(and 
% 				($instance ?B SoberingUp)
% 				(experiencer ?B ?A)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?B)) (attribute ?A Drunk))
% 				(holdsDuring (EndFn (WhenFn ?B)) (attribute ?A Sober))
% 			)
% 		)
% 	)

fof( miloA2350, axiom,
	p__d__subclass(c__FallingAsleep,c__PsychologicalProcess)
).


fof( miloA2351, axiom,
	p__d__disjoint(c__FallingAsleep,c__WakingUp)
).



% ($documentation FallingAsleep EnglishLanguage "The process of transitioning from a state of 
% being &%Awake to a state of being &%Asleep.")


% 	(forall (?FALL ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?FALL FallingAsleep)
% 				(experiencer ?FALL ?AGENT)
% 			)
% 			(exists (?START ?FINISH)
% 				(and 
% 					(starts ?START (WhenFn ?FALL))
% 					(finishes ?FINISH (WhenFn ?FALL))
% 					(holdsDuring ?START (attribute ?AGENT Awake))
% 					(holdsDuring ?FINISH (attribute ?AGENT Asleep))
% 				)
% 			)
% 		)
% 	)

fof( miloA2353, axiom,
	p__d__subclass(c__WakingUp,c__PsychologicalProcess)
).



% ($documentation WakingUp EnglishLanguage "The process of transitioning from a state of being 
% &%Asleep to a state of being &%Awake.")


% 	(forall (?WAKE ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?WAKE WakingUp)
% 				(experiencer ?WAKE ?AGENT)
% 			)
% 			(exists (?START ?FINISH)
% 				(and 
% 					(starts ?START (WhenFn ?WAKE))
% 					(finishes ?FINISH (WhenFn ?WAKE))
% 					(holdsDuring ?START (attribute ?AGENT Asleep))
% 					(holdsDuring ?FINISH (attribute ?AGENT Awake))
% 				)
% 			)
% 		)
% 	)

fof( miloA2355, axiom,
	p__d__subclass(c__GainingConsciousness,c__PsychologicalProcess)
).



% ($documentation GainingConsciousness EnglishLanguage "The process of transitioning from a state 
% of being &%Unconscious to a state of being &%Awake.")


% 	(forall (?G ?A)
% 		(=> 
% 			(and 
% 				($instance ?G GainingConsciousness)
% 				(experiencer ?G ?A)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?G)) (attribute ?A Unconscious))
% 				(holdsDuring (EndFn (WhenFn ?G)) (attribute ?A Awake))
% 			)
% 		)
% 	)

fof( miloA2357, axiom,
	p__d__subclass(c__LosingConsciousness,c__PsychologicalProcess)
).


fof( miloA2358, axiom,
	p__d__disjoint(c__LosingConsciousness,c__GainingConsciousness)
).



% ($documentation LosingConsciousness EnglishLanguage "The process of transitioning from a state 
% of being &%Awake to a state of being &%Unconscious.")


% 	(forall (?L ?A)
% 		(=> 
% 			(and 
% 				($instance ?L LosingConsciousness)
% 				(experiencer ?L ?A)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?L)) (attribute ?A Awake))
% 				(holdsDuring (EndFn (WhenFn ?L)) (attribute ?A Unconscious))
% 			)
% 		)
% 	)

fof( miloA2360, axiom,
	p__d__instance(c__issuedBy,c__BinaryPredicate)
).


% 	($domain issuedBy 1 Certificate)

% 	($domain issuedBy 2 CognitiveAgent)


% ($documentation issuedBy EnglishLanguage "(&%issuedBy ?Certificate ?Agent) means that a 
% &%Certificate ?Certificate is produced and offered by ?Agent.")


fof( miloA2363, axiom,
	(![AGENT,CERT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(CERT,c__Certificate)
					)
				 &
					(
						p__issuedBy(CERT,AGENT)
					)
				)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__d__instance(P,c__IntentionalProcess)
							)
						 &
							(
								p__agent(P,AGENT)
							)
						 &
							(
								p__result(P,CERT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2364, axiom,
	p__d__subclass(c__AcademicDegree,c__Certificate)
).



% ($documentation AcademicDegree EnglishLanguage "A &%Certificate that demonstrates that the holder 
% of the &%Certificate has successfully completed an &%EducationalProgram.")


fof( miloA2365, axiom,
	(![DEGREE,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(DEGREE,c__AcademicDegree)
					)
				 &
					(
						p__possesses(AGENT,DEGREE)
					)
				)
			)
			=>
			(
				(?[PROGRAM,STUDY]: 
					(
						(
							(
								p__d__instance(STUDY,c__Process)
							)
						 &
							(
								p__d__instance(PROGRAM,c__EducationalProgram)
							)
						 &
							(
								p__realization(STUDY,PROGRAM)
							)
						 &
							(
								p__experiencer(STUDY,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2366, axiom,
	p__d__subclass(c__License,c__Certificate)
).



% ($documentation License EnglishLanguage "License is the subclass of &%Certificates that 
% are granted by a &%GovernmentOrganization and that authorize the performance 
% of a kind of action, e.g., driving, exporting, travelling to another 
% country, etc.")


fof( miloA2367, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__License)
			)
			=>
			(
				(?[ORG]: 
					(
						(
							(
								p__d__instance(ORG,c__CognitiveAgent)
							)
						 &
							(
								p__d__instance(ORG,c__GovernmentOrganization)
							)
						 &
							(
								p__issuedBy(L,ORG)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2368, axiom,
	p__d__subclass(c__Ticket,c__Certificate)
).



% ($documentation Ticket EnglishLanguage "A &%Certificate that allows the holder to perform 
% a specified act once, e.g. ride a bus, attend a concert, obtain a prize, 
% etc.")


% ($comment 
% ;; KJN: Changing this to be more accurate by including a holdsDuring relation, as 
% ;; having a ticket doesn't give you perpetual permission to something
% ;;(=>
% ;;  (and
% ;;    ($instance ?T Ticket)
% ;;    (possesses ?A ?T))
% ;;  (confersNorm ?T 
% ;;    (exists (?P) 
% ;;     (agent ?P ?A)) 
% ;;    Permission))
% )

% 	(forall (?TICKET ?T ?AGENT ?P ?CUST)
% 		(=> 
% 			(and 
% 				(issuedBy ?TICKET ?AGENT)
% 				($instance ?TICKET Ticket)
% 				(possesses ?CUST ?TICKET)
% 			)
% 			(confersNorm ?AGENT (exists ([|] ?T []) (holdsDuring ?T (exists ([|] ?P []) (and ([|] ($instance ?P Process) ([|] (agent ?P ?AGENT) ([|] (experiencer ?P ?CUST) []))))))) Permission)
% 		)
% 	)

fof( miloA2370, axiom,
	p__d__subclass(c__Passport,c__License)
).



% ($documentation Passport EnglishLanguage "A &%License which identifies the holder and permits 
% travel between different countries.")


% 	(forall (?P ?A ?T ?N1 ?N2)
% 		(=> 
% 			(and 
% 				($instance ?P Passport)
% 				(possesses ?A ?P)
% 			)
% 			(confersNorm ?P (exists ([|] ?T ([|] ?N1 ([|] ?N2 []))) (and ([|] ($instance ?T Translocation) ([|] (agent ?T ?A) ([|] (origin ?T ?N1) ([|] (destination ?T ?N2) ([|] ($instance ?N1 Nation) ([|] ($instance ?N2 Nation) ([|] (not (equal ?N1 ?N2)) []))))))))) Permission)
% 		)
% 	)

fof( miloA2372, axiom,
	p__d__subclass(c__PassCertificate,c__Certificate)
).



% ($documentation PassCertificate EnglishLanguage "A &%Certificate that allows the holder to 
% be at or away from a specified location, e.g. a pass for a leave of 
% absence, a hall pass, a pass to enter a cleared facility, etc.")


% 	(forall (?P ?A)
% 		(=> 
% 			(and 
% 				($instance ?P PassCertificate)
% 				(possesses ?A ?P)
% 			)
% 			(exists (?L)
% 				(confersNorm ?P (located ?A ?L) Permission)
% 			)
% 		)
% 	)

fof( miloA2374, axiom,
	p__d__subclass(c__Testament,c__Certificate)
).



% ($documentation Testament EnglishLanguage "A &%Certificate that describes how a person's 
% property is to be distributed after the death of the person.")


fof( miloA2375, axiom,
	(![T]: 
		(
			(
				p__d__instance(T,c__Testament)
			)
			=>
			(
				(?[B]: 
					(
						(
							(
								p__d__instance(B,c__Bequeathing)
							)
						 &
							(
								p__refers(T,B)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation registeredItem EnglishLanguage "(registeredItem ?DOCUMENT ?ITEM) means 
% that the &%Text ?DOCUMENT contains an official record of the &%Physical 
% thing ?ITEM.  The registered item could be an object or an event, e.g., 
% an automobile, a ship, a marriage, an adoption.")


fof( miloA2376, axiom,
	p__d__instance(c__registeredItem,c__BinaryPredicate)
).


% 	($domain registeredItem 1 Text)

% 	($domain registeredItem 2 Physical)

fof( miloA2379, axiom,
	p__subrelation(c__registeredItem,c__refers)
).


fof( miloA2380, axiom,
	p__d__subclass(c__EducationalProgram,c__Plan)
).



% ($documentation EducationalProgram EnglishLanguage "A series of &%EducationalCourses that must 
% be completed to receive an &%AcademicDegree or other &%Certificate.  Note that 
% an &%EducationalProgram, unlike an &%EducationalCourse, may be realized at more 
% than one &%EducationalOrganization.")


fof( miloA2381, axiom,
	(![PROGRAM]: 
		(
			(
				p__d__instance(PROGRAM,c__EducationalProgram)
			)
			=>
			(
				(?[COURSE1,COURSE2]: 
					(
						(
							(
								p__d__instance(COURSE1,c__EducationalCourse)
							)
						 &
							(
								p__d__instance(COURSE2,c__EducationalCourse)
							)
						 &
							(
								~ (
									( COURSE1 = COURSE2 )
								)
							)
						 &
							(
								p__subPlan(COURSE1,PROGRAM)
							)
						 &
							(
								p__subPlan(COURSE2,PROGRAM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2382, axiom,
	p__d__subclass(c__EducationalCourse,c__EducationalProgram)
).



% ($documentation EducationalCourse EnglishLanguage "A schedule of class meetings offered by an 
% &%EducationalOrganization.")


fof( miloA2383, axiom,
	(![COURSE]: 
		(
			(
				p__d__instance(COURSE,c__EducationalCourse)
			)
			=>
			(
				(?[CLASS,ORG]: 
					(
						(
							(
								p__realization(CLASS,COURSE)
							)
						 &
							(
								p__d__instance(CLASS,c__EducationalProcess)
							)
						 &
							(
								p__eventLocated(CLASS,ORG)
							)
						 &
							(
								p__d__instance(ORG,c__EducationalOrganization)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2384, axiom,
	p__d__subclass(c__SportsPlay,c__Plan)
).



% ($documentation SportsPlay EnglishLanguage "A &%Plan for a &%Maneuver within a &%TeamSport.")


fof( miloA2385, axiom,
	(![SP,P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Process)
					)
				 &
					(
						p__d__instance(SP,c__SportsPlay)
					)
				 &
					(
						p__realization(P,SP)
					)
				)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__TeamSport)
							)
						 &
							(
								p__d__instance(P,c__Maneuver)
							)
						 &
							(
								p__subProcess(P,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2386, axiom,
	p__d__subclass(c__School,c__EducationalOrganization)
).



% ($documentation School EnglishLanguage "An &%EducationalOrganization with a curriculum, 
% teachers, and students.  Most &%Schools are housed in a &%Building 
% dedicated to the &%EducationalOrganization.")


fof( miloA2387, axiom,
	p__d__subclass(c__PublicSchool,c__School)
).


fof( miloA2388, axiom,
	p__d__subclass(c__PublicSchool,c__GovernmentOrganization)
).



% ($documentation PublicSchool EnglishLanguage "A &%School which is financed primarily by taxes.")


fof( miloA2389, axiom,
	p__d__subclass(c__PrivateSchool,c__School)
).


fof( miloA2390, axiom,
	p__d__disjoint(c__PrivateSchool,c__GovernmentOrganization)
).



% ($documentation PrivateSchool EnglishLanguage "A &%School which is not publicly owned.")


fof( miloA2391, axiom,
	p__d__subclass(c__HighSchool,c__School)
).



% ($documentation HighSchool EnglishLanguage "A &%School which admits &%students who have 
% graduated from a middle school and which normally covers the ninth through 
% twelfth grades.  A &%HighSchool confers a high school diploma.")


fof( miloA2392, axiom,
	(![COLLEGE,STUDENT,ENTER]: 
		(
			(
				(
					(
						p__d__instance(ENTER,c__Matriculation)
					)
				 &
					(
						p__agent(ENTER,COLLEGE)
					)
				 &
					(
						p__patient(ENTER,STUDENT)
					)
				 &
					(
						p__d__instance(COLLEGE,c__College)
					)
				)
			)
			=>
			(
				(?[GRAD,SCHOOL]: 
					(
						(
							(
								p__d__instance(GRAD,c__Graduation)
							)
						 &
							(
								p__agent(GRAD,SCHOOL)
							)
						 &
							(
								p__patient(GRAD,STUDENT)
							)
						 &
							(
								p__d__instance(SCHOOL,c__HighSchool)
							)
						 &
							(
								p__earlier(f__WhenFn1(GRAD),f__WhenFn1(ENTER))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2393, axiom,
	p__d__subclass(c__SecondarySchool,c__School)
).



% ($documentation SecondarySchool EnglishLanguage "A &%School which admits students who have 
% graduated from a middle school and which normally covers the ninth through 
% twelfth grades.  A &%SecondarySchool confers a high school diploma.")


fof( miloA2394, axiom,
	(![C,P,E]: 
		(
			(
				(
					(
						p__d__instance(E,c__Matriculation)
					)
				 &
					(
						p__agent(E,C)
					)
				 &
					(
						p__patient(E,P)
					)
				 &
					(
						p__d__instance(C,c__College)
					)
				)
			)
			=>
			(
				(?[G,S]: 
					(
						(
							(
								p__d__instance(G,c__Graduation)
							)
						 &
							(
								p__agent(G,S)
							)
						 &
							(
								p__patient(G,P)
							)
						 &
							(
								p__d__instance(S,c__SecondarySchool)
							)
						 &
							(
								p__earlier(f__WhenFn1(G),f__WhenFn1(E))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2395, axiom,
	p__d__subclass(c__VocationalSchool,c__School)
).



% ($documentation VocationalSchool EnglishLanguage "Any &%School whose aim is to teach 
% students an &%OccupationalTrade.")


% 	(forall (?VS ?P ?S ?T)
% 		(=> 
% 			($instance ?VS VocationalSchool)
% 			(hasPurpose ?VS (exists ([|] ?P ([|] ?S ([|] ?T []))) (and ([|] ($instance ?P EducationalProcess) ([|] (eventLocated ?P ?VS) ([|] (student ?S ?VS) ([|] (experiencer ?P ?S) ([|] ($instance ?T OccupationalTrade) ([|] (holdsDuring (EndFn (WhenFn ?P)) (attribute ?S ?T)) [])))))))))
% 		)
% 	)

fof( miloA2397, axiom,
	p__d__subclass(c__PostSecondarySchool,c__School)
).


fof( miloA2398, axiom,
	p__d__partition4(c__PostSecondarySchool,c__JuniorCollege,c__College,c__University)
).



% ($documentation PostSecondarySchool EnglishLanguage "The class of &%Schools that offer 
% an associate's degree or a bachelor's degree.")


fof( miloA2399, axiom,
	p__d__subclass(c__JuniorCollege,c__PostSecondarySchool)
).



% ($documentation JuniorCollege EnglishLanguage "The class of &%PostSecondarySchools that 
% offer an associate's degree and do not offer a bachelor's degree.")


fof( miloA2400, axiom,
	p__d__subclass(c__College,c__PostSecondarySchool)
).



% ($documentation College EnglishLanguage "A &%School which admits &%students who have 
% graduated from high school and which confers a bachelor's degree, 
% normally requiring four years of study.  Note that a &%College does 
% not confer any graduate degrees.  For institutions that confer both 
% bachelor's and graduate degrees, the concept &%University should be 
% used.") 


fof( miloA2401, axiom,
	p__d__subclass(c__University,c__PostSecondarySchool)
).



% ($documentation University EnglishLanguage "A &%School which admits &%students that 
% have graduated from high school (known as undergraduate students) and 
% &%students who have received a bachelor's degree (known as graduate 
% students).  A &%University confers both bachelor's and graduate 
% degrees.")


fof( miloA2402, axiom,
	p__d__subclass(c__GraduateSchool,c__PostSecondarySchool)
).



% ($documentation GraduateSchool EnglishLanguage "A &%School which is devoted to a specific 
% subject area, which admits students that have a bachelor's degree, which 
% grants masters and/or doctorate degrees, and which is part of a &%University.")


fof( miloA2403, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__GraduateSchool)
			)
			=>
			(
				(?[U]: 
					(
						(
							(
								p__d__instance(U,c__University)
							)
						 &
							(
								p__part(S,U)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2404, axiom,
	p__d__subclass(c__MedicalSchool,c__GraduateSchool)
).



% ($documentation MedicalSchool EnglishLanguage "A &%GraduateSchool that is devoted to 
% &%MedicalScience and that grants the degree of doctor of medicine.")


fof( miloA2405, axiom,
	p__d__subclass(c__ArtSchool,c__School)
).



% ($documentation ArtSchool EnglishLanguage "Any &%School whose aim is to teach students 
% how to create &%ArtWorks.")


fof( miloA2406, axiom,
	(![AS,P]: 
		(
			(
				(
					(
						p__d__instance(AS,c__ArtSchool)
					)
				 &
					(
						p__d__instance(P,c__EducationalProcess)
					)
				 &
					(
						p__eventLocated(P,AS)
					)
				)
			)
			=>
			(
				(?[M,ART]: 
					(
						(
							(
								p__d__instance(M,c__Making)
							)
						 &
							(
								p__patient(M,ART)
							)
						 &
							(
								p__d__instance(ART,c__ArtWork)
							)
						 &
							(
								p__refers(P,M)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2407, axiom,
	p__d__subclass(c__DaySchool,c__School)
).



% ($documentation DaySchool EnglishLanguage "A &%School that does not board its students, i.e. 
% students attend classes during the day and then return to a private residence 
% for the night.")


fof( miloA2408, axiom,
	(![DS]: 
		(
			(
				(
					(
						p__d__instance(DS,c__PermanentResidence)
					)
				 &
					(
						p__d__instance(DS,c__DaySchool)
					)
				)
			)
			=>
			(
				(![S]: 
					(
						(
							~ (
								p__d__instance(S,c__Human)
							)
						 |
							~ (
								p__student(S,DS)
							)
						 |
							~ (
								p__home(S,DS)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2409, axiom,
	p__subrelation(c__student,c__member)
).


% 	($domain student 1 CognitiveAgent)

% 	($domain student 2 EducationalOrganization)


% ($documentation student EnglishLanguage "(&%student ?AGENT ?ORG) means that ?AGENT is enrolled 
% in the &%EducationalOrganization ?ORG.")


fof( miloA2412, axiom,
	(![ORG,AGENT]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__EducationalOrganization)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__student(AGENT,ORG)
					)
				)
			)
			=>
			(
				(?[PROCESS]: 
					(
						(
							(
								p__d__instance(PROCESS,c__EducationalProcess)
							)
						 &
							(
								p__eventLocated(PROCESS,ORG)
							)
						 &
							(
								p__destination(PROCESS,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2413, axiom,
	p__subrelation(c__teacher,c__member)
).


% 	($domain teacher 1 CognitiveAgent)

% 	($domain teacher 2 EducationalOrganization)


% ($documentation teacher EnglishLanguage "(&%teacher ?AGENT ?ORG) means that ?AGENT is a 
% teacher at the &%EducationalOrganization ?ORG.")


fof( miloA2416, axiom,
	(![ORG,AGENT]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__EducationalOrganization)
					)
				 &
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__teacher(AGENT,ORG)
					)
				)
			)
			=>
			(
				(?[PROCESS]: 
					(
						(
							(
								p__d__instance(PROCESS,c__EducationalProcess)
							)
						 &
							(
								p__eventLocated(PROCESS,ORG)
							)
						 &
							(
								p__agent(PROCESS,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2417, axiom,
	p__d__subclass(c__DriversLicense,c__License)
).



% ($documentation DriversLicense EnglishLanguage "A &%License which identifies the holder and 
% indicates that he has the right to drive a certain class of &%RoadVehicle.")


% 	(forall (?L ?A ?D ?V)
% 		(=> 
% 			(and 
% 				($instance ?L DriversLicense)
% 				(possesses ?A ?L)
% 			)
% 			(confersNorm ?L (exists ([|] ?D ([|] ?V [])) (and ([|] ($instance ?D Driving) ([|] (agent ?D ?A) ([|] (patient ?D ?V) ([|] ($instance ?V RoadVehicle) [])))))) Permission)
% 		)
% 	)

fof( miloA2419, axiom,
	p__d__subclass(c__InsurancePolicy,c__Certificate)
).



% ($documentation InsurancePolicy EnglishLanguage "A &%Certificate that states the terms of an 
% insurance contract.")


fof( miloA2420, axiom,
	p__d__subclass(c__EconomicRelation,c__BinaryRelation)
).



% ($documentation EconomicRelation EnglishLanguage "A class of &%Relations which are used 
% to specify various economic measures, e.g. the GDP, the consumer price 
% index, and the trade deficit.")


fof( miloA2421, axiom,
	(![REL,CLASS]: 
		(
			(
				(
					(
						p__d__instance(CLASS,c__SetOrClass)
					)
				 &
					(
						p__d__instance(REL,c__EconomicRelation)
					)
				 &
					(
						p__domain(REL,c__1,CLASS)
					)
				)
			)
			=>
			(
				p__d__subclass(CLASS,c__GeopoliticalArea)
			)
		)
	)
).


fof( miloA2422, axiom,
	p__d__subclass(c__LaborStriking,c__OrganizationalProcess)
).



% ($documentation LaborStriking EnglishLanguage "A &%Process in which some or all of the 
% employees of an &%Organization refuse to work until their pay is 
% increased or their working conditions are improved in some respect.")


fof( miloA2423, axiom,
	(![STRIKE,ORG,PERSON]: 
		(
			(
				(
					(
						p__d__instance(STRIKE,c__LaborStriking)
					)
				 &
					(
						p__agent(STRIKE,PERSON)
					)
				 &
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__patient(STRIKE,ORG)
					)
				 &
					(
						p__d__instance(ORG,c__Organization)
					)
				)
			)
			=>
			(
				p__employs(ORG,PERSON)
			)
		)
	)
).


fof( miloA2424, axiom,
	p__d__subclass(c__EmploymentFiring,c__TerminatingEmployment)
).



% ($documentation EmploymentFiring EnglishLanguage "Involuntarily ending one's employment.  
% Note that this covers termination due to inadequate performance, as 
% well as layoffs.")


fof( miloA2425, axiom,
	p__d__subclass(c__Resigning,c__TerminatingEmployment)
).



% ($documentation Resigning EnglishLanguage "Voluntarily ending one's employment.")


fof( miloA2426, axiom,
	(![A,R]: 
		(
			(
				(
					(
						p__d__instance(A,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(R,c__Resigning)
					)
				 &
					(
						p__agent(R,A)
					)
				)
			)
			=>
			(
				p__wants(A,R)
			)
		)
	)
).


fof( miloA2427, axiom,
	p__d__subclass(c__Retiring,c__Resigning)
).



% ($documentation Retiring EnglishLanguage "Voluntarily leaving employment at the end of one's 
% career in order to take time off in the later years of one's life.")


fof( miloA2428, axiom,
	p__d__subclass(c__TransferringPosition,c__OrganizationalProcess)
).



% ($documentation TransferringPosition EnglishLanguage "Any process within an &%Organization 
% where a person is moved from one &%Position to another, e.g. the promotion 
% or demotion of an employee.")


% 	(forall (?T ?H)
% 		(=> 
% 			(and 
% 				($instance ?T TransferringPosition)
% 				(experiencer ?T ?H)
% 			)
% 			(exists (?P1 ?P2 ?ORG)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?T)) (occupiesPosition ?H ?P1 ?ORG))
% 					(holdsDuring (EndFn (WhenFn ?T)) (occupiesPosition ?H ?P2 ?ORG))
% 					(not 
% 						(equal ?P1 ?P2)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA2430, axiom,
	p__d__instance(c__monetaryWage,c__QuaternaryPredicate)
).


% 	($domain monetaryWage 1 Organization)

% 	($domain monetaryWage 2 Human)

% 	($domain monetaryWage 3 TimeDuration)

% 	($domain monetaryWage 4 CurrencyMeasure)


% ($documentation monetaryWage EnglishLanguage "(&%monetaryWage ?ORG ?PERSON ?TIME ?MONEY) means 
% that the &%Organization employs ?PERSON and pays him/her the amount of money 
% ?MONEY per &%TimeDuration ?TIME.") 


fof( miloA2435, axiom,
	(![TIME,MONEY,ORG,PERSON]: 
		(
			(
				(
					(
						p__d__instance(MONEY,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(TIME,c__TimeDuration)
					)
				 &
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__monetaryWage(ORG,PERSON,TIME,MONEY)
					)
				)
			)
			=>
			(
				p__employs(ORG,PERSON)
			)
		)
	)
).


fof( miloA2436, axiom,
	p__d__subclass(c__GameArtifact,c__Artifact)
).


fof( miloA2437, axiom,
	p__d__disjointDecomposition3(c__GameArtifact,c__GameBoard,c__GamePiece)
).



% ($documentation GameArtifact EnglishLanguage "An &%Artifact that is designed to be used as an 
% &%instrument in a &%Game.")


fof( miloA2438, axiom,
	(![ARTIFACT]: 
		(
			(
				p__d__instance(ARTIFACT,c__GameArtifact)
			)
			=>
			(
				(?[GAME]: 
					(
						(
							(
								p__d__subclass(GAME,c__Game)
							)
						 &
							(
								p__capability(GAME,c__instrument,ARTIFACT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2439, axiom,
	p__d__subclass(c__GameBoard,c__GameArtifact)
).



% ($documentation GameBoard EnglishLanguage "A &%GameArtifact which is intended to be used as the 
% game area for playing a particular game.")


% 	(forall (?GAME ?BOARD)
% 		(=> 
% 			($instance ?BOARD GameBoard)
% 			(hasPurpose ?BOARD (exists ([|] ?GAME []) (and ([|] ($instance ?GAME Game) ([|] (eventLocated ?GAME ?BOARD) [])))))
% 		)
% 	)

fof( miloA2441, axiom,
	p__d__subclass(c__GamePiece,c__GameArtifact)
).



% ($documentation GamePiece EnglishLanguage "A &%GameArtifact that is moved around in a game 
% area.")


fof( miloA2442, axiom,
	p__d__subclass(c__GameDie,c__GamePiece)
).



% ($documentation GameDie EnglishLanguage "A small cube with 1 to 6 dots on each face that is 
% used to generate numbers at random in a &%Game.")


fof( miloA2443, axiom,
	p__d__subclass(c__Ball,c__GamePiece)
).



% ($documentation Ball EnglishLanguage "Any &%GamePiece which has the shape of a sphere.")


% 	(forall (?B)
% 		(=> 
% 			($instance ?B Ball)
% 			(attribute ?B Sphere)
% 		)
% 	)

fof( miloA2445, axiom,
	p__d__subclass(c__ShotBall,c__Ball)
).



% ($documentation ShotBall EnglishLanguage "A solid metal &%Ball that is used in the sport of 
% shotput.")


fof( miloA2446, axiom,
	p__d__subclass(c__GameShot,c__Impelling)
).


fof( miloA2447, axiom,
	p__d__subclass(c__GameShot,c__Maneuver)
).



% ($documentation GameShot EnglishLanguage "Impelling a &%GamePiece for the purpose of 
% scoring a point or preventing the opposing player or team from scoring 
% a point.  Note that this class does not cover shots which are disallowed 
% by the rules of the game.")


fof( miloA2448, axiom,
	(![SHOT]: 
		(
			(
				p__d__instance(SHOT,c__GameShot)
			)
			=>
			(
				(?[PIECE]: 
					(
						(
							(
								p__d__instance(PIECE,c__GamePiece)
							)
						 &
							(
								p__patient(SHOT,PIECE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2449, axiom,
	(![SHOT]: 
		(
			(
				p__d__instance(SHOT,c__GameShot)
			)
			=>
			(
				(?[GAME]: 
					(
						(
							(
								p__d__instance(GAME,c__Game)
							)
						 &
							(
								p__subProcess(SHOT,GAME)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?SHOT)
% 		(=> 
% 			($instance ?SHOT GameShot)
% 			(hasPurpose ?SHOT ($instance ?SHOT Score))
% 		)
% 	)

fof( miloA2451, axiom,
	p__d__subclass(c__Score,c__GameShot)
).



% ($documentation Score EnglishLanguage "A successful attempt to score a point in a &%Game.")


fof( miloA2452, axiom,
	p__d__subclass(c__GameGoal,c__GameArtifact)
).



% ($documentation GameGoal EnglishLanguage "The location where a &%GameShot must end up if it 
% is to constitute a &%Score.")


% 	(forall (?GAME ?SCORE ?GOAL)
% 		(=> 
% 			(and 
% 				($instance ?GOAL GameGoal)
% 				(instrument ?GAME ?GOAL)
% 				($instance ?GAME Game)
% 				(subProcess ?SCORE ?GAME)
% 				($instance ?SCORE Score)
% 			)
% 			(exists (?PIECE ?TIME)
% 				(and 
% 					($instance ?PIECE GamePiece)
% 					(patient ?SCORE ?PIECE)
% 					(temporalPart ?TIME (WhenFn ?SCORE))
% 					(holdsDuring ?TIME (located ?PIECE ?GOAL))
% 				)
% 			)
% 		)
% 	)

fof( miloA2454, axiom,
	p__d__subclass(c__SportServe,c__GameShot)
).



% ($documentation SportServe EnglishLanguage "A &%GameShot which is part of a &%Sport and 
% which serves to start the &%Sport, e.g. the beginning shot in &%Tennis, 
% &%Badminton or &%Squash.")


fof( miloA2455, axiom,
	(![SS]: 
		(
			(
				p__d__instance(SS,c__SportServe)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__Sport)
							)
						 &
							(
								p__subProcess(SS,S)
							)
						 &
							(
								p__starts(f__WhenFn1(SS),f__WhenFn1(S))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2456, axiom,
	p__d__subclass(c__Throwing,c__Impelling)
).


fof( miloA2457, axiom,
	p__d__subclass(c__Throwing,c__BodyMotion)
).



% ($documentation Throwing EnglishLanguage "Any instance of &%Impelling where the &%instrument is 
% an &%Arm.")


fof( miloA2458, axiom,
	(![THROW]: 
		(
			(
				p__d__instance(THROW,c__Throwing)
			)
			=>
			(
				(?[ARM]: 
					(
						(
							(
								p__d__instance(ARM,c__Arm)
							)
						 &
							(
								p__instrument(THROW,ARM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2459, axiom,
	p__d__subclass(c__Pitching,c__Throwing)
).


fof( miloA2460, axiom,
	p__d__subclass(c__Pitching,c__GameShot)
).



% ($documentation Pitching EnglishLanguage "&%Throwing a &%Ball to the batter in a game of 
% &%Baseball or softball.")


fof( miloA2461, axiom,
	(![PITCH,BALL]: 
		(
			(
				(
					(
						p__d__instance(PITCH,c__Pitching)
					)
				 &
					(
						p__patient(PITCH,BALL)
					)
				)
			)
			=>
			(
				p__d__instance(BALL,c__Ball)
			)
		)
	)
).


fof( miloA2462, axiom,
	p__d__subclass(c__Catching,c__Touching)
).


fof( miloA2463, axiom,
	p__d__subclass(c__Catching,c__Maneuver)
).



% ($documentation Catching EnglishLanguage "Any &%Maneuver in a &%Game which results in a 
% situation where the &%agent &%grasps the &%Ball.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misplaced variables
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?CATCH Catching) 
% ;;      (patient ?CATCH ?BALL))
% ;;   ($instance ?CATCH Ball))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA2464, axiom,
	(![CATCH,BALL]: 
		(
			(
				(
					(
						p__d__instance(CATCH,c__Catching)
					)
				 &
					(
						p__patient(CATCH,BALL)
					)
				)
			)
			=>
			(
				p__d__instance(BALL,c__Ball)
			)
		)
	)
).


% 	(forall (?CATCH ?AGENT ?BALL)
% 		(=> 
% 			(and 
% 				($instance ?CATCH Catching)
% 				(agent ?CATCH ?AGENT)
% 				(patient ?CATCH ?BALL)
% 			)
% 			(holdsDuring (EndFn (WhenFn ?CATCH)) (grasps ?AGENT ?BALL))
% 		)
% 	)

% ($comment 
% ;; KJN: Moving to Sports.kif   
% ;;($subclass HomeBase BaseballBase)
% ;;(documentation HomeBase EnglishLanguage "The final &%BaseballBase which must be touched 
% ;;by the batter in order to achieve a BaseballRun.")
% ;;(=>
% ;;  (and
% ;;    ($instance ?R BaseballRun)
% ;;    (agent ?R ?A))
% ;;  (exists (?T ?H)
% ;;    (and
% ;;      ($instance ?T Touching)
% ;;      (subProcess ?T ?R)
% ;;      (agent ?T ?A)
% ;;      (patient ?T ?H)
% ;;      ($instance ?H HomeBase))))
% ;;
% ;; KJN: Moving this to Sports.kif      
% ;;($subclass PitchersMound GameArtifact)
% ;;(documentation PitchersMound EnglishLanguage "The place where the pitcher in &%Baseball 
% ;;stands when he is throwing balls to the batter.")
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?G Baseball)
% ;;    ($instance ?P Pitching)
% ;;    (subProcess ?P ?G))
% ;;  (exists (?M)
% ;;    (and
% ;;      ($instance ?M PitchersMound)
% ;;      (origin ?P ?M))))
% )

fof( miloA2466, axiom,
	p__d__subclass(c__Sign,c__ContentBearingObject)
).


fof( miloA2467, axiom,
	p__d__subclass(c__Sign,c__DisplayArtifact)
).



% ($documentation Sign EnglishLanguage "A Sign is a &%DisplayArtifact that displays any range of information")


% (termFormat EnglishLanguage Sign "Sign")

fof( miloA2468, axiom,
	p__d__subclass(c__PlayingCard,c__GameArtifact)
).


fof( miloA2469, axiom,
	p__d__subclass(c__PlayingCard,c__ContentBearingObject)
).



% ($documentation PlayingCard EnglishLanguage "A small piece of stiff paper with markings 
% which is intended to be used for playing card games.")


% 	(forall (?C)
% 		(=> 
% 			($instance ?C PlayingCard)
% 			(material Paper ?C)
% 		)
% 	)

fof( miloA2471, axiom,
	p__d__subclass(c__Stretching,c__Motion)
).



% ($documentation Stretching EnglishLanguage "Moving two sides of an object in opposite 
% directions so that the object becomes both longer and thinner.")


fof( miloA2472, axiom,
	p__d__subclass(c__Stretching,c__Lengthening)
).


fof( miloA2473, axiom,
	p__d__subclass(c__Accelerating,c__Translocation)
).


fof( miloA2474, axiom,
	p__d__subclass(c__Accelerating,c__Increasing)
).



% ($documentation Accelerating EnglishLanguage "Increasing the speed with which someone 
% or something is moving.")


% 	(forall (?ACCELERATE ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?ACCELERATE Accelerating)
% 				(agent ?ACCELERATE ?AGENT)
% 			)
% 			(exists (?LENGTH1 ?LENGTH2 ?TIME1 ?TIME2)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?ACCELERATE)) (measure ?AGENT (SpeedFn ?LENGTH1 ?TIME1)))
% 					(holdsDuring (EndFn (WhenFn ?ACCELERATE)) (measure ?AGENT (SpeedFn ?LENGTH2 ?TIME2)))
% 					(or 
% 						(greaterThan ?LENGTH2 ?LENGTH1)
% 						(greaterThan ?TIME2 ?TIME1)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA2476, axiom,
	p__d__subclass(c__Decelerating,c__Translocation)
).


fof( miloA2477, axiom,
	p__d__subclass(c__Decelerating,c__Decreasing)
).



% ($documentation Decelerating EnglishLanguage "Decreasing the speed with which someone 
% or something is moving.")


% 	(forall (?D ?A)
% 		(=> 
% 			(and 
% 				($instance ?D Decelerating)
% 				(agent ?D ?A)
% 			)
% 			(exists (?L1 ?L2 ?T1 ?T2)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?D)) (measure ?A (SpeedFn ?L1 ?T1)))
% 					(holdsDuring (EndFn (WhenFn ?D)) (measure ?A (SpeedFn ?L2 ?T2)))
% 					(or 
% 						(greaterThan ?L1 ?L2)
% 						(greaterThan ?T1 ?T2)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA2479, axiom,
	(![A,E,T]: 
		(
			(
				(
					(
						p__d__instance(T,c__TimeInterval)
					)
				 &
					(
						p__d__instance(E,c__Agent)
					)
				 &
					(
						p__d__instance(A,c__Accelerating)
					)
				 &
					(
						( T = f__WhenFn1(A) )
					)
				 &
					(
						p__experiencer(A,E)
					)
				)
			)
			=>
			(
				(![D]: 
					(
						(
							~ (
								p__d__instance(D,c__Process)
							)
						 |
							~ (
								p__d__instance(D,c__Decelerating)
							)
						 |
							~ (
								p__experiencer(D,E)
							)
						 |
							~ (
								( T = f__WhenFn1(D) )
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2480, axiom,
	p__d__subclass(c__Shortening,c__Decreasing)
).



% ($documentation Shortening EnglishLanguage "Decreasing the length of something.")


% 	(forall (?S ?O)
% 		(=> 
% 			(and 
% 				($instance ?S Shortening)
% 				(patient ?S ?O)
% 			)
% 			(exists (?L1 ?L2)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?S)) (length ?O ?L1))
% 					(holdsDuring (EndFn (WhenFn ?S)) (length ?O ?L2))
% 					(greaterThan ?L1 ?L2)
% 				)
% 			)
% 		)
% 	)

fof( miloA2482, axiom,
	p__d__subclass(c__Flying,c__Translocation)
).



% ($documentation Flying EnglishLanguage "Any instance of &%Translocation which is through an 
% &%AtmosphericRegion and which is powered by the wings of an &%Animal.")


fof( miloA2483, axiom,
	(![FLY]: 
		(
			(
				p__d__instance(FLY,c__Flying)
			)
			=>
			(
				(?[REGION]: 
					(
						(
							(
								p__d__instance(REGION,c__AtmosphericRegion)
							)
						 &
							(
								p__eventLocated(FLY,REGION)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2484, axiom,
	p__d__subclass(c__TakingOff,c__Translocation)
).



% ($documentation TakingOff EnglishLanguage "Any instance of &%Translocation which starts on something other 
% than an &%AtmosphericRegion and which has an instance of &%Flying as a &%subProcess.")


% 	(forall (?OFF)
% 		(=> 
% 			($instance ?OFF TakingOff)
% 			(exists (?REGION ?FLYING)
% 				(and 
% 					(not 
% 						($instance ?REGION AtmosphericRegion)
% 					)
% 					(holdsDuring (BeginFn (WhenFn ?OFF)) (eventLocated ?OFF ?REGION))
% 					(subProcess ?FLYING ?OFF)
% 					($instance ?FLYING Flying)
% 				)
% 			)
% 		)
% 	)

fof( miloA2486, axiom,
	p__d__subclass(c__Landing,c__Translocation)
).



% ($documentation Landing EnglishLanguage "Any instance of &%Translocation which ends up on something other 
% than an &%AtmosphericRegion and which has an instance of &%Flying as a &%subProcess.")


% 	(forall (?LAND)
% 		(=> 
% 			($instance ?LAND Landing)
% 			(exists (?REGION ?FLYING)
% 				(and 
% 					(not 
% 						($instance ?REGION AtmosphericRegion)
% 					)
% 					(holdsDuring (EndFn (WhenFn ?LAND)) (eventLocated ?LAND ?REGION))
% 					(subProcess ?FLYING ?LAND)
% 					($instance ?FLYING Flying)
% 				)
% 			)
% 		)
% 	)

fof( miloA2488, axiom,
	p__d__subclass(c__Returning,c__Translocation)
).



% ($documentation Returning EnglishLanguage "Any instance of &%Translocation where the &%agent 
% goes to a location where he/she had been before the &%Translocation took place.")


% 	(forall (?RETURN ?AGENT ?DEST)
% 		(=> 
% 			(and 
% 				($instance ?RETURN Returning)
% 				(experiencer ?RETURN ?AGENT)
% 				(destination ?RETURN ?DEST)
% 			)
% 			(exists (?TIME)
% 				(and 
% 					(earlier ?TIME (WhenFn ?RETURN))
% 					(holdsDuring ?TIME (located ?AGENT ?DEST))
% 				)
% 			)
% 		)
% 	)

fof( miloA2490, axiom,
	p__d__subclass(c__Escaping,c__Translocation)
).



% ($documentation Escaping EnglishLanguage "Any instance of &%Translocation where the &%agent brings 
% it about that he/she is no longer confined without having the right to do 
% so.")


fof( miloA2491, axiom,
	(![AGENT,ESCAPE]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(ESCAPE,c__Escaping)
					)
				 &
					(
						p__agent(ESCAPE,AGENT)
					)
				)
			)
			=>
			(
				(?[CONFINE]: 
					(
						(
							(
								p__d__instance(CONFINE,c__Confining)
							)
						 &
							(
								p__patient(CONFINE,AGENT)
							)
						 &
							(
								p__meetsTemporally(f__WhenFn1(CONFINE),f__WhenFn1(ESCAPE))
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?ESCAPE ?AGENT)
% 		(=> 
% 			($instance ?ESCAPE Escaping)
% 			(not 
% 				(holdsRight (agent ?ESCAPE ?AGENT) ?AGENT)
% 			)
% 		)
% 	)

fof( miloA2493, axiom,
	p__d__subclass(c__Leaving,c__Translocation)
).



% ($documentation Leaving EnglishLanguage "The initial part of any instance of &%Translocation.")


fof( miloA2494, axiom,
	(![LEAVE]: 
		(
			(
				p__d__instance(LEAVE,c__Leaving)
			)
			=>
			(
				(?[GO]: 
					(
						(
							(
								p__d__instance(GO,c__Translocation)
							)
						 &
							(
								p__subProcess(LEAVE,GO)
							)
						 &
							(
								p__starts(f__WhenFn1(LEAVE),f__WhenFn1(GO))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2495, axiom,
	p__d__subclass(c__Arriving,c__Translocation)
).



% ($documentation Arriving EnglishLanguage "The final part of any instance of &%Translocation.")


fof( miloA2496, axiom,
	(![ARRIVE]: 
		(
			(
				p__d__instance(ARRIVE,c__Arriving)
			)
			=>
			(
				(?[GO]: 
					(
						(
							(
								p__d__instance(GO,c__Translocation)
							)
						 &
							(
								p__subProcess(ARRIVE,GO)
							)
						 &
							(
								p__finishes(f__WhenFn1(ARRIVE),f__WhenFn1(GO))
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2497, axiom,
	p__d__subclass(c__Immigrating,c__Translocation)
).



% ($documentation Immigrating EnglishLanguage "Any &%Translocation by a Human from one &%Nation 
% to another &%Nation where the person is not a citizen for the purpose of taking 
% up residence.")


% 	(forall (?I ?A)
% 		(=> 
% 			(and 
% 				($instance ?I Immigrating)
% 				(agent ?I ?A)
% 			)
% 			(exists (?N1 ?N2)
% 				(and 
% 					($instance ?N1 Nation)
% 					($instance ?N2 Nation)
% 					(origin ?I ?N1)
% 					(destination ?I ?N2)
% 					(not 
% 						(equal ?N1 ?N2)
% 					)
% 					(member ?A (CitizenryFn ?N1))
% 					(not 
% 						(member ?A (CitizenryFn ?N2))
% 					)
% 					(hasPurpose ?I (inhabits ?A ?N2))
% 				)
% 			)
% 		)
% 	)

fof( miloA2499, axiom,
	(![I,A]: 
		(
			(
				(
					(
						p__d__instance(A,c__Agent)
					)
				 &
					(
						p__d__instance(I,c__Immigrating)
					)
				 &
					(
						p__agent(I,A)
					)
				)
			)
			=>
			(
				p__d__instance(A,c__Human)
			)
		)
	)
).


fof( miloA2500, axiom,
	p__d__subclass(c__Boarding,c__Translocation)
).



% ($documentation Boarding EnglishLanguage "Getting on a &%Vehicle, e.g. getting into an 
% &%Automobile, boarding an &%Aircraft, etc.")


fof( miloA2501, axiom,
	(![B,V]: 
		(
			(
				(
					(
						p__d__instance(B,c__Boarding)
					)
				 &
					(
						p__patient(B,V)
					)
				)
			)
			=>
			(
				p__d__instance(V,c__Vehicle)
			)
		)
	)
).


% 	(forall (?AGENT ?B ?A ?V)
% 		(=> 
% 			(and 
% 				($instance ?B Boarding)
% 				(agent ?B ?AGENT)
% 				(patient ?B ?V)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?B)) (not (onboard ?A ?V)))
% 				(holdsDuring (EndFn (WhenFn ?B)) (onboard ?A ?V))
% 			)
% 		)
% 	)


% ($documentation onboard EnglishLanguage "(onboard ?OBJ ?VEHICLE) means that the 
% &%SelfConnectedObject ?OBJ is inside the &%Vehicle ?VEHICLE.")


% 	($domain onboard 1 SelfConnectedObject)

% 	($domain onboard 2 Vehicle)

fof( miloA2505, axiom,
	p__subrelation(c__onboard,c__located)
).


fof( miloA2506, axiom,
	(![V,O]: 
		(
			(
				(
					(
						p__d__instance(V,c__Vehicle)
					)
				 &
					(
						p__d__instance(V,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(O,c__SelfConnectedObject)
					)
				 &
					(
						p__onboard(O,V)
					)
				)
			)
			=>
			(
				p__contains(V,O)
			)
		)
	)
).


fof( miloA2507, axiom,
	(![V,T,O]: 
		(
			(
				(
					(
						p__d__instance(V,c__Vehicle)
					)
				 &
					(
						p__d__instance(O,c__SelfConnectedObject)
					)
				 &
					(
						p__onboard(O,V)
					)
				 &
					(
						p__instrument(T,V)
					)
				 &
					(
						p__d__instance(T,c__Transportation)
					)
				)
			)
			=>
			(
				p__patient(T,O)
			)
		)
	)
).


fof( miloA2508, axiom,
	p__d__subclass(c__Deboarding,c__Translocation)
).


% 	(relatedInternalConcept Boarding Deboarding)


% ($documentation Deboarding EnglishLanguage "Getting off a &%Vehicle, e.g. getting out of an 
% Automobile, deplaning, getting off a &%WaterVehicle, etc.")


fof( miloA2510, axiom,
	(![B,VEHICLE]: 
		(
			(
				(
					(
						p__d__instance(B,c__Deboarding)
					)
				 &
					(
						p__patient(B,VEHICLE)
					)
				)
			)
			=>
			(
				p__d__instance(VEHICLE,c__Vehicle)
			)
		)
	)
).


% 	(forall (?B ?A ?V)
% 		(=> 
% 			(and 
% 				($instance ?B Deboarding)
% 				(agent ?B ?A)
% 				(patient ?B ?V)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?B)) (onboard ?A ?V))
% 				(holdsDuring (EndFn (WhenFn ?B)) (not (onboard ?A ?V)))
% 			)
% 		)
% 	)

fof( miloA2512, axiom,
	p__d__subclass(c__Rotating,c__Motion)
).



% ($documentation Rotating EnglishLanguage "&%Motion that begins and ends at the same point, 
% because the trajectory of the &%Motion is circular.")


% 	(forall (?R ?A)
% 		(=> 
% 			(and 
% 				($instance ?R Rotating)
% 				(patient ?R ?A)
% 			)
% 			(exists (?L)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?R)) (located ?A ?L))
% 					(holdsDuring (EndFn (WhenFn ?R)) (located ?A ?L))
% 				)
% 			)
% 		)
% 	)

fof( miloA2514, axiom,
	p__d__subclass(c__Tremor,c__Rotating)
).



% ($documentation Tremor EnglishLanguage "&%Motion that involves rapidly &%Rotating between 
% two positions.")


fof( miloA2515, axiom,
	p__d__instance(c__axis,c__BinaryPredicate)
).



% ($documentation axis EnglishLanguage "(axis ?A ?OBJ) means that a &%part ?A of an &%Object ?OBJ
% is the axis of rotation in a &%Rotating.")


% 	($domain axis 1 Object)

% 	($domain axis 2 Object)

fof( miloA2518, axiom,
	(![OBJ,AXIS]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Agent)
					)
				 &
					(
						p__d__instance(AXIS,c__Agent)
					)
				 &
					(
						p__axis(AXIS,OBJ)
					)
				)
			)
			=>
			(
				(?[R]: 
					(
						(
							(
								p__d__instance(R,c__Rotating)
							)
						 &
							(
								p__part(AXIS,OBJ)
							)
						 &
							(
								p__experiencer(R,OBJ)
							)
						 &
							(
								(![R2]: 
									(
										(
											~ (
												p__d__instance(R2,c__Process)
											)
										 |
											~ (
												p__d__instance(R2,c__Rotating)
											)
										 |
											~ (
												p__subProcess(R2,R)
											)
										 |
											~ (
												p__experiencer(R2,AXIS)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2519, axiom,
	p__d__subclass(c__CentrifugalMotion,c__Rotating)
).


fof( miloA2520, axiom,
	p__d__disjoint(c__CentrifugalMotion,c__CentripetalMotion)
).



% ($documentation CentrifugalMotion EnglishLanguage "Any instance of &%Rotating where there is 
% &%Motion away from the center of the &%Rotating.")


fof( miloA2521, axiom,
	(![CM]: 
		(
			(
				p__d__instance(CM,c__CentrifugalMotion)
			)
			=>
			(
				(?[R,A,O1,O2]: 
					(
						(
							(
								p__d__instance(O1,c__Agent)
							)
						 &
							(
								p__d__instance(A,c__Object)
							)
						 &
							(
								p__d__instance(O2,c__Agent)
							)
						 &
							(
								p__d__instance(R,c__Rotating)
							)
						 &
							(
								p__axis(A,O1)
							)
						 &
							(
								p__origin(CM,A)
							)
						 &
							(
								p__experiencer(R,O1)
							)
						 &
							(
								p__experiencer(CM,O2)
							)
						 &
							(
								p__causes(R,CM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2522, axiom,
	p__d__subclass(c__CentripetalMotion,c__Rotating)
).



% ($documentation CentripetalMotion EnglishLanguage "Any instance of &%Rotating where there is 
% &%Motion towards the center of the &%Rotating.")


fof( miloA2523, axiom,
	(![CM]: 
		(
			(
				p__d__instance(CM,c__CentripetalMotion)
			)
			=>
			(
				(?[R,A,O1,O2]: 
					(
						(
							(
								p__d__instance(O1,c__Agent)
							)
						 &
							(
								p__d__instance(A,c__Object)
							)
						 &
							(
								p__d__instance(O2,c__Agent)
							)
						 &
							(
								p__d__instance(R,c__Rotating)
							)
						 &
							(
								p__axis(A,O1)
							)
						 &
							(
								p__destination(CM,A)
							)
						 &
							(
								p__experiencer(R,O1)
							)
						 &
							(
								p__experiencer(CM,O2)
							)
						 &
							(
								p__causes(R,CM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2524, axiom,
	p__d__subclass(c__Reversing,c__Motion)
).



% ($documentation Reversing EnglishLanguage "Moving something in such a way that its &%top 
% becomes its &%bottom and vice versa.")


% 	(forall (?REVERSE ?BOTTOM ?TOP ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?REVERSE Reversing)
% 				(patient ?REVERSE ?OBJ)
% 				(holdsDuring (BeginFn (WhenFn ?REVERSE)) (and ([|] (top ?TOP ?OBJ) ([|] (bottom ?BOTTOM ?OBJ) []))))
% 			)
% 			(holdsDuring (EndFn (WhenFn ?REVERSE)) (and ([|] (top ?BOTTOM ?OBJ) ([|] (bottom ?TOP ?OBJ) []))))
% 		)
% 	)

fof( miloA2526, axiom,
	p__d__subclass(c__Dripping,c__LiquidMotion)
).



% ($documentation Dripping EnglishLanguage "Any &%LiquidMotion where the &%Liquid is moved 
% drop by drop.")


fof( miloA2527, axiom,
	p__d__subclass(c__Stirring,c__LiquidMotion)
).


fof( miloA2528, axiom,
	p__d__subclass(c__Stirring,c__Combining)
).



% ($documentation Stirring EnglishLanguage "Any instance of &%LiquidMotion which is also an 
% instance of &%Combining two or more &%Liquids.")


fof( miloA2529, axiom,
	p__d__subclass(c__Pouring,c__LiquidMotion)
).


fof( miloA2530, axiom,
	p__d__subclass(c__Pouring,c__Transfer)
).



% ($documentation Pouring EnglishLanguage "Any instance of &%Transfer from one &%Container to 
% another, where the thing transferred is a &%Liquid.")


fof( miloA2531, axiom,
	(![POUR]: 
		(
			(
				p__d__instance(POUR,c__Pouring)
			)
			=>
			(
				(?[LIQUID,CONTAINER1,CONTAINER2]: 
					(
						(
							(
								p__origin(POUR,CONTAINER1)
							)
						 &
							(
								p__destination(POUR,CONTAINER2)
							)
						 &
							(
								p__d__instance(CONTAINER1,c__Container)
							)
						 &
							(
								p__d__instance(CONTAINER2,c__Container)
							)
						 &
							(
								~ (
									( CONTAINER1 = CONTAINER2 )
								)
							)
						 &
							(
								p__patient(POUR,LIQUID)
							)
						 &
							(
								p__attribute(LIQUID,c__Liquid)
							)
						 &
							(
								p__d__instance(LIQUID,c__Substance)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2532, axiom,
	p__d__subclass(c__WaterWave,c__LiquidMotion)
).



% ($documentation WaterWave EnglishLanguage "A &%WaterWave is a raised ridge of water 
% moving along the surface of a body of water.  The &%WaterWave moves 
% in a direction approximately transverse to the crest line of the wave.  
% The &%patient of the &%WaterWave is successive regions of water, which 
% do not travel in the direction of the wave or with it.")


fof( miloA2533, axiom,
	(![WAVE]: 
		(
			(
				p__d__instance(WAVE,c__WaterWave)
			)
			=>
			(
				(?[AREA]: 
					(
						(
							(
								p__d__instance(AREA,c__WaterArea)
							)
						 &
							(
								p__eventLocated(WAVE,AREA)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2534, axiom,
	p__d__instance(c__waterDepth,c__BinaryPredicate)
).


% 	($domain waterDepth 1 WaterArea)

% 	($domain waterDepth 2 LengthMeasure)

fof( miloA2537, axiom,
	p__subrelation(c__waterDepth,c__length)
).



% ($documentation waterDepth EnglishLanguage "(&%waterDepth ?AREA ?LENGTH) means that the 
% depth of water at the &%Region ?AREA is ?LENGTH.")


fof( miloA2538, axiom,
	(![DEPTH,AREA]: 
		(
			(
				(
					(
						p__d__instance(DEPTH,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(AREA,c__WaterArea)
					)
				 &
					(
						p__d__instance(AREA,c__SelfConnectedObject)
					)
				 &
					(
						p__waterDepth(AREA,DEPTH)
					)
				)
			)
			=>
			(
				(?[BOTTOM,TOP]: 
					(
						(
							(
								p__d__instance(BOTTOM,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(TOP,c__SelfConnectedObject)
							)
						 &
							(
								p__depth(TOP,BOTTOM,DEPTH)
							)
						 &
							(
								p__top(TOP,AREA)
							)
						 &
							(
								p__bottom(BOTTOM,AREA)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2539, axiom,
	p__d__subclass(c__Flooding,c__LiquidMotion)
).



% ($documentation Flooding EnglishLanguage "Flooding is the subclass of &%LiquidMotion 
% processes in which the water level of a &%Waterway rises or water spreads 
% over a flood plain along a &%Waterway.")


% 	(forall (?F ?P)
% 		(=> 
% 			(and 
% 				($instance ?F Flooding)
% 				(eventLocated ?F ?P)
% 			)
% 			(exists (?L1 ?L2)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?F)) (waterDepth ?P ?L1))
% 					(holdsDuring (EndFn (WhenFn ?F)) (waterDepth ?P ?L2))
% 					(greaterThan ?L2 ?L1)
% 				)
% 			)
% 		)
% 	)

fof( miloA2541, axiom,
	p__d__subclass(c__Spraying,c__LiquidMotion)
).


fof( miloA2542, axiom,
	p__d__subclass(c__Spraying,c__Transfer)
).



% ($documentation Spraying EnglishLanguage "Any instance of &%Transfer of a &%Liquid which is 
% accomplished by converting the &%Liquid into a mist.")


% ($comment 
% ;; KJN: Need to rethink this definition.  It is used as the more traditional
% ;; notion of pulling (like 'pulling the trigger' instead of being specifically 
% ;; a transportation device pulling something else
% ;;($subclass Pulling LandTransportation)
% ;;(documentation Pulling EnglishLanguage "Any instance of ;;&%LandTransportation, where a 
% ;;&%TransportationDevice is dragged by something else, whether the something 
% ;;else is an &%Animal or a self-powered &%TransportationDevice.")
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?P Pulling)
% ;;    (patient ?P ?D))
% ;;  ($instance ?D TransportationDevice))
% )

fof( miloA2543, axiom,
	p__d__subclass(c__Pulling,c__Motion)
).



% ($documentation Pulling EnglishLanguage "&%Pulling describe the exertion of force so as
% to cause or tend to cause motion towards the agent.")


% ($comment 
% ;; KJN: Moving this to MilitaryDevices.kif as it has a more exhaustive discussion on
% ;; MilitaryVehicle  
% ;;($subclass MilitaryVehicle MilitaryPlatform)
% ;;($subclass MilitaryVehicle Vehicle)
% ;;(documentation MilitaryVehicle EnglishLanguage "Any &%Vehicle which is intended to be 
% ;;used by a &%MilitaryOrganization. Military platforms which are also vehicles. 
% ;;This would include things like airplanes and tanks, but exclude things like 
% ;;towed platforms.")
% ;;
% ;;(=>
% ;;  ($instance ?V MilitaryVehicle)
% ;;  (hasPurpose ?V 
% ;;    (exists (?O)
% ;;      (and
% ;;        ($instance ?O MilitaryOrganization)
% ;;        (uses ?V ?O)))))
% ;;
% ;;($subclass MilitaryWaterVehicle WaterVehicle)
% ;;(documentation MilitaryWaterVehicle EnglishLanguage "&%MilitaryWaterVehicle is the class of 
% ;;all &%WaterVehicle owned or leased for use by some &%MilitaryOrganization.")
% )

fof( miloA2544, axiom,
	p__d__subclass(c__Submarine,c__WaterVehicle)
).



% ($documentation Submarine EnglishLanguage "A &%WaterVehicle which is capable of travelling 
% under the water level by filling tanks with water.")


% ($comment 
% ;;($subclass MilitaryTank MilitaryVehicle)
% ;;($subclass MilitaryTank RoadVehicle)
% ;;($subclass MilitaryTank ArtilleryGun)
% ;;(documentation MilitaryTank EnglishLanguage "A &%MilitaryVehicle that moves along the ground 
% ;;on treaded wheels and that contains a large cannon.")
% ;;
% ;;($subclass TractorTrailer RoadVehicle)
% ;;(documentation TractorTrailer EnglishLanguage "&%TractorTrailer is the subclass of 
% ;;&%RoadVehicles that are truck tractor- truck trailer combinations.")
% ;;
% ;;(=>
% ;;  ($instance ?TT TractorTrailer)
% ;;  (exists (?TRAC ?TRAIL)
% ;;    (and
% ;;      ($instance ?TRAC TruckTractor)
% ;;      ($instance ?TRAIL TruckTrailer)
% ;;      (part ?TRAC ?TT)
% ;;      (part ?TRAIL ?TT)
% ;;      (connected ?TRAC ?TRAIL))))
% ;;
% ;; KJN: Moving to Transportation.kif where Truck is
% ;;($subclass TruckTractor Truck)
% ;;(documentation TruckTractor EnglishLanguage "&%TruckTractor is the subclass of &%Trucks 
% ;;that are used to tow truck trailers.  Truck tractors are the cab portions 
% ;;of tractor-trailers.  See also &%TruckTrailer.")
% ;;
% ;;($subclass TruckTrailer Wagon)
% ;;(documentation TruckTrailer EnglishLanguage "&%TruckTrailer is the subclass of &%Wagons 
% ;;that are towed by &%TruckTractors.  These are the trailers used in 
% ;;tractor-trailer (semi-trailer) rigs.")
% )

fof( miloA2545, axiom,
	p__d__subclass(c__AirTransportation,c__Transportation)
).



% ($documentation AirTransportation EnglishLanguage "Any instance of &%Transportation where the 
% &%instrument is an &%Aircraft and which is through an &%AtmosphericRegion.")


fof( miloA2546, axiom,
	(![TRANSPORT]: 
		(
			(
				p__d__instance(TRANSPORT,c__AirTransportation)
			)
			=>
			(
				(?[CRAFT,REGION]: 
					(
						(
							(
								p__d__instance(CRAFT,c__Aircraft)
							)
						 &
							(
								p__d__instance(REGION,c__AtmosphericRegion)
							)
						 &
							(
								p__instrument(TRANSPORT,CRAFT)
							)
						 &
							(
								p__eventLocated(TRANSPORT,REGION)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2547, axiom,
	p__d__subclass(c__SpaceTransportation,c__Transportation)
).



% ($documentation SpaceTransportation EnglishLanguage "Any instance of &%Transportation where the 
% &%instrument is a &%Spacecraft and which is through a &%SpaceRegion.")


fof( miloA2548, axiom,
	(![TRANSPORT]: 
		(
			(
				p__d__instance(TRANSPORT,c__SpaceTransportation)
			)
			=>
			(
				(?[CRAFT,REGION]: 
					(
						(
							(
								p__d__instance(CRAFT,c__Spacecraft)
							)
						 &
							(
								p__d__instance(REGION,c__SpaceRegion)
							)
						 &
							(
								p__instrument(TRANSPORT,CRAFT)
							)
						 &
							(
								p__eventLocated(TRANSPORT,REGION)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2549, axiom,
	p__d__subclass(c__Spacecraft,c__Vehicle)
).



% ($documentation Spacecraft EnglishLanguage "Any &%Vehicle which is capable of 
% &%SpaceTransportation.")


fof( miloA2550, axiom,
	(![CRAFT]: 
		(
			(
				p__d__instance(CRAFT,c__Spacecraft)
			)
			=>
			(
				p__capability(c__SpaceTransportation,c__instrument,CRAFT)
			)
		)
	)
).


fof( miloA2551, axiom,
	p__d__subclass(c__Rocket,c__Spacecraft)
).



% ($documentation Rocket EnglishLanguage "A &%Spacecraft which has the shape of a cylinder 
% with a cone on top and which is powered by a jet engine.")


fof( miloA2552, axiom,
	p__d__subclass(c__Missile,c__Projectile)
).


fof( miloA2553, axiom,
	p__d__subclass(c__Missile,c__SelfPoweredDevice)
).



% ($documentation Missile EnglishLanguage "A &%Projectile which is propelled by a rocket and 
% contains a &%Bomb.") 


fof( miloA2554, axiom,
	(![M]: 
		(
			(
				p__d__instance(M,c__Missile)
			)
			=>
			(
				(?[B]: 
					(
						(
							(
								p__d__instance(B,c__Bomb)
							)
						 &
							(
								p__part(B,M)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2555, axiom,
	p__d__subclass(c__BallisticMissile,c__Missile)
).



% ($documentation BallisticMissile EnglishLanguage "A &%Missile which is guided for the first stage 
% of its flight but then falls to its target for the second stage.")


fof( miloA2556, axiom,
	p__d__subclass(c__WaterTransportation,c__Transportation)
).



% ($documentation WaterTransportation EnglishLanguage "Any instance of &%Transportation where 
% the &%instrument is a &%WaterVehicle.")


fof( miloA2557, axiom,
	(![TRANSPORT]: 
		(
			(
				p__d__instance(TRANSPORT,c__WaterTransportation)
			)
			=>
			(
				(?[CRAFT,AREA]: 
					(
						(
							(
								p__d__instance(CRAFT,c__WaterVehicle)
							)
						 &
							(
								p__d__instance(AREA,c__WaterArea)
							)
						 &
							(
								p__instrument(TRANSPORT,CRAFT)
							)
						 &
							(
								p__eventLocated(TRANSPORT,AREA)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2558, axiom,
	(![CRAFT]: 
		(
			(
				p__d__instance(CRAFT,c__WaterVehicle)
			)
			=>
			(
				p__capability(c__WaterTransportation,c__instrument,CRAFT)
			)
		)
	)
).


fof( miloA2559, axiom,
	p__d__subclass(c__Rowing,c__WaterTransportation)
).



% ($documentation Rowing EnglishLanguage "Any instance of &%WaterTransportation where the 
% instrument is an &%Oar that is manually powered.")


fof( miloA2560, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__Rowing)
			)
			=>
			(
				(?[O]: 
					(
						(
							(
								p__d__instance(O,c__Oar)
							)
						 &
							(
								p__instrument(R,O)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2561, axiom,
	p__d__subclass(c__LandTransportation,c__Transportation)
).



% ($documentation LandTransportation EnglishLanguage "Any instance of &%Transportation where the 
% &%instrument is a &%LandVehicle.")


fof( miloA2562, axiom,
	(![LAND]: 
		(
			(
				p__d__instance(LAND,c__LandTransportation)
			)
			=>
			(
				(?[CRAFT,AREA]: 
					(
						(
							(
								p__d__instance(CRAFT,c__LandVehicle)
							)
						 &
							(
								p__d__instance(AREA,c__LandArea)
							)
						 &
							(
								p__instrument(LAND,CRAFT)
							)
						 &
							(
								p__located(CRAFT,AREA)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2563, axiom,
	(![VEHICLE]: 
		(
			(
				p__d__instance(VEHICLE,c__LandVehicle)
			)
			=>
			(
				p__capability(c__LandTransportation,c__instrument,VEHICLE)
			)
		)
	)
).


fof( miloA2564, axiom,
	(![T,P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Object)
					)
				 &
					(
						p__d__instance(T,c__LandTransportation)
					)
				 &
					(
						p__path(T,P)
					)
				)
			)
			=>
			(
				p__d__instance(P,c__LandTransitway)
			)
		)
	)
).


fof( miloA2565, axiom,
	p__d__subclass(c__TransportViaRoadVehicle,c__Transportation)
).


fof( miloA2566, axiom,
	p__d__subclass(c__TransportViaRoadVehicle,c__LandTransportation)
).



% ($documentation TransportViaRoadVehicle EnglishLanguage
% "&%TransportViaRoadVehicle is the class of &%Transportation
% events in which the &%instrument is an instance of
% &%RoadVehicle.")  


fof( miloA2567, axiom,
	p__d__subclass(c__FlyingAircraft,c__Driving)
).



% ($documentation FlyingAircraft EnglishLanguage "Controlling the direction, speed, 
% and altitude of an &%Aircraft")


% (termFormat EnglishLanguage FlyingAircraft "Flying")

fof( miloA2568, axiom,
	(![FLY]: 
		(
			(
				p__d__instance(FLY,c__FlyingAircraft)
			)
			=>
			(
				(?[CRAFT]: 
					(
						(
							(
								p__d__instance(CRAFT,c__Aircraft)
							)
						 &
							(
								p__patient(FLY,CRAFT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2569, axiom,
	(![FLY]: 
		(
			(
				p__d__instance(FLY,c__FlyingAircraft)
			)
			=>
			(
				(?[FLIGHT]: 
					(
						(
							(
								p__d__instance(FLIGHT,c__AirTransportation)
							)
						 &
							(
								p__subProcess(FLY,FLIGHT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2570, axiom,
	p__d__subclass(c__Aircraft,c__Vehicle)
).



% ($documentation Aircraft EnglishLanguage "Any Vehicle which is capable of 
% AirTransportation.  Note that this class covers both fixed-wing aircraft
% and helicopters.")


fof( miloA2571, axiom,
	(![CRAFT]: 
		(
			(
				p__d__instance(CRAFT,c__Aircraft)
			)
			=>
			(
				p__capability(c__AirTransportation,c__instrument,CRAFT)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moving this to Transportation.kif as it makes more sense there.
% ;;($subclass AirTransportation Transportation)
% ;;(documentation AirTransportation EnglishLanguage "Any instance of &%Transportation where the 
% ;;&%instrument is an &%Aircraft and which is through an &%AtmosphericRegion.")
% ;;
% ;;(=>
% ;;   ($instance ?TRANSPORT AirTransportation)
% ;;   (exists (?CRAFT ?REGION)
% ;;      (and
% ;;         ($instance ?CRAFT Aircraft)
% ;;         ($instance ?REGION AtmosphericRegion)
% ;;         (instrument ?TRANSPORT ?CRAFT)
% ;;         (eventLocated ?TRANSPORT ?REGION))))
% ;;
% ;;(=>
% ;;   ($instance ?CRAFT Aircraft)
% ;;   (capability AirTransportation instrument ?CRAFT))
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?T AirTransportation)
% ;;    (path ?T ?P))
% ;;  ($instance ?P AirTransitway))
% )

fof( miloA2572, axiom,
	p__d__subclass(c__Helicopter,c__Aircraft)
).



% ($documentation Helicopter EnglishLanguage "Any &%Aircraft with rapidly rotating wings.")


fof( miloA2573, axiom,
	p__d__subclass(c__MilitaryArtifact,c__Artifact)
).



% ($documentation MilitaryArtifact EnglishLanguage "Any &%Artifact which is made for a 
% &%MilitaryOrganization.")


% 	(forall (?A ?O)
% 		(=> 
% 			($instance ?A MilitaryArtifact)
% 			(hasPurpose ?A (exists ([|] ?O []) (and ([|] ($instance ?O MilitaryOrganization) ([|] (uses ?A ?O) [])))))
% 		)
% 	)

% ($comment 
% ;;($subclass MilitaryAircraft Aircraft)
% ;;($subclass MilitaryAircraft MilitaryVehicle)
% ;;(documentation MilitaryAircraft EnglishLanguage "Any &%Aircraft which is made for a 
% ;;&%MilitaryOrganization.  This includes fighters, &%Bombers, attack 
% ;;helicopters, etc.")
% ;;
% ;;($subclass Fighter MilitaryAircraft)
% ;;(documentation Fighter EnglishLanguage "Any high-speed &%MilitaryAircraft whose purpose is 
% ;;to destroy enemy &%MilitaryAircraft.")
% ;;(=>
% ;;  ($instance ?F Fighter)
% ;;  (hasPurpose ?F 
% ;;    (exists (?A ?MA)
% ;;      (and
% ;;        ($instance ?A Attack)
% ;;        (instrument ?A ?F)
% ;;        (patient ?A ?MA)
% ;;        ($instance ?MA MilitaryAircraft)))))
% ;;
% ;;($subclass Bomber MilitaryAircraft)
% ;;(documentation Bomber EnglishLanguage "Any &%MilitaryAircraft whose purpose is to deliver 
% ;;&%ExplosiveDevices.")
% ;;(=>
% ;;  ($instance ?B Bomber)
% ;;  (hasPurpose ?B 
% ;;    (exists (?T ?D)
% ;;      (and
% ;;        ($instance ?T Transportation)
% ;;        (instrument ?T ?B)
% ;;        (patient ?T ?D)
% ;;        ($instance ?D ExplosiveDevice)))))
% ;;
% ;;($subclass MilitaryShip Ship)
% ;;($subclass MilitaryShip MilitaryWaterVehicle)
% ;;(documentation MilitaryShip EnglishLanguage "Any &%Ship which is made for a &%MilitaryOrganization.  
% ;;This includes aircraft carriers, destroyers, etc.")
% )

fof( miloA2575, axiom,
	p__d__subclass(c__ExplosiveDevice,c__Device)
).



% ($documentation ExplosiveDevice EnglishLanguage "A &%Device whose purpose is to explode.  Note 
% that &%ExplosiveDevice is not a subclass of &%Weapon, since explosives can be 
% used in demolition work and in fireworks displays, for example.")


% 	(forall (?ED ?E ?D)
% 		(=> 
% 			($instance ?ED ExplosiveDevice)
% 			(hasPurpose ?ED (exists ([|] ?E ([|] ?D [])) (and ([|] ($instance ?E Explosion) ([|] (instrument ?E ?ED) ([|] (causes ?E ?D) ([|] ($instance ?D Damaging) [])))))))
% 		)
% 	)

fof( miloA2577, axiom,
	p__d__subclass(c__ExplosiveMine,c__ExplosiveDevice)
).


fof( miloA2578, axiom,
	p__d__subclass(c__ExplosiveMine,c__Weapon)
).



% ($documentation ExplosiveMine EnglishLanguage "An &%ExplosiveDevice which is designed to 
% explode when there is movement over it, e.g. by a person on foot, by a 
% &%RoadVehicle, etc.")


fof( miloA2579, axiom,
	p__d__subclass(c__ExplosiveSubstance,c__Substance)
).



% ($documentation ExplosiveSubstance EnglishLanguage "Any &%Substance which is capable of exploding.")


fof( miloA2580, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__ExplosiveSubstance)
			)
			=>
			(
				p__capability(c__Explosion,c__instrument,S)
			)
		)
	)
).


fof( miloA2581, axiom,
	(![D]: 
		(
			(
				p__d__instance(D,c__ExplosiveDevice)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__ExplosiveSubstance)
							)
						 &
							(
								p__part(S,D)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; =============== TRANSPORTATION ======================  
% ;; KJN: Moving to Transportation.kif where TransitSystem is defined
% ;;($subclass RoadTransportationSystem TransitSystem)
% ;;(documentation RoadTransportationSystem EnglishLanguage "&%RoadTransportationSystem 
% ;;is the subclass of &%TransportationSystems whose routes are &%Roadways.")
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?S RoadTransportationSystem)
% ;;    (routeInSystem ?P ?S))
% ;;  ($instance ?P Roadway))
% ;;
% ;; KJN: Moving this to Transportation.kif where RailTransportationSystem is defined  
% ;;($subclass SubwaySystem RailTransportationSystem)
% ;;(documentation SubwaySystem EnglishLanguage "Any &%RailTransportationSystem that runs 
% ;;exclusively through &%Tunnels.")
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?S SubwaySystem)
% ;;    (routeInSystem ?P ?S))
% ;;  ($instance ?P Tunnel))
% )

fof( miloA2582, axiom,
	p__d__subclass(c__Driveway,c__Roadway)
).



% ($documentation Driveway EnglishLanguage "A small, private &%Roadway that is used for parking 
% &%Automobiles or for connecting a &%Garage to a public &%Roadway.")


fof( miloA2583, axiom,
	p__d__instance(c__OperatingFn,c__UnaryFunction)
).



% ($documentation OperatingFn EnglishLanguage "(&%OperatingFn ?DEVICE) denotes the class 
% of events in which a &%Device of type ?device is operated.")


% 	($domain OperatingFn 1 Device)

% 	($rangeSubclass OperatingFn Process)

% ($comment 
% ;; KJN: Moving Truck with other Land Vehicles in Transportation.kif
% ;;($subclass Truck SelfPoweredRoadVehicle)
% ;;($subclass Truck CargoVehicle)
% ;;(documentation Truck EnglishLanguage "Any &%Vehicle that is intended to carry substantial
% ;;amounts of cargo, in addition to passengers.  This includes 18-wheelers,
% ;;pickup trucks, tanker trucks etc.  Consumer vehicles with trunks or enclosed
% ;;rear areas that can carry cargo are not defined as trucks. Truck is the subclass of &%RoadVehicles that 
% ;;are designed primarily for transporting various kinds of non-passenger 
% ;;loads.  Truck is the class of single-bodied trucks or &%TruckTractors.  
% ;;Note: TractorTrailer combinations are a distinct class.")
% ;;
% ;;(=>
% ;;  ($instance ?T Truck)
% ;;  (exists (?L)
% ;;    (and
% ;;      ($subclass ?L Object)
% ;;      (cargoType ?T ?L))))
% ;;
% ;; KJN: Moving this to Transportation.kif as ElectrifiedRailwayCar is defined there
% ;;($subclass Streetcar ElectrifiedRailwayCar)
% ;;(documentation Streetcar EnglishLanguage "Streetcar is the subclass of 
% ;;&%ElectrifiedRailwayCars that run on tracks laid into, along, or 
% ;;beside city &%Streets.")
% )

fof( miloA2586, axiom,
	p__d__subclass(c__Installing,c__Putting)
).



% ($documentation Installing EnglishLanguage "&%Putting a &%Device in a location and configuring 
% the &%Device so that it can be used as intended after the installation.")


fof( miloA2587, axiom,
	(![INSTALL,DEVICE]: 
		(
			(
				(
					(
						p__d__instance(INSTALL,c__Installing)
					)
				 &
					(
						p__patient(INSTALL,DEVICE)
					)
				)
			)
			=>
			(
				p__d__instance(DEVICE,c__Device)
			)
		)
	)
).


% 	(forall (?DEVICE ?INSTALL ?PURPOSE)
% 		(=> 
% 			(and 
% 				($instance ?INSTALL Installing)
% 				(patient ?INSTALL ?DEVICE)
% 				(hasPurpose ?DEVICE ?PURPOSE)
% 			)
% 			(holdsDuring (EndFn (WhenFn ?INSTALL)) (truth ?PURPOSE True))
% 		)
% 	)

fof( miloA2589, axiom,
	p__d__subclass(c__Rock,c__Substance)
).



% ($documentation Rock EnglishLanguage "&%Rock is any naturally formed aggregate of one or more 
% minerals, consolidated or not, with some degree of mineralogic and chemical 
% constancy, in popular use the term is usually restricted to those aggregates 
% that are hard, compact, and coherent.") 


fof( miloA2590, axiom,
	(![Rock]: 
		(
			(
				p__d__instance(Rock,c__Rock)
			)
			=>
			(
				p__attribute(Rock,c__Solid)
			)
		)
	)
).


fof( miloA2591, axiom,
	(![Rock]: 
		(
			(
				p__d__instance(Rock,c__Rock)
			)
			=>
			(
				(?[Mineral]: 
					(
						(
							(
								p__d__instance(Mineral,c__Mineral)
							)
						 &
							(
								p__part(Mineral,Rock)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2592, axiom,
	p__d__subclass(c__Soil,c__Mixture)
).



% ($documentation Soil EnglishLanguage "&%Soil is a substance composed of fine rock material 
% disintegrated by geological processes, mixed with humus, the organic remains of decomposed vegetation.")


fof( miloA2593, axiom,
	(![Soil]: 
		(
			(
				p__d__instance(Soil,c__Soil)
			)
			=>
			(
				(?[Humus,Mineral]: 
					(
						(
							(
								p__d__instance(Humus,c__Humus)
							)
						 &
							(
								p__d__instance(Mineral,c__Mineral)
							)
						 &
							(
								p__part(Humus,Soil)
							)
						 &
							(
								p__part(Mineral,Soil)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2594, axiom,
	p__d__subclass(c__Clay,c__Soil)
).



% ($documentation Clay EnglishLanguage "Fine-grained soil consisting of mineral particles, not 
% necessarily clay minerals, that are less than 0.002 mm in their maximum dimension.") 


% ($comment 
% ;; (=>
% ;;   (and
% ;;     (part ?Particle ?Soil)
% ;;     ($instance ?Soil Clay)
% ;;     (diameter ?Particle (MeasureFn ?Size Centimeter)))
% ;;   (greaterThan 0.0002 ?Size))
% )

fof( miloA2595, axiom,
	p__d__subclass(c__Humus,c__Mixture)
).



% ($documentation Humus EnglishLanguage "&%Humus is decaying organic matter found in &%Soil 
% and derived from dead animal and plant material.")


fof( miloA2596, axiom,
	(![Humus]: 
		(
			(
				p__d__instance(Humus,c__Humus)
			)
			=>
			(
				(?[Soil]: 
					(
						(
							(
								p__d__instance(Soil,c__Soil)
							)
						 &
							(
								p__part(Humus,Soil)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2597, axiom,
	p__d__subclass(c__Burying,c__Putting)
).


fof( miloA2598, axiom,
	p__d__subclass(c__Burying,c__Digging)
).



% ($documentation Burying EnglishLanguage "Putting something in the ground and then covering 
% it with &%Soil.")


fof( miloA2599, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Burying)
			)
			=>
			(
				(?[C,S]: 
					(
						(
							(
								p__d__instance(C,c__Covering)
							)
						 &
							(
								p__instrument(C,S)
							)
						 &
							(
								p__d__instance(S,c__Soil)
							)
						 &
							(
								p__subProcess(C,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2600, axiom,
	p__d__subclass(c__Digging,c__IntentionalProcess)
).


fof( miloA2601, axiom,
	p__d__subclass(c__Digging,c__SurfaceChange)
).



% ($documentation Digging EnglishLanguage "Any &%Process of removing or turning over the &%Soil.")


fof( miloA2602, axiom,
	(![D]: 
		(
			(
				p__d__instance(D,c__Digging)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__patient(D,S)
							)
						 &
							(
								p__d__instance(S,c__Soil)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2603, axiom,
	p__d__subclass(c__Tilling,c__Digging)
).



% ($documentation Tilling EnglishLanguage "Any &%Process of &%Digging, e.g. breaking and 
% turning over &%Soil that facilitates &%Agriculture.")


fof( miloA2604, axiom,
	p__d__subclass(c__Tilling,c__IntentionalProcess)
).


fof( miloA2605, axiom,
	p__d__subclass(c__Tilling,c__SurfaceChange)
).


fof( miloA2606, axiom,
	(![TILL,SOIL]: 
		(
			(
				(
					(
						p__d__instance(TILL,c__Tilling)
					)
				 &
					(
						p__patient(TILL,SOIL)
					)
				)
			)
			=>
			(
				p__d__instance(SOIL,c__Soil)
			)
		)
	)
).


fof( miloA2607, axiom,
	(![T]: 
		(
			(
				p__d__instance(T,c__Tilling)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Agriculture)
							)
						 &
							(
								p__subProcess(T,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2608, axiom,
	p__d__subclass(c__Entombing,c__Putting)
).



% ($documentation Entombing EnglishLanguage "More commonly known as burying, this is the class 
% of processes of putting a &%HumanCorpse into a Tomb.  Note that this class 
% is not a subclass of &%Burying, since some &%Tombs are not covered with &%Soil, 
% e.g. those in a mausoleum.")


fof( miloA2609, axiom,
	(![E,C]: 
		(
			(
				(
					(
						p__d__instance(E,c__Entombing)
					)
				 &
					(
						p__patient(E,C)
					)
				)
			)
			=>
			(
				p__d__instance(C,c__HumanCorpse)
			)
		)
	)
).


fof( miloA2610, axiom,
	(![E,T]: 
		(
			(
				(
					(
						p__d__instance(E,c__Entombing)
					)
				 &
					(
						p__destination(E,T)
					)
				)
			)
			=>
			(
				p__d__instance(T,c__Tomb)
			)
		)
	)
).


fof( miloA2611, axiom,
	p__d__subclass(c__MovingResidence,c__Transfer)
).



% ($documentation MovingResidence EnglishLanguage "The process of changing one's residence, i.e. 
% moving one's belongs to a new &%home.")


% 	(forall (?MOVE ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?MOVE MovingResidence)
% 				(agent ?MOVE ?AGENT)
% 			)
% 			(exists (?HOME1 ?HOME2)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?MOVE)) (home ?AGENT ?HOME1))
% 					(holdsDuring (EndFn (WhenFn ?MOVE)) (home ?AGENT ?HOME2))
% 					(not 
% 						(equal ?HOME1 ?HOME2)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA2613, axiom,
	p__d__subclass(c__Harvesting,c__Removing)
).



% ($documentation Harvesting EnglishLanguage "Gathering the plant results of &%Agriculture.")


fof( miloA2614, axiom,
	(![H]: 
		(
			(
				p__d__instance(H,c__Harvesting)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Agriculture)
							)
						 &
							(
								p__subProcess(H,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2615, axiom,
	(![H,C]: 
		(
			(
				(
					(
						p__d__instance(H,c__Harvesting)
					)
				 &
					(
						p__result(H,C)
					)
				)
			)
			=>
			(
				(
					p__d__instance(C,c__PlantAnatomicalStructure)
				 |
					p__d__instance(C,c__PlantSubstance)
				)
			)
		)
	)
).


fof( miloA2616, axiom,
	p__d__subclass(c__Drilling,c__IntentionalProcess)
).


fof( miloA2617, axiom,
	p__d__subclass(c__Drilling,c__SurfaceChange)
).



% ($documentation Drilling EnglishLanguage "Any &%Process of producing a &%hole in a 
% &%SelfConnectedObject which involves rotating a long, thin bit.")


% 	(forall (?DRILL ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?DRILL Drilling)
% 				(patient ?DRILL ?OBJ)
% 			)
% 			(exists (?HOLE)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?DRILL)) (not (hole ?HOLE ?OBJ)))
% 					(holdsDuring (EndFn (WhenFn ?DRILL)) (hole ?HOLE ?OBJ))
% 				)
% 			)
% 		)
% 	)

fof( miloA2619, axiom,
	p__d__subclass(c__Drill,c__CuttingDevice)
).



% ($documentation Drill EnglishLanguage "A &%Device that has the purpose of creating a 
% &%Hole.  This covers manual drills as well as electric or pneumatic
% drills.")


% 	(forall (?H ?E ?D)
% 		(=> 
% 			($instance ?D Drill)
% 			(hasPurpose ?D (exists ([|] ?E ([|] ?H [])) (and ([|] ($instance ?E Cutting) ([|] ($instance ?H Hole) ([|] (result ?E ?H) ([|] (instrument ?E ?D) [])))))))
% 		)
% 	)

fof( miloA2621, axiom,
	p__d__subclass(c__Saw,c__CuttingDevice)
).



% ($documentation Saw EnglishLanguage "A &%CuttingDevice that uses linear &%Motion of a &%Blade, &%Chain or &%Wire to cut.")


% 	(forall (?CUT ?SAW ?OBJ)
% 		(=> 
% 			(and 
% 				($instance ?SAW Saw)
% 				($instance ?CUT Cutting)
% 				(instrument ?CUT ?SAW)
% 				($instance ?OBJ Object)
% 				(patient ?CUT ?OBJ)
% 			)
% 			(exists (?MOTION ?DIR1 ?DIR2 ?TIME ?T1 ?T2 ?PART)
% 				(and 
% 					($instance ?MOTION Motion)
% 					(subProcess ?MOTION ?CUT)
% 					($instance ?PART CuttingDevice)
% 					(part ?PART ?SAW)
% 					(meetsSpatially ?PART ?OBJ)
% 					(patient ?MOTION ?PART)
% 					($instance ?T2 TimeInterval)
% 					($instance ?T2 TimeInterval)
% 					(equal (WhenFn ?MOTION) ?TIME)
% 					(temporalPart ?TIME ?T1)
% 					(temporalPart ?TIME ?T2)
% 					($instance ?DIR1 DirectionalAttribute)
% 					($instance ?DIR2 DirectionalAttribute)
% 					(=> 
% 						(holdsDuring ?T1 (direction ?MOTION ?DIR1))
% 						(holdsDuring ?T2 (and ([|] (direction ?MOTION ?DIR2) ([|] (or ([|] (equal ?DIR1 ?DIR2) ([|] (oppositeDirection ?DIR1 ?DIR2) []))) ([|] (not (and ([|] (equal ?DIR1 ?DIR2) ([|] (oppositeDirection ?DIR1 ?DIR2) [])))) [])))))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA2623, axiom,
	p__d__subclass(c__PaperShredder,c__CuttingDevice)
).



% ($documentation PaperShredder EnglishLanguage "A &%CuttingDevice used to cut &%Paper into small pieces so that the contained information can not be decoded again.")


% 	(forall (?X ?CUT ?PAPER)
% 		(=> 
% 			($instance ?X PaperShredder)
% 			(hasPurpose ?X (exists ([|] ?CUT ([|] ?PAPER [])) (and ([|] ($instance ?CUT Cutting) ([|] (instrument ?CUT ?X) ([|] ($instance ?PAPER Paper) ([|] (patient ?CUT ?PAPER) [])))))))
% 		)
% 	)

% 	(forall (?X ?CBO ?PAPER ?INFO ?CUT ?READ)
% 		(=> 
% 			(and 
% 				($instance ?X PaperShredder)
% 				($instance ?CUT Cutting)
% 				(instrument ?CUT ?X)
% 			)
% 			(hasPurpose ?CUT (implies (and ([|] ($instance ?CBO VisualContentBearingObject) ([|] (containsInformation ?CBO ?INFO) ([|] ($instance ?PAPER Paper) ([|] (located ?CBO ?PAPER) []))))) (decreasesLikelihood (patient ?CUT ?PAPER) (exists ([|] ?READ []) (and ([|] ($instance ?READ Interpreting) ([|] (patient ?READ ?INFO) ([|] (earlier (WhenFn ?CUT) (WhenFn ?READ)) []))))))))
% 		)
% 	)

fof( miloA2626, axiom,
	p__d__subclass(c__Memorizing,c__Learning)
).



% ($documentation Memorizing EnglishLanguage "The process of committing a &%Text to memory.")


fof( miloA2627, axiom,
	(![M,T]: 
		(
			(
				(
					(
						p__d__instance(M,c__Memorizing)
					)
				 &
					(
						p__patient(M,T)
					)
				)
			)
			=>
			(
				p__d__instance(T,c__Text)
			)
		)
	)
).


fof( miloA2628, axiom,
	p__d__subclass(c__Imagining,c__PsychologicalProcess)
).



% ($documentation Imagining EnglishLanguage "Forming a mental picture of something which 
% is not present.")


fof( miloA2629, axiom,
	p__d__subclass(c__Dreaming,c__Imagining)
).


fof( miloA2630, axiom,
	p__d__disjoint(c__Dreaming,c__IntentionalProcess)
).



% ($documentation Dreaming EnglishLanguage "A &%Process of producing metal images which occurs 
% while one is &%Asleep.")


% 	(forall (?DREAM ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?DREAM Dreaming)
% 				(experiencer ?DREAM ?AGENT)
% 			)
% 			(holdsDuring (WhenFn ?DREAM) (attribute ?AGENT Asleep))
% 		)
% 	)

fof( miloA2632, axiom,
	p__d__subclass(c__Frightening,c__PsychologicalProcess)
).



% ($documentation Frightening EnglishLanguage "Any &%PsychologicalProcess where the &%patient 
% comes to feel &%Anxiety.")


% 	(forall (?FRIGHTEN ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?FRIGHTEN Frightening)
% 				(experiencer ?FRIGHTEN ?AGENT)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?FRIGHTEN)) (not (attribute ?AGENT Anxiety)))
% 				(holdsDuring (EndFn (WhenFn ?FRIGHTEN)) (attribute ?AGENT Anxiety))
% 			)
% 		)
% 	)

fof( miloA2634, axiom,
	p__d__subclass(c__Execution,c__Killing)
).



% ($documentation Execution EnglishLanguage "&%Killing of a &%Human by a &%Government for 
% the commission of a &%CriminalAction.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check: Execution is subclass of Killing, the agent of Killing is Organism (according to the axiomatization of Killing), Government is subclass of Collection, Organism is subclass of SelConnectedObjetc, and Organism and SelfConnectedObject are disjoint
% ;;
% ;;(=>
% ;;  ($instance ?E Execution)
% ;;  (exists (?G)
% ;;    (and
% ;;      ($instance ?G Government)
% ;;      (agent ?E ?G))))
% )

fof( miloA2635, axiom,
	(![E]: 
		(
			(
				p__d__instance(E,c__Execution)
			)
			=>
			(
				(?[P]: 
					(
						(
							(
								p__patient(E,P)
							)
						 &
							(
								p__d__instance(P,c__Human)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2636, axiom,
	p__d__subclass(c__Suicide,c__Killing)
).



% ($documentation Suicide EnglishLanguage "Any instance of &%Killing where the &%agent and 
% the &%experiencer are identical.")


fof( miloA2637, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Suicide)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Agent)
							)
						 &
							(
								p__agent(S,A)
							)
						 &
							(
								p__experiencer(S,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2638, axiom,
	p__d__subclass(c__Trespassing,c__CriminalAction)
).


fof( miloA2639, axiom,
	p__d__subclass(c__Trespassing,c__Translocation)
).



% ($documentation Trespassing EnglishLanguage "Entering property that does not belong to one and without 
% the permission of the owner of the property.")


% ($comment 
% ;; KJN: Moving this to FinancialOntology.kif to remove dependences, as RealEstate is
% ;; defined there.
% ;;(=>
% ;;  (and
% ;;    ($instance ?T Trespassing)
% ;;    (patient ?T ?P))
% ;;  ($instance ?P RealEstate))
% )

% 	(forall (?T ?H ?P)
% 		(=> 
% 			(and 
% 				($instance ?T Trespassing)
% 				(agent ?T ?H)
% 				(patient ?T ?P)
% 			)
% 			(and 
% 				(not 
% 					(possesses ?H ?P)
% 				)
% 				(modalAttribute (located ?H ?P) Illegal)
% 			)
% 		)
% 	)

fof( miloA2641, axiom,
	p__d__subclass(c__Protecting,c__Maintaining)
).



% ($documentation Protecting EnglishLanguage "An &%IntentionalProcess which purpose is to decrease likelihood of &%Damaging or &%CriminalAction done to the &%patient of the &%Process.")


% 	(forall (?H ?T ?OBJ ?X ?HARM)
% 		(=> 
% 			($instance ?X Protecting)
% 			(hasPurpose ?X (exists ([|] ?OBJ []) (and ([|] ($instance ?OBJ Object) ([|] (patient ?X Object) ([|] ($subclass ?HARM (KappaFn ?H (and ([|] (or ([|] ($instance ?H CriminalAction) ([|] ($instance ?H Damaging) []))) ([|] (implies (holdsDuring ?T (patient ?H ?OBJ)) (not (holdsDuring ?T (patient ?X ?OBJ)))) []))))) ([|] (or ([|] (prevents ?X ?HARM) ([|] (hinders ?X ?HARM) []))) [])))))))
% 		)
% 	)

fof( miloA2643, axiom,
	p__d__subclass(c__Murder,c__Killing)
).


fof( miloA2644, axiom,
	p__d__subclass(c__Murder,c__CriminalAction)
).



% ($documentation Murder EnglishLanguage "Impermissible &%Killing of a &%Human.")


fof( miloA2645, axiom,
	(![MURDER]: 
		(
			(
				p__d__instance(MURDER,c__Murder)
			)
			=>
			(
				(?[PERSON]: 
					(
						(
							(
								p__patient(MURDER,PERSON)
							)
						 &
							(
								p__d__instance(PERSON,c__Human)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2646, axiom,
	p__d__subclass(c__Suffocating,c__Killing)
).



% ($documentation Suffocating EnglishLanguage "&%Killing someone by asphyxiation, i.e. by 
% depriving them of &%Oxygen.")


% 	(forall (?H ?S ?B ?P)
% 		(=> 
% 			($instance ?S Suffocating)
% 			(holdsDuring (EndFn (WhenFn ?H)) (and ([|] (experiencer ?S ?P) ([|] (not (exists ([|] ?B []) (and ([|] ($instance ?B Breathing) ([|] (experiencer ?B ?P) []))))) []))))
% 		)
% 	)

fof( miloA2648, axiom,
	p__d__subclass(c__Hanging,c__Suffocating)
).



% ($documentation Hanging EnglishLanguage "Suffocating someone by suspending him/her from 
% a rope wound around the neck until asphyxiation occurs.")


% 	(forall (?H)
% 		(=> 
% 			($instance ?H Hanging)
% 			(exists (?S ?N ?P)
% 				(and 
% 					($instance ?P Human)
% 					($instance ?S String)
% 					($instance ?N Neck)
% 					(experiencer ?H ?P)
% 					(properPart ?N ?P)
% 					(instrument ?H ?S)
% 					(holdsDuring (WhenFn ?H) (meetsSpatially ?S ?N))
% 				)
% 			)
% 		)
% 	)

fof( miloA2650, axiom,
	p__d__subclass(c__Starving,c__Killing)
).



% ($documentation Starving EnglishLanguage "&%Killing someone by depriving them of food.")


fof( miloA2651, axiom,
	p__d__subclass(c__MusicalConducting,c__Guiding)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation MusicalConducting EnglishLanguage "An &%instance
% of &%MusicalConducting is a &%Guiding in which the
% patient (entity guided) is a &%Musician or a &%MusicalGroup.")


% ($comment 
% ;; NS: edit.
% )

fof( miloA2652, axiom,
	(![CONDUCT]: 
		(
			(
				p__d__instance(CONDUCT,c__MusicalConducting)
			)
			=>
			(
				(?[MUSIC]: 
					(
						(
							(
								p__d__instance(MUSIC,c__MusicalPerformance)
							)
						 &
							(
								p__subProcess(CONDUCT,MUSIC)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NS: edit.
% )

% 	(forall (?CONDUCT ?PATIENT)
% 		(=> 
% 			(and 
% 				($instance ?CONDUCT MusicalConducting)
% 				(patient ?CONDUCT ?PATIENT)
% 			)
% 			(or 
% 				($instance ?PATIENT MusicalGroup)
% 				(holdsDuring (WhenFn ?CONDUCT) (attribute ?PATIENT Musician))
% 			)
% 		)
% 	)

fof( miloA2654, axiom,
	p__d__subclass(c__OrchestralConducting,c__MusicalConducting)
).



% ($documentation OrchestralConducting EnglishLanguage "&%OrchestralConducting is a type
% of &%MusicalConducting where the patient is an &%Orchestra.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misplaced variables
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?CONDUCT OrchestralConducting)
% ;;    (patient ?CONDUCT ?GRP))
% ;;  ($instance ?CONDUCT Orchestra))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA2655, axiom,
	(![CONDUCT,GRP]: 
		(
			(
				(
					(
						p__d__instance(CONDUCT,c__OrchestralConducting)
					)
				 &
					(
						p__patient(CONDUCT,GRP)
					)
				)
			)
			=>
			(
				p__d__instance(GRP,c__Orchestra)
			)
		)
	)
).


fof( miloA2656, axiom,
	p__d__subclass(c__MusicalGroup,c__GroupOfPeople)
).



% ($documentation MusicalGroup EnglishLanguage "A &%GroupOfPeople that create &%MakingMusic 
% together.")


% ($comment 
% ;; NS. delete.  See the more specific, nearly identical version below.
% ;; (=>
% ;;    ($instance ?ORCHESTRA Orchestra)
% ;;    (hasPurpose ?ORCHESTRA (exists (?MUSIC)
% ;;                              (and
% ;;                                 ($instance ?MUSIC Music)
% ;;                                 (agent ?MUSIC ?ORCHESTRA)))))
% )

fof( miloA2657, axiom,
	p__d__subclass(c__Orchestra,c__MusicalGroup)
).



% ($documentation Orchestra EnglishLanguage "A &%GroupOfPeople that create &%MakingInstrumentalMusic 
% together.")


% 	(forall (?MUSIC ?ORCHESTRA)
% 		(=> 
% 			($instance ?ORCHESTRA Orchestra)
% 			(hasPurpose ?ORCHESTRA (exists ([|] ?MUSIC []) (and ([|] ($instance ?MUSIC MakingInstrumentalMusic) ([|] (agent ?MUSIC ?ORCHESTRA) [])))))
% 		)
% 	)

fof( miloA2659, axiom,
	p__d__subclass(c__DramaticDirecting,c__Guiding)
).



% ($documentation DramaticDirecting EnglishLanguage "The process of directing a &%DramaticActing 
% in a &%MotionPicture or the &%Performance of a &%DramaticPlay.")


fof( miloA2660, axiom,
	(![DIRECT,ACT]: 
		(
			(
				(
					(
						p__d__instance(DIRECT,c__DramaticDirecting)
					)
				 &
					(
						p__patient(DIRECT,ACT)
					)
				)
			)
			=>
			(
				p__d__instance(ACT,c__DramaticActing)
			)
		)
	)
).


fof( miloA2661, axiom,
	p__d__subclass(c__Sharing,c__ChangeOfPossession)
).



% ($documentation Sharing EnglishLanguage "The subclass of &%ChangeOfPossession where a 
% &%properPart of the &%patient is given by the &%agent or the &%destination.")


fof( miloA2662, axiom,
	(![SHARE,OBJ,AGENT1,AGENT2]: 
		(
			(
				(
					(
						p__d__instance(AGENT1,c__Agent)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(SHARE,c__Sharing)
					)
				 &
					(
						p__agent(SHARE,AGENT1)
					)
				 &
					(
						p__destination(SHARE,AGENT2)
					)
				 &
					(
						p__patient(SHARE,OBJ)
					)
				)
			)
			=>
			(
				(?[GIVE,PART]: 
					(
						(
							(
								p__d__instance(PART,c__Object)
							)
						 &
							(
								p__d__instance(GIVE,c__Giving)
							)
						 &
							(
								p__subProcess(GIVE,SHARE)
							)
						 &
							(
								p__patient(GIVE,PART)
							)
						 &
							(
								p__properPart(PART,OBJ)
							)
						 &
							(
								p__agent(GIVE,AGENT1)
							)
						 &
							(
								p__destination(GIVE,AGENT2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2663, axiom,
	p__d__subclass(c__Stealing,c__UnilateralGetting)
).


fof( miloA2664, axiom,
	p__d__subclass(c__Stealing,c__CriminalAction)
).



% ($documentation Stealing EnglishLanguage "Any &%UnilateralGetting which is not permitted by the 
% &%origin of the &%UnilateralGetting.  These cases of &%UnilateralGetting are 
% distinguished from ones where the &%destination is the subject of charity or 
% other forms of benefaction.")


% 	(forall (?STEAL ?VICTIM ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?STEAL Stealing)
% 				(destination ?STEAL ?AGENT)
% 				(origin ?STEAL ?VICTIM)
% 				($instance ?VICTIM CognitiveAgent)
% 			)
% 			(not 
% 				(confersRight (destination ?STEAL ?AGENT) ?VICTIM ?AGENT)
% 			)
% 		)
% 	)

fof( miloA2666, axiom,
	p__d__subclass(c__Robbing,c__Stealing)
).



% ($documentation Robbing EnglishLanguage "Any instance of &%Stealing which involves the threat 
% of the use of force.")


% 	(forall (?R ?P ?A ?P2)
% 		(=> 
% 			(and 
% 				($instance ?R Robbing)
% 				(agent ?R ?P)
% 				(patient ?R ?P2)
% 			)
% 			(exists (?T)
% 				(and 
% 					($instance ?T Threatening)
% 					(subProcess ?T ?R)
% 					(patient ?T (exists ([|] ?A []) (and ([|] ($instance ?A Attack) ([|] (agent ?A ?P) ([|] (patient ?A ?P2) []))))))
% 				)
% 			)
% 		)
% 	)

fof( miloA2668, axiom,
	p__d__subclass(c__Inheriting,c__UnilateralGetting)
).



% ($documentation Inheriting EnglishLanguage "Any &%UnilateralGetting where the &%agent 
% receives some part of the property of a person upon the death of the 
% person.")


% 	(forall (?INHERIT ?PROPERTY ?PERSON ?HEIR)
% 		(=> 
% 			(and 
% 				($instance ?INHERIT Inheriting)
% 				(agent ?INHERIT ?HEIR)
% 				(origin ?INHERIT ?PERSON)
% 				(patient ?INHERIT ?PROPERTY)
% 			)
% 			(exists (?DEATH)
% 				(and 
% 					($instance ?DEATH Death)
% 					(experiencer ?DEATH ?PERSON)
% 					(earlier (WhenFn ?DEATH) (WhenFn ?INHERIT))
% 					(holdsDuring (ImmediatePastFn (WhenFn ?DEATH)) (possesses ?PERSON ?PROPERTY))
% 					(confersRight (possesses ?HEIR ?PROPERTY) ?PERSON ?HEIR)
% 				)
% 			)
% 		)
% 	)

fof( miloA2670, axiom,
	p__d__subclass(c__Awarding,c__UnilateralGiving)
).



% ($documentation Awarding EnglishLanguage "&%Giving to any &%Agent for doing some &%Process.")


% (termFormat EnglishLanguage Awarding "awarding")

fof( miloA2671, axiom,
	(![A]: 
		(
			(
				p__d__instance(A,c__Awarding)
			)
			=>
			(
				(?[RECIPIENT,GIVER,PROCESS,AWARD]: 
					(
						(
							(
								p__d__instance(RECIPIENT,c__Agent)
							)
						 &
							(
								p__d__instance(GIVER,c__Agent)
							)
						 &
							(
								p__d__instance(PROCESS,c__Process)
							)
						 &
							(
								p__d__instance(AWARD,c__Object)
							)
						 &
							(
								p__agent(PROCESS,RECIPIENT)
							)
						 &
							(
								p__agent(A,GIVER)
							)
						 &
							(
								p__patient(A,AWARD)
							)
						 &
							(
								p__destination(A,RECIPIENT)
							)
						 &
							(
								p__causes(PROCESS,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2672, axiom,
	p__d__instance(c__hasAward,c__BinaryPredicate)
).


% 	($domain hasAward 1 Agent)

% 	($domain hasAward 2 Object)


% ($documentation hasAward EnglishLanguage "(hasAward ?RECIPIENT ?AWARD) means the &%Agent 
% ?RECIPIENT recieved the &%Object ?AWARD as an award for some action they did.")


% (termFormat EnglishLanguage hasAward "has award")

fof( miloA2675, axiom,
	(![RECIPIENT,AWARD]: 
		(
			(
				(
					(
						p__d__instance(AWARD,c__Object)
					)
				 &
					(
						p__d__instance(RECIPIENT,c__Agent)
					)
				 &
					(
						p__hasAward(RECIPIENT,AWARD)
					)
				)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__Awarding)
							)
						 &
							(
								p__destination(A,RECIPIENT)
							)
						 &
							(
								p__patient(A,AWARD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2676, axiom,
	p__d__subclass(c__Bequeathing,c__UnilateralGiving)
).



% ($documentation Bequeathing EnglishLanguage "Any &%UnilateralGiving where the agent 
% wills some part of his/her property to someone else upon his/her death.")


% 	(forall (?I ?B ?P ?H ?PROP)
% 		(=> 
% 			(and 
% 				($instance ?B Bequeathing)
% 				(agent ?B ?P)
% 				(destination ?B ?H)
% 				(patient ?I ?PROP)
% 			)
% 			(exists (?D)
% 				(and 
% 					($instance ?D Death)
% 					(experiencer ?D ?P)
% 					(earlier (WhenFn ?D) (WhenFn ?B))
% 					(holdsDuring (ImmediatePastFn (WhenFn ?D)) (possesses ?P ?PROP))
% 					(confersNorm ?P (possesses ?H ?PROP) Permission)
% 				)
% 			)
% 		)
% 	)

fof( miloA2678, axiom,
	p__d__subclass(c__SeizingProperty,c__UnilateralGetting)
).



% ($documentation SeizingProperty EnglishLanguage "Any instance of &%UnilateralGetting which is done by 
% a &%Government and which is not permitted by the origin of the &%UnilateralGetting.")


% 	(forall (?V ?S ?A)
% 		(=> 
% 			(and 
% 				($instance ?S SeizingProperty)
% 				(destination ?S ?A)
% 				(origin ?S ?V)
% 				($instance ?V CognitiveAgent)
% 			)
% 			(and 
% 				($instance ?A Government)
% 				(not 
% 					(confersNorm ?V (destination ?S ?A) Permission)
% 				)
% 			)
% 		)
% 	)

fof( miloA2680, axiom,
	p__d__partition3(c__Position,c__FullTimePosition,c__PartTimePosition)
).


fof( miloA2681, axiom,
	p__d__subclass(c__FullTimePosition,c__Position)
).



% ($documentation FullTimePosition EnglishLanguage "Any &%Position where the employee is either 
% salaried or paid for at least 40 hour of work per week.")


fof( miloA2682, axiom,
	p__d__subclass(c__PartTimePosition,c__Position)
).



% ($documentation PartTimePosition EnglishLanguage "Any &%Position where the employee is not 
% salaried and is paid for less than 40 hours of work per week.")


fof( miloA2683, axiom,
	p__d__instance(c__CollegeFreshman,c__CollegeStudentPosition)
).



% ($documentation CollegeFreshman EnglishLanguage "The &%Positions of a student at a &%PostSecondarySchool 
% who has completed less than one year at the school.")


% 	(forall (?P ?H ?ORG)
% 		(=> 
% 			(and 
% 				(attribute ?P CollegeFreshman)
% 				(occupiesPosition ?H ?P ?ORG)
% 			)
% 			(exists (?T)
% 				(and 
% 					(holdsDuring ?T (student ?H ?ORG))
% 					(lessThan ?T (MeasureFn 1 YearDuration))
% 				)
% 			)
% 		)
% 	)

fof( miloA2685, axiom,
	p__d__instance(c__CollegeJunior,c__CollegeStudentPosition)
).



% ($documentation CollegeJunior EnglishLanguage "The &%Positions of a student at a &%PostSecondarySchool 
% who has completed at least two years and less than three years at the school.")


% 	(forall (?P ?H ?ORG)
% 		(=> 
% 			(and 
% 				(attribute ?P CollegeJunior)
% 				(occupiesPosition ?H ?P ?ORG)
% 			)
% 			(exists (?T)
% 				(and 
% 					(holdsDuring ?T (student ?H ?ORG))
% 					(greaterThanOrEqualTo ?T (MeasureFn 2 YearDuration))
% 					(lessThan ?T (MeasureFn 3 YearDuration))
% 				)
% 			)
% 		)
% 	)

fof( miloA2687, axiom,
	p__d__instance(c__CollegeSenior,c__CollegeStudentPosition)
).



% ($documentation CollegeSenior EnglishLanguage "The &%Positions of a student at a &%PostSecondarySchool 
% who has completed at least three years and less than four years at the school.")


% 	(forall (?P ?H ?ORG)
% 		(=> 
% 			(and 
% 				(attribute ?P CollegeSenior)
% 				(occupiesPosition ?H ?P ?ORG)
% 			)
% 			(exists (?T)
% 				(and 
% 					(holdsDuring ?T (student ?H ?ORG))
% 					(greaterThanOrEqualTo ?T (MeasureFn 3 YearDuration))
% 					(lessThan ?T (MeasureFn 4 YearDuration))
% 				)
% 			)
% 		)
% 	)

fof( miloA2689, axiom,
	p__d__instance(c__CollegeSophomore,c__CollegeStudentPosition)
).



% ($documentation CollegeSophomore EnglishLanguage "The &%Positions of a student at a &%PostSecondarySchool 
% who has completed at least one year and less than two years at the school.")


% 	(forall (?P ?H ?ORG)
% 		(=> 
% 			(and 
% 				(attribute ?P CollegeSophomore)
% 				(occupiesPosition ?H ?P ?ORG)
% 			)
% 			(exists (?T)
% 				(and 
% 					(holdsDuring ?T (student ?H ?ORG))
% 					(greaterThanOrEqualTo ?T (MeasureFn 1 YearDuration))
% 					(lessThan ?T (MeasureFn 2 YearDuration))
% 				)
% 			)
% 		)
% 	)

fof( miloA2691, axiom,
	p__d__subclass(c__CollegeStudentPosition,c__Position)
).



% ($documentation CollegeStudentPosition EnglishLanguage "Any &%Position at a &%PostSecondarySchool 
% which is occupied exclusively by students.")


fof( miloA2692, axiom,
	p__d__instance(c__Comedian,c__EntertainmentProfession)
).



% ($documentation Comedian EnglishLanguage "&%Positions which involve performing stand-up comedy, which 
% is recorded and/or performed in front of live audiences.")

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misspelled variable
% ;;
% ;;(=>
% ;;  (attribute ?P Comedian)
% ;;  (exists (?PERF ?L)
% ;;    (and
% ;;      ($instance ?PERF Performance)
% ;;      (agent ?PREF ?P)
% ;;      ($instance ?L Laughing)
% ;;      (causes ?PERF ?L))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA2693, axiom,
	(![P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Agent)
					)
				 &
					(
						p__attribute(P,c__Comedian)
					)
				)
			)
			=>
			(
				(?[PERF,L]: 
					(
						(
							(
								p__d__instance(PERF,c__Performance)
							)
						 &
							(
								p__agent(PERF,P)
							)
						 &
							(
								p__d__instance(L,c__Laughing)
							)
						 &
							(
								p__causes(PERF,L)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moving this to FinancialOntology.kif to remove dependency through Bank-FinancialOrganization      
% ;;($instance Banker SkilledOccupation)
% ;;(documentation Banker EnglishLanguage "Any &%SkilledOccupation which involves working in a 
% ;;&%Bank-FinancialOrganization.")
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?H Human)
% ;;      (occupiesPosition ?H ?B ?O)
% ;;      (attribute ?B Banker))
% ;;   ($instance ?O Bank-FinancialOrganization))
% ;;
% ;; KJN: Moved this to Government.kif to remove dependency to CountriesAndRegions.kif
% ;;($instance PresidentOfTheUnitedStates Position)
% ;;(documentation PresidentOfTheUnitedStates EnglishLanguage "The position of being head of the 
% ;;&%UnitedStates.")
% ;;
% ;;(=>
% ;;  (attribute ?H PresidentOfTheUnitedStates)
% ;;  (leader ?H UnitedStates))
% )

fof( miloA2694, axiom,
	p__d__instance(c__Treasurer,c__SkilledOccupation)
).



% ($documentation Treasurer EnglishLanguage "Any &%SkilledOccupation which involves receiving 
% and disbursing money.")


% ($comment 
% ;; KJN: Moving this to Government.kif where these positions are discussed in more detail.
% ;;($instance Governor Position)
% ;; KJN: Added this to be more general StateOrProvince instead of AmericanState
% ;;(documentation Governor EnglishLanguage "The head of the &%Government of a &%StateOrProvince.")
% ;;(=>
% ;;  (headOfGovernment ?S Governor ?H)
% ;;  ($instance ?S StateOrProvince))
% ;;
% ;; KJN: changing this definition as a Governor can exist not only in an AmericanState.
% ;;(documentation Governor EnglishLanguage "The head of the &%Government of an &%AmericanState.")
% ;;
% ;;(=>
% ;;  (headOfGovernment ?A Governor ?H)
% ;;  ($instance ?A AmericanState))
% ;;
% ;;($instance LieutenantGovernor Position)
% ;;(documentation LieutenantGovernor EnglishLanguage "The second-in-command of some &%Governments 
% ;;of &%AmericanStates.")
% ;;
% ;;($instance Mayor Position)
% ;;(documentation Mayor EnglishLanguage "The head of the &%Government of a &%City.")
% ;;
% ;;(=>
% ;;  (headOfGovernment ?A Mayor ?H)
% ;;  ($instance ?A City))
% ;;
% ;; KJN: Moving this to People.kif where Religions are defined
% ;;($instance Pope ReligiousPosition)
% ;;(documentation Pope EnglishLanguage "The &%ReligiousPosition of head of the &%RomanCatholicChurch.")
% ;;
% ;;(=>
% ;;  (occupiesPosition ?H Pope RomanCatholicChurch)
% ;;  (leader RomanCatholicChurch ?H))
% )

fof( miloA2695, axiom,
	p__d__subclass(c__SalesPosition,c__SkilledOccupation)
).



% ($documentation SalesPosition EnglishLanguage "Any &%Position which involves &%Selling 
% or trying to sell items.")


fof( miloA2696, axiom,
	p__d__instance(c__ClericalSecretary,c__SkilledOccupation)
).



% ($documentation ClericalSecretary EnglishLanguage "The class of &%Positions where the position 
% holder is responsible for clerical duties, e.g. typing documents, answering 
% phones, keeping schedules, etc.")


fof( miloA2697, axiom,
	p__d__subclass(c__ServicePosition,c__SkilledOccupation)
).



% ($documentation ServicePosition EnglishLanguage "Any &%Position which involves working 
% as a waiter or servant, either for an &%Organization (e.g. a restaurant) 
% or for a person or family.")


fof( miloA2698, axiom,
	p__d__instance(c__Dentist,c__Profession)
).



% ($documentation Dentist EnglishLanguage "The &%Profession of being a dentist, i.e. diagnosing 
% and treating problems related to the teeth.")


fof( miloA2699, axiom,
	(![P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Agent)
					)
				 &
					(
						p__attribute(P,c__Dentist)
					)
				)
			)
			=>
			(
				(?[D,T]: 
					(
						(
							(
								p__d__instance(D,c__DiagnosticProcess)
							)
						 &
							(
								p__agent(D,P)
							)
						 &
							(
								p__d__instance(T,c__Tooth)
							)
						 &
							(
								p__patient(D,T)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2700, axiom,
	p__d__instance(c__Pharmacist,c__Profession)
).



% ($documentation Pharmacist EnglishLanguage "The &%Profession of being a pharmacist, i.e. 
% preparing and dispensing &%BiologicallyActiveSubstances.")


fof( miloA2701, axiom,
	p__d__instance(c__Researcher,c__Profession)
).



% ($documentation Researcher EnglishLanguage "The &%Profession of being a scientific 
% researcher.")


fof( miloA2702, axiom,
	(![P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Human)
					)
				 &
					(
						p__attribute(P,c__Researcher)
					)
				)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__Science)
							)
						 &
							(
								p__hasExpertise(P,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2703, axiom,
	p__d__instance(c__Teacher,c__Profession)
).



% ($documentation Teacher EnglishLanguage "The &%Profession of being a teacher.")


% 	(forall (?P ?T ?O)
% 		(=> 
% 			(and 
% 				($instance ?T Teacher)
% 				(occupiesPosition ?P ?T ?O)
% 			)
% 			(teacher ?T ?O)
% 		)
% 	)

% 	(forall (?T)
% 		(=> 
% 			($instance ?T Teacher)
% 			(hasSkill EducationalProcess ?T)
% 		)
% 	)

fof( miloA2706, axiom,
	p__d__subclass(c__EntertainmentProfession,c__SkilledOccupation)
).



% ($documentation EntertainmentProfession EnglishLanguage "Positions which involve creating 
% content or performances that are intended to entertain.  This class covers 
% the &%TheaterProfession, &%FilmMakingProfession, being a comedian, etc.")


% 	(forall (?EP ?P)
% 		(=> 
% 			(and 
% 				($instance ?EP EntertainmentProfession)
% 				(attribute ?P ?EP)
% 			)
% 			(or 
% 				(occupation ?P (OccupationFn Performance))
% 				(occupation ?P (OccupationFn ContentDevelopment))
% 			)
% 		)
% 	)

fof( miloA2708, axiom,
	p__d__subclass(c__SportsPosition,c__SkilledOccupation)
).



% ($documentation SportsPosition EnglishLanguage "A &%Position which is filled by someone on a 
% &%SportsTeam and which represents the role played by the person on the team.")


fof( miloA2709, axiom,
	(![H,P,O]: 
		(
			(
				(
					(
						p__d__instance(O,c__Organization)
					)
				 &
					(
						p__d__instance(H,c__Human)
					)
				 &
					(
						p__occupiesPosition(H,P,O)
					)
				 &
					(
						p__d__instance(P,c__SportsPosition)
					)
				)
			)
			=>
			(
				p__d__instance(O,c__SportsTeam)
			)
		)
	)
).


fof( miloA2710, axiom,
	p__d__subclass(c__GovernmentPosition,c__Profession)
).



% ($documentation GovernmentPosition EnglishLanguage "Any
% &%Profession where the position occupied is within a
% &%GovernmentOrganization.")


fof( miloA2711, axiom,
	(![P,O,ORG]: 
		(
			(
				(
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__d__instance(P,c__Human)
					)
				 &
					(
						p__d__instance(O,c__GovernmentPosition)
					)
				 &
					(
						p__occupiesPosition(P,O,ORG)
					)
				)
			)
			=>
			(
				p__d__instance(ORG,c__GovernmentOrganization)
			)
		)
	)
).


fof( miloA2712, axiom,
	p__d__instance(c__Journalist,c__Profession)
).



% ($documentation Journalist EnglishLanguage "The &%Profession of being a news reporter, i.e. 
% investigating and reporting, in a publication or broadcast program, current 
% events.")


% 	(forall (?P)
% 		(=> 
% 			(attribute ?P Journalist)
% 			(and 
% 				(occupation ?P (OccupationFn ContentDevelopment))
% 				(occupation ?P (OccupationFn Disseminating))
% 			)
% 		)
% 	)

fof( miloA2714, axiom,
	p__d__subclass(c__ModellingPosition,c__Position)
).



% ($documentation ModellingPosition EnglishLanguage "Any &%Position which involves posing for an 
% artist or photographer.")


% ($comment 
% ;; NS: edit.
% )

fof( miloA2715, axiom,
	p__d__instance(c__Soldier,c__GovernmentPosition)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation Soldier EnglishLanguage "This &%Attribute
% describes someone serving in the armed forces of a
% &%Nation.")


% ($comment 
% ;; NS: edit.
% ;; KJN: More exhaustively defined in Military.kif making this definition redundant.
% ;; so commenting this out for now.
% ;;($instance RedcoatSoldier GovernmentPosition)
% ;; NS: add.
% ;;(subAttribute RedcoatSoldier Soldier)
% ;; NS: edit.
% ;;(documentation RedcoatSoldier EnglishLanguage "This
% ;;&%Attribute describes a &%Soldier who served with the
% ;;British (Loyalists) during the American Revolutionary War.")
% ;;
% ;; NS: edit.
% )

fof( miloA2716, axiom,
	p__d__instance(c__ConfederateSoldier,c__GovernmentPosition)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA2717, axiom,
	p__subAttribute(c__ConfederateSoldier,c__Soldier)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation ConfederateSoldier EnglishLanguage "This
% &%Attribute describes a &%Soldier who served on the
% Confederate side during the American Civil War.")


% ($comment 
% ;; NS: edit.
% ;; KJN: More exhaustively defined in Military.kif, so commenting this out for now.
% ;;($instance UnionSoldier GovernmentPosition)
% ;; NS: add.
% ;;(subAttribute UnionSoldier Soldier)
% ;; NS: edit.
% ;;(documentation UnionSoldier EnglishLanguage "This
% ;;&%Attribute describes a &%Soldier who served on the Union
% ;;side during the American Civil War.")
% )

fof( miloA2718, axiom,
	p__d__instance(c__Sailor,c__SkilledOccupation)
).



% ($documentation Sailor EnglishLanguage "The class of &%Positions which involve working on a 
% ship, whether a merchant ship or a navy ship.")


fof( miloA2719, axiom,
	p__subAttribute(c__ShipCaptain,c__Sailor)
).



% ($documentation ShipCaptain EnglishLanguage "The class of &%Positions which involve the command 
% of a ship.")


fof( miloA2720, axiom,
	p__subAttribute(c__ShipOfficer,c__Sailor)
).



% ($documentation ShipOfficer EnglishLanguage "The class of &%Sailors which have a position of 
% responsibility on a &%Ship.")


fof( miloA2721, axiom,
	p__subAttribute(c__ShipMate,c__Sailor)
).



% ($documentation ShipMate EnglishLanguage "The class of &%Positions that involve some responsibility 
% on a ship and are lower in rank than &%ShipCaptain.")


% ($comment 
% ;; Moving this to Government.kif to remove dependencies.
% ;;($instance ConfederateStatesOfAmerica GeopoliticalArea)
% ;;(documentation ConfederateStatesOfAmerica EnglishLanguage "The eleven states of the &%UnitedStates 
% ;;that tried to secede from the &%UnitedStates.")
% ;;
% ;;($instance UnionStatesOfAmerica GeopoliticalArea)
% ;;(documentation UnionStatesOfAmerica EnglishLanguage "The states of the &%UnitedStates that the 
% ;;&%ConfederateStatesOfAmerica seceded from.")
% ;;
% ;; NS: add.
% )

fof( miloA2722, axiom,
	p__d__instance(c__MilitaryPrivate,c__GovernmentPosition)
).


% ($comment 
% ;; NS: edit.
% )

fof( miloA2723, axiom,
	p__subAttribute(c__MilitaryPrivate,c__Soldier)
).


% ($comment 
% ;; NS: edit.
% )

% ($documentation MilitaryPrivate EnglishLanguage "This
% &%Attribute describes an enlisted &%Soldier of the lowest
% rank.")


% ($comment 
% ;; NS: edit.
% )

fof( miloA2724, axiom,
	p__subAttribute(c__MilitaryOfficer,c__Soldier)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA2725, axiom,
	p__d__instance(c__MilitaryOfficer,c__GovernmentPosition)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation MilitaryOfficer EnglishLanguage "This
% &%Attribute describes a &%Soldier who has command
% authority.")


% 	(forall (?OFFICER)
% 		(=> 
% 			($instance ?OFFICER MilitaryOfficer)
% 			(exists (?MANAGE ?PATIENT)
% 				(and 
% 					($instance ?MANAGE Managing)
% 					(agent ?MANAGE ?OFFICER)
% 					(patient ?MANAGE ?PATIENT)
% 					(or 
% 						($instance ?PATIENT MilitaryOrganization)
% 						($instance ?PATIENT Soldier)
% 					)
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; NS: add.
% )

fof( miloA2727, axiom,
	p__subAttribute(c__MilitaryGeneral,c__MilitaryOfficer)
).


% ($comment 
% ;;($instance MilitaryGeneral Position)
% ;;($subclass MilitaryGeneral MilitaryOfficer)
% )


% ($documentation MilitaryGeneral EnglishLanguage "&%MilitaryGeneral is a generic &%Position 
% that indicates holding (or having held) the rank of General in some 
% military force.  An indicator that someone uses the title, without 
% committing to his or her exact rank or military affiliation.") 


% ($comment 
% ;; NS: edit.
% )

fof( miloA2728, axiom,
	p__subAttribute(c__MajorGeneral,c__MilitaryGeneral)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA2729, axiom,
	p__d__instance(c__MajorGeneral,c__GovernmentPosition)
).



% ($documentation MajorGeneral EnglishLanguage "A &%MilitaryGeneral that ranks above a 
% &%BrigadierGeneral.")


% ($comment 
% ;; NS: edit.
% )

fof( miloA2730, axiom,
	p__subAttribute(c__BrigadierGeneral,c__MilitaryGeneral)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA2731, axiom,
	p__d__instance(c__BrigadierGeneral,c__GovernmentPosition)
).



% ($documentation BrigadierGeneral EnglishLanguage "A &%MilitaryGeneral that ranks below 
% a &%MajorGeneral.")


% ($comment 
% ;; NS: edit.
% )

fof( miloA2732, axiom,
	p__subAttribute(c__Lieutenant,c__MilitaryOfficer)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA2733, axiom,
	p__d__instance(c__Lieutenant,c__GovernmentPosition)
).



% ($documentation Lieutenant EnglishLanguage "A commissioned &%MilitaryOfficer.")


% ($comment 
% ;; NS: edit.
% )

fof( miloA2734, axiom,
	p__subAttribute(c__CaptainOfficer,c__MilitaryOfficer)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA2735, axiom,
	p__d__instance(c__CaptainOfficer,c__GovernmentPosition)
).



% ($documentation CaptainOfficer EnglishLanguage "A commissioned &%MilitaryOfficer who ranks 
% above a &%Lieutenant but below a &%MajorOfficer.")


% ($comment 
% ;; NS: edit.
% )

fof( miloA2736, axiom,
	p__subAttribute(c__Colonel,c__MilitaryOfficer)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA2737, axiom,
	p__d__instance(c__Colonel,c__GovernmentPosition)
).



% ($documentation Colonel EnglishLanguage "A commissioned &%MilitaryOfficer who ranks above 
% a lieutenant colonel and below a brigadier general.")


fof( miloA2738, axiom,
	p__subAttribute(c__Sergeant,c__MilitaryOfficer)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA2739, axiom,
	p__d__instance(c__Sergeant,c__GovernmentPosition)
).



% ($documentation Sergeant EnglishLanguage "A noncomissioned &%MilitaryOfficer.")


% ($comment 
% ;; NS: edit.
% )

fof( miloA2740, axiom,
	p__subAttribute(c__Corporal,c__MilitaryOfficer)
).


% ($comment 
% ;; NS: add.
% )

fof( miloA2741, axiom,
	p__d__instance(c__Corporal,c__GovernmentPosition)
).



% ($documentation Corporal EnglishLanguage "A noncomissioned &%MilitaryOfficer.")


fof( miloA2742, axiom,
	p__d__instance(c__CenturyDuration,c__UnitOfDuration)
).



% ($documentation CenturyDuration EnglishLanguage "The &%TimeDuration of 100 years.")


fof( miloA2743, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__CenturyDuration) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__100),c__YearDuration) )
			)
		)
	)
).


fof( miloA2744, axiom,
	p__d__instance(c__DecadeDuration,c__UnitOfDuration)
).



% ($documentation DecadeDuration EnglishLanguage "The &%TimeDuration of 10 years.")


fof( miloA2745, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__DecadeDuration) = f__MeasureFn2(f__MultiplicationFn2(NUMBER,c__10),c__YearDuration) )
			)
		)
	)
).


fof( miloA2746, axiom,
	p__d__instance(c__YardLength,c__UnitOfLength)
).



% ($documentation YardLength EnglishLanguage "English unit of length, equal to 3 &%FeetLength.")


fof( miloA2747, axiom,
	(![NUMBER]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__RealNumber)
					)
				 &
					(
						( NUMBER = f__MultiplicationFn2(c__1,NUMBER) )
					)
				)
			)
			=>
			(
				( f__MeasureFn2(NUMBER,c__YardLength) = f__MeasureFn2(f__MultiplicationFn2(c__3,NUMBER),c__FootLength) )
			)
		)
	)
).



% ($documentation Nanometer EnglishLanguage "Submultiple of Meter. Symbol: nm. It is a unit of length in the metric system, equal to one billionth of a metre.")


fof( miloA2748, axiom,
	p__d__instance(c__Nanometer,c__UnitOfLength)
).


% ($comment 
% ;; (=>
% ;;   (equal ?NUMBER
% ;;     (MultiplicationFn 1 ?NUMBER))
% ;;   (equal
% ;;     (MeasureFn ?NUMBER Nanometer)
% ;;     (MeasureFn
% ;;       (MultiplicationFn ?NUMBER 0.000000001) Meter)))
% )

fof( miloA2749, axiom,
	p__d__subclass(c__NightTime,c__TimeInterval)
).



% ($documentation NightTime EnglishLanguage "The class of &%TimeIntervals that begin at &%Sunset
% and end at &%Sunrise.")


fof( miloA2750, axiom,
	(![NIGHT]: 
		(
			(
				p__d__instance(NIGHT,c__NightTime)
			)
			=>
			(
				(?[DAY1,DAY2]: 
					(
						(
							(
								p__d__instance(DAY1,c__DayTime)
							)
						 &
							(
								p__d__instance(DAY2,c__DayTime)
							)
						 &
							(
								p__meetsTemporally(NIGHT,DAY1)
							)
						 &
							(
								p__meetsTemporally(DAY2,NIGHT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2751, axiom,
	(![NIGHT]: 
		(
			(
				p__d__instance(NIGHT,c__NightTime)
			)
			=>
			(
				(?[RISE,SET]: 
					(
						(
							(
								p__d__instance(RISE,c__Sunrise)
							)
						 &
							(
								p__d__instance(SET,c__Sunset)
							)
						 &
							(
								p__starts(SET,NIGHT)
							)
						 &
							(
								p__finishes(RISE,NIGHT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2752, axiom,
	p__d__subclass(c__DayTime,c__TimeInterval)
).



% ($documentation DayTime EnglishLanguage "The class of &%TimeIntervals that begin at &%Sunrise 
% and end at &%Sunset.")


fof( miloA2753, axiom,
	(![DAY]: 
		(
			(
				p__d__instance(DAY,c__DayTime)
			)
			=>
			(
				(?[NIGHT1,NIGHT2]: 
					(
						(
							(
								p__d__instance(NIGHT1,c__NightTime)
							)
						 &
							(
								p__d__instance(NIGHT2,c__NightTime)
							)
						 &
							(
								p__meetsTemporally(DAY,NIGHT1)
							)
						 &
							(
								p__meetsTemporally(NIGHT2,DAY)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2754, axiom,
	(![DAY]: 
		(
			(
				p__d__instance(DAY,c__DayTime)
			)
			=>
			(
				(?[RISE,SET]: 
					(
						(
							(
								p__d__instance(RISE,c__Sunrise)
							)
						 &
							(
								p__d__instance(SET,c__Sunset)
							)
						 &
							(
								p__starts(RISE,DAY)
							)
						 &
							(
								p__finishes(SET,DAY)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2755, axiom,
	p__d__subclass(c__Morning,c__DayTime)
).



% ($documentation Morning EnglishLanguage "The class of &%TimeIntervals that begin at &%Sunrise 
% and end at noon.")


% 	(forall (?DAY ?MORNING)
% 		(=> 
% 			($instance ?MORNING Morning)
% 			(exists (?HOUR)
% 				(and 
% 					($instance ?HOUR (HourFn 12 ?DAY))
% 					(finishes ?HOUR ?MORNING)
% 				)
% 			)
% 		)
% 	)

fof( miloA2757, axiom,
	p__d__subclass(c__AnteMeridiem,c__TimeInterval)
).



% ($documentation AnteMeridiem EnglishLanguage "The class of &%TimeIntervals that begin at midnight 
% and end at noon.")


% 	(forall (?AM)
% 		(=> 
% 			($instance ?AM AnteMeridiem)
% 			(exists (?D ?HOUR1 ?HOUR2)
% 				(and 
% 					($instance ?HOUR1 (HourFn 24 ?D))
% 					(starts ?HOUR1 ?AM)
% 					($instance ?HOUR2 (HourFn 12 ?D))
% 					(finishes ?HOUR2 ?AM)
% 				)
% 			)
% 		)
% 	)

fof( miloA2759, axiom,
	p__d__subclass(c__PostMeridiem,c__TimeInterval)
).



% ($documentation PostMeridiem EnglishLanguage "The class of &%TimeIntervals that begin at noon and 
% end at midnight.")


% 	(forall (?PM)
% 		(=> 
% 			($instance ?PM PostMeridiem)
% 			(exists (?D ?HOUR1 ?HOUR2)
% 				(and 
% 					($instance ?HOUR1 (HourFn 12 ?D))
% 					(starts ?HOUR1 ?PM)
% 					($instance ?HOUR2 (HourFn 24 ?D))
% 					(finishes ?HOUR2 ?PM)
% 				)
% 			)
% 		)
% 	)

fof( miloA2761, axiom,
	p__d__subclass(c__Afternoon,c__DayTime)
).



% ($documentation Afternoon EnglishLanguage "The class of &%TimeIntervals that begin at noon and 
% end at &%Sunset.")


% 	(forall (?DAY ?AFTERNOON)
% 		(=> 
% 			($instance ?AFTERNOON Afternoon)
% 			(exists (?HOUR)
% 				(and 
% 					($instance ?HOUR (HourFn 12 ?DAY))
% 					(starts ?HOUR ?AFTERNOON)
% 				)
% 			)
% 		)
% 	)

fof( miloA2763, axiom,
	p__d__subclass(c__Sunrise,c__TimeInterval)
).



% ($documentation Sunrise EnglishLanguage "The &%TimeInterval of each &%Day when the sun is rising 
% and is partially overlapped by the horizon line.")


fof( miloA2764, axiom,
	p__d__subclass(c__Sunset,c__TimeInterval)
).



% ($documentation Sunset EnglishLanguage "The &%TimeInterval of each &%Day when the sun is setting 
% and is partially overlapped by the horizon line.") 


fof( miloA2765, axiom,
	p__d__subclass(c__Weekend,c__TimeInterval)
).



% ($documentation Weekend EnglishLanguage "Any &%Saturday and &%Sunday which are contiguous.")


fof( miloA2766, axiom,
	(![WEEKEND]: 
		(
			(
				p__d__instance(WEEKEND,c__Weekend)
			)
			=>
			(
				(?[SATURDAY,SUNDAY]: 
					(
						(
							(
								p__d__instance(SATURDAY,c__Saturday)
							)
						 &
							(
								p__d__instance(SUNDAY,c__Sunday)
							)
						 &
							(
								p__starts(SATURDAY,WEEKEND)
							)
						 &
							(
								p__finishes(SUNDAY,WEEKEND)
							)
						 &
							(
								p__meetsTemporally(SATURDAY,SUNDAY)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2767, axiom,
	p__d__subclass(c__SeasonOfYear,c__TimeInterval)
).


fof( miloA2768, axiom,
	p__d__partition5(c__SeasonOfYear,c__WinterSeason,c__SpringSeason,c__SummerSeason,c__FallSeason)
).



% ($documentation SeasonOfYear EnglishLanguage "&%SeasonOfYear is the class of four 
% seasons correlated with the calendar &%Year and associated with 
% changes in the length of daylight and with overall temperature 
% changes. Depending upon the &%GeographicArea, a &%SeasonOfYear 
% may also be associated with weather patterns (e.g., rainy, dry, 
% windy). The characteristics of seasons (cold vs. hot temperatures, 
% long vs. short days) are reversed from the &%NorthernHemisphere 
% to the &%SouthernHemisphere.")


fof( miloA2769, axiom,
	p__d__subclass(c__WinterSeason,c__SeasonOfYear)
).



% ($documentation WinterSeason EnglishLanguage "The &%SeasonOfYear that begins at the winter 
% solstice and ends at the spring equinox.")


fof( miloA2770, axiom,
	(![WINTER]: 
		(
			(
				p__d__instance(WINTER,c__WinterSeason)
			)
			=>
			(
				(?[SPRING]: 
					(
						(
							(
								p__d__instance(SPRING,c__SpringSeason)
							)
						 &
							(
								p__meetsTemporally(WINTER,SPRING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2771, axiom,
	(![WINTER]: 
		(
			(
				p__d__instance(WINTER,c__WinterSeason)
			)
			=>
			(
				(?[AUTUMN]: 
					(
						(
							(
								p__d__instance(AUTUMN,c__FallSeason)
							)
						 &
							(
								p__meetsTemporally(AUTUMN,WINTER)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2772, axiom,
	p__d__subclass(c__SpringSeason,c__SeasonOfYear)
).



% ($documentation SpringSeason EnglishLanguage "The &%SeasonOfYear that begins at the spring 
% equinox and ends at the summer solstice. &%SpringSeason is the class of 
% &%TimeIntervals associated with the calendar months of &%March 
% through &%May.")


fof( miloA2773, axiom,
	(![SPRING]: 
		(
			(
				p__d__instance(SPRING,c__SpringSeason)
			)
			=>
			(
				(?[SUMMER]: 
					(
						(
							(
								p__d__instance(SUMMER,c__SummerSeason)
							)
						 &
							(
								p__meetsTemporally(SPRING,SUMMER)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2774, axiom,
	(![SPRING]: 
		(
			(
				p__d__instance(SPRING,c__SpringSeason)
			)
			=>
			(
				(?[WINTER]: 
					(
						(
							(
								p__d__instance(WINTER,c__WinterSeason)
							)
						 &
							(
								p__meetsTemporally(WINTER,SPRING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2775, axiom,
	p__d__subclass(c__SummerSeason,c__SeasonOfYear)
).



% ($documentation SummerSeason EnglishLanguage "The &%SeasonOfYear that begins at the summer 
% solstice and ends at the autumnal equinox.")


fof( miloA2776, axiom,
	(![SUMMER]: 
		(
			(
				p__d__instance(SUMMER,c__SummerSeason)
			)
			=>
			(
				(?[SPRING]: 
					(
						(
							(
								p__d__instance(SPRING,c__SpringSeason)
							)
						 &
							(
								p__meetsTemporally(SPRING,SUMMER)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2777, axiom,
	(![SUMMER]: 
		(
			(
				p__d__instance(SUMMER,c__SummerSeason)
			)
			=>
			(
				(?[AUTUMN]: 
					(
						(
							(
								p__d__instance(AUTUMN,c__FallSeason)
							)
						 &
							(
								p__meetsTemporally(SUMMER,AUTUMN)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2778, axiom,
	p__d__subclass(c__FallSeason,c__SeasonOfYear)
).



% ($documentation FallSeason EnglishLanguage "The &%SeasonOfYear that begins at the autumnal 
% equinox and ends at the winter solstice.")


fof( miloA2779, axiom,
	(![AUTUMN]: 
		(
			(
				p__d__instance(AUTUMN,c__FallSeason)
			)
			=>
			(
				(?[SUMMER]: 
					(
						(
							(
								p__d__instance(SUMMER,c__SummerSeason)
							)
						 &
							(
								p__meetsTemporally(SUMMER,AUTUMN)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2780, axiom,
	(![AUTUMN]: 
		(
			(
				p__d__instance(AUTUMN,c__FallSeason)
			)
			=>
			(
				(?[WINTER]: 
					(
						(
							(
								p__d__instance(WINTER,c__WinterSeason)
							)
						 &
							(
								p__meetsTemporally(AUTUMN,WINTER)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2781, axiom,
	p__d__instance(c__Upstairs,c__PositionalAttribute)
).



% ($documentation Upstairs EnglishLanguage "A &%PositionalAttribute to indicate that one thing is 
% one or more floors above a second thing in the same building.")


fof( miloA2782, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__orientation(OBJ1,OBJ2,c__Upstairs)
					)
				)
			)
			=>
			(
				(?[LEVEL1,LEVEL2,BUILDING]: 
					(
						(
							(
								p__d__instance(LEVEL1,c__BuildingLevel)
							)
						 &
							(
								p__d__instance(LEVEL2,c__BuildingLevel)
							)
						 &
							(
								p__d__instance(BUILDING,c__Building)
							)
						 &
							(
								p__part(LEVEL1,BUILDING)
							)
						 &
							(
								p__part(LEVEL2,BUILDING)
							)
						 &
							(
								p__located(OBJ1,LEVEL1)
							)
						 &
							(
								p__located(OBJ2,LEVEL2)
							)
						 &
							(
								p__orientation(LEVEL1,LEVEL2,c__Above)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2783, axiom,
	p__d__instance(c__Downstairs,c__PositionalAttribute)
).



% ($documentation Downstairs EnglishLanguage "A &%PositionalAttribute to indicate that one thing is 
% one or more floors below a second thing in the same building.")


fof( miloA2784, axiom,
	(![OBJ1,OBJ2]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__Object)
					)
				 &
					(
						p__orientation(OBJ1,OBJ2,c__Downstairs)
					)
				)
			)
			=>
			(
				(?[LEVEL1,LEVEL2,BUILDING]: 
					(
						(
							(
								p__d__instance(LEVEL1,c__BuildingLevel)
							)
						 &
							(
								p__d__instance(LEVEL2,c__BuildingLevel)
							)
						 &
							(
								p__d__instance(BUILDING,c__Building)
							)
						 &
							(
								p__part(LEVEL1,BUILDING)
							)
						 &
							(
								p__part(LEVEL2,BUILDING)
							)
						 &
							(
								p__located(OBJ1,LEVEL1)
							)
						 &
							(
								p__located(OBJ2,LEVEL2)
							)
						 &
							(
								p__orientation(LEVEL1,LEVEL2,c__Below)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2785, axiom,
	p__d__subclass(c__LinguisticAttribute,c__InternalAttribute)
).



% ($documentation LinguisticAttribute EnglishLanguage "Any &%Attribute that is 
% expressed by a &%Language or class of &%Languages.")


fof( miloA2786, axiom,
	p__d__instance(c__Happiness,c__EmotionalState)
).



% ($documentation Happiness EnglishLanguage "The state of being happy, experiencing pleasure, 
% joy or contentment.  Note that this &%Attribute covers both active enjoyment, 
% as well as the emotional state of simply being free from anxiety or fear.")


fof( miloA2787, axiom,
	(![PERSON]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__CognitiveAgent)
					)
				 &
					(
						p__attribute(PERSON,c__Happiness)
					)
				)
			)
			=>
			(
				(![PROP]: 
					(
						(
							~ (
								p__d__instance(PROP,c__Formula)
							)
						 |
							~ (
								p__fears(PERSON,PROP)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2788, axiom,
	p__subAttribute(c__Satisfaction,c__Happiness)
).



% ($documentation Satisfaction EnglishLanguage "The state of being happy about a state of
% affairs that occurred in the past.  In cases where that state of affairs 
% is the product of one's own doing, this is known as pride.")


fof( miloA2789, axiom,
	p__subAttribute(c__Tranquility,c__Happiness)
).


fof( miloA2790, axiom,
	p__contraryAttribute2(c__Tranquility,c__Anxiety)
).



% ($documentation Tranquility EnglishLanguage "The state of being free from &%Anxiety.")


fof( miloA2791, axiom,
	p__d__instance(c__Unhappiness,c__EmotionalState)
).


fof( miloA2792, axiom,
	p__contraryAttribute2(c__Unhappiness,c__Happiness)
).



% ($documentation Unhappiness EnglishLanguage "The state of being unhappy, experiencing pain, 
% sorrow or unease.")


fof( miloA2793, axiom,
	p__subAttribute(c__Excitement,c__Happiness)
).



% ($documentation Excitement EnglishLanguage "The state of being happy about a state of 
% affairs that might occur in the future.")


fof( miloA2794, axiom,
	p__subAttribute(c__Anxiety,c__Unhappiness)
).



% ($documentation Anxiety EnglishLanguage "The state of being worried, troubled or uneasy.")


fof( miloA2795, axiom,
	(![PERSON]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__CognitiveAgent)
					)
				 &
					(
						p__attribute(PERSON,c__Anxiety)
					)
				)
			)
			=>
			(
				(?[PROP]: 
					(
						(
							(
								p__d__instance(PROP,c__Formula)
							)
						 &
							(
								p__fears(PERSON,PROP)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2796, axiom,
	p__subAttribute(c__Anger,c__Unhappiness)
).



% ($documentation Anger EnglishLanguage "The state of being wrathful, irate or indignant.")


fof( miloA2797, axiom,
	(![PERSON]: 
		(
			(
				(
					(
						p__d__instance(PERSON,c__CognitiveAgent)
					)
				 &
					(
						p__attribute(PERSON,c__Anger)
					)
				)
			)
			=>
			(
				(?[PROP]: 
					(
						(
							(
								p__d__instance(PROP,c__Formula)
							)
						 &
							(
								p__disapproves(PERSON,PROP)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2798, axiom,
	p__subAttribute(c__Pain,c__Unhappiness)
).



% ($documentation Pain EnglishLanguage "A physical sensation of discomfort which can vary widely 
% in intensity.")


fof( miloA2799, axiom,
	p__subAttribute(c__Headache,c__Pain)
).



% ($documentation Headache EnglishLanguage "&%Pain that that is restricted to the &%Head.")


fof( miloA2800, axiom,
	(![E]: 
		(
			(
				(
					(
						p__d__instance(E,c__Object)
					)
				 &
					(
						p__attribute(E,c__Headache)
					)
				)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__Head)
							)
						 &
							(
								p__properPart(H,E)
							)
						 &
							(
								p__attribute(H,c__Pain)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2801, axiom,
	p__d__instance(c__Surprise,c__EmotionalState)
).



% ($documentation Surprise EnglishLanguage "The &%EmotionalState that one experiences when something 
% unexpected and of significance occurs.")


% 	(forall (?AGENT ?TIME)
% 		(=> 
% 			(holdsDuring ?TIME (attribute ?AGENT Surprise))
% 			(exists (?PART ?PROP)
% 				(and 
% 					(temporalPart ?PART (PastFn ?TIME))
% 					(holdsDuring ?PART (expects ?AGENT ?PROP))
% 					(holdsDuring ?TIME (truth ?PROP False))
% 				)
% 			)
% 		)
% 	)

fof( miloA2803, axiom,
	p__d__instance(c__structure,c__BinaryPredicate)
).


fof( miloA2804, axiom,
	p__d__instance(c__structure,c__IrreflexiveRelation)
).


fof( miloA2805, axiom,
	p__d__instance(c__structure,c__AsymmetricRelation)
).


fof( miloA2806, axiom,
	p__subrelation(c__structure,c__attribute)
).


% 	($domain structure 1 Object)

% 	($domain structure 2 StructureAttribute)

% ($comment 
% ;; KJN: Delete. Redundant as attribute already is an instance of these 3         
% ;;($instance color BinaryPredicate)
% ;;($instance color IrreflexiveRelation)
% ;;($instance color AsymmetricRelation)
% )

fof( miloA2809, axiom,
	p__subrelation(c__color,c__attribute)
).


% 	($domain color 1 Object)

% 	($domain color 2 ColorAttribute)

% ($comment 
% ;; NS: Narrowing attribute -> color.
% )

% 	(forall (?T1 ?OBJ ?ATTR)
% 		(=> 
% 			(and 
% 				($instance ?ATTR ColorAttribute)
% 				(holdsDuring ?T1 (attribute ?OBJ ?ATTR))
% 			)
% 			(holdsDuring ?T1 (color ?OBJ ?ATTR))
% 		)
% 	)

fof( miloA2813, axiom,
	p__d__subclass(c__SecondaryColor,c__ColorAttribute)
).



% ($documentation SecondaryColor EnglishLanguage "A color that is the product of mixing together 
% two or more &%PrimaryColors.")


fof( miloA2814, axiom,
	(![COLOR,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(COLOR,c__SecondaryColor)
					)
				 &
					(
						p__attribute(OBJ,COLOR)
					)
				)
			)
			=>
			(
				(?[PROCESS,RESOURCE1,RESOURCE2,PRIMARY1,PRIMARY2]: 
					(
						(
							(
								p__d__instance(PROCESS,c__Process)
							)
						 &
							(
								p__d__instance(RESOURCE1,c__Object)
							)
						 &
							(
								p__d__instance(RESOURCE2,c__Object)
							)
						 &
							(
								p__result(PROCESS,OBJ)
							)
						 &
							(
								p__resource(PROCESS,RESOURCE1)
							)
						 &
							(
								p__resource(PROCESS,RESOURCE2)
							)
						 &
							(
								p__attribute(RESOURCE1,PRIMARY1)
							)
						 &
							(
								p__attribute(RESOURCE2,PRIMARY2)
							)
						 &
							(
								p__d__instance(PRIMARY1,c__PrimaryColor)
							)
						 &
							(
								p__d__instance(PRIMARY2,c__PrimaryColor)
							)
						 &
							(
								~ (
									( PRIMARY1 = PRIMARY2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2815, axiom,
	p__d__instance(c__GrayColor,c__SecondaryColor)
).



% ($documentation GrayColor EnglishLanguage "A &%SecondaryColor that results from mixing &%Black and 
% &%White.")


fof( miloA2816, axiom,
	p__d__instance(c__Pink,c__SecondaryColor)
).



% ($documentation Pink EnglishLanguage "A &%SecondaryColor that results from mixing &%Red and 
% &%White.")


fof( miloA2817, axiom,
	p__d__instance(c__Brown,c__SecondaryColor)
).



% ($documentation Brown EnglishLanguage "A &%SecondaryColor that resembles the color of wood or 
% of soil.")


fof( miloA2818, axiom,
	p__d__instance(c__OrangeColor,c__SecondaryColor)
).



% ($documentation OrangeColor EnglishLanguage "A &%SecondaryColor that results from mixing &%Red 
% and &%Yellow and resembles the color of a ripe orange fruit.")


fof( miloA2819, axiom,
	p__d__instance(c__Green,c__SecondaryColor)
).



% ($documentation Green EnglishLanguage "A &%SecondaryColor that resembles the color of fresh 
% grass.")


fof( miloA2820, axiom,
	p__d__instance(c__Purple,c__SecondaryColor)
).



% ($documentation Purple EnglishLanguage "A &%SecondaryColor that results from mixing &%Red and 
% &%Blue.")


fof( miloA2821, axiom,
	p__d__instance(c__LineFormation,c__ShapeAttribute)
).



% ($documentation LineFormation EnglishLanguage "A &%ShapeAttribute that applies to 
% &%Collections and indicates that all of the &%members of the &%Collection 
% are arrayed in a line, i.e. each &%member (except possibly the first) is 
% behind or to the side of exactly one other &%member.")


fof( miloA2822, axiom,
	(![COLLECTION]: 
		(
			(
				(
					(
						p__d__instance(COLLECTION,c__Object)
					)
				 &
					(
						p__attribute(COLLECTION,c__LineFormation)
					)
				)
			)
			=>
			(
				p__d__instance(COLLECTION,c__Collection)
			)
		)
	)
).


fof( miloA2823, axiom,
	p__d__instance(c__Stressed,c__SoundAttribute)
).



% ($documentation Stressed EnglishLanguage "A &%SoundAttribute of &%Syllables.  It denotes 
% the quality of being emphasized over the other &%Syllables in the same 
% &%Word.")


fof( miloA2824, axiom,
	(![SYLLABLE]: 
		(
			(
				(
					(
						p__d__instance(SYLLABLE,c__Object)
					)
				 &
					(
						p__attribute(SYLLABLE,c__Stressed)
					)
				)
			)
			=>
			(
				p__d__instance(SYLLABLE,c__Syllable)
			)
		)
	)
).


fof( miloA2825, axiom,
	(![WORD,SYLLABLE]: 
		(
			(
				(
					(
						p__d__instance(SYLLABLE,c__Object)
					)
				 &
					(
						p__d__instance(WORD,c__Object)
					)
				 &
					(
						p__attribute(SYLLABLE,c__Stressed)
					)
				 &
					(
						p__d__instance(WORD,c__Word)
					)
				 &
					(
						p__part(SYLLABLE,WORD)
					)
				)
			)
			=>
			(
				(![SYLLABLE2]: 
					(
						(
							~ (
								p__d__instance(SYLLABLE2,c__Object)
							)
						 |
							~ (
								p__d__instance(SYLLABLE2,c__Syllable)
							)
						 |
							~ (
								p__part(SYLLABLE2,WORD)
							)
						 |
							~ (
								p__attribute(SYLLABLE2,c__Stressed)
							)
						 |
							( SYLLABLE2 = SYLLABLE )
						)
					)
				)
			)
		)
	)
).


fof( miloA2826, axiom,
	p__d__subclass(c__Syllable,c__SymbolicString)
).



% ($documentation Syllable EnglishLanguage "A sequence of &%Characters from the same &%Word 
% that denote a single sound.")


fof( miloA2827, axiom,
	(![WORD]: 
		(
			(
				(
					(
						p__d__instance(WORD,c__Object)
					)
				 &
					(
						p__d__instance(WORD,c__Word)
					)
				)
			)
			=>
			(
				(?[SYLLABLE]: 
					(
						(
							(
								p__d__instance(SYLLABLE,c__Syllable)
							)
						 &
							(
								p__part(SYLLABLE,WORD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2828, axiom,
	p__d__subclass(c__AlphabeticCharacter,c__Character)
).



% ($documentation AlphabeticCharacter EnglishLanguage "Any &%Character that is comprised of a single 
% alphabetical character, e.g. A, B, C, D, ...")


fof( miloA2829, axiom,
	p__d__subclass(c__DigitCharacter,c__Character)
).



% ($documentation DigitCharacter EnglishLanguage "Any &%Character that is comprised of a single digit, 
% i.e. one of the numerals 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.")


fof( miloA2830, axiom,
	p__d__subclass(c__Consonant,c__AlphabeticCharacter)
).



% ($documentation Consonant EnglishLanguage "An &%AlphabeticCharacter that denotes a speech sound 
% that results in audible friction when it is pronounced.")


fof( miloA2831, axiom,
	p__d__subclass(c__Vowel,c__AlphabeticCharacter)
).



% ($documentation Vowel EnglishLanguage "An &%AlphabeticCharacter that denotes a speech sound that 
% does not result in audible friction when it is pronounced.")


fof( miloA2832, axiom,
	p__d__instance(c__Lost,c__ContestAttribute)
).


fof( miloA2833, axiom,
	p__contraryAttribute2(c__Lost,c__Won)
).



% ($documentation Lost EnglishLanguage "The &%ContestAttribute that applies to a &%Contest 
% participant who has lost the &%Contest.")


fof( miloA2834, axiom,
	p__d__instance(c__Won,c__ContestAttribute)
).



% ($documentation Won EnglishLanguage "The &%ContestAttribute that applies to a &%Contest 
% participant who has won the &%Contest.")


fof( miloA2835, axiom,
	p__d__instance(c__TieScore,c__ContestAttribute)
).



% ($documentation TieScore EnglishLanguage "The &%ContestAttribute that applies to all &%contestParticipants 
% in a &%Contest when none of them have &%Won or &%Lost the &%Contest.")


fof( miloA2836, axiom,
	p__d__subclass(c__GameAttribute,c__ContestAttribute)
).



% ($documentation GameAttribute EnglishLanguage "Any &%ContestAttribute that is specific 
% to a &%Game.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of agent is Agent, which is subclass of Object, whereas the first argument of subProcess is Process (Object and Process are disjoint)
% ;;
% ;;(=>
% ;;   (and
% ;;      (property ?THING ?ATTR)
% ;;      ($instance ?ATTR GameAttribute))
% ;;   (exists (?GAME)
% ;;      (and
% ;;         ($instance ?GAME Game)
% ;;         (or
% ;;            (agent ?GAME ?THING)
% ;;            (patient ?GAME ?THING)
% ;;            (subProcess ?THING ?GAME)))))
% )

fof( miloA2837, axiom,
	p__d__subclass(c__SportsAttribute,c__GameAttribute)
).



% ($documentation SportsAttribute EnglishLanguage "Any &%GameAttribute that is specific to 
% a &%Sport.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of agent is Agent, which is subclass of Object, whereas the first argument of subProcess is Process (Object and Process are disjoint)
% ;;
% ;;(=>
% ;;   (and
% ;;      (property ?THING ?ATTR)
% ;;      ($instance ?ATTR SportsAttribute))
% ;;   (exists (?SPORT)
% ;;      (and
% ;;         ($instance ?SPORT Game)
% ;;         (or
% ;;            (agent ?SPORT ?THING)
% ;;            (patient ?SPORT ?THING)
% ;;            (subProcess ?THING ?SPORT)))))
% )

fof( miloA2838, axiom,
	p__d__instance(c__Foul,c__SportsAttribute)
).



% ($documentation Foul EnglishLanguage "A &%SportsAttribute that indicates that the &%GamePiece of 
% a &%Sport is no longer in play because it has gone beyond the limits of the 
% sports field.")


fof( miloA2839, axiom,
	p__d__instance(c__SportsOut,c__SportsAttribute)
).



% ($documentation SportsOut EnglishLanguage "A &%SportsAttribute that indicates that a player in 
% a &%Sport can no longer compete because he has been tagged with the &%GamePiece.")


fof( miloA2840, axiom,
	p__d__subclass(c__PoliticoEconomicAttribute,c__RelationalAttribute)
).


fof( miloA2841, axiom,
	p__d__partition3(c__PoliticoEconomicAttribute,c__FormOfGovernment,c__EconomicAttribute)
).



% ($documentation PoliticoEconomicAttribute EnglishLanguage "Any &%Attribute of a &%Government 
% which specifies some aspect of the political or economic system of the 
% &%Government.")


fof( miloA2842, axiom,
	(![ATTRIBUTE,GOVERNMENT]: 
		(
			(
				(
					(
						p__d__instance(GOVERNMENT,c__Object)
					)
				 &
					(
						p__d__instance(ATTRIBUTE,c__PoliticoEconomicAttribute)
					)
				 &
					(
						p__attribute(GOVERNMENT,ATTRIBUTE)
					)
				)
			)
			=>
			(
				p__d__instance(GOVERNMENT,c__Government)
			)
		)
	)
).


fof( miloA2843, axiom,
	p__d__subclass(c__EconomicAttribute,c__PoliticoEconomicAttribute)
).



% ($documentation EconomicAttribute EnglishLanguage "&%EconomicAttribute is the class 
% of terms including all &%Attributes used to characterize the 
% economic systems or development levels of &%Nations or dependent 
% &%GeopoliticalAreas.")   


fof( miloA2844, axiom,
	p__d__subclass(c__FormOfGovernment,c__PoliticoEconomicAttribute)
).



% ($documentation FormOfGovernment EnglishLanguage "&%FormOfGovernment is a class of 
% &%Attributes used to describe the characteristics of a government, 
% especially a &%NationalGovernment.  The concept &%FormOfGovernment is 
% interpreted broadly enough to include &%Anarchy and &%Factionalism.")


fof( miloA2845, axiom,
	p__d__subclass(c__ChemicalReduction,c__ChemicalSynthesis)
).


fof( miloA2846, axiom,
	p__d__disjoint(c__ChemicalReduction,c__Oxidation)
).



% ($documentation ChemicalReduction EnglishLanguage "Any &%ChemicalProcess where &%Electrons 
% are added to the substance undergoing the &%ChemicalProcess.")


% 	(forall (?L ?R ?S ?G)
% 		(=> 
% 			(and 
% 				($instance ?R ChemicalReduction)
% 				(patient ?R ?S)
% 				(holdsDuring (BeginFn (WhenFn ?R)) (electronNumber ?S ?L))
% 			)
% 			(and 
% 				(greaterThan ?G ?L)
% 				(holdsDuring (EndFn (WhenFn ?R)) (electronNumber ?S ?G))
% 			)
% 		)
% 	)

fof( miloA2848, axiom,
	p__d__subclass(c__Oxidation,c__ChemicalDecomposition)
).



% ($documentation Oxidation EnglishLanguage "Any &%ChemicalProcess where &%Electrons 
% are removed from the substance undergoing the &%ChemicalProcess.")


% 	(forall (?G ?O ?S)
% 		(=> 
% 			(and 
% 				($instance ?O Oxidation)
% 				(patient ?O ?S)
% 				(holdsDuring (BeginFn (WhenFn ?O)) (electronNumber ?S ?G))
% 			)
% 			(exists (?L)
% 				(and 
% 					(lessThan ?L ?G)
% 					(holdsDuring (EndFn (WhenFn ?O)) (electronNumber ?S ?L))
% 				)
% 			)
% 		)
% 	)

fof( miloA2850, axiom,
	p__d__subclass(c__Dialysis,c__Separating)
).



% ($documentation Dialysis EnglishLanguage "Any process of &%Separating a &%Solution into two or more 
% constituent &%PureSubstances by means of their unequal diffusion through membranes 
% that are partially permeable.")


fof( miloA2851, axiom,
	(![DIALYSIS]: 
		(
			(
				p__d__instance(DIALYSIS,c__Dialysis)
			)
			=>
			(
				(?[SOLUTION,SUBSTANCE1,SUBSTANCE2]: 
					(
						(
							(
								p__resource(DIALYSIS,SOLUTION)
							)
						 &
							(
								p__d__instance(SOLUTION,c__Solution)
							)
						 &
							(
								p__result(DIALYSIS,SUBSTANCE1)
							)
						 &
							(
								p__d__instance(SUBSTANCE1,c__PureSubstance)
							)
						 &
							(
								p__result(DIALYSIS,SUBSTANCE2)
							)
						 &
							(
								p__d__instance(SUBSTANCE2,c__PureSubstance)
							)
						 &
							(
								~ (
									( SUBSTANCE1 = SUBSTANCE2 )
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2852, axiom,
	p__d__subclass(c__Diluting,c__Putting)
).



% ($documentation Diluting EnglishLanguage "Adding a &%Liquid to a &%Solution to decrease 
% the concentration of the &%Solution.")


fof( miloA2853, axiom,
	(![D]: 
		(
			(
				p__d__instance(D,c__Diluting)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__patient(D,S)
							)
						 &
							(
								p__d__instance(S,c__Solution)
							)
						 &
							(
								p__attribute(S,c__Liquid)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2854, axiom,
	p__d__instance(c__ChemicalEquilibrium,c__InternalAttribute)
).



% ($documentation ChemicalEquilibrium EnglishLanguage "The &%Attribute of being in a chemically 
% stable state, i.e. the relative proportions of &%resources and &%results will 
% not longer change.")


fof( miloA2855, axiom,
	(![PROCESS]: 
		(
			(
				p__property(PROCESS,c__ChemicalEquilibrium)
			)
			=>
			(
				p__d__instance(PROCESS,c__ChemicalProcess)
			)
		)
	)
).


% 	(forall (?TIME ?PROCESS ?RESOURCE ?RESULT)
% 		(=> 
% 			(property ?PROCESS ChemicalEquilibrium)
% 			(exists (?RATIO)
% 				(=> 
% 					(and 
% 						(holdsDuring ?TIME (resource ?PROCESS ?RESOURCE))
% 						(holdsDuring ?TIME (result ?PROCESS ?RESULT))
% 					)
% 					(equal ?RATIO (DivisionFn ?RESOURCE ?RESULT))
% 				)
% 			)
% 		)
% 	)

fof( miloA2857, axiom,
	p__d__subclass(c__Chromatography,c__Separating)
).



% ($documentation Chromatography EnglishLanguage "&%Processes of &%Separating a &%LiquidMixture or 
% a &%GasMixture into some or all of the &%PureSubstances that comprise it.")


fof( miloA2858, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Chromatography)
			)
			=>
			(
				(?[M]: 
					(
						(
							(
								p__d__instance(M,c__Object)
							)
						 &
							(
								p__resource(C,M)
							)
						 &
							(
								(
									p__d__instance(M,c__LiquidMixture)
								 |
									p__d__instance(M,c__GasMixture)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2859, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Chromatography)
			)
			=>
			(
				(?[S]: 
					(
						(
							(
								p__d__instance(S,c__PureSubstance)
							)
						 &
							(
								p__result(C,S)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2860, axiom,
	p__d__subclass(c__BreakabilityAttribute,c__InternalAttribute)
).



% ($documentation BreakabilityAttribute EnglishLanguage "A subclass of &%Attributes for 
% characterizing the breakability of &%CorpuscularObjects.")


fof( miloA2861, axiom,
	p__d__instance(c__Fragile,c__BreakabilityAttribute)
).



% ($documentation Fragile EnglishLanguage "An &%Attribute which indicates that the 
% associated &%Object is very breakable.")


fof( miloA2862, axiom,
	p__d__instance(c__Unbreakable,c__BreakabilityAttribute)
).


fof( miloA2863, axiom,
	p__contraryAttribute2(c__Unbreakable,c__Fragile)
).



% ($documentation Unbreakable EnglishLanguage "An &%Attribute which indicates that the 
% associated &%Object cannot be broken under normal usage conditions.")


fof( miloA2864, axiom,
	p__subrelation(c__contestParticipant,c__agent)
).


fof( miloA2865, axiom,
	p__d__instance(c__contestParticipant,c__TotalValuedRelation)
).


% 	($domain contestParticipant 1 Contest)

% 	($domain contestParticipant 2 Agent)


% ($documentation contestParticipant EnglishLanguage "(&%contestParticipant ?CONTEST ?AGENT) 
% means that ?AGENT is one of the sides in the &%Contest ?CONTEST.  For 
% example, if the ?CONTEST is a football game, then ?AGENT would be one of 
% the opposing teams.  For another example, if ?CONTEST is a &%Battle, then 
% ?AGENT would be one of the sides fighting each other.")


fof( miloA2868, axiom,
	p__d__subclass(c__CivilWar,c__War)
).



% ($documentation CivilWar EnglishLanguage "A &%War in which the fighting &%GeopoliticalAreas 
% are both part of the same &%Nation.")


fof( miloA2869, axiom,
	(![WAR]: 
		(
			(
				p__d__instance(WAR,c__CivilWar)
			)
			=>
			(
				(?[NATION]: 
					(
						(
							(
								p__d__instance(NATION,c__Nation)
							)
						 &
							(
								(![AGENT]: 
									(
										(
											(
												(
													p__d__instance(AGENT,c__GeopoliticalArea)
												)
											 &
												(
													p__contestParticipant(WAR,AGENT)
												)
											)
										)
										=>
										(
											p__geopoliticalSubdivision(AGENT,NATION)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2870, axiom,
	p__d__subclass(c__Debating,c__Contest)
).


fof( miloA2871, axiom,
	p__d__subclass(c__Debating,c__LinguisticCommunication)
).



% ($documentation Debating EnglishLanguage "A &%Contest where each participant holds a different 
% view regarding some issue, and each participant attempts to prove, by 
% rhetoric or evidence, that his/her own views about a particular matter are 
% correct and/or that the views of the other participants are incorrect.")


fof( miloA2872, axiom,
	p__d__subclass(c__Negotiating,c__Contest)
).


fof( miloA2873, axiom,
	p__d__subclass(c__Negotiating,c__LinguisticCommunication)
).



% ($documentation Negotiating EnglishLanguage "A &%Contest where each participant attempts to 
% maximize his self-interest in a &%Promise that marks the end of the &%Contest.")


% 	(forall (?COMMIT ?NEGOTIATE)
% 		(=> 
% 			($instance ?NEGOTIATE Negotiating)
% 			(hasPurpose ?NEGOTIATE (exists ([|] ?COMMIT []) (and ([|] ($instance ?COMMIT Committing) ([|] (subProcess ?COMMIT ?NEGOTIATE) ([|] (finishes (WhenFn ?COMMIT) (WhenFn ?NEGOTIATE)) []))))))
% 		)
% 	)

fof( miloA2875, axiom,
	p__d__subclass(c__BusinessCompetition,c__Contest)
).



% ($documentation BusinessCompetition EnglishLanguage "Any &%Contest where the &%contestParticipants 
% are &%Corporations and the aim is to win as many customers as possible.")


fof( miloA2876, axiom,
	(![CONTEST,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(CONTEST,c__BusinessCompetition)
					)
				 &
					(
						p__contestParticipant(CONTEST,AGENT)
					)
				)
			)
			=>
			(
				p__d__instance(AGENT,c__Corporation)
			)
		)
	)
).


fof( miloA2877, axiom,
	p__d__subclass(c__VisualAcuityAttribute,c__BiologicalAttribute)
).



% ($documentation VisualAcuityAttribute EnglishLanguage "The
% &%BiologicalAttributes in this &%Class describe the visual
% capabilities of an &%Organism.")


fof( miloA2878, axiom,
	p__d__instance(c__ColorBlind,c__VisualAcuityAttribute)
).



% ($documentation ColorBlind EnglishLanguage "This
% &%VisualAcuityAttribute describes an &%Organism that is
% unable to perceive a distinction in color between certain
% wavelength ranges within the larger range of typically
% visible electro-magnetic radiation (light).  Among &%Humans,
% there are several forms and degrees of color blindness.
% Color blindness is generally considered to be a mild to
% moderate disability among &%Humans, but individuals with
% certain types of color blindness excel at some visual
% pattern recognition tasks, and it's not clear that the
% condition should be considered a &%DiseaseOrSyndrome.")


fof( miloA2879, axiom,
	p__d__subclass(c__Disability,c__DiseaseOrSyndrome)
).


% ($comment 
% ;; english definition taken from Wikipedia
% )


% ($documentation Disability EnglishLanguage "&%Disability is a class of 
% &%DiseaseOrSyndrome that describes impairments, activity limitations or participation 
% restriction that may be physical, cognitive, mental, sensory, emotional, 
% developmental or some combination")


% (termFormat EnglishLanguage Disability "disability")

fof( miloA2880, axiom,
	p__d__subclass(c__PhysicalDisability,c__Disability)
).


% ($comment 
% ;; english definition taken from Wikipedia
% )


% ($documentation PhysicalDisability EnglishLanguage "&%PhysicalDisability is any 
% impairment that limits the physical function of limbs or fine or gross motor ability, 
% or limit the facets of daily living")


% (termFormat EnglishLanguage PhysicalDisability "physical disability")

fof( miloA2881, axiom,
	p__d__subclass(c__SensoryDisability,c__Disability)
).


% ($comment 
% ;; english definition taken from Wikipedia
% )


% ($documentation SensoryDisability EnglishLanguage "&%SensoryDisability is any 
% impairement of one of the five senses")


% (termFormat EnglishLanguage SensoryDisability "sensory disability")

fof( miloA2882, axiom,
	p__d__instance(c__Blind,c__VisualAcuityAttribute)
).


fof( miloA2883, axiom,
	p__d__instance(c__Blind,c__SensoryDisability)
).


% ($comment 
% ;; KJN: Removing this as Disability already inherits from BiologicalAttribute
% ;; ($instance Blind BiologicalAttribute)
% )


% ($documentation Blind EnglishLanguage "The &%Attribute that applies to &%Animals and &%Humans 
% that are unable to see.")


fof( miloA2884, axiom,
	(![AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Object)
					)
				 &
					(
						p__attribute(AGENT,c__Blind)
					)
				)
			)
			=>
			(
				~ (
					p__capability(c__Seeing,c__agent,AGENT)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Removing this as Disability already inherits from BiologicalAttribute
% ;;($instance Deaf BiologicalAttribute)
% )

fof( miloA2885, axiom,
	p__d__instance(c__Deaf,c__SensoryDisability)
).



% ($documentation Deaf EnglishLanguage "The &%Attribute that applies to &%Animals and &%Humans 
% that are unable to hear.")


fof( miloA2886, axiom,
	(![A]: 
		(
			(
				(
					(
						p__d__instance(A,c__Object)
					)
				 &
					(
						p__attribute(A,c__Deaf)
					)
				)
			)
			=>
			(
				~ (
					p__capability(c__Hearing,c__agent,A)
				)
			)
		)
	)
).


fof( miloA2887, axiom,
	p__d__instance(c__Hungry,c__BiologicalAttribute)
).



% ($documentation Hungry EnglishLanguage "The &%Attribute that applies to &%Animals and &%Humans 
% when they want food.")


% 	(forall (?E ?A)
% 		(=> 
% 			(attribute ?A Hungry)
% 			(desires ?A (exists ([|] ?E []) (and ([|] ($instance ?E Eating) ([|] (agent ?E ?A) [])))))
% 		)
% 	)

fof( miloA2889, axiom,
	p__d__instance(c__Pregnant,c__BiologicalAttribute)
).



% ($documentation Pregnant EnglishLanguage "The &%Attribute that applies to &%Female &%Animals and 
% &%Humans that have an embryo or fetus growing inside of them as the result of 
% having one of the &%Female's &%Eggs fertilized.")


fof( miloA2890, axiom,
	(![H]: 
		(
			(
				(
					(
						p__d__instance(H,c__Object)
					)
				 &
					(
						p__attribute(H,c__Pregnant)
					)
				)
			)
			=>
			(
				p__attribute(H,c__Female)
			)
		)
	)
).


fof( miloA2891, axiom,
	p__subAttribute(c__Puberty,c__NonFullyFormed)
).



% ($documentation Puberty EnglishLanguage "The &%DevelopmentalAttribute of having functional sex 
% glands which are not fully mature.")


fof( miloA2892, axiom,
	p__d__instance(c__Fist,c__BodyPosition)
).



% ($documentation Fist EnglishLanguage "The &%BodyPosition of having the fingers drawn into 
% the palm so that the hand can be used for striking something.")


fof( miloA2893, axiom,
	(![HAND]: 
		(
			(
				(
					(
						p__d__instance(HAND,c__Object)
					)
				 &
					(
						p__attribute(HAND,c__Fist)
					)
				)
			)
			=>
			(
				p__d__instance(HAND,c__Hand)
			)
		)
	)
).


fof( miloA2894, axiom,
	p__d__subclass(c__LyingDown,c__BodyMotion)
).


fof( miloA2895, axiom,
	p__d__subclass(c__LyingDown,c__MotionDownward)
).



% ($documentation LyingDown EnglishLanguage "The &%BodyMotion of moving from a &%Sitting 
% to a &%Prostrate position.")


% 	(forall (?LIE ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?LIE LyingDown)
% 				(agent ?LIE ?AGENT)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?LIE)) (attribute ?AGENT Sitting))
% 				(holdsDuring (EndFn (WhenFn ?LIE)) (attribute ?AGENT Prostrate))
% 			)
% 		)
% 	)

fof( miloA2897, axiom,
	p__d__instance(c__Handstand,c__BodyPosition)
).



% ($documentation Handstand EnglishLanguage "The &%BodyPosition where one rests on one's hands 
% and extends one's feet in the air.")


fof( miloA2898, axiom,
	p__d__instance(c__Kneeling,c__BodyPosition)
).



% ($documentation Kneeling EnglishLanguage "The &%BodyPosition of resting one's weight on one's 
% &%Knees.")


fof( miloA2899, axiom,
	p__d__instance(c__Splitting,c__BodyPosition)
).



% ($documentation Splitting EnglishLanguage "The &%BodyPosition of extending one's &%Legs at 
% right angles to one's &%Torso.")


fof( miloA2900, axiom,
	p__subAttribute(c__Squatting,c__Sitting)
).



% ($documentation Squatting EnglishLanguage "&%Sitting on one's heels.")


fof( miloA2901, axiom,
	p__d__subclass(c__SittingDown,c__BodyMotion)
).


fof( miloA2902, axiom,
	p__d__subclass(c__SittingDown,c__MotionDownward)
).



% ($documentation SittingDown EnglishLanguage "The &%BodyMotion of moving from a &%Standing 
% to a &%Sitting position.")


% 	(forall (?SIT ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?SIT SittingDown)
% 				(agent ?SIT ?AGENT)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?SIT)) (attribute ?AGENT Standing))
% 				(holdsDuring (EndFn (WhenFn ?SIT)) (attribute ?AGENT Sitting))
% 			)
% 		)
% 	)

fof( miloA2904, axiom,
	p__d__subclass(c__StandingUp,c__BodyMotion)
).


fof( miloA2905, axiom,
	p__d__subclass(c__StandingUp,c__MotionUpward)
).



% ($documentation StandingUp EnglishLanguage "The &%BodyMotion of moving from a &%Sitting 
% to a &%Standing position.")


% 	(forall (?STAND ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?STAND StandingUp)
% 				(agent ?STAND ?AGENT)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?STAND)) (attribute ?AGENT Sitting))
% 				(holdsDuring (EndFn (WhenFn ?STAND)) (attribute ?AGENT Standing))
% 			)
% 		)
% 	)

fof( miloA2907, axiom,
	p__d__subclass(c__EyeMotion,c__BodyMotion)
).



% ($documentation EyeMotion EnglishLanguage "Any &%Motion where a patient is the agent's 
% own &%Eyelid or &%Eyelids.")


fof( miloA2908, axiom,
	(![A,EM]: 
		(
			(
				(
					(
						p__d__instance(A,c__Agent)
					)
				 &
					(
						p__d__instance(EM,c__EyeMotion)
					)
				 &
					(
						p__agent(EM,A)
					)
				)
			)
			=>
			(
				(?[E]: 
					(
						(
							(
								p__d__instance(E,c__Eyelid)
							)
						 &
							(
								p__part(E,A)
							)
						 &
							(
								p__patient(EM,E)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2909, axiom,
	p__d__subclass(c__OpeningEyes,c__EyeMotion)
).


fof( miloA2910, axiom,
	p__d__subclass(c__OpeningEyes,c__Opening)
).


fof( miloA2911, axiom,
	p__d__disjoint(c__OpeningEyes,c__ClosingEyes)
).



% ($documentation OpeningEyes EnglishLanguage "The &%BodyMotion of relaxing the eye lids so that 
% the corneas are exposed to light.")


fof( miloA2912, axiom,
	p__d__subclass(c__ClosingEyes,c__EyeMotion)
).


fof( miloA2913, axiom,
	p__d__subclass(c__ClosingEyes,c__Closing)
).



% ($documentation ClosingEyes EnglishLanguage "The &%EyeMotion of tensing the eye lids so that 
% the corneas are not exposed to light.")


fof( miloA2914, axiom,
	p__d__subclass(c__Winking,c__ClosingEyes)
).


fof( miloA2915, axiom,
	p__d__subclass(c__Winking,c__Gesture)
).



% ($documentation Winking EnglishLanguage "Any instance of &%ClosingEyes which is intended to 
% express something to someone else.")


fof( miloA2916, axiom,
	p__d__subclass(c__Shrugging,c__BodyMotion)
).


fof( miloA2917, axiom,
	p__d__subclass(c__Shrugging,c__Gesture)
).



% ($documentation Shrugging EnglishLanguage "Moving the &%Shoulders in such a way that the motion 
% is intended to express something to someone else.")


fof( miloA2918, axiom,
	(![SHRUG,SHOULDER]: 
		(
			(
				(
					(
						p__d__instance(SHRUG,c__Shrugging)
					)
				 &
					(
						p__patient(SHRUG,SHOULDER)
					)
				)
			)
			=>
			(
				p__d__instance(SHOULDER,c__Shoulder)
			)
		)
	)
).


fof( miloA2919, axiom,
	p__d__subclass(c__Trembling,c__BodyMotion)
).


fof( miloA2920, axiom,
	p__d__subclass(c__Trembling,c__AutonomicProcess)
).


fof( miloA2921, axiom,
	p__d__subclass(c__Trembling,c__Tremor)
).


fof( miloA2922, axiom,
	p__d__disjoint(c__Trembling,c__IntentionalProcess)
).



% ($documentation Trembling EnglishLanguage "Any &%BodyMotion which is involuntary and which is 
% repeated many times over a short time frame, e.g. a tremor in the hands,
% shivering etc.") 


fof( miloA2923, axiom,
	p__d__subclass(c__ReflexiveProcess,c__AutonomicProcess)
).



% ($documentation ReflexiveProcess EnglishLanguage "Any &%Muscle reaction which is a response 
% to a specific stimulus and which does not reach the level of consciousness.")


fof( miloA2924, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__ReflexiveProcess)
			)
			=>
			(
				(?[M]: 
					(
						(
							(
								p__d__instance(M,c__Muscle)
							)
						 &
							(
								p__patient(P,M)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2925, axiom,
	p__d__subclass(c__Dismounting,c__BodyMotion)
).



% ($documentation Dismounting EnglishLanguage "Any &%BodyMotion which results in not being &%On 
% something else.")


% 	(forall (?D ?A ?O)
% 		(=> 
% 			(and 
% 				($instance ?D Dismounting)
% 				(agent ?D ?A)
% 				(patient ?D ?O)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?D)) (orientation ?A ?O On))
% 				(holdsDuring (EndFn (WhenFn ?D)) (not (orientation ?A ?O On)))
% 			)
% 		)
% 	)

fof( miloA2927, axiom,
	p__d__subclass(c__DomesticAnimal,c__Animal)
).


fof( miloA2928, axiom,
	p__d__disjoint(c__DomesticAnimal,c__Human)
).



% ($documentation DomesticAnimal EnglishLanguage "Any &%Animal that is kept by a &%Human, as 
% a pet, as livestock, for exhibition, etc.")


fof( miloA2929, axiom,
	(![ANIMAL]: 
		(
			(
				p__d__instance(ANIMAL,c__DomesticAnimal)
			)
			=>
			(
				(?[KEEP,PERSON]: 
					(
						(
							(
								p__d__instance(KEEP,c__Keeping)
							)
						 &
							(
								p__agent(KEEP,PERSON)
							)
						 &
							(
								p__d__instance(PERSON,c__Human)
							)
						 &
							(
								p__patient(KEEP,ANIMAL)
							)
						)
					)
				)
			)
		)
	)
).


% 	($subclass Fodder (FoodForFn DomesticAnimal))

fof( miloA2931, axiom,
	p__d__subclass(c__Fodder,c__OrganicObject)
).



% ($documentation Fodder EnglishLanguage "&%Fodder is the class of &%OrganicObjects that 
% is used as food for &%DomesticAnimals.")


% 	(forall (?ANIMAL ?EAT ?FEED)
% 		(=> 
% 			($instance ?FEED Fodder)
% 			(hasPurpose ?FEED (exists ([|] ?ANIMAL ([|] ?EAT [])) (and ([|] ($instance ?ANIMAL DomesticAnimal) ([|] ($instance ?EAT Eating) ([|] (agent ?EAT ?ANIMAL) ([|] (patient ?EAT ?FEED) [])))))))
% 		)
% 	)

fof( miloA2933, axiom,
	p__d__subclass(c__Herbivore,c__Mammal)
).


fof( miloA2934, axiom,
	p__d__disjoint(c__Herbivore,c__Carnivore)
).



% ($documentation Herbivore EnglishLanguage "A plant-eating &%Mammal.")


fof( miloA2935, axiom,
	(![A,E,F]: 
		(
			(
				(
					(
						p__d__instance(A,c__Herbivore)
					)
				 &
					(
						p__agent(E,A)
					)
				 &
					(
						p__d__instance(E,c__Eating)
					)
				 &
					(
						p__patient(E,F)
					)
				)
			)
			=>
			(
				p__d__instance(F,c__Plant)
			)
		)
	)
).


fof( miloA2936, axiom,
	p__d__subclass(c__Antelope,c__HoofedMammal)
).



% ($documentation Antelope EnglishLanguage "A &%HoofedMammal with long legs and backward-facing horns.  
% This class includes gazelles, addax, blackbucks, etc.")


fof( miloA2937, axiom,
	p__d__subclass(c__Buffalo,c__HoofedMammal)
).


% ($comment 
% ;; NS: delete.  Buffalo is neither disjoint from
% ;; DomesticAnimal, nor a subclass of DomesticAnimal.
% ;; ($disjoint Buffalo DomesticAnimal)
% )


% ($documentation Buffalo EnglishLanguage "A &%HoofedMammal with long hair whose habitat is the 
% plains of &%NorthAmerica.")


fof( miloA2938, axiom,
	p__d__subclass(c__DomesticCat,c__DomesticAnimal)
).


fof( miloA2939, axiom,
	p__d__subclass(c__DomesticCat,c__Feline)
).



% ($documentation DomesticCat EnglishLanguage "A variety of &%Feline which has been domesticated 
% by selective breeding.")


fof( miloA2940, axiom,
	p__d__subclass(c__DomesticDog,c__DomesticAnimal)
).


fof( miloA2941, axiom,
	p__d__subclass(c__DomesticDog,c__Canine)
).



% ($documentation DomesticDog EnglishLanguage "Canines which have evolved from the common 
% wolf by selective breeding.")


fof( miloA2942, axiom,
	p__d__subclass(c__Fox,c__Canine)
).



% ($documentation Fox EnglishLanguage "&%Canines with a bushy tail and pointed ears and nose.  
% &%Foxes tend to be much smaller than most &%DomesticDogs.")


fof( miloA2943, axiom,
	p__d__subclass(c__Elephant,c__Herbivore)
).



% ($documentation Elephant EnglishLanguage "A very large, almost hairless &%Herbivore with a long 
% trunk.")



% ($documentation Goat EnglishLanguage "A domesticated &%HoofedMammal that is raised primarily 
% for &%Milk.")


fof( miloA2944, axiom,
	p__d__subclass(c__Horse,c__HoofedMammal)
).


% ($comment 
% ;; ($subclass Horse Livestock)
% )


% ($documentation Horse EnglishLanguage "A domesticated &%HoofedMammal that is used for 
% transportation and work.")


fof( miloA2945, axiom,
	p__d__subclass(c__Pig,c__HoofedMammal)
).


% ($comment 
% ;; ($subclass Pig Livestock)
% )


% ($documentation Pig EnglishLanguage "A domesticated &%HoofedMammal that is raised for pork.")


fof( miloA2946, axiom,
	p__d__subclass(c__Donkey,c__HoofedMammal)
).


% ($comment 
% ;; ($subclass Donkey Livestock)
% )

% ($documentation Donkey EnglishLanguage "A domesticated &%HoofedMammal that is used for 
% work.")


fof( miloA2947, axiom,
	p__d__subclass(c__Gastropod,c__Mollusk)
).



% ($documentation Gastropod EnglishLanguage "A &%Mollusk with a distinct head that has no 
% shell (e.g. slugs) or a univalve shell (e.g. snails).")


fof( miloA2948, axiom,
	p__d__subclass(c__Mule,c__HoofedMammal)
).


fof( miloA2949, axiom,
	p__d__subclass(c__Mule,c__DomesticAnimal)
).



% ($documentation Mule EnglishLanguage "The product of a &%Male &%Donkey and a &%Female 
% &%Horse.  &%Mules are always sterile.")


fof( miloA2950, axiom,
	(![MULE]: 
		(
			(
				p__d__instance(MULE,c__Mule)
			)
			=>
			(
				(?[DONKEY,HORSE]: 
					(
						(
							(
								p__father(MULE,DONKEY)
							)
						 &
							(
								p__d__instance(DONKEY,c__Donkey)
							)
						 &
							(
								p__mother(MULE,HORSE)
							)
						 &
							(
								p__d__instance(HORSE,c__Horse)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2951, axiom,
	(![MULE]: 
		(
			(
				p__d__instance(MULE,c__Mule)
			)
			=>
			(
				~ (
					p__capability(c__SexualReproduction,c__agent,MULE)
				)
			)
		)
	)
).


fof( miloA2952, axiom,
	p__d__subclass(c__Sheep,c__HoofedMammal)
).


fof( miloA2953, axiom,
	p__d__subclass(c__Sheep,c__DomesticAnimal)
).



% ($documentation Sheep EnglishLanguage "A domesticated &%HoofedMammal that is bred for its 
% wool and for its meat (known as mutton).")


fof( miloA2954, axiom,
	p__d__subclass(c__Lamb,c__Sheep)
).



% ($documentation Lamb EnglishLanguage "A young &%Sheep, i.e. a &%Sheep that is &%NonFullyFormed.")


fof( miloA2955, axiom,
	(![L]: 
		(
			(
				p__d__instance(L,c__Object)
			)
			=>
			(
				(
					p__d__instance(L,c__Lamb)
				)
				<=>
				(
					(
						(
							p__d__instance(L,c__Sheep)
						)
					 &
						(
							p__attribute(L,c__NonFullyFormed)
						)
					)
				)
			)
		)
	)
).


fof( miloA2956, axiom,
	p__d__subclass(c__Cow,c__HoofedMammal)
).


fof( miloA2957, axiom,
	p__d__subclass(c__Cow,c__DomesticAnimal)
).



% ($documentation Cow EnglishLanguage "A domesticated &%HoofedMammal that is raised for milk 
% and beef, and is also used for work.")


fof( miloA2958, axiom,
	p__d__subclass(c__Calf,c__Cow)
).



% ($documentation Calf EnglishLanguage "A young &%Cow, i.e. a &%Cow that is &%NonFullyFormed.")


fof( miloA2959, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Object)
			)
			=>
			(
				(
					p__d__instance(C,c__Calf)
				)
				<=>
				(
					(
						(
							p__d__instance(C,c__Cow)
						)
					 &
						(
							p__attribute(C,c__NonFullyFormed)
						)
					)
				)
			)
		)
	)
).


fof( miloA2960, axiom,
	p__d__subclass(c__Bull,c__Cow)
).



% ($documentation Bull EnglishLanguage "A &%Cow that is &%Male.")


fof( miloA2961, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Object)
			)
			=>
			(
				(
					p__d__instance(B,c__Bull)
				)
				<=>
				(
					(
						(
							p__d__instance(B,c__Cow)
						)
					 &
						(
							p__attribute(B,c__Male)
						)
					)
				)
			)
		)
	)
).


fof( miloA2962, axiom,
	p__d__subclass(c__FemaleCow,c__Cow)
).



% ($documentation FemaleCow EnglishLanguage "A &%Cow that is &%Female.")


fof( miloA2963, axiom,
	(![COW]: 
		(
			(
				p__d__instance(COW,c__Object)
			)
			=>
			(
				(
					p__d__instance(COW,c__FemaleCow)
				)
				<=>
				(
					(
						(
							p__d__instance(COW,c__Cow)
						)
					 &
						(
							p__attribute(COW,c__Female)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moving all Livestock statements to Economy.kif as the definition for Livestock
% ;; is there.
% ;;($subclass Poultry Livestock)
% )

fof( miloA2964, axiom,
	p__d__subclass(c__Poultry,c__Bird)
).


fof( miloA2965, axiom,
	p__d__subclass(c__Chicken,c__Poultry)
).



% ($documentation Chicken EnglishLanguage "A subclass of &%Bird that is raised for its meat 
% and for its eggs.")


fof( miloA2966, axiom,
	p__d__subclass(c__Hen,c__Chicken)
).



% ($documentation Hen EnglishLanguage "A &%Female &%Chicken.")


fof( miloA2967, axiom,
	(![H]: 
		(
			(
				p__d__instance(H,c__Object)
			)
			=>
			(
				(
					p__d__instance(H,c__Hen)
				)
				<=>
				(
					(
						(
							p__d__instance(H,c__Chicken)
						)
					 &
						(
							p__attribute(H,c__Female)
						)
					)
				)
			)
		)
	)
).


fof( miloA2968, axiom,
	p__d__subclass(c__Rooster,c__Chicken)
).



% ($documentation Rooster EnglishLanguage "A &%Male &%Chicken.")


fof( miloA2969, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__Object)
			)
			=>
			(
				(
					p__d__instance(R,c__Rooster)
				)
				<=>
				(
					(
						(
							p__d__instance(R,c__Chicken)
						)
					 &
						(
							p__attribute(R,c__Male)
						)
					)
				)
			)
		)
	)
).



% ($documentation Duck EnglishLanguage "A subclass of &%Bird with webbed feet and a large bill.  
% Some ducks live in the wild, and some are raised for meat and/or eggs.")


fof( miloA2970, axiom,
	p__d__subclass(c__Duck,c__Poultry)
).


fof( miloA2971, axiom,
	p__d__subclass(c__Goose,c__Poultry)
).



% ($documentation Goose EnglishLanguage "A subclass of &%Bird with webbed feet and a long neck 
% and a large body.  These &%Birds are often raised for their &%Meat.")


fof( miloA2972, axiom,
	p__d__subclass(c__Owl,c__Bird)
).



% ($documentation Owl EnglishLanguage "A nocturnal bird of prey with a large head and 
% forward-facing eyes.")


fof( miloA2973, axiom,
	p__d__subclass(c__Pigeon,c__Bird)
).



% ($documentation Pigeon EnglishLanguage "A subclass of &%Bird with a stout body and short legs.")


fof( miloA2974, axiom,
	p__d__subclass(c__Vulture,c__Bird)
).



% ($documentation Vulture EnglishLanguage "A diurnal bird of prey with a bald head that 
% feeds on carrion.")


fof( miloA2975, axiom,
	p__d__subclass(c__Feather,c__AnimalAnatomicalStructure)
).


fof( miloA2976, axiom,
	p__d__subclass(c__Feather,c__BodyPart)
).



% ($documentation Feather EnglishLanguage "Each instance of this class is one of the structures 
% that make up the external covering of &%Birds.")


fof( miloA2977, axiom,
	(![F]: 
		(
			(
				p__d__instance(F,c__Feather)
			)
			=>
			(
				(?[B]: 
					(
						(
							(
								p__d__instance(B,c__Bird)
							)
						 &
							(
								p__part(F,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2978, axiom,
	p__d__instance(c__meatOfAnimal,c__BinaryPredicate)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation meatOfAnimal EnglishLanguage "(&%meatOfAnimal
% ?MEATCLASS ?ANIMALCLASS) means that every instance of ?MEATCLASS
% was once part of some instance of ?ANIMALCLASS.")


% 	($domainSubclass meatOfAnimal 1 Meat)

% 	($domainSubclass meatOfAnimal 2 Animal)

% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;   (meatOfAnimal ?MEAT ?ANIMAL)
% ;;   (exists (?TIME ?A)
% ;;     (and
% ;;       ($instance ?A ?ANIMAL)
% ;;       ($instance ?M ?MEAT)
% ;;       (during ?TIME (WhenFn ?A))
% ;;       (part ?MEAT ?A))))
% ;;
% ;; NS: add.  Here we're using &%part in a "substance" sense.
% ;; Note that &%material takes a subclass of &%Substance as its
% ;; first argument, and so is not useful here.
% )

% 	(forall (?MEAT ?ANIMAL ?M)
% 		(=> 
% 			(and 
% 				(meatOfAnimal ?MEAT ?ANIMAL)
% 				($instance ?M ?MEAT)
% 			)
% 			(exists (?TIME ?A)
% 				(and 
% 					($instance ?A ?ANIMAL)
% 					(finishes ?TIME (WhenFn ?A))
% 					(holdsDuring ?TIME (part ?M ?A))
% 				)
% 			)
% 		)
% 	)

fof( miloA2982, axiom,
	p__d__subclass(c__Beef,c__Meat)
).



% ($documentation Beef EnglishLanguage "&%Meat that was originally part of a &%Cow.")


fof( miloA2983, axiom,
	p__meatOfAnimal(c__Beef,c__Cow)
).



% ($documentation ChickenMeat EnglishLanguage "&%Meat that was originally part of a &%Chicken.")


fof( miloA2984, axiom,
	p__d__subclass(c__ChickenMeat,c__Meat)
).


fof( miloA2985, axiom,
	p__meatOfAnimal(c__ChickenMeat,c__Chicken)
).


fof( miloA2986, axiom,
	p__d__subclass(c__Pork,c__Meat)
).



% ($documentation Pork EnglishLanguage "&%Meat that was originally part of a &%Pig.")


fof( miloA2987, axiom,
	p__meatOfAnimal(c__Pork,c__Pig)
).


% ($comment 
% ;; KJN: MOving this to Food.kif as the definition for Seafood is there.
% ;;($subclass FishMeat Seafood)
% ;;(documentation FishMeat EnglishLanguage "&%Meat that was originally part of a &%Fish.")
% ;;(meatOfAnimal FishMeat Fish)
% )

fof( miloA2988, axiom,
	p__d__subclass(c__Mouse,c__Rodent)
).



% ($documentation Mouse EnglishLanguage "A &%Rodent that has a hairless tail like a rat but that 
% is smaller than a &%Rat.")


fof( miloA2989, axiom,
	p__d__subclass(c__Rat,c__Rodent)
).



% ($documentation Rat EnglishLanguage "A &%Rodent that has a hairless tail like a &%Mouse 
% but that is larger than a &%Mouse.")


fof( miloA2990, axiom,
	p__d__subclass(c__Rabbit,c__Rodent)
).



% ($documentation Rabbit EnglishLanguage "A burrowing &%Rodent with a short tail and long ears.")


fof( miloA2991, axiom,
	p__d__subclass(c__Squirrel,c__Rodent)
).



% ($documentation Squirrel EnglishLanguage "A tree-dwelling &%Rodent with a bushy tail.")


fof( miloA2992, axiom,
	p__d__subclass(c__Hay,c__Fodder)
).



% ($documentation Hay EnglishLanguage "&%Grass that has been cut and cured for use as &%Fodder.")


fof( miloA2993, axiom,
	(![HAY]: 
		(
			(
				p__d__instance(HAY,c__Hay)
			)
			=>
			(
				(?[MAKE,GRASS]: 
					(
						(
							(
								p__d__instance(MAKE,c__Making)
							)
						 &
							(
								p__resource(MAKE,GRASS)
							)
						 &
							(
								p__d__instance(GRASS,c__Grass)
							)
						 &
							(
								p__result(MAKE,HAY)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA2994, axiom,
	p__d__subclass(c__Copying,c__Making)
).



% ($documentation Copying EnglishLanguage "&%Making a &%copy of something.")


fof( miloA2995, axiom,
	(![COPY,THING1,THING2]: 
		(
			(
				(
					(
						p__d__instance(THING1,c__Object)
					)
				 &
					(
						p__d__instance(THING2,c__Object)
					)
				 &
					(
						p__d__instance(COPY,c__Copying)
					)
				 &
					(
						p__resource(COPY,THING1)
					)
				 &
					(
						p__result(COPY,THING2)
					)
				)
			)
			=>
			(
				p__copy(THING1,THING2)
			)
		)
	)
).


fof( miloA2996, axiom,
	p__d__subclass(c__Vacationing,c__RecreationOrExercise)
).



% ($documentation Vacationing EnglishLanguage "Taking time off from &%Working.")


fof( miloA2997, axiom,
	(![PERSON,VACATION,WORK]: 
		(
			(
				(
					(
						p__d__instance(VACATION,c__Vacationing)
					)
				 &
					(
						p__d__instance(WORK,c__Working)
					)
				 &
					(
						p__agent(VACATION,PERSON)
					)
				 &
					(
						p__agent(WORK,PERSON)
					)
				 &
					(
						p__d__instance(PERSON,c__Human)
					)
				)
			)
			=>
			(
				~ (
					p__overlapsTemporally(f__WhenFn1(VACATION),f__WhenFn1(WORK))
				)
			)
		)
	)
).



% ($documentation OccupationFn EnglishLanguage "(OccupationFn ?PROCESS) denotes the 
% subclass of ?PROCESS where instances of ?PROCESS are performed as 
% one's occupation, i.e. as part of a &%FinancialTransaction where one 
% earns money for the performance of ?PROCESS.")


fof( miloA2998, axiom,
	p__d__instance(c__OccupationFn,c__UnaryFunction)
).


% 	($domain OccupationFn 1 IntentionalProcess)

% 	($rangeSubclass OccupationFn FinancialTransaction)


% ($documentation occupation EnglishLanguage "(occupation ?PERSON ?TYPE) means that the occupation 
% of ?PERSON is ?TYPE.  This predicate is most often used in combination with the 
% function &%OccupationFn, e.g. (&%occupation PoliceOfficerWilkins (&%OccupationFn 
% &%LawEnforcement)).")


fof( miloA3001, axiom,
	p__d__instance(c__occupation,c__BinaryPredicate)
).


% 	($domain occupation 1 Human)

% 	($domain occupation 2 FinancialTransaction)

fof( miloA3004, axiom,
	p__d__subclass(c__Working,c__FinancialTransaction)
).



% ($documentation Working EnglishLanguage "Any &%FinancialTransaction where someone exchanges 
% his/her labor for an instance of &%CurrencyMeasure.")


fof( miloA3005, axiom,
	p__d__subclass(c__Farming,c__Working)
).



% ($documentation Farming EnglishLanguage "Operating a farm, e.g. planting and harvesting crops, 
% tending livestock, etc.")


% 	(forall (?FARMING ?FARMER)
% 		(=> 
% 			(and 
% 				($instance ?FARMING Farming)
% 				(agent ?FARMING ?FARMER)
% 			)
% 			(exists (?FARM)
% 				(and 
% 					($instance ?FARM Farm)
% 					(holdsDuring (WhenFn ?FARMING) (located ?FARMER ?FARM))
% 				)
% 			)
% 		)
% 	)

fof( miloA3007, axiom,
	p__d__subclass(c__Serving,c__Working)
).



% ($documentation Serving EnglishLanguage "Working as a waiter or servant, either for an 
% &%Organization (e.g. a &%Restaurant) or for a person or family.")


fof( miloA3008, axiom,
	p__d__subclass(c__Sales,c__Working)
).



% ($documentation Sales EnglishLanguage "Any instance of &%Working that involves &%Selling or 
% trying to sell items.")


fof( miloA3009, axiom,
	p__subAttribute(c__Retired,c__Unemployed)
).



% ($documentation Retired EnglishLanguage "Voluntary unemployment toward the end of one's life.")


fof( miloA3010, axiom,
	p__subAttribute(c__Housewife,c__Unemployed)
).



% ($documentation Housewife EnglishLanguage "A role occupied by a wife who manages the home 
% while her husband earns income for the family.")


fof( miloA3011, axiom,
	(![W]: 
		(
			(
				(
					(
						p__d__instance(W,c__Woman)
					)
				 &
					(
						p__attribute(W,c__Housewife)
					)
				)
			)
			=>
			(
				(?[H]: 
					(
						(
							(
								p__d__instance(H,c__Man)
							)
						 &
							(
								p__wife(W,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3012, axiom,
	p__d__instance(c__Waiter,c__ServicePosition)
).



% ($documentation Waiter EnglishLanguage "&%Waiter refers to the &%ServicePosition present
% in &%Restaurant that brings food from the kitchen to the customer's table")


% (termFormat EnglishLanguage Waiter "waiter")

fof( miloA3013, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__Waiter)
					)
				)
			)
			=>
			(
				p__d__instance(X,c__Human)
			)
		)
	)
).


% 	(forall (?CUST ?REST ?DINING ?X ?KITCHEN ?TABLE ?C ?FOOD)
% 		(=> 
% 			(and 
% 				(attribute ?X Waiter)
% 				($instance ?X Human)
% 				(employs ?REST ?X)
% 				($instance ?REST Restaurant)
% 				(customer ?CUST ?REST)
% 				(located ?CUST ?TABLE)
% 				($instance ?TABLE Table)
% 			)
% 			(and 
% 				(possesses ?REST ?KITCHEN)
% 				($instance ?KITCHEN KitchenArea)
% 				($instance ?DINING DiningArea)
% 				(located ?TABLE ?DINING)
% 				(hasPurpose ?X (and ([|] ($instance ?C Carrying) ([|] (agent ?C ?X) ([|] (origin ?C ?KITCHEN) ([|] (destination ?C ?TABLE) ([|] (patient ?C ?FOOD) ([|] ($instance ?FOOD (FoodForFn Human)) []))))))))
% 			)
% 		)
% 	)

% ($comment 
% ;; NS: edit.
% )

fof( miloA3015, axiom,
	p__d__instance(c__Maid,c__ServicePosition)
).


% ($comment 
% ;; NS: deleted for now, since ServicePosition is a subclass
% ;; of SkilledOccupation, and so is disjoint from
% ;; UnskilledOccupation.
% ;; ($instance Maid UnskilledOccupation)
% ;;
% ;; NS: delete.
% ;; (documentation Maid EnglishLanguage "Any &%ServicePosition where various needs of a person 
% ;; or family are served over a long period of time.  Note that these &%Positions 
% ;; are, by definition, filled only by &%Women.")
% ;;
% ;; NS: delete.
% ;; (documentation Maid EnglishLanguage "A &%Position which involves &%Serving a person 
% ;; or family.  Note that this &%Position is filled only by a &%Woman.")
% ;;
% ;; NS: add.
% )


% ($documentation Maid EnglishLanguage "This &%Attribute
% describes a &%Woman who works in a &%ServicePosition that
% entails performing various domestic tasks (cleaning,
% cooking, child care) for an individual or family over an
% extended period of time, typically months or years.")


% ($comment 
% ;; NS: TO DO: Review and edit all instances of
% ;; SkilledOccupation, UnskilledOccupation.
% ;;
% ;; NS: edit.
% )

% 	(forall (?T1 ?MAID)
% 		(=> 
% 			(holdsDuring ?T1 (attribute ?MAID Maid))
% 			(exists (?SERVE)
% 				(and 
% 					(during ?SERVE ?T1)
% 					($instance ?SERVE Serving)
% 					(agent ?SERVE ?MAID)
% 				)
% 			)
% 		)
% 	)

fof( miloA3017, axiom,
	p__d__subclass(c__Janitor,c__UnskilledOccupation)
).



% ($documentation Janitor EnglishLanguage "Any &%Position which involves cleaning a &%Building 
% or some of the &%Rooms within a &%Building.")


% 	(forall (?J ?P)
% 		(=> 
% 			(and 
% 				($instance ?J Janitor)
% 				(attribute ?P ?J)
% 			)
% 			(occupation ?P (OccupationFn Washing))
% 		)
% 	)

% ($comment 
% ;; NS: delete.
% ;; ($instance TheaterProfession SkilledOccupation)
% )

fof( miloA3019, axiom,
	p__d__subclass(c__TheaterProfession,c__EntertainmentProfession)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation TheaterProfession EnglishLanguage "Instances
% of this &%Class describe the &%Positions of people whose
% work involves putting on plays (theatrical performanes).")


% ($comment 
% ;; NS: edit.
% )

fof( miloA3020, axiom,
	p__d__instance(c__FilmDirector,c__FilmMakingProfession)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation FilmDirector EnglishLanguage "A &%Position that
% describes a person who directs &%MotionPictures as a
% profession.")


fof( miloA3021, axiom,
	p__d__subclass(c__FilmMaking,c__ContentDevelopment)
).



% ($documentation FilmMaking EnglishLanguage "&%ContentDevelopment where the result is a 
% &%MotionPicture.")


fof( miloA3022, axiom,
	(![FM]: 
		(
			(
				p__d__instance(FM,c__FilmMaking)
			)
			=>
			(
				(?[M,F]: 
					(
						(
							(
								p__d__instance(M,c__MotionPicture)
							)
						 &
							(
								p__result(FM,M)
							)
						 &
							(
								p__d__instance(F,c__PhotographicFilm)
							)
						 &
							(
								p__resource(FM,F)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3023, axiom,
	p__d__subclass(c__FilmMakingProfession,c__EntertainmentProfession)
).



% ($documentation FilmMakingProfession EnglishLanguage "&%Positions which involve &%FilmMaking, 
% i.e. acting in films, directing films, producing films, etc.")


% 	(forall (?P ?H)
% 		(=> 
% 			(and 
% 				($instance ?P FilmMakingProfession)
% 				(attribute ?H ?P)
% 			)
% 			(occupation ?H (OccupationFn FilmMaking))
% 		)
% 	)

% ($comment 
% ;; NS: edit.
% )

fof( miloA3025, axiom,
	p__d__instance(c__FilmProducer,c__FilmMakingProfession)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation FilmProducer EnglishLanguage "A &%Position that
% describes a person who produces &%MotionPictures as a profession,
% i.e., who arranges the financing for a &%MotionPicture and
% supervises its production.")


fof( miloA3026, axiom,
	p__d__instance(c__Coach,c__SkilledOccupation)
).



% ($documentation Coach EnglishLanguage "Any occupation that involves training an athlete or a 
% sports team.")


% ($comment 
% ;; NS: edit.
% )

fof( miloA3027, axiom,
	p__d__instance(c__GameReferee,c__SkilledOccupation)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation GameReferee EnglishLanguage "This &%Attribute
% describes a person who adjudicates &%Maneuvers in a &%Game, i.e.,
% who decides whether or not the &%Maneuvers are permitted by the
% rules of the &%Game.")


fof( miloA3028, axiom,
	p__d__instance(c__Carpenter,c__OccupationalTrade)
).



% ($documentation Carpenter EnglishLanguage "Any occupation that involves creating and repairing 
% structural and decorative portions of &%Buildings that are made chiefly of &%Wood.
% This does not include plumbing, roofing, electrical, foundation and site work.")


fof( miloA3029, axiom,
	(![P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Agent)
					)
				 &
					(
						p__attribute(P,c__Carpenter)
					)
				)
			)
			=>
			(
				p__hasSkill(c__Carpentry,P)
			)
		)
	)
).


fof( miloA3030, axiom,
	p__d__subclass(c__Carpentry,c__Making)
).



% ($documentation Carpentry EnglishLanguage "&%Making &%Buildings out of &%Wood.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: wrongly quantified variables
% ;;
% ;;(=>
% ;;  ($instance ?C Carpentry)
% ;;  (exists (?B)
% ;;    (and
% ;;      ($instance ?B Building)
% ;;      ($instance ?W Wood)
% ;;      (part ?W ?B)
% ;;      (result ?C ?B))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA3031, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Carpentry)
			)
			=>
			(
				(?[B,W]: 
					(
						(
							(
								p__d__instance(B,c__Building)
							)
						 &
							(
								p__d__instance(W,c__Wood)
							)
						 &
							(
								p__part(W,B)
							)
						 &
							(
								p__result(C,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3032, axiom,
	p__d__instance(c__constructionPeriod,c__BinaryPredicate)
).


% 	($domain constructionPeriod 1 StationaryArtifact)

% 	($domain constructionPeriod 2 TimeInterval)


% ($documentation constructionPeriod EnglishLanguage "(constructionPeriod ?OBJECT ?INTERVAL) 
% means that some &%StationaryArtifact ?OBJECT was built over &%TimeInterval ?INTERVAL")


% (termFormat EnglishLanguage constructionPeriod "construction period")

% 	(forall (?INTERVAL ?CONSTRUCTING ?OBJECT)
% 		(=> 
% 			(constructionPeriod ?OBJECT ?INTERVAL)
% 			(holdsDuring ?INTERVAL (exists ([|] ?CONSTRUCTING []) (and ([|] ($instance ?CONSTRUCTING Constructing) ([|] (result ?CONSTRUCTING ?OBJECT) [])))))
% 		)
% 	)

fof( miloA3036, axiom,
	p__d__instance(c__contractor,c__BinaryPredicate)
).


% 	($domain contractor 1 StationaryArtifact)

% 	($domain contractor 2 Agent)


% ($documentation contractor EnglishLanguage "(contractor ?BUILDING ?AGENT) means that some 
% &%Agent ?AGENT has a contract with another ?AGENT to build a &%StationaryArtifact for
% the agent.") 


% 	(forall (?CONSTRUCT ?BUILDING ?CONTRACTOR)
% 		(=> 
% 			(contractor ?BUILDING ?CONTRACTOR)
% 			(exists (?CONTRACT ?AGENT)
% 				(and 
% 					(property ?CONTRACT Contract)
% 					(partyToAgreement ?AGENT ?CONTRACT)
% 					(partyToAgreement ?CONTRACTOR ?CONTRACT)
% 					(confersObligation (exists ([|] ?CONSTRUCT ([|] ?BUILDING [])) (and ([|] ($instance ?CONSTRUCT Constructing) ([|] (agent ?CONSTRUCT ?CONTRACTOR) ([|] (result ?CONSTRUCT ?BUILDING) ([|] ($instance ?BUILDING StationaryArtifact) [])))))) ?AGENT ?CONTRACTOR)
% 				)
% 			)
% 		)
% 	)

fof( miloA3040, axiom,
	p__d__subclass(c__Agriculture,c__Maintaining)
).



% ($documentation Agriculture EnglishLanguage "&%Agriculture is a class of &%Processes 
% in which land, plants, or animals are cultivated in order to produce 
% food or other organic products.")


fof( miloA3041, axiom,
	(![AGRO]: 
		(
			(
				p__d__instance(AGRO,c__Agriculture)
			)
			=>
			(
				(?[GROWTH]: 
					(
						(
							(
								p__d__instance(GROWTH,c__Growth)
							)
						 &
							(
								p__subProcess(GROWTH,AGRO)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3042, axiom,
	p__d__instance(c__FarmHand,c__OccupationalTrade)
).



% ($documentation FarmHand EnglishLanguage "&%OccupationalTrades which involve &%Agriculture.")


fof( miloA3043, axiom,
	(![P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Agent)
					)
				 &
					(
						p__attribute(P,c__FarmHand)
					)
				)
			)
			=>
			(
				(?[F]: 
					(
						(
							(
								p__d__instance(F,c__Agriculture)
							)
						 &
							(
								p__agent(F,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3044, axiom,
	p__d__instance(c__Plumber,c__OccupationalTrade)
).



% ($documentation Plumber EnglishLanguage "Any occupation that involves installing, repairing, and 
% replacing pipes and pipe fixtures.")


% ($comment 
% ;; KJN: Moving to Transportation.kif where Pipeline is defined
% ;;($subclass SewageSystem Pipeline)
% ;;(documentation SewageSystem EnglishLanguage "A &%Pipline which is used to transport human 
% ;;waste to an area where it can be treated and/or disposed of.")
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?T Transportation)
% ;;    (patient ?T ?S)
% ;;    (instrument ?T ?SS)
% ;;    ($instance ?SS SewageSystem))
% ;;  ($instance ?S Sewage))
% )

fof( miloA3045, axiom,
	p__d__instance(c__Potter,c__OccupationalTrade)
).



% ($documentation Potter EnglishLanguage "Any occupation that involves the creation of &%Pottery.")


fof( miloA3046, axiom,
	(![H]: 
		(
			(
				(
					(
						p__d__instance(H,c__Agent)
					)
				 &
					(
						p__attribute(H,c__Potter)
					)
				)
			)
			=>
			(
				(?[M,P]: 
					(
						(
							(
								p__d__instance(P,c__Pottery)
							)
						 &
							(
								p__d__instance(M,c__Making)
							)
						 &
							(
								p__agent(M,H)
							)
						 &
							(
								p__result(M,P)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3047, axiom,
	p__d__subclass(c__ReligiousPosition,c__Position)
).



% ($documentation ReligiousPosition EnglishLanguage "Any &%Position within a &%ReligousOrganization.")


fof( miloA3048, axiom,
	(![H,P,O]: 
		(
			(
				(
					(
						p__d__instance(O,c__Organization)
					)
				 &
					(
						p__d__instance(H,c__Human)
					)
				 &
					(
						p__occupiesPosition(H,P,O)
					)
				 &
					(
						p__d__instance(P,c__ReligiousPosition)
					)
				)
			)
			=>
			(
				p__d__instance(O,c__ReligiousOrganization)
			)
		)
	)
).


fof( miloA3049, axiom,
	p__d__instance(c__Cleric,c__Profession)
).


% ($comment 
% ;; NS: edit.
% )

fof( miloA3050, axiom,
	p__d__instance(c__Cleric,c__ReligiousPosition)
).



% ($documentation Cleric EnglishLanguage "The profession of
% being in charge of or ministering to a
% &%ReligousOrganization.")


% ($comment 
% ;; NS: delete.  Not even good as a default.
% ;; (<=>
% ;;    (occupiesPosition ?PERSON Cleric ?ORG)
% ;;    (and
% ;;       (leader ?ORG ?PERSON)
% ;;       ($instance ?ORG ReligiousOrganization)))
% )

fof( miloA3051, axiom,
	p__d__instance(c__Deacon,c__ReligiousPosition)
).


fof( miloA3052, axiom,
	p__d__instance(c__Deacon,c__PartTimePosition)
).



% ($documentation Deacon EnglishLanguage "Any &%Position within
% a &%ReligiousOrganization that is held by a layman, which is
% part-time, and which involves assisting a &%Cleric.")


% ($comment 
% ;; NS: delete.
% ;; (=>
% ;;   ($instance ?D Deacon)
% ;;   (exists (?O ?C)
% ;;     (and
% ;;       ($instance ?O ReligiousOrganization)
% ;;       ($instance ?C Cleric)
% ;;       (subordinateInOrganization ?O ?D ?C))))
% ;;
% ;; NS: add.  Barely adequate as a default, probably wrong in
% ;; many cases.
% )

% 	(forall (?TIME ?ORG ?PERSON)
% 		(=> 
% 			(holdsDuring ?TIME (and ([|] (occupiesPosition ?PERSON Deacon ?ORG) ([|] ($instance ?ORG ReligiousOrganization) []))))
% 			(exists (?C)
% 				(holdsDuring ?TIME (and ([|] (occupiesPosition ?C Cleric ?ORG) ([|] (subordinateInOrganization ?ORG ?PERSON ?C) []))))
% 			)
% 		)
% 	)

fof( miloA3054, axiom,
	p__d__instance(c__PoliceOfficer,c__SkilledOccupation)
).


fof( miloA3055, axiom,
	p__d__instance(c__PoliceOfficer,c__GovernmentPosition)
).



% ($documentation PoliceOfficer EnglishLanguage "The profession of being a police officer, i.e. 
% working for a law enforcement agency that is part of a &%Government.")


fof( miloA3056, axiom,
	(![P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Agent)
					)
				 &
					(
						p__attribute(P,c__PoliceOfficer)
					)
				)
			)
			=>
			(
				p__hasSkill(c__PlacingUnderArrest,P)
			)
		)
	)
).


fof( miloA3057, axiom,
	p__subAttribute(c__PoliceCaptain,c__PoliceOfficer)
).



% ($documentation PoliceCaptain EnglishLanguage "A &%PoliceOfficer who is in charge of a precinct.")


fof( miloA3058, axiom,
	p__subAttribute(c__PoliceSergeant,c__PoliceOfficer)
).



% ($documentation PoliceSergeant EnglishLanguage "A &%PoliceOfficer with the rank of sergeant.")


fof( miloA3059, axiom,
	p__subAttribute(c__Sheriff,c__PoliceOfficer)
).



% ($documentation Sheriff EnglishLanguage "A &%PoliceOfficer whose jurisdiction is a &%County.")


fof( miloA3060, axiom,
	p__subAttribute(c__Marshal,c__PoliceOfficer)
).



% ($documentation Marshal EnglishLanguage "A &%PoliceOfficer whose responsibility is to enforce 
% the decisions of a law court.")


fof( miloA3061, axiom,
	p__subAttribute(c__Deputy,c__PoliceOfficer)
).



% ($documentation Deputy EnglishLanguage "A &%Position which authorizes the holder of the position 
% to act as the sheriff when the sheriff is not available.")


fof( miloA3062, axiom,
	p__d__instance(c__Coroner,c__GovernmentPosition)
).



% ($documentation Coroner EnglishLanguage "A
% &%GovernmentPosition who investigates deaths that are
% suspected of being due to something other than natural
% causes.")


fof( miloA3063, axiom,
	p__subAttribute(c__PoliceDetective,c__PoliceOfficer)
).



% ($documentation PoliceDetective EnglishLanguage "The &%Profession of being a police 
% detective, i.e. being a &%PoliceOfficer whose duties include the 
% investigation of crimes.") 


fof( miloA3064, axiom,
	p__d__instance(c__PrivateDetective,c__Profession)
).


fof( miloA3065, axiom,
	p__contraryAttribute2(c__PrivateDetective,c__PoliceDetective)
).



% ($documentation PrivateDetective EnglishLanguage "The &%Profession of being a private detective, 
% i.e. a detective who can be hired for a fee to investigate something.")


% ($comment 
% ;; vcvp changed ($instance Attorney Profession) to
% )

fof( miloA3066, axiom,
	p__d__instance(c__Lawyer,c__Profession)
).


fof( miloA3067, axiom,
	p__subAttribute(c__Attorney,c__Lawyer)
).


% ($comment 
% ;; vcvp is this enough?
% ;;
% ;; KJN: Removing this as the concept of Attorney isn't necessarily limited to those
% ;; in the US.  Plus, it creates a dependency to CountriesAndRegions.
% ;;(=>
% ;;  ($instance ?L Attorney)
% ;;  (and
% ;;    ($instance ?L Lawyer)
% ;;    (located ?L UnitedStates)))
% ;;
% ;; NS: edit.
% )


% ($documentation Lawyer EnglishLanguage "This &%Attribute
% describes a person whose &%Profession is the practice of law,
% whether as a &%Judge or as a legal advocate.")


fof( miloA3068, axiom,
	(![P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Human)
					)
				 &
					(
						p__attribute(P,c__Lawyer)
					)
				)
			)
			=>
			(
				p__hasExpertise(P,c__FieldOfLaw)
			)
		)
	)
).


fof( miloA3069, axiom,
	p__subAttribute(c__AttorneyGeneral,c__Attorney)
).


fof( miloA3070, axiom,
	p__d__instance(c__AttorneyGeneral,c__GovernmentPosition)
).


% ($comment 
% ;; NS: edit.
% )


% ($documentation AttorneyGeneral EnglishLanguage "This &%Attribute
% designates the chief law officer of a &%GeopoliticalArea, usually
% a &%Nation or &%StateOrProvince.")


fof( miloA3071, axiom,
	p__subAttribute(c__PublicDefender,c__Attorney)
).


fof( miloA3072, axiom,
	p__d__instance(c__PublicDefender,c__GovernmentPosition)
).



% ($documentation PublicDefender EnglishLanguage "An &%Attorney who defends criminal cases for a 
% &%GovernmentOrganization.")


fof( miloA3073, axiom,
	p__subAttribute(c__PublicProsecutor,c__Attorney)
).


fof( miloA3074, axiom,
	p__d__instance(c__PublicProsecutor,c__GovernmentPosition)
).



% ($documentation PublicProsecutor EnglishLanguage "An &%Attorney who prosecutes criminal cases for 
% a &%GovernmentOrganization.")


fof( miloA3075, axiom,
	p__subAttribute(c__Judge,c__Attorney)
).


fof( miloA3076, axiom,
	p__d__instance(c__Judge,c__GovernmentPosition)
).



% ($documentation Judge EnglishLanguage "An &%Attorney who has the power of deciding legal cases.")


% 	(forall (?J ?O ?D ?P)
% 		(=> 
% 			(and 
% 				($instance ?J Judge)
% 				(occupiesPosition ?P ?J ?O)
% 			)
% 			(modalAttribute (exists ([|] ?D []) (and ([|] ($instance ?D LegalDecision) ([|] (agent ?D ?P) [])))) Permission)
% 		)
% 	)

% 	(forall (?P ?J ?O)
% 		(=> 
% 			(and 
% 				($instance ?J Judge)
% 				(occupiesPosition ?P ?J ?O)
% 			)
% 			($instance ?O JudicialOrganization)
% 		)
% 	)

fof( miloA3079, axiom,
	p__subAttribute(c__Professor,c__Teacher)
).



% ($documentation Professor EnglishLanguage "The &%Profession of being a &%teacher at a 
% &%PostSecondarySchool.")


% 	(forall (?PERSON ?PROF ?ORG)
% 		(=> 
% 			(and 
% 				($instance ?PROF Professor)
% 				(occupiesPosition ?PERSON ?PROF ?ORG)
% 			)
% 			(and 
% 				(teacher ?PROF ?ORG)
% 				($instance ?ORG PostSecondarySchool)
% 			)
% 		)
% 	)

fof( miloA3081, axiom,
	p__d__instance(c__MedicalDoctor,c__Profession)
).



% ($documentation MedicalDoctor EnglishLanguage "The &%Profession of being a medical doctor, 
% i.e. having attended medical school and being licensed to practice medicine.")


fof( miloA3082, axiom,
	(![DOCTOR]: 
		(
			(
				(
					(
						p__d__instance(DOCTOR,c__Object)
					)
				 &
					(
						p__attribute(DOCTOR,c__MedicalDoctor)
					)
				)
			)
			=>
			(
				(?[PROCESS1,PROCESS2]: 
					(
						(
							(
								p__d__subclass(PROCESS1,c__DiagnosticProcess)
							)
						 &
							(
								p__d__subclass(PROCESS2,c__TherapeuticProcess)
							)
						 &
							(
								p__capability(PROCESS1,c__agent,DOCTOR)
							)
						 &
							(
								p__capability(PROCESS2,c__agent,DOCTOR)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3083, axiom,
	p__subAttribute(c__Surgeon,c__MedicalDoctor)
).



% ($documentation Surgeon EnglishLanguage "The &%Profession of being a surgeon, i.e. being a 
% medical doctor who specializes in performing surgical operations.")



% ($documentation Circumision EnglishLanguage "&%Removing the foreskin of the penis.  This is
% usually performed on infants, but is occasionally performed on adolescents
% and adults, either for medical reasons, or after religious conversion. It is
% often conducted as a religious rite, since it is prescribed by both the
% &%Jewish and &%Muslim religions, although it is prevalent also as a social
% norm in different nations.")


fof( miloA3084, axiom,
	p__d__subclass(c__Circumision,c__Removing)
).


fof( miloA3085, axiom,
	p__d__subclass(c__Circumision,c__Surgery)
).


fof( miloA3086, axiom,
	p__d__instance(c__NewsReporter,c__Profession)
).



% ($documentation NewsReporter EnglishLanguage "The &%Profession of being a news reporter, i.e. 
% investigating and reporting, in a publication or broadcast program, current 
% events.")


fof( miloA3087, axiom,
	(![H]: 
		(
			(
				(
					(
						p__d__instance(H,c__Agent)
					)
				 &
					(
						p__attribute(H,c__NewsReporter)
					)
				)
			)
			=>
			(
				(?[T,EV]: 
					(
						(
							(
								p__d__subclass(T,c__Text)
							)
						 &
							(
								p__d__instance(EV,c__Process)
							)
						 &
							(
								p__overlapsTemporally(f__WhenFn1(EV),f__WhenFn1(H))
							)
						 &
							(
								p__authors(H,T)
							)
						 &
							(
								p__refers(T,EV)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3088, axiom,
	p__subAttribute(c__ArtCritic,c__Journalist)
).



% ($documentation ArtCritic EnglishLanguage "The &%Profession of reporting and critiquing current 
% &%ArtWorks.")


fof( miloA3089, axiom,
	(![H]: 
		(
			(
				(
					(
						p__d__instance(H,c__Agent)
					)
				 &
					(
						p__attribute(H,c__ArtCritic)
					)
				)
			)
			=>
			(
				(?[T,AW]: 
					(
						(
							(
								p__d__subclass(T,c__Text)
							)
						 &
							(
								p__d__instance(AW,c__ArtWork)
							)
						 &
							(
								p__authors(H,T)
							)
						 &
							(
								p__refers(T,AW)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3090, axiom,
	p__d__instance(c__Accountant,c__Profession)
).



% ($documentation Accountant EnglishLanguage "The &%Profession of being an &%Accountant.")


fof( miloA3091, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__Accountant)
					)
				)
			)
			=>
			(
				p__capability(c__Calculating,c__agent,X)
			)
		)
	)
).


% ($comment 
% ;;KJN: Moving this to FinancialOntology.kif to remove dependencies  
% ;;($subclass PensionPlan FinancialAccount)
% ;;(documentation PensionPlan EnglishLanguage "A qualified retirement plan set up by a 
% ;;corporation, labor union, government, or other organization for its 
% ;;employees.  Examples include profit-sharing plans, stock bonus and 
% ;;employee stock ownership plans, thrift plans, target benefit plans, 
% ;;money purchase plans, and defined benefit plans.")
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?P PensionPlan)
% ;;    (accountHolder ?P ?A)
% ;;    (employs ?O ?A))
% ;;  (financialAccount ?P ?O))
% ;;
% ;;($subclass ProfitSharingPlan PensionPlan)
% ;;(documentation ProfitSharingPlan EnglishLanguage "An arrangement in which an employer 
% ;;shares its profits with its employees.  The compensation can be stocks, 
% ;;bonds or cash, and can be immediate or deferred until retirement.")
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?PSP ProfitSharingPlan)
% ;;    (accountHolder ?PSP ?H)
% ;;    (employs ?O ?H)
% ;;    (profit ?A ?P)
% ;;    (agent ?A ?O))
% ;;    (exists (?C ?PAY)
% ;;      (and
% ;;        ($instance ?PAY FinancialTransaction)
% ;;        (transactionAmount ?PAY ?C)
% ;;        (lessThan ?C ?P)
% ;;        (destination ?PAY ?PSP))))
% )

fof( miloA3092, axiom,
	p__d__instance(c__Literature,c__FieldOfStudy)
).



% ($documentation Literature EnglishLanguage "The study of literature, i.e. instances of &%FictionalText 
% that are regarded as having special merit.")


fof( miloA3093, axiom,
	p__d__instance(c__Mathematics,c__FieldOfStudy)
).



% ($documentation Mathematics EnglishLanguage "The &%FieldOfStudy dealing with quantities and their 
% relations to one another.")


fof( miloA3094, axiom,
	p__d__instance(c__InteriorDesign,c__FieldOfStudy)
).



% ($documentation InteriorDesign EnglishLanguage "The &%FieldOfStudy of designing the interiors of 
% &%Buildings.")


fof( miloA3095, axiom,
	p__d__subclass(c__Science,c__FieldOfStudy)
).



% ($documentation Science EnglishLanguage "Any &%FieldOfStudy which tests theories on the basis of 
% careful observations and/or experiments and which has a cumulative body of results.") 


fof( miloA3096, axiom,
	p__d__subclass(c__SocialScience,c__Science)
).



% ($documentation SocialScience EnglishLanguage "Any &%Science which studies human behavior, either in 
% the aggregate, as do, for example, &%Economics and &%Linguistics, or with respect to 
% the individual, as does &%Psychology.")


fof( miloA3097, axiom,
	p__d__instance(c__PoliticalScience,c__SocialScience)
).



% ($documentation PoliticalScience EnglishLanguage "The field of political science.")


fof( miloA3098, axiom,
	p__d__instance(c__Anthropology,c__SocialScience)
).



% ($documentation Anthropology EnglishLanguage "The study of humanity.")


fof( miloA3099, axiom,
	p__d__instance(c__Architecture,c__FieldOfStudy)
).



% ($documentation Architecture EnglishLanguage "The &%FieldOfStudy of designing &%Buildings, i.e. 
% creating &%Blueprints for &%Buildings.")


fof( miloA3100, axiom,
	(![H]: 
		(
			(
				(
					(
						p__d__instance(H,c__Human)
					)
				 &
					(
						p__hasExpertise(H,c__Architecture)
					)
				)
			)
			=>
			(
				(?[D,P,B]: 
					(
						(
							(
								p__d__instance(D,c__ContentDevelopment)
							)
						 &
							(
								p__agent(D,H)
							)
						 &
							(
								p__result(D,P)
							)
						 &
							(
								p__d__instance(P,c__Blueprint)
							)
						 &
							(
								p__represents(P,B)
							)
						 &
							(
								p__d__instance(B,c__Building)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3101, axiom,
	p__d__instance(c__Economics,c__SocialScience)
).



% ($documentation Economics EnglishLanguage "The field of economics.")


fof( miloA3102, axiom,
	p__d__instance(c__Linguistics,c__SocialScience)
).



% ($documentation Linguistics EnglishLanguage "The field of linguistics.")


fof( miloA3103, axiom,
	p__d__instance(c__Psychology,c__SocialScience)
).



% ($documentation Psychology EnglishLanguage "The field of psychology.")


fof( miloA3104, axiom,
	p__d__instance(c__Biology,c__Science)
).



% ($documentation Biology EnglishLanguage "The study of the classification, development, and 
% functioning of &%Organisms.")


fof( miloA3105, axiom,
	p__subField(c__Physiology,c__Biology)
).


fof( miloA3106, axiom,
	p__d__instance(c__Physiology,c__Science)
).



% ($documentation Physiology EnglishLanguage "The part of &%Biology dealing with the functioning of 
% &%Organisms.")


fof( miloA3107, axiom,
	p__subField(c__MedicalScience,c__Biology)
).


fof( miloA3108, axiom,
	p__d__instance(c__MedicalScience,c__Science)
).



% ($documentation MedicalScience EnglishLanguage "The field of medicine.")


fof( miloA3109, axiom,
	p__d__instance(c__Chemistry,c__Science)
).



% ($documentation Chemistry EnglishLanguage "The study of the compositions, properties, and 
% reactions of &%Substances.")


fof( miloA3110, axiom,
	p__d__instance(c__Physics,c__Science)
).



% ($documentation Physics EnglishLanguage "The study of matter and energy and their relations.")


fof( miloA3111, axiom,
	p__d__instance(c__Engineering,c__Science)
).



% ($documentation Engineering EnglishLanguage "The application of instances of &%Science to the solution 
% of practical problems, i.e. the creation of various forms of technology.")


fof( miloA3112, axiom,
	p__subField(c__Electronics,c__Physics)
).


fof( miloA3113, axiom,
	p__subField(c__Electronics,c__Engineering)
).


fof( miloA3114, axiom,
	p__d__instance(c__Electronics,c__FieldOfStudy)
).



% ($documentation Electronics EnglishLanguage "The branch of &%Physics that deals with the theory 
% and applications of electron emissions.")


fof( miloA3115, axiom,
	p__d__instance(c__Theology,c__FieldOfStudy)
).



% ($documentation Theology EnglishLanguage "The systematic study of religion.")


% 	(forall (?X)
% 		(=> 
% 			($instance ?X Theology)
% 			(exists (?Y)
% 				(and 
% 					($instance ?Y ReligiousProcess)
% 					(refers ?X ?Y)
% 				)
% 			)
% 		)
% 	)

fof( miloA3117, axiom,
	p__d__instance(c__MilitaryScience,c__FieldOfStudy)
).



% ($documentation MilitaryScience EnglishLanguage "The study of the principles of war.")


fof( miloA3118, axiom,
	p__d__instance(c__History,c__FieldOfStudy)
).



% ($documentation History EnglishLanguage "The recording and interpretation of past events involving 
% &%Humans, including political events and cultural practices.")


fof( miloA3119, axiom,
	p__d__instance(c__Philosophy,c__FieldOfStudy)
).



% ($documentation Philosophy EnglishLanguage "The study of first principles, including epistemology, 
% metaphysics, and ethics.")


fof( miloA3120, axiom,
	p__d__instance(c__FieldOfLaw,c__FieldOfStudy)
).



% ($documentation FieldOfLaw EnglishLanguage "The study of legal principles and the framework of national 
% and/or international laws.")


fof( miloA3121, axiom,
	p__subrelation(c__subField,c__subProposition)
).


fof( miloA3122, axiom,
	p__d__instance(c__subField,c__TransitiveRelation)
).


fof( miloA3123, axiom,
	p__d__instance(c__subField,c__IrreflexiveRelation)
).


% 	($domain subField 1 FieldOfStudy)

% 	($domain subField 2 FieldOfStudy)


% ($documentation subField EnglishLanguage "(&%subField ?FIELD1 ?FIELD2) means that ?FIELD1 is a proper 
% part of the &%FieldOfStudy ?FIELD2.  For example, &%Physiology is a &%subField of 
% &%Biology.")


fof( miloA3126, axiom,
	p__d__instance(c__hasExpertise,c__BinaryPredicate)
).


% 	($domain hasExpertise 1 Human)

% 	($domain hasExpertise 2 FieldOfStudy)


% ($documentation hasExpertise EnglishLanguage "(&%hasExpertise ?PERSON ?FIELD) means that ?PERSON has 
% studied the &%FieldOfStudy ?FIELD and is regarded as an expert.")


fof( miloA3129, axiom,
	(![PERSON,FIELD]: 
		(
			(
				(
					(
						p__d__instance(FIELD,c__FieldOfStudy)
					)
				 &
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__hasExpertise(PERSON,FIELD)
					)
				)
			)
			=>
			(
				(?[LEARN]: 
					(
						(
							(
								p__d__instance(LEARN,c__Learning)
							)
						 &
							(
								p__agent(LEARN,PERSON)
							)
						 &
							(
								p__realization(LEARN,FIELD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3130, axiom,
	p__d__instance(c__hasOccupation,c__BinaryPredicate)
).


% 	($domain hasOccupation 1 Human)

% 	($domainSubclass hasOccupation 2 IntentionalProcess)


% ($documentation hasOccupation EnglishLanguage "(&%hasOccupation ?PERSON ?WORK) means that ?PERSON 
% engages in activities of the class ?WORK as a means of earning a living.")


fof( miloA3133, axiom,
	(![WORK,PERSON]: 
		(
			(
				(
					(
						p__d__subclass(WORK,c__IntentionalProcess)
					)
				 &
					(
						p__d__instance(PERSON,c__Human)
					)
				 &
					(
						p__hasOccupation(PERSON,WORK)
					)
				)
			)
			=>
			(
				(?[INST]: 
					(
						(
							(
								p__d__instance(INST,WORK)
							)
						 &
							(
								p__d__instance(INST,c__Working)
							)
						 &
							(
								p__agent(INST,PERSON)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3134, axiom,
	p__d__subclass(c__Bleeding,c__AutonomicProcess)
).



% ($documentation Bleeding EnglishLanguage "The release of &%Blood from an &%Animal in response 
% to an &%Injuring of some sort.")


fof( miloA3135, axiom,
	(![BLEED]: 
		(
			(
				p__d__instance(BLEED,c__Bleeding)
			)
			=>
			(
				(?[INJURY]: 
					(
						(
							(
								p__d__instance(INJURY,c__Injuring)
							)
						 &
							(
								p__causes(INJURY,BLEED)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3136, axiom,
	(![BLEED,ANIMAL]: 
		(
			(
				(
					(
						p__d__instance(ANIMAL,c__Agent)
					)
				 &
					(
						p__d__instance(BLEED,c__Bleeding)
					)
				 &
					(
						p__experiencer(BLEED,ANIMAL)
					)
				)
			)
			=>
			(
				p__d__instance(ANIMAL,c__Animal)
			)
		)
	)
).


% 	(forall (?BLEED ?ANIMAL)
% 		(=> 
% 			(and 
% 				($instance ?BLEED Bleeding)
% 				(experiencer ?BLEED ?ANIMAL)
% 			)
% 			(exists (?BLOOD)
% 				(and 
% 					($instance ?BLOOD Blood)
% 					(holdsDuring (BeginFn (WhenFn ?BLEED)) (part ?BLOOD ?ANIMAL))
% 					(holdsDuring (EndFn (WhenFn ?BLEED)) (not (part ?BLOOD ?ANIMAL)))
% 				)
% 			)
% 		)
% 	)

fof( miloA3138, axiom,
	p__d__subclass(c__Blushing,c__AutonomicProcess)
).



% ($documentation Blushing EnglishLanguage "The process of turning red in response to a 
% stimulus which has a deep emotional effect.")


% 	(forall (?A ?B)
% 		(=> 
% 			(and 
% 				($instance ?B Blushing)
% 				(experiencer ?B ?A)
% 			)
% 			(exists (?T1 ?T2 ?S1 ?S2)
% 				(and 
% 					($instance ?S1 EmotionalState)
% 					($instance ?S2 EmotionalState)
% 					(not 
% 						(equal ?S1 ?S2)
% 					)
% 					(holdsDuring ?T1 (attribute ?A ?S1))
% 					(holdsDuring ?T2 (attribute ?A ?S2))
% 					(starts (WhenFn ?B) ?T2)
% 					(finishes (WhenFn ?B) ?T1)
% 				)
% 			)
% 		)
% 	)

fof( miloA3140, axiom,
	p__d__subclass(c__Aborting,c__Removing)
).



% ($documentation Aborting EnglishLanguage "&%Removing a human fetus from a &%Pregnant woman 
% in such a way that the fetus cannot survive.")


% 	(forall (?A ?W)
% 		(=> 
% 			(and 
% 				($instance ?A Aborting)
% 				(patient ?A ?W)
% 				($instance ?W Woman)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?A)) (attribute ?W Pregnant))
% 				(holdsDuring (EndFn (WhenFn ?A)) (not (attribute ?W Pregnant)))
% 			)
% 		)
% 	)

fof( miloA3142, axiom,
	p__d__subclass(c__ClosingContract,c__Committing)
).



% ($documentation ClosingContract EnglishLanguage "Completing a &%Contract of some sort, 
% e.g. the purchase of a house, closing a business deal, etc.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misplaced variables
% ;;
% ;;(=>
% ;;   (and
% ;;      ($instance ?CLOSE ClosingContract)
% ;;      (agent ?CLOSE ?AGENT)
% ;;      (destination ?CLOSE ?CONTRACT))
% ;;   (partyToAgreement ?CONTRACT ?AGENT))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA3143, axiom,
	(![CLOSE,AGENT,CONTRACT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(CONTRACT,c__Agreement)
					)
				 &
					(
						p__d__instance(CLOSE,c__ClosingContract)
					)
				 &
					(
						p__agent(CLOSE,AGENT)
					)
				 &
					(
						p__destination(CLOSE,CONTRACT)
					)
				)
			)
			=>
			(
				p__partyToAgreement(AGENT,CONTRACT)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moving this to FinancialOntology.kif as FinancialAccount is defined there.
% ;;(documentation financialAccount EnglishLanguage "A formal banking, brokerage, or business 
% ;;relationship established to provide for regular services, dealings, and 
% ;;other financial transactions.  (&%financialAccount ?ACCOUNT ?ORG) means that 
% ;;?ACCOUNT is a financial account opened at the &%FinancialCompany 
% ;;?ORG.")
% ;;(domain financialAccount 1 FinancialAccount)
% ;;(domain financialAccount 2 FinancialCompany)
% ;;($instance financialAccount BinaryPredicate)
% ;;(subrelation financialAccount partyToAgreement)
% )

fof( miloA3144, axiom,
	p__d__subclass(c__Opening,c__Motion)
).


% 	(relatedInternalConcept Opening Closing)


% ($documentation Opening EnglishLanguage "The &%Class of &%Processes where an aperture is 
% created in an &%Object.  Note that the aperture may be created intentionally, 
% as when one opens a door, or unintentionally, as when the ground ruptures 
% in a seismic event.") 


fof( miloA3146, axiom,
	p__d__subclass(c__Closing,c__Motion)
).



% ($documentation Closing EnglishLanguage "The &%Class of &%Processes where an aperture is 
% closed in an &%Object.")


fof( miloA3147, axiom,
	p__d__subclass(c__Diet,c__Plan)
).



% ($documentation Diet EnglishLanguage "A &%Plan regarding what one is allowed to eat.")


fof( miloA3148, axiom,
	(![D,P]: 
		(
			(
				(
					(
						p__d__instance(P,c__Process)
					)
				 &
					(
						p__d__instance(D,c__Diet)
					)
				 &
					(
						p__realization(P,D)
					)
				)
			)
			=>
			(
				(?[E]: 
					(
						(
							(
								p__subProcess(E,P)
							)
						 &
							(
								p__d__instance(E,c__Eating)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3149, axiom,
	p__d__subclass(c__PreparedFood,c__Object)
).



% ($documentation PreparedFood EnglishLanguage "&%PreparedFood refers to anything that 
% undergoes some process intended to result in an object that has &%Nutrient which can be 
% ingested by &%Animal, normally metabolized into energy and body tissue.")


% (termFormat EnglishLanguage PreparedFood "food")

% 	(forall (?X)
% 		(=> 
% 			($instance ?X PreparedFood)
% 			($instance ?X (FoodForFn Organism))
% 		)
% 	)

fof( miloA3151, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__PreparedFood)
			)
			=>
			(
				(?[PROC]: 
					(
						(
							(
								p__d__instance(PROC,c__IntentionalProcess)
							)
						 &
							(
								p__result(PROC,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3152, axiom,
	p__d__subclass(c__SolidFood,c__PreparedFood)
).



% ($documentation SolidFood EnglishLanguage "&%SolidFood refers to &%PreparedFood that 
% has &%Solid parts.")


% (termFormat EnglishLanguage SolidFood "solid food")

fof( miloA3153, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__SolidFood)
			)
			=>
			(
				(?[ING]: 
					(
						(
							(
								p__d__instance(ING,c__Object)
							)
						 &
							(
								p__part(ING,X)
							)
						 &
							(
								p__attribute(ING,c__Solid)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3154, axiom,
	p__d__subclass(c__LiquidFood,c__PreparedFood)
).



% ($documentation LiquidFood EnglishLanguage "&%LiquidFood refers to &%PreparedFood that 
% has no &%Solid parts, only &%Liquid parts, therefore this does not cover stews, root
% beer floats or other combinations of solid and liquid foods.")


% (termFormat EnglishLanguage LiquidFood "liquid food")

fof( miloA3155, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__LiquidFood)
			)
			=>
			(
				(![ING]: 
					(
						(
							~ (
								p__d__instance(ING,c__Object)
							)
						 |
							~ (
								p__part(ING,X)
							)
						 |
							~ (
								p__attribute(ING,c__Solid)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3156, axiom,
	p__d__subclass(c__Beverage,c__LiquidFood)
).


fof( miloA3157, axiom,
	p__d__subclass(c__Beverage,c__Substance)
).


fof( miloA3158, axiom,
	p__d__disjoint(c__Meat,c__Beverage)
).



% ($documentation Beverage EnglishLanguage "Any food that is ingested by &%Drinking.  
% Note that this class is disjoint &%Meat and &%FruitOrVegetable.")


fof( miloA3159, axiom,
	(![BEV]: 
		(
			(
				p__d__instance(BEV,c__Beverage)
			)
			=>
			(
				p__attribute(BEV,c__Liquid)
			)
		)
	)
).


fof( miloA3160, axiom,
	(![DRINK,BEV]: 
		(
			(
				(
					(
						p__d__instance(DRINK,c__Drinking)
					)
				 &
					(
						p__patient(DRINK,BEV)
					)
				)
			)
			=>
			(
				p__d__instance(BEV,c__Beverage)
			)
		)
	)
).


% ($comment 
% ;; KJN: Removing this as am moving in CookedAttribute from Food.kif
% ;;($subclass RawFood (FoodForFn Organism))
% ;;($subclass RawFood Object)
% ;;(documentation RawFood EnglishLanguage "Food that is not the result of &%Cooking.")
% ;;
% ;;(=>
% ;;  ($instance ?F RawFood)
% ;;  (not 
% ;;    (exists (?C)
% ;;      (and
% ;;        ($instance ?C Cooking)
% ;;        (result ?C ?F)))))
% )

fof( miloA3161, axiom,
	p__d__instance(c__CookedAttribute,c__RelationalAttribute)
).



% ($documentation CookedAttribute EnglishLanguage "&%CookedAttribute describes how something
% is a product of &%Cooking.")


% (termFormat EnglishLanguage CookedAttribute "cooked")

fof( miloA3162, axiom,
	(![FOOD]: 
		(
			(
				(
					(
						p__d__instance(FOOD,c__Object)
					)
				 &
					(
						p__attribute(FOOD,c__CookedAttribute)
					)
				)
			)
			=>
			(
				(?[PROC]: 
					(
						(
							(
								p__d__instance(PROC,c__Cooking)
							)
						 &
							(
								p__result(PROC,FOOD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3163, axiom,
	p__d__instance(c__RawAttribute,c__RelationalAttribute)
).



% ($documentation RawAttribute EnglishLanguage "&%RawAttribute describes how cooking was
% not involved in the making of something")


% (termFormat EnglishLanguage RawAttribute "raw")

% 	(forall (?FOOD)
% 		(=> 
% 			(attribute ?FOOD RawAttribute)
% 			($instance ?FOOD (FoodForFn Organism))
% 		)
% 	)

fof( miloA3165, axiom,
	(![FOOD]: 
		(
			(
				(
					(
						p__d__instance(FOOD,c__Object)
					)
				 &
					(
						p__attribute(FOOD,c__RawAttribute)
					)
				)
			)
			=>
			(
				(![PROC]: 
					(
						(
							~ (
								p__d__instance(PROC,c__Process)
							)
						 |
							~ (
								p__d__instance(PROC,c__Cooking)
							)
						 |
							~ (
								p__result(PROC,FOOD)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3166, axiom,
	p__d__subclass(c__Baking,c__Cooking)
).


fof( miloA3167, axiom,
	p__d__subclass(c__Baking,c__Heating)
).



% ($documentation Baking EnglishLanguage "Any instance of &%Cooking where the instrument 
% is an &%Oven.")


fof( miloA3168, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Baking)
			)
			=>
			(
				(?[O]: 
					(
						(
							(
								p__d__instance(O,c__Oven)
							)
						 &
							(
								p__instrument(B,O)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3169, axiom,
	p__d__subclass(c__BreadOrBiscuit,c__PreparedFood)
).



% ($documentation BreadOrBiscuit EnglishLanguage "Food that consists largely of grain flour 
% and water.  Note that this class covers crackers, cookies, as well as any 
% self-connected instance of bread, whether it is a loaf, a slice, a chunk 
% of bread, etc.")


fof( miloA3170, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__BreadOrBiscuit)
			)
			=>
			(
				(?[D,BAKE]: 
					(
						(
							(
								p__d__instance(D,c__Dough)
							)
						 &
							(
								p__d__instance(BAKE,c__Baking)
							)
						 &
							(
								p__resource(BAKE,D)
							)
						 &
							(
								p__result(BAKE,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3171, axiom,
	p__d__subclass(c__Sandwich,c__PreparedFood)
).



% ($documentation Sandwich EnglishLanguage "Any food which consists of two or more pieces 
% of bread and some sort of filling between the two pieces of bread.")


% 	(forall (?S)
% 		(=> 
% 			($instance ?S Sandwich)
% 			(exists (?B1 ?B2 ?F)
% 				(and 
% 					($instance ?B1 BreadOrBiscuit)
% 					($instance ?B2 BreadOrBiscuit)
% 					($instance ?F (FoodForFn Human))
% 					(between ?B1 ?F ?B2)
% 					(not 
% 						(equal ?B1 ?B2)
% 					)
% 					(not 
% 						(equal ?B1 ?F)
% 					)
% 					(not 
% 						(equal ?B2 ?F)
% 					)
% 					(part ?B1 ?S)
% 					(part ?B2 ?S)
% 					(part ?F ?S)
% 				)
% 			)
% 		)
% 	)

fof( miloA3173, axiom,
	p__d__subclass(c__Dough,c__PreparedFood)
).


fof( miloA3174, axiom,
	p__d__subclass(c__Dough,c__Mixture)
).



% ($documentation Dough EnglishLanguage "A &%Mixture of &%Flour, &%Water, and possibly 
% other ingredients (such as &%Butter and &%Salt), which is used in 
% making &%BreadOrBiscuits.")


fof( miloA3175, axiom,
	(![D]: 
		(
			(
				p__d__instance(D,c__Dough)
			)
			=>
			(
				(?[F,W]: 
					(
						(
							(
								p__d__instance(F,c__Flour)
							)
						 &
							(
								p__d__instance(W,c__Water)
							)
						 &
							(
								p__part(F,D)
							)
						 &
							(
								p__part(W,D)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3176, axiom,
	p__d__subclass(c__Butter,c__PreparedFood)
).


% ($comment 
% ;; KJN: Moving this to Economy.kif to remove dependencies.
% ;;($subclass Butter DairyProduct)
% )


% ($documentation Butter EnglishLanguage "An emulsion of fat which is produced by churning &%Milk.")


fof( miloA3177, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Butter)
			)
			=>
			(
				(?[C,M]: 
					(
						(
							(
								p__d__instance(C,c__Cooking)
							)
						 &
							(
								p__resource(C,M)
							)
						 &
							(
								p__d__instance(M,c__Milk)
							)
						 &
							(
								p__result(C,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3178, axiom,
	p__d__subclass(c__CerealGrain,c__Seed)
).


% ($comment 
% ;; KJN: Delete as not all CerealGrains are food for animals. 
% ;;($subclass CerealGrain (FoodForFn Animal))
% )


% ($documentation CerealGrain EnglishLanguage "Any &%Seed which is produced by the cereal grasses, 
% e.g. rice, corn, wheat, etc.")


fof( miloA3179, axiom,
	p__d__subclass(c__RiceGrain,c__CerealGrain)
).



% ($documentation RiceGrain EnglishLanguage "A &%CerealGrain which has short and long grain varieties 
% and which is usually prepared for eating by steaming.")


fof( miloA3180, axiom,
	p__d__subclass(c__WheatGrain,c__CerealGrain)
).



% ($documentation WheatGrain EnglishLanguage "A long &%CerealGrain which is produced by certain grasses and 
% which is used to make &%BreadOrBiscuits.")


fof( miloA3181, axiom,
	p__d__subclass(c__Pea,c__Seed)
).


% 	($subclass Pea (FoodForFn Animal))


% ($documentation Pea EnglishLanguage "The edible &%Seed of a pea plant.")


% ($comment 
% ;; KJN: Moving this to Economy.kif as the definition for RootVegetable is there
% ;;($subclass Radish RootVegetable)
% ;;(documentation Radish EnglishLanguage "A &%PlantRoot that is often used in salads.")
% )

fof( miloA3183, axiom,
	p__d__subclass(c__Flour,c__PreparedFood)
).


fof( miloA3184, axiom,
	p__d__subclass(c__Flour,c__Powder)
).



% ($documentation Flour EnglishLanguage "A &%Powder that is prepared from &%CerealGrain, e.g. 
% wheat flour, rice flour, etc.  Flour is most often used in the making 
% of &%BreadOrBiscuits.")


fof( miloA3185, axiom,
	(![F]: 
		(
			(
				p__d__instance(F,c__Flour)
			)
			=>
			(
				(?[P,C]: 
					(
						(
							(
								p__d__instance(P,c__IntentionalProcess)
							)
						 &
							(
								p__resource(P,C)
							)
						 &
							(
								p__d__instance(C,c__CerealGrain)
							)
						 &
							(
								p__result(P,F)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3186, axiom,
	p__d__subclass(c__Honey,c__AnimalSubstance)
).


% 	($subclass Honey (FoodForFn Animal))


% ($documentation Honey EnglishLanguage "An edible, sweet &%Substance produced by some species of 
% &%Bees.")


fof( miloA3188, axiom,
	(![H]: 
		(
			(
				p__d__instance(H,c__Honey)
			)
			=>
			(
				(?[P,B]: 
					(
						(
							(
								p__d__instance(P,c__PhysiologicProcess)
							)
						 &
							(
								p__agent(P,B)
							)
						 &
							(
								p__d__instance(B,c__Bee)
							)
						 &
							(
								p__result(P,H)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3189, axiom,
	p__d__subclass(c__Coconut,c__FruitOrVegetable)
).


% 	($subclass Coconut (FoodForFn Animal))


% ($documentation Coconut EnglishLanguage "A &%FruitOrVegetable that is produced by a type of palm 
% and has an edible white meat.")


% ($comment 
% ;; KJN: Moving this to Economy.kif as it has a wide range of Fruits discussed
% ;; under it.  This would also remove the dependency to Economy.kif
% ;;($subclass LemonFruit CitrusFruit)
% ;;($subclass LemonFruit (FoodForFn Animal))
% ;;(documentation LemonFruit EnglishLanguage "A citrus &%FruitOrVegetable that has a &%Yellow skin 
% ;;and a tart, acidic flavor.")
% ;;
% ;; KJN: Moving this to Economy.kif and changing inheritance to CitrusFruit.
% ;;($subclass OrangeFruit FruitOrVegetable)
% ;;($subclass OrangeFruit (FoodForFn Animal))
% ;;(documentation OrangeFruit EnglishLanguage "A citrus &%FruitOrVegetable that has an &%OrangeColor 
% ;;skin and a sweet, acidic flavor.")
% )

fof( miloA3191, axiom,
	p__d__subclass(c__MaizeGrain,c__CerealGrain)
).



% ($documentation MaizeGrain EnglishLanguage "A &%CerealGrain which is found on long ears of a &%Plant 
% native to the Americas.")


% ($comment 
% ;; KJN: Moving this to Economy.kif as definition for GroceryProduce is there.
% ;;($subclass MaizeGrain GroceryProduce)
% )

fof( miloA3192, axiom,
	p__d__subclass(c__SoupStock,c__PreparedFood)
).



% ($documentation SoupStock EnglishLanguage "Food which is prepared by reducing &%Meat 
% and/or &%FruitOrVegetables to a translucent broth which can be used as 
% a base for soups or sauces.") 


fof( miloA3193, axiom,
	p__d__subclass(c__Coffee,c__Beverage)
).


fof( miloA3194, axiom,
	p__d__subclass(c__Coffee,c__PreparedFood)
).



% ($documentation Coffee EnglishLanguage "A &%Beverage which is prepared by infusing ground, 
% roasted coffee beans into hot water.")


fof( miloA3195, axiom,
	p__d__subclass(c__Apple,c__FruitOrVegetable)
).


% 	($subclass Apple (FoodForFn Animal))


% ($documentation Apple EnglishLanguage "A &%FruitOrVegetable that has a tart to sweet taste and 
% a spherical shape.")


fof( miloA3197, axiom,
	p__d__subclass(c__DateFruit,c__FruitOrVegetable)
).


% 	($subclass DateFruit (FoodForFn Animal))


% ($documentation DateFruit EnglishLanguage "A &%FruitOrVegetable that is produced by the date 
% palm.")


fof( miloA3199, axiom,
	p__d__subclass(c__PearFruit,c__FruitOrVegetable)
).


% 	($subclass PearFruit (FoodForFn Animal))


% ($documentation PearFruit EnglishLanguage "A &%FruitOrVegetable that has a thick skin and the 
% shape of a tear drop.")


fof( miloA3201, axiom,
	p__d__subclass(c__Avocado,c__FruitOrVegetable)
).


% 	($subclass Avocado (FoodForFn Animal))


% ($documentation Avocado EnglishLanguage "A &%FruitOrVegetable that is shaped like a pear and 
% has a dark green skin and a rich meat.")


fof( miloA3203, axiom,
	p__d__subclass(c__Ion,c__PureSubstance)
).



% ($documentation Ion EnglishLanguage "An electronically charged &%Atom or &%Molecule.  In 
% other words, a &%PureSubstance that has lost one of its &%Electrons.")


fof( miloA3204, axiom,
	p__d__subclass(c__FreeAtom,c__Atom)
).



% ($documentation FreeAtom EnglishLanguage "Any &%Atom which is not part of a &%Molecule.")


fof( miloA3205, axiom,
	(![A]: 
		(
			(
				p__d__instance(A,c__FreeAtom)
			)
			=>
			(
				(![M]: 
					(
						(
							~ (
								p__d__instance(M,c__Object)
							)
						 |
							~ (
								p__d__instance(M,c__Molecule)
							)
						 |
							~ (
								p__part(A,M)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3206, axiom,
	p__d__instance(c__protonNumber,c__BinaryPredicate)
).


fof( miloA3207, axiom,
	p__d__instance(c__protonNumber,c__SingleValuedRelation)
).


fof( miloA3208, axiom,
	p__d__instance(c__protonNumber,c__TotalValuedRelation)
).


% 	($domain protonNumber 1 PureSubstance)

% 	($domain protonNumber 2 PositiveInteger)


% ($documentation protonNumber EnglishLanguage "(&%protonNumber ?SUBSTANCE ?NUMBER) means that 
% the &%PureSubstance ?SUBSTANCE has the number of &%Protons ?NUMBER.")


% 	(forall (?SUBSTANCE ?NUMBER ?ATOM ?PROTON)
% 		(=> 
% 			(protonNumber ?SUBSTANCE ?NUMBER)
% 			(=> 
% 				(and 
% 					(part ?ATOM ?SUBSTANCE)
% 					(or 
% 						($instance ?ATOM Atom)
% 						($instance ?ATOM Molecule)
% 					)
% 				)
% 				(equal ?NUMBER (CardinalityFn (KappaFn ?PROTON (and ([|] (part ?PROTON ?ATOM) ([|] ($instance ?PROTON Proton) []))))))
% 			)
% 		)
% 	)

fof( miloA3212, axiom,
	p__d__instance(c__electronNumber,c__BinaryPredicate)
).


fof( miloA3213, axiom,
	p__d__instance(c__electronNumber,c__SingleValuedRelation)
).


fof( miloA3214, axiom,
	p__d__instance(c__electronNumber,c__TotalValuedRelation)
).


% 	($domain electronNumber 1 PureSubstance)

% 	($domain electronNumber 2 PositiveInteger)


% ($documentation electronNumber EnglishLanguage "(&%electronNumber ?SUBSTANCE ?NUMBER) means that 
% the &%PureSubstance ?SUBSTANCE has the number of &%Electrons ?NUMBER.")


% 	(forall (?TYPE ?SUBSTANCE ?NUMBER ?ATOM ?ELECTRON)
% 		(=> 
% 			(electronNumber ?TYPE ?NUMBER)
% 			(=> 
% 				(and 
% 					(part ?ATOM ?SUBSTANCE)
% 					(or 
% 						($instance ?ATOM Atom)
% 						($instance ?ATOM Molecule)
% 					)
% 				)
% 				(equal ?NUMBER (CardinalityFn (KappaFn ?ELECTRON (and ([|] (part ?ELECTRON ?ATOM) ([|] ($instance ?ELECTRON Electron) []))))))
% 			)
% 		)
% 	)

fof( miloA3218, axiom,
	p__d__subclass(c__AtomicGroup,c__CompoundSubstance)
).



% ($documentation AtomicGroup EnglishLanguage "Two or more &%Atoms that are bound together and 
% comprise part of a &%Molecule.")


fof( miloA3219, axiom,
	(![G]: 
		(
			(
				p__d__instance(G,c__AtomicGroup)
			)
			=>
			(
				(?[ATOM1,ATOM2]: 
					(
						(
							(
								p__d__instance(ATOM1,c__Atom)
							)
						 &
							(
								p__d__instance(ATOM2,c__Atom)
							)
						 &
							(
								~ (
									( ATOM1 = ATOM2 )
								)
							)
						 &
							(
								p__part(ATOM1,G)
							)
						 &
							(
								p__part(ATOM2,G)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3220, axiom,
	(![G]: 
		(
			(
				p__d__instance(G,c__AtomicGroup)
			)
			=>
			(
				(?[M]: 
					(
						(
							(
								p__d__instance(M,c__Molecule)
							)
						 &
							(
								p__part(G,M)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3221, axiom,
	p__d__subclass(c__Ambush,c__Maneuver)
).



% ($documentation Ambush EnglishLanguage "Any &%Maneuver in a &%ViolentContest where one 
% &%contestParticipant attempts to conceal himself from another 
% contestParticipant so that he can &%Attack the other 
% &%contestParticipant.") 


% 	(forall (?AMBUSH ?ATTACK ?AG)
% 		(=> 
% 			(and 
% 				($instance ?AMBUSH Ambush)
% 				(agent ?AMBUSH ?AG)
% 			)
% 			(exists (?C)
% 				(and 
% 					($instance ?C Concealing)
% 					(subProcess ?C ?AMBUSH)
% 					(hasPurpose ?C (exists ([|] ?ATTACK []) (and ([|] ($instance ?ATTACK Attack) ([|] (agent ?ATTACK ?AG) [])))))
% 				)
% 			)
% 		)
% 	)

fof( miloA3223, axiom,
	p__d__subclass(c__Blockade,c__Maneuver)
).



% ($documentation Blockade EnglishLanguage "Any &%Maneuver in a &%Contest where one 
% &%contestParticipant attempts to deny access to something that is wanted 
% by another &%contestParticipant.") 


% 	(forall (?B ?A1 ?I ?C)
% 		(=> 
% 			(and 
% 				($instance ?B Blockade)
% 				($instance ?C Contest)
% 				(subProcess ?B ?C)
% 				(contestParticipant ?C ?A1)
% 				(agent ?B ?A1)
% 			)
% 			(exists (?C1 ?A2)
% 				(and 
% 					(prevents ?C1 Translocation)
% 					($instance ?B ?C1)
% 					(contestParticipant ?C ?A2)
% 					(not 
% 						(equal ?A1 ?A2)
% 					)
% 					(desires ?A2 (exists ([|] ?I []) (and ([|] ($instance ?I ?C1) ([|] (agent ?I ?A1) ([|] (subProcess ?I ?C) []))))))
% 				)
% 			)
% 		)
% 	)

fof( miloA3225, axiom,
	p__d__subclass(c__MilitaryManeuver,c__Maneuver)
).



% ($documentation MilitaryManeuver EnglishLanguage "Any &%Maneuver which takes place in a &%Battle 
% and which is intended to secure a tactical advantage for one of the agents of 
% the &%Battle.")


fof( miloA3226, axiom,
	(![M]: 
		(
			(
				p__d__instance(M,c__MilitaryManeuver)
			)
			=>
			(
				(?[B]: 
					(
						(
							(
								p__d__instance(B,c__Battle)
							)
						 &
							(
								p__subProcess(M,B)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3227, axiom,
	p__d__subclass(c__Fire,c__Combustion)
).



% ($documentation Fire EnglishLanguage "&%Fire is the subclass of &%Combustion events in 
% which flames are present.  Fires are slower combustion processes than 
% explosions, though some fires may include explosive episodes.")


% ($comment 
% ;; KJN: With the inclusion of Fire, will be subclassing Arson from Fire instead of Combustion            
% ;;($subclass Arson Combustion)
% )

fof( miloA3228, axiom,
	p__d__subclass(c__Arson,c__Fire)
).


fof( miloA3229, axiom,
	p__d__subclass(c__Arson,c__Destruction)
).



% ($documentation Arson EnglishLanguage "An act where an agent sets something which it does not possess 
% on fire in order to destroy it or its contents.")


fof( miloA3230, axiom,
	p__d__subclass(c__Bombing,c__Destruction)
).



% ($documentation Bombing EnglishLanguage "An act of &%Destruction where the thing destroyed
% is destroyed by means of an explosive device.")


fof( miloA3231, axiom,
	p__d__subclass(c__Bomb,c__Weapon)
).


fof( miloA3232, axiom,
	p__d__subclass(c__Bomb,c__ExplosiveDevice)
).



% ($documentation Bomb EnglishLanguage "A weapon that explodes in order to cause damage.")


fof( miloA3233, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Bombing)
			)
			=>
			(
				(?[BOMB]: 
					(
						(
							(
								p__d__instance(BOMB,c__Bomb)
							)
						 &
							(
								p__instrument(X,BOMB)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3234, axiom,
	p__d__subclass(c__CarBombing,c__Bombing)
).



% ($documentation CarBombing EnglishLanguage "A car bombing is an attack in which a car is
% used as the delivery mechanism for a bomb.  The car is usually destroyed
% in the blast if the bomb detonates successfully.")


fof( miloA3235, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__CarBombing)
			)
			=>
			(
				(?[BOMB,CAR]: 
					(
						(
							(
								p__d__instance(BOMB,c__Bomb)
							)
						 &
							(
								p__d__instance(CAR,c__TransportationDevice)
							)
						 &
							(
								p__instrument(X,CAR)
							)
						 &
							(
								p__instrument(X,BOMB)
							)
						 &
							(
								p__connected(CAR,BOMB)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3236, axiom,
	p__d__subclass(c__ChemicalAttack,c__ViolentContest)
).



% ($documentation ChemicalAttack EnglishLanguage "An attack against people or property in which
% a chemical agent is used as the active ingredient of the attack.")


fof( miloA3237, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__ChemicalAttack)
			)
			=>
			(
				(?[CHEM]: 
					(
						(
							(
								p__d__instance(CHEM,c__Substance)
							)
						 &
							(
								p__instrument(X,CHEM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3238, axiom,
	p__d__subclass(c__HandgrenadeAttack,c__Bombing)
).



% ($documentation HandgrenadeAttack EnglishLanguage "An attack in which a &%HandGrenade is 
% employed as an explosive device for the purpose of &%Destruction.
% A case in which a hand grenade is used as a blunt striking object in
% an attack would not be in this class.")


fof( miloA3239, axiom,
	p__d__subclass(c__HandGrenade,c__Bomb)
).



% ($documentation HandGrenade EnglishLanguage "A hand grenade is a small explosive device
% with a simple trigger mechanism, usually lasting a few seconds, designed
% to be propelled by a human to its target.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: wrongly quantified variables
% ;;
% ;;(=>
% ;;  ($instance ?X HandGrenade)
% ;;  (and
% ;;    (measure ?X (MeasureFn ?N PoundMass))
% ;;    (lessThan ?N 10)))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA3240, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__HandGrenade)
			)
			=>
			(
				(?[N]: 
					(
						(
							(
								p__d__instance(N,c__RealNumber)
							)
						 &
							(
								p__measure(X,f__MeasureFn2(N,c__PoundMass))
							)
						 &
							(
								p__lessThan(N,c__10)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3241, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__HandgrenadeAttack)
			)
			=>
			(
				(?[HG]: 
					(
						(
							(
								p__d__instance(HG,c__HandGrenade)
							)
						 &
							(
								p__instrument(X,HG)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3242, axiom,
	p__d__subclass(c__Hijacking,c__Robbing)
).



% ($documentation Hijacking EnglishLanguage "&%Robbing a &%Vehicle and then driving
% or piloting it away.")


fof( miloA3243, axiom,
	(![H]: 
		(
			(
				p__d__instance(H,c__Hijacking)
			)
			=>
			(
				(?[V]: 
					(
						(
							(
								p__d__instance(V,c__Vehicle)
							)
						 &
							(
								p__patient(H,V)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3244, axiom,
	(![H]: 
		(
			(
				p__d__instance(H,c__Hijacking)
			)
			=>
			(
				(?[D]: 
					(
						(
							(
								p__subProcess(D,H)
							)
						 &
							(
								p__d__instance(D,c__Driving)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?X)
% 		(=> 
% 			($instance ?X Hijacking)
% 			(exists (?V ?A)
% 				(and 
% 					(agent ?X ?A)
% 					($instance ?V TransportationDevice)
% 					(holdsDuring (ImmediatePastFn (WhenFn ?X)) (not (possesses ?A ?V)))
% 					(holdsDuring (WhenFn ?X) (possesses ?A ?V))
% 				)
% 			)
% 		)
% 	)

fof( miloA3246, axiom,
	p__d__subclass(c__HostageTaking,c__UnilateralGetting)
).



% ($documentation HostageTaking EnglishLanguage "An event in which one agent keeps another
% against his or her will, in order to force it or a third agent to 
% accede to some demand.  The hostages are typically kept in the place
% where they are first taken hostage, in contrast to a &%Kidnapping.
% Hostage taking often involves a number of people (although it may be
% just one), again, in contrast to a &%Kidnapping.")


fof( miloA3247, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__HostageTaking)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__SentientAgent)
							)
						 &
							(
								p__patient(X,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3248, axiom,
	p__d__subclass(c__IncendiaryDeviceAttack,c__Combustion)
).


fof( miloA3249, axiom,
	p__d__subclass(c__IncendiaryDeviceAttack,c__ViolentContest)
).



% ($documentation IncendiaryDeviceAttack EnglishLanguage "An attack in which an agent
% uses a device which causes fire in order to destroy life or property.")


fof( miloA3250, axiom,
	p__d__subclass(c__Infiltration,c__JoiningAnOrganization)
).



% ($documentation Infiltration EnglishLanguage "An event in which an agent joins an
% organization under false pretenses.  The objective of such an act
% is often to gather information helpful to a rival organization.")


fof( miloA3251, axiom,
	p__d__subclass(c__Kidnapping,c__Robbing)
).



% ($documentation Kidnapping EnglishLanguage "An event in which one agent keeps another
% against his or her will, in order to force it or a third agent to 
% accede to some demand.  The kidnapped party is normally removed from
% the location where first attacked.  In contrast to a &%HostageTaking,
% a kidnapping normally involves an attack on one, or a very small 
% number of people, such as a couple.")


fof( miloA3252, axiom,
	(![X,G,N]: 
		(
			(
				(
					(
						p__d__instance(N,c__Integer)
					)
				 &
					(
						p__d__instance(X,c__Kidnapping)
					)
				 &
					(
						p__d__instance(G,c__GroupOfPeople)
					)
				 &
					(
						p__memberCount(G,N)
					)
				 &
					(
						p__patient(X,G)
					)
				)
			)
			=>
			(
				p__lessThan(N,c__3)
			)
		)
	)
).


% 	(forall (?X)
% 		(=> 
% 			($instance ?X Kidnapping)
% 			(exists (?A ?LOC1 ?LOC2)
% 				(and 
% 					($instance ?A SentientAgent)
% 					($instance ?LOC1 GeographicArea)
% 					($instance ?LOC2 GeographicArea)
% 					(not 
% 						(equal ?LOC1 ?LOC2)
% 					)
% 					(holdsDuring (ImmediatePastFn (WhenFn ?X)) (located ?A ?LOC1))
% 					(holdsDuring (WhenFn ?X) (located ?A ?LOC2))
% 				)
% 			)
% 		)
% 	)

fof( miloA3254, axiom,
	p__d__subclass(c__KnifeAttack,c__ViolentContest)
).



% ($documentation KnifeAttack EnglishLanguage "An attack in which a knife is used.")


fof( miloA3255, axiom,
	p__d__subclass(c__Knife,c__CuttingDevice)
).



% ($documentation Knife EnglishLanguage "A sharp object used for cutting.  The object must 
% have at least single blade or major protrusion which may be sharp at its 
% end as well.  It may be sharp on both sides, or just one.  Unlike an awl 
% it has a sharp edge rather than a point.  Unlike scissors, it is a single 
% blade without additional articulated parts.  Unlike an axe, a knife is 
% well-designed for slicing rather than chopping, although a heavy knife 
% such as a broadsword can also be used for chopping, whereas a non-knife is 
% not well designed for slicing meat for example.  A knife can be small like 
% a pocket knife, or large like a two-handed broadsword.  A knife may also 
% include other protrusions such as in the split swords and trident-like 
% objects (that also possess a long sharp edge) in Chinese weaponry.") 


fof( miloA3256, axiom,
	p__d__subclass(c__CuttingDevice,c__Device)
).



% ($documentation CuttingDevice EnglishLanguage "Any &%Device whose purpose is &%Cutting something 
% else.  This class covers knives of all times, axes, saws, razors, chisels etc.")


% 	(forall (?X)
% 		(=> 
% 			($instance ?X CuttingDevice)
% 			(capability Cutting ?X instrument)
% 		)
% 	)

fof( miloA3258, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__KnifeAttack)
			)
			=>
			(
				(?[HG]: 
					(
						(
							(
								p__d__instance(HG,c__Knife)
							)
						 &
							(
								p__instrument(X,HG)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3259, axiom,
	p__d__subclass(c__Blade,c__CuttingDevice)
).



% ($documentation Blade EnglishLanguage "The &%Flat cutting part of a &%CuttingDevice.")


fof( miloA3260, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Blade)
			)
			=>
			(
				(?[CD]: 
					(
						(
							(
								p__d__instance(CD,c__CuttingDevice)
							)
						 &
							(
								p__part(B,CD)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.5)
% ;; Detected using automatic check:
% ;; - instrument is subrelation of patient
% ;; - meetsSpatially is irreflexive
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?B Blade)
% ;;    ($instance ?CUT Cutting)
% ;;    ($instance ?OBJ Object)
% ;;    (instrument ?CUT ?B)
% ;;    (patient ?CUT ?OBJ))
% ;;  (meetsSpatially ?B ?OBJ))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.5)
% )

fof( miloA3261, axiom,
	(![CUT,B,OBJ]: 
		(
			(
				(
					(
						p__d__instance(B,c__Blade)
					)
				 &
					(
						p__d__instance(CUT,c__Cutting)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__instrument(CUT,B)
					)
				 &
					(
						p__patient(CUT,OBJ)
					)
				 &
					(
						~ (
							( B = OBJ )
						)
					)
				)
			)
			=>
			(
				p__meetsSpatially(B,OBJ)
			)
		)
	)
).


fof( miloA3262, axiom,
	p__d__subclass(c__LetterBombAttack,c__Bombing)
).



% ($documentation LetterBombAttack EnglishLanguage "An attack with a bomb that is
% concealed in a letter or package, which is typically designed to 
% explode upon opening.")


fof( miloA3263, axiom,
	p__d__subclass(c__Lynching,c__Killing)
).



% ($documentation Lynching EnglishLanguage "A lynching is a form of &%Killing conducted under 
% a thin guise of legitimacy by a vigilante group.  It may be a purge of an 
% individual from the group who is perceived to have gone astray, or it may 
% be the summary execution of an individual outside the group that the group 
% has determined has violated some law or code, either of the group, or the 
% larger society.  A lynching is distinguished from a legal execution in 
% that the laws of a government are not followed in carrying out the 
% killing.  A lynching is distinguished from a murder in that there is the 
% pretense of some process carried out by a group in the name of their own 
% group or a higher power.") 


fof( miloA3264, axiom,
	p__d__subclass(c__MortarAttack,c__Bombing)
).



% ($documentation MortarAttack EnglishLanguage "An attack in which a &%Mortar weapon is
% used.")


fof( miloA3265, axiom,
	p__d__subclass(c__Mortar,c__Weapon)
).



% ($documentation Mortar EnglishLanguage "A mortar is a bomb that is shot at a location.  A 
% howitzer is a weapon that fires mortars.  The mortar may not include the 
% propelling charge that provides the motive force for delivering it to its 
% target, which distinguishes it from a rocket.  A mortar is distinguished 
% from other bombs in that it is propelled rather than exploded in place, or 
% dropped, or propelled by human power.") 


fof( miloA3266, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__MortarAttack)
			)
			=>
			(
				(?[MA]: 
					(
						(
							(
								p__d__instance(MA,c__Mortar)
							)
						 &
							(
								p__instrument(X,MA)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3267, axiom,
	p__d__subclass(c__RocketMissileAttack,c__Bombing)
).



% ($documentation RocketMissileAttack EnglishLanguage "An attack in which a rocket or
% missile is used.")


fof( miloA3268, axiom,
	p__d__subclass(c__Rocket,c__Projectile)
).


fof( miloA3269, axiom,
	p__d__subclass(c__Stoning,c__ViolentContest)
).



% ($documentation Stoning EnglishLanguage "An act where a victim or victims is attacked
% with stones.  The stones may either be placed on top of a victim in
% order to cause death by pressure and suffocation, in which case the act
% is typically part of a ritualized legal sentence, or where the victim
% is pelted with stones causing injury or death by trauma.  The intent
% of such an act is usually the death of the victim.")


fof( miloA3270, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Stoning)
			)
			=>
			(
				(?[ST]: 
					(
						(
							(
								p__d__instance(ST,c__Rock)
							)
						 &
							(
								p__instrument(X,ST)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moving this to Geography.kif as Rock is defined there.
% ;;($subclass Marble Rock)
% ;;(documentation Marble EnglishLanguage "A metamorphic &%Rock that is used in &%Constructing 
% ;;and in creating &%Sculptures.")
% )

fof( miloA3271, axiom,
	p__d__subclass(c__SuicideBombing,c__Bombing)
).


fof( miloA3272, axiom,
	p__d__subclass(c__SuicideBombing,c__Killing)
).



% ($documentation SuicideBombing EnglishLanguage "A bomb attack in which the bomber
% intends to blow himself up during the course of the attack.  The bomber
% is the delivery mechanism for the explosive and the bomb is typically
% in close contact with the bomber, such as being strapped around his
% torso.  This action is distinguished from actions in which the bomber
% merely happens to be blown up by his own bomb in that the bomber
% knows that he is committing suicide.")


% 	(forall (?X)
% 		(=> 
% 			($instance ?X SuicideBombing)
% 			(exists (?A)
% 				(and 
% 					(agent ?X ?A)
% 					(holdsDuring (FutureFn (WhenFn ?X)) (attribute ?A Dead))
% 				)
% 			)
% 		)
% 	)

% 	(forall (?X ?P)
% 		(=> 
% 			(and 
% 				($instance ?X SuicideBombing)
% 				(agent ?X ?P)
% 			)
% 			(believes ?P (holdsDuring (FutureFn (WhenFn ?X)) (attribute ?P Dead)))
% 		)
% 	)

fof( miloA3275, axiom,
	p__d__subclass(c__Vandalism,c__Destruction)
).



% ($documentation Vandalism EnglishLanguage "An event where the objective of the agent
% is to damage or destroy some property of another agent.  This is
% distinguished from acts where the prime objective is damage or loss
% of life of another agent.")


fof( miloA3276, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Vandalism)
			)
			=>
			(
				(![A]: 
					(
						(
							~ (
								p__d__instance(A,c__Agent)
							)
						 |
							~ (
								p__patient(X,A)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3277, axiom,
	p__d__subclass(c__VehicleAttack,c__ViolentContest)
).



% ($documentation VehicleAttack EnglishLanguage "An event in which a vehicle is used
% by an agent in order to inflict injury, death or damage to people
% or property.")


fof( miloA3278, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__VehicleAttack)
			)
			=>
			(
				(?[V]: 
					(
						(
							(
								p__d__instance(V,c__TransportationDevice)
							)
						 &
							(
								p__instrument(X,V)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moving this to Geography.kif as Cave is defined there.      
% ;;($subclass Burrow Cave)
% ;;(documentation Burrow EnglishLanguage "A small &%Cave created by an &%Animal for the purpose 
% ;;of inhabiting it.")
% ;;(=>
% ;;  ($instance ?B Burrow)
% ;;  (exists (?P ?A)
% ;;    (and
% ;;      ($instance ?P Process)
% ;;      (agent ?P ?A)
% ;;      ($instance ?A Animal)
% ;;      (not 
% ;;        ($instance ?A Human))
% ;;      (result ?P ?B))))
% ;;
% ;;(=>
% ;;  ($instance ?B Burrow)
% ;;  (exists (?A)
% ;;    (hasPurpose ?B
% ;;      (inhabits ?A ?B))))
% )

fof( miloA3279, axiom,
	p__d__instance(c__BusinessPerson,c__OccupationalRole)
).



% ($documentation BusinessPerson EnglishLanguage "Any of a class of people in a professional 
% occupation such as banking, finance, management, or engineering.  This is 
% distinguished from blue collar jobs that primarily involve manual labor 
% rather than thought as the effort expended to derive remuneration.  It is 
% also distinguished from professions that may be outwardly similar but are 
% done in a non-profit organization.") 


fof( miloA3280, axiom,
	p__subAttribute(c__BusinessExecutive,c__BusinessPerson)
).



% ($documentation BusinessExecutive EnglishLanguage "&%BusinessExecutive refers to a person
% responsible for the management of a business")


% (termFormat EnglishLanguage BusinessExecutive "business executive")

fof( miloA3281, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Agent)
					)
				 &
					(
						p__attribute(X,c__BusinessExecutive)
					)
				)
			)
			=>
			(
				(?[BUSINESS,MANAGE]: 
					(
						(
							(
								p__d__instance(MANAGE,c__Managing)
							)
						 &
							(
								p__d__instance(BUSINESS,c__Organization)
							)
						 &
							(
								p__patient(MANAGE,BUSINESS)
							)
						 &
							(
								p__agent(MANAGE,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3282, axiom,
	p__d__instance(c__Celebrity,c__SocialRole)
).



% ($documentation Celebrity EnglishLanguage "Anyone who is known by a large number of people,
% either explicitly by name, or by action.")


% 	(forall (?A ?P ?X)
% 		(=> 
% 			(attribute ?X Celebrity)
% 			(greaterThan (CardinalityFn (KappaFn ?A (knows ?A (exists ([|] ?P []) (equal ?P ?X))))) 1000)
% 		)
% 	)

fof( miloA3284, axiom,
	p__d__instance(c__Knight,c__SocialRole)
).



% ($documentation Knight EnglishLanguage "A &%SocialRole that is assigned by the 
% United Kingdom to persons for reasons of personal merit.")


fof( miloA3285, axiom,
	p__d__instance(c__Musician,c__SocialRole)
).



% ($documentation Musician EnglishLanguage "A Musician is someone who is capable of giving a &%MusicalPerformance.
% This includes amateurs and others who don't formally make a living at the activity
% or choose it as a profession.")


fof( miloA3286, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Agent)
					)
				 &
					(
						p__attribute(X,c__Musician)
					)
				)
			)
			=>
			(
				p__hasSkill(c__MusicalPerformance,X)
			)
		)
	)
).


fof( miloA3287, axiom,
	p__d__instance(c__Veteran,c__SocialRole)
).



% ($documentation Veteran EnglishLanguage "The &%Attribute that applies to someone who was a 
% &%Soldier at one time, but is not currently a &%Soldier.")


% 	(forall (?T1 ?H)
% 		(=> 
% 			(holdsDuring ?T1 (attribute ?H Veteran))
% 			(exists (?T2 ?P)
% 				(and 
% 					(temporalPart ?T2 (PastFn (WhenFn ?T1)))
% 					($instance ?P Soldier)
% 					(holdsDuring ?T2 (attribute ?H ?P))
% 					(not 
% 						(holdsDuring ?T1 (attribute ?H ?P))
% 					)
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; KJN: Moving this to Geography.kif to remove dependencies    
% ;;($subclass Checkpoint GeographicArea)
% ;;(documentation Checkpoint EnglishLanguage "An area on or very near a border, usually along 
% ;;a road connecting two regions, where &%MilitaryPersons or &%Police 
% ;;restrict the flow of traffic in order to extract tarrifs, deny movement to 
% ;;certain kinds of people or goods, or other enforement actions.  Because of 
% ;;the power relationship involved, such areas are often the site of illegal 
% ;;activities conducted by the officials in order to extract favors or 
% ;;bribes.") 
% ;;
% ;;(=>
% ;;  ($instance ?X Checkpoint)
% ;;  (or
% ;;    (exists (?ROAD)
% ;;      (and
% ;;        ($instance ?ROAD Road)
% ;;        (orientation ?ROAD ?X Near)))
% ;;    (exists (?REG1 ?REG2)
% ;;      (orientation (BorderFn ?REG1 ?REG2) ?X Near)))) 
% )

fof( miloA3289, axiom,
	p__d__subclass(c__Road,c__Region)
).


fof( miloA3290, axiom,
	p__d__subclass(c__Road,c__Roadway)
).



% ($documentation Road EnglishLanguage "A path along which vehicles travel.  It is typically,
% although not necessarily, paved and intended for cars.")


% 	(forall (?X ?EV ?VEH)
% 		(=> 
% 			($instance ?X Road)
% 			(hasPurpose ?X (exists ([|] ?EV ([|] ?VEH [])) (and ([|] ($instance ?EV Transportation) ([|] (eventLocated ?EV ?X) ([|] ($instance ?VEH LandVehicle) ([|] (instrument ?EV ?VEH) [])))))))
% 		)
% 	)

fof( miloA3292, axiom,
	p__contraryAttribute2(c__Civilian,c__MilitaryPerson)
).


fof( miloA3293, axiom,
	p__d__subclass(c__OccupationalRole,c__Position)
).



% ($documentation OccupationalRole EnglishLanguage "A &%Role of a &%Human in a &%OrganizationalProcess.")


% ($comment 
% ;; NS: edit.
% )

fof( miloA3294, axiom,
	p__d__instance(c__Civilian,c__SocialRole)
).



% ($documentation Civilian EnglishLanguage "Someone who is not a member of an active
% &%MilitaryOrganization.")


% 	(forall (?T1 ?X)
% 		(=> 
% 			(holdsDuring ?T1 (attribute ?X Civilian))
% 			(holdsDuring ?T1 (not (attribute ?X MilitaryPerson)))
% 		)
% 	)

fof( miloA3296, axiom,
	p__d__instance(c__Widowed,c__SocialRole)
).



% ($documentation Widowed EnglishLanguage "The &%Attribute that applies to someone who was 
% married to someone who has died, and who has not remarried.")


% 	(forall (?NOW ?P)
% 		(=> 
% 			(holdsDuring ?NOW (attribute ?P Widowed))
% 			(and 
% 				(exists (?BEFORE ?SPOUSE)
% 					(and 
% 						(earlier ?BEFORE ?NOW)
% 						(holdsDuring ?BEFORE (spouse ?SPOUSE ?P))
% 						(holdsDuring ?NOW (attribute ?SPOUSE Dead))
% 					)
% 				)
% 				(not 
% 					(exists (?OTHER)
% 						(holdsDuring ?NOW (spouse ?OTHER ?P))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA3298, axiom,
	p__d__subclass(c__Convoy,c__Collection)
).



% ($documentation Convoy EnglishLanguage "A group of vehicles that all are being driven
% in formation (e.g., lines, rows, columns) to the same destination.
% That destination may be an intermediate destination on the way to a
% final destination for some of the vehicles however.  This is
% distinguished from vehicles that have no common purpose, such as
% traffic on a freeway.  This includes cases where some of the agents
% driving the vehicles intend to reach a point but fail to do so.") 


% ($comment 
% ;; Every convoy consists of at least two vehicles.  Note that, by
% ;; definition, the members of a Collection can change over time,
% ;; so a Convoy could still be considered the "same" Convoy even
% ;; if it has different members at different times.  The rule
% ;; below states that for any given Convoy, there exist at least
% ;; two Vehicles, and a TimeInterval during which the Vehicles are
% ;; members of the Convoy.
% )

% 	(forall (?C)
% 		(=> 
% 			($instance ?C Convoy)
% 			(exists (?V1 ?V2 ?TIME)
% 				(and 
% 					(not 
% 						(equal ?V1 ?V2)
% 					)
% 					($instance ?V1 Vehicle)
% 					($instance ?V2 Vehicle)
% 					($instance ?TIME TimeInterval)
% 					(temporalPart ?TIME (WhenFn ?C))
% 					(holdsDuring ?TIME (and ([|] (member ?V1 ?C) ([|] (member ?V2 ?C) []))))
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; For every Vehicle that is a member of a Convoy, there exists
% ;; some Driving in which the Vehicle is the object driven (the
% ;; patient) and which temporally overlaps the Convoy. This is
% ;; intentionally weak, because (a) the vehicles in a convoy might
% ;; be parked, not moving (being driven), but the convoy would
% ;; nevertheless still exist with the vehicles stationary and (b)
% ;; a vehicle might join or leave a convoy, in which case the
% ;; driving event in which it is being driven only partially
% ;; overlaps the temporal extent of the convoy itself.
% )

fof( miloA3300, axiom,
	(![C,VEH]: 
		(
			(
				(
					(
						p__d__instance(VEH,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(C,c__Convoy)
					)
				 &
					(
						p__member(VEH,C)
					)
				)
			)
			=>
			(
				(?[DRIVE]: 
					(
						(
							(
								p__d__instance(DRIVE,c__Driving)
							)
						 &
							(
								p__overlapsTemporally(f__WhenFn1(DRIVE),f__WhenFn1(C))
							)
						 &
							(
								p__patient(DRIVE,VEH)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; Convoy needs more work.  A Convoy is analogous to a flock
% ;; of birds.  When the birds are not in flight, do they still
% ;; constitute a flock?  (Yes, if they stay together.)  When some
% ;; birds leave or join the flock, is it still "the same" flock?
% ;; (Yes, according to the SUMO definition of Collection.)  We
% ;; still need to capture the notion that the members of a Convoy
% ;; move in formation.  The rule below needs to be expanded with
% ;; assertions describing what LineFormation means for the members
% ;; of a Convoy.  Also, we have not represented the notion that
% ;; the members of a Convoy, when moving, are heading toward a
% ;; common destination.
% )

fof( miloA3301, axiom,
	(![C]: 
		(
			(
				p__d__instance(C,c__Convoy)
			)
			=>
			(
				p__attribute(C,c__LineFormation)
			)
		)
	)
).


fof( miloA3302, axiom,
	p__d__instance(c__Diplomat,c__OccupationalRole)
).


fof( miloA3303, axiom,
	p__subAttribute(c__Diplomat,c__GovernmentPerson)
).



% ($documentation Diplomat EnglishLanguage "A person who works as a
% facilitator for communication between countries, in the official
% employ of one of the countries.")


fof( miloA3304, axiom,
	p__d__instance(c__Dissident,c__SocialRole)
).



% ($documentation Dissident EnglishLanguage "Someone who is opposed
% to the leadership of a particular country.  Typically, a
% dissident suffers punishment at the hands of the country whose
% leadership he is opposing.")


fof( miloA3305, axiom,
	p__d__subclass(c__EmbassyBuilding,c__GovernmentBuilding)
).



% ($documentation EmbassyBuilding EnglishLanguage "An embassy is a
% &%Building that is owned by a &%Government to house its
% diplomatic and consular staff that is in another country.")


fof( miloA3306, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__EmbassyBuilding)
			)
			=>
			(
				(?[EGOV,OTHERGOV]: 
					(
						(
							(
								p__d__instance(EGOV,c__Nation)
							)
						 &
							(
								p__d__instance(OTHERGOV,c__Nation)
							)
						 &
							(
								~ (
									( EGOV = OTHERGOV )
								)
							)
						 &
							(
								p__possesses(EGOV,X)
							)
						 &
							(
								p__located(X,OTHERGOV)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moved to CountriesAndRegions to remove dependencies.
% ;;
% ;;($subclass EuropeanNation Nation)
% ;;(documentation EuropeanNation EnglishLanguage "The class of nations that are in &%Europe.")
% ;;
% ;;(=>
% ;;  ($instance ?N EuropeanNation)
% ;;  (part ?N Europe))
% ;;
% ;;($instance UnitedKingdom EuropeanNation)
% ;;(documentation UnitedKingdom EnglishLanguage "The &%Nation comprising 
% ;;England, Scotland, Wales, and Northern Ireland.")
% )

fof( miloA3307, axiom,
	p__d__subclass(c__EntertainmentBuilding,c__Building)
).



% ($documentation EntertainmentBuilding EnglishLanguage "A building that has the primary 
% purpose of entertaining people.")


% 	(forall (?REC ?BUILDING)
% 		(=> 
% 			($instance ?BUILDING EntertainmentBuilding)
% 			(hasPurpose ?BUILDING (exists ([|] ?REC []) (and ([|] ($instance ?REC RecreationOrExercise) ([|] (eventLocated ?REC ?BUILDING) [])))))
% 		)
% 	)

fof( miloA3309, axiom,
	p__d__subclass(c__GovernmentBuilding,c__Building)
).



% ($documentation GovernmentBuilding EnglishLanguage "A building belonging to a &%Government")


fof( miloA3310, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__GovernmentBuilding)
			)
			=>
			(
				(?[G]: 
					(
						(
							(
								p__d__instance(G,c__Government)
							)
						 &
							(
								p__possesses(G,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3311, axiom,
	p__d__instance(c__GovernmentPerson,c__OccupationalRole)
).



% ($documentation GovernmentPerson EnglishLanguage "A person who works for a &%Government.")


% 	(forall (?T1 ?X)
% 		(=> 
% 			(holdsDuring ?T1 (attribute ?X GovernmentPerson))
% 			(exists (?GOV)
% 				(and 
% 					($instance ?GOV Government)
% 					(holdsDuring ?T1 (employs ?GOV ?X))
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; KJN: Moved Hotel definition to Hotel.kif
% ;; ($subclass Hotel Building)
% ;; (documentation Hotel EnglishLanguage "A building which servers the purpose of a temporary
% ;; home for people, either for people who are travelling, or occasionally for
% ;; those who do not have another more permanent residence.  A hotel is 
% ;; distinguished from a homeless shelter, or a residence loaned to a friend
% ;; in that the primary purpose of the building is to generate revenue in
% ;; return for the priviledge of staying there.  Many hotels contains other 
% ;; facilities such as &%Restaurants or health clubs or even miscellaneous stores
% ;; although that is not their primary business or purpose.")
% ;;
% ;;(=>
% ;;  ($instance ?X Hotel)
% ;;  (hasPurpose ?X
% ;;    (exists (?OWN ?EMP ?EV ?P ?PAY)
% ;;      (and
% ;;        (employs ?OWN ?EMP)
% ;;        (possesses ?OWN ?X)
% ;;        ($instance ?P Human)
% ;;        ($instance ?PAY FinancialTransaction)
% ;;       (agent ?PAY ?P)
% ;;        (patient ?PAY ?EMP)
% ;;       (confersRight ?EMP ?EV ?P)
% ;;        (agent ?EV ?P)
% ;;        (located ?EV ?X)))))
% )

fof( miloA3313, axiom,
	p__d__subclass(c__Renting,c__FinancialTransaction)
).


fof( miloA3314, axiom,
	p__d__subclass(c__Renting,c__Borrowing)
).



% ($documentation Renting EnglishLanguage "Giving money to the owner of an &%Object in 
% exchange for the right to use the &%Object for a fixed time period.")


% 	(forall (?R ?A ?O)
% 		(=> 
% 			(and 
% 				($instance ?R Renting)
% 				(agent ?R ?A)
% 				(patient ?R ?O)
% 			)
% 			(holdsDuring (WhenFn ?R) (modalAttribute (uses ?A ?O) Permission))
% 		)
% 	)

fof( miloA3316, axiom,
	p__d__subclass(c__Marketplace,c__GeographicArea)
).



% ($documentation Marketplace EnglishLanguage "An area, building, or set of buildings
% where &%FinancialTransactions are intended to take place.  There should
% be more than one owner or renter of space or buildings within the
% marketplace.")


% 	(forall (?EV ?X)
% 		(=> 
% 			($instance ?X Marketplace)
% 			(hasPurpose ?X (exists ([|] ?EV []) (and ([|] ($instance ?EV FinancialTransaction) ([|] (eventLocated ?EV ?X) [])))))
% 		)
% 	)

fof( miloA3318, axiom,
	p__d__instance(c__StoreOwner,c__OccupationalRole)
).


fof( miloA3319, axiom,
	p__subAttribute(c__StoreOwner,c__BusinessPerson)
).



% ($documentation StoreOwner EnglishLanguage "Someone who operates a store which he
% either owns or rents.")


fof( miloA3320, axiom,
	p__d__instance(c__Militant,c__SocialRole)
).



% ($documentation Militant EnglishLanguage "A militant is someone who is not 
% officially authorized by a government to engage in combat, but who
% does so on behalf of a &%PoliticalOrganization.")


fof( miloA3321, axiom,
	p__d__instance(c__MilitaryPerson,c__OccupationalRole)
).



% ($documentation MilitaryPerson EnglishLanguage "Someone who is a member of a
% &%ModernMilitaryOrganization.")


% 	(forall (?T1 ?X)
% 		(=> 
% 			(holdsDuring ?T1 (attribute ?X MilitaryPerson))
% 			(exists (?ORG)
% 				(and 
% 					($instance ?ORG MilitaryOrganization)
% 					(holdsDuring ?T1 (member ?X ?ORG))
% 				)
% 			)
% 		)
% 	)

% 	(forall (?ORG ?T1 ?X)
% 		(=> 
% 			(and 
% 				($instance ?ORG MilitaryOrganization)
% 				(holdsDuring ?T1 (member ?X ?ORG))
% 				($instance ?X Human)
% 			)
% 			(holdsDuring ?T1 (attribute ?X MilitaryPerson))
% 		)
% 	)

fof( miloA3324, axiom,
	p__d__subclass(c__OfficeBuilding,c__Building)
).



% ($documentation OfficeBuilding EnglishLanguage "A building in which work activities take
% place which is not primarily designed for manufacturing or retail sales.")


fof( miloA3325, axiom,
	p__d__subclass(c__PeaceKeepingMission,c__MilitaryOrganization)
).



% ($documentation PeaceKeepingMission EnglishLanguage "A military deployment which is intended
% to prevent hostilities between two other entities located in the same rough
% geographic area.")


fof( miloA3326, axiom,
	p__d__subclass(c__PlaceOfWorship,c__Building)
).



% ($documentation PlaceOfWorship EnglishLanguage "Any place designed for &%ReligiousProcesses.")


% 	(forall (?EV ?X)
% 		(=> 
% 			($instance ?X PlaceOfWorship)
% 			(hasPurpose ?X (exists ([|] ?EV []) (and ([|] ($instance ?EV ReligiousProcess) ([|] (eventLocated ?EV ?X) [])))))
% 		)
% 	)

fof( miloA3328, axiom,
	p__d__subclass(c__PoliceFacility,c__Building)
).



% ($documentation PoliceFacility EnglishLanguage "A building designed to house &%PolicePersons.")


fof( miloA3329, axiom,
	p__d__instance(c__PolicePerson,c__OccupationalRole)
).


fof( miloA3330, axiom,
	p__subAttribute(c__PolicePerson,c__GovernmentPerson)
).



% ($documentation PolicePerson EnglishLanguage "A member of a government whose occupation
% has the primary purpose of preventing crime and arresting criminals.")


fof( miloA3331, axiom,
	p__subAttribute(c__PoliticalFigure,c__Celebrity)
).



% ($documentation PoliticalFigure EnglishLanguage "A well known person who participates
% in a PoliticalProcess.  This must either be the person's principal
% occupation, or what is intended to become his principal occupation
% (for example, after an election).")


fof( miloA3332, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Agent)
					)
				 &
					(
						p__attribute(X,c__PoliticalFigure)
					)
				)
			)
			=>
			(
				(?[EV]: 
					(
						(
							(
								p__agent(EV,X)
							)
						 &
							(
								p__d__instance(EV,c__PoliticalProcess)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?X)
% 		(=> 
% 			(attribute ?X PoliticalFigure)
% 			(exists (?GOV)
% 				(and 
% 					($instance ?GOV Government)
% 					(or 
% 						(member ?X ?GOV)
% 						(desires ?X (member ?X ?GOV))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA3334, axiom,
	p__subAttribute(c__ReligiousFigure,c__Celebrity)
).



% ($documentation ReligiousFigure EnglishLanguage "A well-known leader of a religious group.")


% ($comment 
% ;; (=>
% ;;  (attribute ?X ReligiousFigure)
% ;;  (exists (?ORG)
% ;;    (and
% ;;      ($instance ?ORG ReligiousOrganization)
% ;;      (occupiesPosition ?X Leader ?ORG))))
% )

fof( miloA3335, axiom,
	p__d__subclass(c__RestaurantBuilding,c__Building)
).



% ($documentation RestaurantBuilding EnglishLanguage "A &%Building where people pay to be served food
% and eat.  Some restaurants may also offer entertainment.")


% 	(forall (?OWN ?PAY ?EMP ?P ?EV ?X)
% 		(=> 
% 			($instance ?X RestaurantBuilding)
% 			(hasPurpose ?X (exists ([|] ?OWN ([|] ?EMP ([|] ?EV ([|] ?P ([|] ?PAY []))))) (and ([|] (employs ?OWN ?EMP) ([|] (possesses ?OWN ?X) ([|] ($instance ?P Human) ([|] ($instance ?PAY FinancialTransaction) ([|] (agent ?PAY ?P) ([|] (patient ?PAY ?EMP) ([|] (confersRight ?EMP ?EV ?P) ([|] ($instance ?EV Eating) ([|] (agent ?EV ?P) ([|] (eventLocated ?EV ?X) [])))))))))))))
% 		)
% 	)

fof( miloA3337, axiom,
	p__d__subclass(c__EducationalFacility,c__StationaryArtifact)
).



% ($documentation EducationalFacility EnglishLanguage "A building or campus, owned by an
% &%EducationalOrganization, which is intended as the location for
% &%EducationalProcesses.")


fof( miloA3338, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__EducationalFacility)
			)
			=>
			(
				(?[ORG]: 
					(
						(
							(
								p__d__instance(ORG,c__EducationalOrganization)
							)
						 &
							(
								p__possesses(ORG,X)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?EV ?X)
% 		(=> 
% 			($instance ?X EducationalFacility)
% 			(hasPurpose ?X (exists ([|] ?EV []) (and ([|] ($instance ?EV EducationalProcess) ([|] (eventLocated ?EV ?X) [])))))
% 		)
% 	)

fof( miloA3340, axiom,
	p__d__instance(c__Student,c__SocialRole)
).



% ($documentation Student EnglishLanguage "A person who participates in an
% &%EducationalProcess in order to learn something.")


fof( miloA3341, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__Student)
					)
				)
			)
			=>
			(
				(?[EV]: 
					(
						(
							(
								p__d__instance(EV,c__EducationalProcess)
							)
						 &
							(
								p__patient(EV,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3342, axiom,
	p__d__subclass(c__Subway,c__Hole)
).



% ($documentation Subway EnglishLanguage "A subway is a hollow
% area of the earth, typically under large cities, designed
% for running trains that move people. It is distinguished
% from other kinds of tunnels in that trains run through them,
% primarily for the purpose of carrying people rather than
% ore, for example.")


% 	(forall (?X)
% 		(=> 
% 			($instance ?X Subway)
% 			(exists (?SURF)
% 				(and 
% 					(surface ?SURF GeographicArea)
% 					(orientation ?X ?SURF Below)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?P ?EV ?X)
% 		(=> 
% 			($instance ?X Subway)
% 			(hasPurpose ?X (exists ([|] ?EV ([|] ?P [])) (and ([|] ($instance ?EV Transportation) ([|] ($instance ?P Human) ([|] (patient ?EV ?P) ([|] (eventLocated ?EV ?X) [])))))))
% 		)
% 	)

fof( miloA3345, axiom,
	p__d__instance(c__Tourist,c__SocialRole)
).



% ($documentation Tourist EnglishLanguage "A tourist is a
% person who is travelling to a place primarily for reasons of
% entertainment or education, rather than business, although
% business transaction may take place during the trip.")


fof( miloA3346, axiom,
	p__d__subclass(c__TouristSite,c__GeographicArea)
).



% ($documentation TouristSite EnglishLanguage "A tourist site is a location that has some
% feature of interest to &%Tourists, which entertains or informs them.")


fof( miloA3347, axiom,
	p__d__subclass(c__TerroristOrganization,c__PoliticalOrganization)
).


fof( miloA3348, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__TerroristOrganization)
			)
			=>
			(
				(?[EV]: 
					(
						(
							(
								p__d__instance(EV,c__ViolentContest)
							)
						 &
							(
								p__agent(EV,X)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation TerroristOrganization EnglishLanguage "A
%  group that uses violent means in an attempt to bring about
%  their political aims.  Those violent means are
%  distinguished from a war between nations, or a civil war in
%  that the group is at least partially clandestine and a
%  significant proportion of its acts are against non-military
%  targets.")


fof( miloA3349, axiom,
	p__d__instance(c__memberCount,c__BinaryPredicate)
).


% 	($domain memberCount 1 Collection)

% 	($domain memberCount 2 Integer)


% ($documentation memberCount EnglishLanguage "(&%memberCount ?ORG ?NUMBER) means that there 
% is a total ?NUMBER of &%members in the &%Collection ?ORG.") 


% 	(forall (?NUM ?MEM ?ORG)
% 		(=> 
% 			(memberCount ?ORG ?NUM)
% 			(equal ?NUM (CardinalityFn (KappaFn ?MEM (member ?MEM ?ORG))))
% 		)
% 	)

% ($comment 
% ;; KJN: Moving this to Government.kif as seatsInOrganizationCount is defined there       
% ;;(=>
% ;;  (and
% ;;    (seatsInOrganizationCount ?ORG ?SEATS)
% ;;    (memberCount ?ORG ?MEMBERS))
% ;;  (greaterThanOrEqualTo ?SEATS ?MEMBERS))
% )

fof( miloA3353, axiom,
	p__d__instance(c__memberType,c__BinaryPredicate)
).


% 	($domain memberType 1 Collection)

% 	($domain memberType 2 SetOrClass)


% ($documentation memberType EnglishLanguage "(&%memberType ?GROUP ?TYPE) means that all 
% the members of the &%Collection ?GROUP belong to the &%SetOrClass 
% ?TYPE.")


fof( miloA3356, axiom,
	(![GROUP,MEMBER,TYPE]: 
		(
			(
				(
					(
						p__d__instance(TYPE,c__SetOrClass)
					)
				 &
					(
						p__d__instance(GROUP,c__Collection)
					)
				 &
					(
						p__d__instance(MEMBER,c__SelfConnectedObject)
					)
				 &
					(
						p__memberType(GROUP,TYPE)
					)
				 &
					(
						p__member(MEMBER,GROUP)
					)
				)
			)
			=>
			(
				p__d__instance(MEMBER,TYPE)
			)
		)
	)
).


fof( miloA3357, axiom,
	p__d__instance(c__memberTypeCount,c__TernaryPredicate)
).


% 	($domain memberTypeCount 1 Collection)

% 	($domain memberTypeCount 2 SetOrClass)

% 	($domain memberTypeCount 3 NonnegativeInteger)


% ($documentation memberTypeCount EnglishLanguage 
% "(&%memberTypeCount ?GROUP ?TYPE ?NUMBER) means that the 
% &%Collection ?GROUP has ?NUMBER members of the kind ?TYPE.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: a collection cannot be empty
% ;; See: 
% ;;	(=>
% ;;		($instance ?COLL Collection)
% ;;		(exists (?OBJ)
% ;;			(member ?OBJ ?COLL)))
% ;; Thus, the next axiom is in conflict with (memberTypeCount ?GROUP ?TYPE 0)
% ;;
% ;;(=>
% ;; (memberTypeCount ?GROUP ?TYPE ?NUMBER)
% ;; (exists (?SUBGROUP)
% ;;   (and
% ;;     (subCollection ?SUBGROUP ?GROUP)
% ;;     (memberCount ?SUBGROUP ?NUMBER)
% ;;     (memberType ?SUBGROUP ?TYPE))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA3361, axiom,
	(![GROUP,NUMBER,TYPE]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__NonnegativeInteger)
					)
				 &
					(
						p__d__instance(TYPE,c__SetOrClass)
					)
				 &
					(
						p__d__instance(GROUP,c__Collection)
					)
				 &
					(
						p__memberTypeCount(GROUP,TYPE,NUMBER)
					)
				 &
					(
						p__greaterThan(NUMBER,c__0)
					)
				)
			)
			=>
			(
				(?[SUBGROUP]: 
					(
						(
							(
								p__d__instance(SUBGROUP,c__Collection)
							)
						 &
							(
								p__subCollection(SUBGROUP,GROUP)
							)
						 &
							(
								p__memberCount(SUBGROUP,NUMBER)
							)
						 &
							(
								p__memberType(SUBGROUP,TYPE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3362, axiom,
	(![GROUP,TYPE,NUMBER1,NUMBER2]: 
		(
			(
				(
					(
						p__d__instance(NUMBER1,c__Integer)
					)
				 &
					(
						p__d__instance(GROUP,c__Collection)
					)
				 &
					(
						p__d__instance(NUMBER2,c__NonnegativeInteger)
					)
				 &
					(
						p__d__instance(TYPE,c__SetOrClass)
					)
				 &
					(
						p__memberCount(GROUP,NUMBER1)
					)
				 &
					(
						p__memberTypeCount(GROUP,TYPE,NUMBER2)
					)
				)
			)
			=>
			(
				p__greaterThanOrEqualTo(NUMBER1,NUMBER2)
			)
		)
	)
).


fof( miloA3363, axiom,
	(![NUMBER,TYPE,GROUP]: 
		(
			(
				(
					(
						p__d__instance(NUMBER,c__NonnegativeInteger)
					)
				 &
					(
						p__d__instance(TYPE,c__SetOrClass)
					)
				 &
					(
						p__d__instance(GROUP,c__Collection)
					)
				 &
					(
						p__memberTypeCount(GROUP,TYPE,NUMBER)
					)
				 &
					(
						( NUMBER = c__0 )
					)
				)
			)
			=>
			(
				(![ITEM]: 
					(
						(
							~ (
								p__d__instance(ITEM,c__SelfConnectedObject)
							)
						 |
							~ (
								p__d__instance(ITEM,TYPE)
							)
						 |
							~ (
								p__member(ITEM,GROUP)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3364, axiom,
	p__d__instance(c__memberAtTime,c__TernaryPredicate)
).



% ($documentation memberAtTime EnglishLanguage "(&%memberAtTime ?MEMBER ?COLLECTION
% ?TIME) means that during the time period denoted by ?TIME,
% ?MEMBER is a &%member of ?COLLECTION.")


% 	($domain memberAtTime 1 SelfConnectedObject)

% 	($domain memberAtTime 2 Collection)

% 	($domain memberAtTime 3 TimePosition)

% 	(forall (?TIME ?OBJ ?COLLECTION)
% 		(<=> 
% 			(memberAtTime ?OBJ ?COLLECTION ?TIME)
% 			(holdsDuring ?TIME (member ?OBJ ?COLLECTION))
% 		)
% 	)

fof( miloA3369, axiom,
	(![COLLECTION,OBJ,TIME,PLACE]: 
		(
			(
				(
					(
						p__d__instance(PLACE,c__Object)
					)
				 &
					(
						p__d__instance(TIME,c__TimePosition)
					)
				 &
					(
						p__d__instance(COLLECTION,c__Collection)
					)
				 &
					(
						p__d__instance(OBJ,c__SelfConnectedObject)
					)
				 &
					(
						p__locatedAtTime(COLLECTION,TIME,PLACE)
					)
				 &
					(
						p__memberAtTime(OBJ,COLLECTION,TIME)
					)
				)
			)
			=>
			(
				p__locatedAtTime(OBJ,TIME,PLACE)
			)
		)
	)
).



% ($documentation inventory EnglishLanguage "(inventory ?CBO ?COLLECTION) means that 
% the &%ContentBearingObject ?CBO contains a list or enumeration of the 
% members of the &%Collection ?COLLECTION.")


fof( miloA3370, axiom,
	p__d__instance(c__inventory,c__BinaryPredicate)
).


% 	($domain inventory 1 ContentBearingObject)

% 	($domain inventory 2 Collection)

fof( miloA3373, axiom,
	(![C,O,I]: 
		(
			(
				(
					(
						p__d__instance(C,c__Collection)
					)
				 &
					(
						p__d__instance(O,c__ContentBearingObject)
					)
				 &
					(
						p__d__instance(I,c__SelfConnectedObject)
					)
				 &
					(
						p__inventory(O,C)
					)
				 &
					(
						p__member(I,C)
					)
				)
			)
			=>
			(
				p__refers(O,I)
			)
		)
	)
).


fof( miloA3374, axiom,
	p__d__instance(c__subordinateInOrganization,c__TernaryPredicate)
).


% 	($domain subordinateInOrganization 1 Organization)

% 	($domain subordinateInOrganization 2 Human)

% 	($domain subordinateInOrganization 3 Human)


% ($documentation subordinateInOrganization EnglishLanguage 
% "(&%subordinateInOrganization ?ORG ?PERSON1 ?PERSON2) means that 
% in the &%Organization ?ORG, ?PERSON1 is subordinate to ?PERSON2.")


fof( miloA3378, axiom,
	(![PERSON2,ORG,PERSON1]: 
		(
			(
				(
					(
						p__d__instance(PERSON2,c__Human)
					)
				 &
					(
						p__d__instance(PERSON1,c__Human)
					)
				 &
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__subordinateInOrganization(ORG,PERSON1,PERSON2)
					)
				)
			)
			=>
			(
				p__employs(ORG,PERSON1)
			)
		)
	)
).


fof( miloA3379, axiom,
	(![PERSON1,ORG,PERSON2]: 
		(
			(
				(
					(
						p__d__instance(PERSON2,c__Human)
					)
				 &
					(
						p__d__instance(PERSON1,c__Human)
					)
				 &
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__subordinateInOrganization(ORG,PERSON1,PERSON2)
					)
				)
			)
			=>
			(
				p__employs(ORG,PERSON2)
			)
		)
	)
).


fof( miloA3380, axiom,
	p__d__instance(c__subordinatePosition,c__TernaryPredicate)
).


% 	($domain subordinatePosition 1 Organization)

% 	($domain subordinatePosition 2 Position)

% 	($domain subordinatePosition 3 Position)


% ($documentation subordinatePosition EnglishLanguage 
% "(&%subordinatePosition ?ORG ?SUB ?SUPER) means that in 
% the &%Organization ?ORG, the holder of role ?SUB is subordinate to 
% the holder of role ?SUPER.")


fof( miloA3384, axiom,
	(![ROLE1,ROLE2,ORG,PERSON1]: 
		(
			(
				(
					(
						p__d__instance(ROLE2,c__Position)
					)
				 &
					(
						p__d__instance(ROLE1,c__Position)
					)
				 &
					(
						p__d__instance(ORG,c__Organization)
					)
				 &
					(
						p__d__instance(PERSON1,c__Human)
					)
				 &
					(
						p__subordinatePosition(ORG,ROLE1,ROLE2)
					)
				 &
					(
						p__occupiesPosition(PERSON1,ROLE1,ORG)
					)
				)
			)
			=>
			(
				(?[PERSON2]: 
					(
						(
							(
								p__d__instance(PERSON2,c__Human)
							)
						 &
							(
								p__occupiesPosition(PERSON2,ROLE2,ORG)
							)
						 &
							(
								p__subordinateInOrganization(ORG,PERSON1,PERSON2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3385, axiom,
	p__d__instance(c__operator,c__BinaryPredicate)
).


fof( miloA3386, axiom,
	p__d__instance(c__operator,c__AsymmetricRelation)
).


fof( miloA3387, axiom,
	p__d__instance(c__operator,c__IrreflexiveRelation)
).


% 	($domain operator 1 Object)

% 	($domain operator 2 Agent)


% ($documentation operator EnglishLanguage "(&%operator ?OBJECT ?AGENT) means that ?AGENT 
% determines how ?OBJECT is used, either by directly or indirectly operating 
% it.")


fof( miloA3390, axiom,
	p__d__subclass(c__ClassificationScheme,c__Proposition)
).



% ($documentation ClassificationScheme EnglishLanguage "A &%ClassificationScheme is
% a conceptual structure, an abstract arrangement of concepts and
% the relations that link them.")


fof( miloA3391, axiom,
	p__d__subclass(c__Taxonomy,c__ClassificationScheme)
).



% ($documentation Taxonomy EnglishLanguage "A &%Taxonomy is a &%ClassificationScheme
% that typically includes the salient concepts of a domain of
% interest, plus, minimally, a binary `broader than'/`narrower
% than' relation by which the concepts are linked.  The `broader
% than'/`narrower than' relation is usually conceived as set- or
% class-based subsumption, but taxonomies are notorious for
% conflating the set membership and set subsumption (i.e.,
% subset/superset) relations into a single `IS-A' relation.  Some
% taxonomies include additional binary relations, such as
% `subpart'/`superpart'.")



% ($documentation abstractPart EnglishLanguage "A meronymy relation similar to &%part, but
% for abstract rather than physical things.")


% (termFormat EnglishLanguage abstractPart "part")

fof( miloA3392, axiom,
	p__d__instance(c__abstractPart,c__PartialOrderingRelation)
).


% 	($domain abstractPart 1 Abstract)

% 	($domain abstractPart 2 Abstract)

% ($comment 
% ;; (format EnglishLanguage abstractPart "%1 is %n a &%part of %2")
% )

fof( miloA3395, axiom,
	p__d__subclass(c__Ontology,c__ClassificationScheme)
).



% ($documentation Ontology EnglishLanguage "An &%Ontology is a
% &%ClassificationScheme that links concepts via many different
% relations.  Ontologies typically are not restricted to binary
% relations and are structured by several kinds of conceptual
% hierarchies, including set- or class-based subsumption, spatial
% containment, mereology
% (theory of parts and wholes), and logical contexts.  Thus,
% an ontology typically includes multiple taxonomies.")


% ($comment 
% ;; Every ontology incorporates at least one taxonomy.
% )

fof( miloA3396, axiom,
	(![ONT]: 
		(
			(
				p__d__instance(ONT,c__Ontology)
			)
			=>
			(
				(?[TAX]: 
					(
						(
							(
								p__d__instance(TAX,c__Taxonomy)
							)
						 &
							(
								p__abstractPart(TAX,ONT)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; transported
% )

fof( miloA3397, axiom,
	p__d__instance(c__transported,c__BinaryPredicate)
).


fof( miloA3398, axiom,
	p__d__instance(c__transported,c__AsymmetricRelation)
).



% ($documentation transported EnglishLanguage "(&%transported ?EVENT ?OBJ)
% means that ?OBJ is transported (carried/moved to a
% different physical location) in the &%Transportation
% ?EVENT.")


% 	($domain transported 1 Transportation)

% 	($domain transported 2 Object)

fof( miloA3401, axiom,
	p__subrelation(c__transported,c__patient)
).


% ($comment 
% ;; cargo
% )

fof( miloA3402, axiom,
	p__d__instance(c__cargo,c__BinaryPredicate)
).


fof( miloA3403, axiom,
	p__d__instance(c__cargo,c__AsymmetricRelation)
).



% ($documentation cargo EnglishLanguage "(&%cargo ?EVENT ?OBJ) means that
% ?OBJ is transported as cargo in the &%Shipping event
% ?EVENT.")


% 	($domain cargo 1 Shipping)

% 	($domain cargo 2 Object)

fof( miloA3406, axiom,
	p__subrelation(c__cargo,c__transported)
).


fof( miloA3407, axiom,
	p__d__instance(c__serviceProvider,c__BinaryPredicate)
).


fof( miloA3408, axiom,
	p__d__instance(c__serviceProvider,c__AsymmetricRelation)
).


fof( miloA3409, axiom,
	p__d__instance(c__serviceProvider,c__IntentionalRelation)
).


% 	($domain serviceProvider 1 ServiceProcess)

% 	($domain serviceProvider 2 CognitiveAgent)

fof( miloA3412, axiom,
	p__subrelation(c__serviceProvider,c__agent)
).



% ($documentation serviceProvider EnglishLanguage "(&%serviceProvider ?EVENT ?AGENT)
% means that ?AGENT is the supplier of the service provided in
% ?EVENT.")


fof( miloA3413, axiom,
	p__d__instance(c__serviceRecipient,c__BinaryPredicate)
).


fof( miloA3414, axiom,
	p__d__instance(c__serviceRecipient,c__AsymmetricRelation)
).


fof( miloA3415, axiom,
	p__d__instance(c__serviceRecipient,c__IntentionalRelation)
).


% 	($domain serviceRecipient 1 ServiceProcess)

% 	($domain serviceRecipient 2 CognitiveAgent)

fof( miloA3418, axiom,
	p__subrelation(c__serviceRecipient,c__experiencer)
).



% ($documentation serviceRecipient EnglishLanguage 
% "(&%serviceRecipient ?EVENT ?AGENT) means that ?AGENT is the
% receiver of the service provided in ?EVENT.")


% ($comment 
% ;; Every ServiceProcess has some provider.
% )

fof( miloA3419, axiom,
	(![EVENT]: 
		(
			(
				p__d__instance(EVENT,c__ServiceProcess)
			)
			=>
			(
				(?[PROVIDER]: 
					(
						(
							(
								p__d__instance(PROVIDER,c__CognitiveAgent)
							)
						 &
							(
								p__serviceProvider(EVENT,PROVIDER)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; Every ServiceProcess has some recipient.
% )

fof( miloA3420, axiom,
	(![EVENT]: 
		(
			(
				p__d__instance(EVENT,c__ServiceProcess)
			)
			=>
			(
				(?[RECEIVER]: 
					(
						(
							(
								p__d__instance(RECEIVER,c__CognitiveAgent)
							)
						 &
							(
								p__serviceRecipient(EVENT,RECEIVER)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3421, axiom,
	p__d__instance(c__benefits,c__BinaryPredicate)
).


fof( miloA3422, axiom,
	p__d__instance(c__benefits,c__AsymmetricRelation)
).


% 	($domain benefits 1 Process)

% 	($domain benefits 2 Agent)


% ($documentation benefits EnglishLanguage "(&%benefits
% ?PROCESS ?AGENT) means that ?AGENT somehow derives benefit
% as a result of ?PROCESS.  This is a very general relation,
% and does not entail that ?AGENT is a participant in
% ?PROCESS.")


% ($comment 
% ;; If a process benefits some agent, the process must begin
% ;; before the agent ends.  This is very weak.
% )

fof( miloA3425, axiom,
	(![PROCESS,AGENT,PROCESSSTART,AGENTEND]: 
		(
			(
				(
					(
						p__d__instance(PROCESS,c__Process)
					)
				 &
					(
						p__d__instance(PROCESSSTART,c__TimePoint)
					)
				 &
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(AGENTEND,c__TimePoint)
					)
				 &
					(
						( PROCESSSTART = f__BeginFn1(f__WhenFn1(PROCESS)) )
					)
				 &
					(
						( AGENTEND = f__EndFn1(f__WhenFn1(AGENT)) )
					)
				 &
					(
						p__benefits(PROCESS,AGENT)
					)
				)
			)
			=>
			(
				p__before(PROCESSSTART,AGENTEND)
			)
		)
	)
).


fof( miloA3426, axiom,
	p__d__instance(c__areaOfResponsibility,c__TernaryPredicate)
).


% 	($domain areaOfResponsibility 1 Agent)

% 	($domainSubclass areaOfResponsibility 2 Process)

% 	($domain areaOfResponsibility 3 GeographicArea)


% ($documentation areaOfResponsibility EnglishLanguage "(&%areaOfResponsibility
% ?AGENT ?PROCESS-TYPE ?AREA) means that ?AGENT (typically an
% instance of &%Organization) is responsible or accountable for
% actions or undertakings of type ?PROCESS-TYPE in the
% &%GeographicArea denoted by ?AREA.")


% ($comment 
% ;; NS: edit.  move &%moves and &%changesLocation to Merge.kif.
% ;; ($instance moves CaseRole)
% ;; (domain moves 1 Motion)
% ;; (domain moves 2 Object)
% ;; (documentation moves EnglishLanguage "(&%moves ?MOTION ?OBJECT) means that during
% ;; the &%Motion event ?MOTION, ?OBJECT moves.  This does not
% ;; necessarily imply that the location of ?OBJECT changes during
% ;; ?MOTION.  See also &%changesLocation and &%Translocation.")
% ;; (subrelation moves involvedInEvent)
% ;;
% ;; ($instance changesLocation CaseRole)
% ;; (domain changesLocation 1 Translocation)
% ;; (domain changesLocation 2 Object)
% ;; (documentation changesLocation EnglishLanguage "(&%changesLocation ?EVENT
% ;; ?OBJECT) means that during the &%Translocation event ?EVENT,
% ;; ?OBJECT's location changes.  ?OBJECT might also be the &%agent,
% ;; &%patient, or &%experiencer of ?EVENT.")
% ;; (subrelation changesLocation moves)
% ;;
% ;; ------------------------------------------------------
% ;; Social relationships
% ;;
% ;; friend
% )

fof( miloA3430, axiom,
	p__d__instance(c__friend,c__BinaryPredicate)
).


fof( miloA3431, axiom,
	p__d__instance(c__friend,c__SymmetricRelation)
).


fof( miloA3432, axiom,
	p__d__instance(c__friend,c__IntentionalRelation)
).



% ($documentation friend EnglishLanguage "(&%holdsDuring ?T1 (&%friend ?H1 ?H2)) means that
% during time ?T1, ?H1 and ?H2 know each other, share a relationship of
% mutual care and concern, and probably also share some common interests.")


% 	($domain friend 1 Human)

% 	($domain friend 2 Human)

fof( miloA3435, axiom,
	p__subrelation(c__friend,c__mutualAcquaintance)
).


% ($comment 
% ;; coworker
% )

fof( miloA3436, axiom,
	p__d__instance(c__coworker,c__BinaryPredicate)
).


fof( miloA3437, axiom,
	p__d__instance(c__coworker,c__SymmetricRelation)
).



% ($documentation coworker EnglishLanguage "(&%holdsDuring ?T1 (&%coworker ?H1 ?H2)) means
% that during time ?T1, ?H1 and ?H2 are both employed by the same agent, are
% of roughly the same job status, and come into contact at least part of the
% time at the same work location.")


% 	($domain coworker 1 Human)

% 	($domain coworker 2 Human)

fof( miloA3440, axiom,
	p__subrelation(c__coworker,c__mutualAcquaintance)
).


% 	(forall (?T1 ?H1 ?H2)
% 		(=> 
% 			(holdsDuring ?T1 (coworker ?H1 ?H2))
% 			(exists (?ORG)
% 				(and 
% 					($instance ?ORG Organization)
% 					(holdsDuring ?T1 (and ([|] (employs ?ORG ?H1) ([|] (employs ?ORG ?H2) []))))
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; cohabitant
% )

fof( miloA3442, axiom,
	p__d__instance(c__cohabitant,c__BinaryPredicate)
).


fof( miloA3443, axiom,
	p__d__instance(c__cohabitant,c__SymmetricRelation)
).


fof( miloA3444, axiom,
	p__d__instance(c__cohabitant,c__IntentionalRelation)
).



% ($documentation cohabitant EnglishLanguage "(&%holdsDuring ?T1 (&%cohabitant ?H1 ?H2))
% means that during the time ?T1, ?H1 and ?H2 have the same home.")


% 	($domain cohabitant 1 Human)

% 	($domain cohabitant 2 Human)

fof( miloA3447, axiom,
	p__subrelation(c__cohabitant,c__mutualAcquaintance)
).


% 	(forall (?T1 ?H1 ?H2)
% 		(=> 
% 			(holdsDuring ?T1 (cohabitant ?H1 ?H2))
% 			(exists (?UNIT)
% 				(and 
% 					($instance ?UNIT SocialUnit)
% 					(holdsDuring ?T1 (and ([|] (member ?UNIT ?H1) ([|] (member ?UNIT ?H2) []))))
% 				)
% 			)
% 		)
% 	)

% 	(forall (?UNIT ?T1 ?H1 ?H2)
% 		(=> 
% 			(and 
% 				($instance ?UNIT SocialUnit)
% 				(holdsDuring ?T1 (and ([|] (member ?UNIT ?H1) ([|] (member ?UNIT ?H2) []))))
% 			)
% 			(holdsDuring ?T1 (cohabitant ?H1 ?H2))
% 		)
% 	)

% ($comment 
% ;; grandparent
% )

fof( miloA3450, axiom,
	p__d__instance(c__grandparent,c__BinaryPredicate)
).


fof( miloA3451, axiom,
	p__d__instance(c__grandparent,c__AsymmetricRelation)
).


% 	($domain grandparent 1 Human)

% 	($domain grandparent 2 Human)


% ($documentation grandparent EnglishLanguage "(&%grandparent ?YOUNGER ?OLDER) means that
% ?OLDER is a &%parent of ?YOUNGER's &%parent.")


fof( miloA3454, axiom,
	p__subrelation(c__grandmother,c__grandparent)
).


fof( miloA3455, axiom,
	p__subrelation(c__grandfather,c__grandparent)
).


fof( miloA3456, axiom,
	p__subrelation(c__grandparent,c__ancestor)
).


% ($comment 
% ;; parent -> father
% )

fof( miloA3457, axiom,
	(![CHILD,PARENT]: 
		(
			(
				(
					(
						p__d__instance(CHILD,c__Organism)
					)
				 &
					(
						p__parent(CHILD,PARENT)
					)
				 &
					(
						p__d__instance(PARENT,c__Man)
					)
				)
			)
			=>
			(
				p__father(CHILD,PARENT)
			)
		)
	)
).


% ($comment 
% ;; parent -> mother
% ;; this is in more general form in Merge-2.kif 13693-13697 (other mammals are also mothers)
% ;;(=>
% ;;  (and
% ;;   (parent ?CHILD ?PARENT)
% ;;    ($instance ?PARENT Woman))
% ;;  (mother ?CHILD ?PARENT))
% ;;
% ;; parent -> son
% )

fof( miloA3458, axiom,
	(![CHILD,PARENT]: 
		(
			(
				(
					(
						p__d__instance(PARENT,c__Organism)
					)
				 &
					(
						p__parent(CHILD,PARENT)
					)
				 &
					(
						p__d__instance(CHILD,c__Man)
					)
				)
			)
			=>
			(
				p__son(CHILD,PARENT)
			)
		)
	)
).


% ($comment 
% ;; parent -> daughter
% )

fof( miloA3459, axiom,
	(![CHILD,PARENT]: 
		(
			(
				(
					(
						p__d__instance(PARENT,c__Organism)
					)
				 &
					(
						p__parent(CHILD,PARENT)
					)
				 &
					(
						p__d__instance(CHILD,c__Woman)
					)
				)
			)
			=>
			(
				p__daughter(CHILD,PARENT)
			)
		)
	)
).



% ($documentation aunt EnglishLanguage "(aunt ?AUNT ?PERSON) means that ?AUNT is 
% the sister of a parent of ?PERSON.")


% 	($domain aunt 1 Woman)

% 	($domain aunt 2 Human)

fof( miloA3462, axiom,
	p__subrelation(c__aunt,c__familyRelation)
).


fof( miloA3463, axiom,
	(![A,H]: 
		(
			(
				(
					(
						p__d__instance(H,c__Human)
					)
				 &
					(
						p__d__instance(A,c__Woman)
					)
				)
			)
			=>
			(
				(
					p__aunt(A,H)
				)
				<=>
				(
					(?[P]: 
						(
							(
								(
									p__d__instance(P,c__Human)
								)
							 &
								(
									p__sister(A,P)
								)
							 &
								(
									p__parent(H,P)
								)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation cousin EnglishLanguage "(cousin ?PERSON1 ?PERSON2) means that ?PERSON1 
% and ?PERSON2 are cousins, i.e. ?PERSON1 and ?PERSON2 have grandparents 
% (but not parents) in common.")


% 	($domain cousin 1 Human)

% 	($domain cousin 2 Human)

fof( miloA3466, axiom,
	p__subrelation(c__cousin,c__familyRelation)
).


fof( miloA3467, axiom,
	(![P1,P2]: 
		(
			(
				(
					(
						p__d__instance(P2,c__Human)
					)
				 &
					(
						p__d__instance(P1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__cousin(P1,P2)
				)
				<=>
				(
					(
						(
							(?[G1,G2]: 
								(
									(
										(
											p__d__instance(G1,c__Woman)
										)
									 &
										(
											p__d__instance(G2,c__Man)
										)
									 &
										(
											p__grandmother(P1,G1)
										)
									 &
										(
											p__grandfather(P1,G2)
										)
									 &
										(
											p__grandmother(P2,G1)
										)
									 &
										(
											p__grandfather(P2,G2)
										)
									)
								)
							)
						)
					 &
						(
							(![M,F]: 
								(
									(
										~ (
											p__d__instance(M,c__Organism)
										)
									 |
										~ (
											p__d__instance(F,c__Organism)
										)
									 |
										~ (
											p__mother(P1,M)
										)
									 |
										~ (
											p__father(P1,F)
										)
									 |
										~ (
											p__mother(P2,M)
										)
									 |
										~ (
											p__father(P2,F)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation grandfather EnglishLanguage "(grandfather ?PERSON ?PARENT) means that 
% ?PARENT is the grandfather of ?PERSON.")


% 	($domain grandfather 1 Human)

% 	($domain grandfather 2 Man)

fof( miloA3470, axiom,
	p__subrelation(c__grandfather,c__familyRelation)
).


fof( miloA3471, axiom,
	(![P,H]: 
		(
			(
				(
					(
						p__d__instance(P,c__Man)
					)
				 &
					(
						p__d__instance(H,c__Human)
					)
				 &
					(
						p__grandfather(H,P)
					)
				)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__Organism)
							)
						 &
							(
								p__father(C,P)
							)
						 &
							(
								p__parent(H,C)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation grandmother EnglishLanguage "(grandmother ?PERSON ?PARENT) means that 
% ?PARENT is the grandmother of ?PERSON.")


% 	($domain grandmother 1 Human)

% 	($domain grandmother 2 Woman)

fof( miloA3474, axiom,
	p__subrelation(c__grandmother,c__familyRelation)
).


fof( miloA3475, axiom,
	(![P,H]: 
		(
			(
				(
					(
						p__d__instance(P,c__Woman)
					)
				 &
					(
						p__d__instance(H,c__Human)
					)
				 &
					(
						p__grandmother(H,P)
					)
				)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__Organism)
							)
						 &
							(
								p__mother(C,P)
							)
						 &
							(
								p__parent(H,C)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation nephew EnglishLanguage "(nephew ?NEPHEW ?PERSON) means that ?NEPHEW is 
% the &%son of a &%sibling of ?PERSON.")


% 	($domain nephew 1 Man)

% 	($domain nephew 2 Human)

fof( miloA3478, axiom,
	p__subrelation(c__nephew,c__familyRelation)
).


fof( miloA3479, axiom,
	(![H,N]: 
		(
			(
				(
					(
						p__d__instance(H,c__Human)
					)
				 &
					(
						p__d__instance(N,c__Man)
					)
				)
			)
			=>
			(
				(
					p__nephew(N,H)
				)
				<=>
				(
					(?[S]: 
						(
							(
								(
									p__d__instance(S,c__Organism)
								)
							 &
								(
									p__sibling(S,H)
								)
							 &
								(
									p__son(N,S)
								)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation niece EnglishLanguage "(niece ?NIECE ?PERSON) means that ?NIECE is 
% the &%daughter of a &%sibling of ?PERSON.")


% 	($domain niece 1 Woman)

% 	($domain niece 2 Human)

fof( miloA3482, axiom,
	p__subrelation(c__niece,c__familyRelation)
).


fof( miloA3483, axiom,
	(![H,N]: 
		(
			(
				(
					(
						p__d__instance(H,c__Human)
					)
				 &
					(
						p__d__instance(N,c__Woman)
					)
				)
			)
			=>
			(
				(
					p__niece(N,H)
				)
				<=>
				(
					(?[S]: 
						(
							(
								(
									p__d__instance(S,c__Organism)
								)
							 &
								(
									p__sibling(S,H)
								)
							 &
								(
									p__daughter(N,S)
								)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation uncle EnglishLanguage "(uncle ?UNCLE ?PERSON) means that ?UNCLE is 
% the brother of a parent of ?PERSON.")


% 	($domain uncle 1 Man)

% 	($domain uncle 2 Human)

fof( miloA3486, axiom,
	p__subrelation(c__uncle,c__familyRelation)
).


fof( miloA3487, axiom,
	(![U,H]: 
		(
			(
				(
					(
						p__d__instance(H,c__Human)
					)
				 &
					(
						p__d__instance(U,c__Man)
					)
				)
			)
			=>
			(
				(
					p__uncle(U,H)
				)
				<=>
				(
					(?[P]: 
						(
							(
								(
									p__d__instance(P,c__Human)
								)
							 &
								(
									p__brother(U,P)
								)
							 &
								(
									p__parent(H,P)
								)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation stepfather EnglishLanguage "(stepfather ?PERSON ?FATHER) means that ?FATHER 
% is the stepfather of ?PERSON, i.e. ?FATHER is the &%spouse of the &%mother 
% of ?PERSON, without also being the &%father of ?PERSON.")


% 	($domain stepfather 1 Human)

% 	($domain stepfather 2 Man)

fof( miloA3490, axiom,
	p__subrelation(c__stepfather,c__legalRelation)
).


fof( miloA3491, axiom,
	(![P,F]: 
		(
			(
				(
					(
						p__d__instance(F,c__Man)
					)
				 &
					(
						p__d__instance(P,c__Human)
					)
				)
			)
			=>
			(
				(
					p__stepfather(P,F)
				)
				<=>
				(
					(?[M]: 
						(
							(
								(
									p__d__instance(M,c__Human)
								)
							 &
								(
									p__mother(P,M)
								)
							 &
								(
									p__spouse(F,M)
								)
							 &
								(
									~ (
										p__father(P,F)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation stepmother EnglishLanguage "(stepmother ?PERSON ?MOTHER) means that ?MOTHER 
% is the &%stepmother of ?PERSON, i.e. ?MOTHER is the spouse of the &%father 
% of ?PERSON, without also being the &%mother of ?PERSON.")


% 	($domain stepmother 1 Human)

% 	($domain stepmother 2 Woman)

fof( miloA3494, axiom,
	p__subrelation(c__stepmother,c__legalRelation)
).


fof( miloA3495, axiom,
	(![P,M]: 
		(
			(
				(
					(
						p__d__instance(M,c__Woman)
					)
				 &
					(
						p__d__instance(P,c__Human)
					)
				)
			)
			=>
			(
				(
					p__stepmother(P,M)
				)
				<=>
				(
					(?[F]: 
						(
							(
								(
									p__d__instance(F,c__Human)
								)
							 &
								(
									p__father(P,F)
								)
							 &
								(
									p__spouse(M,F)
								)
							 &
								(
									~ (
										p__mother(P,M)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; NuclearFamily
% )

fof( miloA3496, axiom,
	p__d__subclass(c__NuclearFamily,c__FamilyGroup)
).


fof( miloA3497, axiom,
	p__d__subclass(c__NuclearFamily,c__SocialUnit)
).



% ($documentation NuclearFamily EnglishLanguage "A &%NuclearFamily is a &%SocialUnit composed
% of at least two and not more than three generations of &%familyRelations:
% &%parents, their children, and possibly the parents' parents (children's
% &%grandparents).")


% ($comment 
% ;; TO DO: Add axiomatic support for defining and
% ;; concluding to NuclearFamily.
% )

% 	(forall (?T1 ?CHILD ?PARENT1 ?PARENT2)
% 		(=> 
% 			(and 
% 				(parent ?CHILD ?PARENT1)
% 				(parent ?CHILD ?PARENT2)
% 				(holdsDuring ?T1 (and ([|] (spouse ?PARENT1 ?PARENT2) ([|] (cohabitant ?PARENT1 ?PARENT2) ([|] (cohabitant ?CHILD ?PARENT1) [])))))
% 			)
% 			(exists (?FAM)
% 				(and 
% 					($instance ?FAM NuclearFamily)
% 					(holdsDuring ?T1 (and ([|] (member ?CHILD ?FAM) ([|] (member ?PARENT1 ?FAM) ([|] (member ?PARENT2 ?FAM) [])))))
% 				)
% 			)
% 		)
% 	)

fof( miloA3499, axiom,
	p__d__instance(c__alias,c__BinaryPredicate)
).


fof( miloA3500, axiom,
	p__d__instance(c__alias,c__AsymmetricRelation)
).


% 	($domain alias 1 SymbolicString)

% 	($domain alias 2 Agent)


% ($documentation alias EnglishLanguage "(&%alias ?STRING ?AGENT) means that ?STRING is an
% alternate identifier for ?AGENT, and is likely being used to hide or
% obscure ?AGENT's true identity.")


fof( miloA3503, axiom,
	p__subrelation(c__alias,c__names)
).


fof( miloA3504, axiom,
	p__d__instance(c__workAddress,c__BinaryPredicate)
).


fof( miloA3505, axiom,
	p__d__instance(c__workAddress,c__AsymmetricRelation)
).


fof( miloA3506, axiom,
	p__subrelation(c__workAddress,c__postContactSite)
).



% ($documentation workAddress EnglishLanguage 
% "(&%holdsDuring ?T1 (&%workAddress ?AGENT ?ADDRESS)) means that
% during the time specified by ?T1, ?ADDRESS identifies one of the
% locations at which ?AGENT works.")


% 	($domain workAddress 1 CognitiveAgent)

% 	($domain workAddress 2 PostalPlace)

fof( miloA3509, axiom,
	p__d__instance(c__homeAddress,c__BinaryPredicate)
).


fof( miloA3510, axiom,
	p__d__instance(c__homeAddress,c__AsymmetricRelation)
).


% 	($domain homeAddress 1 PermanentResidence)

% 	($domain homeAddress 2 Human)

fof( miloA3513, axiom,
	p__subrelation(c__homeAddress,c__postContactSite)
).



% ($documentation homeAddress EnglishLanguage 
% "(&%holdsDuring ?T1 (&%homeAddress ?PLACE ?AGENT)) means that
% during the time specified by ?T1, the &%PostalPlace ?PLACE is
% ?AGENT's &%home.")


fof( miloA3514, axiom,
	p__d__instance(c__playsRoleInEvent,c__TernaryPredicate)
).


% 	($domain playsRoleInEvent 1 Object)

% 	($domain playsRoleInEvent 2 CaseRole)

% 	($domain playsRoleInEvent 3 Process)


% ($documentation playsRoleInEvent EnglishLanguage 
% "(&%playsRoleInEvent ?OBJ ?ROLE ?EVENT) means that the &%Object
% ?OBJ is involved in the &%Process ?EVENT in a way specified by
% the &%CaseRole predicate ?ROLE.")


fof( miloA3518, axiom,
	(![ROLE,EVENT,OBJ]: 
		(
			(
				(
					(
						p__d__instance(EVENT,c__Process)
					)
				 &
					(
						p__d__instance(ROLE,c__CaseRole)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__playsRoleInEvent(OBJ,ROLE,EVENT)
					)
				)
			)
			=>
			(
				p__d__holds3(ROLE,EVENT,OBJ)
			)
		)
	)
).


fof( miloA3519, axiom,
	(![ROLE,OBJ,ROLE2,EVENT]: 
		(
			(
				(
					(
						p__d__instance(EVENT,c__Process)
					)
				 &
					(
						p__d__instance(ROLE,c__CaseRole)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(ROLE2,c__CaseRole)
					)
				 &
					(
						p__playsRoleInEvent(OBJ,ROLE,EVENT)
					)
				 &
					(
						p__subrelation(ROLE,ROLE2)
					)
				)
			)
			=>
			(
				p__playsRoleInEvent(OBJ,ROLE2,EVENT)
			)
		)
	)
).


fof( miloA3520, axiom,
	(![OBJ,ROLE,EVENT]: 
		(
			(
				(
					(
						p__d__holds3(ROLE,EVENT,OBJ)
					)
				 &
					(
						p__d__instance(ROLE,c__CaseRole)
					)
				 &
					(
						p__d__instance(EVENT,c__Process)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				)
			)
			=>
			(
				p__playsRoleInEvent(OBJ,ROLE,EVENT)
			)
		)
	)
).


fof( miloA3521, axiom,
	(![EVENT,OBJ,ROLE,CLASS,TIME,PLACE]: 
		(
			(
				(
					(
						p__d__instance(EVENT,c__Process)
					)
				 &
					(
						p__d__instance(ROLE,c__CaseRole)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(TIME,c__TimePosition)
					)
				 &
					(
						p__d__instance(PLACE,c__Object)
					)
				 &
					(
						p__playsRoleInEvent(OBJ,ROLE,EVENT)
					)
				 &
					(
						p__d__instance(EVENT,CLASS)
					)
				 &
					(
						p__d__subclass(CLASS,c__Process)
					)
				 &
					(
						p__time(EVENT,TIME)
					)
				 &
					(
						p__eventLocated(EVENT,PLACE)
					)
				)
			)
			=>
			(
				p__playsRoleInEventOfType(OBJ,ROLE,CLASS,TIME,PLACE)
			)
		)
	)
).


fof( miloA3522, axiom,
	p__d__instance(c__playsRoleInEventOfType,c__QuintaryPredicate)
).


% 	($domain playsRoleInEventOfType 1 Object)

% 	($domain playsRoleInEventOfType 2 CaseRole)

% 	($domainSubclass playsRoleInEventOfType 3 Process)

% 	($domain playsRoleInEventOfType 4 TimePosition)

% 	($domain playsRoleInEventOfType 5 Object)


% ($documentation playsRoleInEventOfType EnglishLanguage "(&%playsRoleInEventOfType ?OBJ
% ?ROLE ?TYPE ?TIME ?PLACE) means that ?OBJ plays the role specified by
% ?ROLE in an instance of ?TYPE, which occurs at ?TIME and ?PLACE.")


fof( miloA3528, axiom,
	(![TYPE,TIME,PLACE,OBJ,ROLE]: 
		(
			(
				(
					(
						p__d__instance(PLACE,c__Object)
					)
				 &
					(
						p__d__instance(TIME,c__TimePosition)
					)
				 &
					(
						p__d__subclass(TYPE,c__Process)
					)
				 &
					(
						p__d__instance(ROLE,c__CaseRole)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__playsRoleInEventOfType(OBJ,ROLE,TYPE,TIME,PLACE)
					)
				)
			)
			=>
			(
				(?[EVENT]: 
					(
						(
							(
								p__d__instance(EVENT,c__Process)
							)
						 &
							(
								p__d__instance(EVENT,TYPE)
							)
						 &
							(
								p__time(EVENT,TIME)
							)
						 &
							(
								p__eventLocated(EVENT,PLACE)
							)
						 &
							(
								p__playsRoleInEvent(OBJ,ROLE,EVENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3529, axiom,
	(![EVENT,OBJ,ROLE,TYPE,TIME,PLACE]: 
		(
			(
				(
					(
						p__d__instance(EVENT,c__Process)
					)
				 &
					(
						p__d__instance(ROLE,c__CaseRole)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(TIME,c__TimePosition)
					)
				 &
					(
						p__d__instance(PLACE,c__Object)
					)
				 &
					(
						p__playsRoleInEvent(OBJ,ROLE,EVENT)
					)
				 &
					(
						p__d__instance(EVENT,TYPE)
					)
				 &
					(
						p__d__subclass(TYPE,c__Process)
					)
				 &
					(
						p__time(EVENT,TIME)
					)
				 &
					(
						p__eventLocated(EVENT,PLACE)
					)
				)
			)
			=>
			(
				p__playsRoleInEventOfType(OBJ,ROLE,TYPE,TIME,PLACE)
			)
		)
	)
).


fof( miloA3530, axiom,
	p__d__instance(c__locatedAtTime,c__TernaryPredicate)
).


% 	($domain locatedAtTime 1 Object)

% 	($domain locatedAtTime 2 TimePosition)

% 	($domain locatedAtTime 3 Object)


% ($documentation locatedAtTime
% EnglishLanguage "(&%locatedAtTime ?OBJ ?TIME ?PLACE) means
% that during the time specified by ?TIME, ?OBJ was in the
% location specified by ?PLACE.")


% 	(forall (?TIME ?OBJ ?PLACE)
% 		(<=> 
% 			(locatedAtTime ?OBJ ?TIME ?PLACE)
% 			(holdsDuring ?TIME (located ?OBJ ?PLACE))
% 		)
% 	)

fof( miloA3535, axiom,
	(![ROLE,EVENT,OBJ,TIME,PLACE]: 
		(
			(
				(
					(
						p__d__instance(EVENT,c__Process)
					)
				 &
					(
						p__d__instance(ROLE,c__CaseRole)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(TIME,c__TimePosition)
					)
				 &
					(
						p__d__instance(PLACE,c__Object)
					)
				 &
					(
						p__playsRoleInEvent(OBJ,ROLE,EVENT)
					)
				 &
					(
						p__time(EVENT,TIME)
					)
				 &
					(
						p__eventLocated(EVENT,PLACE)
					)
				)
			)
			=>
			(
				p__locatedAtTime(OBJ,TIME,PLACE)
			)
		)
	)
).


% ($comment 
% ;; NB: This needs more work.  The topic of ID strings, ID objects
% ;; (e.g., finger prints, DNA sequences) and their use for both
% ;; identification and deception merits an entire ontology of its own.
% ;; deceptiveIdentifier
% )

fof( miloA3536, axiom,
	p__d__instance(c__deceptiveIdentifier,c__BinaryPredicate)
).


fof( miloA3537, axiom,
	p__d__instance(c__deceptiveIdentifier,c__AsymmetricRelation)
).


% 	($domain deceptiveIdentifier 1 ContentBearingObject)

% 	($domain deceptiveIdentifier 2 Agent)

fof( miloA3540, axiom,
	p__subrelation(c__deceptiveIdentifier,c__refers)
).


fof( miloA3541, axiom,
	p__subrelation(c__alias,c__deceptiveIdentifier)
).



% ($documentation deceptiveIdentifier EnglishLanguage "(&%deceptiveIdentifier ?OBJ ?AGENT)
% means that ?AGENT presents ?OBJ as a representation of ?AGENT's `true'
% identity, when in fact it is not.")


fof( miloA3542, axiom,
	p__d__instance(c__stranger,c__BinaryPredicate)
).



% ($documentation stranger EnglishLanguage "(&%stranger ?H1
% ?H2) means that ?H1 has not met ?H2, or, in other
% words, (&%not (&%acquaintance ?H1 ?H2)).  Statements made
% with &%stranger should be temporally specified with
% &%holdsDuring.  Note that &%stranger is not symmetric,
% meaning that ?H2 might know ?H1.  For the symmetric version,
% see &%mutualStranger.")


% 	($domain stranger 1 Human)

% 	($domain stranger 2 Human)

fof( miloA3545, axiom,
	p__disjointRelation(c__stranger,c__acquaintance)
).


fof( miloA3546, axiom,
	p__d__instance(c__mutualStranger,c__BinaryPredicate)
).


fof( miloA3547, axiom,
	p__d__instance(c__mutualStranger,c__SymmetricRelation)
).



% ($documentation mutualStranger EnglishLanguage "(&%mutualStranger ?H1 ?H2) means that ?H1
% and ?H2 have not met each other and do not know each other.  Statements
% made with this predicate should be temporally specified with
% &%holdsDuring.  See also the weaker, non-symmetric version of this
% predicate, &%stranger.")


% 	($domain mutualStranger 1 Human)

% 	($domain mutualStranger 2 Human)

fof( miloA3550, axiom,
	p__subrelation(c__mutualStranger,c__stranger)
).


fof( miloA3551, axiom,
	p__disjointRelation(c__mutualStranger,c__mutualAcquaintance)
).


fof( miloA3552, axiom,
	p__d__instance(c__domesticPartner,c__BinaryPredicate)
).


fof( miloA3553, axiom,
	p__d__instance(c__domesticPartner,c__SymmetricRelation)
).


fof( miloA3554, axiom,
	p__d__instance(c__domesticPartner,c__IntentionalRelation)
).



% ($documentation domesticPartner EnglishLanguage "(&%holdsDuring ?T1
% (&%domesticPartner ?H1 ?H2)) means that during the time ?T1, ?H1
% and ?H2 live together and share a common domestic life but are
% not joined in a traditional marriage, a common-law marriage, or a
% civil union.")


% 	($domain domesticPartner 1 Human)

% 	($domain domesticPartner 2 Human)

fof( miloA3557, axiom,
	p__disjointRelation(c__spouse,c__domesticPartner)
).


fof( miloA3558, axiom,
	p__subrelation(c__domesticPartner,c__cohabitant)
).


fof( miloA3559, axiom,
	p__d__instance(c__legalGuardian,c__BinaryPredicate)
).


fof( miloA3560, axiom,
	p__d__instance(c__legalGuardian,c__AntisymmetricRelation)
).



% ($documentation legalGuardian EnglishLanguage "(&%holdsDuring ?T1 (&%legalGuardian ?H1
% ?H2)) means that during the time ?T1, ?H2 has legal authority over
% ?H1, and is responsible for looking after ?H1's interests.")


% 	($domain legalGuardian 1 Human)

% 	($domain legalGuardian 2 Human)

fof( miloA3563, axiom,
	(![PLACE,OBJ,TIME,REGION]: 
		(
			(
				(
					(
						p__d__instance(PLACE,c__GeographicArea)
					)
				 &
					(
						p__d__instance(TIME,c__TimePosition)
					)
				 &
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(REGION,c__GeographicArea)
					)
				 &
					(
						p__locatedAtTime(OBJ,TIME,PLACE)
					)
				 &
					(
						p__geographicSubregion(PLACE,REGION)
					)
				)
			)
			=>
			(
				p__locatedAtTime(OBJ,TIME,REGION)
			)
		)
	)
).


fof( miloA3564, axiom,
	p__d__subclass(c__Seating,c__Guiding)
).



% ($documentation Seating EnglishLanguage "Guiding someone to a &%Seat, e.g. as when an usher 
% shows someone to a &%Seat in an &%Auditorium.")


fof( miloA3565, axiom,
	(![S]: 
		(
			(
				p__d__instance(S,c__Seating)
			)
			=>
			(
				(?[P,H]: 
					(
						(
							(
								p__experiencer(S,H)
							)
						 &
							(
								p__d__instance(H,c__Human)
							)
						 &
							(
								p__destination(S,P)
							)
						 &
							(
								p__d__instance(P,c__Seat)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3566, axiom,
	p__d__subclass(c__Signalling,c__Guiding)
).



% ($documentation Signalling EnglishLanguage "Signalling is the subclass of &%Guiding 
% processes in which an agent, animate or inanimate, sends a signal to 
% another &%Object.  In many cases, this signal will be an electrical or 
% electronic one.  Some signals may directly control the behavior of 
% the object signalled, while others may merely cause information to be 
% presented.  Instances of electrical Signalling are typically more 
% complex than simply than operation of a &%DeviceSwitch, though in some 
% cases, Signalling involves remote activation of such a switch by another 
% device.")


% ($comment 
% ;; Process Types for arrest and transportation
% )

fof( miloA3567, axiom,
	p__d__subclass(c__AchievingControl,c__Guiding)
).



% ($documentation AchievingControl EnglishLanguage "&%AchievingControl is the
% class of all events in which an &%Agent gains physical
% control over some object.")


fof( miloA3568, axiom,
	p__d__instance(c__controlled,c__CaseRole)
).



% ($documentation controlled EnglishLanguage
% "(&%controlled ?EVENT ?OBJECT) means that during the
% &%AchievingControl denoted by ?EVENT, ?OBJECT comes to be
% physically controlled by an &%Agent.")


fof( miloA3569, axiom,
	p__subrelation(c__controlled,c__patient)
).


% 	($domain controlled 1 AchievingControl)

% 	($domain controlled 2 Object)

fof( miloA3572, axiom,
	p__d__instance(c__gainsControl,c__CaseRole)
).



% ($documentation gainsControl EnglishLanguage
% "(&%gainsControl ?EVENT ?AGENT) means that during ?EVENT, ?AGENT
% gains control of the &%patient (object).")


fof( miloA3573, axiom,
	p__subrelation(c__gainsControl,c__agent)
).


% 	($domain gainsControl 1 AchievingControl)

% 	($domain gainsControl 2 Agent)

fof( miloA3576, axiom,
	p__d__subclass(c__ChangeOfControl,c__AchievingControl)
).



% ($documentation ChangeOfControl EnglishLanguage
% "A &%ChangeOfControl is an event in which an &%agent gains
% physical control over some object that was previously controlled
% by a different &%agent.")


fof( miloA3577, axiom,
	p__d__instance(c__losesControl,c__CaseRole)
).


fof( miloA3578, axiom,
	p__subrelation(c__losesControl,c__experiencer)
).



% ($documentation losesControl EnglishLanguage
% "(&%losesControl ?EVENT ?AGENT) means that during ?EVENT, ?AGENT
% loses physical control of the &%controlled object.")


% 	($domain losesControl 1 ChangeOfControl)

% 	($domain losesControl 2 Agent)

fof( miloA3581, axiom,
	p__d__subclass(c__Capturing,c__ChangeOfControl)
).



% ($documentation Capturing EnglishLanguage
% "A &%Capturing is a &%ChangeOfControl event in which an &%Agent
% gains physical control over another &%Agent.")


fof( miloA3582, axiom,
	(![CAPTURE,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(CAPTURE,c__Capturing)
					)
				 &
					(
						p__controlled(CAPTURE,OBJ)
					)
				)
			)
			=>
			(
				p__d__instance(OBJ,c__Agent)
			)
		)
	)
).


fof( miloA3583, axiom,
	p__d__subclass(c__PlacingUnderArrest,c__Capturing)
).


fof( miloA3584, axiom,
	p__d__subclass(c__PlacingUnderArrest,c__LawEnforcement)
).



% ($documentation PlacingUnderArrest EnglishLanguage 
% "&%PlacingUnderArrest is the class of events in which a
% &%CognitiveAgent, typically a law enforcement professional,
% legally takes into custody a human or group of humans.")


fof( miloA3585, axiom,
	p__d__subclass(c__PlacingUnderArrest,c__SocialInteraction)
).


fof( miloA3586, axiom,
	p__d__subclass(c__PlacingUnderArrest,c__LegalAction)
).


fof( miloA3587, axiom,
	p__d__instance(c__arrested,c__CaseRole)
).



% ($documentation arrested EnglishLanguage 
% "(&%arrested ?EVENT ?AGENT) means that during ?EVENT, ?AGENT is
% taken into custody, typically by a representative of a law
% enforcement organization.")


% 	($domain arrested 1 PlacingUnderArrest)

% 	($domain arrested 2 Agent)

fof( miloA3590, axiom,
	p__subrelation(c__arrested,c__controlled)
).


fof( miloA3591, axiom,
	(![ARREST,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(ARREST,c__PlacingUnderArrest)
					)
				 &
					(
						p__agent(ARREST,AGENT)
					)
				)
			)
			=>
			(
				p__d__instance(AGENT,c__CognitiveAgent)
			)
		)
	)
).


fof( miloA3592, axiom,
	(![ARREST,OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Agent)
					)
				 &
					(
						p__d__instance(ARREST,c__PlacingUnderArrest)
					)
				 &
					(
						p__arrested(ARREST,OBJ)
					)
				)
			)
			=>
			(
				(
					p__d__instance(OBJ,c__Human)
				 |
					p__d__instance(OBJ,c__GroupOfPeople)
				)
			)
		)
	)
).


fof( miloA3593, axiom,
	(![AGENT,MEMBER,ARREST]: 
		(
			(
				(
					(
						p__d__instance(MEMBER,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(MEMBER,c__Agent)
					)
				 &
					(
						p__d__instance(ARREST,c__PlacingUnderArrest)
					)
				 &
					(
						p__arrested(ARREST,AGENT)
					)
				 &
					(
						p__d__instance(AGENT,c__GroupOfPeople)
					)
				 &
					(
						p__member(MEMBER,AGENT)
					)
				)
			)
			=>
			(
				(?[ARREST1]: 
					(
						(
							(
								p__d__instance(ARREST1,c__PlacingUnderArrest)
							)
						 &
							(
								p__arrested(ARREST1,MEMBER)
							)
						 &
							(
								p__subProcess(ARREST1,ARREST)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3594, axiom,
	(![PROC,SUB,LOC]: 
		(
			(
				(
					(
						p__d__instance(LOC,c__Object)
					)
				 &
					(
						p__d__instance(SUB,c__Process)
					)
				 &
					(
						p__d__instance(PROC,c__Process)
					)
				 &
					(
						p__eventLocated(PROC,LOC)
					)
				 &
					(
						p__subProcess(SUB,PROC)
					)
				)
			)
			=>
			(
				p__eventLocated(SUB,LOC)
			)
		)
	)
).


fof( miloA3595, axiom,
	(![IMPRISON,INTERVAL,AGENT]: 
		(
			(
				(
					(
						p__d__instance(IMPRISON,c__Imprisoning)
					)
				 &
					(
						p__detainee(IMPRISON,AGENT)
					)
				 &
					(
						p__d__instance(AGENT,c__Human)
					)
				 &
					(
						p__time(IMPRISON,INTERVAL)
					)
				 &
					(
						p__d__instance(INTERVAL,c__TimeInterval)
					)
				)
			)
			=>
			(
				(?[ARREST,TIME]: 
					(
						(
							(
								p__d__instance(TIME,c__TimeInterval)
							)
						 &
							(
								p__time(ARREST,TIME)
							)
						 &
							(
								p__earlier(TIME,INTERVAL)
							)
						 &
							(
								p__d__instance(ARREST,c__PlacingUnderArrest)
							)
						 &
							(
								p__arrested(ARREST,AGENT)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3596, axiom,
	p__d__instance(c__conveyance,c__CaseRole)
).



% ($documentation conveyance EnglishLanguage "(&%conveyance ?EVENT ?OBJ) means that
% ?OBJ is the &%Vehicle or other transportation device used in
% ?EVENT.")


fof( miloA3597, axiom,
	p__subrelation(c__conveyance,c__instrument)
).


% 	($domain conveyance 1 Transportation)

% 	($domain conveyance 2 TransportationDevice)

fof( miloA3600, axiom,
	(![VEHICLE,TRANSPORT]: 
		(
			(
				(
					(
						p__d__instance(TRANSPORT,c__Transportation)
					)
				 &
					(
						p__instrument(TRANSPORT,VEHICLE)
					)
				 &
					(
						p__d__instance(VEHICLE,c__RoadVehicle)
					)
				)
			)
			=>
			(
				p__d__instance(TRANSPORT,c__TransportViaRoadVehicle)
			)
		)
	)
).


fof( miloA3601, axiom,
	(![TRANSPORT,VEHICLE]: 
		(
			(
				(
					(
						p__d__instance(VEHICLE,c__TransportationDevice)
					)
				 &
					(
						p__d__instance(TRANSPORT,c__TransportViaRoadVehicle)
					)
				 &
					(
						p__conveyance(TRANSPORT,VEHICLE)
					)
				)
			)
			=>
			(
				p__d__instance(VEHICLE,c__RoadVehicle)
			)
		)
	)
).


fof( miloA3602, axiom,
	(![TRANSPORT]: 
		(
			(
				p__d__instance(TRANSPORT,c__TransportViaRoadVehicle)
			)
			=>
			(
				(?[DRIVING]: 
					(
						(
							(
								p__d__instance(DRIVING,c__Driving)
							)
						 &
							(
								p__subProcess(TRANSPORT,DRIVING)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3603, axiom,
	(![TRANSPORT,DRIVE,VEHICLE]: 
		(
			(
				(
					(
						p__d__instance(TRANSPORT,c__Transportation)
					)
				 &
					(
						p__subProcess(TRANSPORT,DRIVE)
					)
				 &
					(
						p__d__instance(DRIVE,c__Driving)
					)
				 &
					(
						p__instrument(TRANSPORT,VEHICLE)
					)
				 &
					(
						p__d__instance(VEHICLE,c__TransportationDevice)
					)
				)
			)
			=>
			(
				p__patient(DRIVE,VEHICLE)
			)
		)
	)
).


fof( miloA3604, axiom,
	(![VEHICLE,DRIVE]: 
		(
			(
				(
					(
						p__d__instance(DRIVE,c__Driving)
					)
				 &
					(
						p__patient(DRIVE,VEHICLE)
					)
				 &
					(
						p__d__instance(VEHICLE,c__RoadVehicle)
					)
				)
			)
			=>
			(
				(?[TRANSPORT]: 
					(
						(
							(
								p__d__instance(TRANSPORT,c__TransportViaRoadVehicle)
							)
						 &
							(
								p__subProcess(TRANSPORT,DRIVE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3605, axiom,
	(![DRIVING,TRANSPORT,DRIVER]: 
		(
			(
				(
					(
						p__d__instance(DRIVER,c__Agent)
					)
				 &
					(
						p__d__instance(DRIVING,c__Driving)
					)
				 &
					(
						p__subProcess(TRANSPORT,DRIVING)
					)
				 &
					(
						p__d__instance(TRANSPORT,c__Transportation)
					)
				 &
					(
						p__agent(DRIVING,DRIVER)
					)
				)
			)
			=>
			(
				p__transported(TRANSPORT,DRIVER)
			)
		)
	)
).


fof( miloA3606, axiom,
	(![DRIVING,TRANSPORT,DEST]: 
		(
			(
				(
					(
						p__d__instance(DRIVING,c__Driving)
					)
				 &
					(
						p__subProcess(TRANSPORT,DRIVING)
					)
				 &
					(
						p__d__instance(TRANSPORT,c__Transportation)
					)
				 &
					(
						p__destination(DRIVING,DEST)
					)
				)
			)
			=>
			(
				p__destination(TRANSPORT,DEST)
			)
		)
	)
).


fof( miloA3607, axiom,
	(![DRIVING,TRANSPORT,VEHICLE]: 
		(
			(
				(
					(
						p__d__instance(DRIVING,c__Driving)
					)
				 &
					(
						p__subProcess(TRANSPORT,DRIVING)
					)
				 &
					(
						p__d__instance(TRANSPORT,c__Transportation)
					)
				 &
					(
						p__d__instance(VEHICLE,c__Vehicle)
					)
				 &
					(
						p__patient(DRIVING,VEHICLE)
					)
				)
			)
			=>
			(
				p__conveyance(TRANSPORT,VEHICLE)
			)
		)
	)
).


fof( miloA3608, axiom,
	p__d__subclass(c__GasolineEngine,c__InternalCombustionEngine)
).



% ($documentation GasolineEngine EnglishLanguage "&%GasolineEngine is the subclass of 
% &%InternalCombustionEngines that use &%Gasoline as their resource.")


% 	(forall (?R)
% 		(=> 
% 			($instance ?R (OperatingFn GasolineEngine))
% 			(exists (?F)
% 				(and 
% 					($instance ?F Gasoline)
% 					(resource ?R ?F)
% 				)
% 			)
% 		)
% 	)

fof( miloA3610, axiom,
	p__d__subclass(c__DieselEngine,c__InternalCombustionEngine)
).



% ($documentation DieselEngine EnglishLanguage "&%DieselEngine is the subclass of 
% &%InternalCombustionEngines that use &%DieselFuel as their resource.")


% 	(forall (?P)
% 		(=> 
% 			($instance ?P (OperatingFn DieselEngine))
% 			(exists (?F)
% 				(and 
% 					($instance ?F DieselFuel)
% 					(resource ?P ?F)
% 				)
% 			)
% 		)
% 	)

fof( miloA3612, axiom,
	p__d__instance(c__typicalPart,c__BinaryPredicate)
).


fof( miloA3613, axiom,
	p__d__instance(c__typicalPart,c__SpatialRelation)
).


fof( miloA3614, axiom,
	p__relatedInternalConcept(c__typicalPart,c__part)
).



% ($documentation typicalPart EnglishLanguage "An instance of the first argument is typically 
% found as part of an instance of the second argument.  This is a 
% class-level relation roughly corresponding to &%part.  Note that this does 
% not imply that such wholes typically have such parts.") 


% 	($domainSubclass typicalPart 1 Object)

% 	($domainSubclass typicalPart 2 Object)

fof( miloA3617, axiom,
	(![WHOLE,PART]: 
		(
			(
				(
					(
						p__d__subclass(WHOLE,c__Object)
					)
				 &
					(
						p__d__subclass(PART,c__Object)
					)
				 &
					(
						p__typicalPart(PART,WHOLE)
					)
				)
			)
			=>
			(
				(?[X,Y]: 
					(
						(
							(
								p__d__instance(X,c__Object)
							)
						 &
							(
								p__d__instance(Y,c__Object)
							)
						 &
							(
								p__d__instance(X,WHOLE)
							)
						 &
							(
								p__d__instance(Y,PART)
							)
						 &
							(
								p__part(Y,X)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?PART ?Y ?WHOLE ?X ?Z ?PARTPROB ?NOTPARTPROB)
% 		(=> 
% 			(and 
% 				(typicalPart ?PART ?WHOLE)
% 				($instance ?X ?PART)
% 				(equal ?PARTPROB (ProbabilityFn (exists ([|] ?Y []) (and ([|] ($instance ?Y ?WHOLE) ([|] (part ?X ?Y) []))))))
% 				(equal ?NOTPARTPROB (ProbabilityFn (not (exists ([|] ?Z []) (and ([|] ($instance ?Z ?WHOLE) ([|] (part ?X ?Z) [])))))))
% 			)
% 			(greaterThan ?PARTPROB ?NOTPARTPROB)
% 		)
% 	)

fof( miloA3619, axiom,
	p__d__instance(c__typicallyContainsPart,c__BinaryPredicate)
).


fof( miloA3620, axiom,
	p__d__instance(c__typicallyContainsPart,c__SpatialRelation)
).


fof( miloA3621, axiom,
	p__relatedInternalConcept(c__typicallyContainsPart,c__part)
).



% ($documentation typicallyContainsPart EnglishLanguage "An instance of the second argument typically 
% contains an instance of the first argument.  This is a 
% class-level relation roughly corresponding to &%part.  Note that this does 
% not imply that such parts typically have such wholes.") 


% 	($domainSubclass typicallyContainsPart 1 Object)

% 	($domainSubclass typicallyContainsPart 2 Object)

fof( miloA3624, axiom,
	(![WHOLE,PART]: 
		(
			(
				(
					(
						p__d__subclass(WHOLE,c__Object)
					)
				 &
					(
						p__d__subclass(PART,c__Object)
					)
				 &
					(
						p__typicallyContainsPart(PART,WHOLE)
					)
				)
			)
			=>
			(
				(?[X,Y]: 
					(
						(
							(
								p__d__instance(X,c__Object)
							)
						 &
							(
								p__d__instance(Y,c__Object)
							)
						 &
							(
								p__d__instance(X,WHOLE)
							)
						 &
							(
								p__d__instance(Y,PART)
							)
						 &
							(
								p__part(Y,X)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?WHOLE ?X1 ?PART ?X2 ?Y ?PARTPROB ?NOTPARTPROB)
% 		(=> 
% 			(and 
% 				(typicallyContainsPart ?PART ?WHOLE)
% 				($instance ?Y ?WHOLE)
% 				(equal ?PARTPROB (ProbabilityFn (exists ([|] ?X1 []) (and ([|] ($instance ?X1 ?PART) ([|] (part ?X1 ?Y) []))))))
% 				(equal ?NOTPARTPROB (ProbabilityFn (not (exists ([|] ?X2 []) (and ([|] ($instance ?X2 ?PART) ([|] (part ?X2 ?Y) [])))))))
% 			)
% 			(greaterThan ?PARTPROB ?NOTPARTPROB)
% 		)
% 	)

fof( miloA3626, axiom,
	p__d__instance(c__initialPart,c__BinaryPredicate)
).


fof( miloA3627, axiom,
	p__d__instance(c__initialPart,c__SpatialRelation)
).


fof( miloA3628, axiom,
	p__relatedInternalConcept(c__initialPart,c__part)
).



% ($documentation initialPart EnglishLanguage "Every instance of the first argument is initially 
% found as part of an instance of the second argument, even though it 
% might lose that part later in its lifetime.  While the part must initially 
% exist as part of a whole, this does not say that each whole necessarily initially  
% contains such a part.  For example, a thumb must at some time have been 
% part of a hand, but every hand need not have a thumb, even at birth.  This 
% is a class-level relation roughly corresponding to &%part.") 


% 	($domainSubclass initialPart 1 Object)

% 	($domainSubclass initialPart 2 Object)

% 	(forall (?C2 ?C1 ?PART)
% 		(=> 
% 			(and 
% 				(initialPart ?C2 ?C1)
% 				($instance ?PART ?C2)
% 			)
% 			(exists (?WHOLE)
% 				(and 
% 					($instance ?WHOLE ?C1)
% 					(holdsDuring (BeginFn (WhenFn ?PART)) (part ?PART ?WHOLE))
% 				)
% 			)
% 		)
% 	)

fof( miloA3632, axiom,
	p__initialPart(c__AnimalAnatomicalStructure,c__Animal)
).


fof( miloA3633, axiom,
	p__d__instance(c__initiallyContainsPart,c__BinaryPredicate)
).


fof( miloA3634, axiom,
	p__d__instance(c__initiallyContainsPart,c__SpatialRelation)
).


fof( miloA3635, axiom,
	p__relatedInternalConcept(c__initiallyContainsPart,c__part)
).



% ($documentation initiallyContainsPart EnglishLanguage "Every instance of the second argument initially 
% contains an instance of the first argument, even though it 
% might lose that part later in its lifetime.  Every normal human starts life with an
% appendix for example.  While the whole must initially 
% contain such a part, this does not say that each part necessarily initially  
% exists as part of such a whole.   This is a class-level relation roughly 
% corresponding to &%part.") 


% 	($domainSubclass initiallyContainsPart 1 Object)

% 	($domainSubclass initiallyContainsPart 2 Object)

% 	(forall (?C1 ?C2 ?WHOLE)
% 		(=> 
% 			(and 
% 				(initiallyContainsPart ?C2 ?C1)
% 				($instance ?WHOLE ?C1)
% 			)
% 			(exists (?PART)
% 				(and 
% 					($instance ?PART ?C2)
% 					(holdsDuring (BeginFn (WhenFn ?WHOLE)) (part ?PART ?WHOLE))
% 				)
% 			)
% 		)
% 	)

fof( miloA3639, axiom,
	p__d__subclass(c__CausingHappiness,c__Process)
).



% ($documentation CausingHappiness EnglishLanguage "Any &%Process whose result is that the 
% patient of the process is happy.")


% 	(forall (?C ?P)
% 		(=> 
% 			(and 
% 				($instance ?C CausingHappiness)
% 				(patient ?C ?P)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?C)) (not (attribute ?P Happiness)))
% 				(holdsDuring (EndFn (WhenFn ?C)) (attribute ?P Happiness))
% 			)
% 		)
% 	)

fof( miloA3641, axiom,
	p__d__subclass(c__CausingPain,c__CausingUnhappiness)
).



% ($documentation CausingPain EnglishLanguage "Any &%Process whose result is that the 
% patient of the process is in &%Pain.")


fof( miloA3642, axiom,
	p__d__subclass(c__CausingUnhappiness,c__Process)
).



% ($documentation CausingUnhappiness EnglishLanguage "Any &%Process whose result is that the 
% patient of the process is unhappy.")


% 	(forall (?C ?P)
% 		(=> 
% 			(and 
% 				($instance ?C CausingHappiness)
% 				(patient ?C ?P)
% 			)
% 			(and 
% 				(holdsDuring (BeginFn (WhenFn ?C)) (not (attribute ?P Unhappiness)))
% 				(holdsDuring (EndFn (WhenFn ?C)) (attribute ?P Unhappiness))
% 			)
% 		)
% 	)

fof( miloA3644, axiom,
	p__d__subclass(c__Lengthening,c__Increasing)
).



% ($documentation Lengthening EnglishLanguage "&%Increasing the length of something.")


% 	(forall (?L ?O)
% 		(=> 
% 			(and 
% 				($instance ?L Lengthening)
% 				(patient ?L ?O)
% 			)
% 			(exists (?L1 ?L2)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?L)) (length ?O ?L1))
% 					(holdsDuring (EndFn (WhenFn ?L)) (length ?O ?L2))
% 					(greaterThan ?L2 ?L1)
% 				)
% 			)
% 		)
% 	)

fof( miloA3646, axiom,
	p__d__subclass(c__Saving,c__Increasing)
).



% ($documentation Saving EnglishLanguage "Any instance of &%Increasing where the &%PhysicalQuantity 
% involved is a &%CurrencyMeasure.  This includes saving in a financial account
% as well as stuffing gold bars under the matress, or a squirrel saving nuts
% for winter.")


% 	(forall (?S ?A ?O)
% 		(=> 
% 			(and 
% 				($instance ?S Saving)
% 				(patient ?S ?O)
% 				(agent ?S ?A)
% 			)
% 			(exists (?Q1 ?Q2)
% 				(and 
% 					(holdsDuring (BeginFn (WhenFn ?S)) (monetaryValue ?O ?Q1))
% 					(holdsDuring (EndFn (WhenFn ?S)) (monetaryValue ?O ?Q2))
% 					(possesses ?A ?O)
% 					(lessThan ?Q1 ?Q2)
% 				)
% 			)
% 		)
% 	)


% ($documentation financialAsset EnglishLanguage "A predicate that relates an &%Agent to any 
% item of economic value owned by the &%Agent.  Examples of financial assets 
% are cash, securities, accounts receivable, inventory, office equipment, a 
% house, a car, and other property.")


% 	($domain financialAsset 1 Agent)

% 	($domain financialAsset 2 Object)

fof( miloA3650, axiom,
	p__subrelation(c__financialAsset,c__possesses)
).


fof( miloA3651, axiom,
	(![P,A]: 
		(
			(
				(
					(
						p__d__instance(A,c__Object)
					)
				 &
					(
						p__d__instance(P,c__Agent)
					)
				 &
					(
						p__financialAsset(P,A)
					)
				)
			)
			=>
			(
				(?[V]: 
					(
						(
							(
								p__d__instance(V,c__CurrencyMeasure)
							)
						 &
							(
								p__monetaryValue(A,V)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3652, axiom,
	p__d__subclass(c__Barking,c__RadiatingSound)
).



% ($documentation Barking EnglishLanguage "Any instance of &%RadiatingSound which is produced 
% by a &%Canine.")


fof( miloA3653, axiom,
	(![B]: 
		(
			(
				p__d__instance(B,c__Barking)
			)
			=>
			(
				(?[D]: 
					(
						(
							(
								p__d__instance(D,c__Canine)
							)
						 &
							(
								p__agent(B,D)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3654, axiom,
	p__d__subclass(c__Menstruation,c__OrganOrTissueProcess)
).



% ($documentation Menstruation EnglishLanguage "A periodic discharge of &%Blood and other 
% &%BiologicalSubstances by &%Females that is part of a readjustment of 
% the uterus.")


fof( miloA3655, axiom,
	p__d__subclass(c__Organification,c__OrganOrTissueProcess)
).



% ($documentation Organification EnglishLanguage "Any &%BiologicalProcess that results in 
% the formation of an &%Organ.")


fof( miloA3656, axiom,
	(![P]: 
		(
			(
				p__d__instance(P,c__Organification)
			)
			=>
			(
				(?[O]: 
					(
						(
							(
								p__d__instance(O,c__Organ)
							)
						 &
							(
								p__result(P,O)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3657, axiom,
	p__d__subclass(c__BiologicalConception,c__OrganOrTissueProcess)
).


% 	(relatedInternalConcept BiologicalConception SexualReproduction)

% 	(relatedInternalConcept BiologicalConception Birth)

% 	(relatedInternalConcept BiologicalConception Mating)


% ($documentation BiologicalConception EnglishLanguage "The production of a zygote from the fusion 
% of a male and female gamete.")


fof( miloA3661, axiom,
	(![SR]: 
		(
			(
				p__d__instance(SR,c__SexualReproduction)
			)
			=>
			(
				(?[C]: 
					(
						(
							(
								p__d__instance(C,c__BiologicalConception)
							)
						 &
							(
								p__subProcess(C,SR)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3662, axiom,
	p__d__subclass(c__ContraceptiveDevice,c__Device)
).



% ($documentation ContraceptiveDevice EnglishLanguage "&%Devices which permit sexual intercourse but 
% which reduce the likelihood of conception.")


% 	(forall (?C ?M ?SR)
% 		(=> 
% 			($instance ?C ContraceptiveDevice)
% 			(hasPurpose ?C (exists ([|] ?M []) (and ([|] ($instance ?M Mating) ([|] (patient ?M ?C) ([|] (not (exists ([|] ?SR []) (and ([|] ($instance ?SR BiologicalConception) ([|] (result ?M ?SR) []))))) []))))))
% 		)
% 	)

fof( miloA3664, axiom,
	p__d__subclass(c__BirdEgg,c__Egg)
).



% ($documentation BirdEgg EnglishLanguage "Any &%Egg that is produced by a &%Bird.")


fof( miloA3665, axiom,
	(![E]: 
		(
			(
				p__d__instance(E,c__BirdEgg)
			)
			=>
			(
				(?[SR,B]: 
					(
						(
							(
								p__d__instance(SR,c__SexualReproduction)
							)
						 &
							(
								p__agent(SR,B)
							)
						 &
							(
								p__d__instance(B,c__Bird)
							)
						 &
							(
								p__result(SR,E)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3666, axiom,
	p__d__subclass(c__Biopsy,c__DiagnosticProcess)
).


fof( miloA3667, axiom,
	p__d__subclass(c__Biopsy,c__Removing)
).



% ($documentation Biopsy EnglishLanguage "Any &%DiagnosticProcess which involves the examination of 
% &%BodySubstances taken from a living &%Organism.")


fof( miloA3668, axiom,
	(![B,BS]: 
		(
			(
				(
					(
						p__d__instance(B,c__Biopsy)
					)
				 &
					(
						p__patient(B,BS)
					)
				)
			)
			=>
			(
				p__d__instance(BS,c__BodySubstance)
			)
		)
	)
).


fof( miloA3669, axiom,
	p__d__subclass(c__Mating,c__OrganismProcess)
).



% ($documentation Mating EnglishLanguage "Any process of sexual intercourse between two &%Humans 
% or &%Animals.")


fof( miloA3670, axiom,
	p__d__subclass(c__Raping,c__Mating)
).


fof( miloA3671, axiom,
	p__d__subclass(c__Raping,c__CriminalAction)
).



% ($documentation Raping EnglishLanguage "Any instance of &%Mating where one participant does not 
% consent.  This is limited to acts between &%Humans.")


fof( miloA3672, axiom,
	(![R]: 
		(
			(
				p__d__instance(R,c__Raping)
			)
			=>
			(
				(?[A]: 
					(
						(
							(
								p__d__instance(A,c__CognitiveAgent)
							)
						 &
							(
								p__experiencer(R,A)
							)
						 &
							(
								~ (
									p__wants(A,R)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3673, axiom,
	p__d__subclass(c__LayingEggs,c__OrganismProcess)
).



% ($documentation LayingEggs EnglishLanguage "Any &%OrganismProcess where an &%Egg is expelled 
% from the body of a &%Animal, e.g. a &%Bird or &%Reptile laying eggs.")


% 	(forall (?L ?A)
% 		(=> 
% 			(and 
% 				($instance ?L LayingEggs)
% 				(experiencer ?L ?A)
% 			)
% 			(exists (?E)
% 				(and 
% 					($instance ?E Egg)
% 					(patient ?L ?E)
% 					(holdsDuring (BeginFn (WhenFn ?L)) (part ?E ?A))
% 					(holdsDuring (EndFn (WhenFn ?L)) (not (part ?E ?A)))
% 				)
% 			)
% 		)
% 	)

fof( miloA3675, axiom,
	(![L,A]: 
		(
			(
				(
					(
						p__d__instance(A,c__Agent)
					)
				 &
					(
						p__d__instance(L,c__LayingEggs)
					)
				 &
					(
						p__experiencer(L,A)
					)
				)
			)
			=>
			(
				(
					(
						p__d__instance(A,c__Animal)
					)
				 &
					(
						p__attribute(A,c__Female)
					)
				)
			)
		)
	)
).


fof( miloA3676, axiom,
	p__d__instance(c__affiliatedOrganization,c__BinaryPredicate)
).


% 	($domain affiliatedOrganization 1 Organization)

% 	($domain affiliatedOrganization 2 Organization)


% ($documentation ideologicalAffiliationOfOrganization EnglishLanguage "(ideologicalAffiliationOfOrganization 
% ?ORG ?GOV) means that one of the goals of ?ORG is to realize the &%FormOfGovernment ?GOV.")


fof( miloA3679, axiom,
	p__d__instance(c__ideologicalAffiliationOfOrganization,c__BinaryPredicate)
).


% 	($domain ideologicalAffiliationOfOrganization 1 Organization)

% 	($domain ideologicalAffiliationOfOrganization 2 FormOfGovernment)


% ($documentation religiousAffiliationOfOrganization EnglishLanguage "(religiousAffiliationOfOrganization 
% ?ORG ?BELIEF) means that one of the goals of ?ORG is to advance the religious teachings 
% of the &%BeliefGroup ?BELIEF.")


fof( miloA3682, axiom,
	p__d__instance(c__religiousAffiliationOfOrganization,c__BinaryPredicate)
).


% 	($domain religiousAffiliationOfOrganization 1 Organization)

% 	($domain religiousAffiliationOfOrganization 2 BeliefGroup)


% ($documentation allegiance EnglishLanguage "(allegiance ?AGENT ?ENTITY) means that the &%CognitiveAgent 
% ?AGENT owes its allegiance to the political entity ?ENTITY.")


fof( miloA3685, axiom,
	p__d__instance(c__allegiance,c__BinaryPredicate)
).


% 	($domain allegiance 1 CognitiveAgent)

% 	($domain allegiance 2 CognitiveAgent)


% ($documentation ancestorOrganization EnglishLanguage "(ancestorOrganization ?ORG1 ?ORG2) means that 
% the &%Organization ?ORG1 descended from the &%Organization ?ORG2.")


fof( miloA3688, axiom,
	p__d__instance(c__ancestorOrganization,c__BinaryPredicate)
).


fof( miloA3689, axiom,
	p__d__instance(c__ancestorOrganization,c__TransitiveRelation)
).


fof( miloA3690, axiom,
	p__d__instance(c__ancestorOrganization,c__IrreflexiveRelation)
).


% 	($domain ancestorOrganization 1 Organization)

% 	($domain ancestorOrganization 2 Organization)

fof( miloA3693, axiom,
	p__disjointRelation(c__ancestorOrganization,c__subOrganization)
).



% ($documentation anniversary EnglishLanguage "(anniversary ?PHYSICAL ?TIME) means that 
% ?TIME is the class of TimeIntervals which mark the anniversary of 
% ?PHYSICAL.  For example, (anniversary Christmas (&%DayFn 35 &%December)) 
% means that Christmas is celebrated each year on the 25th of &%December.")


fof( miloA3694, axiom,
	p__d__instance(c__anniversary,c__BinaryPredicate)
).


fof( miloA3695, axiom,
	p__d__instance(c__anniversary,c__TemporalRelation)
).


% 	($domain anniversary 1 Physical)

% 	($domain anniversary 2 TimeInterval)


% ($documentation birthday EnglishLanguage "(birthday ?PERSON ?DAY) means that ?DAY is the 
% anniversary each year of the birth of ?PERSON.  For example, (birthday 
% &%WilliamJeffersonClinton (&%DayFn 19 &%August)) means that Bill Clinton's 
% birthday is &%August 19th.")


% 	($domain birthday 1 Human)

% 	($domain birthday 2 Day)

fof( miloA3700, axiom,
	p__subrelation(c__birthday,c__anniversary)
).



% ($documentation birthplace EnglishLanguage "(birthplace
% ?INDIV ?PLACE) means that the &%Animal ?INDIV was born at
% the location ?PLACE.  The location may be a geographic area
% or a building, such as a hospital.")


fof( miloA3701, axiom,
	p__d__instance(c__birthplace,c__BinaryPredicate)
).


% 	($domain birthplace 1 Animal)

% 	($domain birthplace 2 Object)

fof( miloA3704, axiom,
	(![INDIV,PLACE]: 
		(
			(
				(
					(
						p__d__instance(PLACE,c__Object)
					)
				 &
					(
						p__d__instance(INDIV,c__Animal)
					)
				 &
					(
						p__birthplace(INDIV,PLACE)
					)
				)
			)
			=>
			(
				(?[BIRTH]: 
					(
						(
							(
								p__d__instance(BIRTH,c__Birth)
							)
						 &
							(
								p__experiencer(BIRTH,INDIV)
							)
						 &
							(
								p__eventLocated(BIRTH,PLACE)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation birthdate EnglishLanguage "(birthdate ?PERSON ?DAY) means that ?DAY is the 
% &%Day on which the ?PERSON was born.")


fof( miloA3705, axiom,
	p__d__instance(c__birthdate,c__BinaryPredicate)
).


% 	($domain birthdate 1 Human)

% 	($domain birthdate 2 Day)

fof( miloA3708, axiom,
	(![P,D]: 
		(
			(
				(
					(
						p__d__instance(D,c__Day)
					)
				 &
					(
						p__d__instance(P,c__Human)
					)
				 &
					(
						p__birthdate(P,D)
					)
				)
			)
			=>
			(
				(?[B]: 
					(
						(
							(
								p__d__instance(B,c__Birth)
							)
						 &
							(
								p__experiencer(B,P)
							)
						 &
							(
								p__date(B,D)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation deathdate EnglishLanguage "(birthdate ?PERSON ?DAY) means that ?DAY is the 
% &%Day on which the ?PERSON died.")


% 	($domain deathdate 1 Human)

% 	($domain deathdate 2 Day)

fof( miloA3711, axiom,
	p__d__instance(c__deathdate,c__BinaryPredicate)
).


fof( miloA3712, axiom,
	(![P,T]: 
		(
			(
				(
					(
						p__d__instance(T,c__Day)
					)
				 &
					(
						p__d__instance(P,c__Human)
					)
				 &
					(
						p__deathdate(P,T)
					)
				)
			)
			=>
			(
				(?[D]: 
					(
						(
							(
								p__d__instance(D,c__Death)
							)
						 &
							(
								p__experiencer(D,P)
							)
						 &
							(
								p__date(D,T)
							)
						)
					)
				)
			)
		)
	)
).



% ($documentation deathplace EnglishLanguage "(deathplace
% ?INDIV ?PLACE) means that the &%Animal ?INDIV died at the
% location ?PLACE.  The location may be a geographic area or a
% building, such as a hospital.")


fof( miloA3713, axiom,
	p__d__instance(c__deathplace,c__BinaryPredicate)
).


% 	($domain deathplace 1 Animal)

% 	($domain deathplace 2 Object)

fof( miloA3716, axiom,
	(![P,L]: 
		(
			(
				(
					(
						p__d__instance(L,c__Object)
					)
				 &
					(
						p__d__instance(P,c__Animal)
					)
				 &
					(
						p__deathplace(P,L)
					)
				)
			)
			=>
			(
				(?[D]: 
					(
						(
							(
								p__d__instance(D,c__Death)
							)
						 &
							(
								p__experiencer(D,P)
							)
						 &
							(
								p__eventLocated(D,L)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3717, axiom,
	p__d__instance(c__equipmentCount,c__TernaryPredicate)
).


% 	($domain equipmentCount 1 Object)

% 	($domainSubclass equipmentCount 2 Device)

% 	($domain equipmentCount 3 Quantity)


% ($documentation equipmentCount EnglishLanguage 
% "(&%equipmentCount ?OBJECT ?TYPE ?QUANTITY) means that ?OBJECT 
% is equipped with devices of the type ?TYPE, in the number ?QUANTITY.  
% Equipment associated with an ?OBJECT may be a &%component of ?OBJECT 
% (such as the emergency oxygen system built into passenger jets) or it may 
% be a device simply located on or with ?OBJECT (such as a first aid kit).")



% ($documentation equipmentType EnglishLanguage "(equipmentType ?THING ?TYPE) means that 
% the &%Artifact ?THING has a component or attachment of &%Device ?TYPE. 
% See also &%equipmentTypeCount.")


fof( miloA3721, axiom,
	p__d__instance(c__equipmentType,c__BinaryPredicate)
).


% 	($domain equipmentType 1 Artifact)

% 	($domain equipmentType 2 Device)

fof( miloA3724, axiom,
	(![T,O]: 
		(
			(
				(
					(
						p__d__instance(T,c__Device)
					)
				 &
					(
						p__d__instance(O,c__Artifact)
					)
				 &
					(
						p__equipmentType(O,T)
					)
				)
			)
			=>
			(
				(?[D]: 
					(
						(
							(
								p__d__instance(D,c__Object)
							)
						 &
							(
								p__d__instance(D,T)
							)
						 &
							(
								(
									p__part(D,O)
								 |
									p__connected(D,O)
								)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of equipmentType is instance(Device), whereas the second argument of equipmentCount is subclass(Device)
% ;;
% ;;(=>
% ;;  (equipmentCount ?O ?T ?C)
% ;;  (equipmentType ?O ?T))
% )

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the second argument of equipmentType is instance(Device), whereas the second argument of equipmentCount is subclass(Device)
% ;;
% ;;(=>
% ;;  (equipmentType ?O ?T)
% ;;  (exists (?C)
% ;;    (and
% ;;      (greaterThanOrEqualTo ?C 1)
% ;;      (equipmentCount ?O ?T ?C))))
% )


% ($documentation grammaticalRelation EnglishLanguage "(grammaticalRelation ?PHRASE ?SENTENCE) 
% means that the &%Phrase ?PHRASE has a grammatical relation to the Sentence 
% ?SENTENCE, i.e. it is a subject, object, main verb, etc. of the ?SENTENCE.")


fof( miloA3725, axiom,
	p__d__instance(c__grammaticalRelation,c__BinaryPredicate)
).


% 	($domain grammaticalRelation 1 Phrase)

% 	($domain grammaticalRelation 2 Sentence)

% ($comment 
% ;; KJN: Moving this to Transportation.kif as TransitSystem is defined there
% ;;(documentation pathInSystem EnglishLanguage "(pathInSystem ?PATH ?SYSTEM) means that 
% ;;the &%Physical thing ?PATH consists of one or more connected routes in 
% ;;the &%PhysicalSystem ?SYSTEM.")
% ;;($instance pathInSystem BinaryPredicate)
% ;;(domain pathInSystem 1 Transitway)
% ;;(domain pathInSystem 2 TransitSystem)
% ;;(subrelation pathInSystem part)
% ;;
% ;;(=>
% ;;  (pathInSystem ?P ?S)
% ;;  (or
% ;;    (routeInSystem ?P ?S)
% ;;    (exists (?R1 ?R2)
% ;;      (and
% ;;        (routeInSystem ?R1 ?S)
% ;;        (routeInSystem ?R2 ?S)
% ;;        (part ?R1 ?P)
% ;;        (part ?R2 ?P)
% ;;        (connected ?R1 ?R2)))))
% )

fof( miloA3728, axiom,
	p__d__instance(c__distanceOnPath,c__BinaryPredicate)
).



% ($documentation distanceOnPath EnglishLanguage
% "(distanceOnPath ?DIST ?PATH) means that for a given path (which is a
% pathInSystem) that the distance of the route is the measurement ?DIST.")


% 	($domain distanceOnPath 1 ConstantQuantity)

% 	($domain distanceOnPath 2 Transitway)

% ($comment 
% ;; KJN: Moving this to Transportation.kif as TransitSystem is defined there
% ;;(documentation routeInSystem EnglishLanguage "(routeInSystem ?PART ?SYSTEM) means that 
% ;;the &%Transitway ?PART is an established route of the 
% ;;&%TransportationSystem ?SYSTEM.")
% ;;($instance routeInSystem BinaryPredicate)
% ;;(domain routeInSystem 1 Transitway)
% ;;(domain routeInSystem 2 TransitSystem)
% ;;(subrelation routeInSystem pathInSystem)
% ;;
% ;;(=>
% ;;  (and
% ;;    (subSystem ?S ?T)
% ;;  (routeInSystem ?P ?S))
% ;;  (routeInSystem ?P ?T))
% ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
% ;; Start: General relations on SymbolicStrings ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
% )

fof( miloA3731, axiom,
	p__d__instance(c__inString,c__BinaryPredicate)
).


% 	($domain inString 1 Character)

% 	($domain inString 2 SymbolicString)


% ($documentation inString EnglishLanguage "(&%inString ?&%Character
% ?&%SymbolicString) means that ?&%Character is &%part of
% ?&%SymbolicString.  See also &%subString.")


fof( miloA3734, axiom,
	p__subrelation(c__inString,c__part)
).


% ($comment 
% ;; NS: Narrowing part -> inString
% )

fof( miloA3735, axiom,
	(![CHAR,STRING]: 
		(
			(
				(
					(
						p__d__instance(STRING,c__SymbolicString)
					)
				 &
					(
						p__part(CHAR,STRING)
					)
				 &
					(
						p__d__instance(CHAR,c__Character)
					)
				)
			)
			=>
			(
				p__inString(CHAR,STRING)
			)
		)
	)
).


% ($comment 
% ;; NS: TO DO: create *NullString, by anaolgy with NullList.  A
% ;; (or, the) NullString is a SymbolicString comprising no
% ;; Characters.  The following rule in Merge.kif, which relates
% ;; SymbolicString to Character, will have to be changed if
% ;; NullString is to be a subclass of SymbolicString:
% ;;
% ;; (=>
% ;;     ($instance ?STRING SymbolicString)
% ;;     (exists (?PART)
% ;;         (and
% ;;             (part ?PART ?STRING)
% ;;             ($instance ?PART Character))))
% )

fof( miloA3736, axiom,
	p__d__instance(c__subString,c__AntisymmetricRelation)
).


fof( miloA3737, axiom,
	p__d__instance(c__subString,c__ReflexiveRelation)
).


fof( miloA3738, axiom,
	p__d__instance(c__subString,c__BinaryPredicate)
).


% 	($domain subString 1 SymbolicString)

% 	($domain subString 2 SymbolicString)


% ($documentation subString EnglishLanguage "(&%subString
% ?&%SymbolicString-1 ?&%SymbolicString-2) means that
% ?&%SymbolicString-1 is &%part of ?&%SymbolicString-2.
% ?&%SymbolicString-2 includes all the same &%Characters as
% ?&%SymbolicString-1 and in the same order, but
% ?&%SymbolicString-2 may include more &%Characters than
% ?&%SymbolicString-1.  See also &%inString.")


fof( miloA3741, axiom,
	p__subrelation(c__subString,c__part)
).


fof( miloA3742, axiom,
	(![S1,S2,L1,L2]: 
		(
			(
				(
					(
						p__d__instance(S2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(S1,c__SymbolicString)
					)
				 &
					(
						p__d__instance(L1,c__NonnegativeInteger)
					)
				 &
					(
						p__d__instance(L2,c__NonnegativeInteger)
					)
				 &
					(
						p__subString(S1,S2)
					)
				 &
					(
						( L1 = f__StringLengthFn1(S1) )
					)
				 &
					(
						( L2 = f__StringLengthFn1(S2) )
					)
				)
			)
			=>
			(
				p__lessThanOrEqualTo(L1,L2)
			)
		)
	)
).


fof( miloA3743, axiom,
	(![S1,CH,S2]: 
		(
			(
				(
					(
						p__d__instance(S2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(S1,c__SymbolicString)
					)
				 &
					(
						p__d__instance(CH,c__Character)
					)
				 &
					(
						p__subString(S1,S2)
					)
				 &
					(
						p__inString(CH,S1)
					)
				)
			)
			=>
			(
				p__inString(CH,S2)
			)
		)
	)
).


% ($comment 
% ;; NS: Note that character and string equality vs. identity might
% ;; be implementation issues.
% )

fof( miloA3744, axiom,
	p__d__instance(c__SubstringFn,c__TernaryFunction)
).


fof( miloA3745, axiom,
	p__d__instance(c__SubstringFn,c__PartialValuedRelation)
).


fof( miloA3746, axiom,
	p__d__instance(c__SubstringFn,c__SingleValuedRelation)
).


% 	($domain SubstringFn 1 SymbolicString)

% 	($domain SubstringFn 2 NonnegativeInteger)

% 	($domain SubstringFn 3 NonnegativeInteger)

% 	($range SubstringFn SymbolicString)


% ($documentation SubstringFn EnglishLanguage "(&%SubstringFn
% ?&%SymbolicString ?&%NonnegativeInteger-1
% ?&%NonnegativeInteger-2) denotes a string that is a &%subString
% of ?&%SymbolicString, begins with the &%Character at the index
% ?&%NonnegativeInteger-1, and ends with the &%Character at the
% index (&%SubtractionFn ?&%NonnegativeInteger-2 1).  The first
% &%Character in ?&%SymbolicString is denoted by the index 0.  If
% the value of ?&%NonnegativeInteger-1 or ?&%NonnegativeInteger-2
% is greater than the value of (&%StringLengthFn
% ?&%SymbolicString), or if ?&%NonnegativeInteger-1 is greater than
% ?&%NonnegativeInteger-2, the result of evaluating the
% &%SubstringFn expression is undefined.  Example: (&%equal
% &quot;Charle&quot; (&%SubstringFn &quot;Charles Darwin&quot; 0 6)).")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: ?SUB only appears in the antecendent, thus the atom (equal ?SUB (SubstringFn ?STRING ?START ?END) can be removed
% ;; Then ?LEN can be replaced with (StringLengthFn ?STRING) in the consequent, obtaining in particular (lessThan ?START (StringLengthFn ?STRING))
% ;; Since lessThan is irreflexive and ?START is a universally quantified variable not occurring elsewhere in the formula, the consequent is equivalent to false.
% ;;
% ;;(=>
% ;;  (and
% ;;    (equal ?SUB (SubstringFn ?STRING ?START ?END))
% ;;    (equal ?LEN (StringLengthFn ?STRING)))
% ;;  (and
% ;;    (lessThanOrEqualTo ?START ?END)
% ;;    (lessThan ?START ?LEN)
% ;;    (lessThanOrEqualTo ?END ?LEN)))
% )

fof( miloA3751, axiom,
	p__d__instance(c__StringLengthFn,c__UnaryFunction)
).


fof( miloA3752, axiom,
	p__d__instance(c__StringLengthFn,c__TotalValuedRelation)
).


fof( miloA3753, axiom,
	p__d__instance(c__StringLengthFn,c__SingleValuedRelation)
).


% 	($domain StringLengthFn 1 SymbolicString)

% 	($range StringLengthFn NonnegativeInteger)


% ($documentation StringLengthFn EnglishLanguage "This
% &%UnaryFunction takes a &%SymbolicString as its sole argument.
% The result of evaluating a term formed with &%StringLengthFn is a
% &%NonnegativeInteger that denotes the number of &%Characters in
% the &%SymbolicString.  Example: (&%equal 14 (&%StringLengthFn
% &quot;Charles Darwin&quot;)).")


fof( miloA3756, axiom,
	p__d__instance(c__stringLength,c__BinaryPredicate)
).


fof( miloA3757, axiom,
	p__d__instance(c__stringLength,c__TotalValuedRelation)
).


fof( miloA3758, axiom,
	p__d__instance(c__stringLength,c__SingleValuedRelation)
).


fof( miloA3759, axiom,
	p__d__instance(c__stringLength,c__AsymmetricRelation)
).


% 	($domain stringLength 1 NonnegativeInteger)

% 	($domain stringLength 2 SymbolicString)


% ($documentation stringLength EnglishLanguage "(&%stringLength
% ?&%NonnegativeInteger ?&%SymbolicString) means that the number of
% &%Characters in ?&%SymbolicString is ?&%NonnegativeInteger.
% Example: (&%stringLength 14 &quot;Charles Darwin&quot;), which is a
% &%True &%Sentence.")


fof( miloA3762, axiom,
	(![INT,STRING]: 
		(
			(
				(
					(
						p__d__instance(STRING,c__SymbolicString)
					)
				 &
					(
						p__d__instance(INT,c__NonnegativeInteger)
					)
				)
			)
			=>
			(
				(
					p__stringLength(INT,STRING)
				)
				<=>
				(
					( INT = f__StringLengthFn1(STRING) )
				)
			)
		)
	)
).


fof( miloA3763, axiom,
	p__d__instance(c__StringConcatenateFn,c__BinaryFunction)
).


fof( miloA3764, axiom,
	p__d__instance(c__StringConcatenateFn,c__TotalValuedRelation)
).


fof( miloA3765, axiom,
	p__d__instance(c__StringConcatenateFn,c__SingleValuedRelation)
).


% 	($domain StringConcatenateFn 1 SymbolicString)

% 	($domain StringConcatenateFn 2 SymbolicString)

% 	($range StringConcatenateFn SymbolicString)


% ($documentation StringConcatenateFn EnglishLanguage "The result of
% applying this &%Function to two &%SymbolicString arguments is a
% third &%SymbolicString that is the concatenation of the two
% arguments.  Example: (&%equal &quot;Charles
% Darwin&quot; (&%StringConcatenateFn &quot;Charles &quot; &quot;Darwin&quot;)).")


fof( miloA3769, axiom,
	p__d__instance(c__stringConcatenation,c__TernaryPredicate)
).


fof( miloA3770, axiom,
	p__d__instance(c__stringConcatenation,c__TotalValuedRelation)
).


fof( miloA3771, axiom,
	p__d__instance(c__stringConcatenation,c__SingleValuedRelation)
).


% 	($domain stringConcatenation 1 SymbolicString)

% 	($domain stringConcatenation 2 SymbolicString)

% 	($domain stringConcatenation 3 SymbolicString)


% ($documentation stringConcatenation
% EnglishLanguage "(&%stringConcatenation ?&%SymbolicString-1
% ?&%SymbolicString-2 ?&%SymbolicString-3) means that
% ?&%SymbolicString-3 can be formed by appending
% ?&%SymbolicString-1 and ?&%SymbolicString-2, in order.
% Example: (&%stringConcatenation &quot;Charles &quot; &quot;Darwin&quot; &quot;Charles
% Darwin&quot;) is a &%True &%Sentence.")


fof( miloA3775, axiom,
	(![S3,S1,S2]: 
		(
			(
				(
					(
						p__d__instance(S3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(S1,c__SymbolicString)
					)
				 &
					(
						p__d__instance(S2,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__stringConcatenation(S1,S1,S3)
				)
				<=>
				(
					( S3 = f__StringConcatenateFn2(S1,S2) )
				)
			)
		)
	)
).


fof( miloA3776, axiom,
	p__d__instance(c__precedesInString,c__TernaryPredicate)
).


% 	($domain precedesInString 1 SymbolicString)

% 	($domain precedesInString 2 SymbolicString)

% 	($domain precedesInString 3 SymbolicString)


% ($documentation precedesInString
% EnglishLanguage "(&%precedesInString ?&%SymbolicString-1
% ?&%SymbolicString-2 ?&%SymbolicString-3) means that
% ?&%SymbolicString-1 and ?&%SymbolicString-2 are &%subStrings of
% ?&%SymbolicString-3, and ?&%SymbolicString-1 occurs sequentially
% before ?&%SymbolicString-2 in ?&%SymbolicString-3.
% Example: (&%precedesInString &quot;Johann&quot; &quot;Bach&quot; &quot;Johann
% Sebastian Bach&quot;).")


fof( miloA3780, axiom,
	p__subrelation(c__stringConcatenation,c__precedesInString)
).


fof( miloA3781, axiom,
	(![S1,S2,S3]: 
		(
			(
				(
					(
						p__d__instance(S3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(S2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(S1,c__SymbolicString)
					)
				 &
					(
						p__precedesInString(S1,S2,S3)
					)
				)
			)
			=>
			(
				(
					(
						p__subString(S1,S3)
					)
				 &
					(
						p__subString(S2,S3)
					)
				)
			)
		)
	)
).


fof( miloA3782, axiom,
	(![S2,S1,S3,S4]: 
		(
			(
				(
					(
						p__d__instance(S4,c__SymbolicString)
					)
				 &
					(
						p__d__instance(S2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(S1,c__SymbolicString)
					)
				 &
					(
						p__d__instance(S3,c__SymbolicString)
					)
				 &
					(
						p__precedesInString(S1,S2,S4)
					)
				 &
					(
						p__precedesInString(S2,S3,S4)
					)
				)
			)
			=>
			(
				p__precedesInString(S1,S3,S4)
			)
		)
	)
).


% ($comment 
% ;; --------------------------------------------------------------------------------
% ;; Address and Telephone details adapted from Media.kif
% ;; --------------------------------------------------------------------------------
% ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;
% ;; Start: Identifiers ;;
% ;;;;;;;;;;;;;;;;;;;;;;;;
% ;;
% ;; "IdentifierComposite"
% ;; "IdentifierSyntaxMismatch"
% ;; "IdentifierType"
% )

fof( miloA3783, axiom,
	p__d__subclass(c__Descriptor,c__ContentBearingObject)
).


% ($comment 
% ;; "DescriptorComposite"
% ;; "DescriptorDesignation"
% ;; "DescriptorExtension"
% ;; "DescriptorSyntax"
% ;; "DescriptorType"
% )

fof( miloA3784, axiom,
	p__d__subclass(c__Name,c__Descriptor)
).



% ($documentation Name EnglishLanguage "&%Name denotes the &%Class
% of &%ContentBearingObjects that identify an &%Entity, typically
% in some linguistic form such as an epithet, given name, street
% address, etc.")


fof( miloA3785, axiom,
	p__d__subclass(c__Identifier,c__Name)
).



% ($documentation Identifier EnglishLanguage "&%Identifier is the
% &%Class of &%ContentBearingObjects that identify some entity,
% such as a bank account, a person, or a location (e.g., as
% identified by a specific street address or GPS coordinates),
% perhaps uniquely under some circumstances.")


fof( miloA3786, axiom,
	p__d__subclass(c__PlaceDescriptor,c__Descriptor)
).


fof( miloA3787, axiom,
	p__d__subclass(c__DescriptorPart,c__ContentBearingObject)
).


fof( miloA3788, axiom,
	p__d__subclass(c__NamePart,c__DescriptorPart)
).


fof( miloA3789, axiom,
	p__d__subclass(c__IdentifierPart,c__NamePart)
).


fof( miloA3790, axiom,
	p__d__subclass(c__PlaceID,c__PlaceDescriptor)
).


fof( miloA3791, axiom,
	p__d__subclass(c__LocalizablePlaceID,c__PlaceID)
).


fof( miloA3792, axiom,
	p__d__subclass(c__PlaceAddress,c__PlaceID)
).


fof( miloA3793, axiom,
	p__d__subclass(c__ContactSite,c__Object)
).



% ($documentation ContactSite EnglishLanguage "A &%ContactSite is an
% &%Object, typically a &%Place or a &%Residence or a
% &%CommunicationDevice such as a &%Telephone, that has some kind
% of address identifier and can serve as a point of contact for a
% &%Human or &%Organization.")


fof( miloA3794, axiom,
	p__d__subclass(c__TelephonyDevice,c__ContactSite)
).


fof( miloA3795, axiom,
	p__d__subclass(c__TelephonyDevice,c__CommunicationDevice)
).


fof( miloA3796, axiom,
	p__d__subclass(c__TelephonyDevice,c__ElectricDevice)
).



% ($documentation TelephonyDevice EnglishLanguage "A
% &%TelephonyDevice is a &%CommunicationDevice that, when connected
% to a &%TelephoneSystem, functions as an access point allowing end
% users (&%Humans or other &%Agents, such as autonomous/scheduled
% &%ComputerPrograms) to send or receive signals via the system.
% &%Telephones and &%FaxMachines are &%TelephonyDevices.  A given
% &%Computer may or may not function as a &%TelephonyDevice,
% depending on the &%ComputerPrograms it runs and the
% &%ComputerComponents that are part of it.")


fof( miloA3797, axiom,
	p__d__subclass(c__Telephone,c__TelephonyDevice)
).


% ($comment 
% ;; KJN: Moving to Merge.kif
% ;;($subclass LocalizablePlace GeographicArea)
% ;;
% ;; Address Elements (as collected from http://www.bitboost.com/ref/international-address-formats.html)
% ;; a.) Street Number (can contain letters) --> postStreetNumber from Media.kif
% ;; b.) Floor Code (can contain letters) --> floorCode
% ;; c.) Unit Number (can contain letters) --> unitNumber
% ;; d.) Street Name --> postStreet
% ;; e.) Subdivision / Neighborhood / Quarter --> postNeighborhood
% ;; f.) City --> postCity
% ;; g.) State / Territory --> postDistrict
% ;; h.) Country --> postCountry
% ;; i.) Post Office Box Number --> postPostOfficeBox
% ;; j.) Building Name --> names
% ;; k.) Province Code --> codeMapping
% ;; l.) Postal Code (can contain letters) --> postPostcodeArea
% ;;
% ;; changed canonicalPostPlaceName to canonicalPlaceName to denote that this can be 
% ;; applied to different types of areas (countries, continents, etc) and not only to 
% ;; LocalizablePlace.  Also, canonicalPostPlaceName has domain LocalizablePlace but 
% ;; it is applied to geographic areas that aren't subclassed or instantiated from 
% ;; LocalizablePlace
% )

fof( miloA3798, axiom,
	p__d__instance(c__canonicalPlaceName,c__TernaryPredicate)
).



% ($documentation canonicalPlaceName EnglishLanguage "(&%canonicalPlaceName ?PLACE 
% ?LANG ?STRING) means that in the &%Language ?LANG, the &%SymbolicString ?STRING 
% is a canonical name for the &%GeographicArea ?PLACE")


% 	($domain canonicalPlaceName 1 Region)

% 	($domain canonicalPlaceName 2 Language)

% 	($domain canonicalPlaceName 3 SymbolicString)

fof( miloA3802, axiom,
	(![LANG,STR,PLACE]: 
		(
			(
				(
					(
						p__d__instance(STR,c__SymbolicString)
					)
				 &
					(
						p__d__instance(LANG,c__Language)
					)
				 &
					(
						p__d__instance(PLACE,c__Region)
					)
				 &
					(
						p__canonicalPlaceName(PLACE,LANG,STR)
					)
				)
			)
			=>
			(
				p__names(STR,PLACE)
			)
		)
	)
).


% ($comment 
% ;; KJN: Removing this statement as it is tantamount to saying that all Stationary
% ;; Artifacts are also GeographicArea, which is false
% ;;($subclass StationaryArtifact LocalizablePlace)
% )

fof( miloA3803, axiom,
	p__d__subclass(c__PostalPlace,c__StationaryArtifact)
).


fof( miloA3804, axiom,
	p__d__subclass(c__PostalPlace,c__LocalizablePlace)
).


fof( miloA3805, axiom,
	p__d__subclass(c__PostalPlace,c__ContactSite)
).



% ($documentation PostalPlace EnglishLanguage "A &%PostalPlace is
% any &%LocalizablePlace that can have a postal address, and to
% which hardcopy mail (letters, packages, etc.) can be delivered.")


fof( miloA3806, axiom,
	p__d__subclass(c__MilitaryInstallation,c__PostalPlace)
).


fof( miloA3807, axiom,
	p__d__subclass(c__Residence,c__PostalPlace)
).


fof( miloA3808, axiom,
	p__d__subclass(c__PlaceOfCommerce,c__PostalPlace)
).


fof( miloA3809, axiom,
	p__d__instance(c__siteForContact,c__AsymmetricRelation)
).


fof( miloA3810, axiom,
	p__d__instance(c__siteForContact,c__BinaryPredicate)
).


% 	($domain siteForContact 1 ContactSite)

% 	($domain siteForContact 2 Agent)


% ($documentation siteForContact EnglishLanguage "(&%siteForContact
% ?&%ContactSite ?&%Agent) means that the &%Human or &%Organization
% ?&%Agent can be reached at or via the point of contact
% ?&%ContactSite.")


fof( miloA3813, axiom,
	p__d__instance(c__postContactSite,c__AsymmetricRelation)
).


fof( miloA3814, axiom,
	p__d__instance(c__postContactSite,c__BinaryPredicate)
).


% 	($domain postContactSite 1 PostalPlace)

% 	($domain postContactSite 2 Agent)


% ($documentation postContactSite
% EnglishLanguage "(&%postContactSite ?&%PostalPlace ?&%Agent)
% means that the &%Human or &%Organization ?&%Agent can be
% contacted by post (mail) at the location ?&%PostalPlace.")


fof( miloA3817, axiom,
	p__subrelation(c__postContactSite,c__siteForContact)
).


fof( miloA3818, axiom,
	p__d__instance(c__unitNumber,c__BinaryPredicate)
).



% ($documentation unitNumber EnglishLanguage "(&%unitNumber ?STR ?PLACE) means that 
% ?STR represents the particular unit or space within the building that a 
% &%PostalPlace is located")


% 	($domain unitNumber 1 SymbolicString)

% 	($domain unitNumber 2 PostalPlace)

fof( miloA3821, axiom,
	p__d__instance(c__floorCode,c__BinaryPredicate)
).



% ($documentation floorCode EnglishLanguage "(&%floorCode ?STR ?PLACE) means that ?STR 
% represents the &%BuildingLevel that a particular &%PostalPlace can be found at")


% 	($domain floorCode 1 SymbolicString)

% 	($domain floorCode 2 PostalPlace)

fof( miloA3824, axiom,
	(![PLACE,UNITSTR,FLRCODE]: 
		(
			(
				(
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				 &
					(
						p__d__instance(UNITSTR,c__SymbolicString)
					)
				 &
					(
						p__d__instance(FLRCODE,c__SymbolicString)
					)
				 &
					(
						p__unitNumber(UNITSTR,PLACE)
					)
				 &
					(
						p__floorCode(FLRCODE,PLACE)
					)
				)
			)
			=>
			(
				(?[UNIT,FLOOR]: 
					(
						(
							(
								p__d__instance(FLOOR,c__BuildingLevel)
							)
						 &
							(
								p__d__instance(UNIT,c__Room)
							)
						 &
							(
								p__located(UNIT,FLOOR)
							)
						 &
							(
								p__part(FLOOR,PLACE)
							)
						 &
							(
								p__names(UNITSTR,UNIT)
							)
						 &
							(
								p__names(FLRCODE,FLOOR)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3825, axiom,
	(![PLACE,UNITSTR,BLDG]: 
		(
			(
				(
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				 &
					(
						p__d__instance(UNITSTR,c__SymbolicString)
					)
				 &
					(
						p__d__instance(BLDG,c__Object)
					)
				 &
					(
						p__unitNumber(UNITSTR,PLACE)
					)
				 &
					(
						(![FLR]: 
							(
								(
									~ (
										p__d__instance(FLR,c__SymbolicString)
									)
								 |
									~ (
										p__floorCode(FLR,PLACE)
									)
								)
							)
						)
					)
				)
			)
			=>
			(
				(?[UNIT]: 
					(
						(
							(
								p__d__instance(UNIT,c__Room)
							)
						 &
							(
								p__names(UNITSTR,UNIT)
							)
						 &
							(
								p__located(UNIT,BLDG)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3826, axiom,
	p__d__subclass(c__Neighborhood,c__GeographicArea)
).



% ($documentation Neighborhood EnglishLanguage "&%Neighborhood refers to a 
% &%GeographicArea that is a subregion of a larger geographic area, such as a 
% &%City, normally with a distinctive feature")


% (termFormat EnglishLanguage Neighborhood "neighborhood")

fof( miloA3827, axiom,
	(![PLACE]: 
		(
			(
				p__d__instance(PLACE,c__Neighborhood)
			)
			=>
			(
				(?[AREA]: 
					(
						(
							(
								p__d__instance(AREA,c__GeographicArea)
							)
						 &
							(
								p__geographicSubregion(PLACE,AREA)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3828, axiom,
	p__d__instance(c__postNeighborhood,c__BinaryPredicate)
).


fof( miloA3829, axiom,
	p__d__instance(c__postNeighborhood,c__AsymmetricRelation)
).


fof( miloA3830, axiom,
	p__subrelation(c__postNeighborhood,c__located)
).



% ($documentation postNeighborhood EnglishLanguage "(&%postNeighborhood ?PLACE 
% ?NEIGHBORHOOD) means that ?PLACE is located in ?NEIGHBORHOOD")


% 	($domain postNeighborhood 1 PostalPlace)

% 	($domain postNeighborhood 2 Neighborhood)

fof( miloA3833, axiom,
	(![PLACE,GEO]: 
		(
			(
				(
					(
						p__d__instance(GEO,c__Neighborhood)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					(
						(
							p__located(PLACE,GEO)
						)
					 &
						(
							p__d__instance(PLACE,c__PostalPlace)
						)
					 &
						(
							p__d__instance(GEO,c__Neighborhood)
						)
					)
				)
				<=>
				(
					p__postNeighborhood(PLACE,GEO)
				)
			)
		)
	)
).


fof( miloA3834, axiom,
	(![NEIGHBORHOOD,PLACE,CITY]: 
		(
			(
				(
					(
						p__d__instance(NEIGHBORHOOD,c__Neighborhood)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				 &
					(
						p__postNeighborhood(PLACE,NEIGHBORHOOD)
					)
				 &
					(
						p__geographicSubregion(NEIGHBORHOOD,CITY)
					)
				 &
					(
						p__d__instance(CITY,c__City)
					)
				)
			)
			=>
			(
				p__postCity(PLACE,CITY)
			)
		)
	)
).


fof( miloA3835, axiom,
	(![NEIGHBORHOOD,PLACE,STATE]: 
		(
			(
				(
					(
						p__d__instance(NEIGHBORHOOD,c__Neighborhood)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				 &
					(
						p__postNeighborhood(PLACE,NEIGHBORHOOD)
					)
				 &
					(
						p__geographicSubregion(NEIGHBORHOOD,STATE)
					)
				 &
					(
						p__d__instance(STATE,c__StateOrProvince)
					)
				)
			)
			=>
			(
				p__postDistrict(PLACE,STATE)
			)
		)
	)
).


fof( miloA3836, axiom,
	p__d__instance(c__postCountry,c__AsymmetricRelation)
).


fof( miloA3837, axiom,
	p__d__instance(c__postCountry,c__BinaryPredicate)
).


% 	($domain postCountry 1 PostalPlace)

% 	($domain postCountry 2 GeopoliticalArea)

fof( miloA3840, axiom,
	p__subrelation(c__postCountry,c__located)
).



% ($documentation postCountry EnglishLanguage "(&%postCountry
% ?&%PostalPlace ?&%GeopoliticalArea) means that ?&%PostalPlace is
% located in the &%Nation or &%DependencyOrSpecialSovereigntyArea
% ?&%GeopoliticalArea.")


fof( miloA3841, axiom,
	(![PLACE,COUNTRY]: 
		(
			(
				(
					(
						p__d__instance(COUNTRY,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				 &
					(
						p__postCountry(PLACE,COUNTRY)
					)
				)
			)
			=>
			(
				(
					p__d__instance(COUNTRY,c__Nation)
				 |
					p__d__instance(COUNTRY,c__DependencyOrSpecialSovereigntyArea)
				)
			)
		)
	)
).


fof( miloA3842, axiom,
	(![PLACE,GEO]: 
		(
			(
				(
					(
						p__d__instance(GEO,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					(
						(
							p__located(PLACE,GEO)
						)
					 &
						(
							p__d__instance(PLACE,c__PostalPlace)
						)
					 &
						(
							(
								p__d__instance(GEO,c__Nation)
							 |
								p__d__instance(GEO,c__DependencyOrSpecialSovereigntyArea)
							)
						)
					)
				)
				<=>
				(
					p__postCountry(PLACE,GEO)
				)
			)
		)
	)
).


fof( miloA3843, axiom,
	(![CITY,PLACE,AREA]: 
		(
			(
				(
					(
						p__d__instance(CITY,c__City)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				 &
					(
						p__postCity(PLACE,CITY)
					)
				 &
					(
						p__geographicSubregion(CITY,AREA)
					)
				 &
					(
						p__d__instance(AREA,c__StateOrProvince)
					)
				)
			)
			=>
			(
				p__postDistrict(PLACE,AREA)
			)
		)
	)
).


fof( miloA3844, axiom,
	(![CITY,PLACE,AREA]: 
		(
			(
				(
					(
						p__d__instance(CITY,c__City)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				 &
					(
						p__d__instance(AREA,c__GeopoliticalArea)
					)
				 &
					(
						p__postCity(PLACE,CITY)
					)
				 &
					(
						p__geographicSubregion(CITY,AREA)
					)
				 &
					(
						(
							p__d__instance(AREA,c__Nation)
						 |
							p__d__instance(AREA,c__DependencyOrSpecialSovereigntyArea)
						)
					)
				)
			)
			=>
			(
				p__postCountry(PLACE,AREA)
			)
		)
	)
).


fof( miloA3845, axiom,
	p__d__instance(c__postDistrict,c__AsymmetricRelation)
).


fof( miloA3846, axiom,
	p__d__instance(c__postDistrict,c__BinaryPredicate)
).


% 	($domain postDistrict 1 PostalPlace)

% 	($domain postDistrict 2 StateOrProvince)

fof( miloA3849, axiom,
	p__subrelation(c__postDistrict,c__located)
).



% ($documentation postDistrict EnglishLanguage "(&%postDistrict
% ?&%PostalPlace ?&%StateOrProvince) means that ?&%PostalPlace is
% located in ?&%StateOrProvince.")


fof( miloA3850, axiom,
	(![PLACE,GEO]: 
		(
			(
				(
					(
						p__d__instance(GEO,c__StateOrProvince)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					(
						(
							p__located(PLACE,GEO)
						)
					 &
						(
							p__d__instance(PLACE,c__PostalPlace)
						)
					 &
						(
							p__d__instance(GEO,c__StateOrProvince)
						)
					)
				)
				<=>
				(
					p__postDistrict(PLACE,GEO)
				)
			)
		)
	)
).


fof( miloA3851, axiom,
	p__d__instance(c__postCity,c__AsymmetricRelation)
).


fof( miloA3852, axiom,
	p__d__instance(c__postCity,c__BinaryPredicate)
).


% 	($domain postCity 1 PostalPlace)

% 	($domain postCity 2 City)

fof( miloA3855, axiom,
	p__subrelation(c__postCity,c__located)
).



% ($documentation postCity EnglishLanguage "(&%postCity
% ?&%PostalPlace ?&%City) means that ?&%PostalPlace is located in
% ?&%City.")


fof( miloA3856, axiom,
	(![PLACE,GEO]: 
		(
			(
				(
					(
						p__d__instance(GEO,c__City)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					(
						(
							p__located(PLACE,GEO)
						)
					 &
						(
							p__d__instance(PLACE,c__PostalPlace)
						)
					 &
						(
							p__d__instance(GEO,c__City)
						)
					)
				)
				<=>
				(
					p__postCity(PLACE,GEO)
				)
			)
		)
	)
).


fof( miloA3857, axiom,
	p__d__subclass(c__PostcodeArea,c__LocalizablePlace)
).



% ($documentation PostcodeArea EnglishLanguage "An &%instance of
% &%PostcodeArea is a &%LocalizablePlace that is identified by a
% &%Postcode.")


fof( miloA3858, axiom,
	(![AREA]: 
		(
			(
				p__d__instance(AREA,c__PostcodeArea)
			)
			=>
			(
				(?[GEO]: 
					(
						(
							(
								p__d__instance(GEO,c__GeographicArea)
							)
						 &
							(
								p__geographicSubregion(AREA,GEO)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3859, axiom,
	p__d__instance(c__postPostcodeArea,c__AsymmetricRelation)
).


fof( miloA3860, axiom,
	p__d__instance(c__postPostcodeArea,c__BinaryPredicate)
).


% 	($domain postPostcodeArea 1 PostalPlace)

% 	($domain postPostcodeArea 2 PostcodeArea)

fof( miloA3863, axiom,
	p__subrelation(c__postPostcodeArea,c__located)
).



% ($documentation postPostcodeArea
% EnglishLanguage "(&%postPostcodeArea ?&%PostalPlace
% ?&%PostcodeArea) means that ?&%PostalPlace is located in
% ?&%PostcodeArea.")


fof( miloA3864, axiom,
	(![PLACE,AREA]: 
		(
			(
				(
					(
						p__d__instance(AREA,c__PostcodeArea)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					(
						(
							p__located(PLACE,AREA)
						)
					 &
						(
							p__d__instance(PLACE,c__PostalPlace)
						)
					 &
						(
							p__d__instance(AREA,c__PostcodeArea)
						)
					)
				)
				<=>
				(
					p__postPostcodeArea(PLACE,AREA)
				)
			)
		)
	)
).


fof( miloA3865, axiom,
	(![AREA,PLACE,CITY]: 
		(
			(
				(
					(
						p__d__instance(AREA,c__PostcodeArea)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				 &
					(
						p__postPostcodeArea(PLACE,AREA)
					)
				 &
					(
						p__geographicSubregion(AREA,CITY)
					)
				 &
					(
						p__d__instance(CITY,c__City)
					)
				)
			)
			=>
			(
				p__postCity(PLACE,CITY)
			)
		)
	)
).


fof( miloA3866, axiom,
	(![AREA,PLACE,GEO]: 
		(
			(
				(
					(
						p__d__instance(AREA,c__PostcodeArea)
					)
				 &
					(
						p__d__instance(PLACE,c__PostalPlace)
					)
				 &
					(
						p__postPostcodeArea(PLACE,AREA)
					)
				 &
					(
						p__geographicSubregion(AREA,GEO)
					)
				 &
					(
						p__d__instance(GEO,c__StateOrProvince)
					)
				)
			)
			=>
			(
				p__postDistrict(PLACE,GEO)
			)
		)
	)
).


fof( miloA3867, axiom,
	p__d__instance(c__postStreet,c__AsymmetricRelation)
).


fof( miloA3868, axiom,
	p__d__instance(c__postStreet,c__BinaryPredicate)
).


% 	($domain postStreet 1 PostalPlace)

% 	($domain postStreet 2 Roadway)


% ($documentation postStreet EnglishLanguage "(&%postStreet
% ?&%PostalPlace ?&%Roadway) means that ?&%PostalPlace is
% &%Adjacent to ?&%Roadway.")


fof( miloA3871, axiom,
	(![POSTPLACE,ROADWAY]: 
		(
			(
				(
					(
						p__d__instance(ROADWAY,c__Roadway)
					)
				 &
					(
						p__d__instance(POSTPLACE,c__PostalPlace)
					)
				 &
					(
						p__postStreet(POSTPLACE,ROADWAY)
					)
				)
			)
			=>
			(
				p__orientation(POSTPLACE,ROADWAY,c__Adjacent)
			)
		)
	)
).


fof( miloA3872, axiom,
	p__d__instance(c__postStreetNumber,c__AsymmetricRelation)
).


fof( miloA3873, axiom,
	p__d__instance(c__postStreetNumber,c__BinaryPredicate)
).


% 	($domain postStreetNumber 1 SymbolicString)

% 	($domain postStreetNumber 2 PostalPlace)


% ($documentation postStreetNumber
% EnglishLanguage "(&%postStreetNumber ?&%SymbolicString
% ?&%PostalPlace) means that ?&%SymbolicString identifies the
% sub-city block or building level location of a ?&%PostalPlace.
% ?&%SymbolicString need not consist exclusively of
% &%DigitCharacters.")


fof( miloA3876, axiom,
	p__d__instance(c__postPostOfficeBox,c__AsymmetricRelation)
).


fof( miloA3877, axiom,
	p__d__instance(c__postPostOfficeBox,c__BinaryPredicate)
).


% 	($domain postPostOfficeBox 1 SymbolicString)

% 	($domain postPostOfficeBox 2 PostalPlace)


% ($documentation postPostOfficeBox
% EnglishLanguage "(&%postPostOfficeBox ?&%SymbolicString
% ?&%PostalPlace) means that ?&%SymbolicString identifies the post
% office box of a ?&%PostalPlace.  ?&%SymbolicString need not
% consist exclusively of &%DigitCharacters.")


fof( miloA3880, axiom,
	p__d__subclass(c__PostalAddressText,c__PlaceAddress)
).


fof( miloA3881, axiom,
	p__d__subclass(c__PostalAddressText,c__LocalizablePlaceID)
).


fof( miloA3882, axiom,
	p__d__subclass(c__PostalAddressText,c__SymbolicString)
).


fof( miloA3883, axiom,
	p__d__subclass(c__PostalAddressText,c__LinguisticExpression)
).


% ($comment 
% ;; KJN: Commenting this out for now to remove dependencies.  Might be good to have a
% ;; file that's AddressFormats.kif wherein we could put the different AddressText formats
% ;; for different Nations.
% ;;(=>
% ;;  (and
% ;;    (postCountry ?PLACE UnitedStates)
% ;;    (canonicalPlaceName UnitedStates EnglishLanguage ?COUNTRYSTR)
% ;;    (postPostcodeArea ?PLACE ?POST)
% ;;    (names ?POST ?POSTSTR)
% ;;    (postDistrict ?PLACE ?STATE)
% ;;    (canonicalPlaceName ?STATE EnglishLanguage ?STATESTR)
% ;;    (postCity ?PLACE ?CITY)
% ;;    (canonicalPlaceName ?CITY EnglishLanguage ?CITYSTR)
% ;;    (postStreet ?PLACE ?STREET)
% ;;    (canonicalPlaceName ?STREET EnglishLanguage ?STREETSTR)
% ;;    (postStreetNumber ?STREETNUM ?PLACE)
% ;;    (not (exists (?FC ?UN)
% ;;      (and
% ;;        (floorCode ?FC ?PLACE)
% ;;        (unitNumber ?UN ?PLACE)))))
% ;;  (and
% ;;    (postAddressText ?TEXT ?PLACE)
% ;;    (precedesInString ?STREETNUM ?STREETSTR ?TEXT)
% ;;    (precedesInString ?STREETSTR ?CITYSTR ?TEXT)
% ;;    (precedesInString ?CITYSTR ?STATESTR ?TEXT)
% ;;    (precedesInString ?STATESTR ?POSTSTR ?TEXT)
% ;;   (precedesInString ?POSTSTR ?COUNTRYSTR ?TEXT)))
% ;;
% ;;(=>
% ;;  (and
% ;;    (postCountry ?PLACE UnitedStates)
% ;;   (canonicalPlaceName UnitedStates EnglishLanguage ?COUNTRYSTR)
% ;;    (postPostcodeArea ?PLACE ?POST)
% ;;    (names ?POST ?POSTSTR)
% ;;    (postDistrict ?PLACE ?STATE)
% ;;    (canonicalPlaceName ?STATE EnglishLanguage ?STATESTR)
% ;;    (postCity ?PLACE ?CITY)
% ;;    (canonicalPlaceName ?CITY EnglishLanguage ?CITYSTR)
% ;;    (postStreet ?PLACE ?STREET)
% ;;    (canonicalPlaceName ?STREET EnglishLanguage ?STREETSTR)
% ;;    (postStreetNumber ?STREETNUM ?PLACE)
% ;;   (unitNumber ?UN ?PLACE)
% ;;    (not (exists (?FC)
% ;;      (floorCode ?FC ?PLACE))))
% ;;  (and
% ;;    (postAddressText ?TEXT ?PLACE)
% ;;    (precedesInString ?UN ?STREETNUM ?TEXT)
% ;;    (precedesInString ?STREETNUM ?STREETSTR ?TEXT)
% ;;    (precedesInString ?STREETSTR ?CITYSTR ?TEXT)
% ;;    (precedesInString ?CITYSTR ?STATESTR ?TEXT)
% ;;    (precedesInString ?STATESTR ?POSTSTR ?TEXT)
% ;;    (precedesInString ?POSTSTR ?COUNTRYSTR ?TEXT)))
% ;;
% ;;(=>
% ;;  (and
% ;;    (postCountry ?PLACE UnitedStates)
% ;;    (canonicalPlaceName UnitedStates EnglishLanguage ?COUNTRYSTR)
% ;;    (postPostcodeArea ?PLACE ?POST)
% ;;    (names ?POST ?POSTSTR)
% ;;    (postDistrict ?PLACE ?STATE)
% ;;    (canonicalPlaceName ?STATE EnglishLanguage ?STATESTR)
% ;;    (postCity ?PLACE ?CITY)
% ;;    (canonicalPlaceName ?CITY EnglishLanguage ?CITYSTR)
% ;;    (postStreet ?PLACE ?STREET)
% ;;    (canonicalPlaceName ?STREET EnglishLanguage ?STREETSTR)
% ;;    (postStreetNumber ?STREETNUM ?PLACE)
% ;;    (unitNumber ?UN ?PLACE)
% ;;   (floorCode ?FC ?PLACE))
% ;;  (and
% ;;    (postAddressText ?TEXT ?PLACE)
% ;;    (precedesInString ?UN ?FC ?TEXT)
% ;;    (precedesInString ?FC ?STREETNUM ?TEXT)
% ;;    (precedesInString ?STREETNUM ?STREETSTR ?TEXT)
% ;;    (precedesInString ?STREETSTR ?CITYSTR ?TEXT)
% ;;    (precedesInString ?CITYSTR ?STATESTR ?TEXT)
% ;;    (precedesInString ?STATESTR ?POSTSTR ?TEXT)
% ;;    (precedesInString ?POSTSTR ?COUNTRYSTR ?TEXT)))
% ;;
% ;;(=>
% ;;  (and
% ;;    (postCountry ?PLACE UnitedStates)
% ;;    (canonicalPlaceName UnitedStates EnglishLanguage ?COUNTRYSTR)
% ;;   (postPostcodeArea ?PLACE ?POST)
% ;;    (names ?POST ?POSTSTR)
% ;;    (postPostOfficeBox ?POBOX ?PLACE)
% ;;    (postPostcodeArea ?PLACE ?POST)
% ;;    (names ?POST ?POSTSTR)
% ;;    (postDistrict ?PLACE ?STATE)
% ;;    (canonicalPlaceName ?STATE EnglishLanguage ?STATESTR)
% ;;    (postCity ?PLACE ?CITY)
% ;;    (canonicalPlaceName ?CITY EnglishLanguage ?CITYSTR))
% ;;  (and
% ;;    (postAddressText ?TEXT ?PLACE)
% ;;    (precedesInString ?POBOX ?CITYSTR ?TEXT)
% ;;    (precedesInString ?CITYSTR ?STATESTR ?TEXT)
% ;;    (precedesInString ?STATESTR ?POSTSTR ?TEXT)
% ;;    (precedesInString ?POSTSTR ?COUNTRYSTR ?TEXT)))
% )

fof( miloA3884, axiom,
	p__d__instance(c__postAddressText,c__AsymmetricRelation)
).


fof( miloA3885, axiom,
	p__d__instance(c__postAddressText,c__BinaryPredicate)
).


% 	($domain postAddressText 1 PostalAddressText)

% 	($domain postAddressText 2 PostalPlace)


% ($documentation postAddressText
% EnglishLanguage "(&%postAddressText ?&%PostalAddressText
% ?&%PostalPlace) means that the &%ContactSite ?&%PostalPlace is
% identified by ?&%PostalAddressText.")


% ($comment 
% ;; --------------------------------------------------------------------------------
% ;; Telephone number structure adapted from Media.kif
% ;; --------------------------------------------------------------------------------
% )

fof( miloA3888, axiom,
	p__d__instance(c__telecomContactDevice,c__AsymmetricRelation)
).


fof( miloA3889, axiom,
	p__d__instance(c__telecomContactDevice,c__BinaryPredicate)
).


% 	($domain telecomContactDevice 1 TelephonyDevice)

% 	($domain telecomContactDevice 2 Agent)


% ($documentation telecomContactDevice
% EnglishLanguage "(&%telecomContactDevice ?&%TelephonyDevice
% ?&%Agent) means that ?&%TelephonyDevice is a &%ContactSite for
% the &%Human or &%Organization ?&%Agent.")


fof( miloA3892, axiom,
	p__subrelation(c__telecomContactDevice,c__siteForContact)
).


% ($comment 
% ;; NS: Actually, this is more complicated in the case of "cord
% ;; phones", where multiple &%FixedPhones may share the same line
% ;; and, so, the same telephone number.  The phone number uniquely
% ;; identifies the line (termination or connection location), not
% ;; the phone (hand set).
% )

fof( miloA3893, axiom,
	p__d__subclass(c__VirtualPlaceID,c__PlaceID)
).


fof( miloA3894, axiom,
	p__d__subclass(c__VirtualAddress,c__PlaceAddress)
).


fof( miloA3895, axiom,
	p__d__subclass(c__VirtualAddress,c__VirtualPlaceID)
).


fof( miloA3896, axiom,
	p__d__subclass(c__TelecomNumber,c__VirtualAddress)
).


fof( miloA3897, axiom,
	p__d__subclass(c__TelecomNumber,c__SymbolicString)
).


fof( miloA3898, axiom,
	p__d__subclass(c__TelecomNumber,c__ContactSite)
).


fof( miloA3899, axiom,
	p__d__instance(c__deviceTelecomNumber,c__BinaryPredicate)
).


fof( miloA3900, axiom,
	p__d__instance(c__deviceTelecomNumber,c__AsymmetricRelation)
).


% 	($domain deviceTelecomNumber 1 TelecomNumber)

% 	($domain deviceTelecomNumber 2 TelephonyDevice)


% ($documentation deviceTelecomNumber
% EnglishLanguage "(&%deviceTelecomNumber ?&%TelecomNumber
% ?&%TelephonyDevice) means that ?&%TelephonyDevice is identified,
% and can be accessed, by ?&%TelecomNumber.")


% ($comment 
% ;; ($subclass TelecomNumberPart IdentifierPart)
% ;; ($subclass TelecomNumberPart VirtualPlaceID)
% ;; ($subclass TelecomNumberPart SymbolicString)
% )

fof( miloA3903, axiom,
	p__d__instance(c__telecomCoreNumber,c__BinaryPredicate)
).


fof( miloA3904, axiom,
	p__d__instance(c__telecomCoreNumber,c__AsymmetricRelation)
).


% 	($domain telecomCoreNumber 1 SymbolicString)

% 	($domain telecomCoreNumber 2 TelecomNumber)

fof( miloA3907, axiom,
	p__subrelation(c__telecomCoreNumber,c__subString)
).



% ($documentation telecomCoreNumber
% EnglishLanguage "(&%telecomCoreNumber ?&%SymbolicString
% ?&%TelecomNumber) means that ?&%SymbolicString is the &%part of a
% &%TelecomNumber that identifies an individual subscriber line,
% not including the area code and any possible extensions.")


fof( miloA3908, axiom,
	p__d__instance(c__telecomCountryCode,c__BinaryPredicate)
).


fof( miloA3909, axiom,
	p__d__instance(c__telecomCountryCode,c__AsymmetricRelation)
).


% 	($domain telecomCountryCode 1 SymbolicString)

% 	($domain telecomCountryCode 2 TelecomNumber)


% ($documentation telecomCountryCode
% EnglishLanguage "(&%telecomCountryCode ?&%SymbolicString
% &%TelecomNumber) means that ?&%SymbolicString is the &%part of
% ?&%TelecomNumber that identifies the &%Nation in which the device
% identified by ?&%TelecomNumber is located (or registered).
% ?&%SymbolicString will be standard code conforming to, and
% assigned by, ITU-T Recommendation E.164.")


fof( miloA3912, axiom,
	p__subrelation(c__telecomCountryCode,c__subString)
).


fof( miloA3913, axiom,
	p__d__instance(c__telecomAreaCode,c__BinaryPredicate)
).


fof( miloA3914, axiom,
	p__d__instance(c__telecomAreaCode,c__AsymmetricRelation)
).


% 	($domain telecomAreaCode 1 SymbolicString)

% 	($domain telecomAreaCode 2 TelecomNumber)


% ($documentation telecomAreaCode
% EnglishLanguage "(&%telecomAreaCode ?&%SymbolicString
% &%TelecomNumber) means that ?&%SymbolicString is the &%part of
% ?&%TelecomNumber that follows the country code.
% ?&%SymbolicString may denote a &%GeographicArea in which the
% &%TelephonyDevice identified by ?&%TelecomNumber is
% located (registered), but it may also denote a call billing plan
% or status, as for 800 numbers in the North American Numbering
% Plan.")


fof( miloA3917, axiom,
	p__subrelation(c__telecomAreaCode,c__subString)
).


fof( miloA3918, axiom,
	p__d__instance(c__telecomCode2,c__BinaryPredicate)
).


fof( miloA3919, axiom,
	p__d__instance(c__telecomCode2,c__AsymmetricRelation)
).


% 	($domain telecomCode2 1 SymbolicString)

% 	($domain telecomCode2 2 TelecomNumber)


% ($documentation telecomCode2 EnglishLanguage "(&%telecomCode2
% ?&%SymbolicString ?&%TelecomNumber) means that ?&%SymbolicString
% is the second code (if there is one, such as a sub-area code)
% following the part of ?&%TelecomNumber denoted by
% &%telecomCountryCode.")


fof( miloA3922, axiom,
	p__subrelation(c__telecomCode2,c__subString)
).


fof( miloA3923, axiom,
	p__d__instance(c__telecomExtension,c__BinaryPredicate)
).


fof( miloA3924, axiom,
	p__d__instance(c__telecomExtension,c__AsymmetricRelation)
).


% 	($domain telecomExtension 1 SymbolicString)

% 	($domain telecomExtension 2 TelecomNumber)


% ($documentation telecomExtension
% EnglishLanguage "(&%telecomExtension ?&%SymbolicString
% ?&%TelecomNumber) means that ?&%SymbolicString is a &%part of
% ?&%TelecomNumber that identifies a &%TelephonyDevice within a
% group of such &%Devices, the members of which share a local
% subscriber line.")


% ($comment 
% ;; NS: TO DO: create &%SubscriberTelephoneLine, relate it to
% ;; &%MainTelephoneLine and &%TelephoneSystem, which are defined
% ;; in Communications.kif.
% )

fof( miloA3927, axiom,
	(![AC,CN,WHOLE]: 
		(
			(
				(
					(
						p__d__instance(WHOLE,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(CN,c__SymbolicString)
					)
				 &
					(
						p__d__instance(AC,c__SymbolicString)
					)
				 &
					(
						p__telecomCoreNumber(CN,WHOLE)
					)
				 &
					(
						p__telecomAreaCode(AC,WHOLE)
					)
				)
			)
			=>
			(
				p__precedesInString(AC,CN,WHOLE)
			)
		)
	)
).


fof( miloA3928, axiom,
	(![CC,CN,WHOLE]: 
		(
			(
				(
					(
						p__d__instance(WHOLE,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(CN,c__SymbolicString)
					)
				 &
					(
						p__d__instance(CC,c__SymbolicString)
					)
				 &
					(
						p__telecomCoreNumber(CN,WHOLE)
					)
				 &
					(
						p__telecomCountryCode(CC,WHOLE)
					)
				)
			)
			=>
			(
				p__precedesInString(CC,CN,WHOLE)
			)
		)
	)
).


fof( miloA3929, axiom,
	(![CC,AC,WHOLE]: 
		(
			(
				(
					(
						p__d__instance(WHOLE,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(AC,c__SymbolicString)
					)
				 &
					(
						p__d__instance(CC,c__SymbolicString)
					)
				 &
					(
						p__telecomAreaCode(AC,WHOLE)
					)
				 &
					(
						p__telecomCountryCode(CC,WHOLE)
					)
				)
			)
			=>
			(
				p__precedesInString(CC,AC,WHOLE)
			)
		)
	)
).


fof( miloA3930, axiom,
	(![CN,EX,WHOLE]: 
		(
			(
				(
					(
						p__d__instance(WHOLE,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(CN,c__SymbolicString)
					)
				 &
					(
						p__d__instance(EX,c__SymbolicString)
					)
				 &
					(
						p__telecomCoreNumber(CN,WHOLE)
					)
				 &
					(
						p__telecomExtension(EX,WHOLE)
					)
				)
			)
			=>
			(
				p__precedesInString(CN,EX,WHOLE)
			)
		)
	)
).


fof( miloA3931, axiom,
	(![AC,C2,WHOLE]: 
		(
			(
				(
					(
						p__d__instance(WHOLE,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(C2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(AC,c__SymbolicString)
					)
				 &
					(
						p__telecomCode2(C2,WHOLE)
					)
				 &
					(
						p__telecomAreaCode(AC,WHOLE)
					)
				)
			)
			=>
			(
				p__precedesInString(AC,C2,WHOLE)
			)
		)
	)
).


fof( miloA3932, axiom,
	(![CC,C2,WHOLE]: 
		(
			(
				(
					(
						p__d__instance(WHOLE,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(C2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(CC,c__SymbolicString)
					)
				 &
					(
						p__telecomCode2(C2,WHOLE)
					)
				 &
					(
						p__telecomCountryCode(CC,WHOLE)
					)
				)
			)
			=>
			(
				p__precedesInString(CC,C2,WHOLE)
			)
		)
	)
).


% ($comment 
% ;; NS: It's not clear from the documentation for "TelecomCode2",
% ;; nor from an otherwise good explanation of telecom number
% ;; fields (http://en.wikipedia.org/wiki/Area_code), if the
% ;; portion of a telecom number denoted by "TelecomCode2" can be
% ;; part of the "CoreTelecomNumber" (e.g., designating the local
% ;; exchange, as in the xxx part of a US number conforming to the
% ;; pattern xxx-yyyy), or is something else, different from both
% ;; the "CoreTelecomNumber" and the area code.  Therefore, the
% ;; rules above are agnostic on this point, and less complete than
% ;; they might otherwise be.
% )

fof( miloA3933, axiom,
	p__d__instance(c__telephoneNumber,c__BinaryPredicate)
).


fof( miloA3934, axiom,
	p__d__instance(c__telephoneNumber,c__AsymmetricRelation)
).


% 	($domain telephoneNumber 1 TelecomNumber)

% 	($domain telephoneNumber 2 Agent)


% ($documentation telephoneNumber EnglishLanguage "(%&telephoneNumber ?NUMBER ?AGENT) 
% means that ?&%Agent identifies a &%TelecomeNumber at which ?&%Agent can be contacted")


fof( miloA3937, axiom,
	(![NUMBER,AGENT]: 
		(
			(
				(
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(NUMBER,c__TelecomNumber)
					)
				 &
					(
						p__telephoneNumber(NUMBER,AGENT)
					)
				)
			)
			=>
			(
				p__siteForContact(NUMBER,AGENT)
			)
		)
	)
).


fof( miloA3938, axiom,
	p__d__instance(c__personalPhoneNumber,c__BinaryPredicate)
).


fof( miloA3939, axiom,
	p__d__instance(c__personalPhoneNumber,c__AsymmetricRelation)
).


% 	($domain personalPhoneNumber 1 TelecomNumber)

% 	($domain personalPhoneNumber 2 Human)

fof( miloA3942, axiom,
	p__subrelation(c__personalPhoneNumber,c__telephoneNumber)
).



% ($documentation personalPhoneNumber
% EnglishLanguage "(&%personalPhoneNumber ?&%TelecomNumber
% ?&%Human) means that ?&%TelecomNumber identifies a &%Telephone at
% which ?&%Human can be contacted when not a work, or for purposes
% other than work.")


% 	(forall (?DEVICE ?TIME ?NUMBER ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?DEVICE Telephone)
% 				(holdsDuring ?TIME (and ([|] (possesses ?AGENT ?DEVICE) ([|] (deviceTelecomNumber ?NUMBER ?DEVICE) []))))
% 			)
% 			(holdsDuring ?TIME (telephoneNumber ?NUMBER ?AGENT))
% 		)
% 	)

fof( miloA3944, axiom,
	p__d__instance(c__homePhoneNumber,c__BinaryPredicate)
).


fof( miloA3945, axiom,
	p__d__instance(c__homePhoneNumber,c__AsymmetricRelation)
).


% 	($domain homePhoneNumber 1 TelecomNumber)

% 	($domain homePhoneNumber 2 Human)

fof( miloA3948, axiom,
	p__subrelation(c__homePhoneNumber,c__telephoneNumber)
).



% ($documentation homePhoneNumber
% EnglishLanguage "(&%homePhoneNumber ?&%TelecomNumber ?&%Human)
% means that ?&%TelecomNumber identifies a &%Telephone located at
% ?&%Human's &%PermanentResidence.")


% ($comment 
% ;; NS: This is too liberal; a person could have multiple "home"
% ;; addresses.  Use the telecom area code to match the phone's location
% ;; to the person's address.
% ;; (=>
% ;;   (holdsDuring ?TIME
% ;;     (and
% ;;       (deviceTelecomNumber ?NUMBER ?DEVICE)
% ;;       (homePhoneNumber ?NUMBER ?PERSON)
% ;;       (home ?PERSON ?RESIDENCE)))
% ;;   (holdsDuring ?TIME (located ?DEVICE ?RESIDENCE)))
% )

% 	(forall (?NUMBER ?DEVICE ?TIME ?AGENT ?PLACE)
% 		(=> 
% 			(holdsDuring ?TIME (and ([|] (deviceTelecomNumber ?NUMBER ?DEVICE) ([|] (homePhoneNumber ?NUMBER ?AGENT) ([|] (located ?DEVICE ?PLACE) ([|] ($instance ?PLACE PermanentResidence) []))))))
% 			(holdsDuring ?TIME (home ?AGENT ?PLACE))
% 		)
% 	)

% ($comment 
% ;; This is a weaker version of the axiom immediately above.
% )

% 	(forall (?NUMBER ?DEVICE ?TIME ?AGENT ?PLACE)
% 		(=> 
% 			(and 
% 				($instance ?AGENT Human)
% 				(holdsDuring ?TIME (and ([|] (deviceTelecomNumber ?NUMBER ?DEVICE) ([|] (telephoneNumber ?NUMBER ?AGENT) ([|] (located ?DEVICE ?PLACE) ([|] ($instance ?PLACE Residence) []))))))
% 			)
% 			(holdsDuring ?TIME (inhabits ?AGENT ?PLACE))
% 		)
% 	)

fof( miloA3951, axiom,
	p__d__instance(c__workPhoneNumber,c__BinaryPredicate)
).


fof( miloA3952, axiom,
	p__d__instance(c__workPhoneNumber,c__AsymmetricRelation)
).


% 	($domain workPhoneNumber 1 TelecomNumber)

% 	($domain workPhoneNumber 2 Agent)

fof( miloA3955, axiom,
	p__subrelation(c__workPhoneNumber,c__telephoneNumber)
).



% ($documentation workPhoneNumber
% EnglishLanguage "(&%workPhoneNumber ?&%TelecomNumber ?&%Agent)
% means that ?&%TelecomNumber identifies a &%Telephone at which
% ?&%Agent can be contacted when at work, or for business
% purposes.")



% ($documentation FixedPhone EnglishLanguage "An &%instance of
% &%FixedPhone is a &%Telephone that must be connected to the telephone
% network via a cord.")


fof( miloA3956, axiom,
	p__d__subclass(c__FixedPhone,c__Telephone)
).


fof( miloA3957, axiom,
	p__d__subclass(c__MobileCellPhone,c__ReceiverDevice)
).


fof( miloA3958, axiom,
	p__d__subclass(c__MobileCellPhone,c__Telephone)
).



% ($documentation MobileCellPhone EnglishLanguage "A &%MobileCellPhone
% is a &%Telephone that connects to the telephone network by
% sending and receiving radio transmissions, rather than via a
% cord, and so is portable.")


fof( miloA3959, axiom,
	p__d__instance(c__mobilePhoneNumber,c__BinaryPredicate)
).


fof( miloA3960, axiom,
	p__d__instance(c__mobilePhoneNumber,c__AsymmetricRelation)
).


% 	($domain mobilePhoneNumber 1 TelecomNumber)

% 	($domain mobilePhoneNumber 2 Agent)

fof( miloA3963, axiom,
	p__subrelation(c__mobilePhoneNumber,c__telephoneNumber)
).



% ($documentation mobilePhoneNumber
% EnglishLanguage "(&%mobilePhoneNumber ?&%TelecomNumber ?&%Agent)
% means that ?&%TelecomNumber identifies a &%MobileCellPhone at
% which ?&%Agent can be contacted.")


% 	(forall (?TIME ?NUMBER ?AGENT ?DEVICE)
% 		(=> 
% 			(holdsDuring ?TIME (and ([|] (deviceTelecomNumber ?NUMBER ?DEVICE) ([|] (mobilePhoneNumber ?NUMBER ?AGENT) []))))
% 			($instance ?DEVICE MobileCellPhone)
% 		)
% 	)

% ($comment 
% ;; NS: Narrowing telephoneNumber -> mobilePhoneNumber.
% )

% 	(forall (?DEVICE ?TIME ?NUMBER ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?DEVICE MobileCellPhone)
% 				(holdsDuring ?TIME (and ([|] (deviceTelecomNumber ?NUMBER ?DEVICE) ([|] (telephoneNumber ?NUMBER ?AGENT) []))))
% 			)
% 			(holdsDuring ?TIME (mobilePhoneNumber ?NUMBER ?AGENT))
% 		)
% 	)

% ($comment 
% ;; NS: This isn't reliably true for Telephones in general, given
% ;; the rather strict "ownership" sense of possesses.  But it is
% ;; generally true for cell phones.
% )

% 	(forall (?NUMBER ?TIME ?AGENT ?DEVICE)
% 		(=> 
% 			(holdsDuring ?TIME (and ([|] (deviceTelecomNumber ?NUMBER ?DEVICE) ([|] (mobilePhoneNumber ?NUMBER ?AGENT) []))))
% 			(holdsDuring ?TIME (possesses ?AGENT ?DEVICE))
% 		)
% 	)

fof( miloA3967, axiom,
	p__d__instance(c__faxNumber,c__BinaryPredicate)
).


fof( miloA3968, axiom,
	p__d__instance(c__faxNumber,c__AsymmetricRelation)
).


% 	($domain faxNumber 1 TelecomNumber)

% 	($domain faxNumber 2 Agent)


% ($documentation faxNumber EnglishLanguage "(&%faxNumber
% ?&%TelecomNumber ?&%Agent) means that ?&%TelecomNumber identifies
% a &%FaxMachine at which ?&%Agent can be contacted.")


% 	(forall (?DEVICE ?TIME ?NUMBER ?AGENT)
% 		(=> 
% 			(and 
% 				($instance ?DEVICE FaxMachine)
% 				(holdsDuring ?TIME (and ([|] (deviceTelecomNumber ?NUMBER ?DEVICE) ([|] (possesses ?AGENT ?DEVICE) []))))
% 			)
% 			(holdsDuring ?TIME (faxNumber ?NUMBER ?AGENT))
% 		)
% 	)

% ($comment 
% ;; NS: temporally qualified this way only because telecom numbers
% ;; can be reassigned to different types of TelephonyDevices.
% )

% 	(forall (?TIME ?NUMBER ?AGENT ?DEVICE)
% 		(=> 
% 			(holdsDuring ?TIME (and ([|] (deviceTelecomNumber ?NUMBER ?DEVICE) ([|] (faxNumber ?NUMBER ?AGENT) []))))
% 			($instance ?DEVICE FaxMachine)
% 		)
% 	)

fof( miloA3973, axiom,
	p__d__subclass(c__FabricIron,c__Device)
).



% ($documentation FabricIron EnglishLanguage "&%FabricIron is a type of &%Device that
% has a flat metal base used to smooth cloth")


% (termFormat EnglishLanguage FabricIron "iron")

% ($comment 
% ;; KJN: Changing definition in order to remove dependency (arising from MetalProduct).      
% ;;(=>
% ;;  ($instance ?IRON FabricIron)
% ;;  (exists (?BASE)
% ;;    (and
% ;;      (bottom ?BASE ?IRON)
% ;;      ($instance ?BASE MetalProduct)
% ;;      (attribute ?BASE Flat))))
% )

fof( miloA3974, axiom,
	(![IRON]: 
		(
			(
				(
					(
						p__d__instance(IRON,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(IRON,c__FabricIron)
					)
				)
			)
			=>
			(
				(?[BASE]: 
					(
						(
							(
								p__d__instance(BASE,c__CorpuscularObject)
							)
						 &
							(
								p__bottom(BASE,IRON)
							)
						 &
							(
								p__material(c__Metal,BASE)
							)
						 &
							(
								p__attribute(BASE,c__Flat)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3975, axiom,
	p__d__subclass(c__IroningBoard,c__Device)
).



% ($documentation IroningBoard EnglishLanguage "&%IroningBoard is a type of &%Device 
% consisting of a flat, padded board used as a surface for ironing")


% (termFormat EnglishLanguage IroningBoard "ironing board")

% 	(forall (?FABRIC ?IRON ?OBJ ?BOARD)
% 		(=> 
% 			($instance ?BOARD IroningBoard)
% 			(hasPurpose ?BOARD (exists ([|] ?IRON ([|] ?FABRIC ([|] ?OBJ []))) (and ([|] ($instance ?IRON Ironing) ([|] (patient ?IRON ?OBJ) ([|] (part ?FABRIC ?OBJ) ([|] ($instance ?FABRIC Fabric) ([|] (holdsDuring (WhenFn ?IRON) (orientation ?OBJ ?BOARD On)) []))))))))
% 		)
% 	)

fof( miloA3977, axiom,
	p__d__subclass(c__Smoothing,c__SurfaceChange)
).



% ($documentation Smoothing EnglishLanguage "&%Smoothing is a type of &%SurfaceChange
% to make something &%Smooth")


% (termFormat EnglishLanguage Smoothing "smoothing")

% 	(forall (?OBJ ?SMOOTH)
% 		(=> 
% 			(and 
% 				($instance ?SMOOTH Smoothing)
% 				(patient ?SMOOTH ?OBJ)
% 			)
% 			(exists (?PART)
% 				(and 
% 					(superficialPart ?PART ?OBJ)
% 					(holdsDuring (EndFn (WhenFn ?SMOOTH)) (attribute ?PART Smooth))
% 				)
% 			)
% 		)
% 	)

fof( miloA3979, axiom,
	p__d__subclass(c__Ironing,c__Smoothing)
).



% ($documentation Ironing EnglishLanguage "&%Ironing refers to a &%Smoothing process where
% a heated &%Device is used to smooth something")


% (termFormat EnglishLanguage Ironing "ironing")

fof( miloA3980, axiom,
	(![OBJ,I]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(I,c__Ironing)
					)
				 &
					(
						p__patient(I,OBJ)
					)
				)
			)
			=>
			(
				(?[HEAT,IRON,PART]: 
					(
						(
							(
								p__d__instance(PART,c__Object)
							)
						 &
							(
								p__d__instance(IRON,c__Physical)
							)
						 &
							(
								p__superficialPart(PART,OBJ)
							)
						 &
							(
								p__d__instance(HEAT,c__Heating)
							)
						 &
							(
								p__patient(HEAT,IRON)
							)
						 &
							(
								p__patient(I,PART)
							)
						 &
							(
								p__instrument(I,IRON)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3981, axiom,
	(![OBJ,FABRIC,I]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__d__instance(I,c__Ironing)
					)
				 &
					(
						p__patient(I,OBJ)
					)
				 &
					(
						p__part(FABRIC,OBJ)
					)
				 &
					(
						p__d__instance(FABRIC,c__Fabric)
					)
				)
			)
			=>
			(
				(?[IRON,HEAT]: 
					(
						(
							(
								p__d__instance(HEAT,c__Heating)
							)
						 &
							(
								p__patient(HEAT,IRON)
							)
						 &
							(
								p__d__instance(IRON,c__FabricIron)
							)
						 &
							(
								p__instrument(I,IRON)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA3982, axiom,
	p__d__subclass(c__WhirlpoolTub,c__FluidContainer)
).



% ($documentation WhirlpoolTub EnglishLanguage "&%WhirlpoolTub refers to a &%FluidContainer
% used by &%Humans for relaxation with jets used to create water currents to massage the 
% body")


% (termFormat EnglishLanguage WhirlpoolTub "whirlpool tub")

% 	(forall (?TUB ?CREATION ?MOTION ?WATER)
% 		(=> 
% 			($instance ?TUB WhirlpoolTub)
% 			(exists (?VALVE)
% 				(and 
% 					($instance ?VALVE PressureControlValve)
% 					(part ?VALVE ?TUB)
% 					(hasPurpose ?VALVE (exists ([|] ?WATER ([|] ?CREATION ([|] ?MOTION []))) (and ([|] ($instance ?WATER Water) ([|] (located ?WATER ?TUB) ([|] ($instance ?CREATION Creation) ([|] (instrument ?CREATION ?VALVE) ([|] (result ?CREATION ?MOTION) ([|] ($instance ?MOTION Motion) ([|] (located ?MOTION ?WATER) []))))))))))
% 				)
% 			)
% 		)
% 	)

fof( miloA3984, axiom,
	p__d__subclass(c__HotTub,c__WhirlpoolTub)
).



% ($documentation HotTub EnglishLanguage "&%HotTub refers to a &%WhirlpoolTub that is
% capable of heating the water located in it")


% (termFormat EnglishLanguage HotTub "hot tub")

% 	(forall (?X ?HEAT ?WATER)
% 		(=> 
% 			(and 
% 				($instance ?X HotTub)
% 				(located ?WATER ?X)
% 				($instance ?WATER Water)
% 			)
% 			(modalAttribute (exists ([|] ?HEAT []) (and ([|] ($instance ?HEAT Heating) ([|] (instrument ?HEAT ?X) ([|] (patient ?HEAT ?WATER) []))))) Possibility)
% 		)
% 	)

fof( miloA3986, axiom,
	p__d__subclass(c__SizeAttribute,c__RelationalAttribute)
).



% ($documentation SizeAttribute EnglishLanguage "&%SizeAttribute refers to attributes
% that pertain to the &%measure of some &%Object")


% (termFormat EnglishLanguage SizeAttribute "size attribute")

fof( miloA3987, axiom,
	(![ATTR,X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,ATTR)
					)
				 &
					(
						p__d__instance(ATTR,c__SizeAttribute)
					)
				)
			)
			=>
			(
				p__d__instance(X,c__Object)
			)
		)
	)
).


fof( miloA3988, axiom,
	p__d__instance(c__DoubleSize,c__SizeAttribute)
).



% ($documentation DoubleSize EnglishLanguage "&%DoubleSize refers to how an &%Object can 
% fit 2 of its target users at the same time")


% (termFormat EnglishLanguage DoubleSize "double size")

% 	(forall (?T1 ?P1 ?P2 ?X)
% 		(=> 
% 			(and 
% 				($instance ?X WhirlpoolTub)
% 				(attribute ?X DoubleSize)
% 			)
% 			(modalAttribute (exists ([|] ?T1 []) (holdsDuring ?T1 (exists ([|] ?P1 ([|] ?P2 [])) (and ([|] ($instance ?P1 Human) ([|] ($instance ?P2 Human) ([|] (not (equal ?P1 ?P2)) ([|] (located ?P1 ?X) ([|] (located ?P2 ?X) []))))))))) Possibility)
% 		)
% 	)

fof( miloA3990, axiom,
	p__d__subclass(c__Kennel,c__TrapOrCage)
).



% ($documentation Kennel EnglishLanguage "&%Kennel is a &%TrapOrCage where a &%DomesticAnimal
% is &%Confining by its owner")


% (termFormat EnglishLanguage Kennel "kennel")

% 	(forall (?ANIMAL ?CONFINING ?KENNEL)
% 		(=> 
% 			($instance ?KENNEL Kennel)
% 			(hasPurpose ?KENNEL (exists ([|] ?ANIMAL ([|] ?CONFINING [])) (and ([|] ($instance ?ANIMAL DomesticAnimal) ([|] ($instance ?CONFINING Confining) ([|] (patient ?CONFINING ?ANIMAL) ([|] (eventLocated ?CONFINING ?KENNEL) [])))))))
% 		)
% 	)

fof( miloA3992, axiom,
	p__d__subclass(c__DryingDevice,c__Device)
).



% ($documentation DryingDevice EnglishLanguage "&%DryingDevice refers to any &%Device
% used as an instrument in the &%Drying process")


% (termFormat EnglishLanguage DryingDevice "drying device")

% 	(forall (?DRYING ?D)
% 		(=> 
% 			($instance ?D DryingDevice)
% 			(hasPurpose ?D (exists ([|] ?DRYING []) (and ([|] ($instance ?DRYING Drying) ([|] (instrument ?DRYING ?D) [])))))
% 		)
% 	)

fof( miloA3994, axiom,
	p__d__subclass(c__ClothesDryer,c__DryingDevice)
).


fof( miloA3995, axiom,
	p__d__subclass(c__ClothesWashingMachine,c__WashingDevice)
).


fof( miloA3996, axiom,
	p__d__subclass(c__HairDryer,c__DryingDevice)
).


fof( miloA3997, axiom,
	p__d__subclass(c__HairDryer,c__ElectricDevice)
).



% ($documentation HairDryer EnglishLanguage "&%HairDryer is a type of &%DryingDevice
% used specifically for &%Drying &%Hair")


% (termFormat EnglishLanguage HairDryer "hair dryer")

% 	(forall (?HAIR ?DRYING ?HD)
% 		(=> 
% 			($instance ?HD HairDryer)
% 			(hasPurpose ?HD (exists ([|] ?HAIR ([|] ?DRYING [])) (and ([|] ($instance ?HAIR Hair) ([|] ($instance ?DRYING Drying) ([|] (patient ?DRYING ?HAIR) ([|] (instrument ?DRYING ?HD) [])))))))
% 		)
% 	)

fof( miloA3999, axiom,
	p__d__subclass(c__SelfServiceLaundry,c__Room)
).



% ($documentation SelfServiceLaundry EnglishLanguage "&%SelfServiceLaundry is a &%Room 
% where a collection of coin-operatend washing machines and dryers are available for 
% customers")


% (termFormat EnglishLanguage SelfServiceLaundry "self-service laundry")

% 	(forall (?ROOM)
% 		(=> 
% 			($instance ?ROOM SelfServiceLaundry)
% 			(exists (?WASHER ?DRYER)
% 				(and 
% 					($instance ?WASHER Collection)
% 					(memberType ?WASHER ClothesWashingMachine)
% 					(located ?WASHER ?ROOM)
% 					($instance ?DRYER Collection)
% 					(memberType ?DRYER ClothesDryer)
% 					(located ?DRYER ?ROOM)
% 				)
% 			)
% 		)
% 	)

fof( miloA4001, axiom,
	(![ROOM]: 
		(
			(
				p__d__instance(ROOM,c__SelfServiceLaundry)
			)
			=>
			(
				p__attribute(ROOM,c__CommunalAttribute)
			)
		)
	)
).


fof( miloA4002, axiom,
	p__d__subclass(c__Microwave,c__ElectricDevice)
).



% ($documentation Microwave EnglishLanguage "&%Microwave is an &%ElectricDevice that heats
% food by passing an electromagnetic wave through it")


% (termFormat EnglishLanguage Microwave "microwave")

% 	(forall (?M ?HEATING ?FOOD)
% 		(=> 
% 			($instance ?M Microwave)
% 			(hasPurpose ?M (exists ([|] ?FOOD ([|] ?HEATING [])) (and ([|] ($instance ?FOOD PreparedFood) ([|] ($instance ?HEATING Heating) ([|] (instrument ?HEATING ?M) ([|] (patient ?HEATING ?FOOD) [])))))))
% 		)
% 	)

fof( miloA4004, axiom,
	(![M]: 
		(
			(
				(
					(
						p__d__instance(M,c__Microwave)
					)
				 &
					(
						p__attribute(M,c__DeviceOn)
					)
				)
			)
			=>
			(
				(?[PROC]: 
					(
						(
							(
								p__d__instance(PROC,c__RadiatingElectromagnetic)
							)
						 &
							(
								p__instrument(PROC,M)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4005, axiom,
	p__d__subclass(c__SmokeDetector,c__Device)
).



% ($documentation SmokeDetector EnglishLanguage "&%SmokeDetector is a &%Device that is able
% to &%Discovering the presence of &%Smoke")


% (termFormat EnglishLanguage SmokeDetector "smoke detector")

% 	(forall (?D ?DISCOVER ?SMOKE)
% 		(=> 
% 			($instance ?D SmokeDetector)
% 			(hasPurpose ?D (exists ([|] ?DISCOVER ([|] ?SMOKE [])) (and ([|] ($instance ?DISCOVER Discovering) ([|] (instrument ?DISCOVER ?D) ([|] (patient ?DISCOVER ?SMOKE) ([|] ($instance ?SMOKE Smoke) [])))))))
% 		)
% 	)

fof( miloA4007, axiom,
	p__d__subclass(c__Sprinkler,c__Device)
).



% ($documentation Sprinkler EnglishLanguage "&%Sprinkler is a type of &%Device that loosely
% distributes a substance, either solid (e.g. Salt or herbs) or liquid (e.g. water sprinkler)")


% (termFormat EnglishLanguage Sprinkler "sprinkler")

fof( miloA4008, axiom,
	p__d__subclass(c__WaterSprinkler,c__Sprinkler)
).



% ($documentation WaterSprinkler EnglishLanguage "&%WaterSprinkler is a type of &%Sprinkler 
% that releases &%Water")


% (termFormat EnglishLanguage WaterSprinkler "water sprinkler")

% 	(forall (?WM ?W)
% 		(=> 
% 			($instance ?W WaterSprinkler)
% 			(hasPurpose ?W (exists ([|] ?WM []) (and ([|] ($instance ?WM WaterMotion) ([|] (origin ?WM ?W) [])))))
% 		)
% 	)

fof( miloA4010, axiom,
	p__d__subclass(c__FireSprinklerSystem,c__Collection)
).



% ($documentation FireSprinklerSystem EnglishLanguage "&%FireSprinklerSystem is a &%Collection
% of &%Devices that allow water to be released when a &%Fire is detected")


% (termFormat EnglishLanguage FireSprinklerSystem "sprinkler system")

fof( miloA4011, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__FireSprinklerSystem)
			)
			=>
			(
				(?[DETECT,SPRINKLER]: 
					(
						(
							(
								p__d__instance(DETECT,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(SPRINKLER,c__SelfConnectedObject)
							)
						 &
							(
								p__d__instance(DETECT,c__SmokeDetector)
							)
						 &
							(
								p__d__instance(SPRINKLER,c__WaterSprinkler)
							)
						 &
							(
								p__member(DETECT,X)
							)
						 &
							(
								p__member(SPRINKLER,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4012, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__FireSprinklerSystem)
			)
			=>
			(
				(?[FIRE,DISCOVER,WM]: 
					(
						(
							(
								p__d__instance(DISCOVER,c__Discovering)
							)
						 &
							(
								p__d__instance(FIRE,c__Fire)
							)
						 &
							(
								p__instrument(DISCOVER,X)
							)
						 &
							(
								p__patient(DISCOVER,FIRE)
							)
						 &
							(
								p__d__instance(WM,c__WaterMotion)
							)
						 &
							(
								p__origin(WM,X)
							)
						 &
							(
								p__causes(DISCOVER,WM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4013, axiom,
	p__d__subclass(c__FireExtinguisher,c__Device)
).



% ($documentation FireExtinguisher EnglishLanguage "A &%Device used to &%StopFn small &%Fire which is possible for &%Human to carry")


% 	(forall (?PROC ?FE)
% 		(=> 
% 			($instance ?FE FireExtinguisher)
% 			(hasPurpose ?FE (exists ([|] ?PROC []) (and ([|] ($instance ?PROC (StopFn Fire)) ([|] (instrument ?PROC ?FE) [])))))
% 		)
% 	)

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of capability is subclass(Process)
% ;; If we replace ($instance ?CARRY Carrying) with ($subclass ?CARRY Carrying), a similar problem arises since the first argument of patient is instance(Process).
% ;;
% ;;(=>
% ;;  ($instance ?FE FireExtinguisher)
% ;;  (exists (?PERSON ?CARRY)
% ;;    (and
% ;;      ($instance ?PERSON Human)
% ;;      ($instance ?CARRY Carrying)
% ;;      (patient ?CARRY ?FE)
% ;;      (capability ?CARRY instrument ?PERSON))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA4015, axiom,
	(![FE]: 
		(
			(
				p__d__instance(FE,c__FireExtinguisher)
			)
			=>
			(
				(?[PERSON,CARRYING,CARRY]: 
					(
						(
							(
								p__d__instance(CARRY,c__Process)
							)
						 &
							(
								p__d__instance(PERSON,c__Human)
							)
						 &
							(
								p__d__subclass(CARRYING,c__Carrying)
							)
						 &
							(
								p__d__instance(CARRY,CARRYING)
							)
						 &
							(
								p__patient(CARRY,FE)
							)
						 &
							(
								p__capability(CARRYING,c__instrument,PERSON)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4016, axiom,
	p__d__subclass(c__IceMachine,c__Machine)
).



% ($documentation IceMachine EnglishLanguage "&%IceMachine is a type of &%Machine that
% produces &%Ice")


% (termFormat EnglishLanguage IceMachine "ice machine")

% 	(forall (?IM ?PROC ?ICE)
% 		(=> 
% 			($instance ?IM IceMachine)
% 			(hasPurpose ?IM (exists ([|] ?PROC ([|] ?ICE [])) (and ([|] (instrument ?PROC ?IM) ([|] (result ?PROC ?ICE) ([|] ($instance ?ICE Ice) []))))))
% 		)
% 	)

fof( miloA4018, axiom,
	p__d__subclass(c__AlarmClock,c__Clock)
).



% ($documentation AlarmClock EnglishLanguage "&%AlarmClock is a type of &%Clock that will
% radiate sound when a certain time is set")


% (termFormat EnglishLanguage AlarmClock "alarm clock")

% 	(forall (?Q ?TIME ?M ?S ?AC)
% 		(=> 
% 			($instance ?AC AlarmClock)
% 			(hasPurpose ?AC (exists ([|] ?TIME ([|] ?M ([|] ?Q []))) (and ([|] ($instance ?M Measuring) ([|] (agent ?M ?AC) ([|] (result ?M ?Q) ([|] (equal ?Q ?TIME) ([|] (holdsDuring (WhenFn ?M) (exists ([|] ?S []) (and ([|] ($instance ?S RadiatingSound) ([|] (agent ?S ?AC) []))))) []))))))))
% 		)
% 	)

fof( miloA4020, axiom,
	p__d__subclass(c__AMFMAlarmClock,c__AlarmClock)
).


fof( miloA4021, axiom,
	p__d__subclass(c__AMFMAlarmClock,c__RadioReceiver)
).



% ($documentation AMFMAlarmClock EnglishLanguage "&%AMFMAlarmClock is a type of &%AlarmClock
% that is also a &%RadioReceiver, meaning it can get &%RadioBroadcast from &%RadioStation")


% (termFormat EnglishLanguage AMFMAlarmClock "am / fm alarm clock")       

fof( miloA4022, axiom,
	p__d__subclass(c__ElectricCoffeeMaker,c__ElectricDevice)
).



% ($documentation ElectricCoffeeMaker EnglishLanguage "&%ElectricCoffeeMaker is a 
% &%Device that makes &%Coffee")


% (termFormat EnglishLanguage ElectricCoffeeMaker "coffee maker")

% 	(forall (?C ?M ?COFFEE)
% 		(=> 
% 			($instance ?C ElectricCoffeeMaker)
% 			(hasPurpose ?C (exists ([|] ?COFFEE ([|] ?M [])) (and ([|] ($instance ?M Making) ([|] (instrument ?M ?C) ([|] (result ?M ?COFFEE) ([|] ($instance ?COFFEE Coffee) [])))))))
% 		)
% 	)

fof( miloA4024, axiom,
	p__d__instance(c__Clean,c__SubjectiveAssessmentAttribute)
).



% ($documentation Clean EnglishLanguage "&%Clean describes how something is free from 
% dirt or impurities")


% (termFormat EnglishLanguage Clean "clean")

fof( miloA4025, axiom,
	p__d__instance(c__Dirty,c__SubjectiveAssessmentAttribute)
).



% ($documentation Dirty EnglishLanguage "&%Dirty describes how something has been soiled
% with dirt, dust or grime")


% (termFormat EnglishLanguage Dirty "dirty")

fof( miloA4026, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__Clean)
					)
				)
			)
			=>
			(
				p__d__instance(X,c__Object)
			)
		)
	)
).


fof( miloA4027, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__Dirty)
					)
				)
			)
			=>
			(
				p__d__instance(X,c__Object)
			)
		)
	)
).


fof( miloA4028, axiom,
	p__contraryAttribute2(c__Dirty,c__Clean)
).


fof( miloA4029, axiom,
	p__d__subclass(c__DataStorageDevice,c__Device)
).



% ($documentation DataStorageDevice EnglishLanguage "An &%instance of
% &%DataStorageDevice is a &%Device intended to be used for storing
% data (information).")


fof( miloA4030, axiom,
	p__d__subclass(c__Whiteboard,c__DataStorageDevice)
).


fof( miloA4031, axiom,
	p__d__subclass(c__Whiteboard,c__DisplayArtifact)
).



% ($documentation Whiteboard EnglishLanguage "%&Whiteboard refers to flat surface where 
% information can be encoded using erasable pens.  This baord is normally colored White")


% (termFormat EnglishLanguage Whiteboard "whiteboard")

fof( miloA4032, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__Whiteboard)
			)
			=>
			(
				p__color(OBJ,c__White)
			)
		)
	)
).


fof( miloA4033, axiom,
	(![OBJ]: 
		(
			(
				p__d__instance(OBJ,c__Whiteboard)
			)
			=>
			(
				p__structure(OBJ,c__Flat)
			)
		)
	)
).


% 	(forall (?WRITE ?OBJ)
% 		(=> 
% 			($instance ?OBJ Whiteboard)
% 			(hasPurpose ?OBJ (exists ([|] ?WRITE []) (and ([|] ($instance ?WRITE Writing) ([|] (destination ?WRITE ?OBJ) [])))))
% 		)
% 	)

fof( miloA4035, axiom,
	p__d__subclass(c__Steam,c__Water)
).



% ($documentation Steam EnglishLanguage "&%Steam refers to the &%Gas form of &%Water that
% is a result of &%Boiling it and diffusing it into the air")


% (termFormat EnglishLanguage Steam "steam")

fof( miloA4036, axiom,
	(![STEAM]: 
		(
			(
				p__d__instance(STEAM,c__Steam)
			)
			=>
			(
				(?[BOIL,WATER]: 
					(
						(
							(
								p__d__instance(BOIL,c__Boiling)
							)
						 &
							(
								p__d__instance(WATER,c__Water)
							)
						 &
							(
								p__patient(BOIL,WATER)
							)
						 &
							(
								p__result(BOIL,STEAM)
							)
						 &
							(
								p__attribute(STEAM,c__Gas)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; change subclassing of HotWaterHeater from MajorAppliance to HeatingDevice
% )

fof( miloA4037, axiom,
	p__d__subclass(c__WaterHeater,c__HeatingDevice)
).


% 	(forall (?WATER ?HEAT ?X)
% 		(=> 
% 			($instance ?X WaterHeater)
% 			(hasPurpose ?X (exists ([|] ?HEAT ([|] ?WATER [])) (and ([|] ($instance ?HEAT Heating) ([|] ($instance ?WATER Water) ([|] (patient ?HEAT ?WATER) ([|] (instrument ?HEAT ?X) [])))))))
% 		)
% 	)

% 	($domain airTemperature 1 Object)

% 	($domain airTemperature 2 TemperatureMeasure)

fof( miloA4041, axiom,
	p__subrelation(c__airTemperature,c__measure)
).



% ($documentation airTemperature EnglishLanguage 
% "(&%airTemperature ?AREA ?TEMP) means that the temperature of the 
% air at ?AREA is ?TEMP.  Temperature may be expressed in units of 
% &%TemperatureMeasure, including &%CelsiusDegree and &%FahrenheitDegree, 
% among others.")


fof( miloA4042, axiom,
	p__d__subclass(c__TemperatureAttribute,c__SubjectiveAssessmentAttribute)
).



% ($documentation TemperatureAttribute EnglishLanguage "&%TemperatureAttribute is an
% attribute that describes the temperature of a certain object")


% (termFormat EnglishLanguage TemperatureAttribute "temperature attribute")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument attibute is Object, which is subclass of Physical, whereas TemperatureMeasure is subclass of Abstract (Physical and Abstract are disjoint)
% ;;
% ;;(=>
% ;;  (and
% ;;    (attribute ?X ?Y)
% ;;    ($instance ?Y TemperatureAttribute)
% ;;    ($instance ?X Object))
% ;;  (exists (?TEMP)
% ;;    (and
% ;;      (measure ?X ?TEMP)
% ;;      ($instance ?TEMP TemperatureMeasure)
% ;;      (attribute ?TEMP ?Y))))
% )

fof( miloA4043, axiom,
	p__d__instance(c__ColdTemperature,c__TemperatureAttribute)
).



% ($documentation ColdTemperature EnglishLanguage "&%ColdTemperature is a type of 
% &%TemperatureAttribute that has a low or inadequate temperature")


% (termFormat EnglishLanguage ColdTemperature "cold")

fof( miloA4044, axiom,
	p__successorAttributeClosure(c__ColdTemperature,c__HotTemperature)
).


fof( miloA4045, axiom,
	p__d__instance(c__CoolTemperature,c__TemperatureAttribute)
).



% ($documentation CoolTemperature EnglishLanguage "&%CoolTemperature describes how there
% is some relief from heat but not very cold, is between cold and warm")


% (termFormat EnglishLanguage CoolTemperature "cool")

fof( miloA4046, axiom,
	p__successorAttribute(c__ColdTemperature,c__CoolTemperature)
).


fof( miloA4047, axiom,
	p__d__instance(c__WarmTemperature,c__TemperatureAttribute)
).



% ($documentation WarmTemperature EnglishLanguage "&%WarmTemperature describes how there
% is a comfortable or agreeable degree of heat")


% (termFormat EnglishLanguage WarmTemperature "warm")

fof( miloA4048, axiom,
	p__successorAttribute(c__CoolTemperature,c__WarmTemperature)
).


fof( miloA4049, axiom,
	p__d__instance(c__HotTemperature,c__TemperatureAttribute)
).



% ($documentation HotTemperature EnglishLanguage "&%HotTemperature describes how something 
% has a high temperature")


% (termFormat EnglishLanguage HotTemperature "hot")

fof( miloA4050, axiom,
	p__successorAttribute(c__WarmTemperature,c__HotTemperature)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; $instance missing
% ;;
% ;;(=>
% ;;  (and
% ;;    (immediateInstance ?X ?CLASS)
% ;;    (immediateInstance ?Y ?CLASS)
% ;;    (attribute ?X ColdTemperature)
% ;;    (attribute ?Y HotTemperature))
% ;;  (exists (?TEMPX ?TEMPY)
% ;;    (and
% ;;      (measure ?X ?TEMPX)
% ;;      ($instance ?TEMPX TemperatureMeasure)
% ;;      (measure ?Y ?TEMPY)
% ;;      ($instance ?TEMPY TemperatureMeasure)
% ;;      (greaterThan ?TEMPY ?TEMPX))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

fof( miloA4051, axiom,
	(![CLASS,X,Y]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__d__instance(Y,c__Object)
					)
				 &
					(
						p__d__instance(X,CLASS)
					)
				 &
					(
						p__d__instance(Y,CLASS)
					)
				 &
					(
						p__attribute(X,c__ColdTemperature)
					)
				 &
					(
						p__attribute(Y,c__HotTemperature)
					)
				)
			)
			=>
			(
				(?[TEMPX,TEMPY]: 
					(
						(
							(
								p__measure(X,TEMPX)
							)
						 &
							(
								p__d__instance(TEMPX,c__TemperatureMeasure)
							)
						 &
							(
								p__measure(Y,TEMPY)
							)
						 &
							(
								p__d__instance(TEMPY,c__TemperatureMeasure)
							)
						 &
							(
								p__greaterThan(TEMPY,TEMPX)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4052, axiom,
	p__d__instance(c__Multilingual,c__RelationalAttribute)
).



% ($documentation Multilingual EnglishLanguage "&%Multilingual describes a person who is
% able to speak more than one language fluently")


% (termFormat EnglishLanguage Multilingual "multilingual")

fof( miloA4053, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__Multilingual)
					)
				)
			)
			=>
			(
				p__d__instance(X,c__Human)
			)
		)
	)
).


% 	(forall (?X ?LANG1 ?SPEAK ?LANG2)
% 		(=> 
% 			(and 
% 				(attribute ?X Multilingual)
% 				($instance ?SPEAK Speaking)
% 				(agent ?SPEAK ?X)
% 			)
% 			(modalAttribute (exists ([|] ?LANG1 ([|] ?LANG2 [])) (and ([|] ($instance ?LANG1 SpokenHumanLanguage) ([|] ($instance ?LANG2 SpokenHumanLanguage) ([|] (not (equal ?LANG1 ?LANG2)) ([|] (or ([|] (patient ?SPEAK ?LANG1) ([|] (patient ?SPEAK ?LANG2) []))) [])))))) Possibility)
% 		)
% 	)

fof( miloA4055, axiom,
	p__d__subclass(c__RecreationalVehicle,c__Vehicle)
).


fof( miloA4056, axiom,
	p__d__subclass(c__RecreationalVehicle,c__MobileResidence)
).



% ($documentation RecreationalVehicle EnglishLanguage "A &%RecreationalVehicle is a type
% of motorized &%Vehicle that is used for camping or can serve as a &%Residence that is
% mobile")


% (termFormat EnglishLanguage RecreationalVehicle "rv")

% 	(forall (?BED ?DINING ?KITCHEN ?RV)
% 		(=> 
% 			($instance ?RV RecreationalVehicle)
% 			(modalAttribute (exists ([|] ?BED ([|] ?DINING ([|] ?KITCHEN []))) (and ([|] ($instance ?BED Bed) ([|] ($instance ?DINING DiningArea) ([|] ($instance ?KITCHEN KitchenArea) ([|] (located ?BED ?RV) ([|] (located ?DINING ?RV) ([|] (located ?KITCHEN ?RV) [])))))))) Likely)
% 		)
% 	)

fof( miloA4058, axiom,
	p__d__subclass(c__ElectronicLock,c__Lock)
).



% ($documentation ElectronicLock EnglishLanguage "&%ElectronicLock is a type of &%Lock
% that depends on some &%ElectronicSignalling process to open")


% (termFormat EnglishLanguage ElectronicLock "electronic lock")

% 	(forall (?LOCK ?ES ?PROC)
% 		(=> 
% 			($instance ?LOCK ElectronicLock)
% 			(hasPurpose ?LOCK (exists ([|] ?ES ([|] ?PROC [])) (and ([|] ($instance ?ES ElectronicSignalling) ([|] (destination ?ES ?LOCK) ([|] ($instance ?PROC Opening) ([|] (instrument ?PROC ?LOCK) ([|] (before (BeginFn (WhenFn ?ES)) (BeginFn (WhenFn ?PROC))) []))))))))
% 		)
% 	)

fof( miloA4060, axiom,
	p__d__subclass(c__RunningTrack,c__StationaryArtifact)
).


fof( miloA4061, axiom,
	p__d__subclass(c__RunningTrack,c__LandTransitway)
).



% ($documentation RunningTrack EnglishLanguage "&%RunningTrack is a &%StationaryArtifact
% which serves as a path for people running")


% (termFormat EnglishLanguage RunningTrack "running track")

% 	(forall (?HUMAN ?RUN ?TRACK)
% 		(=> 
% 			($instance ?TRACK RunningTrack)
% 			(hasPurpose ?TRACK (exists ([|] ?RUN ([|] ?HUMAN [])) (and ([|] ($instance ?HUMAN Human) ([|] ($instance ?RUN Running) ([|] (agent ?RUN ?HUMAN) ([|] (path ?RUN ?TRACK) [])))))))
% 		)
% 	)

fof( miloA4063, axiom,
	p__d__subclass(c__KnockLight,c__Device)
).



% ($documentation KnockLight EnglishLanguage "&%KnockLight is a type of &%Device that
% flashes light when a door knock is made. It is used by the hearing impaired")


% (termFormat EnglishLanguage KnockLight "knock light")

% 	(forall (?ROOM ?IMPACT ?DOOR ?SOUND ?LIGHT ?KL)
% 		(=> 
% 			(and 
% 				($instance ?KL KnockLight)
% 				($instance ?ROOM Room)
% 				(located ?KL ?ROOM)
% 				($instance ?DOOR Door)
% 				(part ?DOOR ?ROOM)
% 			)
% 			(hasPurpose ?KL (exists ([|] ?SOUND ([|] ?LIGHT ([|] ?IMPACT []))) (and ([|] ($instance ?IMPACT Impacting) ([|] (patient ?IMPACT ?DOOR) ([|] (causes ?IMPACT ?SOUND) ([|] ($instance ?SOUND RadiatingSound) ([|] (agent ?SOUND ?DOOR) ([|] (causes ?SOUND ?LIGHT) ([|] ($instance ?LIGHT RadiatingLight) ([|] (agent ?LIGHT ?KL) [])))))))))))
% 		)
% 	)

% ($comment 
% ;; A knocklight allows a deaf person to know when somebody is knocking
% )

% 	(forall (?LOC ?KL ?KNOCK ?DOOR ?X)
% 		(=> 
% 			(and 
% 				($instance ?KL KnockLight)
% 				(attribute ?X Deaf)
% 				(located ?KL ?LOC)
% 				(located ?X ?LOC)
% 				($instance ?DOOR Door)
% 				(part ?DOOR ?LOC)
% 			)
% 			(hasPurposeForAgent ?KL (knows ?X (exists ([|] ?KNOCK []) (and ([|] ($instance ?KNOCK Impacting) ([|] (patient ?KNOCK ?DOOR) []))))) ?X)
% 		)
% 	)

fof( miloA4066, axiom,
	p__d__subclass(c__PrayerMat,c__Rug)
).



% ($documentation PrayerMat EnglishLanguage "&%PrayerMat is a type of &%Rug which is used
% in &%Praying")


% (termFormat EnglishLanguage PrayerMat "prayer mat")

% 	(forall (?PRAY ?PERSON ?MAT)
% 		(=> 
% 			($instance ?MAT PrayerMat)
% 			(hasPurpose ?MAT (exists ([|] ?PRAY ([|] ?PERSON [])) (and ([|] ($instance ?PRAY Praying) ([|] (agent ?PRAY ?PERSON) ([|] ($instance ?PERSON Human) ([|] (holdsDuring (WhenFn ?PRAY) (orientation ?PERSON ?MAT On)) [])))))))
% 		)
% 	)

fof( miloA4068, axiom,
	p__d__subclass(c__VideoGame,c__Game)
).



% ($documentation VideoGame EnglishLanguage "&%VideoGame is a &%Game in &%VideoRecording
% form")


% (termFormat EnglishLanguage VideoGame "video game")

fof( miloA4069, axiom,
	(![GAME]: 
		(
			(
				p__d__instance(GAME,c__VideoGame)
			)
			=>
			(
				(?[VIDEO]: 
					(
						(
							(
								p__d__instance(VIDEO,c__VideoRecording)
							)
						 &
							(
								p__represents(VIDEO,GAME)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4070, axiom,
	p__d__subclass(c__VideoGamePlayer,c__MediaSystem)
).



% ($documentation VideoGamePlayer EnglishLanguage "&%VideoGamePlayer is a &%MediaSystem
% that enables the playing of a &%VideoGame")


% (termFormat EnglishLanguage VideoGamePlayer "video game player")

% 	(forall (?PLAYER ?MOVE ?CONTROLLER ?X ?RL ?GAME)
% 		(=> 
% 			($instance ?X VideoGamePlayer)
% 			(hasPurpose ?X (exists ([|] ?GAME ([|] ?RL ([|] ?MOVE ([|] ?CONTROLLER ([|] ?PLAYER []))))) (and ([|] ($instance ?GAME VideoGame) ([|] (instrument ?GAME ?X) ([|] (agent ?GAME ?PLAYER) ([|] ($instance ?MOVE Maneuver) ([|] (instrument ?MOVE ?CONTROLLER) ([|] (agent ?MOVE ?PLAYER) ([|] (subProcess ?MOVE ?GAME) ([|] (part ?CONTROLLER ?X) ([|] ($instance ?RL RadiatingLight) ([|] (agent ?RL ?X) ([|] (patient ?RL ?GAME) []))))))))))))))
% 		)
% 	)

% ($comment 
% ;; KJN: Moving this to Communications as RadioSystem is defined there.        
% ;;($subclass BabyMonitoringSystem RadioSystem)
% ;;(documentation BabyMonitoringSystem EnglishLanguage "&%BabyMonitoringSystem refers to
% ;;the radio system that &%Broadcasting at 49Mhz, consisting of a transmitter and receiver,
% ;;where the transmitter is kept where the baby is kept, and the receiver is kept with
% ;;the person looking after the baby to be able to hear sounds and monitor the baby")
% ;;(termFormat EnglishLanguage BabyMonitoringSystem "baby monitor")
% ;;
% ;;(=>
% ;;  ($instance ?X BabyMonitoringSystem)
% ;;  (exists (?TX ?RX)
% ;;    (and
% ;;      ($instance ?RX RadioReceiver)
% ;;      ($instance ?TX Device)
% ;;      (engineeringSubcomponent ?RX ?X)
% ;;      (engineeringSubcomponent ?TX ?X)
% ;;      (hasPurpose ?X
% ;;        (exists (?BABY ?CARER ?SOUND ?LOC1 ?LOC2 ?PROC ?RADIO)
% ;;          (and
% ;;            ($instance ?BABY HumanBaby)
% ;;            ($instance ?CARER Human)
% ;;            (located ?BABY ?LOC1)
% ;;            (located ?CARER ?LOC2)
% ;;            (not (equal ?LOC1 ?LOC2))
% ;;            ($instance ?PROC Maintaining)
% ;;            (patient ?PROC ?BABY)
% ;;            (agent ?PROC ?CARER)
% ;;            (located ?TX ?LOC1)
% ;;            (located ?RX ?LOC2)
% ;;            ($instance ?SOUND RadiatingSound)
% ;;            (eventLocated ?SOUND ?LOC1)
% ;;            ($instance ?RADIO RadioEmission)
% ;;            (patient ?RADIO ?SOUND)
% ;;            (destination ?RADIO ?RX)
% ;;            (agent ?RADIO ?TX)))))))
% ;;
% ;; KJN: Moving to engineering.kif as Controller is defined there            
% ;;($subclass RemoteControl Controller)
% ;;(documentation RemoteControl EnglishLanguage "&%RemoteControl is &%Controller that 
% ;;does some &%ElectronicSignalling to communicate and control another &%Device")
% ;;(termFormat EnglishLanguage RemoteControl "remote control")
% ;;
% ;;(=>
% ;;  ($instance ?X RemoteControl)
% ;;  (hasPurpose ?X
% ;;    (exists (?SIGNAL ?DEVICE)
% ;;      (and
% ;;        ($instance ?SIGNAL ElectronicSignalling)
% ;;        (agent ?SIGNAL ?X)
% ;;        (destination ?SIGNAL ?DEVICE)
% ;;        ($instance ?DEVICE Device)
% ;;        (not (equal ?X ?DEVICE))))))
% ;;
% ;; KJN: Moving to Communications.kif        
% ;;($subclass TVRemoteControl RemoteControl)
% ;;(documentation TVRemoteControl EnglishLanguage "&%TVRemoteControl is a type of 
% ;;&%RemoteControl that signals to a &%TelevisionReceiver")
% ;;(termFormat EnglishLanguage TVRemoteControl "tv remote")
% ;;
% ;;(=>
% ;;  ($instance ?X TVRemoteControl)
% ;;  (hasPurpose ?X
% ;;    (exists (?SIGNAL ?DEVICE)
% ;;      (and
% ;;        ($instance ?SIGNAL ElectronicSignalling)
% ;;        (agent ?SIGNAL ?X)
% ;;        (destination ?SIGNAL ?DEVICE)
% ;;        ($instance ?DEVICE TelevisionReceiver)))))
% )

fof( miloA4072, axiom,
	p__d__subclass(c__ElectricalOutlet,c__Device)
).



% ($documentation ElectricalOutlet EnglishLanguage "&%ElectricalOutlet refers to a 
% &%Device that is used to connect a plug to a power source so that &%Electricity can 
% flow from the source to an &%ElectricDevice")


% (termFormat EnglishLanguage ElectricalOutlet "electrical outlet")

% 	(forall (?X)
% 		(=> 
% 			($instance ?X ElectricalOutlet)
% 			(exists (?HOLE)
% 				(and 
% 					($instance ?HOLE Collection)
% 					(memberType ?HOLE Hole)
% 					(part ?HOLE ?X)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?WIRE ?X ?POWER)
% 		(=> 
% 			($instance ?X ElectricalOutlet)
% 			(hasPurpose ?X (exists ([|] ?POWER ([|] ?WIRE [])) (and ([|] ($instance ?POWER PowerSource) ([|] ($instance ?WIRE Collection) ([|] (memberType ?WIRE WireLine) ([|] (connectsEngineeringComponents ?WIRE ?X ?POWER) [])))))))
% 		)
% 	)

fof( miloA4075, axiom,
	p__d__subclass(c__ElectricalPlug,c__Plug)
).



% ($documentation ElectricalPlug EnglishLanguage "&%ElectricalPlug is a type of &%Plug 
% made of metal that is normally used to conduct electricity from an &%ElectricalOutlet
% to an &%ElectricDevice")


% (termFormat EnglishLanguage ElectricalPlug "electrical plug")

fof( miloA4076, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(X,c__ElectricalPlug)
					)
				)
			)
			=>
			(
				p__material(c__Metal,X)
			)
		)
	)
).


% 	(forall (?X ?OUTLET)
% 		(=> 
% 			($instance ?X ElectricalPlug)
% 			(hasPurpose ?X (exists ([|] ?OUTLET []) (and ([|] ($instance ?OUTLET ElectricalOutlet) ([|] (completelyFills ?X ?OUTLET) [])))))
% 		)
% 	)

fof( miloA4078, axiom,
	(![PLUG,OUTLET,POWER,DEVICE]: 
		(
			(
				(
					(
						p__d__instance(PLUG,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(DEVICE,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(OUTLET,c__Hole)
					)
				 &
					(
						p__d__instance(OUTLET,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(POWER,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(PLUG,c__ElectricalPlug)
					)
				 &
					(
						p__d__instance(DEVICE,c__ElectricDevice)
					)
				 &
					(
						p__d__instance(OUTLET,c__ElectricalOutlet)
					)
				 &
					(
						p__connectedEngineeringComponents(DEVICE,PLUG)
					)
				 &
					(
						p__completelyFills(PLUG,OUTLET)
					)
				 &
					(
						p__d__instance(POWER,c__PowerSource)
					)
				 &
					(
						p__connectedEngineeringComponents(POWER,OUTLET)
					)
				)
			)
			=>
			(
				(?[RE]: 
					(
						(
							(
								p__d__instance(RE,c__RadiatingElectromagnetic)
							)
						 &
							(
								p__origin(RE,POWER)
							)
						 &
							(
								p__destination(RE,DEVICE)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4079, axiom,
	p__d__subclass(c__OutletAdapter,c__Device)
).



% ($documentation OutletAdapter EnglishLanguage "An &%OutletAdapter is a device that, on
% one side has &%Hole and on another side has metal prongs so that an &%ElectricalPlug
% can fit into an &%ElectricalOutlet")


% (termFormat EnglishLanguage OutletAdapter "outlet adapter")

% 	(forall (?HOLD ?ADAPT)
% 		(=> 
% 			($instance ?ADAPT OutletAdapter)
% 			(exists (?HOLE)
% 				(and 
% 					($instance ?HOLE Collection)
% 					(memberType ?HOLE Hole)
% 					(part ?HOLD ?ADAPT)
% 					(material Metal ?ADAPT)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?ADAPT ?PLUG ?OUTLET)
% 		(=> 
% 			($instance ?ADAPT OutletAdapter)
% 			(hasPurpose ?ADAPT (exists ([|] ?OUTLET ([|] ?PLUG [])) (and ([|] ($instance ?PLUG ElectricalPlug) ([|] ($instance ?OUTLET ElectricalOutlet) ([|] (completelyFills ?PLUG ?ADAPT) ([|] (completelyFills ?ADAPT ?OUTLET) ([|] (connectsEngineeringComponents ?ADAPT ?PLUG ?OUTLET) []))))))))
% 		)
% 	)

fof( miloA4082, axiom,
	p__d__subclass(c__AirConditioner,c__ElectricDevice)
).



% ($documentation AirConditioner EnglishLanguage "&%AirConditioner is a type of
% &%ElectricDevice that is designed to provide comfort during hot or cold weather by
% keeping the air in an area a specific temperature")


% (termFormat EnglishLanguage AirConditioner "air conditioner")

% 	(forall (?X ?PROC ?AREA ?TEMP)
% 		(=> 
% 			($instance ?X AirConditioner)
% 			(hasPurpose ?X (exists ([|] ?PROC ([|] ?TEMP ([|] ?AREA []))) (and ([|] (located ?X ?AREA) ([|] ($instance ?PROC Process) ([|] (instrument ?PROC ?X) ([|] (result ?PROC (airTemperature ?AREA ?TEMP)) [])))))))
% 		)
% 	)

fof( miloA4084, axiom,
	p__d__instance(c__Surrounded,c__PositionalAttribute)
).



% ($documentation Surrounded EnglishLanguage "&%Surrounded describes how an object or a
% collection of objects &%meetsSpatially with all sides of another object")


% (termFormat EnglishLanguage Surrounded "surrounded")

fof( miloA4085, axiom,
	(![OBJ1,OBJ2,X]: 
		(
			(
				(
					(
						p__d__instance(OBJ2,c__Object)
					)
				 &
					(
						p__d__instance(OBJ1,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(X,c__SelfConnectedObject)
					)
				 &
					(
						p__orientation(OBJ1,OBJ2,c__Surrounded)
					)
				 &
					(
						p__side(X,OBJ1)
					)
				)
			)
			=>
			(
				p__meetsSpatially(X,OBJ2)
			)
		)
	)
).


fof( miloA4086, axiom,
	p__d__subclass(c__Courtyard,c__StationaryArtifact)
).



% ($documentation Courtyard EnglishLanguage "&%Courtyard is an unroofed area wholly or 
% partly surrounded by walls or buildings")


% (termFormat EnglishLanguage Courtyard "courtyard")

fof( miloA4087, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(X,c__Courtyard)
					)
				)
			)
			=>
			(
				(
					(
						(![ROOF]: 
							(
								(
									~ (
										p__d__instance(ROOF,c__SelfConnectedObject)
									)
								 |
									~ (
										p__d__instance(ROOF,c__Roof)
									)
								 |
									~ (
										p__top(ROOF,X)
									)
								)
							)
						)
					)
				 &
					(
						(?[BLDG]: 
							(
								(
									(
										p__d__instance(BLDG,c__Building)
									)
								 &
									(
										p__orientation(X,BLDG,c__Surrounded)
									)
								)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4088, axiom,
	p__d__subclass(c__SpeakerDevice,c__ElectricDevice)
).



% ($documentation SpeakerDevice EnglishLanguage "&%SpeakerDevice is a type of device that
% converts electrical signals into sounds loud enough to be heard at a distance")


% (termFormat EnglishLanguage SpeakerDevice "speaker")

% 	(forall (?X ?RS)
% 		(=> 
% 			($instance ?X SpeakerDevice)
% 			(hasPurpose ?X (exists ([|] ?RS []) (and ([|] ($instance ?RS RadiatingSound) ([|] (instrument ?RS ?X) ([|] (attribute ?RS Audible) []))))))
% 		)
% 	)

fof( miloA4090, axiom,
	p__d__subclass(c__Earphone,c__Device)
).



% ($documentation Earphone EnglishLanguage "&%Earphone is a type of &%Device that that
% converts electric signals into sound and is usually held over or inserted in the ear")


% (termFormat EnglishLanguage Earphone "earphone")

% 	(forall (?SIGNAL ?ES ?PROC ?RS ?X ?EAR)
% 		(=> 
% 			($instance ?X Earphone)
% 			(hasPurpose ?X (exists ([|] ?ES ([|] ?RS ([|] ?SIGNAL ([|] ?EAR ([|] ?PROC []))))) (and ([|] ($instance ?ES ElectricalSignalling) ([|] (patient ?ES ?SIGNAL) ([|] (destination ?ES ?X) ([|] ($instance ?PROC Process) ([|] (instrument ?PROC ?X) ([|] (patient ?PROC ?SIGNAL) ([|] (result ?PROC ?RS) ([|] ($instance ?RS RadiatingSound) ([|] (origin ?RS ?X) ([|] (before (BeginFn (WhenFn ?ES)) (BeginFn (WhenFn ?PROC))) ([|] (before (BeginFn (WhenFn ?PROC)) (BeginFn (WhenFn ?RS))) ([|] ($instance ?EAR Ear) ([|] (orientation ?X ?EAR Adjacent) []))))))))))))))))
% 		)
% 	)

fof( miloA4092, axiom,
	p__d__subclass(c__Public,c__GroupOfPeople)
).



% ($documentation Public EnglishLanguage "a body of people sharing some common interest;
% example: the reading public.")


% ($comment 
% ;; the members of a Public have common interests
% )

% 	(forall (?T1 ?AGENT1 ?AGENT2)
% 		(=> 
% 			(holdsDuring ?T1 (and ([|] (member ?AGENT1 Public) ([|] (member ?AGENT2 Public) ([|] (not (equal ?AGENT1 ?AGENT2)) [])))))
% 			(exists (?INTEREST)
% 				(holdsDuring ?T1 (and ([|] (desires ?AGENT1 ?INTEREST) ([|] (desires ?AGENT2 ?INTEREST) []))))
% 			)
% 		)
% 	)

fof( miloA4094, axiom,
	p__d__subclass(c__PublicAddressSystem,c__CommunicationSystem)
).



% ($documentation PublicAddressSystem EnglishLanguage "&%PublicAddressSystem refers to an
% electronic amplification system used as a communication system in public areas")


% (termFormat EnglishLanguage PublicAddressSystem "public address system")

% 	(forall (?X)
% 		(=> 
% 			($instance ?X PublicAddressSystem)
% 			(and 
% 				(memberType ?X Microphone)
% 				(memberType ?X SpeakerDevice)
% 			)
% 		)
% 	)

% 	(forall (?AREA ?X ?GRP ?RS ?HEAR ?PERSON)
% 		(=> 
% 			($instance ?X PublicAddressSystem)
% 			(hasPurpose ?X (exists ([|] ?RS ([|] ?AREA ([|] ?GRP []))) (and ([|] ($instance ?AREA LandArea) ([|] (located ?X ?AREA) ([|] ($instance ?GRP GroupOfPeople) ([|] (located ?GRP ?AREA) ([|] ($instance ?RS RadiatingSound) ([|] (instrument ?RS ?X) ([|] (forall ([|] ?PERSON []) (implies (member ?PERSON ?GRP) (exists ([|] ?HEAR []) (and ([|] ($instance ?HEAR Hearing) ([|] (patient ?HEAR ?RS) ([|] (agent ?HEAR ?PERSON) []))))))) []))))))))))
% 		)
% 	)

fof( miloA4097, axiom,
	p__d__subclass(c__Wheelchair,c__TransportationDevice)
).



% ($documentation Wheelchair EnglishLanguage "&%Wheelchair is a type of &%LandVehicle 
% that is used to individually transport those who cannot walk")


% (termFormat EnglishLanguage Wheelchair "wheelchair")

fof( miloA4098, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Wheelchair)
			)
			=>
			(
				(?[WHEEL,SEAT]: 
					(
						(
							(
								p__d__instance(SEAT,c__Seat)
							)
						 &
							(
								p__d__instance(WHEEL,c__Wheel)
							)
						 &
							(
								p__part(SEAT,X)
							)
						 &
							(
								p__part(WHEEL,X)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?HUMAN ?TRANSPORT ?X)
% 		(=> 
% 			($instance ?X Wheelchair)
% 			(hasPurpose ?X (exists ([|] ?TRANSPORT ([|] ?HUMAN [])) (and ([|] ($instance ?HUMAN Human) ([|] (not (capability Walking agent ?HUMAN)) ([|] ($instance ?TRANSPORT Transportation) ([|] (agent ?TRANSPORT ?HUMAN) ([|] (instrument ?TRANSPORT ?X) []))))))))
% 		)
% 	)

fof( miloA4100, axiom,
	p__d__instance(c__WheelchairAccessible,c__ObjectiveNorm)
).



% ($documentation WheelchairAccessible EnglishLanguage "&%WheelchairAccessible describes
% how a location lets a person using a wheelchair move around without interference and 
% with access to all features of that place.")


% (termFormat EnglishLanguage WheelchairAccessible "wheelchair accessible")

fof( miloA4101, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__WheelchairAccessible)
					)
				)
			)
			=>
			(
				p__attribute(X,c__HandicappedFriendly)
			)
		)
	)
).


% 	(forall (?WHEELCHAIR ?MOTION ?X)
% 		(=> 
% 			(and 
% 				(attribute ?X WheelchairAccessible)
% 				(or 
% 					($instance ?X Building)
% 					($instance ?X Room)
% 				)
% 			)
% 			(modalAttribute (exists ([|] ?MOTION ([|] ?WHEELCHAIR [])) (and ([|] ($instance ?MOTION Motion) ([|] (instrument ?MOTION ?WHEELCHAIR) ([|] ($instance ?WHEELCHAIR Wheelchair) ([|] (eventLocated ?MOTION ?X) [])))))) Possibility)
% 		)
% 	)

fof( miloA4103, axiom,
	p__d__instance(c__HandicappedFriendly,c__SubjectiveAssessmentAttribute)
).



% ($documentation HandicappedFriendly EnglishLanguage "&%HandicappedFriendly describes an 
% object that can be easily used by somebody who has some &%Disability")


% (termFormat EnglishLanguage HandicappedFriendly "handicapped friendly")

fof( miloA4104, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__HandicappedFriendly)
					)
				)
			)
			=>
			(
				p__d__instance(X,c__Object)
			)
		)
	)
).


fof( miloA4105, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__HandicappedFriendly)
					)
				)
			)
			=>
			(
				(?[ATTR,PERSON]: 
					(
						(
							(
								p__d__instance(ATTR,c__Disability)
							)
						 &
							(
								p__d__instance(PERSON,c__Human)
							)
						 &
							(
								p__attribute(PERSON,ATTR)
							)
						 &
							(
								p__inScopeOfInterest(PERSON,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4106, axiom,
	p__d__subclass(c__Recliner,c__Seat)
).



% ($documentation Recliner EnglishLanguage "&%Recliner is a type of &%Seat whose back can
% be lowered and the foot can be rasied to allow the sitter to recline in it.")


% (termFormat EnglishLanguage Recliner "recliner")

% 	(forall (?INCLINE ?X)
% 		(=> 
% 			($instance ?X Recliner)
% 			(modalAttribute (exists ([|] ?INCLINE []) (and ([|] ($instance ?INCLINE Inclining) ([|] (patient ?INCLINE ?X) [])))) Possibility)
% 		)
% 	)

fof( miloA4108, axiom,
	p__d__subclass(c__VisualContentBearingPhysical,c__ContentBearingPhysical)
).



% ($documentation VisualContentBearingPhysical EnglishLanguage
% "Instances of &%VisualContentBearingPhysical are
% &%ContentBearingPhysicals that are intended to convey
% meaning as the result of being seen.")


fof( miloA4109, axiom,
	p__d__subclass(c__VisualContentBearingObject,c__ContentBearingPhysical)
).


fof( miloA4110, axiom,
	p__d__subclass(c__VisualContentBearingObject,c__VisualContentBearingPhysical)
).



% ($documentation VisualContentBearingObject
% EnglishLanguage "Instances of &%VisualContentBearingObject are
% &%ContentBearingObjects that are intended to convey meaning as
% the result of being seen.")


fof( miloA4111, axiom,
	p__d__subclass(c__Image,c__VisualContentBearingObject)
).



% ($documentation Image EnglishLanguage "Instances of &%Image are
% &%VisualContentBearingObjects that convey their meaning primarily
% in non-textual form.")


fof( miloA4112, axiom,
	p__d__subclass(c__MultimediaProjector,c__MediaSystem)
).



% ($documentation MultimediaProjector EnglishLanguage "&%MultimediaProjector is a type
% of &%MediaSystem that projects images on a screen")


% (termFormat EnglishLanguage MultimediaProjector "multimedia projector")

% 	(forall (?VIDEO ?RS ?X ?SCREEN)
% 		(=> 
% 			($instance ?X MultimediaProjector)
% 			(hasPurpose ?X (exists ([|] ?RS ([|] ?SCREEN ([|] ?VIDEO []))) (and ([|] ($instance ?RS RadiatingLight) ([|] (instrument ?RS ?X) ([|] (patient ?RS ?VIDEO) ([|] (or ([|] ($instance ?VIDEO VideoRecording) ([|] ($instance ?VIDEO Image) []))) ([|] (destination ?RS ?SCREEN) ([|] ($instance ?SCREEN Artifact) ([|] (attribute ?SCREEN Flat) ([|] (not (connected ?X ?SCREEN)) [])))))))))))
% 		)
% 	)

fof( miloA4114, axiom,
	p__d__subclass(c__AudioRecorder,c__Device)
).



% ($documentation AudioRecorder EnglishLanguage "&%AudioRecorder is a type of &%Device
% that creates an &%AudioRecording by capturing sound and storing it in a &%DataStorageDevice")


% (termFormat EnglishLanguage AudioRecorder "audio recorder")

% 	(forall (?X ?RS ?PROC ?RECORD)
% 		(=> 
% 			($instance ?X AudioRecorder)
% 			(hasPurpose ?X (exists ([|] ?RS ([|] ?RECORD ([|] ?PROC []))) (and ([|] ($instance ?RS RadiatingSound) ([|] ($instance ?PROC IntentionalProcess) ([|] (instrument ?PROC ?X) ([|] (patient ?PROC ?RS) ([|] (result ?PROC ?RECORD) ([|] ($instance ?RECORD AudioRecording) [])))))))))
% 		)
% 	)

% ($comment 
% ;; KJN: Moving to Media.kif as RecordingTape is defined there.        
% ;;($subclass TapeRecorder AudioRecorder)
% ;;(documentation TapeRecorder EnglishLanguage "&%TapeRecorder is a type of &%AudioRecorder
% ;;that stores the recorded &%AudioRecording on a &%RecordingTape")
% ;;(termFormat EnglishLanguage TapeRecorder "tape recorder")
% ;;
% ;;(=>
% ;;  ($instance ?X TapeRecorder)
% ;;  (hasPurpose ?X
% ;;    (exists (?AUDIO ?TAPE ?PROC)
% ;;      (and
% ;;        ($instance ?PROC IntentionalProcess)
% ;;        (instrument ?PROC ?X)
% ;;        (result ?PROC ?AUDIO)
% ;;        ($instance ?AUDIO AudioRecording)
% ;;        ($instance ?TAPE RecordingTape)
% ;;        (holdsDuring ?PROC
% ;;          (connected ?TAPE ?X))
% ;;        (before 
% ;;          (BeginFn (WhenFn ?PROC))
% ;;          (BeginFn (WhenFn (part ?AUDIO ?TAPE))))))))
% ;;       
% )

fof( miloA4116, axiom,
	p__d__subclass(c__VideoDisplay,c__ElectricDevice)
).



% ($documentation VideoDisplay EnglishLanguage "&%VideoDisplay is a type of &%ElectricDevice
% that can &%RadiatingLight to show &%VideoRecording")


% (termFormat EnglishLanguage VideoDisplay "video display")

% 	(forall (?VIDEO ?RL ?X)
% 		(=> 
% 			($instance ?X VideoDisplay)
% 			(hasPurpose ?X (exists ([|] ?RL ([|] ?VIDEO [])) (and ([|] ($instance ?RL RadiatingLight) ([|] ($instance ?VIDEO VideoRecording) ([|] (patient ?RL ?VIDEO) ([|] (instrument ?RL ?X) [])))))))
% 		)
% 	)

% ($comment 
% ;; KJN: Moving this to Communications.kif as it seems to make more sense there, along
% ;; with CableTelevisionSystem and BroadcastTelevisionSystem        
% ;;($subclass SatelliteTelevisionSystem CommunicationSystem)
% ;;(documentation SatelliteTelevisionSystem EnglishLanguage "&%SatelliteTelevisionSystem       
% ;;is a &%CommunicationSystem where &%ArtificialSatellite is used to transfer TV signals")
% ;;(termFormat EnglishLanguage SatelliteTelevisionSystem "satellite tv")
% ;;
% ;;(=>
% ;;  ($instance ?TV SatelliteTelevisionSystem)
% ;;  (exists (?SAT ?RECEIVE)
% ;;    (and
% ;;      ($instance ?SAT ArtificialSatellite)
% ;;      (member ?SAT ?TV)
% ;;     ($instance ?RECEIVE TelevisionReceiver)
% ;;      (member ?RECEIVE ?TV))))
% ;;
% ;;($subclass TelevisionSet ElectricDevice)
% ;;(documentation TelevisionSet EnglishLanguage "&%TelevisionSet is an &%ElectricDevice
% ;;comprised of a &%TelevisionReceiver and some form of &%VideoDisplay and is part of
% ;;a &%TelevisionSystem")
% ;;(termFormat EnglishLanguage TelevisionSet "television set")
% ;;
% ;;(=>
% ;;  ($instance ?TV TelevisionSet)
% ;;  (exists (?RECEIVER ?DISPLAY)
% ;;    (and
% ;;      ($instance ?RECEIVER TelevisionReceiver)
% ;;      ($instance ?DISPLAY VideoDisplay)
% ;;      (part ?RECEIVER ?TV)
% ;;      (part ?DISPLAY ?TV))))
% ;;
% ;; KJN: Moving to engineering.kif as Controller is defined there      
% ;;($subclass TemperatureControl Controller)
% ;;(documentation TemperatureControl EnglishLanguage "&%TemperatureControl is a type
% ;;of &%Controller that is used to set the ideal &%airTemperature in the room. It is normally
% ;;a part of an &%ElectricDevice that conditions the room to reach that temperature")
% ;;(termFormat EnglishLanguage TemperatureControl "temperature control")
% ;;
% ;;(=>
% ;;  ($instance ?CTRL TemperatureControl)
% ;;  (exists (?DEVICE ?TEMP)
% ;;    (and
% ;;      ($instance ?DEVICE ElectricDevice)
% ;;      (part ?CTRL ?DEVICE)
% ;;      (hasPurpose ?DEVICE
% ;;        (exists (?PROC ?AREA)
% ;;          (and
% ;;            ($instance ?AREA Region)
% ;;            ($instance ?PROC Process)
% ;;            (instrument ?PROC ?X)
% ;;            (result ?PROC (airTemperature ?AREA ?TEMP))))))))
% )

fof( miloA4118, axiom,
	p__d__subclass(c__TDDPhone,c__Telephone)
).



% ($documentation TDDPhone EnglishLanguage "&%TDDPhone, which stands for Telecommunications
% Device for the Deaf, describes a &%Telephone that is designed so that &%Deaf people can 
% use it")


% 	(forall (?TDD ?PHONING ?AGENT)
% 		(=> 
% 			($instance ?TDD TDDPhone)
% 			(hasPurpose ?TDD (exists ([|] ?AGENT ([|] ?PHONING [])) (and ([|] ($instance ?PHONING Telephoning) ([|] (instrument ?PHONING ?TDD) ([|] (agent ?PHONING ?AGENT) ([|] (attribute ?AGENT Deaf) [])))))))
% 		)
% 	)

fof( miloA4120, axiom,
	p__d__subclass(c__Photocopier,c__ElectricDevice)
).



% ($documentation Photocopier EnglishLanguage "An &%ElectricDevice designed for &%Making a two dimensional representation of an &%Object or a copy of a &%TwoDimensionalObject. Note that it is not necessarily used for &%Copying because it doesn't preserve all the &%Attributes of the original.")


% 	(forall (?X ?OBJ1 ?COPY ?SHEET ?OBJ2 ?INFO)
% 		(=> 
% 			($instance ?X Photocopier)
% 			(hasPurpose ?X (implies (and ([|] ($instance ?OBJ1 TwoDimensionalObject) ([|] ($instance ?OBJ1 VisualContentBearingObject) ([|] (containsInformation ?OBJ1 ?INFO) ([|] ($instance ?COPY Photocopying) ([|] (instrument ?COPY ?X) ([|] (patient ?COPY ?OBJ1) []))))))) (exists ([|] ?OBJ2 ([|] ?SHEET [])) (and ([|] (result ?COPY ?OBJ2) ([|] ($instance ?OBJ2 TwoDimensionalObject) ([|] ($instance ?OBJ2 VisualContentBearingObject) ([|] ($instance ?SHEET PrintedSheet) ([|] (located ?OBJ2 ?SHEET) ([|] (containsInformation ?OBJ2 ?INFO) []))))))))))
% 		)
% 	)

% 	(forall (?COPY ?X)
% 		(=> 
% 			($instance ?X Photocopier)
% 			(hasPurpose ?X (exists ([|] ?COPY []) (and ([|] ($instance ?COPY Photocopying) ([|] (instrument ?COPY ?X) [])))))
% 		)
% 	)

fof( miloA4123, axiom,
	p__d__subclass(c__Photocopying,c__Making)
).



% ($documentation Photocopying EnglishLanguage "The &%Process of &%Making a two dimensional representation of an &%Object. Note the difference between &%Photocopying and &%Copying, the result of &%Copying is na exact copy.")


fof( miloA4124, axiom,
	(![COPY]: 
		(
			(
				p__d__instance(COPY,c__Photocopying)
			)
			=>
			(
				(?[OBJ1,OBJ2]: 
					(
						(
							(
								p__d__instance(OBJ1,c__Object)
							)
						 &
							(
								p__d__instance(OBJ2,c__VisualContentBearingObject)
							)
						 &
							(
								p__patient(COPY,OBJ1)
							)
						 &
							(
								p__result(COPY,OBJ2)
							)
						 &
							(
								p__represents(OBJ2,OBJ1)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4125, axiom,
	p__d__subclass(c__Sail,c__Artifact)
).



% ($documentation Sail EnglishLanguage "&%Sail refers to an &%Artifact made of some type
% of &%Fabric which by means of which wind is used to propel a sailing vessel")


% (termFormat EnglishLanguage Sail "sail")

% 	(forall (?SAIL)
% 		(=> 
% 			($instance ?SAIL Sail)
% 			(exists (?MAST)
% 				(and 
% 					(material Fabric ?SAIL)
% 					($instance ?MAST Mast)
% 					(connected ?SAIL ?MAST)
% 				)
% 			)
% 		)
% 	)

fof( miloA4127, axiom,
	p__d__subclass(c__ACPowerSource,c__PowerSource)
).



% ($documentation ACPowerSource EnglishLanguage "&%ACPowerSource refers to an alternating
% current &%PowerSource")


% (termFormat EnglishLanguage ACPowerSource "ac power source")

fof( miloA4128, axiom,
	p__d__subclass(c__SinglePhasePowerSource,c__ACPowerSource)
).


fof( miloA4129, axiom,
	p__d__subclass(c__ThreePhasePowerSource,c__ACPowerSource)
).


fof( miloA4130, axiom,
	p__d__instance(c__voltageMeasure,c__BinaryPredicate)
).



% ($documentation voltageMeasure EnglishLanguage "(&%voltageMeasure ?OBJ ?MEAS) describes
% how much electricity ?OBJ, a power source, generates")


% (termFormat EnglishLanguage voltageMeasure "voltage measure")

% 	($domain voltageMeasure 1 PowerSource)

% 	($domain voltageMeasure 2 PhysicalQuantity)

fof( miloA4133, axiom,
	(![OBJ,MEAS,QUANT]: 
		(
			(
				(
					(
						p__d__instance(MEAS,c__PhysicalQuantity)
					)
				 &
					(
						p__d__instance(OBJ,c__PowerSource)
					)
				 &
					(
						p__d__instance(QUANT,c__RealNumber)
					)
				 &
					(
						p__voltageMeasure(OBJ,MEAS)
					)
				)
			)
			=>
			(
				( MEAS = f__MeasureFn2(QUANT,c__Volt) )
			)
		)
	)
).


fof( miloA4134, axiom,
	(![OBJ,MEAS]: 
		(
			(
				(
					(
						p__d__instance(MEAS,c__PhysicalQuantity)
					)
				 &
					(
						p__d__instance(OBJ,c__PowerSource)
					)
				 &
					(
						p__voltageMeasure(OBJ,MEAS)
					)
				)
			)
			=>
			(
				(?[ELEC,PROC]: 
					(
						(
							(
								p__d__instance(ELEC,c__Electricity)
							)
						 &
							(
								p__d__instance(PROC,c__Process)
							)
						 &
							(
								p__instrument(PROC,OBJ)
							)
						 &
							(
								p__result(PROC,ELEC)
							)
						 &
							(
								p__measure(ELEC,MEAS)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4135, axiom,
	p__d__subclass(c__Document,c__ContentBearingObject)
).


fof( miloA4136, axiom,
	p__d__subclass(c__Document,c__Artifact)
).



% ($documentation Document EnglishLanguage "Instances of &%Document are
% &%ContentBearingObjects that are intended to convey propositional
% content via &%Text (&%LinguisticExpressions, seen or heard), &%Images,
% or some combination of these (e.g., an audio clip included in an
% electronic document consisting mostly of &%VisualText and some
% &%Images).  Formally, a &%Document constitutes any
% &%ContentBearingObject that is an &%Artifact conventionally
% typically intended to be transmitted and assimilated as a meaningful
% whole.  An &%Article or a &%Book would be a &%Document, but a &%Word
% or &%Paragraph typically would not.")


% ($comment 
% ;; AP - state that a document hasPurpose of being the instrument of communication
% )

% 	(forall (?COMM ?DOC)
% 		(=> 
% 			($instance ?DOC Document)
% 			(hasPurpose ?DOC (exists ([|] ?COMM []) (and ([|] ($instance ?COMM Communication) ([|] (instrument ?COMM ?DOC) [])))))
% 		)
% 	)

fof( miloA4138, axiom,
	p__d__subclass(c__Book,c__Document)
).



% ($documentation Book EnglishLanguage "A &%Document that has pages and is bound.")


fof( miloA4139, axiom,
	p__d__subclass(c__GuideBook,c__Book)
).



% ($documentation GuideBook EnglishLanguage "&%GuideBook is a type of &%Book that offers
% basic information about a place, normally designed for the use of visitors or tourists.")


% (termFormat EnglishLanguage GuideBook "guide book")

fof( miloA4140, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__GuideBook)
			)
			=>
			(
				(?[LOC]: 
					(
						(
							(
								p__d__instance(LOC,c__GeographicArea)
							)
						 &
							(
								p__refers(X,LOC)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4141, axiom,
	p__d__subclass(c__DiningGuide,c__GuideBook)
).



% ($documentation DiningGuide EnglishLanguage "&%DiningGuide is a type of &%GuideBook that
% offers information about dining places around a specific location")


% (termFormat EnglishLanguage DiningGuide "dining guide")

fof( miloA4142, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__DiningGuide)
			)
			=>
			(
				(?[LOC,REST]: 
					(
						(
							(
								p__d__instance(LOC,c__GeographicArea)
							)
						 &
							(
								p__refers(X,LOC)
							)
						 &
							(
								p__d__instance(REST,c__Restaurant)
							)
						 &
							(
								p__located(REST,LOC)
							)
						 &
							(
								p__refers(X,REST)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4143, axiom,
	p__d__subclass(c__TelephoneHandset,c__Device)
).



% ($documentation TelephoneHandset EnglishLanguage "&%TelephoneHandset is the part of the
% &%Telephone that has a &%Earphone and a &%Microphone for the transmission and reception
% of sound")


% (termFormat EnglishLanguage TelephoneHandset "telephone handset")

fof( miloA4144, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__TelephoneHandset)
			)
			=>
			(
				(?[EARPHONE,MIC]: 
					(
						(
							(
								p__d__instance(EARPHONE,c__Earphone)
							)
						 &
							(
								p__d__instance(MIC,c__Microphone)
							)
						 &
							(
								p__part(EARPHONE,X)
							)
						 &
							(
								p__part(MIC,X)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moving this to Communications.kif as some of the terms used here is defined there.      
% ;;($subclass TelephoneCradle Device)
% ;;(documentation TelephoneCradle EnglishLanguage "&%TelephoneCradle is the part of the
% ;;&%Telephone that is connected to the &%TelephoneSystem through some wire.")
% ;;(termFormat EnglishLanguage TelephoneCradle "telephone cradle")
% ;;
% ;;(=>
% ;;  ($instance ?X TelephoneCradle)
% ;;  (hasPurpose ?X
% ;;    (exists (?SYS ?WIRE)
% ;;      (and
% ;;        ($instance ?SYS TelephoneSystem)
% ;;        ($instance ?WIRE WireLine)
% ;;        (connectsEngineeringComponents ?WIRE ?X ?SYS)))))
% ;;
% ;;($subclass CordedTelephone FixedPhone)
% ;;(documentation CordedTelephone EnglishLanguage "&%CordedTelephone is a type of &%FixedPhone 
% ;;whose &%TelephoneHandset is connected to its &%TelephoneCradle by a &%WireLine")
% ;;(termFormat EnglishLanguage CordedTelephone "corded telephone")
% ;;
% ;;(=>
% ;;  ($instance ?X CordedTelephone)
% ;;  (exists (?HANDSET ?CRADLE ?WIRE)
% ;;    (and
% ;;      ($instance ?HANDSET TelephoneHandset)
% ;;      ($instance ?CRADLE TelephoneCradle)
% ;;      (part ?HANDSET ?X)
% ;;      (part ?CRADLE ?X)
% ;;      ($instance ?WIRE WireLine)
% ;;      (connectsEngineeringComponents ?WIRE ?HANDSET ?CRADLE))))
% ;;
% ;;($subclass CordlessTelephone FixedPhone)
% ;;(documentation CordlessTelephone EnglishLanguage "&%CordlessTelephone is a type of 
% ;;&%FixedPhone whose &%TelephoneHandset is not connected to its &%TelephoneCradle by a 
% ;;&%WireLine")
% ;;(termFormat EnglishLanguage CordlessTelephone "cordless telephone")
% ;;
% ;;(=>
% ;;  ($instance ?X CordlessTelephone)
% ;;  (exists (?HANDSET ?CRADLE)
% ;;    (and
% ;;      ($instance ?HANDSET TelephoneHandset)
% ;;      ($instance ?CRADLE TelephoneCradle)
% ;;      (part ?HANDSET ?X)
% ;;     (part ?CRADLE ?X)
% ;;      (not 
% ;;        (exists (?WIRE)
% ;;          (and
% ;;            ($instance ?WIRE WireLine)
% ;;            (connectsEngineeringComponents ?WIRE ?HANDSET ?CRADLE)))))))
% )

fof( miloA4145, axiom,
	p__d__subclass(c__FireAlarm,c__Device)
).



% ($documentation FireAlarm EnglishLanguage "&%FireAlarm is a &%Device that releases
% a distinctive noise to inform people that there is a &%Fire")


% (termFormat EnglishLanguage FireAlarm "fire alarm")

% 	(forall (?X ?GRP ?FIRE ?LOC)
% 		(=> 
% 			(and 
% 				($instance ?X FireAlarm)
% 				(attribute ?X DeviceOn)
% 				(located ?X ?LOC)
% 			)
% 			(exists (?RS)
% 				(and 
% 					($instance ?RS RadiatingSound)
% 					(instrument ?RS ?X)
% 					(hasPurpose ?RS (exists ([|] ?GRP []) (and ([|] ($instance ?GRP GroupOfPeople) ([|] (located ?GRP ?LOC) ([|] (knows ?GRP (exists ([|] ?FIRE []) (and ([|] ($instance ?FIRE Fire) ([|] (eventLocated ?FIRE ?LOC) []))))) []))))))
% 				)
% 			)
% 		)
% 	)

fof( miloA4147, axiom,
	p__d__subclass(c__GrabBar,c__Artifact)
).



% ($documentation GrabBar EnglishLanguage "&%GrabBar is a bar attached to a &%Wall to
% provide a handgrip for steadying yourself")


% (termFormat EnglishLanguage GrabBar "grab bar")

% 	(forall (?GRAB ?X)
% 		(=> 
% 			($instance ?X GrabBar)
% 			(and 
% 				(exists (?WALL)
% 					(and 
% 						($instance ?WALL Wall)
% 						(connected ?X ?WALL)
% 					)
% 				)
% 				(hasPurpose ?X (exists ([|] ?GRAB []) (and ([|] ($instance ?GRAB Grabbing) ([|] (instrument ?GRAB ?X) [])))))
% 			)
% 		)
% 	)

% 	(forall (?HUMAN ?X)
% 		(=> 
% 			($instance ?X GrabBar)
% 			(modalAttribute (exists ([|] ?HUMAN []) (and ([|] (attribute ?HUMAN PhysicalDisability) ([|] (inScopeOfInterest ?HUMAN ?X) [])))) Likely)
% 		)
% 	)

fof( miloA4150, axiom,
	p__d__subclass(c__HighRise,c__Building)
).



% ($documentation HighRise EnglishLanguage "&%HighRise refers to a type of &%Building
% that has greater than 10 &%BuildingLevel")


% (termFormat EnglishLanguage HighRise "high rise")

fof( miloA4151, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__HighRise)
			)
			=>
			(
				(?[LEVELS,NUM]: 
					(
						(
							(
								p__d__instance(NUM,c__Integer)
							)
						 &
							(
								p__d__instance(LEVELS,c__Collection)
							)
						 &
							(
								(![FLR]: 
									(
										(
											(
												(
													p__d__instance(FLR,c__SelfConnectedObject)
												)
											 &
												(
													p__d__instance(FLR,c__BuildingLevel)
												)
											 &
												(
													p__part(FLR,X)
												)
											)
										)
										=>
										(
											p__member(FLR,LEVELS)
										)
									)
								)
							)
						 &
							(
								p__memberCount(LEVELS,NUM)
							)
						 &
							(
								p__greaterThanOrEqualTo(NUM,c__10)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4152, axiom,
	p__d__subclass(c__Soaking,c__Wetting)
).



% ($documentation Soaking EnglishLanguage "&%Soaking refers to the process of &%Wetting
% wherein an &%Object is &%Surrounded by &%Water")


% (termFormat EnglishLanguage Soaking "soaking")

% 	(forall (?SOAK)
% 		(=> 
% 			($instance ?SOAK Soaking)
% 			(exists (?WATER ?OBJ)
% 				(and 
% 					($instance ?OBJ Object)
% 					(patient ?SOAK ?OBJ)
% 					($instance ?WATER Water)
% 					(resource ?SOAK ?WATER)
% 					(holdsDuring ?SOAK (orientation ?OBJ ?WATER Surrounded))
% 				)
% 			)
% 		)
% 	)

fof( miloA4154, axiom,
	p__d__subclass(c__GrecianTub,c__BathTub)
).



% ($documentation GrecianTub EnglishLanguage "&%GrecianTub is a combination of soaking tubs
% and standard tubs, meaning it has inreased depth for soaking, but can fit into tight
% spaces by not being as long as standard tubs")


% (termFormat EnglishLanguage GrecianTub "grecian tub")

% 	(forall (?HUMAN ?SOAK ?X)
% 		(=> 
% 			($instance ?X GrecianTub)
% 			(hasPurpose ?X (exists ([|] ?HUMAN ([|] ?SOAK [])) (and ([|] ($instance ?SOAK Soaking) ([|] ($instance ?HUMAN Human) ([|] (agent ?SOAK ?HUMAN) ([|] (patient ?SOAK ?HUMAN) ([|] (eventLocated ?SOAK ?X) []))))))))
% 		)
% 	)

fof( miloA4156, axiom,
	p__d__subclass(c__HemisphereFigure,c__ThreeDimensionalFigure)
).



% ($documentation HemisphereFigure EnglishLanguage "&%HemisphereFigure describes a figure
% that is half of a &%Sphere")


% (termFormat EnglishLanguage HemisphereFigure "hemisphere")

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misplaced variables
% ;;
% ;;(=>
% ;;  (and
% ;;    (attribute ?X ?HEMI)
% ;;    ($instance ?HEMI HemisphereFigure))
% ;;  (exists (?Y)
% ;;    (and
% ;;      ($instance ?Y Sphere)
% ;;      (half ?HEMI ?Y))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

% 	(forall (?HEMI)
% 		(=> 
% 			(attribute ?HEMI HemisphereFigure)
% 			(exists (?Y)
% 				(and 
% 					($instance ?Y Sphere)
% 					(half ?HEMI ?Y)
% 				)
% 			)
% 		)
% 	)

fof( miloA4158, axiom,
	p__d__subclass(c__Dome,c__Ceiling)
).



% ($documentation Dome EnglishLanguage "&%Dome is a type of &%Ceiling with a &%HemisphereFigure
% shape")


% (termFormat EnglishLanguage Dome "dome")

fof( miloA4159, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Dome)
			)
			=>
			(
				(?[HEMI]: 
					(
						(
							(
								p__attribute(X,HEMI)
							)
						 &
							(
								p__d__instance(HEMI,c__HemisphereFigure)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4160, axiom,
	p__d__instance(c__Historical,c__RelationalAttribute)
).



% ($documentation Historical EnglishLanguage "&%Historical describes something that was
% important in &%History")


% (termFormat EnglishLanguage Historical "historical")

fof( miloA4161, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__Historical)
					)
				)
			)
			=>
			(
				p__d__instance(X,c__Physical)
			)
		)
	)
).


fof( miloA4162, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__Historical)
					)
				)
			)
			=>
			(
				p__refers(c__History,X)
			)
		)
	)
).


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of attribute is Object, whereas the first argument of eventLocated is Process (Object and Process are disjoint)
% ;;
% ;;(=>
% ;;  (and
% ;;    (attribute ?X Historical)
% ;;    ($instance ?X City))
% ;;  (exists (?EV)
% ;;    (and
% ;;      ($instance ?EV Physical)
% ;;      (attribute ?EV Historical)
% ;;      (eventLocated ?EV ?X))))
% )

fof( miloA4163, axiom,
	p__d__instance(c__Rural,c__RelationalAttribute)
).



% ($documentation Rural EnglishLanguage "&%Rural describes that is characteristic of
% country life as opposed to the city life")


% (termFormat EnglishLanguage Rural "rural")

fof( miloA4164, axiom,
	p__d__instance(c__Suburban,c__RelationalAttribute)
).



% ($documentation Suburban EnglishLanguage "&%Suburban describes something that is 
% characteristic of a residential district on the outskirts of a city")


% (termFormat EnglishLanguage Suburban "suburban")

fof( miloA4165, axiom,
	p__d__instance(c__Urban,c__RelationalAttribute)
).



% ($documentation Urban EnglishLanguage "&%Urban describes something that is characteristic
% of a city or city life")


% (termFormat EnglishLanguage Urban "urban")

fof( miloA4166, axiom,
	p__d__subclass(c__Patio,c__Region)
).



% ($documentation Patio EnglishLanguage "&%Patio refers to an &%Region adjoining a building,
% usually &%Paved, that is used for outdoor activities")


% (termFormat EnglishLanguage Patio "patio")

% 	(forall (?X)
% 		(=> 
% 			($instance ?X Patio)
% 			(and 
% 				(modalAttribute (attribute ?X Paved) Likely)
% 				(exists (?BLDG)
% 					(and 
% 						($instance ?BLDG Building)
% 						(orientation ?X ?BLDG Adjacent)
% 						(located ?X Outdoors)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA4168, axiom,
	p__d__subclass(c__Lanai,c__Patio)
).


fof( miloA4169, axiom,
	p__d__subclass(c__Lanai,c__StationaryArtifact)
).



% ($documentation Lanai EnglishLanguage "&%Lanai refers to a roofed outdoor area %&Adjacent
% to a &%Building often furnished and used as a living room")


% 	(forall (?AREA ?X)
% 		(=> 
% 			($instance ?X Lanai)
% 			(exists (?ROOF)
% 				(and 
% 					($instance ?ROOF Roof)
% 					(part ?ROOF ?X)
% 					(modalAttribute (exists ([|] ?AREA []) (and ([|] ($instance ?AREA SittingArea) ([|] (located ?AREA ?X) [])))) Likely)
% 				)
% 			)
% 		)
% 	)

% ($comment 
% ;; KJN: Moving to naics.kif as AmusementAndThemeParks is defined there            
% ;;(subAttribute WaterThemePark AmusementAndThemeParks)
% ;;(documentation WaterThemePark EnglishLanguage "&%WaterThemePark is an &%AmusementAndThemeParks
% ;;that features waterplay areas, such as water slides, splash pads, spraygrounds, and 
% ;;swimming pools")
% ;;(termFormat EnglishLanguage WaterThemePark "water theme park")
% ;;
% ;;(=>
% ;;  (attribute ?X WaterThemePark)
% ;;  (exists (?POOL)
% ;;    (and
% ;;      ($instance ?POOL SwimmingPool)
% ;;      (element ?POOL (PropertyFn ?X)))))
% ;;
% ;;($subclass WaterParkTicket Ticket)
% ;;(documentation WaterParkTicket EnglishLanguage "&%WaterParkTicket is a type of 
% ;;&%Ticket that gains a person entry to a &%WaterThemePark")
% ;;(termFormat EnglishLanguage WaterParkTicket "water park ticket")
% ;;
% ;;(=>
% ;;  ($instance ?T WaterParkTicket)
% ;;  (exists (?ORG)
% ;;    (and
% ;;      (attribute ?ORG WaterThemePark)
% ;;      (issuedBy ?T ?ORG))))
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?T Ticket)
% ;;    (possesses ?T ?CUST)
% ;;    (issuedBy ?T ?ORG)
% ;;    (attribute ?ORG AmusementGamblingAndRecreationIndustries)
% ;;    (located ?ORG ?LOC))
% ;;  (confersNorm ?ORG
% ;;    (exists (?REC)
% ;;      (and
% ;;        ($instance ?REC RecreationOrExercise)
% ;;        (experiencer ?REC ?CUST)
% ;;        (eventLocated ?REC ?LOC))) Permission))
% )

fof( miloA4171, axiom,
	p__d__instance(c__hasUniform,c__BinaryPredicate)
).



% ($documentation hasUniform EnglishLanguage "(&%hasUniform ?GRP ?UNIFORM) means that
% ?GRP is associated or identified by ?UNIFORM and members of ?GRP are expected to wear
% ?UNIFORM")


% (termFormat EnglishLanguage hasUniform "has uniform")

% 	($domain hasUniform 1 Group)

% 	($domainSubclass hasUniform 2 UniformClothing)

% 	(forall (?GRP ?UNIFORM ?TIME ?PERS ?CLOTHING)
% 		(=> 
% 			(hasUniform ?GRP ?UNIFORM)
% 			(modalAttribute (exists ([|] ?PERS ([|] ?CLOTHING ([|] ?TIME []))) (and ([|] (member ?PERS ?GRP) ([|] ($instance ?CLOTHING ?UNIFORM) ([|] (holdsDuring ?TIME (wears ?PERS ?CLOTHING)) []))))) Likely)
% 		)
% 	)

fof( miloA4175, axiom,
	p__d__subclass(c__UniformClothing,c__Clothing)
).



% ($documentation UniformClothing EnglishLanguage "&%UniformClothing is a type of clothing with a 
% distinctive design worn by members of a particular group as a means of identification")


% (termFormat EnglishLanguage UniformClothing "uniform")

fof( miloA4176, axiom,
	(![X]: 
		(
			(
				p__d__subclass(X,c__UniformClothing)
			)
			=>
			(
				(?[GRP]: 
					(
						(
							(
								p__d__instance(GRP,c__Group)
							)
						 &
							(
								p__hasUniform(GRP,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4177, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__UniformClothing)
			)
			=>
			(
				(?[PROC,DESIGN]: 
					(
						(
							(
								p__d__instance(PROC,c__IntentionalProcess)
							)
						 &
							(
								p__result(PROC,DESIGN)
							)
						 &
							(
								p__represents(X,DESIGN)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4178, axiom,
	p__d__subclass(c__Tripod,c__Device)
).



% ($documentation Tripod EnglishLanguage "&%Tripod refers to a &%Device with 3 legs to
% support some other &%Object")


% (termFormat EnglishLanguage Tripod "tripod")

fof( miloA4179, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Tripod)
			)
			=>
			(
				(?[LEG1,LEG2,LEG3]: 
					(
						(
							(
								p__d__instance(LEG1,c__Object)
							)
						 &
							(
								p__d__instance(LEG2,c__Object)
							)
						 &
							(
								p__d__instance(LEG3,c__Object)
							)
						 &
							(
								p__part(LEG1,X)
							)
						 &
							(
								p__part(LEG2,X)
							)
						 &
							(
								p__part(LEG3,X)
							)
						 &
							(
								p__meetsSpatially(LEG1,LEG2)
							)
						 &
							(
								p__meetsSpatially(LEG2,LEG3)
							)
						 &
							(
								p__meetsSpatially(LEG1,LEG3)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?X ?OBJ ?PUT ?PROC)
% 		(=> 
% 			($instance ?X Tripod)
% 			(hasPurpose ?X (exists ([|] ?OBJ ([|] ?PUT ([|] ?PROC []))) (and ([|] ($instance ?OBJ Artifact) ([|] ($instance ?PUT Putting) ([|] (patient ?PUT ?OBJ) ([|] (destination ?PUT ?X) ([|] ($instance ?PROC Process) ([|] (instrument ?PROC ?OBJ) ([|] (before (EndFn (WhenFn ?PUT)) (BeginFn (WhenFn ?PROC))) []))))))))))
% 		)
% 	)

fof( miloA4181, axiom,
	p__d__subclass(c__Easel,c__Tripod)
).



% ($documentation Easel EnglishLanguage "&%Easel is a type of &%Tripod that supports
% a flat object such as a canvas or a flipboard")


% (termFormat EnglishLanguage Easel "easel")

% 	(forall (?OBJ ?PUT ?X)
% 		(=> 
% 			($instance ?X Easel)
% 			(hasPurpose ?X (exists ([|] ?OBJ ([|] ?PUT [])) (and ([|] ($instance ?OBJ Artifact) ([|] (attribute ?OBJ Flat) ([|] ($instance ?PUT Putting) ([|] (patient ?PUT ?OBJ) ([|] (destination ?PUT ?X) []))))))))
% 		)
% 	)

fof( miloA4183, axiom,
	p__d__subclass(c__Solarium,c__Room)
).



% ($documentation Solarium EnglishLanguage "&%Solarium is a type of &%Room part of which
% is made with &%Transparent material like glass to afford exposure to the sun.")


% (termFormat EnglishLanguage Solarium "solarium")

fof( miloA4184, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Solarium)
			)
			=>
			(
				(?[WALL]: 
					(
						(
							(
								p__d__instance(WALL,c__Wall)
							)
						 &
							(
								p__part(WALL,X)
							)
						 &
							(
								p__attribute(WALL,c__Transparent)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4185, axiom,
	p__d__subclass(c__ExerciseCenter,c__SportsFacility)
).



% ($documentation ExerciseCenter EnglishLanguage "&%ExerciseCenter refers to a type of
% &%SportsFacility that has equipment and services for physical training
% and keeping fit")


% (termFormat EnglishLanguage ExerciseCenter "exercise center")

% 	(forall (?DEVICE ?X)
% 		(=> 
% 			($instance ?X ExerciseCenter)
% 			(hasPurpose ?X (exists ([|] ?DEVICE []) (and ([|] (or ([|] ($instance ?DEVICE AerobicExerciseDevice) ([|] ($instance ?DEVICE AnaerobicExerciseDevice) []))) ([|] (located ?DEVICE ?X) [])))))
% 		)
% 	)

fof( miloA4187, axiom,
	p__d__subclass(c__GameRoom,c__Room)
).



% ($documentation GameRoom EnglishLanguage "&%GameRoom refers to a type of &%Room
% that have facilities for &%Game that can be played")        


% (termFormat EnglishLanguage GameRoom "game room")

% 	(forall (?GAME ?X)
% 		(=> 
% 			($instance ?X GameRoom)
% 			(hasPurpose ?X (exists ([|] ?GAME []) (and ([|] ($instance ?GAME Game) ([|] (eventLocated ?GAME ?X) [])))))
% 		)
% 	)

fof( miloA4189, axiom,
	p__d__subclass(c__Nursery,c__Room)
).



% ($documentation Nursery EnglishLanguage "&%Nursery refers to a &%Room for babies")


% (termFormat EnglishLanguage Nursery "nursery")

fof( miloA4190, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__Nursery)
			)
			=>
			(
				(?[CRIB]: 
					(
						(
							(
								p__d__instance(CRIB,c__Crib)
							)
						 &
							(
								p__located(CRIB,X)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; KJN: Moving this to Hotel.kif as it more specifically talks about a Nursery in a Hotel.      
% ;;(=>
% ;;  (and
% ;;    ($instance ?X Nursery)
% ;;    (element ?X (PropertyFn ?HOTEL))
% ;;    (attribute ?HOTEL TravelerAccommodation))
% ;;  (and
% ;;    (attribute ?X CommunalAttribute)
% ;;    (employs ?HOTEL ?NANNY)
% ;;    (hasPurpose ?NANNY
% ;;      (exists (?CARE)
% ;;        (and
% ;;          ($instance ?CARE ChildCareService)
% ;;          (serviceProvider ?CARE ?NANNY))))))
% )

fof( miloA4191, axiom,
	p__d__subclass(c__SteamBath,c__Room)
).



% ($documentation SteamBath EnglishLanguage "&%SteamBath refers to a room that is filled
% with &%Steam in order to make people sweat")


% (termFormat EnglishLanguage SteamBath "steam bath")

fof( miloA4192, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__SteamBath)
			)
			=>
			(
				(?[STEAM]: 
					(
						(
							(
								p__d__instance(STEAM,c__Steam)
							)
						 &
							(
								p__located(STEAM,X)
							)
						)
					)
				)
			)
		)
	)
).


% 	(forall (?BATH ?X)
% 		(=> 
% 			($instance ?X SteamBath)
% 			(hasPurpose ?X (exists ([|] ?BATH []) (and ([|] ($instance ?BATH Bathing) ([|] (eventLocated ?BATH ?X) [])))))
% 		)
% 	)

fof( miloA4194, axiom,
	p__d__subclass(c__HeatedPool,c__SwimmingPool)
).



% ($documentation HeatedPool EnglishLanguage "&%HeatedPool is a type of &%SwimmingPool that
% has &%HotWaterHeater so that the &%Water in the pool is constantly kept at a certain 
% warm temperature")


% (termFormat EnglishLanguage HeatedPool "heated pool")

fof( miloA4195, axiom,
	(![X,HEATER,WATER]: 
		(
			(
				(
					(
						p__d__instance(X,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(X,c__HeatedPool)
					)
				 &
					(
						p__contains(X,WATER)
					)
				 &
					(
						p__d__instance(WATER,c__Water)
					)
				 &
					(
						p__part(X,HEATER)
					)
				 &
					(
						p__d__instance(HEATER,c__WaterHeater)
					)
				 &
					(
						p__attribute(HEATER,c__DeviceOn)
					)
				)
			)
			=>
			(
				p__attribute(WATER,c__WarmTemperature)
			)
		)
	)
).


fof( miloA4196, axiom,
	p__d__subclass(c__RoomHeater,c__HeatingDevice)
).



% ($documentation RoomHeater EnglishLanguage "&%RoomHeater is a type of &%HeatingDevice
% that heats the air in a confined space")


% (termFormat EnglishLanguage RoomHeater "room heater")

% 	(forall (?ROOM ?AIR ?HEATING ?X)
% 		(=> 
% 			($instance ?X RoomHeater)
% 			(hasPurpose ?X (exists ([|] ?AIR ([|] ?HEATING ([|] ?ROOM []))) (and ([|] ($instance ?AIR Air) ([|] ($instance ?ROOM Room) ([|] (located ?AIR ?ROOM) ([|] ($instance ?HEATING Heating) ([|] (patient ?HEATING ?AIR) ([|] (instrument ?HEATING ?X) [])))))))))
% 		)
% 	)

% ($comment 
% ;; KJN: Moving to Sports.kif        
% ;;($subclass RacquetballCourt SportsFacility)
% ;;(documentation RacquetballCourt EnglishLanguage "&%RacquetballCourt is a type of
% ;;&%SportsFacility where &%Racquetball is played")
% ;;(termFormat EnglishLanguage RacquetballCourt "racquetball court")
% ;;
% ;;(=>
% ;;  ($instance ?X RacquetballCourt)
% ;;  (hasPurpose ?X
% ;;    (exists (?PLAY)
% ;;      (and
% ;;        ($instance ?PLAY Racquetball)
% ;;        (eventLocated ?PLAY ?X)))))        
% )

fof( miloA4198, axiom,
	p__d__subclass(c__DanceHall,c__StationaryArtifact)
).



% ($documentation DanceHall EnglishLanguage "&%DanceHall is a &%StationaryArtifact equipped
% with floors amenable to &%Dancing and devices that blare out &%MakingMusic")


% (termFormat EnglishLanguage DanceHall "dance hall")

% 	(forall (?MUSIC ?DANCE ?DISCO)
% 		(=> 
% 			($instance ?DISCO DanceHall)
% 			(hasPurpose ?DISCO (exists ([|] ?DANCE ([|] ?MUSIC [])) (and ([|] ($instance ?MUSIC MakingMusic) ([|] ($instance ?DANCE Dancing) ([|] (cooccur ?MUSIC ?DANCE) ([|] (eventLocated ?MUSIC ?DISCO) ([|] (eventLocated ?DANCE ?DISCO) []))))))))
% 		)
% 	)

fof( miloA4200, axiom,
	p__d__subclass(c__NightClub,c__DanceHall)
).



% ($documentation NightClub EnglishLanguage "&%NightClub is a type of &%DanceHall that
% typically opens at &%NightTime and has a &%Tavern located in it")


% (termFormat EnglishLanguage NightClub "night club")

% ($comment 
% ;; splitting this rule into 2: one that just says a bar is located inside the nightclub,
% ;; and the other one saying that the standard retail hours is at night time.  the
% ;; hours will be moved to Dining.kif, however, as standardRetailHours is defined there.
% ;;(=>
% ;;  ($instance ?X NightClub)
% ;;  (exists (?TIME ?BAR)
% ;;    (and
% ;;      ($instance ?BAR Tavern)
% ;;      (located ?BAR ?X)
% ;;      (standardRetailHours ?X ?TIME)
% ;;      (during (BeginFn ?TIME) NightTime))))
% )

fof( miloA4201, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__NightClub)
			)
			=>
			(
				(?[BAR]: 
					(
						(
							(
								p__d__instance(BAR,c__Tavern)
							)
						 &
							(
								p__located(BAR,X)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4202, axiom,
	p__d__subclass(c__ScubaDiving,c__Swimming)
).



% ($documentation ScubaDiving EnglishLanguage "&%ScubaDiving is &%Swimming &%Below a
% &%WaterArea with the aid of some &%Device to help in &%Breathing")


% (termFormat EnglishLanguage ScubaDiving "scuba diving")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of orientation is Object, whereas ScubaDiving is subclass of Process (Object and Process are disjoint)
% ;;
% ;;(=>
% ;;  ($instance ?SCUBA ScubaDiving)
% ;;  (exists (?WATER ?DEVICE ?BREATH)
% ;;    (and
% ;;      ($instance ?WATER WaterArea)
% ;;      (orientation ?SCUBA ?WATER Below)
% ;;      ($instance ?DEVICE Device)
% ;;      ($instance ?BREATH Breathing)
% ;;      (instrument ?BREATH ?DEVICE)
% ;;      (subProcess ?BREATH ?SCUBA))))
% )

fof( miloA4203, axiom,
	p__d__instance(c__AmericansWithDisabilitiesAct,c__Proposition)
).



% ($documentation AmericansWithDisabilitiesAct EnglishLanguage "The 
% &%AmericansWithDisabilitiesAct is a &%Proposition promulgated by the US Employment
% Opportunity Commission to give civil right protections to individuals with &%Disability
% similar to those provided to individuals on the basis of race, color, sex, national
% origin, age and religion.  It guarantees equal opportunities for individuals with
% &%Disability in public accommodation, employment, transportation, State and local
% government services and telecommunications")


% (termFormat EnglishLanguage AmericansWithDisabilitiesAct "ADA")

fof( miloA4204, axiom,
	p__subrelation(c__conforms,c__represents)
).



% ($documentation conforms EnglishLanguage "(&%conforms ?OBJ ?PROP) describes
% how ?OBJ follows the ideas outlined by ?PROP")


% (termFormat EnglishLanguage conforms "conforms")

% 	($domain conforms 1 Object)

% 	($domain conforms 2 Proposition)

fof( miloA4207, axiom,
	(![OBJ]: 
		(
			(
				(
					(
						p__d__instance(OBJ,c__Object)
					)
				 &
					(
						p__conforms(OBJ,c__AmericansWithDisabilitiesAct)
					)
				)
			)
			=>
			(
				p__attribute(OBJ,c__HandicappedFriendly)
			)
		)
	)
).


fof( miloA4208, axiom,
	p__d__instance(c__USFEMA,c__GovernmentOrganization)
).



% ($documentation USFEMA EnglishLanguage 
% "&%USFEMA, which stands for Federal Emergency Management Agency, is a 
% &%GovernmentOrganization in charge of disaster mitigation, preparedness, response, 
% recovery, education and references")


% (termFormat EnglishLanguage USFEMA "fema")

fof( miloA4209, axiom,
	p__subrelation(c__approves,c__inScopeOfInterest)
).



% ($documentation approves EnglishLanguage "(&%approves ?AGENT1 ?AGENT2) means that
% ?AGENT1 is satisfied that ?AGENT2 has met some requirement or proposition, and publicly
% declares such")


% (termFormat EnglishLanguage approves "approves")

% 	($domain approves 1 CognitiveAgent)

% 	($domain approves 2 CognitiveAgent)

% 	(forall (?AGENT1 ?AGENT2)
% 		(=> 
% 			(approves ?AGENT1 ?AGENT2)
% 			(exists (?PROP)
% 				(believes ?AGENT1 (conforms ?AGENT2 ?PROP))
% 			)
% 		)
% 	)

fof( miloA4213, axiom,
	p__d__subclass(c__WetBar,c__Artifact)
).



% ($documentation WetBar EnglishLanguage "&%WetBar is a place for preparing food and 
% beverage that has a sink with running water")


% (termFormat EnglishLanguage WetBar "wet bar")

% 	(forall (?FOOD ?PREP ?X)
% 		(=> 
% 			($instance ?X WetBar)
% 			(exists (?SINK ?OBJ)
% 				(and 
% 					($instance ?SINK WashBasin)
% 					(part ?SINK ?X)
% 					($instance ?OBJ Object)
% 					(attribute ?OBJ Flat)
% 					(hasPurpose ?OBJ (exists ([|] ?PREP ([|] ?FOOD [])) (and ([|] ($instance ?PREP Making) ([|] (result ?PREP ?FOOD) ([|] (or ([|] ($instance ?FOOD PreparedFood) ([|] ($instance ?FOOD Beverage) []))) ([|] (eventLocated ?PREP ?OBJ) [])))))))
% 					(part ?OBJ ?X)
% 				)
% 			)
% 		)
% 	)

fof( miloA4215, axiom,
	p__d__subclass(c__SurveillanceSystem,c__Collection)
).



% ($documentation SurveillanceSystem EnglishLanguage "&%SurveillanceSystem is a &%Collection
% of devices that work together to provide security by recording sound or video in a
% certain location and showing it instantly to people, presumably a &%SecurityUnit")


% (termFormat EnglishLanguage SurveillanceSystem "surveillance system")

% 	(forall (?X)
% 		(=> 
% 			($instance ?X SurveillanceSystem)
% 			(and 
% 				(memberType ?X Camera)
% 				(memberType ?X VideoDisplay)
% 			)
% 		)
% 	)

% 	(forall (?VIDEO ?LOC2 ?X ?LOC1 ?DISPLAY ?VID ?PROC ?CAPTURE ?RL)
% 		(=> 
% 			(and 
% 				($instance ?X SurveillanceSystem)
% 				(member ?X ?VIDEO)
% 				(member ?X ?DISPLAY)
% 				(located ?VIDEO ?LOC1)
% 				($instance ?VIDEO Camera)
% 				(located ?DISPLAY ?LOC2)
% 				(not 
% 					(equal ?LOC1 ?LOC2)
% 				)
% 				($instance ?DISPLAY VideoDisplay)
% 			)
% 			(hasPurpose ?X (exists ([|] ?PROC ([|] ?VID ([|] ?RL ([|] ?CAPTURE [])))) (and ([|] ($instance ?PROC Process) ([|] (eventLocated ?PROC ?LOC1) ([|] (represents ?VID ?PROC) ([|] (instrument ?CAPTURE Camera) ([|] (result ?CAPTURE ?VID) ([|] ($instance ?RL RadiatingLight) ([|] (instrument ?RL ?DISPLAY) ([|] (patient ?RL ?VID) ([|] (before (BeginFn ?PROC) (BeginFn ?CAPTURE)) ([|] (before (BeginFn ?CAPTURE) (BeginFn ?RL)) [])))))))))))))
% 		)
% 	)

% 	(forall (?X ?S)
% 		(=> 
% 			($instance ?X SecurityUnit)
% 			(modalAttribute (exists ([|] ?S []) (and ([|] ($instance ?S SurveillanceSystem) ([|] (inScopeOfInterest ?X ?S) [])))) Likely)
% 		)
% 	)

% ($comment 
% ;; KJN: Moving this to Communications.kif as most of the terms used here are defined there.   
% ;;($subclass Telex CommunicationDevice)
% ;;(documentation Telex EnglishLanguage "&%Telex is a &%Telegraph-like &%CommunicationDevice 
% ;;that is used to send messages over a &%TelephoneSystem.")
% ;;(termFormat EnglishLanguage Telex "telex")
% ;;
% ;;(=>
% ;;  ($instance ?TELEX Telex)
% ;;  (exists (?PRINTER)
% ;;    (and
% ;;      ($instance ?PRINTER Printer)
% ;;      (part ?PRINTER ?TELEX))))
% ;;
% ;;(=>
% ;;  ($instance ?TELEX Telex)
% ;;  (hasPurpose ?TELEX
% ;;    (exists (?SYS ?TELEX2 ?MSG)
% ;;      (and
% ;;        ($instance ?SYS TelephoneSystem)
% ;;        ($instance ?TELEX2 Telex)
% ;;        ($instance ?MSG Messaging)
% ;;        (or
% ;;          (and
% ;;            (origin ?MSG ?TELEX)
% ;;            (destination ?MSG ?TELEX2))
% ;;          (and
% ;;            (origin ?MSG ?TELEX2)
% ;;            (destination ?MSG ?TELEX)))
% ;;        (path ?MSG ?SYS)))))
% ;;
% ;;(=>
% ;;  (and
% ;;    (destination ?MSG ?TELEX)
% ;;    ($instance ?MSG Messaging)
% ;;    (patient ?MSG ?M)
% ;;    ($instance ?TELEX Telex))
% ;;  (exists (?PROC ?TEXT)
% ;;    (and
% ;;      (instrument ?PROC ?TELEX)
% ;;      (result ?PROC ?TEXT)
% ;;      (represents ?TEXT ?M)
% ;;      ($instance ?TEXT Text)
% ;;    (before (BeginFn (WhenFn ?MSG)) (BeginFn (WhenFn ?PROC))))))
% )

fof( miloA4219, axiom,
	p__d__subclass(c__ArtifactMediatedCommunication,c__Communication)
).



% ($documentation ArtifactMediatedCommunication EnglishLanguage "&%ArtifactMediatedCommunication
% refers to &%Communication that uses some &%Artifact as an &%instrument or &%path for
% the &%Transfer of messages or information")


% (termFormat EnglishLanguage ArtifactMediatedCommunication "artifact mediated communication")

fof( miloA4220, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__ArtifactMediatedCommunication)
			)
			=>
			(
				(?[OBJ]: 
					(
						(
							(
								p__d__instance(OBJ,c__Artifact)
							)
						 &
							(
								p__instrument(X,OBJ)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4221, axiom,
	p__d__subclass(c__TelephoneCommunication,c__ArtifactMediatedCommunication)
).



% ($documentation TelephoneCommunication EnglishLanguage "&%TelephoneCommunication refers
% to a &%Communication that is done through the use of the &%TelephoneSystem")


% (termFormat EnglishLanguage TelephoneCommunication "telephone communication")

fof( miloA4222, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__TelephoneCommunication)
			)
			=>
			(
				(?[TEL1,TEL2,ORIGIN,DEST]: 
					(
						(
							(
								p__d__instance(ORIGIN,c__ContactSite)
							)
						 &
							(
								p__d__instance(DEST,c__ContactSite)
							)
						 &
							(
								p__d__instance(TEL1,c__Agent)
							)
						 &
							(
								p__d__instance(TEL2,c__Agent)
							)
						 &
							(
								p__origin(X,ORIGIN)
							)
						 &
							(
								p__destination(X,DEST)
							)
						 &
							(
								p__siteForContact(ORIGIN,TEL1)
							)
						 &
							(
								p__siteForContact(DEST,TEL2)
							)
						 &
							(
								p__d__instance(TEL1,c__Telephone)
							)
						 &
							(
								p__d__instance(TEL2,c__Telephone)
							)
						 &
							(
								p__instrument(X,TEL1)
							)
						 &
							(
								p__instrument(X,TEL2)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4223, axiom,
	p__d__subclass(c__OperatorAssistedTelephoneCommunication,c__TelephoneCommunication)
).



% ($documentation OperatorAssistedTelephoneCommunication EnglishLanguage
% "&%OperatorAssistedTelephoneCommunication refers to &%TelephoneCommunication where
% an intermediary person connects origin and destination")


% (termFormat EnglishLanguage OperatorAssistedTelephoneCommunication "operator assisted telephone communication")

% 	(forall (?X ?PROC ?RESULT ?COMM)
% 		(=> 
% 			($instance ?X OperatorAssistedTelephoneCommunication)
% 			(exists (?ORIGIN ?DEST ?OPERATOR)
% 				(and 
% 					(origin ?X ?ORIGIN)
% 					(destination ?X ?DEST)
% 					($instance ?OPERATOR Human)
% 					(hasPurpose ?OPERATOR (exists ([|] ?PROC []) (and ([|] ($instance ?PROC IntentionalProcess) ([|] (agent ?PROC ?OPERATOR) ([|] (subProcess ?PROC ?X) ([|] (result ?PROC ?RESULT) ([|] (equal ?RESULT (modalAttribute (exists ([|] ?COMM []) (and ([|] ($instance ?COMM Communication) ([|] (origin ?COMM ?ORIGIN) ([|] (destination ?COMM ?DEST) []))))) Possibility)) []))))))))
% 				)
% 			)
% 		)
% 	)

fof( miloA4225, axiom,
	p__d__subclass(c__DirectDialTelephoneCommunication,c__TelephoneCommunication)
).



% ($documentation DirectDialTelephoneCommunication EnglishLanguage 
% "&%DirectDialTelephoneCommunication refers to &%TelephoneCommunication where there 
% is no operator that connects origin and destination")


% (termFormat EnglishLanguage DirectDialTelephoneCommunication "direct dial telephone communication")

% 	(forall (?X ?PROC ?RESULT ?ORIGIN ?COMM ?DEST)
% 		(=> 
% 			($instance ?X DirectDialTelephoneCommunication)
% 			(not 
% 				(exists (?OPERATOR)
% 					(and 
% 						($instance ?OPERATOR Human)
% 						(hasPurpose ?OPERATOR (exists ([|] ?PROC []) (and ([|] ($instance ?PROC IntentionalProcess) ([|] (agent ?PROC ?OPERATOR) ([|] (subProcess ?PROC ?X) ([|] (result ?PROC ?RESULT) ([|] (equal ?RESULT (modalAttribute (exists ([|] ?COMM []) (and ([|] ($instance ?COMM Communication) ([|] (origin ?COMM ?ORIGIN) ([|] (destination ?COMM ?DEST) []))))) Possibility)) []))))))))
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA4227, axiom,
	p__d__subclass(c__VoiceMail,c__AudioRecording)
).



% ($documentation VoiceMail EnglishLanguage "&%VoiceMail refers to an &%AudioRecording
% that is done through the &%TelephoneSystem")                      


fof( miloA4228, axiom,
	(![X]: 
		(
			(
				p__d__instance(X,c__VoiceMail)
			)
			=>
			(
				(?[TEL]: 
					(
						(
							(
								p__d__instance(TEL,c__TelephoneCommunication)
							)
						 &
							(
								p__patient(TEL,X)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; RELATED ATTRIBUTES (although can be applied to other contexts)
% )

fof( miloA4229, axiom,
	p__d__instance(c__Local,c__RelationalAttribute)
).



% ($documentation Local EnglishLanguage "&%Local refers to something within the same
% region or area")


% (termFormat EnglishLanguage Local "local")

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of attribute is Object, whereas TelephoneCommunication is subclass of Process (Object and Process are disjoint)
% ;; TODO: Modify the domain information of attribute or use another relation
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?X TelephoneCommunication)
% ;;    (attribute ?X Local))
% ;;  (exists (?TEL1 ?TEL2 ?ORIGIN ?DEST ?CODE)
% ;;    (and
% ;;      (origin ?X ?ORIGIN)
% ;;      (destination ?X ?DEST)
% ;;      (telephoneNumber ?TEL1 ?ORIGIN)
% ;;      (telephoneNumber ?TEL2 ?DEST)
% ;;      (telecomAreaCode ?CODE ?TEL1)
% ;;      (telecomAreaCode ?CODE ?TEL2))))
% )

fof( miloA4230, axiom,
	p__d__instance(c__Domestic,c__RelationalAttribute)
).



% ($documentation Domestic EnglishLanguage "&%Domestic refers to something within the same
% &%Nation")


% (termFormat EnglishLanguage Domestic "domestic")

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of attribute is Object, whereas TelephoneCommunication is subclass of Process (Object and Process are disjoint)
% ;; TODO: Modify the domain information of attribute or use another relation
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?X TelephoneCommunication)
% ;;    (attribute ?X Domestic))
% ;;  (exists (?ORIGIN ?DEST ?COUNTRY)
% ;;    (and
% ;;      (origin ?X ?ORIGIN)
% ;;      (destination ?X ?DEST)
% ;;      (located ?ORIGIN ?COUNTRY)
% ;;      (located ?DEST ?COUNTRY)
% ;;      ($instance ?COUNTRY Nation))))
% )

fof( miloA4231, axiom,
	p__d__instance(c__International,c__RelationalAttribute)
).



% ($documentation International EnglishLanguage "&%International refers to something outside
% of the country")


% (termFormat EnglishLanguage International "international")

% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of attribute is Object, whereas TelephoneCommunication is subclass of Process (Object and Process are disjoint)
% ;; TODO: Modify the domain information of attribute or use another relation
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?X TelephoneCommunication)
% ;;    (attribute ?X International))
% ;;  (exists (?ORIGIN ?DEST ?CTRY1 ?CTRY2)
% ;;    (and
% ;;      (origin ?X ?ORIGIN)
% ;;      (destination ?X ?DEST)
% ;;      (located ?ORIGIN ?CTRY1)
% ;;      (located ?DEST ?CTRY2)
% ;;      ($instance ?CTRY1 Nation)
% ;;      ($instance ?CTRY2 Nation)
% ;;      (not (equal ?CTRY1 ?CTRY2)))))
% )

% ($comment 
% ;; KJN: Moved from Dining.kif      
% )

fof( miloA4232, axiom,
	p__d__instance(c__CommunalAttribute,c__RelationalAttribute)
).



% ($documentation CommunalAttribute EnglishLanguage "&%CommunalAttribute 
% describes how an &%Object is shared by many")


% (termFormat EnglishLanguage CommunalAttribute "communal")

fof( miloA4233, axiom,
	p__d__instance(c__PrivateAttribute,c__RelationalAttribute)
).



% ($documentation PrivateAttribute EnglishLanguage "&%PrivateAttribute describes how an 
% object is not available to other people without the consent of the 
% current owner")


fof( miloA4234, axiom,
	(![X]: 
		(
			(
				(
					(
						p__d__instance(X,c__Object)
					)
				 &
					(
						p__attribute(X,c__CommunalAttribute)
					)
				)
			)
			=>
			(
				p__d__instance(X,c__Object)
			)
		)
	)
).


% 	(forall (?X)
% 		(=> 
% 			(attribute ?X PrivateAttribute)
% 			(modalAttribute (not (attribute ?X CommunalAttribute)) Likely)
% 		)
% 	)

% 	(forall (?X)
% 		(=> 
% 			(attribute ?X CommunalAttribute)
% 			(modalAttribute (not (attribute ?X PrivateAttribute)) Likely)
% 		)
% 	)

% ($comment 
% ;; KJN: End Import      
% )


% ($documentation Policy EnglishLanguage "&%Policy is (the contents of) a type of &%Declaring created and enforced by an &%Organization such as a government or a business, which contains guiding
% principles or a plan or course of action adopted by that organization.")


% (termFormat EnglishLanguage Policy "policy")

fof( miloA4237, axiom,
	p__d__subclass(c__Policy,c__Proposition)
).


% ($comment 
% ;; ($subclass Policy Declaring)
% ;; ($subclass Policy ContentBearingProcess)
% )

% ($comment 
% ;; Policies bind the organization (and some individuals) in  some informal agreement
% )

fof( miloA4238, axiom,
	(![POLICY]: 
		(
			(
				p__d__instance(POLICY,c__Policy)
			)
			=>
			(
				(?[ORG]: 
					(
						(
							(
								p__d__instance(ORG,c__Organization)
							)
						 &
							(
								p__policyOwner(ORG,POLICY)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4239, axiom,
	p__d__instance(c__policyOwner,c__BinaryPredicate)
).



% ($documentation policyOwner EnglishLanguage "(&%policyOwner ?&%Organization ?&%Policy) describes how ?&%Policy is adopted and enforced by ?&%Organization")


% (termFormat EnglishLanguage policyOwner "policy owner")

% 	($domain policyOwner 1 Organization)

% 	($domain policyOwner 2 Policy)

% ($comment 
% ;; The policy owner creates the Policy
% )

fof( miloA4242, axiom,
	(![AGENT,POLICY]: 
		(
			(
				(
					(
						p__d__instance(POLICY,c__Policy)
					)
				 &
					(
						p__d__instance(AGENT,c__Organization)
					)
				 &
					(
						p__policyOwner(AGENT,POLICY)
					)
				)
			)
			=>
			(
				(?[CREATE]: 
					(
						(
							(
								p__d__instance(CREATE,c__Creation)
							)
						 &
							(
								p__agent(CREATE,AGENT)
							)
						 &
							(
								p__result(CREATE,POLICY)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; -----------------------------------------------------------------------------
% ;; Import from elements.kif
% ;; -----------------------------------------------------------------------------
% ;;
% ;; This dictionary database was created by Jay F. Kominek
% ;; <jkominek@miranda.org> (Feel free to send any comments, additions,
% ;; corrections, money to that address) It was compiled from a variety of
% ;; sources, and is in my opinion, a work of my own. (The only stuff that
% ;; was really copied verbatim was the atomic numbers and weights, please,
% ;; I'd like to see someone try and exert a copyright on the values of
% ;; atoms.)  So, I place this in the public domain, if it somehow breaks,
% ;; you get to keep both pieces. It'd be nice if you kept the fact that I
% ;; compiled the information in here, but is not needed.
% ;; Up to date copies can probably be found on the web at:
% ;; http://www.miranda.org/~jkominek/elements/
% ;;
% ;; This information has been converted to KIF by Adam Pease adampease@earthlink.net.
% ;; This file (unlike many of our other ontology files, which are released
% ;; under GNU license) is being released in the public domain, in keeping
% ;; with the view of the original compiler of the material.
% ;;
% ;; This file depends on SUMO and the Government ontology (although only
% ;; for conventionalShortName).
% ;;
% ;; The original information has since been augmented with data for melting
% ;; and boiling points.
% ;;
% ;; We ask that people using or referencing this work cite our primary paper:
% ;;
% ;; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In 
% ;; Proceedings of the 2nd International Conference on Formal Ontology in 
% ;; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds, 
% ;; Ogunquit, Maine, October 17-19, 2001.  See also www.ontologyportal.org
% )

fof( miloA4243, axiom,
	p__d__subclass(c__Hydrogen,c__ElementalSubstance)
).


% ($comment 
% ;; (names Hydrogen "Hydrogen")
% ;;
% ;; (conventionalShortName "H" Hydrogen)
% )

fof( miloA4244, axiom,
	p__atomicNumber(c__Hydrogen,c__1)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Hydrogen)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 1.0079 Amu)))
% )


% ($documentation Hydrogen EnglishLanguage "Colourless, odourless gaseous chemical element.  
% Lightest and most abundant element in the universe.  Present in water and 
% in all organic compounds.  Chemically reacts with most elements.  
% Discovered by Henry Cavendish in 1776.") 


fof( miloA4245, axiom,
	p__d__subclass(c__Helium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Helium "Helium")
% ;;
% ;; (conventionalShortName "He" Helium)
% )

fof( miloA4246, axiom,
	p__atomicNumber(c__Helium,c__2)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Helium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 4.0026 Amu)))
% )


% ($documentation Helium EnglishLanguage "Colourless, odourless gaseous nonmetallic element.  
% Belongs to group 18 of the periodic table.  Lowest boiling point of all 
% elements and can only be solidified under pressure.  Chemically inert, no 
% known compounds.  Discovered in the solar spectrum in 1868 by Lockyer.") 


fof( miloA4247, axiom,
	p__d__subclass(c__Lithium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Lithium "Lithium")
% ;;
% ;; (conventionalShortName "Li" Lithium)
% )

fof( miloA4248, axiom,
	p__atomicNumber(c__Lithium,c__3)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Lithium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 6.939 Amu)))
% )


% ($documentation Lithium EnglishLanguage "Socket silvery metal.  First member of group 1 of 
% the periodic table.  Lithium salts are used in psychomedicine.") 


fof( miloA4249, axiom,
	p__d__subclass(c__Beryllium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Beryllium "Beryllium")
% ;;
% ;; (conventionalShortName "Be" Beryllium)
% )

fof( miloA4250, axiom,
	p__atomicNumber(c__Beryllium,c__4)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Beryllium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 9.0122 Amu)))
% )


% ($documentation Beryllium EnglishLanguage "Grey metallic element of group 2 of the periodic 
% table.  Is toxic and can cause severe lung diseases and dermatitis.  Shows 
% high covalent character.  It was isolated independently by F.  Wohler and 
% A.A.  Bussy in 1828.") 


fof( miloA4251, axiom,
	p__d__subclass(c__Boron,c__ElementalSubstance)
).


% ($comment 
% ;; (names Boron "Boron")
% ;;
% ;; (conventionalShortName "B" Boron)
% )

fof( miloA4252, axiom,
	p__atomicNumber(c__Boron,c__5)
).


% ($comment 
% ;; (=>
% ;; (and
% ;;     ($instance ?ATOM Boron)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 10.811 Amu)))
% )


% ($documentation Boron EnglishLanguage "An element of group 13 of the periodic table.  There 
% are two allotropes, amorphous boron is a brown power, but metallic boron 
% is black.  The metallic form is hard (9.3 on Mohs' scale) and a bad 
% conductor in room temperatures.  It is never found free in nature.  
% Boron-10 is used in nuclear reactor control rods and shields.  It was 
% discovered in 1808 by Sir Humphry Davy and by J.L.  Gay-Lussac and L.J.  
% Thenard.") 


fof( miloA4253, axiom,
	p__d__subclass(c__Carbon,c__ElementalSubstance)
).


% ($comment 
% ;; (names Carbon "Carbon")
% ;;
% ;; (conventionalShortName "C" Carbon)
% )

fof( miloA4254, axiom,
	p__atomicNumber(c__Carbon,c__6)
).


% ($comment 
% ;; (=>
% ;; (and
% ;;     ($instance ?ATOM Carbon)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 12.01115 Amu)))
% )


% ($documentation Carbon EnglishLanguage "Carbon is a member of group 14 of the periodic 
% table.  It has three allotropic forms of it, diamonds, graphite and 
% fullerite.  Carbon-14 is commonly used in radioactive dating.  Carbon 
% occurs in all organic life and is the basis of organic chemistry.  Carbon 
% has the interesting chemical property of being able to bond with itself, 
% and a wide variety of other elements.") 


fof( miloA4255, axiom,
	p__d__subclass(c__Nitrogen,c__ElementalSubstance)
).


% ($comment 
% ;; (names Nitrogen "Nitrogen")
% ;;
% ;; (conventionalShortName "N" Nitrogen)
% )

fof( miloA4256, axiom,
	p__atomicNumber(c__Nitrogen,c__7)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Nitrogen)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 14.0067 Amu)))
% )


% ($documentation Nitrogen EnglishLanguage "Colourless, gaseous element which belongs to 
% group 15 of the periodic table.  Constitutes ~78 percent of the atmosphere 
% and is an essential part of the ecosystem.  Nitrogen for industrial 
% purposes is acquired by the fractional distillation of liquid air.  
% Chemically inactive, reactive generally only at high temperatures or in 
% electrical discharges.  It was discovered in 1772 by D.  Rutherford.") 


fof( miloA4257, axiom,
	p__d__subclass(c__Oxygen,c__ElementalSubstance)
).


% ($comment 
% ;; (names Oxygen "Oxygen")
% ;;
% ;; (conventionalShortName "O" Oxygen)
% )

fof( miloA4258, axiom,
	p__atomicNumber(c__Oxygen,c__8)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Oxygen)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 15.9994 Amu)))
% )


% ($documentation Oxygen EnglishLanguage "A colourless, odourless gaseous element belonging 
% to group 16 of the periodic table.  It is the most abundant element 
% present in the earth's crust.  It also makes up 20.8 percent of the 
% Earth's atmosphere.  For industrial purposes, it is separated from liquid 
% air by fractional distillation.  It is used in high temperature welding, 
% and in breathing.  It commonly comes in the form of Oxygen, but is found 
% as Ozone in the upper atmosphere.  It was discovered by Priestley in 
% 1774.") 


fof( miloA4259, axiom,
	p__d__subclass(c__Fluorine,c__ElementalSubstance)
).


% ($comment 
% ;; (names Fluorine "Fluorine")
% ;;
% ;; (conventionalShortName "F" Fluorine)
% )

fof( miloA4260, axiom,
	p__atomicNumber(c__Fluorine,c__9)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Fluorine)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 18.9984 Amu)))
% )


% ($documentation Fluorine EnglishLanguage "A poisonous pale yellow gaseous element belonging 
% to group 17 of the periodic table (The halogens).  It is the most 
% chemically reactive and electronegative element.  It is highly dangerous, 
% causing severe chemical burns on contact with flesh.  Fluorine was 
% identified by Scheele in 1771 and first isolated by Moissan in 1886.") 


fof( miloA4261, axiom,
	p__d__subclass(c__Neon,c__ElementalSubstance)
).


% ($comment 
% ;; (names Neon "Neon")
% ;;
% ;; (conventionalShortName "Ne" Neon)
% )

fof( miloA4262, axiom,
	p__atomicNumber(c__Neon,c__10)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Neon)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 20.183 Amu)))
% )


% ($documentation Neon EnglishLanguage "Colourless gaseous element of group 18 on the 
% periodic table (noble gases).  Neon occurs in the atmosphere, and 
% comprises 0.0018 percent of the volume of the atmosphere.  It has a 
% distinct reddish glow when used in discharge tubes and neon based lamps.  
% It forms almost no chemical compounds.  Neon was discovered in 1898 by Sir 
% William Ramsey and M.W.  Travers.  ") 


fof( miloA4263, axiom,
	p__d__subclass(c__Sodium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Sodium "Sodium")
% ;;
% ;; (conventionalShortName "Na" Sodium)
% )

fof( miloA4264, axiom,
	p__atomicNumber(c__Sodium,c__11)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Sodium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 22.9898 Amu)))
% )


% ($documentation Sodium EnglishLanguage "Soft silvery reactive element belonging to group 1 
% of the periodic table (alkali metals).  It is highly reactive, oxidizing 
% in air and reacting violently with water, forcing it to be kept under oil.  
% It was first isolated by Humphrey Davy in 1807.") 


fof( miloA4265, axiom,
	p__d__subclass(c__Magnesium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Magnesium "Magnesium")
% ;;
% ;; (conventionalShortName "Mg" Magnesium)
% )

fof( miloA4266, axiom,
	p__atomicNumber(c__Magnesium,c__12)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Magnesium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 24.312 Amu)))
% )


% ($documentation Magnesium EnglishLanguage "Silvery metallic element belonging to group 2 of 
% the periodic table (alkaline-earth metals).  It is essential for living 
% organisms, and is used in a number of light alloys.  Chemically very 
% reactive, it forms a protective oxide coating when exposed to air and 
% burns with an intense white flame.  It also reacts with sulphur, nitrogen 
% and the halogens.  First isolated by Bussy in 1828.") 


fof( miloA4267, axiom,
	p__d__subclass(c__Aluminum,c__ElementalSubstance)
).


% ($comment 
% ;; (names Aluminum "Aluminum")
% ;;
% ;; (conventionalShortName "Al" Aluminum)
% )

fof( miloA4268, axiom,
	p__atomicNumber(c__Aluminum,c__13)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Aluminum)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 26.9815 Amu)))
% )


% ($documentation Aluminum EnglishLanguage "Silvery-white lustrous metallic element of group 
% 3 of the periodic table.  Highly reactive but protected by a thin 
% transparent layer of the oxide which quickly forms in air.  There are many 
% alloys of aluminum, as well as a good number of industrial uses.  Makes up 
% 8.1 percent of the Earth's crust, by weight.  Isolated in 1825 by H.C.  
% Oersted.") 


fof( miloA4269, axiom,
	p__d__subclass(c__Silicon,c__ElementalSubstance)
).


% ($comment 
% ;; (names Silicon "Silicon")
% ;;
% ;; (conventionalShortName "Si" Silicon)
% )

fof( miloA4270, axiom,
	p__atomicNumber(c__Silicon,c__14)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Silicon)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 28.086 Amu)))
% )


% ($documentation Silicon EnglishLanguage "Metalloid element belonging to group 14 of the 
% periodic table.  It is the second most abundant element in the Earth's 
% crust, making up 25.7 percent of it by weight.  Chemically less reactive 
% than carbon.  First identified by Lavoisier in 1787 and first isolated in 
% 1823 by Berzelius.") 


fof( miloA4271, axiom,
	p__d__subclass(c__Phosphorus,c__ElementalSubstance)
).


% ($comment 
% ;; (names Phosphorus "Phosphorus")
% ;;
% ;; (conventionalShortName "P" Phosphorus)
% )

fof( miloA4272, axiom,
	p__atomicNumber(c__Phosphorus,c__15)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Phosphorus)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 30.9738 Amu)))
% )


% ($documentation Phosphorus EnglishLanguage "Non-metallic element belonging to group 15 of 
% the periodic table.  Has a multiple allotropic forms.  Essential element 
% for living organisms.  It was discovered by Brandt in 1669.") 


fof( miloA4273, axiom,
	p__d__subclass(c__Sulphur,c__ElementalSubstance)
).


% ($comment 
% ;; (names Sulphur "Sulphur")
% ;;
% ;; (conventionalShortName "S" Sulphur)
% )

fof( miloA4274, axiom,
	p__atomicNumber(c__Sulphur,c__16)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Sulphur)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 32.064 Amu)))
% )


% ($documentation Sulphur EnglishLanguage "Yellow, nonmetallic element belonging to group 16 
% of the periodic table.  It is an essential element in living organisms, 
% needed in the amino acids cysteine and methionine, and hence in many 
% proteins.  Absorbed by plants from the soil as sulphate ion.") 


fof( miloA4275, axiom,
	p__d__subclass(c__Chlorine,c__ElementalSubstance)
).


% ($comment 
% ;; (names Chlorine "Chlorine")
% ;;
% ;; (conventionalShortName "Cl" Chlorine)
% )
fof( miloA4276, axiom,
	p__atomicNumber(c__Chlorine,c__17)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Chlorine)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 35.453 Amu)))
% )


% ($documentation Chlorine EnglishLanguage "Halogen element.  Poisonous greenish-yellow gas.  
% Occurs widely in nature as sodium chloride in seawater.  Reacts directly 
% with many elements and compounds, strong oxidizing agent.  Discovered by 
% Karl Scheele in 1774.  Humphrey David confirmed it as an element in 
% 1810.") 


fof( miloA4277, axiom,
	p__d__subclass(c__Argon,c__ElementalSubstance)
).


% ($comment 
% ;; (names Argon "Argon")
% ;;
% ;; (conventionalShortName "Ar" Argon)
% )

fof( miloA4278, axiom,
	p__atomicNumber(c__Argon,c__18)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Argon)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 39.948 Amu)))
% )


% ($documentation Argon EnglishLanguage "Monatomic noble gas.  Makes up 0.93 percent of the 
% air.  Colourless, odorless.  Is inert and has no true compounds.  Lord 
% Rayleigh and Sir william Ramsey identified argon in 1894.") 


fof( miloA4279, axiom,
	p__d__subclass(c__Potassium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Potassium "Potassium")
% ;;
% ;; (conventionalShortName "K" Potassium)
% )

fof( miloA4280, axiom,
	p__atomicNumber(c__Potassium,c__19)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Potassium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 39.0983 Amu)))
% )


% ($documentation Potassium EnglishLanguage "Soft silvery metallic element belonging to group 
% 1 of the periodic table (alkali metals).  Occurs naturally in seawater and 
% a many minerals.  Highly reactive, chemically, it resembles sodium in its 
% behavior and compounds.  Discovered by Sir Humphry Davy in 1807.") 


fof( miloA4281, axiom,
	p__d__subclass(c__Calcium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Calcium "Calcium")
% ;;
% ;; (conventionalShortName "Ca" Calcium)
% )

fof( miloA4282, axiom,
	p__atomicNumber(c__Calcium,c__20)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Calcium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 40.08 Amu)))
% )


% ($documentation Calcium EnglishLanguage "Soft grey metallic element belonging to group 2 of 
% the periodic table.  Used a reducing agent in the extraction of thorium, 
% zirconium and uranium.  Essential element for living organisms.") 


fof( miloA4283, axiom,
	p__d__subclass(c__Scandium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Scandium "Scandium")
% ;;
% ;; (conventionalShortName "Sc" Scandium)
% )

fof( miloA4284, axiom,
	p__atomicNumber(c__Scandium,c__21)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Scandium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 44.956 Amu)))
% )


% ($documentation Scandium EnglishLanguage "Rare soft silvery metallic element belonging to 
% group 3 of the periodic table.  There are ten isotopes, nine of which are 
% radioactive and have short half-lives.  Predicted in 1869 by Mendeleev, 
% isolated by Nilson in 1879.") 


fof( miloA4285, axiom,
	p__d__subclass(c__Titanium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Titanium "Titanium")
% ;;
% ;; (conventionalShortName "Ti" Titanium)
% )

fof( miloA4286, axiom,
	p__atomicNumber(c__Titanium,c__22)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Titanium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 47.90 Amu)))
% )


% ($documentation Titanium EnglishLanguage "White metallic transition element.  Occurs in 
% numerous minerals.  Used in strong, light corrosion-resistant alloys.  
% Forms a passive oxide coating when exposed to air.  First discovered by 
% Gregor in 1789.") 


fof( miloA4287, axiom,
	p__d__subclass(c__Vanadium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Vanadium "Vanadium")
% ;;
% ;; (conventionalShortName "V" Vanadium)
% )

fof( miloA4288, axiom,
	p__atomicNumber(c__Vanadium,c__23)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Vanadium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 50.9415 Amu)))
% )


% ($documentation Vanadium EnglishLanguage "Soft and ductile, bright white metal.  Good 
% resistance to corrosion by alkalis, sulphuric and hydrochloric acid.  It 
% oxidizes readily about 933K.  There are two naturally occurring isotopes 
% of vanadium, and 5 radioisotopes, V-49 having the longest half-life at 337 
% days.  Vanadium has nuclear applications, the foil is used in cladding 
% titanium to steel, and vanadium-gallium tape is used to produce a 
% superconductive magnet.  Originally discovered by Andres Manuel del Rio of 
% Mexico City in 1801.  His discovery went unheeded, however, and in 1820, 
% Nils Gabriel Sefstron of Sweden rediscovered it.  Metallic vanadium was 
% isolated by Henry Enfield Roscoe in 1867.  The name vanadium comes from 
% {Vanadis}, a goddess of Scandinavian mythology.  Silvery-white metallic 
% transition element.  Vanadium is essential to {ascidian}s.  Rats and 
% chickens are also known to require it.  Metal powder is a fire hazard, and 
% vanadium compounds should be considered highly toxic.  May cause lung 
% cancer if inhaled.") 


fof( miloA4289, axiom,
	p__d__subclass(c__Chromium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Chromium "Chromium")
% ;;
% ;; (conventionalShortName "Cr" Chromium)
% )

fof( miloA4290, axiom,
	p__atomicNumber(c__Chromium,c__24)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Chromium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 51.996 Amu)))
% )


% ($documentation Chromium EnglishLanguage "Hard silvery transition element.  Used in 
% decorative electroplating.  Discovered in 1797 by Vauquelin.") 


fof( miloA4291, axiom,
	p__d__subclass(c__Manganese,c__ElementalSubstance)
).


% ($comment 
% ;; (names Manganese "Manganese")
% ;;
% ;; (conventionalShortName "Mn" Manganese)
% )

fof( miloA4292, axiom,
	p__atomicNumber(c__Manganese,c__25)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Manganese)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 54.938 Amu)))
% )


% ($documentation Manganese EnglishLanguage "Grey brittle metallic transition element.  
% Rather electropositive, combines with some non-metals when heated.  
% Discovered in 1774 by Scheele.") 


fof( miloA4293, axiom,
	p__d__subclass(c__Iron,c__ElementalSubstance)
).


% ($comment 
% ;; (names Iron "Iron")
% ;;
% ;; (conventionalShortName "Fe" Iron)
% )

fof( miloA4294, axiom,
	p__atomicNumber(c__Iron,c__26)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Iron)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 55.847 Amu)))
% )


% ($documentation Iron EnglishLanguage "Silvery malleable and ductile metallic transition 
% element.  Has nine isotopes and is the fourth most abundant element in the 
% earth's crust.  Required by living organisms as a trace element (used in 
% hemoglobin in humans.) Quite reactive, oxidizes in moist air, displaces 
% hydrogen from dilute acids and combines with nonmetallic elements.") 


fof( miloA4295, axiom,
	p__d__subclass(c__Cobalt,c__ElementalSubstance)
).


% ($comment 
% ;; (names Cobalt "Cobalt")
% ;;
% ;; (conventionalShortName "Co" Cobalt)
% )

fof( miloA4296, axiom,
	p__atomicNumber(c__Cobalt,c__27)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Cobalt)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 58.993 Amu)))
% )


% ($documentation Cobalt EnglishLanguage "Light grey transition element.  Some meteorites 
% contain small amounts of metallic cobalt.  Generally alloyed for use.  
% Mammals require small amounts of cobalt salts.  Cobalt-60, an artificially 
% produced radioactive isotope of Cobalt is an important radioactive tracer 
% and cancer-treatment agent.  Discovered by G.  Brandt in 1737.") 


fof( miloA4297, axiom,
	p__d__subclass(c__Nickel,c__ElementalSubstance)
).


% ($comment 
% ;; (names Nickel "Nickel")
% ;;
% ;; (conventionalShortName "Ni" Nickel)
% )

fof( miloA4298, axiom,
	p__atomicNumber(c__Nickel,c__28)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Nickel)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 58.71 Amu)))
% )


% ($documentation Nickel EnglishLanguage "Malleable ductile silvery metallic transition 
% element.  Discovered by A.F.  Cronstedt in 1751.") 


fof( miloA4299, axiom,
	p__d__subclass(c__Copper,c__ElementalSubstance)
).


% ($comment 
% ;; (names Copper "Copper")
% ;;
% ;; (conventionalShortName "Cu" Copper)
% )

fof( miloA4300, axiom,
	p__atomicNumber(c__Copper,c__29)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Copper)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 63.54 Amu)))
% )


% ($documentation Copper EnglishLanguage "Red-brown transition element.  Known by the Romans 
% as 'cuprum.' Extracted and used for thousands of years.  Malleable, 
% ductile and an excellent conductor of heat and electricity.  When in moist 
% conditions, a greenish layer forms on the outside.") 


fof( miloA4301, axiom,
	p__d__subclass(c__Zinc,c__ElementalSubstance)
).


% ($comment 
% ;; (names Zinc "Zinc")
% ;;
% ;; (conventionalShortName "Zn" Zinc)
% )

fof( miloA4302, axiom,
	p__atomicNumber(c__Zinc,c__30)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Zinc)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 65.38 Amu)))
% )


% ($documentation Zinc EnglishLanguage "Blue-white metallic element.  Occurs in multiple 
% compounds naturally.  Five stable isotopes are six radioactive isotopes 
% have been found.  Chemically a reactive metal, combines with oxygen and 
% other non-metals, reacts with dilute acids to release hydrogen.") 


fof( miloA4303, axiom,
	p__d__subclass(c__Gallium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Gallium "Gallium")
% ;;
% ;; (conventionalShortName "Ga" Gallium)
% )

fof( miloA4304, axiom,
	p__atomicNumber(c__Gallium,c__31)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Gallium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 69.72 Amu)))
% )


% ($documentation Gallium EnglishLanguage "Soft silvery metallic element, belongs to group 13 
% of the periodic table.  The two stable isotopes are Ga-69 and Ga-71.  
% Eight radioactive isotopes are known, all having short half-lives.  
% Gallium Arsenide is used as a semiconductor.  Corrodes most other metals 
% by diffusing into their lattice.  First identified by Francois Lecoq de 
% Boisbaudran in 1875.") 


fof( miloA4305, axiom,
	p__d__subclass(c__Germanium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Germanium "Germanium")
% ;;
% ;; (conventionalShortName "Ge" Germanium)
% )

fof( miloA4306, axiom,
	p__atomicNumber(c__Germanium,c__32)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Germanium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 72.59 Amu)))
% )


% ($documentation Germanium EnglishLanguage "Lustrous hard metalloid element, belongs to 
% group 14 of the periodic table.  Forms a large number of organometallic 
% compounds.  Predicted by Mendeleev in 1871, it was actually found in 1886 
% by Winkler.") 


fof( miloA4307, axiom,
	p__d__subclass(c__Arsenic,c__ElementalSubstance)
).


% ($comment 
% ;; (names Arsenic "Arsenic")
% ;;
% ;; (conventionalShortName "As" Arsenic)
% )

fof( miloA4308, axiom,
	p__atomicNumber(c__Arsenic,c__33)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Arsenic)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 74.922 Amu)))
% )


% ($documentation Arsenic EnglishLanguage "Metalloid element of group 15.  There are three 
% allotropes, yellow, black, and grey.  Reacts with halogens, concentrated 
% oxidizing acids and hot alkalis.  Albertus Magnus is believed to have been 
% the first to isolate the element in 1250.") 


fof( miloA4309, axiom,
	p__d__subclass(c__Selenium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Selenium "Selenium")
% ;;
% ;; (conventionalShortName "Se" Selenium)
% )

fof( miloA4310, axiom,
	p__atomicNumber(c__Selenium,c__34)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Selenium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 78.96 Amu)))
% )


% ($documentation Selenium EnglishLanguage "Metalloid element, belongs to group 16 of the 
% periodic table.  Multiple allotropic forms exist.  Chemically resembles 
% sulphur.  Discovered in 1817 by Jons J.  Berzelius.") 


fof( miloA4311, axiom,
	p__d__subclass(c__Bromine,c__ElementalSubstance)
).


% ($comment 
% ;; (names Bromine "Bromine")
% ;;
% ;; (conventionalShortName "Br" Bromine)
% )

fof( miloA4312, axiom,
	p__atomicNumber(c__Bromine,c__35)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Bromine)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 79.909 Amu)))
% )


% ($documentation Bromine EnglishLanguage "Halogen element.  Red volatile liquid at room 
% temperature.  Its reactivity is somewhere between chlorine and iodine.  
% Harmful to human tissue in a liquid state, the vapour irritates eyes and 
% throat.  Discovered in 1826 by Antoine Balard.") 


fof( miloA4313, axiom,
	p__d__subclass(c__Krypton,c__ElementalSubstance)
).


% ($comment 
% ;; (names Krypton "Krypton")
% ;;
% ;; (conventionalShortName "Kr" Krypton)
% )

fof( miloA4314, axiom,
	p__atomicNumber(c__Krypton,c__36)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Krypton)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 83.80 Amu)))
% )


% ($documentation Krypton EnglishLanguage "Colorless gaseous element, belongs to the noble 
% gases.  Occurs in the air, 0.0001 percent by volume.  It can be extracted 
% from liquid air by fractional distillation.  Generally not isolated, but 
% used with other inert gases in fluorescent lamps.  Five natural isotopes, 
% and five radioactive isotopes.  Kr-85, the most stable radioactive 
% isotope, has a half-life of 10.76 years and is produced in fission 
% reactors.  Practically inert, though known to form compounds with 
% {fluorine}.") 


fof( miloA4315, axiom,
	p__d__subclass(c__Rubidium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Rubidium "Rubidium")
% ;;
% ;; (conventionalShortName "Rb" Rubidium)
% )

fof( miloA4316, axiom,
	p__atomicNumber(c__Rubidium,c__37)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Rubidium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 85.47 Amu)))
% )


% ($documentation Rubidium EnglishLanguage "Soft silvery metallic element, belongs to group 1 
% of the periodic table.  Rb-97, the naturally occurring isotope, is 
% radioactive.  It is highly reactive, with properties similar to other 
% elements in group 1, like igniting spontaneously in air.  Discovered 
% spectroscopically in 1861 by W.  Bunsen and G.R.  Kirchoff.") 


fof( miloA4317, axiom,
	p__d__subclass(c__Strontium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Strontium "Strontium")
% ;;
% ;; (conventionalShortName "Sr" Strontium)
% )

fof( miloA4318, axiom,
	p__atomicNumber(c__Strontium,c__38)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Strontium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 87.62 Amu)))
% )


% ($documentation Strontium EnglishLanguage "Soft yellowish metallic element, belongs to 
% group 2 of the periodic table.  Highly reactive chemically.  Sr-90 is 
% present in radioactive fallout and has a half-life of 28 years.  
% Discovered in 1798 by Klaproth and Hope, isolated in 1808 by Humphry 
% Davy.") 


fof( miloA4319, axiom,
	p__d__subclass(c__Yttrium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Yttrium "Yttrium")
% ;;
% ;; (conventionalShortName "Y" Yttrium)
% )

fof( miloA4320, axiom,
	p__atomicNumber(c__Yttrium,c__39)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Yttrium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 88.905 Amu)))
% )


% ($documentation Yttrium EnglishLanguage "Silvery-grey metallic element of group 3 on the 
% periodic table.  Found in uranium ores.  The only natural isotope is Y-89, 
% there are 14 other artificial isotopes.  Chemically resembles the 
% lanthanoids.  Stable in the air below 400 degrees, celsius.  Discovered in 
% 1828 by Friedrich Wohler.") 


fof( miloA4321, axiom,
	p__d__subclass(c__Zirconium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Zirconium "Zirconium")
% ;;
% ;; (conventionalShortName "Zr" Zirconium)
% )

fof( miloA4322, axiom,
	p__atomicNumber(c__Zirconium,c__40)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Zirconium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 91.22 Amu)))
% )


% ($documentation Zirconium EnglishLanguage "Grey-white metallic transition element.  Five 
% natural isotopes and six radioactive isotopes are known.  Used in nuclear 
% reactors for a {neutron} absorber.  Discovered in 1789 by Martin Klaproth, 
% isolated in 1824 by Berzelius.") 


fof( miloA4323, axiom,
	p__d__subclass(c__Niobium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Niobium "Niobium")
% ;;
% ;; (conventionalShortName "Nb" Niobium)
% )

fof( miloA4324, axiom,
	p__atomicNumber(c__Niobium,c__41)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Niobium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 92.906 Amu)))
% )


% ($documentation Niobium EnglishLanguage "Soft, ductile grey-blue metallic transition 
% element.  Used in special steels and in welded joints to increase 
% strength.  Combines with halogens and oxidizes in air at 200 degrees 
% celsius.  Discovered by Charles Hatchett in 1801 and isolated by 
% Blomstrand in 1864.  Called {columbium} originally.") 


fof( miloA4325, axiom,
	p__d__subclass(c__Molybdenum,c__ElementalSubstance)
).


% ($comment 
% ;; (names Molybdenum "Molybdenum")
% ;;
% ;; (conventionalShortName "Mo" Molybdenum)
% )

fof( miloA4326, axiom,
	p__atomicNumber(c__Molybdenum,c__42)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Molybdenum)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 95.94 Amu)))
% )


% ($documentation Molybdenum EnglishLanguage "Silvery-white, hard metallic transition 
% element.  It is chemically unreactive and is not affected by most acids.  
% It oxidizes at high temperatures.  There are seven natural isotopes, and 
% four radioisotopes, Mo-93 being the most stable with a half-life of 3500 
% years.  Molybdenum is used in almost all high-strength steels, it has 
% nuclear applications, and is a catalyst in petroleum refining.  Discovered 
% in 1778 by Carl Welhelm Scheele of Sweden.  Impure metal was prepared in 
% 1782 by Peter Jacob Hjelm.  The name comes from the Greek word molybdos 
% which means lead.  Trace amounts of molybdenum are required for all known 
% forms of life.  All molybdenum compounds should be considered highly 
% toxic, and will also cause severe birth defects.") 


fof( miloA4327, axiom,
	p__d__subclass(c__Technetium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Technetium "Technetium")
% ;;
% ;; (conventionalShortName "Tc" Technetium)
% )

fof( miloA4328, axiom,
	p__atomicNumber(c__Technetium,c__43)
).


fof( miloA4329, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Technetium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__98,c__Amu))
			)
		)
	)
).



% ($documentation Technetium EnglishLanguage "Radioactive metallic transition element.  Can 
% be detected in some stars and the fission products of uranium.  First made 
% by Perrier and Segre by bombarding molybdenum with deutrons, giving them 
% Tc-97.  Tc-99 is the most stable isotope with a half-life of 2.6*10^6 
% years.  Sixteen isotopes are known.  Organic technetium compounds are used 
% in bone imaging.  Chemical properties are intermediate between rhenium and 
% manganese.") 


fof( miloA4330, axiom,
	p__d__subclass(c__Ruthenium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Ruthenium "Ruthenium")
% ;;
% ;; (conventionalShortName "Ru" Ruthenium)
% )

fof( miloA4331, axiom,
	p__atomicNumber(c__Ruthenium,c__44)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Ruthenium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 101.07 Amu)))
% )


% ($documentation Ruthenium EnglishLanguage "Hard white metallic transition element.  Found 
% with platinum, used as a catalyst in some platinum alloys.  Dissolves in 
% fused alkalis, and is not attacked by acids.  Reacts with halogens and 
% oxygen at high temperatures.  Isolated in 1844 by K.K.  Klaus.") 


fof( miloA4332, axiom,
	p__d__subclass(c__Rhodium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Rhodium "Rhodium")
% ;;
% ;; (conventionalShortName "Rh" Rhodium)
% )

fof( miloA4333, axiom,
	p__atomicNumber(c__Rhodium,c__45)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Rhodium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 102.905 Amu)))
% )


% ($documentation Rhodium EnglishLanguage "Silvery white metallic transition element.  Found 
% with platinum and used in some platinum alloys.  Not attacked by acids, 
% dissolves only in aqua regia.  Discovered in 1803 by W.H.  Wollaston.") 


fof( miloA4334, axiom,
	p__d__subclass(c__Palladium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Palladium "Palladium")
% ;;
% ;; (conventionalShortName "Pd" Palladium)
% )

fof( miloA4335, axiom,
	p__atomicNumber(c__Palladium,c__46)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Palladium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 106.4 Amu)))
% )


% ($documentation Palladium EnglishLanguage "Soft white ductile transition element.  Found 
% with some copper and nickel ores.  Does not react with oxygen at normal 
% temperatures.  Dissolves slowly in hydrochloric acid.  Discovered in 1803 
% by W.H.  Wollaston.") 


fof( miloA4336, axiom,
	p__d__subclass(c__Silver,c__ElementalSubstance)
).


% ($comment 
% ;; (names Silver "Silver")
% ;;
% ;; (conventionalShortName "Ag" Silver)
% )

fof( miloA4337, axiom,
	p__atomicNumber(c__Silver,c__47)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Silver)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 107.870 Amu)))
% )


% ($documentation Silver EnglishLanguage "White lustrous soft metallic transition element.  
% Found in both its elemental form and in minerals.  Used in jewellery, 
% tableware and so on.  Less reactive than silver, chemically.") 


fof( miloA4338, axiom,
	p__d__subclass(c__Cadmium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Cadmium "Cadmium")
% ;;
% ;; (conventionalShortName "Cd" Cadmium)
% )

fof( miloA4339, axiom,
	p__atomicNumber(c__Cadmium,c__48)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Cadmium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 112.40 Amu)))
% )


% ($documentation Cadmium EnglishLanguage "Soft bluish metal belonging to group 12 of the 
% periodic table.  Extremely toxic even in low concentrations.  Chemically 
% similar to zinc, but lends itself to more complex compounds.  Discovered 
% in 1817 by F.  Stromeyer.") 


fof( miloA4340, axiom,
	p__d__subclass(c__Indium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Indium "Indium")
% ;;
% ;; (conventionalShortName "In" Indium)
% )

fof( miloA4341, axiom,
	p__atomicNumber(c__Indium,c__49)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Indium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 114.82 Amu)))
% )


% ($documentation Indium EnglishLanguage "Soft silvery element belonging to group 13 of the 
% periodic table.  The most common natural isotope is In-115, which has a 
% half-life of 6*10^4 years.  Five other radioisotopes exist.  Discovered in 
% 1863 by Reich and Richter.") 


fof( miloA4342, axiom,
	p__d__subclass(c__Tin,c__ElementalSubstance)
).


% ($comment 
% ;; (names Tin "Tin")
% ;;
% ;; (conventionalShortName "Sn" Tin)
% )

fof( miloA4343, axiom,
	p__atomicNumber(c__Tin,c__50)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Tin)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 118.69 Amu)))
% )


% ($documentation Tin EnglishLanguage "Silvery malleable metallic element belonging to group 
% 14 of the periodic table.  Twenty-six isotopes are known, five of which 
% are radioactive.  Chemically reactive.  Combines directly with chlorine 
% and oxygen and displaces hydrogen from dilute acids.  ") 


fof( miloA4344, axiom,
	p__d__subclass(c__Antimony,c__ElementalSubstance)
).


% ($comment 
% ;; (names Antimony "Antimony")
% ;;
% ;; (conventionalShortName "Sb" Antimony)
% )

fof( miloA4345, axiom,
	p__atomicNumber(c__Antimony,c__51)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Antimony)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 121.75 Amu)))
% )


% ($documentation Antimony EnglishLanguage "Element of group 15.  Multiple allotropic forms.  
% The stable form of antimony is a blue-white metal.  Yellow and black 
% antimony are unstable non-metals.  Used in flame-proofing, paints, 
% ceramics, enamels, and rubber.  Attacked by oxidizing acids and halogens.  
% First reported by Tholden in 1450.") 


fof( miloA4346, axiom,
	p__d__subclass(c__Tellurium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Tellurium "Tellurium")
% ;;
% ;; (conventionalShortName "Te" Tellurium)
% )

fof( miloA4347, axiom,
	p__atomicNumber(c__Tellurium,c__52)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Tellurium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 127.60 Amu)))
% )


% ($documentation Tellurium EnglishLanguage "Silvery metalloid element of group 16.  Eight 
% natural isotopes, nine radioactive isotopes.  Used in semiconductors and 
% to a degree in some steels.  Chemistry is similar to {sulphur}.  
% Discovered in 1782 by Franz Miller.") 


fof( miloA4348, axiom,
	p__d__subclass(c__Iodine,c__ElementalSubstance)
).


% ($comment 
% ;; (names Iodine "Iodine")
% ;;
% ;; (conventionalShortName "I" Iodine)
% )

fof( miloA4349, axiom,
	p__atomicNumber(c__Iodine,c__53)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Iodine)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 126.904 Amu)))
% )


% ($documentation Iodine EnglishLanguage "Dark violet nonmetallic element, belongs to group 
% 17 of the periodic table.  Insoluble in water.  Required as a trace 
% element for living organisms.  One stable isotope, I-127 exists, in 
% addition to fourteen radioactive isotopes.  Chemically the least reactive 
% of the halogens, and the most electropositive metallic halogen.  
% Discovered in 1812 by Courtois.  ") 


fof( miloA4350, axiom,
	p__d__subclass(c__Xenon,c__ElementalSubstance)
).


% ($comment 
% ;; (names Xenon "Xenon")
% ;;
% ;; (conventionalShortName "Xe" Xenon)
% )

fof( miloA4351, axiom,
	p__atomicNumber(c__Xenon,c__54)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Xenon)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 131.30 Amu)))
% )


% ($documentation Xenon EnglishLanguage "Colourless, odourless gas belonging to group 18 on 
% the periodic table (the noble gases.) Nine natural isotopes and seven 
% radioactive isotopes are known.  Xenon was part of the first noble-gas 
% compound synthesized.  Several others involving Xenon have been found 
% since then.  Xenon was discovered by Ramsey and Travers in 1898.") 


fof( miloA4352, axiom,
	p__d__subclass(c__Caesium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Caesium "Caesium")
% ;;
% ;; (conventionalShortName "Cs" Caesium)
% )

fof( miloA4353, axiom,
	p__atomicNumber(c__Caesium,c__55)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Caesium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 132.90545 Amu)))
% )


% ($documentation Caesium EnglishLanguage "Soft silvery-white metallic element belonging to 
% group 1 of the periodic table.  One of the three metals which are liquid 
% at room temperature.  Cs-133 is the natural, and only stable, isotope.  
% Fifteen other radioisotopes exist.  Caesium reacts explosively with cold 
% water, and ice at temperatures above 157K.  Caesium hydroxide is the 
% strongest base known.  Caesium is the most electropositive, most alkaline 
% and has the least ionization potential of all the elements.  Known uses 
% include the basis of atomic clocks, catalyst for the hydrogenation of some 
% organic compounds, and in photoelectric cells.  Caesium was discovered by 
% Gustav Kirchoff and Robert Bunsen in Germany in 1860 spectroscopically.  
% Its identification was based upon the bright blue lines in its spectrum.  
% The name comes from the latin word caesius, which means sky blue.  Caesium 
% should be considered highly toxic.  Some of the radioisotopes are even 
% more toxic.") 


fof( miloA4354, axiom,
	p__d__subclass(c__Barium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Barium "Barium")
% ;;
% ;; (conventionalShortName "Ba" Barium)
% )

fof( miloA4355, axiom,
	p__atomicNumber(c__Barium,c__56)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Barium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 137.34 Amu)))
% )


% ($documentation Barium EnglishLanguage "Silvery-white reactive element, belonging to group 
% 2 of the periodic table.  Soluble barium compounds are extremely 
% poisonous.  Identified in 1774 by Karl Scheele and extracted in 1808 by 
% Humphry Davy.") 


fof( miloA4356, axiom,
	p__d__subclass(c__Lanthanum,c__ElementalSubstance)
).


% ($comment 
% ;; (names Lanthanum "Lanthanum")
% ;;
% ;; (conventionalShortName "La" Lanthanum)
% )

fof( miloA4357, axiom,
	p__atomicNumber(c__Lanthanum,c__57)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Lanthanum)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 138.9055 Amu)))
% )


% ($documentation Lanthanum EnglishLanguage "(From the Greek word lanthanein, to line hidden) 
% Silvery metallic element belonging to group 3 of the periodic table and 
% oft considered to be one of the lanthanoids.  Found in some rare-earth 
% minerals.  Twenty-five natural isotopes exist.  La-139 which is stable, 
% and La-138 which has a half-life of 10^10 to 10^15 years.  The other 
% twenty-three isotopes are radioactive.  It resembles the lanthanoids 
% chemically.  Lanthanum has a low to moderate level of toxicity, and should 
% be handled with care.  Discovered in 1839 by C.G.  Mosander.") 


fof( miloA4358, axiom,
	p__d__subclass(c__Cerium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Cerium "Cerium")
% ;;
% ;; (conventionalShortName "Ce" Cerium)
% )

fof( miloA4359, axiom,
	p__atomicNumber(c__Cerium,c__58)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Cerium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 140.12 Amu)))
% )


% ($documentation Cerium EnglishLanguage "Silvery metallic element, belongs to the 
% lanthanoids.  Four natural isotopes exist, and fifteen radioactive 
% isotopes have been identified.  Used in some rare-earth alloys.  The 
% oxidized form is used in the glass industry.  Discovered by Martin .H.  
% Klaproth in 1803.") 


fof( miloA4360, axiom,
	p__d__subclass(c__Praseodymium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Praseodymium "Praseodymium")
% ;;
% ;; (conventionalShortName "Pr" Praseodymium)
% )

fof( miloA4361, axiom,
	p__atomicNumber(c__Praseodymium,c__59)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Praseodymium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 140.907 Amu)))
% )


% ($documentation Praseodymium EnglishLanguage "Soft silvery metallic element, belongs to the 
% lanthanoids.  Only natural isotope is Pr-141 which is not radioactive.  
% Fourteen radioactive isotopes have been artificially produced.  Used in 
% rare-earth alloys.  Discovered in 1885 by C.A. von Welsbach.") 


fof( miloA4362, axiom,
	p__d__subclass(c__Neodymium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Neodymium "Neodymium")
% ;;
% ;; (conventionalShortName "Nd" Neodymium)
% )

fof( miloA4363, axiom,
	p__atomicNumber(c__Neodymium,c__60)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Neodymium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 144.24 Amu)))
% )


% ($documentation Neodymium EnglishLanguage "Soft bright silvery metallic element, belongs to 
% the lanthanoids.  Seven natural isotopes, Nd-144 being the only 
% radioactive one with a half-life of 10^10 to 10^15 years.  Six artificial 
% radioisotopes have been produced.  The metal is used in glass works to 
% color class a shade of violet-purple and make it dichroic.  One of the 
% more reactive rare-earth metals, quickly reacts with air.  Used in some 
% rare-earth alloys.  Neodymium is used to color the glass used in welder's 
% glasses.  Neodymium is also used in very powerful, permanent magnets 
% (Nd2Fe14B).  Discovered by Carl F.  Auer von Welsbach in Austria in 1885 
% by separating didymium into its elemental components {praseodymium} and 
% neodymium.  The name comes from the Greek words 'neos didymos' which means 
% 'new twin'.  Neodymium should be considered highly toxic, however evidence 
% would seem to show that it acts as little more than a skin and eye 
% irritant.  The dust however, presents a fire and explosion hazard.") 


fof( miloA4364, axiom,
	p__d__subclass(c__Promethium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Promethium "Promethium")
% ;;
% ;; (conventionalShortName "Pm" Promethium)
% )

fof( miloA4365, axiom,
	p__atomicNumber(c__Promethium,c__61)
).


fof( miloA4366, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Promethium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__147,c__Amu))
			)
		)
	)
).



% ($documentation Promethium EnglishLanguage "Soft silvery metallic element, belongs to the 
% lanthanoids.  Pm-147, the only natural isotope, is radioactive and has a 
% half-life of 252 years.  Eighteen radioisotopes have been produced, but 
% all have very short half-lives.  Found only in nuclear decay waste.  
% Pm-147 is of interest as a beta-decay source, however Pm-146 and Pm-148 
% have to be removed from it first, as they generate gamma radiation.  
% Discovered by J.A.  Marinsky, L.E.  Glendenin and C.D.  Coryell in 
% 1947.") 


fof( miloA4367, axiom,
	p__d__subclass(c__Samarium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Samarium "Samarium")
% ;;
% ;; (conventionalShortName "Sm" Samarium)
% )

fof( miloA4368, axiom,
	p__atomicNumber(c__Samarium,c__62)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Samarium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 150.35 Amu)))
% )


% ($documentation Samarium EnglishLanguage "Soft silvery metallic element, belongs to the 
% lanthanoids.  Seven natural isotopes, Sm-147 is the only radioisotope, and 
% has a half-life of 2.5*10^11 years.  Used for making special alloys needed 
% in the production of nuclear reactors.  Also used as a neutron absorber.  
% Small quantities of samarium oxide is used in special optical glasses.  
% The largest use of the element is its ferromagnetic alloy which produces 
% permanent magnets that are five times stronger than magnets produced by 
% any other material.  Discovered by Francois Lecoq de Boisbaudran in 
% 1879.") 


fof( miloA4369, axiom,
	p__d__subclass(c__Europium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Europium "Europium")
% ;;
% ;; (conventionalShortName "Eu" Europium)
% )

fof( miloA4370, axiom,
	p__atomicNumber(c__Europium,c__63)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Europium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 151.25 Amu)))
% )


% ($documentation Europium EnglishLanguage "Soft silvery metallic element belonging to the 
% lanthanoids.  Eu-151 and Eu-153 are the only two stable isotopes, both of 
% which are {neutron} absorbers.  Discovered in 1889 by Sir William 
% Crookes.") 


fof( miloA4371, axiom,
	p__d__subclass(c__Gadolinium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Gadolinium "Gadolinium")
% ;;
% ;; (conventionalShortName "Gd" Gadolinium)
% )

fof( miloA4372, axiom,
	p__atomicNumber(c__Gadolinium,c__64)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Gadolinium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 157.25 Amu)))
% )


% ($documentation Gadolinium EnglishLanguage "Soft silvery metallic element belonging to the 
% lanthanoids.  Seven natural, stable isotopes are known in addition to 
% eleven artificial isotopes.  Gd-155 and Gd-157 and the best neutron 
% absorbers of all elements.  Gadolinium compounds are used in electronics.  
% Discovered by J.C.G Marignac in 1880.") 


fof( miloA4373, axiom,
	p__d__subclass(c__Terbium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Terbium "Terbium")
% ;;
% ;; (conventionalShortName "Tb" Terbium)
% )

fof( miloA4374, axiom,
	p__atomicNumber(c__Terbium,c__65)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Terbium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 158.924 Amu)))
% )


% ($documentation Terbium EnglishLanguage "Silvery metallic element belonging to the 
% lanthanoids.  Tb-159 is the only stable isotope, there are seventeen 
% artificial isotopes.  Discovered by G.G.  Mosander in 1843.") 


fof( miloA4375, axiom,
	p__d__subclass(c__Dysprosium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Dysprosium "Dysprosium")
% ;;
% ;; (conventionalShortName "Dy" Dysprosium)
% )

fof( miloA4376, axiom,
	p__atomicNumber(c__Dysprosium,c__66)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Dysprosium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 162.50 Amu)))
% )


% ($documentation Dysprosium EnglishLanguage "Metallic with a bright silvery-white lustre.  
% Dysprosium belongs to the lanthanoids.  It is relatively stable in air at 
% room temperatures, it will however dissolve in mineral acids, evolving 
% hydrogen.  It is found in from rare-earth minerals.  There are seven 
% natural isotopes of dysprosium, and eight radioisotopes, Dy-154 being the 
% most stable with a half-life of 3*10^6 years.  Dysprosium is used as a 
% neutron absorber in nuclear fission reactions, and in compact disks.  It 
% was discovered by Paul Emile Lecoq de Boisbaudran in 1886 in France.  Its 
% name comes from the Greek word dysprositos, which means hard to obtain.") 


fof( miloA4377, axiom,
	p__d__subclass(c__Holmium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Holmium "Holmium")
% ;;
% ;; (conventionalShortName "Ho" Holmium)
% )

fof( miloA4378, axiom,
	p__atomicNumber(c__Holmium,c__67)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Holmium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 167.26 Amu)))
% )


% ($documentation Holmium EnglishLanguage "Relatively soft and malleable silvery-white 
% metallic element, which is stable in dry air at room temperature.  It 
% oxidizes in moist air and at high temperatures.  It belongs to the 
% lanthanoids.  A rare-earth metal, it is found in the minerals monazite and 
% gadolinite.  It possesses unusual magnetic properties.  One natural 
% isotope, Ho-165 exists, six radioisotopes exist, the most stable being 
% Ho-163 with a half-life of 4570 years.  Holmium is used in some metal 
% alloys, it is also said to stimulate the metabolism.  Discovered by Per 
% Theodor Cleve and J.L.  Soret in Switzerland in 1879.  The name homium 
% comes from the Greek word Holmia which means Sweden.  While all holmium 
% compounds should be considered highly toxic, initial evidence seems to 
% indicate that they do not pose much danger.  The metal's dust however, is 
% a fire hazard.") 


fof( miloA4379, axiom,
	p__d__subclass(c__Erbium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Erbium "Erbium")
% ;;
% ;; (conventionalShortName "Er" Erbium)
% )

fof( miloA4380, axiom,
	p__atomicNumber(c__Erbium,c__68)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Erbium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 167.26 Amu)))
% )


% ($documentation Erbium EnglishLanguage "Soft silvery metallic element which belongs to the 
% lanthanoids.  Six natural isotopes that are stable.  Twelve artificial 
% isotopes are known.  Used in nuclear technology as a neutron absorber.  It 
% is being investigated for other possible uses.  Discovered by Carl G.  
% Mosander in 1843.") 


fof( miloA4381, axiom,
	p__d__subclass(c__Thulium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Thulium "Thulium")
% ;;
% ;; (conventionalShortName "Tm" Thulium)
% )

fof( miloA4382, axiom,
	p__atomicNumber(c__Thulium,c__69)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Thulium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 168.934 Amu)))
% )


% ($documentation Thulium EnglishLanguage "Soft grey metallic element that belongs to the 
% lanthanoids.  One natural isotope exists, Tm-169, and seventeen artificial 
% isotopes have been produced.  No known uses for the element.  Discovered 
% in 1879 by Per Theodor Cleve.") 


fof( miloA4383, axiom,
	p__d__subclass(c__Ytterbium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Ytterbium "Ytterbium")
% ;;
% ;; (conventionalShortName "Yb" Ytterbium)
% )

fof( miloA4384, axiom,
	p__atomicNumber(c__Ytterbium,c__70)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Ytterbium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 173.04 Amu)))
% )


% ($documentation Ytterbium EnglishLanguage "Silvery metallic element of the lanthanoids.  
% Seven natural isotopes and ten artificial isotopes are known.  Used in 
% certain steels.  Discovered by J.D.G.  Marignac in 1878.") 


fof( miloA4385, axiom,
	p__d__subclass(c__Lutetium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Lutetium "Lutetium")
% ;;
% ;; (conventionalShortName "Lu" Lutetium)
% )

fof( miloA4386, axiom,
	p__atomicNumber(c__Lutetium,c__71)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Lutetium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 194.967 Amu)))
% )


% ($documentation Lutetium EnglishLanguage "Silvery-white rare-earth metal which is 
% relatively stable in air.  It happens to be the most expensive rare-earth 
% metal.  Its found with almost all rare-earth metals, but is very difficult 
% to separate from other elements.  Least abundant of all natural elements.  
% Used in metal alloys, and as a catalyst in various processes.  There are 
% two natural, stable isotopes, and seven radioisotopes, the most stable 
% being Lu-174 with a half-life of 3.3 years.  The separation of lutetium 
% from {ytterbium} was described by Georges Urbain in 1907.  It was 
% discovered at approximately the same time by Carl Auer von Welsbach.  The 
% name comes from the Greek word lutetia which means Paris.") 


fof( miloA4387, axiom,
	p__d__subclass(c__Hafnium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Hafnium "Hafnium")
% ;;
% ;; (conventionalShortName "Hf" Hafnium)
% )

fof( miloA4388, axiom,
	p__atomicNumber(c__Hafnium,c__72)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Hafnium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 178.49 Amu)))
% )


% ($documentation Hafnium EnglishLanguage "Silvery lustrous metallic transition element.  
% Used in tungsten alloys in filaments and electrodes, also acts as a 
% neutron absorber.  First reported by Urbain in 1911, existence was finally 
% established in 1923 by D.  Coster, G.C.  de Hevesy in 1923.") 


fof( miloA4389, axiom,
	p__d__subclass(c__Tantalum,c__ElementalSubstance)
).


% ($comment 
% ;; (names Tantalum "Tantalum")
% ;;
% ;; (conventionalShortName "Ta" Tantalum)
% )

fof( miloA4390, axiom,
	p__atomicNumber(c__Tantalum,c__73)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Tantalum)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 180.948 Amu)))
% )


% ($documentation Tantalum EnglishLanguage "Heavy blue-grey metallic transition element.  
% Ta-181 is a stable isotope, and Ta-180 is a radioactive isotope, with a 
% half-life in excess of 10^7 years.  Used in surgery as it is unreactive.  
% Forms a passive oxide layer in air.  Identified in 1802 by Ekeberg and 
% isolated in 1820 by Jons J.  Berzelius.") 


fof( miloA4391, axiom,
	p__d__subclass(c__Tungsten,c__ElementalSubstance)
).


% ($comment 
% ;; (names Tungsten "Tungsten")
% ;;
% ;; (conventionalShortName "W" Tungsten)
% )

fof( miloA4392, axiom,
	p__atomicNumber(c__Tungsten,c__74)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Tungsten)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 183.85 Amu)))
% )


% ($documentation Tungsten EnglishLanguage "White or grey metallic transition element, 
% formerly called {wolfram}.  Forms a protective oxide in air and can be 
% oxidized at high temperature.  First isolated by Jose and Fausto de 
% Elhuyer in 1783.") 


fof( miloA4393, axiom,
	p__d__subclass(c__Rhenium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Rhenium "Rhenium")
% ;;
% ;; (conventionalShortName "Re" Rhenium)
% )

fof( miloA4394, axiom,
	p__atomicNumber(c__Rhenium,c__75)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Rhenium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 186.2 Amu)))
% )


% ($documentation Rhenium EnglishLanguage "Silvery-white metallic transition element.  
% Obtained as a by-product of molybdenum refinement.  Rhenium-molybdenum 
% alloys are superconducting.") 


fof( miloA4395, axiom,
	p__d__subclass(c__Osmium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Osmium "Osmium")
% ;;
% ;; (conventionalShortName "Os" Osmium)
% )

fof( miloA4396, axiom,
	p__atomicNumber(c__Osmium,c__76)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Osmium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 190.2 Amu)))
% )


% ($documentation Osmium EnglishLanguage "Hard blue-white metallic transition element.  Found 
% with platinum and used in some alloys with platinum and iridium.") 


fof( miloA4397, axiom,
	p__d__subclass(c__Iridium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Iridium "Iridium")
% ;;
% ;; (conventionalShortName "Ir" Iridium)
% )

fof( miloA4398, axiom,
	p__atomicNumber(c__Iridium,c__77)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Iridium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 192.217 Amu)))
% )


% ($documentation Iridium EnglishLanguage "Very hard and brittle, silvery metallic transition 
% element.  It has a yellowish cast to it.  Salts of iridium are highly 
% colored.  It is the most corrosion resistant metal known, not attacked by 
% any acid, but is attacked by molten salts.  There are two natural isotopes 
% of iridium, and 4 radioisotopes, the most stable being Ir-192 with a 
% half-life of 73.83 days.  Ir-192 decays into {platinum}, while the other 
% radioisotopes decay into {osmium}.  Iridium is used in high temperature 
% apparatus, electrical contacts, and as a hardening agent for platinum.  
% Discovered in 1803 by Smithson Tennant in England.  The name comes from 
% the Greek word iris, which means rainbow.  Iridium metal is generally 
% non-toxic due to its relative unreactivity, but iridium compounds should 
% be considered highly toxic.") 


fof( miloA4399, axiom,
	p__d__subclass(c__Platinum,c__ElementalSubstance)
).


% ($comment 
% ;; (names Platinum "Platinum")
% ;;
% ;; (conventionalShortName "Pt" Platinum)
% )

fof( miloA4400, axiom,
	p__atomicNumber(c__Platinum,c__78)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Platinum)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 195.078 Amu)))
% )


% ($documentation Platinum EnglishLanguage "Attractive greyish-white metal.  When pure, it is 
% malleable and ductile.  Does not oxidize in air, insoluble in hydrochloric 
% and nitric acid.  Corroded by halogens, cyandies, sulphur and alkalis.  
% {Hydrogen} and {oxygen} react explosively in the presence of platinum.  
% There are six stable isotopes and three radioisotopes, the most stable 
% being Pt-193 with a half-life of 60 years.  Platinum is used in jewelry, 
% laboratory equipment, electrical contacts, dentistry, and anti-pollution 
% devices in cars.  PtCl2(NH3)2 is used to treat some forms of cancer.  
% Platinum-{cobalt} alloys have magnetic properties.  It is also used in the 
% definition of the Standard Hydrogen Electrode.  Discovered by Antonio de 
% Ulloa in South America in 1735.  The name comes from the Spanish word 
% platina which means silver.  Platinum metal is generally not a health 
% concern due to its unreactivity, however platinum compounds should be 
% considered highly toxic.") 


fof( miloA4401, axiom,
	p__d__subclass(c__Gold,c__ElementalSubstance)
).


% ($comment 
% ;; (names Gold "Gold")
% ;;
% ;; (conventionalShortName "Au" Gold)
% )

fof( miloA4402, axiom,
	p__atomicNumber(c__Gold,c__79)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Gold)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 196.96655 Amu)))
% )


% ($documentation Gold EnglishLanguage "Gold is gold colored.  It is the most malleable and 
% ductile metal known.  There is only one stable isotope of gold, and five 
% radioisotopes of gold, Au-195 being the most stable with a half-life of 
% 186 days.  Gold is used as a monetary standard, in jewelry, dentistry, 
% electronics.  Au-198 is used in treating cancer and some other medical 
% conditions.  Gold has been known to exist as far back as 2600 BC.  Gold 
% comes from the Anglo-Saxon word gold.  Its symbol, Au, comes from the 
% Latin word aurum, which means gold.  Gold is not particularly toxic, 
% however it is known to cause damage to the liver and kidneys in some.") 


fof( miloA4403, axiom,
	p__d__subclass(c__Mercury,c__ElementalSubstance)
).


% ($comment 
% ;; (names Mercury "Mercury")
% ;;
% ;; (conventionalShortName "Hg" Mercury)
% )

fof( miloA4404, axiom,
	p__atomicNumber(c__Mercury,c__80)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Mercury)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 200.59 Amu)))
% )


% ($documentation Mercury EnglishLanguage "Heavy silvery liquid metallic element, belongs to 
% the zinc group.  Used in thermometers, barometers and other scientific 
% apparatus.  Less reactive than zinc and cadmium, does not displace 
% hydrogen from acids.  Forms a number of complexes and organomercury 
% compounds.") 


fof( miloA4405, axiom,
	p__d__subclass(c__Thallium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Thallium "Thallium")
% ;;
% ;; (conventionalShortName "Tl" Thallium)
% )

fof( miloA4406, axiom,
	p__atomicNumber(c__Thallium,c__81)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Thallium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 204.3833 Amu)))
% )


% ($documentation Thallium EnglishLanguage "Pure, unreacted thallium appears silvery-white 
% and exhibits a metallic lustre.  Upon reacting with air, it begins to turn 
% bluish-grey and looks like lead.  It is very malleable, and can be cut 
% with a knife.  There are two stable isotopes, and four radioisotopes, 
% Tl-204 being the most stable with a half-life of 3.78 years.  Thallium 
% sulphate was used as a rodenticide.  Thallium sulphine's conductivity 
% changes with exposure to infrared light, this gives it a use in infrared 
% detectors.  Discovered by Sir William Crookes via spectroscopy.  Its name 
% comes from the Greek word thallos, which means green twig.  Thallium and 
% its compounds are toxic and can cause cancer.") 


fof( miloA4407, axiom,
	p__d__subclass(c__Lead,c__ElementalSubstance)
).


% ($comment 
% ;; (names Lead "Lead")
% ;;
% ;; (conventionalShortName "Pb" Lead)
% )

fof( miloA4408, axiom,
	p__atomicNumber(c__Lead,c__82)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Lead)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 207.19 Amu)))
% )


% ($documentation Lead EnglishLanguage "Heavy dull grey ductile metallic element, belongs to 
% group 14.  Used in building construction, lead-place accumulators, bullets 
% and shot, and is part of solder, pewter, bearing metals, type metals and 
% fusible alloys.") 


fof( miloA4409, axiom,
	p__d__subclass(c__Bismuth,c__ElementalSubstance)
).


% ($comment 
% ;; (names Bismuth "Bismuth")
% ;;
% ;; (conventionalShortName "Bi" Bismuth)
% )

fof( miloA4410, axiom,
	p__atomicNumber(c__Bismuth,c__83)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Bismuth)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 208.980 Amu)))
% )


% ($documentation Bismuth EnglishLanguage "White crystalline metal with a pink tinge, belongs 
% to group 15.  Most diamagnetic of all metals and has the lowest thermal 
% conductivity of all the elements except mercury.  Lead-free bismuth 
% compounds are used in cosmetics and medical procedures.  Burns in the air 
% and produces a blue flame.  In 1753, C.G. Junine first demonstrated that 
% it was different from lead.") 


fof( miloA4411, axiom,
	p__d__subclass(c__Polonium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Polonium "Polonium")
% ;;
% ;; (conventionalShortName "Po" Polonium)
% )

fof( miloA4412, axiom,
	p__atomicNumber(c__Polonium,c__84)
).


fof( miloA4413, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Polonium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__210,c__Amu))
			)
		)
	)
).



% ($documentation Polonium EnglishLanguage "Rare radioactive metallic element, belongs to 
% group 16 of the periodic table.  Over 30 known isotopes exist, the most of 
% all elements.  Po-209 has a half-life of 103 years.  Possible uses in 
% heating spacecraft.  Discovered by Marie Curie in 1898 in a sample of 
% pitchblende.") 


fof( miloA4414, axiom,
	p__d__subclass(c__Astatine,c__ElementalSubstance)
).


% ($comment 
% ;; (names Astatine "Astatine")
% ;;
% ;; (conventionalShortName "At" Astatine)
% )

fof( miloA4415, axiom,
	p__atomicNumber(c__Astatine,c__85)
).


fof( miloA4416, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Astatine)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__210,c__Amu))
			)
		)
	)
).



% ($documentation Astatine EnglishLanguage "Radioactive halogen element.  Occurs naturally 
% from uranium and thorium decay.  At least 20 known isotopes.  At-210, the 
% most stable, has a half-life of 8.3 hours.  Synthesized by nuclear 
% bombardment in 1940 by D.R.  Corson, K.R.  MacKenzie and E.  Segre at the 
% University of California.") 


fof( miloA4417, axiom,
	p__d__subclass(c__Radon,c__ElementalSubstance)
).


% ($comment 
% ;; (names Radon "Radon")
% ;;
% ;; (conventionalShortName "Rn" Radon)
% )

fof( miloA4418, axiom,
	p__atomicNumber(c__Radon,c__86)
).


fof( miloA4419, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Radon)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__222,c__Amu))
			)
		)
	)
).



% ($documentation Radon EnglishLanguage "Colorless radioactive gaseous element, belongs to 
% the noble gases.  Of the twenty known isotopes, the most stable is Rn-222 
% with a half-life of 3.8 days.  Formed by the radioactive decay of 
% {Radium}-226.  Radon itself decays into {polonium}.  Used in radiotherapy.  
% As a noble gas, it is effectively inert, though radon fluoride has been 
% synthesized.  First isolated in 1908 by Ramsey and Gray.") 


fof( miloA4420, axiom,
	p__d__subclass(c__Francium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Francium "Francium")
% ;;
% ;; (conventionalShortName "Fr" Francium)
% )

fof( miloA4421, axiom,
	p__atomicNumber(c__Francium,c__87)
).


fof( miloA4422, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Francium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__223,c__Amu))
			)
		)
	)
).



% ($documentation Francium EnglishLanguage "Radioactive element, belongs to group 1 of the 
% periodic table.  Found in uranium and thorium ores.  The 22 known isotopes 
% are all radioactive, with the most stable being Fr-223.  Its existence was 
% confirmed in 1939 by Marguerite Perey.") 


fof( miloA4423, axiom,
	p__d__subclass(c__Radium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Radium "Radium")
% ;;
% ;; (conventionalShortName "Ra" Radium)
% )

fof( miloA4424, axiom,
	p__atomicNumber(c__Radium,c__88)
).


fof( miloA4425, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Radium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__226,c__Amu))
			)
		)
	)
).



% ($documentation Radium EnglishLanguage "Radioactive metallic transuranic element, belongs 
% to group 2 of the periodic table.  Most stable isotope, Ra-226 has a 
% half-life of 1602 years, which decays into radon.  Isolated from 
% pitchblende in 1898 Marie and Pierre Curie.") 


fof( miloA4426, axiom,
	p__d__subclass(c__Actinium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Actinium "Actinium")
% ;;
% ;; (conventionalShortName "Ac" Actinium)
% )

fof( miloA4427, axiom,
	p__atomicNumber(c__Actinium,c__89)
).


fof( miloA4428, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Actinium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__227,c__Amu))
			)
		)
	)
).



% ($documentation Actinium EnglishLanguage "Silvery radioactive metallic element, belongs to 
% group 3 of the periodic table.  The most stable isotope, Ac-227, has a 
% half-life of 217 years.  Ac-228 (half-life of 6.13 hours) also occurs in 
% nature.  There are 22 other artificial isotopes, all radioactive and 
% having very short half-lives.  Chemistry similar to lanthanum.  Used as a 
% source of alpha particles.  Discovered by A.  Debierne in 1899.") 


fof( miloA4429, axiom,
	p__d__subclass(c__Thorium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Thorium "Thorium")
% ;;
% ;; (conventionalShortName "Th" Thorium)
% )

fof( miloA4430, axiom,
	p__atomicNumber(c__Thorium,c__90)
).


% ($comment 
% ;; (=>
% ;;   (and
% ;;     ($instance ?ATOM Thorium)
% ;;     ($instance ?ATOM Atom))
% ;;   (measure ?ATOM (MeasureFn 232.038 Amu)))
% )


% ($documentation Thorium EnglishLanguage "Grey radioactive metallic element.  Belongs to 
% actinoids.  Found in monazite sand in Brazil, India and the US.  
% Thorium-232 has a half-life of 1.39x10^10 years.  Can be used as a nuclear 
% fuel for breeder reactors.  Thorium-232 captures slow {neutron}s and 
% breeds uranium-233.  Discovered by Jons J.  Berzelius in 1829.") 


fof( miloA4431, axiom,
	p__d__subclass(c__Protactinium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Protactinium "Protactinium")
% ;;
% ;; (conventionalShortName "Pa" Protactinium)
% )

fof( miloA4432, axiom,
	p__atomicNumber(c__Protactinium,c__91)
).


fof( miloA4433, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Protactinium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__231,c__Amu))
			)
		)
	)
).



% ($documentation Protactinium EnglishLanguage "Radioactive metallic element, belongs to the 
% actinoids.  The most stable isotope, Pa-231 has a half-life of 2.43*10^4 
% years.  At least 10 other radioactive isotopes are known.  No practical 
% applications are known.  Discovered in 1917 by Lise Meitner and Otto 
% Hahn.") 


fof( miloA4434, axiom,
	p__d__subclass(c__Uranium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Uranium "Uranium")
% ;;
% ;; (conventionalShortName "U" Uranium)
% )

fof( miloA4435, axiom,
	p__atomicNumber(c__Uranium,c__92)
).


fof( miloA4436, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Uranium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__231,c__Amu))
			)
		)
	)
).



% ($documentation Uranium EnglishLanguage "White radioactive metallic element belonging to 
% the actinoids.  Three natural isotopes, U-238, U-235 and U-234.  
% Uranium-235 is used as the fuel for nuclear reactors and weapons.  
% Discovered by Martin H.  Klaproth in 1789.") 


fof( miloA4437, axiom,
	p__d__subclass(c__Neptunium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Neptunium "Neptunium")
% ;;
% ;; (conventionalShortName "Np" Neptunium)
% )

fof( miloA4438, axiom,
	p__atomicNumber(c__Neptunium,c__93)
).


fof( miloA4439, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Neptunium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__237,c__Amu))
			)
		)
	)
).



% ($documentation Neptunium EnglishLanguage "Radioactive metallic transuranic element, 
% belongs to the actinoids.  Np-237, the most stable isotope, has a 
% half-life of 2.2*10^6 years and is a by product of nuclear reactors.  The 
% other known isotopes have mass numbers 229 through 236, and 238 through 
% 241.  Np-236 has a half-life of 5*10^3 years.  First produced by Edwin M.  
% McMillan and P.H.  Abelson in 1940.") 


fof( miloA4440, axiom,
	p__d__subclass(c__Plutonium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Plutonium "Plutonium")
% ;;
% ;; (conventionalShortName "Pu" Plutonium)
% )

fof( miloA4441, axiom,
	p__atomicNumber(c__Plutonium,c__94)
).


fof( miloA4442, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Plutonium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__242,c__Amu))
			)
		)
	)
).



% ($documentation Plutonium EnglishLanguage "Dense silvery radioactive metallic transuranic 
% element, belongs to the actinoids.  Pu-244 is the most stable isotope with 
% a half-life of 7.6*10^7 years.  Thirteen isotopes are known.  Pu-239 is 
% the most important, it undergoes nuclear fission with slow neutrons and is 
% hence important to nuclear weapons and reactors.  Plutonium production is 
% monitored down to the gram to prevent military misuse.  First produced by 
% Gleen T.  Seaborg, Edwin M.  McMillan, J.W.  Kennedy and A.C.  Wahl in 
% 1940.") 


fof( miloA4443, axiom,
	p__d__subclass(c__Americium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Americium "Americium")
% ;;
% ;; (conventionalShortName "Am" Americium)
% )

fof( miloA4444, axiom,
	p__atomicNumber(c__Americium,c__95)
).


fof( miloA4445, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Americium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__243,c__Amu))
			)
		)
	)
).



% ($documentation Americium EnglishLanguage "Radioactive metallic transuranic element, 
% belongs to the actinoids.  Ten known isotopes.  Am-243 is the most stable 
% isotope, with a half-life of 7.95*10^3 years.  Discovered by Glenn T.  
% Seaborg and associates in 1945, it was obtained by bombarding 
% {uranium}-238 with alpha particles.") 


fof( miloA4446, axiom,
	p__d__subclass(c__Curium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Curium "Curium")
% ;;
% ;; (conventionalShortName "Cm" Curium)
% )

fof( miloA4447, axiom,
	p__atomicNumber(c__Curium,c__96)
).


fof( miloA4448, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Curium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__247,c__Amu))
			)
		)
	)
).



% ($documentation Curium EnglishLanguage "Radioactive metallic transuranic element.  Belongs 
% to actinoid series.  Nine known isotopes, Cm-247 has a half-life of 
% 1.64*10^7 years.  First identified by Glenn T.  Seaborg and associates in 
% 1944, first produced by L.B.  Werner and I.  Perlman in 1947 by bombarding 
% americium-241 with {neutron}s.  Named for Marie Curie.") 


fof( miloA4449, axiom,
	p__d__subclass(c__Berkelium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Berkelium "Berkelium")
% ;;
% ;; (conventionalShortName "Bk" Berkelium)
% )

fof( miloA4450, axiom,
	p__atomicNumber(c__Berkelium,c__97)
).


fof( miloA4451, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Berkelium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__247,c__Amu))
			)
		)
	)
).



% ($documentation Berkelium EnglishLanguage "Radioactive metallic transuranic element.  
% Belongs to actinoid series.  Eight known isotopes, the most common Bk-247, 
% has a half-life of 1.4*10^3 years.  First produced by Glenn T.  Seaborg 
% and associates in 1949 by bombarding americium-241 with alpha 
% particles.") 


fof( miloA4452, axiom,
	p__d__subclass(c__Californium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Californium "Californium")
% ;;
% ;; (conventionalShortName "Cf" Californium)
% )

fof( miloA4453, axiom,
	p__atomicNumber(c__Californium,c__98)
).


fof( miloA4454, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Californium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__249,c__Amu))
			)
		)
	)
).



% ($documentation Californium EnglishLanguage "Radioactive metallic transuranic element.  
% Belongs to actinoid series.  Cf-251 has a half life of about 700 years.  
% Nine isotopes are known.  Cf-252 is an intense {neutron} source, which 
% makes it an intense {neutron} source and gives it a use in {neutron} 
% activation analysis and a possible use as a radiation source in medicine.  
% First produced by Glenn T.  Seaborg and associates in 1950.") 


fof( miloA4455, axiom,
	p__d__subclass(c__Einsteinium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Einsteinium "Einsteinium")
% ;;
% ;; (conventionalShortName "Es" Einsteinium)
% )

fof( miloA4456, axiom,
	p__atomicNumber(c__Einsteinium,c__99)
).


fof( miloA4457, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Einsteinium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__254,c__Amu))
			)
		)
	)
).



% ($documentation Einsteinium EnglishLanguage "Appearance is unknown, however it is most 
% probably metallic and silver or gray in color.  Radioactive metallic 
% transuranic element belonging to the actinoids.  Es-254 has the longest 
% half-life of the eleven known isotopes at 270 days.  First identified by 
% Albert Ghiorso and associates in the debris of the 1952 hydrogen bomb 
% explosion.  In 1961 the first microgram quantities of Es-232 were 
% separated.  While einsteinium never exists naturally, if a sufficient 
% amount was assembled, it would pose a radiation hazard.") 


fof( miloA4458, axiom,
	p__d__subclass(c__Fermium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Fermium "Fermium")
% ;;
% ;; (conventionalShortName "Fm" Fermium)
% )

fof( miloA4459, axiom,
	p__atomicNumber(c__Fermium,c__100)
).


fof( miloA4460, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Fermium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__253,c__Amu))
			)
		)
	)
).



% ($documentation Fermium EnglishLanguage "Radioactive metallic transuranic element, belongs 
% to the actinoids.  Ten known isotopes, most stable is Fm-257 with a 
% half-life of 10 days.  First identified by Albert Ghiorso and associates 
% in the debris of the first hydrogen-bomb explosion in 1952.") 


fof( miloA4461, axiom,
	p__d__subclass(c__Mendelevium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Mendelevium "Mendelevium")
% ;;
% ;; (conventionalShortName "Md" Mendelevium)
% )

fof( miloA4462, axiom,
	p__atomicNumber(c__Mendelevium,c__101)
).


fof( miloA4463, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Mendelevium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__256,c__Amu))
			)
		)
	)
).



% ($documentation Mendelevium EnglishLanguage "Radioactive metallic transuranic element.  
% Belongs to the actinoid series.  Only known isotope, Md-256 has a 
% half-life of 1.3 hours.  First identified by Glenn T.  Seaborg, Albert 
% Ghiorso and associates in 1955.  Alternative name {unnilunium} has been 
% proposed.  Named after the 'inventor' of the periodic table, Dmitri 
% Mendeleev.") 


fof( miloA4464, axiom,
	p__d__subclass(c__Nobelium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Nobelium "Nobelium")
% ;;
% ;; (conventionalShortName "No" Nobelium)
% )

fof( miloA4465, axiom,
	p__atomicNumber(c__Nobelium,c__102)
).


fof( miloA4466, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Nobelium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__254,c__Amu))
			)
		)
	)
).



% ($documentation Nobelium EnglishLanguage "Radioactive metallic transuranic element, belongs 
% to the actinoids.  Seven known isotopes exist, the most stable being 
% No-254 with a half-life of 255 seconds.  First identified with certainty 
% by Albert Ghiorso and Glenn T.  Seaborg in 1966.  {Unnilbium} has been 
% proposed as an alternative name.") 


fof( miloA4467, axiom,
	p__d__subclass(c__Lawrencium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Lawrencium "Lawrencium")
% ;;
% ;; (conventionalShortName "Lr" Lawrencium)
% )

fof( miloA4468, axiom,
	p__atomicNumber(c__Lawrencium,c__103)
).


fof( miloA4469, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Lawrencium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__262,c__Amu))
			)
		)
	)
).



% ($documentation Lawrencium EnglishLanguage "Appearance unknown, however it is most likely 
% silvery-white or grey and metallic.  Lawrencium is a synthetic rare-earth 
% metal.  There are eight known radioisotopes, the most stable being Lr-262 
% with a half-life of 3.6 hours.  Due to the short half-life of lawrencium, 
% and its radioactivity, there are no known uses for it.  Identified by 
% Albert Ghiorso in 1961 at Berkeley.  It was produced by bombarding 
% californium with boron ions.  The name is temporary {IUPAC} nomenclature, 
% the origin of the name comes from Ernest O.  Lawrence, the inventor of the 
% cyclotron.  If sufficient amounts of lawrencium were produced, it would 
% pose a radiation hazard.") 


fof( miloA4470, axiom,
	p__d__subclass(c__Unnilquadium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Unnilquadium "Unnilquadium")
% ;;
% ;; (conventionalShortName "Unq" Unnilquadium)
% )

fof( miloA4471, axiom,
	p__atomicNumber(c__Unnilquadium,c__104)
).


fof( miloA4472, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Unnilquadium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__261,c__Amu))
			)
		)
	)
).



% ($documentation Unnilquadium EnglishLanguage "Radioactive transactinide element.  Expected 
% to have similar chemical properties to those displayed by hafnium.  Rf-260 
% was discovered by the Joint Nuclear Research Institute at Dubna (U.S.S.R.) 
% in 1964.  Researchers at Berkeley discovered Unq-257 and Unq-258 in 
% 1964.") 


fof( miloA4473, axiom,
	p__d__subclass(c__Unnilpentium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Unnilpentium "Unnilpentium")
% ;;
% ;; (conventionalShortName "Unp" Unnilpentium)
% )

fof( miloA4474, axiom,
	p__atomicNumber(c__Unnilpentium,c__105)
).


fof( miloA4475, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Unnilpentium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__262,c__Amu))
			)
		)
	)
).



% ($documentation Unnilpentium EnglishLanguage "Radioactive transactinide element.  Half-life 
% of 1.6s.  Discovered in 1970 by Berkeley researchers.  So far, seven 
% isotopes have been discovered.") 


fof( miloA4476, axiom,
	p__d__subclass(c__Unnilhexium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Unnilhexium "Unnilhexium")
% )

fof( miloA4477, axiom,
	p__atomicNumber(c__Unnilhexium,c__106)
).


fof( miloA4478, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Unnilhexium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__263,c__Amu))
			)
		)
	)
).



% ($documentation Unnilhexium EnglishLanguage "Half-life of 0.9 +/- 0.2 s.  Discovered by the 
% Joint Institute for Nuclear Research at Dubna (U.S.S.R.) in June of 1974.  
% Its existence was confirmed by the Lawrence Berkeley Laboratory and 
% Livermore National Laboratory in September of 1974.") 


fof( miloA4479, axiom,
	p__d__subclass(c__Unnilseptium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Unnilseptium "Unnilseptium")
% )

fof( miloA4480, axiom,
	p__atomicNumber(c__Unnilseptium,c__107)
).


fof( miloA4481, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Unnilseptium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__262,c__Amu))
			)
		)
	)
).



% ($documentation Unnilseptium EnglishLanguage "Radioactive transition metal.  Half-life of 
% approximately 1/500 s.  Discovered by the Joint Institute for Nuclear 
% Research at Dubna (U.S.S.R.) in 1976.  Confirmed by West German physicists 
% at the Heavy Ion Research Laboratory at Darmstadt.") 


fof( miloA4482, axiom,
	p__d__subclass(c__Unniloctium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Unniloctium "Unniloctium")
% ;;
% ;; (conventionalShortName "Uno" Unniloctium)
% )

fof( miloA4483, axiom,
	p__atomicNumber(c__Unniloctium,c__108)
).


fof( miloA4484, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Unniloctium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__265,c__Amu))
			)
		)
	)
).



% ($documentation Unniloctium EnglishLanguage "Radioactive transition metal.")


fof( miloA4485, axiom,
	p__d__subclass(c__Meitnerium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Meitnerium "Meitnerium")
% ;;
% ;; (conventionalShortName "Mt" Meitnerium)
% )

fof( miloA4486, axiom,
	p__atomicNumber(c__Meitnerium,c__109)
).


fof( miloA4487, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Meitnerium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__266,c__Amu))
			)
		)
	)
).



% ($documentation Meitnerium EnglishLanguage "Half-life of approximately 5ms.  The creation 
% of this element demonstrated that fusion techniques could indeed be used 
% to make new, heavy nuclei.  Made and identified by physicists of the Heavy 
% Ion Research Laboratory, Darmstadt, West Germany in 1982.  Named in honor 
% of Lise Meitner the Austrian physicist.") 


fof( miloA4488, axiom,
	p__d__subclass(c__Unnildecium,c__ElementalSubstance)
).


% ($comment 
% ;; (names Unnildecium "Unnildecium")
% ;;
% ;; (conventionalShortName "Unn" Unnildecium)
% )

fof( miloA4489, axiom,
	p__atomicNumber(c__Unnildecium,c__110)
).


fof( miloA4490, axiom,
	(![ATOM]: 
		(
			(
				(
					(
						p__d__instance(ATOM,c__Unnildecium)
					)
				 &
					(
						p__d__instance(ATOM,c__Atom)
					)
				)
			)
			=>
			(
				p__measure(ATOM,f__MeasureFn2(c__272,c__Amu))
			)
		)
	)
).



% ($documentation Unnildecium EnglishLanguage "Half-life of approximately 10ms.  Reported in 
% 1994 by German researchers at Darmstadt, Germany.") 


% ($comment 
% ;; (meltingPoint Hydrogen (MeasureFn 14.01 KelvinDegree))
% ;;
% ;; (boilingPoint Hydrogen (MeasureFn 20.28 KelvinDegree))
% ;;
% ;; (meltingPoint Helium (MeasureFn 0.95 KelvinDegree))
% ;;
% ;; (boilingPoint Helium (MeasureFn 4.216 KelvinDegree))
% ;;
% ;; (meltingPoint Lithium (MeasureFn 453.69 KelvinDegree))
% )

% 	(boilingPoint Lithium (MeasureFn 1590 KelvinDegree))

% 	(meltingPoint Beryllium (MeasureFn 1551 KelvinDegree))

% 	(boilingPoint Beryllium (MeasureFn 3243 KelvinDegree))

% 	(meltingPoint Boron (MeasureFn 2573 KelvinDegree))

% 	(boilingPoint Boron (MeasureFn 2823 KelvinDegree))

% 	(meltingPoint Carbon (MeasureFn 3823 KelvinDegree))

% 	(boilingPoint Carbon (MeasureFn 5100 KelvinDegree))

% ($comment 
% ;; (meltingPoint Nitrogen (MeasureFn 63.29 KelvinDegree))
% ;;
% ;; (boilingPoint Nitrogen (MeasureFn 77.4 KelvinDegree))
% ;;
% ;; (meltingPoint Oxygen (MeasureFn 54.75 KelvinDegree))
% ;;
% ;; (boilingPoint Oxygen (MeasureFn 90.188 KelvinDegree))
% ;;
% ;; (meltingPoint Fluorine (MeasureFn 53.53 KelvinDegree))
% ;;
% ;; (boilingPoint Fluorine (MeasureFn 85.01 KelvinDegree))
% ;;
% ;; (meltingPoint Neon (MeasureFn 24.48 KelvinDegree))
% ;;
% ;; (boilingPoint Neon (MeasureFn 27.1 KelvinDegree))
% ;;
% ;; (meltingPoint Sodium (MeasureFn 370.95 KelvinDegree))
% )

% 	(boilingPoint Sodium (MeasureFn 1165 KelvinDegree))

% ($comment 
% ;; (meltingPoint Magnesium (MeasureFn 921.95 KelvinDegree))
% )

% 	(boilingPoint Magnesium (MeasureFn 1380 KelvinDegree))

% ($comment 
% ;; (meltingPoint Aluminum (MeasureFn 933.52 KelvinDegree))
% )

% 	(boilingPoint Aluminum (MeasureFn 2740 KelvinDegree))

% 	(meltingPoint Silicon (MeasureFn 1683 KelvinDegree))

% 	(boilingPoint Silicon (MeasureFn 2628 KelvinDegree))

% ($comment 
% ;; (meltingPoint Phosphorus (MeasureFn 317.3 KelvinDegree))
% )

% 	(boilingPoint Phosphorus (MeasureFn 553 KelvinDegree))

% 	(meltingPoint Sulphur (MeasureFn 386 KelvinDegree))

% ($comment 
% ;; (boilingPoint Sulphur (MeasureFn 717.824 KelvinDegree))
% ;;
% ;; (meltingPoint Chlorine (MeasureFn 172.17 KelvinDegree))
% ;;
% ;; (boilingPoint Chlorine (MeasureFn 238.55 KelvinDegree))
% ;;
% ;; (meltingPoint Argon (MeasureFn 83.78 KelvinDegree))
% ;;
% ;; (boilingPoint Argon (MeasureFn 87.29 KelvinDegree))
% ;;
% ;; (meltingPoint Potassium (MeasureFn 336.8 KelvinDegree))
% )

% 	(boilingPoint Potassium (MeasureFn 1047 KelvinDegree))

% 	(meltingPoint Calcium (MeasureFn 1112 KelvinDegree))

% 	(boilingPoint Calcium (MeasureFn 1760 KelvinDegree))

% 	(meltingPoint Scandium (MeasureFn 1812 KelvinDegree))

% 	(boilingPoint Scandium (MeasureFn 3105 KelvinDegree))

% 	(meltingPoint Titanium (MeasureFn 1933 KelvinDegree))

% 	(boilingPoint Titanium (MeasureFn 3533 KelvinDegree))

% 	(meltingPoint Vanadium (MeasureFn 2163 KelvinDegree))

% 	(boilingPoint Vanadium (MeasureFn 3653 KelvinDegree))

% 	(meltingPoint Chromium (MeasureFn 2130 KelvinDegree))

% 	(boilingPoint Chromium (MeasureFn 2755 KelvinDegree))

% 	(meltingPoint Manganese (MeasureFn 1517 KelvinDegree))

% 	(boilingPoint Manganese (MeasureFn 2370 KelvinDegree))

% 	(meltingPoint Iron (MeasureFn 1808 KelvinDegree))

% 	(boilingPoint Iron (MeasureFn 3023 KelvinDegree))

% 	(meltingPoint Cobalt (MeasureFn 1768 KelvinDegree))

% 	(boilingPoint Cobalt (MeasureFn 3143 KelvinDegree))

% 	(meltingPoint Nickel (MeasureFn 1726 KelvinDegree))

% 	(boilingPoint Nickel (MeasureFn 3005 KelvinDegree))

% ($comment 
% ;; (meltingPoint Copper (MeasureFn 1356.6 KelvinDegree))
% )

% 	(boilingPoint Copper (MeasureFn 2868 KelvinDegree))

% ($comment 
% ;; (meltingPoint Zinc (MeasureFn 692.73 KelvinDegree))
% )

% 	(boilingPoint Zinc (MeasureFn 1180 KelvinDegree))

% ($comment 
% ;; (meltingPoint Gallium (MeasureFn 302.93 KelvinDegree))
% )

% 	(boilingPoint Gallium (MeasureFn 2676 KelvinDegree))

% ($comment 
% ;; (meltingPoint Germanium (MeasureFn 1210.55 KelvinDegree))
% )

% 	(boilingPoint Germanium (MeasureFn 3103 KelvinDegree))

% 	(meltingPoint Arsenic (MeasureFn 886 KelvinDegree))

% 	(boilingPoint Arsenic (MeasureFn 886 KelvinDegree))

% 	(meltingPoint Selenium (MeasureFn 490 KelvinDegree))

% ($comment 
% ;; (boilingPoint Selenium (MeasureFn 958.1 KelvinDegree))
% ;;
% ;; (meltingPoint Bromine (MeasureFn 265.9 KelvinDegree))
% ;;
% ;; (boilingPoint Bromine (MeasureFn 331.93 KelvinDegree))
% ;;
% ;; (meltingPoint Krypton (MeasureFn 116.55 KelvinDegree))
% ;;
% ;; (boilingPoint Krypton (MeasureFn 120.85 KelvinDegree))
% ;;
% ;; (meltingPoint Rubidium (MeasureFn 312.2 KelvinDegree))
% )

% 	(boilingPoint Rubidium (MeasureFn 961 KelvinDegree))

% 	(meltingPoint Strontium (MeasureFn 1042 KelvinDegree))

% 	(boilingPoint Strontium (MeasureFn 1657 KelvinDegree))

% 	(meltingPoint Yttrium (MeasureFn 1796 KelvinDegree))

% 	(boilingPoint Yttrium (MeasureFn 3610 KelvinDegree))

% 	(meltingPoint Zirconium (MeasureFn 2125 KelvinDegree))

% 	(boilingPoint Zirconium (MeasureFn 4650 KelvinDegree))

% 	(meltingPoint Niobium (MeasureFn 2741 KelvinDegree))

% 	(boilingPoint Niobium (MeasureFn 5200 KelvinDegree))

% 	(meltingPoint Molybdenum (MeasureFn 2890 KelvinDegree))

% 	(boilingPoint Molybdenum (MeasureFn 5833 KelvinDegree))

% 	(meltingPoint Technetium (MeasureFn 2445 KelvinDegree))

% 	(boilingPoint Technetium (MeasureFn 5303 KelvinDegree))

% 	(meltingPoint Ruthenium (MeasureFn 2583 KelvinDegree))

% 	(boilingPoint Ruthenium (MeasureFn 4173 KelvinDegree))

% 	(meltingPoint Rhodium (MeasureFn 2239 KelvinDegree))

% 	(boilingPoint Rhodium (MeasureFn 4000 KelvinDegree))

% 	(meltingPoint Palladium (MeasureFn 1825 KelvinDegree))

% 	(boilingPoint Palladium (MeasureFn 3413 KelvinDegree))

% ($comment 
% ;; (meltingPoint Silver (MeasureFn 1235.08 KelvinDegree))
% )

% 	(boilingPoint Silver (MeasureFn 2485 KelvinDegree))

% ($comment 
% ;; (meltingPoint Cadmium (MeasureFn 594.1 KelvinDegree))
% )

% 	(boilingPoint Cadmium (MeasureFn 1038 KelvinDegree))

% ($comment 
% ;; (meltingPoint Indium (MeasureFn 429.32 KelvinDegree))
% )

% 	(boilingPoint Indium (MeasureFn 2353 KelvinDegree))

% ($comment 
% ;; (meltingPoint Tin (MeasureFn 505.118 KelvinDegree))
% )

% 	(boilingPoint Tin (MeasureFn 2543 KelvinDegree))

% ($comment 
% ;; (meltingPoint Antimony (MeasureFn 903.89 KelvinDegree))
% )

% 	(boilingPoint Antimony (MeasureFn 2023 KelvinDegree))

% ($comment 
% ;; (meltingPoint Tellurium (MeasureFn 722.7 KelvinDegree))
% )

% 	(boilingPoint Tellurium (MeasureFn 1263 KelvinDegree))

% ($comment 
% ;; (meltingPoint Iodine (MeasureFn 386.65 KelvinDegree))
% ;;
% ;; (boilingPoint Iodine (MeasureFn 457.55 KelvinDegree))
% ;;
% ;; (meltingPoint Xenon (MeasureFn 161.3 KelvinDegree))
% ;;
% ;; (boilingPoint Xenon (MeasureFn 166.1 KelvinDegree))
% ;;
% ;; (meltingPoint Caesium (MeasureFn 301.55 KelvinDegree))
% )

% 	(boilingPoint Caesium (MeasureFn 963 KelvinDegree))

% 	(meltingPoint Barium (MeasureFn 998 KelvinDegree))

% 	(boilingPoint Barium (MeasureFn 1913 KelvinDegree))

% 	(meltingPoint Lanthanum (MeasureFn 1193 KelvinDegree))

% 	(boilingPoint Lanthanum (MeasureFn 3727 KelvinDegree))

% 	(meltingPoint Cerium (MeasureFn 1071 KelvinDegree))

% 	(boilingPoint Cerium (MeasureFn 3530 KelvinDegree))

% 	(meltingPoint Praseodymium (MeasureFn 1204 KelvinDegree))

% 	(boilingPoint Praseodymium (MeasureFn 3485 KelvinDegree))

% 	(meltingPoint Neodymium (MeasureFn 1283 KelvinDegree))

% 	(boilingPoint Neodymium (MeasureFn 3400 KelvinDegree))

% 	(meltingPoint Promethium (MeasureFn 1353 KelvinDegree))

% 	(boilingPoint Promethium (MeasureFn 3000 KelvinDegree))

% 	(meltingPoint Samarium (MeasureFn 1345 KelvinDegree))

% 	(boilingPoint Samarium (MeasureFn 2051 KelvinDegree))

% 	(meltingPoint Europium (MeasureFn 1095 KelvinDegree))

% 	(boilingPoint Europium (MeasureFn 1870 KelvinDegree))

% 	(meltingPoint Gadolinium (MeasureFn 1584 KelvinDegree))

% 	(boilingPoint Gadolinium (MeasureFn 3506 KelvinDegree))

% 	(meltingPoint Terbium (MeasureFn 1633 KelvinDegree))

% 	(boilingPoint Terbium (MeasureFn 3314 KelvinDegree))

% 	(meltingPoint Dysprosium (MeasureFn 1682 KelvinDegree))

% 	(boilingPoint Dysprosium (MeasureFn 2608 KelvinDegree))

% 	(meltingPoint Holmium (MeasureFn 1743 KelvinDegree))

% 	(boilingPoint Holmium (MeasureFn 2993 KelvinDegree))

% 	(meltingPoint Erbium (MeasureFn 1795 KelvinDegree))

% 	(boilingPoint Erbium (MeasureFn 2783 KelvinDegree))

% 	(meltingPoint Thulium (MeasureFn 1818 KelvinDegree))

% 	(boilingPoint Thulium (MeasureFn 2000 KelvinDegree))

% 	(meltingPoint Ytterbium (MeasureFn 1097 KelvinDegree))

% 	(boilingPoint Ytterbium (MeasureFn 1466 KelvinDegree))

% 	(meltingPoint Lutetium (MeasureFn 1929 KelvinDegree))

% 	(boilingPoint Lutetium (MeasureFn 3588 KelvinDegree))

% 	(meltingPoint Hafnium (MeasureFn 2423 KelvinDegree))

% 	(boilingPoint Hafnium (MeasureFn 5673 KelvinDegree))

% 	(meltingPoint Tantalum (MeasureFn 3269 KelvinDegree))

% 	(boilingPoint Tantalum (MeasureFn 5698 KelvinDegree))

% 	(meltingPoint Tungsten (MeasureFn 3680 KelvinDegree))

% 	(boilingPoint Tungsten (MeasureFn 6200 KelvinDegree))

% 	(meltingPoint Rhenium (MeasureFn 3453 KelvinDegree))

% 	(boilingPoint Rhenium (MeasureFn 5900 KelvinDegree))

% 	(meltingPoint Osmium (MeasureFn 3318 KelvinDegree))

% 	(boilingPoint Osmium (MeasureFn 5300 KelvinDegree))

% 	(meltingPoint Iridium (MeasureFn 2683 KelvinDegree))

% 	(boilingPoint Iridium (MeasureFn 4403 KelvinDegree))

% 	(meltingPoint Platinum (MeasureFn 2045 KelvinDegree))

% 	(boilingPoint Platinum (MeasureFn 4100 KelvinDegree))

% ($comment 
% ;; (meltingPoint Gold (MeasureFn 1337.58 KelvinDegree))
% )

% 	(boilingPoint Gold (MeasureFn 3213 KelvinDegree))

% ($comment 
% ;; (meltingPoint Mercury (MeasureFn 234.28 KelvinDegree))
% ;;
% ;; (boilingPoint Mercury (MeasureFn 629.73 KelvinDegree))
% ;;
% ;; (meltingPoint Thallium (MeasureFn 576.7 KelvinDegree))
% )

% 	(boilingPoint Thallium (MeasureFn 1730 KelvinDegree))

% ($comment 
% ;; (meltingPoint Lead (MeasureFn 600.65 KelvinDegree))
% )

% 	(boilingPoint Lead (MeasureFn 2013 KelvinDegree))

% ($comment 
% ;; (meltingPoint Bismuth (MeasureFn 544.5 KelvinDegree))
% )

% 	(boilingPoint Bismuth (MeasureFn 1833 KelvinDegree))

% 	(meltingPoint Polonium (MeasureFn 527 KelvinDegree))

% 	(boilingPoint Polonium (MeasureFn 1235 KelvinDegree))

% 	(meltingPoint Astatine (MeasureFn 575 KelvinDegree))

% 	(boilingPoint Astatine (MeasureFn 610 KelvinDegree))

% 	(meltingPoint Radon (MeasureFn 202 KelvinDegree))

% ($comment 
% ;; (boilingPoint Radon (MeasureFn 211.4 KelvinDegree))
% )

% 	(meltingPoint Francium (MeasureFn 300 KelvinDegree))

% 	(boilingPoint Francium (MeasureFn 950 KelvinDegree))

% 	(meltingPoint Radium (MeasureFn 973 KelvinDegree))

% 	(boilingPoint Radium (MeasureFn 1413 KelvinDegree))

% 	(meltingPoint Actinium (MeasureFn 1320 KelvinDegree))

% 	(boilingPoint Actinium (MeasureFn 3470 KelvinDegree))

% 	(meltingPoint Thorium (MeasureFn 2023 KelvinDegree))

% 	(boilingPoint Thorium (MeasureFn 5060 KelvinDegree))

% 	(meltingPoint Protactinium (MeasureFn 1827 KelvinDegree))

% 	(boilingPoint Protactinium (MeasureFn 4300 KelvinDegree))

% ($comment 
% ;; (meltingPoint Uranium (MeasureFn 1405.5 KelvinDegree))
% )

% 	(boilingPoint Uranium (MeasureFn 4091 KelvinDegree))

% 	(meltingPoint Neptunium (MeasureFn 913 KelvinDegree))

% 	(boilingPoint Neptunium (MeasureFn 4175 KelvinDegree))

% 	(meltingPoint Plutonium (MeasureFn 914 KelvinDegree))

% 	(boilingPoint Plutonium (MeasureFn 3600 KelvinDegree))

% 	(meltingPoint Americium (MeasureFn 1267 KelvinDegree))

% 	(boilingPoint Americium (MeasureFn 2880 KelvinDegree))

% 	(meltingPoint Curium (MeasureFn 1613 KelvinDegree))

% 	(meltingPoint Berkelium (MeasureFn 1259 KelvinDegree))

% 	(meltingPoint Californium (MeasureFn 1173 KelvinDegree))

% 	(meltingPoint Einsteinium (MeasureFn 1133 KelvinDegree))

fof( miloA4633, axiom,
	p__d__subclass(c__VehicleDoor,c__Device)
).



% ($documentation VehicleDoor EnglishLanguage "An equivalent to a &%Door but in
% a &%Vehicle, rather than a &%StationaryObject.")


% 	(relatedInternalConcept Door VehicleDoor)

% 	(forall (?O ?VD)
% 		(=> 
% 			($instance ?VD VehicleDoor)
% 			(hasPurpose ?VD (exists ([|] ?O []) (and ([|] ($instance ?O Opening) ([|] (patient ?O ?VD) [])))))
% 		)
% 	)

% 	(forall (?C ?VD)
% 		(=> 
% 			($instance ?VD VehicleDoor)
% 			(hasPurpose ?VD (exists ([|] ?C []) (and ([|] ($instance ?C Closing) ([|] (patient ?C ?VD) [])))))
% 		)
% 	)

% 	(forall (?VD)
% 		(=> 
% 			(and 
% 				($instance ?VD VehicleDoor)
% 				(attribute ?VD DeviceNormal)
% 			)
% 			(and 
% 				(capability patient Opening ?VD)
% 				(capability patient Closing ?VD)
% 			)
% 		)
% 	)

% 	(typicalPart VehicleDoor Automobile)

fof( miloA4639, axiom,
	p__d__instance(c__DeviceNormal,c__InternalAttribute)
).



% ($documentation DeviceNormal EnglishLanguage "An &%Attribute stating that
% the &%Device has not be subject to &%Damaging, at least not without a 
% &%Repairing, and can function as to its intended &%hasPurpose.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of attribute is Object, which is subclass of Physical, whereas the first argument of earlier is TimeInterval, which is subclass of Abstract (Physical and Abstract are disjoint)
% ;;
% ;;(=>
% ;;  (attribute ?D DeviceNormal)
% ;;  (not
% ;;    (exists (?DAM)
% ;;      (and
% ;;        ($instance ?DAM Damaging)
% ;;        (patient ?DAM ?D)
% ;;        (not
% ;;          (exists (?R)
% ;;            (and 
% ;;              ($instance ?R Repairing)
% ;;              (patient ?R ?D)
% ;;              (earlier ?D ?R))))))))
% )

fof( miloA4640, axiom,
	(![D,F]: 
		(
			(
				(
					(
						p__d__instance(D,c__Object)
					)
				 &
					(
						p__d__instance(F,c__Formula)
					)
				 &
					(
						p__attribute(D,c__DeviceNormal)
					)
				 &
					(
						p__hasPurpose(D,F)
					)
				)
			)
			=>
			(
				p__modalAttribute(F,c__Possibility)
			)
		)
	)
).


fof( miloA4641, axiom,
	p__d__instance(c__DeviceDamaged,c__InternalAttribute)
).


fof( miloA4642, axiom,
	p__contraryAttribute2(c__DeviceDamaged,c__DeviceNormal)
).



% ($documentation DeviceNormal EnglishLanguage "An &%Attribute stating that
% the &%Device has been subjected to a &%Damaging, and has not had a subsequent 
% succesful &%Repairing, and cannot function as to its intended &%hasPurpose.
% Note that this does not include cosmetic damage that does not change the
% function of the &%Object.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of attribute is Object, which is subclass of Physical, whereas the first argument of earlier is TimeInterval, which is subclass of Abstract (Physical and Abstract are disjoint)
% ;;
% ;;(=>
% ;;  (attribute ?D DeviceDamaged)
% ;;  (exists (?DAM)
% ;;    (and
% ;;      ($instance ?DAM Damaging)
% ;;      (patient ?DAM ?D)
% ;;      (not
% ;;        (exists (?R)
% ;;          (and 
% ;;            ($instance ?R Repairing)
% ;;            (patient ?R ?D)
% ;;            (earlier ?D ?R)))))))
% )

fof( miloA4643, axiom,
	(![D,F]: 
		(
			(
				(
					(
						p__d__instance(D,c__Object)
					)
				 &
					(
						p__d__instance(F,c__Formula)
					)
				 &
					(
						p__attribute(D,c__DeviceDamaged)
					)
				 &
					(
						p__hasPurpose(D,F)
					)
				)
			)
			=>
			(
				~ (
					p__modalAttribute(F,c__Possibility)
				)
			)
		)
	)
).


fof( miloA4644, axiom,
	p__d__subclass(c__Vending,c__FinancialTransaction)
).



% ($documentation Vending EnglishLanguage "A &%FinancialTransaction in which
% the seller is a &%Machine")


fof( miloA4645, axiom,
	(![V]: 
		(
			(
				p__d__instance(V,c__Vending)
			)
			=>
			(
				(?[VM]: 
					(
						(
							(
								p__d__instance(VM,c__VendingMachine)
							)
						 &
							(
								p__origin(V,VM)
							)
						)
					)
				)
			)
		)
	)
).


fof( miloA4646, axiom,
	p__d__subclass(c__VendingMachine,c__Machine)
).



% ($documentation VendingMachine EnglishLanguage "A &%Machine that is the
% instrument of a &%FinancialTransaction that accepts payment and
% releases some object, often food or drink, to the customer.")


% 	(forall (?VM ?O ?V ?H)
% 		(=> 
% 			($instance ?VM VendingMachine)
% 			(hasPurpose ?VM (exists ([|] ?H ([|] ?O [])) (and ([|] ($instance ?V Vending) ([|] ($instance ?H Human) ([|] ($instance ?O Object) ([|] (objectTransferred ?V ?O) ([|] (instrument ?V ?VM) ([|] (origin ?V ?VM) ([|] (not ($instance ?O Currency)) ([|] (destination ?V ?H) [])))))))))))
% 		)
% 	)

% 	(forall (?V ?O)
% 		(=> 
% 			(and 
% 				($instance ?V Vending)
% 				(objectTransferred ?V ?O)
% 				(not 
% 					($instance ?O Currency)
% 				)
% 			)
% 			(modalAttribute (or ([|] ($instance ?O (FoodForFn Human)) ([|] ($instance ?O Beverage) []))) Likely)
% 		)
% 	)

fof( miloA4649, axiom,
	p__d__instance(c__CoinOperated,c__Attribute)
).



% ($documentation CoinOperated EnglishLanguage "An &%Attribute stating
% that a &%Machine is operated by its intended &%customer only by
% receive one or more &%CurrencyCoins.")


fof( miloA4650, axiom,
	(![M]: 
		(
			(
				(
					(
						p__d__instance(M,c__Object)
					)
				 &
					(
						p__attribute(M,c__CoinOperated)
					)
				)
			)
			=>
			(
				p__d__instance(M,c__Machine)
			)
		)
	)
).


% 	(forall (?M ?C ?FT ?A ?ACT)
% 		(=> 
% 			(attribute ?M CoinOperated)
% 			(hasPurpose ?M (exists ([|] ?C ([|] ?FT ([|] ?A ([|] ?ACT [])))) (and ([|] ($instance ?C CurrencyCoin) ([|] ($instance ?FT FinancialTransaction) ([|] (destination ?FT ?M) ([|] (patient ?FT ?C) ([|] (origin ?FT ?A) ([|] (causes ?FT ?ACT) ([|] (wants ?A ?ACT) []))))))))))
% 		)
% 	)

fof( miloA4652, axiom,
	p__d__subclass(c__FishTank,c__FluidContainer)
).



% ($documentation FishTank EnglishLanguage "A &%Container designed to
% hold &%Water and &%Fish.  Note that many such tanks can be repurposed
% to hold reptiles or insects.")


% 	(forall (?W ?FT ?F)
% 		(=> 
% 			($instance ?FT FishTank)
% 			(hasPurpose ?FT (exists ([|] ?W ([|] ?F [])) (and ([|] ($instance ?W Water) ([|] ($instance ?F Fish) ([|] (contains ?FT ?W) ([|] (contains ?FT ?F) [])))))))
% 		)
% 	)

fof( miloA4654, axiom,
	p__d__instance(c__Collectible,c__RelationalAttribute)
).



% ($documentation Collectible EnglishLanguage "Something that an
% agent wants that is not primarily based on its utility.  Note
% that this includes &%ArtWorks.")


% 	(forall (?C ?P ?P2)
% 		(=> 
% 			(and 
% 				(attribute ?C Collectible)
% 				(hasPurpose ?C ?P)
% 			)
% 			(exists (?H)
% 				(and 
% 					($instance ?H Human)
% 					(wants ?H ?C)
% 					(desires ?H ?P2)
% 					(entails ?P2 (possesses ?H ?C))
% 					(not 
% 						(equal ?P ?P2)
% 					)
% 				)
% 			)
% 		)
% 	)

fof( miloA4656, axiom,
	p__d__subclass(c__TradingCard,c__Icon)
).



% ($documentation TradingCard EnglishLanguage "A &%Collectible that
% depicts some &%Human (such as a professional sports star) or 
% imaginary &%Agent (in the case of fantasy trading cards like Pokemon).")


fof( miloA4657, axiom,
	(![TC]: 
		(
			(
				(
					(
						p__d__instance(TC,c__Object)
					)
				 &
					(
						p__d__instance(TC,c__TradingCard)
					)
				)
			)
			=>
			(
				p__attribute(TC,c__Collectible)
			)
		)
	)
).


% 	($subclass PortableComputer Computer)


% ($documentation PortableComputer EnglishLanguage "A &%Computer that is
% designed to be tranferred easily by a &%Human from one location to another.")


% 	(forall (?T ?PC ?C ?H)
% 		(=> 
% 			($instance ?PC PortableComputer)
% 			(hasPurpose ?PC (exists ([|] ?T ([|] ?H [])) (and ([|] ($instance ?T Carrying) ([|] (patient ?T ?PC) ([|] (agent ?C ?H) []))))))
% 		)
% 	)

% 	($subclass Laptop PortableComputer)


% ($documentation Laptop EnglishLanguage "A &%PortableComputer that includes
% a standard sized &%ComputerKeyboard.")


% 	(initiallyContainsPart ComputerKeyboard Laptop)

% 	(initiallyContainsPart ComputerScreen Laptop)

% 	($subclass TabletComputer PortableComputer)


% ($documentation TabletComputer EnglishLanguage "A &%PortableComputer lacking
% a physical &%ComputerKeyboard, but having a touch-sensitive screen.")


% 	(forall (?T)
% 		(=> 
% 			($instance ?T TabletComputer)
% 			(not 
% 				(exists (?K)
% 					(and 
% 						($instance ?K ComputerKeyboard)
% 						(part ?K ?T)
% 					)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?T)
% 		(=> 
% 			($instance ?T TabletComputer)
% 			(exists (?K)
% 				(and 
% 					($instance ?K ComputerTouchscreen)
% 					(part ?K ?T)
% 				)
% 			)
% 		)
% 	)

fof( miloA4666, axiom,
	p__d__subclass(c__SmartPhone,c__MobileCellPhone)
).


% 	($subclass SmartPhone PortableComputer)


% ($documentation SmartPhone EnglishLanguage "A &%MobileCellPhone with
% a user-accessible computing capabality.  A phone that simply has
% a computer in it, but where the user is not able to program it
% or install new programs, does not constitute a smart phone.")


fof( miloA4668, axiom,
	p__d__instance(c__suffers,c__CaseRole)
).


fof( miloA4669, axiom,
	p__d__instance(c__suffers,c__BinaryRelation)
).


% 	($domain suffers 1 Process)

% 	($domain suffers 2 Agent)


% ($documentation suffers EnglishLanguage "The opposite of &%benefits.  The &%Agent
% does not want the action to occur.")


fof( miloA4672, axiom,
	(![A,B]: 
		(
			(
				(
					(
						p__d__instance(B,c__Agent)
					)
				 &
					(
						p__d__instance(A,c__Process)
					)
				 &
					(
						p__suffers(A,B)
					)
				)
			)
			=>
			(
				~ (
					p__benefits(A,B)
				)
			)
		)
	)
).


fof( miloA4673, axiom,
	(![A,B]: 
		(
			(
				(
					(
						p__d__instance(B,c__Agent)
					)
				 &
					(
						p__d__instance(A,c__Process)
					)
				 &
					(
						p__benefits(A,B)
					)
				)
			)
			=>
			(
				~ (
					p__suffers(A,B)
				)
			)
		)
	)
).


fof( miloA4674, axiom,
	(![PROCESS,AGENT,PROCESSSTART,AGENTEND]: 
		(
			(
				(
					(
						p__d__instance(PROCESS,c__Process)
					)
				 &
					(
						p__d__instance(PROCESSSTART,c__TimePoint)
					)
				 &
					(
						p__d__instance(AGENT,c__Agent)
					)
				 &
					(
						p__d__instance(AGENTEND,c__TimePoint)
					)
				 &
					(
						( PROCESSSTART = f__BeginFn1(f__WhenFn1(PROCESS)) )
					)
				 &
					(
						( AGENTEND = f__EndFn1(f__WhenFn1(AGENT)) )
					)
				 &
					(
						p__suffers(PROCESS,AGENT)
					)
				)
			)
			=>
			(
				p__before(PROCESSSTART,AGENTEND)
			)
		)
	)
).


fof( miloA4675, axiom,
	(![B,A]: 
		(
			(
				(
					(
						p__d__instance(B,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(A,c__Process)
					)
				 &
					(
						p__benefits(A,B)
					)
				)
			)
			=>
			(
				p__wants(B,A)
			)
		)
	)
).


fof( miloA4676, axiom,
	(![B,A]: 
		(
			(
				(
					(
						p__d__instance(B,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(A,c__Process)
					)
				 &
					(
						p__suffers(A,B)
					)
				)
			)
			=>
			(
				~ (
					p__wants(B,A)
				)
			)
		)
	)
).


% ($comment 
% ;; We already have Answering in SUMO
% )

fof( miloA4677, axiom,
	p__d__subclass(c__Apologizing,c__Stating)
).



% ($documentation Apologizing EnglishLanguage "The speaker states that some action
% he or she took previously was wrong in some way, that it caused harm to the
% hearer.")


% 	(forall (?P ?A ?AG)
% 		(=> 
% 			(and 
% 				($instance ?A Apologizing)
% 				(agent ?A ?AG)
% 				(destination ?A ?P)
% 			)
% 			(exists (?ACT)
% 				(and 
% 					(suffers ?ACT ?P)
% 					(agent ?ACT ?AG)
% 					(holdsDuring (WhenFn ?A) (not (wants ?AG ?ACT)))
% 				)
% 			)
% 		)
% 	)

fof( miloA4679, axiom,
	p__d__subclass(c__Confirming,c__Stating)
).



% ($documentation Confirming EnglishLanguage "An utterance in which the speaker is
% part of a &%ReachingAgreement and in which the &%Proposition under consideration
% has already been &%Stated.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: misplaced variables
% ;;
% ;;(=>
% ;;  (and
% ;;    ($instance ?C Confirming)
% ;;    (agent ?C ?A)
% ;;    (containsInformation ?C ?P))
% ;;  (exists (?S ?RA ?A2)
% ;;    (and
% ;;      ($instance ?S Stating)
% ;;      (earlier ?S ?C)
% ;;      ($instance ?RA ReachingAgreement)
% ;;      (agent ?S ?A2)
% ;;      (containsInformation ?RA ?P)
% ;;      (containsInformation ?S ?P)
% ;;      (partyToAgreement ?RA ?A)
% ;;      (partyToAgreement ?RA ?A2))))
% )

% ($comment 
% ;; JA: added (AdimenSUMO 2.4)
% )

% 	(forall (?C ?P ?A)
% 		(=> 
% 			(and 
% 				($instance ?C Confirming)
% 				(agent ?C ?A)
% 				(containsInformation ?C ?P)
% 			)
% 			(exists (?S ?RA ?A2)
% 				(and 
% 					($instance ?S Stating)
% 					(earlier ?S ?C)
% 					($instance ?RA ReachingAgreement)
% 					(agent ?S ?A2)
% 					(containsInformation ?RA ?P)
% 					(containsInformation ?S ?P)
% 					(partyToAgreement ?A ?RA)
% 					(partyToAgreement ?A2 ?RA)
% 				)
% 			)
% 		)
% 	)

fof( miloA4681, axiom,
	p__d__subclass(c__Elaborating,c__LinguisticCommunication)
).



% ($documentation Elaborating EnglishLanguage "A &%LinguisticCommunication in
% which the &%agent adds additional content beyond the original utterance.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: the first argument of containsInformation is Proposition, which is subclass of Abstract, whereas the second argument of earlier is TimeInterval, which is subclass of Physical (Abstract and Physical are disjoint)
% ;;
% ;;(=>
% ;;  ($instance ?E Elaborating)
% ;;  (exists (?L ?EP ?LP)
% ;;    (and
% ;;      ($instance ?L LinguisticCommunication)
% ;;      (earlier ?L ?E)
% ;;      (containsInformation ?E ?EP)
% ;;      (containsInformation ?L ?LP)
% ;;      (subsumesContentInstance ?EP ?LP))))
% )

fof( miloA4682, axiom,
	p__d__subclass(c__Restating,c__LinguisticCommunication)
).



% ($documentation Restating EnglishLanguage "A &%Communication act in
% which the speaker reiterates the same &%Proposition as a previous
% speech act.  Note that this is not a &%Stating, since the speaker
% may simply be saying what someone else said, and not actually
% committing to the truth of what that person said.")


% ($comment 
% ;; JA: removed (AdimenSUMO 2.4)
% ;; Detected using automatic check: wrongly quantified variables and mispelled variables
% ;; Also checked:
% ;;	(=>
% ;;		($instance ?R Restating)
% ;;		(exists (?L ?RP ?LP)
% ;;			(and
% ;;				($instance ?L LinguisticCommunication)
% ;;				(earlier ?L ?R)
% ;;				(containsInformation ?R ?RP)
% ;;				(containsInformation ?L ?LP)
% ;;				(equivalentContentInstance ?RP ?LP))))
% ;; However, Restating and LinguisticCommunication are subclass of Physical, whereas both arguments of earlier are instance of TimeInterval, which is subclass of Abstract (Physical and Abstract are disjoint)
% ;; Also checked:
% ;;(=>
% ;;  ($instance ?R Restating)
% ;;  (exists (?L ?RP ?LP)
% ;;    (and
% ;;      ($instance ?L LinguisticCommunication)
% ;;      (earlier (WhenFn ?L) (WhenFn ?R))
% ;;      (containsInformation ?R ?RP)
% ;;      (containsInformation ?L ?LP)
% ;;      (equivalentContentInstance ?RP ?LP))))
% ;; However, the second argument of containsInformation is Proposition, which is subclass of Abstract, whereas both arguments of equivalentContentInstance are ContentBearingPhysical, which is subclass of Physical (Physical and Abstract are disjoint
% ;;
% ;;(=>
% ;;  ($instance ?R Restating)
% ;;  (exists (?L)
% ;;    (and
% ;;      ($instance ?L LinguisticCommunication)
% ;;      (earlier ?L ?R)
% ;;      (containsInformation ?E ?RP)
% ;;      (containsInformation ?L ?LP)
% ;;      (equivalentContentInstance ?RP ?LP))))
% )

fof( miloA4683, axiom,
	p__d__subclass(c__Correcting,c__Stating)
).



% ($documentation Correcting EnglishLanguage "A &%Correcting is a part
% of a &%Disagreeing in which the speaker explicitly &%refers to a prior
% statement.")


fof( miloA4684, axiom,
	(![C,CS]: 
		(
			(
				(
					(
						p__d__instance(CS,c__Proposition)
					)
				 &
					(
						p__d__instance(C,c__Correcting)
					)
				)
			)
			=>
			(
				(?[D,S,SP,CP]: 
					(
						(
							(
								p__d__instance(SP,c__Proposition)
							)
						 &
							(
								p__d__instance(CP,c__Proposition)
							)
						 &
							(
								p__d__instance(D,c__Disagreeing)
							)
						 &
							(
								p__subProcess(C,D)
							)
						 &
							(
								p__d__instance(S,c__Stating)
							)
						 &
							(
								p__containsInformation(S,SP)
							)
						 &
							(
								p__containsInformation(C,CP)
							)
						 &
							(
								p__refers(CP,SP)
							)
						 &
							(
								~ (
									p__consistent(CS,SP)
								)
							)
						)
					)
				)
			)
		)
	)
).


% ($comment 
% ;; reject seems the same as SUMO's existing Disagreeing
% ;;
% ;; Objecting appears the same as the existing ExpressingDisapproval
% ;;
% ;; We already have Questioning in SUMO
% )

fof( miloA4685, axiom,
	p__d__subclass(c__Prompting,c__Requesting)
).



% ($documentation Prompting EnglishLanguage "A &%Prompting is an
% implied sort of &%Requesting, in which the speaker begins an
% utterance, asking the hearer to complete it.")


% 	(forall (?LC ?P)
% 		(=> 
% 			($instance ?P Prompting)
% 			(exists (?H ?A)
% 				(and 
% 					(destination ?P ?H)
% 					(agent ?P ?A)
% 					(desires ?A (exists ([|] ?LC []) (and ([|] ($instance ?LC LinguisticCommunication) ([|] (agent ?LC ?H) ([|] (earlier ?P ?LC) ([|] (subsumesContentInstance ?LC ?P) [])))))))
% 				)
% 			)
% 		)
% 	)

fof( miloA4687, axiom,
	p__d__instance(c__CoveringFn,c__UnaryFunction)
).


% 	($domainSubclass CoveringFn 1 BodyPart)

% 	($rangeSubclass CoveringFn WearableItem)


% ($documentation CoveringFn EnglishLanguage "A &%Function that produces the class of
% all things intended to be used in &%Covering a particular &%BodyPart.")


% 	(forall (?B ?C ?BI ?P ?CI)
% 		(=> 
% 			($subclass ?C (CoveringFn ?B))
% 			(hasPurpose ?C (exists ([|] ?P ([|] ?BI ([|] ?CI []))) (and ([|] ($instance ?P Covering) ([|] ($instance ?BI ?B) ([|] ($instance ?CI ?C) ([|] (destination ?P ?BI) ([|] (patient ?P ?CI) []))))))))
% 		)
% 	)

fof( miloA4691, axiom,
	p__d__instance(c__covers,c__BinaryPredicate)
).


fof( miloA4692, axiom,
	p__d__instance(c__covers,c__TransitiveRelation)
).


fof( miloA4693, axiom,
	p__d__instance(c__covers,c__SpatialRelation)
).


% 	($domain covers 1 Object)

% 	($domain covers 2 Object)

% ($comment 
% ;; (format EnglishLanguage covers "%1 covers %2")
% )


% ($documentation covers EnglishLanguage "A relationship of partial or complete
% physical covering, which may be the result of a &%Covering.  To cover an 
% object, the first object must at least roughly conform to the surface of the
% second object. ")


fof( miloA4696, axiom,
	(![B,A,S]: 
		(
			(
				(
					(
						p__d__instance(B,c__Object)
					)
				 &
					(
						p__d__instance(A,c__Object)
					)
				 &
					(
						p__d__instance(S,c__Object)
					)
				 &
					(
						p__covers(A,B)
					)
				 &
					(
						p__superficialPart(S,B)
					)
				)
			)
			=>
			(
				p__meetsSpatially(A,S)
			)
		)
	)
).


% 	(forall (?C ?I ?P)
% 		(=> 
% 			(and 
% 				($instance ?C Covering)
% 				(patient ?C ?P)
% 				(instrument ?C ?I)
% 			)
% 			(holdsDuring (ImmediateFutureFn (WhenFn ?C)) (covers ?I ?P))
% 		)
% 	)


% ($documentation beforeOnPath EnglishLanguage "(beforeOnPath ?OBJ1 ?OBJ2 ?PATH ?PROC) means that ?OBJ1 is spatially before ?OBJ2 on the path ?PATH with respect to a particular &%Transfer &%Process.") 	 	


% 	($domain beforeOnPath 1 Object)

% 	($domain beforeOnPath 2 Object)

% 	($domain beforeOnPath 3 Object)

% 	($domain beforeOnPath 4 Transfer)

fof( miloA4702, axiom,
	p__d__instance(c__beforeOnPath,c__QuaternaryPredicate)
).


fof( miloA4703, axiom,
	p__d__instance(c__beforeOnPath,c__SpatialRelation)
).


% ($comment 
% ;; ($instance beforeOnPath TransitiveRelation)
% ;;
% ;; (format EnglishLanguage beforeOnPath "%1 %n before %2 on path %3 during %4") 
% )

% (termFormat EnglishLanguage betweenOnPath "before on path") 

fof( miloA4704, axiom,
	(![O1,O2,O3,PATH,T]: 
		(
			(
				(
					(
						p__d__instance(PATH,c__Object)
					)
				 &
					(
						p__d__instance(O3,c__Object)
					)
				 &
					(
						p__d__instance(O2,c__Object)
					)
				 &
					(
						p__d__instance(O1,c__Object)
					)
				 &
					(
						p__betweenOnPath(O1,O2,O3,PATH)
					)
				 &
					(
						p__d__instance(T,c__Transfer)
					)
				 &
					(
						p__path(T,PATH)
					)
				 &
					(
						p__origin(T,O1)
					)
				 &
					(
						p__destination(T,O3)
					)
				)
			)
			=>
			(
				(
					(
						p__beforeOnPath(O1,O2,PATH,T)
					)
				 &
					(
						p__beforeOnPath(O2,O3,PATH,T)
					)
				)
			)
		)
	)
).


% 	(forall (?O1 ?O2)
% 		(=> 
% 			(orientation ?O1 ?O2 Upstream)
% 			(exists (?T ?L ?P)
% 				(and 
% 					($instance ?T Transfer)
% 					(attribute ?L Liquid)
% 					(path ?T ?P)
% 					(origin ?T ?O1)
% 					(beforeOnPath ?O1 ?O2 ?P ?T)
% 					(destination ?T ?O2)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?O2 ?O1)
% 		(=> 
% 			(orientation ?O1 ?O2 Downstream)
% 			(exists (?T ?L ?P)
% 				(and 
% 					($instance ?T Transfer)
% 					(attribute ?L Liquid)
% 					(path ?T ?P)
% 					(origin ?T ?O2)
% 					(beforeOnPath ?O2 ?O1 ?P ?T)
% 					(destination ?T ?O1)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?O1 ?O2)
% 		(=> 
% 			(orientation ?O1 ?O2 Upwind)
% 			(exists (?T ?L ?P)
% 				(and 
% 					($instance ?T Transfer)
% 					(attribute ?L Liquid)
% 					(path ?T ?P)
% 					(origin ?T ?O1)
% 					(beforeOnPath ?O1 ?O2 ?P ?T)
% 					(destination ?T ?O2)
% 				)
% 			)
% 		)
% 	)

% 	(forall (?O2 ?O1)
% 		(=> 
% 			(orientation ?O1 ?O2 Downwind)
% 			(exists (?T ?L ?P)
% 				(and 
% 					($instance ?T Transfer)
% 					(attribute ?L Liquid)
% 					(path ?T ?P)
% 					(origin ?T ?O2)
% 					(beforeOnPath ?O2 ?O1 ?P ?T)
% 					(destination ?T ?O1)
% 				)
% 			)
% 		)
% 	)

fof( miloA4709, axiom,
	p__d__instance(c__approximateValue,c__BinaryPredicate)
).


% 	($domain approximateValue 1 RealNumber)

% 	($domain approximateValue 2 RealNumber)

% ($comment 
% ;; (format EnglishLanguage approximateValue "the approximate value of %1 is %n %2")
% )


% ($documentation approximateValue EnglishLanguage "A relation that specifies two 
% numbers are equal or nearly so.")


% 	(forall (?N1 ?N2)
% 		(=> 
% 			(approximateValue ?N1 ?N2)
% 			(modalAttribute (equal ?N1 ?N2) Likely)
% 		)
% 	)

% ($comment 
% ;; (=>
% ;;   (approximateValue ?N1 ?N2)
% ;;   (modalAttribute
% ;;     (greaterThan
% ;;       0.9 
% ;;       (DivisionFn ?N1 ?N2))
% ;;     Unlikely))
% ;;
% ;; (=>
% ;;   (approximateValue ?N1 ?N2)
% ;;   (modalAttribute
% ;;     (greaterThan
% ;;       0.9 
% ;;       (DivisionFn ?N2 ?N1))
% ;;     Unlikely))
% )
fof( schemaBinaryRelationA1, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__SetOrClass)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subclass,VAR1,VAR2)
				)
				<=>
				(
					p__subclass(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA2, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Relation)
					)
				 &
					(
						p__d__instance(VAR1,c__Relation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subrelation,VAR1,VAR2)
				)
				<=>
				(
					p__subrelation(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA3, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Attribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Attribute)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subAttribute,VAR1,VAR2)
				)
				<=>
				(
					p__subAttribute(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA4, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__part,VAR1,VAR2)
				)
				<=>
				(
					p__part(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA5, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Collection)
					)
				 &
					(
						p__d__instance(VAR1,c__Collection)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subCollection,VAR1,VAR2)
				)
				<=>
				(
					p__subCollection(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA6, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__lessThanOrEqualTo,VAR1,VAR2)
				)
				<=>
				(
					p__lessThanOrEqualTo(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA7, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__greaterThanOrEqualTo,VAR1,VAR2)
				)
				<=>
				(
					p__greaterThanOrEqualTo(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA8, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__List)
					)
				 &
					(
						p__d__instance(VAR1,c__List)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subList,VAR1,VAR2)
				)
				<=>
				(
					p__subList(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA9, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__List)
					)
				 &
					(
						p__d__instance(VAR1,c__List)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__initialList,VAR1,VAR2)
				)
				<=>
				(
					p__initialList(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA10, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__subclass(VAR1,c__ContentBearingPhysical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subsumesContentClass,VAR1,VAR2)
				)
				<=>
				(
					p__subsumesContentClass(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA11, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(VAR1,c__ContentBearingPhysical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subsumesContentInstance,VAR1,VAR2)
				)
				<=>
				(
					p__subsumesContentInstance(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA12, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimePosition)
					)
				 &
					(
						p__d__instance(VAR1,c__TimePosition)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__temporalPart,VAR1,VAR2)
				)
				<=>
				(
					p__temporalPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA13, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimePoint)
					)
				 &
					(
						p__d__instance(VAR1,c__TimePoint)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__beforeOrEqual,VAR1,VAR2)
				)
				<=>
				(
					p__beforeOrEqual(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA14, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Process)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subProcess,VAR1,VAR2)
				)
				<=>
				(
					p__subProcess(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA15, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organization)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subOrganization,VAR1,VAR2)
				)
				<=>
				(
					p__subOrganization(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA16, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GeometricFigure)
					)
				 &
					(
						p__d__instance(VAR1,c__GeometricFigure)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__geometricPart,VAR1,VAR2)
				)
				<=>
				(
					p__geometricPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA17, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Abstract)
					)
				 &
					(
						p__d__instance(VAR1,c__Abstract)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__abstractPart,VAR1,VAR2)
				)
				<=>
				(
					p__abstractPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA18, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__holds3(c__equal,VAR1,VAR2)
			)
			<=>
			(
				( VAR1 = VAR2 )
			)
		)
	)
).

fof( schemaBinaryRelationA19, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__holds3(c__relatedInternalConcept,VAR1,VAR2)
			)
			<=>
			(
				p__relatedInternalConcept(VAR1,VAR2)
			)
		)
	)
).

fof( schemaBinaryRelationA20, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__List)
					)
				 &
					(
						p__d__instance(VAR1,c__List)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__identicalListItems,VAR1,VAR2)
				)
				<=>
				(
					p__identicalListItems(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA21, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__copy,VAR1,VAR2)
				)
				<=>
				(
					p__copy(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA22, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__subclass(VAR1,c__ContentBearingPhysical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__equivalentContentClass,VAR1,VAR2)
				)
				<=>
				(
					p__equivalentContentClass(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA23, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(VAR1,c__ContentBearingPhysical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__equivalentContentInstance,VAR1,VAR2)
				)
				<=>
				(
					p__equivalentContentInstance(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA24, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Physical)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__cooccur,VAR1,VAR2)
				)
				<=>
				(
					p__cooccur(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA25, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organism)
					)
				 &
					(
						p__d__instance(VAR1,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__familyRelation,VAR1,VAR2)
				)
				<=>
				(
					p__familyRelation(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA26, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Graph)
					)
				 &
					(
						p__d__instance(VAR1,c__Graph)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subGraph,VAR1,VAR2)
				)
				<=>
				(
					p__subGraph(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA27, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(VAR1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__overlapsTemporally,VAR1,VAR2)
				)
				<=>
				(
					p__overlapsTemporally(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA28, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__connected,VAR1,VAR2)
				)
				<=>
				(
					p__connected(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA29, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__overlapsSpatially,VAR1,VAR2)
				)
				<=>
				(
					p__overlapsSpatially(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA30, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subString,VAR1,VAR2)
				)
				<=>
				(
					p__subString(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA31, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__agent,VAR1,VAR2)
				)
				<=>
				(
					p__agent(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA32, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Process)
			)
			=>
			(
				(
					p__d__holds3(c__destination,VAR1,VAR2)
				)
				<=>
				(
					p__destination(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA33, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__experiencer,VAR1,VAR2)
				)
				<=>
				(
					p__experiencer(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA34, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__origin,VAR1,VAR2)
				)
				<=>
				(
					p__origin(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA35, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Process)
			)
			=>
			(
				(
					p__d__holds3(c__patient,VAR1,VAR2)
				)
				<=>
				(
					p__patient(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA36, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__eventPartlyLocated,VAR1,VAR2)
				)
				<=>
				(
					p__eventPartlyLocated(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA37, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Motion)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__moves,VAR1,VAR2)
				)
				<=>
				(
					p__moves(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA38, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Translocation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__changesLocation,VAR1,VAR2)
				)
				<=>
				(
					p__changesLocation(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA39, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Motion)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__path,VAR1,VAR2)
				)
				<=>
				(
					p__path(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA40, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositionalAttribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__direction,VAR1,VAR2)
				)
				<=>
				(
					p__direction(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA41, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Animal)
					)
				 &
					(
						p__d__instance(VAR1,c__Confining)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__detainee,VAR1,VAR2)
				)
				<=>
				(
					p__detainee(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA42, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__targetInAttack,VAR1,VAR2)
				)
				<=>
				(
					p__targetInAttack(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA43, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Experimenting)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__experimentalControl,VAR1,VAR2)
				)
				<=>
				(
					p__experimentalControl(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA44, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__AchievingControl)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__controlled,VAR1,VAR2)
				)
				<=>
				(
					p__controlled(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA45, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__AchievingControl)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__gainsControl,VAR1,VAR2)
				)
				<=>
				(
					p__gainsControl(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA46, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__ChangeOfControl)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__losesControl,VAR1,VAR2)
				)
				<=>
				(
					p__losesControl(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA47, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__PlacingUnderArrest)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__arrested,VAR1,VAR2)
				)
				<=>
				(
					p__arrested(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA48, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TransportationDevice)
					)
				 &
					(
						p__d__instance(VAR1,c__Transportation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__conveyance,VAR1,VAR2)
				)
				<=>
				(
					p__conveyance(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA49, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__suffers,VAR1,VAR2)
				)
				<=>
				(
					p__suffers(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA50, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__desires,VAR1,VAR2)
				)
				<=>
				(
					p__desires(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA51, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__considers,VAR1,VAR2)
				)
				<=>
				(
					p__considers(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA52, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__believes,VAR1,VAR2)
				)
				<=>
				(
					p__believes(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA53, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__knows,VAR1,VAR2)
				)
				<=>
				(
					p__knows(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA54, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__doubts,VAR1,VAR2)
				)
				<=>
				(
					p__doubts(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA55, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__disapproves,VAR1,VAR2)
				)
				<=>
				(
					p__disapproves(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA56, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR2,c__SetOrClass)
			)
			=>
			(
				(
					p__d__holds3(c__immediateInstance,VAR1,VAR2)
				)
				<=>
				(
					p__immediateInstance(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA57, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__SetOrClass)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__immediateSubclass,VAR1,VAR2)
				)
				<=>
				(
					p__immediateSubclass(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA58, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__Function)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__range,VAR1,VAR2)
				)
				<=>
				(
					p__range(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA59, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__Function)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__rangeSubclass,VAR1,VAR2)
				)
				<=>
				(
					p__rangeSubclass(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA60, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(VAR1,c__Relation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__valence,VAR1,VAR2)
				)
				<=>
				(
					p__valence(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA61, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Attribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Attribute)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__successorAttribute,VAR1,VAR2)
				)
				<=>
				(
					p__successorAttribute(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA62, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__SelfConnectedObject)
			)
			=>
			(
				(
					p__d__holds3(c__FrontFn,VAR1,VAR2)
				)
				<=>
				(
					p__FrontFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA63, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__SelfConnectedObject)
			)
			=>
			(
				(
					p__d__holds3(c__BackFn,VAR1,VAR2)
				)
				<=>
				(
					p__BackFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA64, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__properPart,VAR1,VAR2)
				)
				<=>
				(
					p__properPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA65, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__contains,VAR1,VAR2)
				)
				<=>
				(
					p__contains(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA66, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Collection)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__member,VAR1,VAR2)
				)
				<=>
				(
					p__member(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA67, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Proposition)
					)
				 &
					(
						p__d__instance(VAR1,c__ContentBearingPhysical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__containsInformation,VAR1,VAR2)
				)
				<=>
				(
					p__containsInformation(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA68, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__leader,VAR1,VAR2)
				)
				<=>
				(
					p__leader(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA69, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Attribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__attribute,VAR1,VAR2)
				)
				<=>
				(
					p__attribute(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA70, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Attribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__manner,VAR1,VAR2)
				)
				<=>
				(
					p__manner(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA71, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Process)
			)
			=>
			(
				(
					p__d__holds3(c__involvedInEvent,VAR1,VAR2)
				)
				<=>
				(
					p__involvedInEvent(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA72, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Formula)
			)
			=>
			(
				(
					p__d__holds3(c__ProbabilityFn,VAR1,VAR2)
				)
				<=>
				(
					p__ProbabilityFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA73, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR2,c__List)
			)
			=>
			(
				(
					p__d__holds3(c__inList,VAR1,VAR2)
				)
				<=>
				(
					p__inList(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA74, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__Function)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__closedOn,VAR1,VAR2)
				)
				<=>
				(
					p__closedOn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA75, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__BinaryRelation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__reflexiveOn,VAR1,VAR2)
				)
				<=>
				(
					p__reflexiveOn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA76, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__BinaryRelation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__irreflexiveOn,VAR1,VAR2)
				)
				<=>
				(
					p__irreflexiveOn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA77, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__BinaryRelation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__partialOrderingOn,VAR1,VAR2)
				)
				<=>
				(
					p__partialOrderingOn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA78, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__BinaryRelation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__totalOrderingOn,VAR1,VAR2)
				)
				<=>
				(
					p__totalOrderingOn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA79, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__BinaryRelation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__trichotomizingOn,VAR1,VAR2)
				)
				<=>
				(
					p__trichotomizingOn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA80, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__BinaryRelation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__equivalenceRelationOn,VAR1,VAR2)
				)
				<=>
				(
					p__equivalenceRelationOn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA81, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Process)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__causes,VAR1,VAR2)
				)
				<=>
				(
					p__causes(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA82, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Process)
					)
				 &
					(
						p__d__subclass(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__causesSubclass,VAR1,VAR2)
				)
				<=>
				(
					p__causesSubclass(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA83, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__causesProposition,VAR1,VAR2)
				)
				<=>
				(
					p__causesProposition(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA84, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimePosition)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__time,VAR1,VAR2)
				)
				<=>
				(
					p__time(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA85, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__TimePosition)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__holdsDuring,VAR1,VAR2)
				)
				<=>
				(
					p__holdsDuring(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA86, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__exploits,VAR1,VAR2)
				)
				<=>
				(
					p__exploits(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA87, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__hasPurpose,VAR1,VAR2)
				)
				<=>
				(
					p__hasPurpose(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA88, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__subclass(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__hasSkill,VAR1,VAR2)
				)
				<=>
				(
					p__hasSkill(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA89, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__crosses,VAR1,VAR2)
				)
				<=>
				(
					p__crosses(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA90, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__penetrates,VAR1,VAR2)
				)
				<=>
				(
					p__penetrates(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA91, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__possesses,VAR1,VAR2)
				)
				<=>
				(
					p__possesses(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA92, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Process)
					)
				 &
					(
						p__d__subclass(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__precondition,VAR1,VAR2)
				)
				<=>
				(
					p__precondition(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA93, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Proposition)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__realization,VAR1,VAR2)
				)
				<=>
				(
					p__realization(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA94, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Language)
					)
				 &
					(
						p__d__instance(VAR1,c__LinguisticExpression)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__expressedInLanguage,VAR1,VAR2)
				)
				<=>
				(
					p__expressedInLanguage(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA95, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__uses,VAR1,VAR2)
				)
				<=>
				(
					p__uses(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA96, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__BinaryFunction)
			)
			=>
			(
				(
					p__d__holds3(c__identityElement,VAR1,VAR2)
				)
				<=>
				(
					p__identityElement(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA97, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR2,c__Set)
			)
			=>
			(
				(
					p__d__holds3(c__element,VAR1,VAR2)
				)
				<=>
				(
					p__element(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA98, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__holds3(c__CardinalityFn,VAR1,VAR2)
			)
			<=>
			(
				p__CardinalityFn(VAR1,VAR2)
			)
		)
	)
).

fof( schemaBinaryRelationA99, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Graph)
					)
				 &
					(
						p__d__instance(VAR1,c__GraphElement)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__graphPart,VAR1,VAR2)
				)
				<=>
				(
					p__graphPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA100, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(VAR1,c__GraphPath)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__pathLength,VAR1,VAR2)
				)
				<=>
				(
					p__pathLength(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA101, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PhysicalQuantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__measure,VAR1,VAR2)
				)
				<=>
				(
					p__measure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA102, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__UnitOfAtmosphericPressure)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__barometricPressure,VAR1,VAR2)
				)
				<=>
				(
					p__barometricPressure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA103, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeDuration)
					)
				 &
					(
						p__d__instance(VAR1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__duration,VAR1,VAR2)
				)
				<=>
				(
					p__duration(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA104, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeDuration)
					)
				 &
					(
						p__d__subclass(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__frequency,VAR1,VAR2)
				)
				<=>
				(
					p__frequency(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA105, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(VAR1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__meetsTemporally,VAR1,VAR2)
				)
				<=>
				(
					p__meetsTemporally(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA106, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Day)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__date,VAR1,VAR2)
				)
				<=>
				(
					p__date(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA107, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__surface,VAR1,VAR2)
				)
				<=>
				(
					p__surface(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA108, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__interiorPart,VAR1,VAR2)
				)
				<=>
				(
					p__interiorPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA109, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(VAR1,c__Hole)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__hole,VAR1,VAR2)
				)
				<=>
				(
					p__hole(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA110, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Hole)
			)
			=>
			(
				(
					p__d__holds3(c__HoleHostFn,VAR1,VAR2)
				)
				<=>
				(
					p__HoleHostFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA111, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Hole)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__partiallyFills,VAR1,VAR2)
				)
				<=>
				(
					p__partiallyFills(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA112, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Hole)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__properlyFills,VAR1,VAR2)
				)
				<=>
				(
					p__properlyFills(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA113, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Hole)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__completelyFills,VAR1,VAR2)
				)
				<=>
				(
					p__completelyFills(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA114, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Hole)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__fills,VAR1,VAR2)
				)
				<=>
				(
					p__fills(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA115, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Hole)
			)
			=>
			(
				(
					p__d__holds3(c__HoleSkinFn,VAR1,VAR2)
				)
				<=>
				(
					p__HoleSkinFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA116, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(VAR1,c__ElementalSubstance)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__atomicNumber,VAR1,VAR2)
				)
				<=>
				(
					p__atomicNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA117, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GeographicArea)
					)
				 &
					(
						p__d__instance(VAR1,c__GeographicArea)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__geographicSubregion,VAR1,VAR2)
				)
				<=>
				(
					p__geographicSubregion(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA118, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(VAR1,c__GeopoliticalArea)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__geopoliticalSubdivision,VAR1,VAR2)
				)
				<=>
				(
					p__geopoliticalSubdivision(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA119, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__DevelopmentalAttribute)
					)
				 &
					(
						p__d__instance(VAR1,c__OrganicObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__developmentalForm,VAR1,VAR2)
				)
				<=>
				(
					p__developmentalForm(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA120, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__inhabits,VAR1,VAR2)
				)
				<=>
				(
					p__inhabits(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA121, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Text)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__authors,VAR1,VAR2)
				)
				<=>
				(
					p__authors(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA122, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Text)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__editor,VAR1,VAR2)
				)
				<=>
				(
					p__editor(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA123, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Text)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__publishes,VAR1,VAR2)
				)
				<=>
				(
					p__publishes(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA124, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Artifact)
					)
				 &
					(
						p__d__subclass(VAR1,c__Artifact)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__version,VAR1,VAR2)
				)
				<=>
				(
					p__version(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA125, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organism)
					)
				 &
					(
						p__d__instance(VAR1,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__parent,VAR1,VAR2)
				)
				<=>
				(
					p__parent(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA126, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Woman)
					)
				 &
					(
						p__d__instance(VAR1,c__Man)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__husband,VAR1,VAR2)
				)
				<=>
				(
					p__husband(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA127, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Man)
					)
				 &
					(
						p__d__instance(VAR1,c__Woman)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__wife,VAR1,VAR2)
				)
				<=>
				(
					p__wife(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA128, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Nation)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__citizen,VAR1,VAR2)
				)
				<=>
				(
					p__citizen(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA129, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__NormativeAttribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__modalAttribute,VAR1,VAR2)
				)
				<=>
				(
					p__modalAttribute(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA130, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__holdsRight,VAR1,VAR2)
				)
				<=>
				(
					p__holdsRight(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA131, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__holdsObligation,VAR1,VAR2)
				)
				<=>
				(
					p__holdsObligation(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA132, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Integer)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__yearOfFounding,VAR1,VAR2)
				)
				<=>
				(
					p__yearOfFounding(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA133, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Artifact)
					)
				 &
					(
						p__d__instance(VAR1,c__Device)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__powerPlant,VAR1,VAR2)
				)
				<=>
				(
					p__powerPlant(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA134, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organization)
					)
				 &
					(
						p__d__instance(VAR1,c__Proposition)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__insured,VAR1,VAR2)
				)
				<=>
				(
					p__insured(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA135, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__FinancialTransaction)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__loss,VAR1,VAR2)
				)
				<=>
				(
					p__loss(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA136, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__FinancialTransaction)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__profit,VAR1,VAR2)
				)
				<=>
				(
					p__profit(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA137, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__customer,VAR1,VAR2)
				)
				<=>
				(
					p__customer(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA138, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__familyName,VAR1,VAR2)
				)
				<=>
				(
					p__familyName(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA139, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__middleName,VAR1,VAR2)
				)
				<=>
				(
					p__middleName(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA140, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__givenName,VAR1,VAR2)
				)
				<=>
				(
					p__givenName(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA141, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__StructureAttribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__structure,VAR1,VAR2)
				)
				<=>
				(
					p__structure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA142, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__operator,VAR1,VAR2)
				)
				<=>
				(
					p__operator(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA143, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Transportation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__transported,VAR1,VAR2)
				)
				<=>
				(
					p__transported(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA144, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Shipping)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__cargo,VAR1,VAR2)
				)
				<=>
				(
					p__cargo(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA145, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__ServiceProcess)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__serviceProvider,VAR1,VAR2)
				)
				<=>
				(
					p__serviceProvider(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA146, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__ServiceProcess)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__serviceRecipient,VAR1,VAR2)
				)
				<=>
				(
					p__serviceRecipient(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA147, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__benefits,VAR1,VAR2)
				)
				<=>
				(
					p__benefits(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA148, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__grandparent,VAR1,VAR2)
				)
				<=>
				(
					p__grandparent(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA149, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__alias,VAR1,VAR2)
				)
				<=>
				(
					p__alias(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA150, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__workAddress,VAR1,VAR2)
				)
				<=>
				(
					p__workAddress(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA151, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__PermanentResidence)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__homeAddress,VAR1,VAR2)
				)
				<=>
				(
					p__homeAddress(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA152, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__ContentBearingObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__deceptiveIdentifier,VAR1,VAR2)
				)
				<=>
				(
					p__deceptiveIdentifier(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA153, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR1,c__NonnegativeInteger)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__stringLength,VAR1,VAR2)
				)
				<=>
				(
					p__stringLength(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA154, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__ContactSite)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__siteForContact,VAR1,VAR2)
				)
				<=>
				(
					p__siteForContact(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA155, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__postContactSite,VAR1,VAR2)
				)
				<=>
				(
					p__postContactSite(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA156, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Neighborhood)
					)
				 &
					(
						p__d__instance(VAR1,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__postNeighborhood,VAR1,VAR2)
				)
				<=>
				(
					p__postNeighborhood(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA157, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(VAR1,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__postCountry,VAR1,VAR2)
				)
				<=>
				(
					p__postCountry(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA158, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__StateOrProvince)
					)
				 &
					(
						p__d__instance(VAR1,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__postDistrict,VAR1,VAR2)
				)
				<=>
				(
					p__postDistrict(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA159, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__City)
					)
				 &
					(
						p__d__instance(VAR1,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__postCity,VAR1,VAR2)
				)
				<=>
				(
					p__postCity(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA160, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PostcodeArea)
					)
				 &
					(
						p__d__instance(VAR1,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__postPostcodeArea,VAR1,VAR2)
				)
				<=>
				(
					p__postPostcodeArea(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA161, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Roadway)
					)
				 &
					(
						p__d__instance(VAR1,c__PostalPlace)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__postStreet,VAR1,VAR2)
				)
				<=>
				(
					p__postStreet(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA162, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__postStreetNumber,VAR1,VAR2)
				)
				<=>
				(
					p__postStreetNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA163, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__postPostOfficeBox,VAR1,VAR2)
				)
				<=>
				(
					p__postPostOfficeBox(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA164, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(VAR1,c__PostalAddressText)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__postAddressText,VAR1,VAR2)
				)
				<=>
				(
					p__postAddressText(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA165, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__TelephonyDevice)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__telecomContactDevice,VAR1,VAR2)
				)
				<=>
				(
					p__telecomContactDevice(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA166, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TelephonyDevice)
					)
				 &
					(
						p__d__instance(VAR1,c__TelecomNumber)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__deviceTelecomNumber,VAR1,VAR2)
				)
				<=>
				(
					p__deviceTelecomNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA167, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__telecomCoreNumber,VAR1,VAR2)
				)
				<=>
				(
					p__telecomCoreNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA168, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__telecomCountryCode,VAR1,VAR2)
				)
				<=>
				(
					p__telecomCountryCode(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA169, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__telecomAreaCode,VAR1,VAR2)
				)
				<=>
				(
					p__telecomAreaCode(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA170, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__telecomCode2,VAR1,VAR2)
				)
				<=>
				(
					p__telecomCode2(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA171, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__telecomExtension,VAR1,VAR2)
				)
				<=>
				(
					p__telecomExtension(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA172, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__TelecomNumber)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__telephoneNumber,VAR1,VAR2)
				)
				<=>
				(
					p__telephoneNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA173, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__TelecomNumber)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__personalPhoneNumber,VAR1,VAR2)
				)
				<=>
				(
					p__personalPhoneNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA174, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__TelecomNumber)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__homePhoneNumber,VAR1,VAR2)
				)
				<=>
				(
					p__homePhoneNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA175, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__TelecomNumber)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__workPhoneNumber,VAR1,VAR2)
				)
				<=>
				(
					p__workPhoneNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA176, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__TelecomNumber)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__mobilePhoneNumber,VAR1,VAR2)
				)
				<=>
				(
					p__mobilePhoneNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA177, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__TelecomNumber)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__faxNumber,VAR1,VAR2)
				)
				<=>
				(
					p__faxNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA178, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__BinaryRelation)
					)
				 &
					(
						p__d__instance(VAR1,c__BinaryRelation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__inverse,VAR1,VAR2)
				)
				<=>
				(
					p__inverse(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA179, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Relation)
					)
				 &
					(
						p__d__instance(VAR1,c__Relation)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__disjointRelation,VAR1,VAR2)
				)
				<=>
				(
					p__disjointRelation(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA180, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Attribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Attribute)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__successorAttributeClosure,VAR1,VAR2)
				)
				<=>
				(
					p__successorAttributeClosure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA181, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__lessThan,VAR1,VAR2)
				)
				<=>
				(
					p__lessThan(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA182, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__greaterThan,VAR1,VAR2)
				)
				<=>
				(
					p__greaterThan(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA183, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__increasesLikelihood,VAR1,VAR2)
				)
				<=>
				(
					p__increasesLikelihood(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA184, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__decreasesLikelihood,VAR1,VAR2)
				)
				<=>
				(
					p__decreasesLikelihood(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA185, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Process)
					)
				 &
					(
						p__d__subclass(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__hindersSubclass,VAR1,VAR2)
				)
				<=>
				(
					p__hindersSubclass(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA186, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Process)
					)
				 &
					(
						p__d__subclass(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__preventsSubclass,VAR1,VAR2)
				)
				<=>
				(
					p__preventsSubclass(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA187, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Process)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__prevents,VAR1,VAR2)
				)
				<=>
				(
					p__prevents(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA188, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Process)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__hinders,VAR1,VAR2)
				)
				<=>
				(
					p__hinders(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA189, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Proposition)
					)
				 &
					(
						p__d__instance(VAR1,c__Proposition)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subProposition,VAR1,VAR2)
				)
				<=>
				(
					p__subProposition(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA190, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Plan)
					)
				 &
					(
						p__d__instance(VAR1,c__Plan)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subPlan,VAR1,VAR2)
				)
				<=>
				(
					p__subPlan(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA191, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__larger,VAR1,VAR2)
				)
				<=>
				(
					p__larger(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA192, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__smaller,VAR1,VAR2)
				)
				<=>
				(
					p__smaller(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA193, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(VAR1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__starts,VAR1,VAR2)
				)
				<=>
				(
					p__starts(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA194, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(VAR1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__finishes,VAR1,VAR2)
				)
				<=>
				(
					p__finishes(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA195, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimePoint)
					)
				 &
					(
						p__d__instance(VAR1,c__TimePoint)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__before,VAR1,VAR2)
				)
				<=>
				(
					p__before(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA196, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(VAR1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__during,VAR1,VAR2)
				)
				<=>
				(
					p__during(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA197, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(VAR1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__earlier,VAR1,VAR2)
				)
				<=>
				(
					p__earlier(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA198, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__meetsSpatially,VAR1,VAR2)
				)
				<=>
				(
					p__meetsSpatially(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA199, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__overlapsPartially,VAR1,VAR2)
				)
				<=>
				(
					p__overlapsPartially(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA200, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__superficialPart,VAR1,VAR2)
				)
				<=>
				(
					p__superficialPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA201, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(VAR1,c__EngineeringComponent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__connectedEngineeringComponents,VAR1,VAR2)
				)
				<=>
				(
					p__connectedEngineeringComponents(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA202, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organism)
					)
				 &
					(
						p__d__instance(VAR1,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__ancestor,VAR1,VAR2)
				)
				<=>
				(
					p__ancestor(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA203, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organism)
					)
				 &
					(
						p__d__instance(VAR1,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__sibling,VAR1,VAR2)
				)
				<=>
				(
					p__sibling(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA204, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Man)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__brother,VAR1,VAR2)
				)
				<=>
				(
					p__brother(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA205, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Woman)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__sister,VAR1,VAR2)
				)
				<=>
				(
					p__sister(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA206, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__spouse,VAR1,VAR2)
				)
				<=>
				(
					p__spouse(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA207, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CompoundSubstance)
					)
				 &
					(
						p__d__instance(VAR1,c__CompoundSubstance)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__conjugate,VAR1,VAR2)
				)
				<=>
				(
					p__conjugate(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA208, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__neighbor,VAR1,VAR2)
				)
				<=>
				(
					p__neighbor(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA209, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__MilitaryUnit)
					)
				 &
					(
						p__d__instance(VAR1,c__MilitaryUnit)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__hostileForces,VAR1,VAR2)
				)
				<=>
				(
					p__hostileForces(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA210, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__FieldOfStudy)
					)
				 &
					(
						p__d__instance(VAR1,c__FieldOfStudy)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subField,VAR1,VAR2)
				)
				<=>
				(
					p__subField(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA211, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organization)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__ancestorOrganization,VAR1,VAR2)
				)
				<=>
				(
					p__ancestorOrganization(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA212, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__SetOrClass)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__disjoint,VAR1,VAR2)
				)
				<=>
				(
					p__disjoint(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA213, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__independentProbability,VAR1,VAR2)
				)
				<=>
				(
					p__independentProbability(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA214, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Process)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__relatedEvent,VAR1,VAR2)
				)
				<=>
				(
					p__relatedEvent(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA215, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organism)
					)
				 &
					(
						p__d__instance(VAR1,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__relative,VAR1,VAR2)
				)
				<=>
				(
					p__relative(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA216, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__legalRelation,VAR1,VAR2)
				)
				<=>
				(
					p__legalRelation(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA217, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__mutualAcquaintance,VAR1,VAR2)
				)
				<=>
				(
					p__mutualAcquaintance(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA218, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Proposition)
					)
				 &
					(
						p__d__instance(VAR1,c__Proposition)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__consistent,VAR1,VAR2)
				)
				<=>
				(
					p__consistent(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA219, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__friend,VAR1,VAR2)
				)
				<=>
				(
					p__friend(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA220, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__coworker,VAR1,VAR2)
				)
				<=>
				(
					p__coworker(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA221, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__cohabitant,VAR1,VAR2)
				)
				<=>
				(
					p__cohabitant(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA222, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__mutualStranger,VAR1,VAR2)
				)
				<=>
				(
					p__mutualStranger(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA223, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__domesticPartner,VAR1,VAR2)
				)
				<=>
				(
					p__domesticPartner(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA224, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__located,VAR1,VAR2)
				)
				<=>
				(
					p__located(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA225, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__DataStorageDevice)
					)
				 &
					(
						p__d__instance(VAR1,c__ContentBearingObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__stored,VAR1,VAR2)
				)
				<=>
				(
					p__stored(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA226, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__legalGuardian,VAR1,VAR2)
				)
				<=>
				(
					p__legalGuardian(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA227, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Integer)
					)
				 &
					(
						p__d__instance(VAR1,c__Integer)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__multiplicativeFactor,VAR1,VAR2)
				)
				<=>
				(
					p__multiplicativeFactor(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA228, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__covers,VAR1,VAR2)
				)
				<=>
				(
					p__covers(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA229, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__UnitOfMeasure)
			)
			=>
			(
				(
					p__d__holds3(c__KiloFn,VAR1,VAR2)
				)
				<=>
				(
					p__KiloFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA230, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__UnitOfMeasure)
			)
			=>
			(
				(
					p__d__holds3(c__MegaFn,VAR1,VAR2)
				)
				<=>
				(
					p__MegaFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA231, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__UnitOfMeasure)
			)
			=>
			(
				(
					p__d__holds3(c__GigaFn,VAR1,VAR2)
				)
				<=>
				(
					p__GigaFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA232, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__UnitOfMeasure)
			)
			=>
			(
				(
					p__d__holds3(c__TeraFn,VAR1,VAR2)
				)
				<=>
				(
					p__TeraFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA233, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__UnitOfMeasure)
			)
			=>
			(
				(
					p__d__holds3(c__MilliFn,VAR1,VAR2)
				)
				<=>
				(
					p__MilliFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA234, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__UnitOfMeasure)
			)
			=>
			(
				(
					p__d__holds3(c__MicroFn,VAR1,VAR2)
				)
				<=>
				(
					p__MicroFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA235, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__UnitOfMeasure)
			)
			=>
			(
				(
					p__d__holds3(c__NanoFn,VAR1,VAR2)
				)
				<=>
				(
					p__NanoFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA236, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__UnitOfMeasure)
			)
			=>
			(
				(
					p__d__holds3(c__PicoFn,VAR1,VAR2)
				)
				<=>
				(
					p__PicoFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA237, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__SetOrClass)
			)
			=>
			(
				(
					p__d__holds3(c__PowerSetFn,VAR1,VAR2)
				)
				<=>
				(
					p__PowerSetFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA238, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Attribute)
			)
			=>
			(
				(
					p__d__holds3(c__ExtensionFn,VAR1,VAR2)
				)
				<=>
				(
					p__ExtensionFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA239, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__List)
			)
			=>
			(
				(
					p__d__holds3(c__ListLengthFn,VAR1,VAR2)
				)
				<=>
				(
					p__ListLengthFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA240, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Agent)
			)
			=>
			(
				(
					p__d__holds3(c__PropertyFn,VAR1,VAR2)
				)
				<=>
				(
					p__PropertyFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA241, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__RealNumber)
			)
			=>
			(
				(
					p__d__holds3(c__AbsoluteValueFn,VAR1,VAR2)
				)
				<=>
				(
					p__AbsoluteValueFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA242, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__RealNumber)
			)
			=>
			(
				(
					p__d__holds3(c__CeilingFn,VAR1,VAR2)
				)
				<=>
				(
					p__CeilingFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA243, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__PlaneAngleMeasure)
			)
			=>
			(
				(
					p__d__holds3(c__CosineFn,VAR1,VAR2)
				)
				<=>
				(
					p__CosineFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA244, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__RealNumber)
			)
			=>
			(
				(
					p__d__holds3(c__DenominatorFn,VAR1,VAR2)
				)
				<=>
				(
					p__DenominatorFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA245, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__RealNumber)
			)
			=>
			(
				(
					p__d__holds3(c__FloorFn,VAR1,VAR2)
				)
				<=>
				(
					p__FloorFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA246, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__ComplexNumber)
			)
			=>
			(
				(
					p__d__holds3(c__ImaginaryPartFn,VAR1,VAR2)
				)
				<=>
				(
					p__ImaginaryPartFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA247, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__RealNumber)
			)
			=>
			(
				(
					p__d__holds3(c__IntegerSquareRootFn,VAR1,VAR2)
				)
				<=>
				(
					p__IntegerSquareRootFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA248, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__RealNumber)
			)
			=>
			(
				(
					p__d__holds3(c__NumeratorFn,VAR1,VAR2)
				)
				<=>
				(
					p__NumeratorFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA249, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Number)
			)
			=>
			(
				(
					p__d__holds3(c__RationalNumberFn,VAR1,VAR2)
				)
				<=>
				(
					p__RationalNumberFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA250, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Number)
			)
			=>
			(
				(
					p__d__holds3(c__RealNumberFn,VAR1,VAR2)
				)
				<=>
				(
					p__RealNumberFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA251, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Quantity)
			)
			=>
			(
				(
					p__d__holds3(c__ReciprocalFn,VAR1,VAR2)
				)
				<=>
				(
					p__ReciprocalFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA252, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Quantity)
			)
			=>
			(
				(
					p__d__holds3(c__RoundFn,VAR1,VAR2)
				)
				<=>
				(
					p__RoundFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA253, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__RealNumber)
			)
			=>
			(
				(
					p__d__holds3(c__SignumFn,VAR1,VAR2)
				)
				<=>
				(
					p__SignumFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA254, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__PlaneAngleMeasure)
			)
			=>
			(
				(
					p__d__holds3(c__SineFn,VAR1,VAR2)
				)
				<=>
				(
					p__SineFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA255, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__RealNumber)
			)
			=>
			(
				(
					p__d__holds3(c__SquareRootFn,VAR1,VAR2)
				)
				<=>
				(
					p__SquareRootFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA256, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__PlaneAngleMeasure)
			)
			=>
			(
				(
					p__d__holds3(c__TangentFn,VAR1,VAR2)
				)
				<=>
				(
					p__TangentFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA257, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Integer)
			)
			=>
			(
				(
					p__d__holds3(c__SuccessorFn,VAR1,VAR2)
				)
				<=>
				(
					p__SuccessorFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA258, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Integer)
			)
			=>
			(
				(
					p__d__holds3(c__PredecessorFn,VAR1,VAR2)
				)
				<=>
				(
					p__PredecessorFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA259, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__SetOrClass)
			)
			=>
			(
				(
					p__d__holds3(c__ComplementFn,VAR1,VAR2)
				)
				<=>
				(
					p__ComplementFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA260, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__subclass(VAR1,c__SetOrClass)
			)
			=>
			(
				(
					p__d__holds3(c__GeneralizedUnionFn,VAR1,VAR2)
				)
				<=>
				(
					p__GeneralizedUnionFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA261, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__subclass(VAR1,c__SetOrClass)
			)
			=>
			(
				(
					p__d__holds3(c__GeneralizedIntersectionFn,VAR1,VAR2)
				)
				<=>
				(
					p__GeneralizedIntersectionFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA262, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__GraphArc)
			)
			=>
			(
				(
					p__d__holds3(c__InitialNodeFn,VAR1,VAR2)
				)
				<=>
				(
					p__InitialNodeFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA263, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__GraphArc)
			)
			=>
			(
				(
					p__d__holds3(c__TerminalNodeFn,VAR1,VAR2)
				)
				<=>
				(
					p__TerminalNodeFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA264, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__GraphPath)
			)
			=>
			(
				(
					p__d__holds3(c__BeginNodeFn,VAR1,VAR2)
				)
				<=>
				(
					p__BeginNodeFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA265, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__GraphPath)
			)
			=>
			(
				(
					p__d__holds3(c__EndNodeFn,VAR1,VAR2)
				)
				<=>
				(
					p__EndNodeFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA266, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__GraphPath)
			)
			=>
			(
				(
					p__d__holds3(c__PathWeightFn,VAR1,VAR2)
				)
				<=>
				(
					p__PathWeightFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA267, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Graph)
			)
			=>
			(
				(
					p__d__holds3(c__CutSetFn,VAR1,VAR2)
				)
				<=>
				(
					p__CutSetFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA268, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Graph)
			)
			=>
			(
				(
					p__d__holds3(c__MinimalCutSetFn,VAR1,VAR2)
				)
				<=>
				(
					p__MinimalCutSetFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA269, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__PhysicalQuantity)
			)
			=>
			(
				(
					p__d__holds3(c__MagnitudeFn,VAR1,VAR2)
				)
				<=>
				(
					p__MagnitudeFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA270, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__PhysicalQuantity)
			)
			=>
			(
				(
					p__d__holds3(c__UnitFn,VAR1,VAR2)
				)
				<=>
				(
					p__UnitFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA271, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Circle)
			)
			=>
			(
				(
					p__d__holds3(c__CenterOfCircleFn,VAR1,VAR2)
				)
				<=>
				(
					p__CenterOfCircleFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA272, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Agent)
			)
			=>
			(
				(
					p__d__holds3(c__WealthFn,VAR1,VAR2)
				)
				<=>
				(
					p__WealthFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA273, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__TimeInterval)
			)
			=>
			(
				(
					p__d__holds3(c__BeginFn,VAR1,VAR2)
				)
				<=>
				(
					p__BeginFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA274, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__TimeInterval)
			)
			=>
			(
				(
					p__d__holds3(c__EndFn,VAR1,VAR2)
				)
				<=>
				(
					p__EndFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA275, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Physical)
			)
			=>
			(
				(
					p__d__holds3(c__WhenFn,VAR1,VAR2)
				)
				<=>
				(
					p__WhenFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA276, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__TimePosition)
			)
			=>
			(
				(
					p__d__holds3(c__PastFn,VAR1,VAR2)
				)
				<=>
				(
					p__PastFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA277, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__TimePosition)
			)
			=>
			(
				(
					p__d__holds3(c__ImmediatePastFn,VAR1,VAR2)
				)
				<=>
				(
					p__ImmediatePastFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA278, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__TimePosition)
			)
			=>
			(
				(
					p__d__holds3(c__FutureFn,VAR1,VAR2)
				)
				<=>
				(
					p__FutureFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA279, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__TimePosition)
			)
			=>
			(
				(
					p__d__holds3(c__ImmediateFutureFn,VAR1,VAR2)
				)
				<=>
				(
					p__ImmediateFutureFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA280, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Integer)
			)
			=>
			(
				(
					p__d__holds3(c__YearFn,VAR1,VAR2)
				)
				<=>
				(
					p__YearFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA281, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Object)
			)
			=>
			(
				(
					p__d__holds3(c__MereologicalComplementFn,VAR1,VAR2)
				)
				<=>
				(
					p__MereologicalComplementFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA282, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__subclass(VAR1,c__Organism)
			)
			=>
			(
				(
					p__d__holds3(c__FoodForFn,VAR1,VAR2)
				)
				<=>
				(
					p__FoodForFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA283, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Human)
			)
			=>
			(
				(
					p__d__holds3(c__ImmediateFamilyFn,VAR1,VAR2)
				)
				<=>
				(
					p__ImmediateFamilyFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA284, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__GeopoliticalArea)
			)
			=>
			(
				(
					p__d__holds3(c__GovernmentFn,VAR1,VAR2)
				)
				<=>
				(
					p__GovernmentFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA285, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Argument)
			)
			=>
			(
				(
					p__d__holds3(c__PremisesFn,VAR1,VAR2)
				)
				<=>
				(
					p__PremisesFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA286, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__subclass(VAR1,c__Organism)
			)
			=>
			(
				(
					p__d__holds3(c__DeadFn,VAR1,VAR2)
				)
				<=>
				(
					p__DeadFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA287, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Process)
			)
			=>
			(
				(
					p__d__holds3(c__StartFn,VAR1,VAR2)
				)
				<=>
				(
					p__StartFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA288, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Process)
			)
			=>
			(
				(
					p__d__holds3(c__StopFn,VAR1,VAR2)
				)
				<=>
				(
					p__StopFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA289, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Circle)
			)
			=>
			(
				(
					p__d__holds3(c__DiameterFn,VAR1,VAR2)
				)
				<=>
				(
					p__DiameterFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA290, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Circle)
			)
			=>
			(
				(
					p__d__holds3(c__RadiusFn,VAR1,VAR2)
				)
				<=>
				(
					p__RadiusFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA291, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__List)
			)
			=>
			(
				(
					p__d__holds3(c__LastFn,VAR1,VAR2)
				)
				<=>
				(
					p__LastFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA292, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__List)
			)
			=>
			(
				(
					p__d__holds3(c__FirstFn,VAR1,VAR2)
				)
				<=>
				(
					p__FirstFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA293, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Human)
			)
			=>
			(
				(
					p__d__holds3(c__DescendantsFn,VAR1,VAR2)
				)
				<=>
				(
					p__DescendantsFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA294, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__GeopoliticalArea)
			)
			=>
			(
				(
					p__d__holds3(c__ResidentFn,VAR1,VAR2)
				)
				<=>
				(
					p__ResidentFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA295, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Device)
			)
			=>
			(
				(
					p__d__holds3(c__OperatingFn,VAR1,VAR2)
				)
				<=>
				(
					p__OperatingFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA296, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__IntentionalProcess)
			)
			=>
			(
				(
					p__d__holds3(c__OccupationFn,VAR1,VAR2)
				)
				<=>
				(
					p__OccupationFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA297, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__SymbolicString)
			)
			=>
			(
				(
					p__d__holds3(c__StringLengthFn,VAR1,VAR2)
				)
				<=>
				(
					p__StringLengthFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA298, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__subclass(VAR1,c__BodyPart)
			)
			=>
			(
				(
					p__d__holds3(c__CoveringFn,VAR1,VAR2)
				)
				<=>
				(
					p__CoveringFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA299, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR2,c__SetOrClass)
			)
			=>
			(
				(
					p__d__holds3(c__instance,VAR1,VAR2)
				)
				<=>
				(
					p__instance(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA300, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR2,c__SymbolicString)
			)
			=>
			(
				(
					p__d__holds3(c__externalImage,VAR1,VAR2)
				)
				<=>
				(
					p__externalImage(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA301, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__entails,VAR1,VAR2)
				)
				<=>
				(
					p__entails(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA302, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CorpuscularObject)
					)
				 &
					(
						p__d__subclass(VAR1,c__Substance)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__material,VAR1,VAR2)
				)
				<=>
				(
					p__material(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA303, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR2,c__Attribute)
			)
			=>
			(
				(
					p__d__holds3(c__property,VAR1,VAR2)
				)
				<=>
				(
					p__property(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA304, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__CognitiveAgent)
			)
			=>
			(
				(
					p__d__holds3(c__inScopeOfInterest,VAR1,VAR2)
				)
				<=>
				(
					p__inScopeOfInterest(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA305, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Physical)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__needs,VAR1,VAR2)
				)
				<=>
				(
					p__needs(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA306, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Physical)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__wants,VAR1,VAR2)
				)
				<=>
				(
					p__wants(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA307, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__BinaryFunction)
					)
				 &
					(
						p__d__instance(VAR1,c__BinaryFunction)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__distributes,VAR1,VAR2)
				)
				<=>
				(
					p__distributes(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA308, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__partlyLocated,VAR1,VAR2)
				)
				<=>
				(
					p__partlyLocated(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA309, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__traverses,VAR1,VAR2)
				)
				<=>
				(
					p__traverses(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA310, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__holds3(c__refers,VAR1,VAR2)
			)
			<=>
			(
				p__refers(VAR1,VAR2)
			)
		)
	)
).

fof( schemaBinaryRelationA311, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__RealNumber)
					)
				 &
					(
						p__d__instance(VAR1,c__List)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__average,VAR1,VAR2)
				)
				<=>
				(
					p__average(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA312, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__GraphArc)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__arcWeight,VAR1,VAR2)
				)
				<=>
				(
					p__arcWeight(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA313, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Physical)
					)
				 &
					(
						p__d__instance(VAR1,c__Abstract)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__abstractCounterpart,VAR1,VAR2)
				)
				<=>
				(
					p__abstractCounterpart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA314, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PhysicalSystem)
					)
				 &
					(
						p__d__instance(VAR1,c__PhysicalSystem)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subSystem,VAR1,VAR2)
				)
				<=>
				(
					p__subSystem(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA315, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PhysicalSystem)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__systemPart,VAR1,VAR2)
				)
				<=>
				(
					p__systemPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA316, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__UnitOfMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__Graph)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__graphMeasure,VAR1,VAR2)
				)
				<=>
				(
					p__graphMeasure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA317, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__MassMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__weight,VAR1,VAR2)
				)
				<=>
				(
					p__weight(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA318, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__Circle)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__radius,VAR1,VAR2)
				)
				<=>
				(
					p__radius(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA319, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__Circle)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__diameter,VAR1,VAR2)
				)
				<=>
				(
					p__diameter(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA320, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__FinancialTransaction)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__transactionAmount,VAR1,VAR2)
				)
				<=>
				(
					p__transactionAmount(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA321, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TemperatureMeasure)
					)
				 &
					(
						p__d__subclass(VAR1,c__PureSubstance)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__boilingPoint,VAR1,VAR2)
				)
				<=>
				(
					p__boilingPoint(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA322, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TemperatureMeasure)
					)
				 &
					(
						p__d__subclass(VAR1,c__PureSubstance)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__meltingPoint,VAR1,VAR2)
				)
				<=>
				(
					p__meltingPoint(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA323, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__WearableItem)
					)
				 &
					(
						p__d__instance(VAR1,c__Animal)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__wears,VAR1,VAR2)
				)
				<=>
				(
					p__wears(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA324, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__acquaintance,VAR1,VAR2)
				)
				<=>
				(
					p__acquaintance(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA325, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__employs,VAR1,VAR2)
				)
				<=>
				(
					p__employs(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA326, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Proposition)
					)
				 &
					(
						p__d__instance(VAR1,c__Argument)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__premise,VAR1,VAR2)
				)
				<=>
				(
					p__premise(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA327, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Proposition)
					)
				 &
					(
						p__d__instance(VAR1,c__Argument)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__conclusion,VAR1,VAR2)
				)
				<=>
				(
					p__conclusion(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA328, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__DirectionalAttribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__faces,VAR1,VAR2)
				)
				<=>
				(
					p__faces(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA329, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__OneDimensionalFigure)
					)
				 &
					(
						p__d__instance(VAR1,c__OneDimensionalFigure)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__parallel,VAR1,VAR2)
				)
				<=>
				(
					p__parallel(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA330, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PlaneAngleMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__TwoDimensionalAngle)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__angularMeasure,VAR1,VAR2)
				)
				<=>
				(
					p__angularMeasure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA331, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__OneDimensionalFigure)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__lineMeasure,VAR1,VAR2)
				)
				<=>
				(
					p__lineMeasure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA332, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__older,VAR1,VAR2)
				)
				<=>
				(
					p__older(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA333, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Language)
					)
				 &
					(
						p__d__instance(VAR1,c__SentientAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__speaksLanguage,VAR1,VAR2)
				)
				<=>
				(
					p__speaksLanguage(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA334, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__FunctionQuantity)
					)
				 &
					(
						p__d__instance(VAR1,c__MusicalTone)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__soundFrequency,VAR1,VAR2)
				)
				<=>
				(
					p__soundFrequency(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA335, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__TimePosition)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__dateEstablished,VAR1,VAR2)
				)
				<=>
				(
					p__dateEstablished(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA336, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__Device)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__effectiveRange,VAR1,VAR2)
				)
				<=>
				(
					p__effectiveRange(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA337, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__DeviceStateAttribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__deviceState,VAR1,VAR2)
				)
				<=>
				(
					p__deviceState(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA338, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__discovers,VAR1,VAR2)
				)
				<=>
				(
					p__discovers(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA339, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__ConstantQuantity)
					)
				 &
					(
						p__d__instance(VAR1,c__MeasuringDevice)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__measurementReading,VAR1,VAR2)
				)
				<=>
				(
					p__measurementReading(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA340, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__emailAddress,VAR1,VAR2)
				)
				<=>
				(
					p__emailAddress(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA341, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__RealNumber)
					)
				 &
					(
						p__d__instance(VAR1,c__Solution)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__potentialOfHydrogen,VAR1,VAR2)
				)
				<=>
				(
					p__potentialOfHydrogen(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA342, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Integer)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__fleetSize,VAR1,VAR2)
				)
				<=>
				(
					p__fleetSize(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA343, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__carries,VAR1,VAR2)
				)
				<=>
				(
					p__carries(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA344, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TwoDimensionalFigure)
					)
				 &
					(
						p__d__instance(VAR1,c__OneDimensionalFigure)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__tangent,VAR1,VAR2)
				)
				<=>
				(
					p__tangent(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA345, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(VAR1,c__TwoDimensionalObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__sliceOfFigure,VAR1,VAR2)
				)
				<=>
				(
					p__sliceOfFigure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA346, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__patientMedical,VAR1,VAR2)
				)
				<=>
				(
					p__patientMedical(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA347, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organism)
					)
				 &
					(
						p__d__instance(VAR1,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__parasite,VAR1,VAR2)
				)
				<=>
				(
					p__parasite(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA348, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__ConstantQuantity)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__capacity,VAR1,VAR2)
				)
				<=>
				(
					p__capacity(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA349, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(VAR1,c__StationaryArtifact)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__humanCapacity,VAR1,VAR2)
				)
				<=>
				(
					p__humanCapacity(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA350, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PermanentResidence)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__landlord,VAR1,VAR2)
				)
				<=>
				(
					p__landlord(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA351, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Residence)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__tenant,VAR1,VAR2)
				)
				<=>
				(
					p__tenant(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA352, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__expects,VAR1,VAR2)
				)
				<=>
				(
					p__expects(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA353, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CareOrganization)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__medicalPatient,VAR1,VAR2)
				)
				<=>
				(
					p__medicalPatient(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA354, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__RationalNumber)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__intelligenceQuotient,VAR1,VAR2)
				)
				<=>
				(
					p__intelligenceQuotient(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA355, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__NaturalSubstance)
					)
				 &
					(
						p__d__subclass(VAR1,c__OrganicObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__secretesSubstance,VAR1,VAR2)
				)
				<=>
				(
					p__secretesSubstance(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA356, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Agent)
			)
			=>
			(
				(
					p__d__holds3(c__creator,VAR1,VAR2)
				)
				<=>
				(
					p__creator(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA357, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agreement)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__partyToAgreement,VAR1,VAR2)
				)
				<=>
				(
					p__partyToAgreement(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA358, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(VAR1,c__Agreement)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__agreementPeriod,VAR1,VAR2)
				)
				<=>
				(
					p__agreementPeriod(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA359, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimePoint)
					)
				 &
					(
						p__d__instance(VAR1,c__Agreement)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__agreementEffectiveDate,VAR1,VAR2)
				)
				<=>
				(
					p__agreementEffectiveDate(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA360, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimePoint)
					)
				 &
					(
						p__d__instance(VAR1,c__Agreement)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__agreementExpirationDate,VAR1,VAR2)
				)
				<=>
				(
					p__agreementExpirationDate(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA361, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__SymbolicString)
			)
			=>
			(
				(
					p__d__holds3(c__localLongName,VAR1,VAR2)
				)
				<=>
				(
					p__localLongName(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA362, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__SymbolicString)
			)
			=>
			(
				(
					p__d__holds3(c__localShortName,VAR1,VAR2)
				)
				<=>
				(
					p__localShortName(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA363, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Process)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__commentator,VAR1,VAR2)
				)
				<=>
				(
					p__commentator(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA364, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__describes,VAR1,VAR2)
				)
				<=>
				(
					p__describes(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA365, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__Certificate)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__issuedBy,VAR1,VAR2)
				)
				<=>
				(
					p__issuedBy(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA366, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Physical)
					)
				 &
					(
						p__d__instance(VAR1,c__Text)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__registeredItem,VAR1,VAR2)
				)
				<=>
				(
					p__registeredItem(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA367, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__axis,VAR1,VAR2)
				)
				<=>
				(
					p__axis(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA368, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__WaterArea)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__waterDepth,VAR1,VAR2)
				)
				<=>
				(
					p__waterDepth(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA369, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__hasAward,VAR1,VAR2)
				)
				<=>
				(
					p__hasAward(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA370, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Animal)
					)
				 &
					(
						p__d__subclass(VAR1,c__Meat)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__meatOfAnimal,VAR1,VAR2)
				)
				<=>
				(
					p__meatOfAnimal(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA371, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__FinancialTransaction)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__occupation,VAR1,VAR2)
				)
				<=>
				(
					p__occupation(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA372, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(VAR1,c__StationaryArtifact)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__constructionPeriod,VAR1,VAR2)
				)
				<=>
				(
					p__constructionPeriod(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA373, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__StationaryArtifact)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__contractor,VAR1,VAR2)
				)
				<=>
				(
					p__contractor(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA374, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__FieldOfStudy)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__hasExpertise,VAR1,VAR2)
				)
				<=>
				(
					p__hasExpertise(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA375, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__IntentionalProcess)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__hasOccupation,VAR1,VAR2)
				)
				<=>
				(
					p__hasOccupation(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA376, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(VAR1,c__PureSubstance)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__protonNumber,VAR1,VAR2)
				)
				<=>
				(
					p__protonNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA377, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(VAR1,c__PureSubstance)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__electronNumber,VAR1,VAR2)
				)
				<=>
				(
					p__electronNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA378, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Integer)
					)
				 &
					(
						p__d__instance(VAR1,c__Collection)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__memberCount,VAR1,VAR2)
				)
				<=>
				(
					p__memberCount(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA379, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__Collection)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__memberType,VAR1,VAR2)
				)
				<=>
				(
					p__memberType(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA380, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Collection)
					)
				 &
					(
						p__d__instance(VAR1,c__ContentBearingObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__inventory,VAR1,VAR2)
				)
				<=>
				(
					p__inventory(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA381, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__stranger,VAR1,VAR2)
				)
				<=>
				(
					p__stranger(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA382, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Object)
					)
				 &
					(
						p__d__subclass(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__typicalPart,VAR1,VAR2)
				)
				<=>
				(
					p__typicalPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA383, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Object)
					)
				 &
					(
						p__d__subclass(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__typicallyContainsPart,VAR1,VAR2)
				)
				<=>
				(
					p__typicallyContainsPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA384, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Object)
					)
				 &
					(
						p__d__subclass(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__initialPart,VAR1,VAR2)
				)
				<=>
				(
					p__initialPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA385, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Object)
					)
				 &
					(
						p__d__subclass(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__initiallyContainsPart,VAR1,VAR2)
				)
				<=>
				(
					p__initiallyContainsPart(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA386, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organization)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__affiliatedOrganization,VAR1,VAR2)
				)
				<=>
				(
					p__affiliatedOrganization(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA387, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__FormOfGovernment)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__ideologicalAffiliationOfOrganization,VAR1,VAR2)
				)
				<=>
				(
					p__ideologicalAffiliationOfOrganization(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA388, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__BeliefGroup)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__religiousAffiliationOfOrganization,VAR1,VAR2)
				)
				<=>
				(
					p__religiousAffiliationOfOrganization(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA389, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__allegiance,VAR1,VAR2)
				)
				<=>
				(
					p__allegiance(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA390, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__anniversary,VAR1,VAR2)
				)
				<=>
				(
					p__anniversary(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA391, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Animal)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__birthplace,VAR1,VAR2)
				)
				<=>
				(
					p__birthplace(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA392, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Day)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__birthdate,VAR1,VAR2)
				)
				<=>
				(
					p__birthdate(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA393, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Day)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__deathdate,VAR1,VAR2)
				)
				<=>
				(
					p__deathdate(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA394, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Animal)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__deathplace,VAR1,VAR2)
				)
				<=>
				(
					p__deathplace(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA395, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Device)
					)
				 &
					(
						p__d__instance(VAR1,c__Artifact)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__equipmentType,VAR1,VAR2)
				)
				<=>
				(
					p__equipmentType(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA396, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Sentence)
					)
				 &
					(
						p__d__instance(VAR1,c__Phrase)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__grammaticalRelation,VAR1,VAR2)
				)
				<=>
				(
					p__grammaticalRelation(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA397, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Transitway)
					)
				 &
					(
						p__d__instance(VAR1,c__ConstantQuantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__distanceOnPath,VAR1,VAR2)
				)
				<=>
				(
					p__distanceOnPath(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA398, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR1,c__Character)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__inString,VAR1,VAR2)
				)
				<=>
				(
					p__inString(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA399, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__unitNumber,VAR1,VAR2)
				)
				<=>
				(
					p__unitNumber(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA400, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__floorCode,VAR1,VAR2)
				)
				<=>
				(
					p__floorCode(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA401, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PhysicalQuantity)
					)
				 &
					(
						p__d__instance(VAR1,c__PowerSource)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__voltageMeasure,VAR1,VAR2)
				)
				<=>
				(
					p__voltageMeasure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA402, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__UniformClothing)
					)
				 &
					(
						p__d__instance(VAR1,c__Group)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__hasUniform,VAR1,VAR2)
				)
				<=>
				(
					p__hasUniform(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA403, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Policy)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__policyOwner,VAR1,VAR2)
				)
				<=>
				(
					p__policyOwner(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA404, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__RealNumber)
					)
				 &
					(
						p__d__instance(VAR1,c__RealNumber)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__approximateValue,VAR1,VAR2)
				)
				<=>
				(
					p__approximateValue(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA405, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__GeopoliticalArea)
			)
			=>
			(
				(
					p__d__holds3(c__CitizenryFn,VAR1,VAR2)
				)
				<=>
				(
					p__CitizenryFn(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA406, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Set)
					)
				 &
					(
						p__d__instance(VAR1,c__Set)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__subset,VAR1,VAR2)
				)
				<=>
				(
					p__subset(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA407, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Substance)
					)
				 &
					(
						p__d__instance(VAR1,c__Substance)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__piece,VAR1,VAR2)
				)
				<=>
				(
					p__piece(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA408, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(VAR1,c__CorpuscularObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__component,VAR1,VAR2)
				)
				<=>
				(
					p__component(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA409, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__bottom,VAR1,VAR2)
				)
				<=>
				(
					p__bottom(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA410, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__top,VAR1,VAR2)
				)
				<=>
				(
					p__top(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA411, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__side,VAR1,VAR2)
				)
				<=>
				(
					p__side(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA412, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(VAR1,c__EngineeringComponent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__engineeringSubcomponent,VAR1,VAR2)
				)
				<=>
				(
					p__engineeringSubcomponent(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA413, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GroupOfPeople)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__groupMember,VAR1,VAR2)
				)
				<=>
				(
					p__groupMember(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA414, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__half,VAR1,VAR2)
				)
				<=>
				(
					p__half(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA415, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__third,VAR1,VAR2)
				)
				<=>
				(
					p__third(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA416, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__quarter,VAR1,VAR2)
				)
				<=>
				(
					p__quarter(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA417, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__most,VAR1,VAR2)
				)
				<=>
				(
					p__most(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA418, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__EducationalOrganization)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__student,VAR1,VAR2)
				)
				<=>
				(
					p__student(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA419, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__EducationalOrganization)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__teacher,VAR1,VAR2)
				)
				<=>
				(
					p__teacher(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA420, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GeometricFigure)
					)
				 &
					(
						p__d__instance(VAR1,c__GeometricPoint)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__pointOfFigure,VAR1,VAR2)
				)
				<=>
				(
					p__pointOfFigure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA421, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GeometricFigure)
					)
				 &
					(
						p__d__instance(VAR1,c__TwoDimensionalAngle)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__angleOfFigure,VAR1,VAR2)
				)
				<=>
				(
					p__angleOfFigure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA422, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GeometricFigure)
					)
				 &
					(
						p__d__instance(VAR1,c__OneDimensionalFigure)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__sideOfFigure,VAR1,VAR2)
				)
				<=>
				(
					p__sideOfFigure(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA423, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organism)
					)
				 &
					(
						p__d__instance(VAR1,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__mother,VAR1,VAR2)
				)
				<=>
				(
					p__mother(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA424, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organism)
					)
				 &
					(
						p__d__instance(VAR1,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__father,VAR1,VAR2)
				)
				<=>
				(
					p__father(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA425, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organism)
					)
				 &
					(
						p__d__instance(VAR1,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__daughter,VAR1,VAR2)
				)
				<=>
				(
					p__daughter(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA426, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Organism)
					)
				 &
					(
						p__d__instance(VAR1,c__Organism)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__son,VAR1,VAR2)
				)
				<=>
				(
					p__son(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA427, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Woman)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__grandmother,VAR1,VAR2)
				)
				<=>
				(
					p__grandmother(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA428, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Man)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__grandfather,VAR1,VAR2)
				)
				<=>
				(
					p__grandfather(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA429, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Woman)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__aunt,VAR1,VAR2)
				)
				<=>
				(
					p__aunt(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA430, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__cousin,VAR1,VAR2)
				)
				<=>
				(
					p__cousin(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA431, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Man)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__nephew,VAR1,VAR2)
				)
				<=>
				(
					p__nephew(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA432, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Woman)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__niece,VAR1,VAR2)
				)
				<=>
				(
					p__niece(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA433, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Man)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__uncle,VAR1,VAR2)
				)
				<=>
				(
					p__uncle(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA434, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Animal)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__grasps,VAR1,VAR2)
				)
				<=>
				(
					p__grasps(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA435, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__LegalAction)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__plaintiff,VAR1,VAR2)
				)
				<=>
				(
					p__plaintiff(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA436, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Agent)
					)
				 &
					(
						p__d__instance(VAR1,c__Contest)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__contestParticipant,VAR1,VAR2)
				)
				<=>
				(
					p__contestParticipant(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA437, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Demonstrating)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__attends,VAR1,VAR2)
				)
				<=>
				(
					p__attends(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA438, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Physical)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__instrument,VAR1,VAR2)
				)
				<=>
				(
					p__instrument(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA439, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__resource,VAR1,VAR2)
				)
				<=>
				(
					p__resource(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA440, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__Process)
			)
			=>
			(
				(
					p__d__holds3(c__result,VAR1,VAR2)
				)
				<=>
				(
					p__result(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA441, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Substance)
					)
				 &
					(
						p__d__instance(VAR1,c__ChemicalProcess)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__reactant,VAR1,VAR2)
				)
				<=>
				(
					p__reactant(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA442, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Substance)
					)
				 &
					(
						p__d__instance(VAR1,c__ChemicalProcess)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__reagent,VAR1,VAR2)
				)
				<=>
				(
					p__reagent(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA443, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__LegalAction)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__defendant,VAR1,VAR2)
				)
				<=>
				(
					p__defendant(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA444, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__eventLocated,VAR1,VAR2)
				)
				<=>
				(
					p__eventLocated(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA445, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__ColorAttribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__color,VAR1,VAR2)
				)
				<=>
				(
					p__color(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA446, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__financialAsset,VAR1,VAR2)
				)
				<=>
				(
					p__financialAsset(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA447, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeDuration)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__age,VAR1,VAR2)
				)
				<=>
				(
					p__age(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA448, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__linearExtent,VAR1,VAR2)
				)
				<=>
				(
					p__linearExtent(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA449, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__width,VAR1,VAR2)
				)
				<=>
				(
					p__width(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA450, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__height,VAR1,VAR2)
				)
				<=>
				(
					p__height(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA451, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__length,VAR1,VAR2)
				)
				<=>
				(
					p__length(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA452, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__monetaryValue,VAR1,VAR2)
				)
				<=>
				(
					p__monetaryValue(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA453, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__Radiating)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__wavelength,VAR1,VAR2)
				)
				<=>
				(
					p__wavelength(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA454, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TemperatureMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__airTemperature,VAR1,VAR2)
				)
				<=>
				(
					p__airTemperature(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA455, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PermanentResidence)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__home,VAR1,VAR2)
				)
				<=>
				(
					p__home(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA456, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TemporaryResidence)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__stays,VAR1,VAR2)
				)
				<=>
				(
					p__stays(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA457, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Man)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__stepfather,VAR1,VAR2)
				)
				<=>
				(
					p__stepfather(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA458, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Woman)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__stepmother,VAR1,VAR2)
				)
				<=>
				(
					p__stepmother(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA459, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__exactlyLocated,VAR1,VAR2)
				)
				<=>
				(
					p__exactlyLocated(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA460, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__headquartersOfOrganization,VAR1,VAR2)
				)
				<=>
				(
					p__headquartersOfOrganization(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA461, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Vehicle)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__onboard,VAR1,VAR2)
				)
				<=>
				(
					p__onboard(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA462, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TruthValue)
					)
				 &
					(
						p__d__instance(VAR1,c__Sentence)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__truth,VAR1,VAR2)
				)
				<=>
				(
					p__truth(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA463, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__CognitiveAgent)
			)
			=>
			(
				(
					p__d__holds3(c__enjoys,VAR1,VAR2)
				)
				<=>
				(
					p__enjoys(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA464, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__dislikes,VAR1,VAR2)
				)
				<=>
				(
					p__dislikes(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA465, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Physical)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__lacks,VAR1,VAR2)
				)
				<=>
				(
					p__lacks(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA466, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__approves,VAR1,VAR2)
				)
				<=>
				(
					p__approves(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA467, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__SymbolicString)
			)
			=>
			(
				(
					p__d__holds3(c__names,VAR1,VAR2)
				)
				<=>
				(
					p__names(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA468, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__SymbolicString)
			)
			=>
			(
				(
					p__d__holds3(c__uniqueIdentifier,VAR1,VAR2)
				)
				<=>
				(
					p__uniqueIdentifier(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA469, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__holds3(c__represents,VAR1,VAR2)
			)
			<=>
			(
				p__represents(VAR1,VAR2)
			)
		)
	)
).

fof( schemaBinaryRelationA470, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Physical)
					)
				 &
					(
						p__d__instance(VAR1,c__ContentBearingObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__record,VAR1,VAR2)
				)
				<=>
				(
					p__record(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA471, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__SymbolicString)
			)
			=>
			(
				(
					p__d__holds3(c__titles,VAR1,VAR2)
				)
				<=>
				(
					p__titles(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA472, axiom,
	(![VAR1,VAR2]: 
		(
			(
				p__d__instance(VAR1,c__SymbolicString)
			)
			=>
			(
				(
					p__d__holds3(c__formerName,VAR1,VAR2)
				)
				<=>
				(
					p__formerName(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA473, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Proposition)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__conforms,VAR1,VAR2)
				)
				<=>
				(
					p__conforms(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA474, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__fears,VAR1,VAR2)
				)
				<=>
				(
					p__fears(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA475, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__hopes,VAR1,VAR2)
				)
				<=>
				(
					p__hopes(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA476, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Day)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__birthday,VAR1,VAR2)
				)
				<=>
				(
					p__birthday(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA477, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Sentence)
					)
				 &
					(
						p__d__instance(VAR1,c__NounPhrase)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__sententialObject,VAR1,VAR2)
				)
				<=>
				(
					p__sententialObject(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaBinaryRelationA478, axiom,
	(![VAR1,VAR2]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Sentence)
					)
				 &
					(
						p__d__instance(VAR1,c__NounPhrase)
					)
				)
			)
			=>
			(
				(
					p__d__holds3(c__sententialSubject,VAR1,VAR2)
				)
				<=>
				(
					p__sententialSubject(VAR1,VAR2)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA1, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__MultiplicationFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__MultiplicationFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA2, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__AdditionFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__AdditionFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA3, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__SubtractionFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__SubtractionFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA4, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__DivisionFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__DivisionFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA5, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__MaxFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__MaxFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA6, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__MinFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__MinFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA7, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(VAR1,c__List)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__ListOrderFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__ListOrderFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA8, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__List)
					)
				 &
					(
						p__d__instance(VAR1,c__List)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__ListConcatenateFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__ListConcatenateFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA9, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimePoint)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__WhereFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__WhereFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA10, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Integer)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__ExponentiationFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__ExponentiationFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA11, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(VAR1,c__RealNumber)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__LogFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__LogFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA12, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Quantity)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__RemainderFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__RemainderFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA13, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__SetOrClass)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__UnionFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__UnionFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA14, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__SetOrClass)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__IntersectionFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__IntersectionFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA15, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__SetOrClass)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__RelativeComplementFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__RelativeComplementFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA16, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__KappaFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__KappaFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA17, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GraphNode)
					)
				 &
					(
						p__d__instance(VAR1,c__GraphNode)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__MinimalWeightedPathFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__MinimalWeightedPathFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA18, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GraphNode)
					)
				 &
					(
						p__d__instance(VAR1,c__GraphNode)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__MaximalWeightedPathFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__MaximalWeightedPathFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA19, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GraphNode)
					)
				 &
					(
						p__d__instance(VAR1,c__GraphNode)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__GraphPathFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__GraphPathFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA20, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__UnitOfMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__RealNumber)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__MeasureFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__MeasureFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA21, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__ConstantQuantity)
					)
				 &
					(
						p__d__instance(VAR1,c__ConstantQuantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__IntervalFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__IntervalFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA22, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PhysicalQuantity)
					)
				 &
					(
						p__d__instance(VAR1,c__PhysicalQuantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__PerFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__PerFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA23, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimePoint)
					)
				 &
					(
						p__d__instance(VAR1,c__TimePoint)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__TimeIntervalFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__TimeIntervalFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA24, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__TimeInterval)
					)
				 &
					(
						p__d__subclass(VAR1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__RecurrentTimeIntervalFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__RecurrentTimeIntervalFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA25, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Year)
					)
				 &
					(
						p__d__subclass(VAR1,c__Month)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__MonthFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__MonthFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA26, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Month)
					)
				 &
					(
						p__d__instance(VAR1,c__PositiveInteger)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__DayFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__DayFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA27, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Day)
					)
				 &
					(
						p__d__instance(VAR1,c__NonnegativeInteger)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__HourFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__HourFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA28, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Hour)
					)
				 &
					(
						p__d__instance(VAR1,c__NonnegativeInteger)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__MinuteFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__MinuteFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA29, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__Minute)
					)
				 &
					(
						p__d__instance(VAR1,c__PositiveRealNumber)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__SecondFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__SecondFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA30, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__subclass(VAR2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(VAR1,c__TimeInterval)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__TemporalCompositionFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__TemporalCompositionFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA31, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__MereologicalSumFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__MereologicalSumFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA32, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__MereologicalProductFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__MereologicalProductFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA33, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__MereologicalDifferenceFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__MereologicalDifferenceFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA34, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(VAR1,c__ContentBearingObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__EditionFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__EditionFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA35, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeZone)
					)
				 &
					(
						p__d__instance(VAR1,c__TimePosition)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__RelativeTimeFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__RelativeTimeFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA36, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(VAR1,c__Quantity)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__PerCapitaFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__PerCapitaFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA37, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeDuration)
					)
				 &
					(
						p__d__instance(VAR1,c__TimePoint)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__TimePeriodFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__TimePeriodFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA38, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(VAR1,c__Series)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__SeriesVolumeFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__SeriesVolumeFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA39, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(VAR1,c__Periodical)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__PeriodicalIssueFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__PeriodicalIssueFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA40, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__StringConcatenateFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__StringConcatenateFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA41, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(VAR1,c__Relation)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__domain,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__domain(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA42, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(VAR1,c__Relation)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__domainSubclass,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__domainSubclass(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA43, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR2,c__HumanLanguage)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__documentation,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__documentation(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA44, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR1,c__Language)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__format,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__format(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA45, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR1,c__Language)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__termFormat,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__termFormat(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA46, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Language)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__relatedExternalConcept,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__relatedExternalConcept(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA47, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				p__d__instance(VAR3,c__Attribute)
			)
			=>
			(
				(
					p__d__holds4(c__greaterThanByQuality,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__greaterThanByQuality(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA48, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__RealNumber)
					)
				 &
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__conditionalProbability,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__conditionalProbability(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA49, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Formula)
					)
				 &
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__CognitiveAgent)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__prefers,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__prefers(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA50, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Object)
					)
				 &
					(
						p__d__instance(VAR2,c__CaseRole)
					)
				 &
					(
						p__d__subclass(VAR1,c__Process)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__capability,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__capability(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA51, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR2,c__Formula)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__hasPurposeForAgent,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__hasPurposeForAgent(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA52, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__ObjectiveNorm)
					)
				 &
					(
						p__d__instance(VAR2,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__confersNorm,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__confersNorm(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA53, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__ObjectiveNorm)
					)
				 &
					(
						p__d__instance(VAR2,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__deprivesNorm,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__deprivesNorm(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA54, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Object)
					)
				 &
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__between,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__between(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA55, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				p__d__instance(VAR3,c__Agent)
			)
			=>
			(
				(
					p__d__holds4(c__representsForAgent,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__representsForAgent(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA56, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Language)
					)
				 &
					(
						p__d__instance(VAR1,c__LinguisticExpression)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__representsInLanguage,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__representsInLanguage(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA57, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__GraphArc)
					)
				 &
					(
						p__d__instance(VAR2,c__GraphNode)
					)
				 &
					(
						p__d__instance(VAR1,c__GraphNode)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__links,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__links(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA58, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR2,c__Physical)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__distance,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__distance(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA59, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__TimePoint)
					)
				 &
					(
						p__d__instance(VAR2,c__TimePoint)
					)
				 &
					(
						p__d__instance(VAR1,c__TimePoint)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__temporallyBetween,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__temporallyBetween(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA60, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__TimePoint)
					)
				 &
					(
						p__d__instance(VAR2,c__TimePoint)
					)
				 &
					(
						p__d__instance(VAR1,c__TimePoint)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__temporallyBetweenOrEqual,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__temporallyBetweenOrEqual(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA61, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(VAR2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__connects,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__connects(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA62, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__PositionalAttribute)
					)
				 &
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__orientation,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__orientation(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA63, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Organization)
					)
				 &
					(
						p__d__instance(VAR2,c__Position)
					)
				 &
					(
						p__d__instance(VAR1,c__Human)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__occupiesPosition,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__occupiesPosition(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA64, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__confersRight,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__confersRight(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA65, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR1,c__Formula)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__confersObligation,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__confersObligation(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA66, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__GeometricPoint)
					)
				 &
					(
						p__d__instance(VAR2,c__OneDimensionalFigure)
					)
				 &
					(
						p__d__instance(VAR1,c__OneDimensionalFigure)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__pointOfIntersection,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__pointOfIntersection(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA67, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR2,c__GeometricPoint)
					)
				 &
					(
						p__d__instance(VAR1,c__GeometricPoint)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__geometricDistance,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__geometricDistance(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA68, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR2,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__comment,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__comment(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA69, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Agent)
					)
				 &
					(
						p__d__instance(VAR2,c__TimePoint)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__dateUsed,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__dateUsed(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA70, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Agent)
					)
				 &
					(
						p__d__instance(VAR2,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__price,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__price(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA71, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__NonnegativeInteger)
					)
				 &
					(
						p__d__instance(VAR2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(VAR1,c__Collection)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__memberTypeCount,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__memberTypeCount(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA72, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__TimePosition)
					)
				 &
					(
						p__d__instance(VAR2,c__Collection)
					)
				 &
					(
						p__d__instance(VAR1,c__SelfConnectedObject)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__memberAtTime,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__memberAtTime(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA73, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Human)
					)
				 &
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__subordinateInOrganization,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__subordinateInOrganization(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA74, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Position)
					)
				 &
					(
						p__d__instance(VAR2,c__Position)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__subordinatePosition,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__subordinatePosition(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA75, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__GeographicArea)
					)
				 &
					(
						p__d__subclass(VAR2,c__Process)
					)
				 &
					(
						p__d__instance(VAR1,c__Agent)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__areaOfResponsibility,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__areaOfResponsibility(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA76, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Process)
					)
				 &
					(
						p__d__instance(VAR2,c__CaseRole)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__playsRoleInEvent,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__playsRoleInEvent(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA77, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Object)
					)
				 &
					(
						p__d__instance(VAR2,c__TimePosition)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__locatedAtTime,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__locatedAtTime(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA78, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Quantity)
					)
				 &
					(
						p__d__subclass(VAR2,c__Device)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__equipmentCount,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__equipmentCount(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA79, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__stringConcatenation,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__stringConcatenation(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA80, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__precedesInString,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__precedesInString(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA81, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(VAR2,c__Language)
					)
				 &
					(
						p__d__instance(VAR1,c__Region)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__canonicalPlaceName,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__canonicalPlaceName(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA82, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__VolumeMeasure)
					)
				 &
					(
						p__d__instance(VAR1,c__MassMeasure)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__DensityFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__DensityFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA83, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR2,c__TimeDuration)
					)
				 &
					(
						p__d__instance(VAR1,c__LengthMeasure)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__SpeedFn,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__SpeedFn(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA84, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR2,c__Physical)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__altitude,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__altitude(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA85, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(VAR2,c__Physical)
					)
				 &
					(
						p__d__instance(VAR1,c__Physical)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__depth,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__depth(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA86, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(VAR2,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(VAR1,c__EngineeringConnection)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__connectsEngineeringComponents,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__connectsEngineeringComponents(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA87, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Language)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__synonymousExternalConcept,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__synonymousExternalConcept(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA88, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Language)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__subsumingExternalConcept,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__subsumingExternalConcept(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaTernaryRelationA89, axiom,
	(![VAR1,VAR2,VAR3]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__Language)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds4(c__subsumedExternalConcept,VAR1,VAR2,VAR3)
				)
				<=>
				(
					p__subsumedExternalConcept(VAR1,VAR2,VAR3)
				)
			)
		)
	)
).

fof( schemaQuaternaryRelationA1, axiom,
	(![VAR1,VAR2,VAR3,VAR4]: 
		(
			(
				(
					(
						p__d__instance(VAR3,c__NonnegativeInteger)
					)
				 &
					(
						p__d__instance(VAR2,c__NonnegativeInteger)
					)
				 &
					(
						p__d__instance(VAR1,c__SymbolicString)
					)
				)
			)
			=>
			(
				(
					p__d__holds5(c__SubstringFn,VAR1,VAR2,VAR3,VAR4)
				)
				<=>
				(
					p__SubstringFn(VAR1,VAR2,VAR3,VAR4)
				)
			)
		)
	)
).

fof( schemaQuaternaryRelationA2, axiom,
	(![VAR1,VAR2,VAR3,VAR4]: 
		(
			(
				(
					(
						p__d__instance(VAR4,c__Object)
					)
				 &
					(
						p__d__instance(VAR3,c__Object)
					)
				 &
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds5(c__betweenOnPath,VAR1,VAR2,VAR3,VAR4)
				)
				<=>
				(
					p__betweenOnPath(VAR1,VAR2,VAR3,VAR4)
				)
			)
		)
	)
).

fof( schemaQuaternaryRelationA3, axiom,
	(![VAR1,VAR2,VAR3,VAR4]: 
		(
			(
				(
					(
						p__d__instance(VAR4,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(VAR3,c__Agreement)
					)
				 &
					(
						p__d__instance(VAR2,c__DeonticAttribute)
					)
				 &
					(
						p__d__instance(VAR1,c__Proposition)
					)
				)
			)
			=>
			(
				(
					p__d__holds5(c__agreementClause,VAR1,VAR2,VAR3,VAR4)
				)
				<=>
				(
					p__agreementClause(VAR1,VAR2,VAR3,VAR4)
				)
			)
		)
	)
).

fof( schemaQuaternaryRelationA4, axiom,
	(![VAR1,VAR2,VAR3,VAR4]: 
		(
			(
				(
					(
						p__d__instance(VAR4,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(VAR3,c__TimeDuration)
					)
				 &
					(
						p__d__instance(VAR2,c__Human)
					)
				 &
					(
						p__d__instance(VAR1,c__Organization)
					)
				)
			)
			=>
			(
				(
					p__d__holds5(c__monetaryWage,VAR1,VAR2,VAR3,VAR4)
				)
				<=>
				(
					p__monetaryWage(VAR1,VAR2,VAR3,VAR4)
				)
			)
		)
	)
).

fof( schemaQuaternaryRelationA5, axiom,
	(![VAR1,VAR2,VAR3,VAR4]: 
		(
			(
				(
					(
						p__d__instance(VAR4,c__Transfer)
					)
				 &
					(
						p__d__instance(VAR3,c__Object)
					)
				 &
					(
						p__d__instance(VAR2,c__Object)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds5(c__beforeOnPath,VAR1,VAR2,VAR3,VAR4)
				)
				<=>
				(
					p__beforeOnPath(VAR1,VAR2,VAR3,VAR4)
				)
			)
		)
	)
).

fof( schemaQuintaryRelationA1, axiom,
	(![VAR1,VAR2,VAR3,VAR4,VAR5]: 
		(
			(
				(
					(
						p__d__instance(VAR4,c__DirectionalAttribute)
					)
				 &
					(
						p__d__instance(VAR3,c__Region)
					)
				 &
					(
						p__d__instance(VAR2,c__TimeDuration)
					)
				 &
					(
						p__d__instance(VAR1,c__LengthMeasure)
					)
				)
			)
			=>
			(
				(
					p__d__holds6(c__VelocityFn,VAR1,VAR2,VAR3,VAR4,VAR5)
				)
				<=>
				(
					p__VelocityFn(VAR1,VAR2,VAR3,VAR4,VAR5)
				)
			)
		)
	)
).

fof( schemaQuintaryRelationA2, axiom,
	(![VAR1,VAR2,VAR3,VAR4,VAR5]: 
		(
			(
				(
					(
						p__d__instance(VAR4,c__Nation)
					)
				 &
					(
						p__d__instance(VAR3,c__City)
					)
				 &
					(
						p__d__instance(VAR2,c__Roadway)
					)
				 &
					(
						p__d__instance(VAR1,c__StationaryArtifact)
					)
				)
			)
			=>
			(
				(
					p__d__holds6(c__StreetAddressFn,VAR1,VAR2,VAR3,VAR4,VAR5)
				)
				<=>
				(
					p__StreetAddressFn(VAR1,VAR2,VAR3,VAR4,VAR5)
				)
			)
		)
	)
).

fof( schemaQuintaryRelationA3, axiom,
	(![VAR1,VAR2,VAR3,VAR4,VAR5]: 
		(
			(
				(
					(
						p__d__instance(VAR5,c__Object)
					)
				 &
					(
						p__d__instance(VAR4,c__TimePosition)
					)
				 &
					(
						p__d__subclass(VAR3,c__Process)
					)
				 &
					(
						p__d__instance(VAR2,c__CaseRole)
					)
				 &
					(
						p__d__instance(VAR1,c__Object)
					)
				)
			)
			=>
			(
				(
					p__d__holds6(c__playsRoleInEventOfType,VAR1,VAR2,VAR3,VAR4,VAR5)
				)
				<=>
				(
					p__playsRoleInEventOfType(VAR1,VAR2,VAR3,VAR4,VAR5)
				)
			)
		)
	)
).

fof( typeA1, axiom,
	(![X1,X2]: 
		(
			(
				p__subrelation(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Relation)
					)
				 &
					(
						p__d__instance(X1,c__Relation)
					)
				)
			)
		)
	)
).

fof( typeA2, axiom,
	(![X1,X2]: 
		(
			(
				p__subAttribute(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Attribute)
					)
				 &
					(
						p__d__instance(X1,c__Attribute)
					)
				)
			)
		)
	)
).

fof( typeA3, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__d__holds3(X1,X2,X3)
			)
			=>
			(
				p__d__instance(X1,c__BinaryRelation)
			)
		)
	)
).

fof( typeA4, axiom,
	(![X1,X2]: 
		(
			(
				p__subclass(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__SetOrClass)
					)
				)
			)
		)
	)
).

fof( typeA5, axiom,
	(![X1,X2]: 
		(
			(
				p__part(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA6, axiom,
	(![X1,X2]: 
		(
			(
				p__subCollection(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Collection)
					)
				 &
					(
						p__d__instance(X1,c__Collection)
					)
				)
			)
		)
	)
).

fof( typeA7, axiom,
	(![X1,X2]: 
		(
			(
				p__lessThanOrEqualTo(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA8, axiom,
	(![X1,X2]: 
		(
			(
				p__greaterThanOrEqualTo(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA9, axiom,
	(![X1,X2]: 
		(
			(
				p__subList(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__List)
					)
				 &
					(
						p__d__instance(X1,c__List)
					)
				)
			)
		)
	)
).

fof( typeA10, axiom,
	(![X1,X2]: 
		(
			(
				p__initialList(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__List)
					)
				 &
					(
						p__d__instance(X1,c__List)
					)
				)
			)
		)
	)
).

fof( typeA11, axiom,
	(![X1,X2]: 
		(
			(
				p__subsumesContentClass(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__subclass(X1,c__ContentBearingPhysical)
					)
				)
			)
		)
	)
).

fof( typeA12, axiom,
	(![X1,X2]: 
		(
			(
				p__subsumesContentInstance(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(X1,c__ContentBearingPhysical)
					)
				)
			)
		)
	)
).

fof( typeA13, axiom,
	(![X1,X2]: 
		(
			(
				p__temporalPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimePosition)
					)
				 &
					(
						p__d__instance(X1,c__TimePosition)
					)
				)
			)
		)
	)
).

fof( typeA14, axiom,
	(![X1,X2]: 
		(
			(
				p__beforeOrEqual(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimePoint)
					)
				 &
					(
						p__d__instance(X1,c__TimePoint)
					)
				)
			)
		)
	)
).

fof( typeA15, axiom,
	(![X1,X2]: 
		(
			(
				p__subProcess(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Process)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA16, axiom,
	(![X1,X2]: 
		(
			(
				p__subOrganization(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organization)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA17, axiom,
	(![X1,X2]: 
		(
			(
				p__geometricPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GeometricFigure)
					)
				 &
					(
						p__d__instance(X1,c__GeometricFigure)
					)
				)
			)
		)
	)
).

fof( typeA18, axiom,
	(![X1,X2]: 
		(
			(
				p__abstractPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Abstract)
					)
				 &
					(
						p__d__instance(X1,c__Abstract)
					)
				)
			)
		)
	)
).

fof( typeA19, axiom,
	(![X1,X2]: 
		(
			(
				p__identicalListItems(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__List)
					)
				 &
					(
						p__d__instance(X1,c__List)
					)
				)
			)
		)
	)
).

fof( typeA20, axiom,
	(![X1,X2]: 
		(
			(
				p__copy(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA21, axiom,
	(![X1,X2]: 
		(
			(
				p__equivalentContentClass(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__subclass(X1,c__ContentBearingPhysical)
					)
				)
			)
		)
	)
).

fof( typeA22, axiom,
	(![X1,X2]: 
		(
			(
				p__equivalentContentInstance(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__ContentBearingPhysical)
					)
				 &
					(
						p__d__instance(X1,c__ContentBearingPhysical)
					)
				)
			)
		)
	)
).

fof( typeA23, axiom,
	(![X1,X2]: 
		(
			(
				p__cooccur(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Physical)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA24, axiom,
	(![X1,X2]: 
		(
			(
				p__familyRelation(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organism)
					)
				 &
					(
						p__d__instance(X1,c__Organism)
					)
				)
			)
		)
	)
).

fof( typeA25, axiom,
	(![X1,X2]: 
		(
			(
				p__subGraph(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Graph)
					)
				 &
					(
						p__d__instance(X1,c__Graph)
					)
				)
			)
		)
	)
).

fof( typeA26, axiom,
	(![X1,X2]: 
		(
			(
				p__overlapsTemporally(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(X1,c__TimeInterval)
					)
				)
			)
		)
	)
).

fof( typeA27, axiom,
	(![X1,X2]: 
		(
			(
				p__connected(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA28, axiom,
	(![X1,X2]: 
		(
			(
				p__overlapsSpatially(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA29, axiom,
	(![X1,X2]: 
		(
			(
				p__subString(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA30, axiom,
	(![X1,X2]: 
		(
			(
				p__agent(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA31, axiom,
	(![X1,X2]: 
		(
			(
				p__destination(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Process)
			)
		)
	)
).

fof( typeA32, axiom,
	(![X1,X2]: 
		(
			(
				p__experiencer(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA33, axiom,
	(![X1,X2]: 
		(
			(
				p__origin(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA34, axiom,
	(![X1,X2]: 
		(
			(
				p__patient(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Process)
			)
		)
	)
).

fof( typeA35, axiom,
	(![X1,X2]: 
		(
			(
				p__eventPartlyLocated(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA36, axiom,
	(![X1,X2]: 
		(
			(
				p__moves(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Motion)
					)
				)
			)
		)
	)
).

fof( typeA37, axiom,
	(![X1,X2]: 
		(
			(
				p__changesLocation(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Translocation)
					)
				)
			)
		)
	)
).

fof( typeA38, axiom,
	(![X1,X2]: 
		(
			(
				p__path(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Motion)
					)
				)
			)
		)
	)
).

fof( typeA39, axiom,
	(![X1,X2]: 
		(
			(
				p__direction(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositionalAttribute)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA40, axiom,
	(![X1,X2]: 
		(
			(
				p__detainee(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Animal)
					)
				 &
					(
						p__d__instance(X1,c__Confining)
					)
				)
			)
		)
	)
).

fof( typeA41, axiom,
	(![X1,X2]: 
		(
			(
				p__targetInAttack(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA42, axiom,
	(![X1,X2]: 
		(
			(
				p__experimentalControl(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Experimenting)
					)
				)
			)
		)
	)
).

fof( typeA43, axiom,
	(![X1,X2]: 
		(
			(
				p__controlled(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__AchievingControl)
					)
				)
			)
		)
	)
).

fof( typeA44, axiom,
	(![X1,X2]: 
		(
			(
				p__gainsControl(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__AchievingControl)
					)
				)
			)
		)
	)
).

fof( typeA45, axiom,
	(![X1,X2]: 
		(
			(
				p__losesControl(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__ChangeOfControl)
					)
				)
			)
		)
	)
).

fof( typeA46, axiom,
	(![X1,X2]: 
		(
			(
				p__arrested(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__PlacingUnderArrest)
					)
				)
			)
		)
	)
).

fof( typeA47, axiom,
	(![X1,X2]: 
		(
			(
				p__conveyance(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TransportationDevice)
					)
				 &
					(
						p__d__instance(X1,c__Transportation)
					)
				)
			)
		)
	)
).

fof( typeA48, axiom,
	(![X1,X2]: 
		(
			(
				p__suffers(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA49, axiom,
	(![X1,X2]: 
		(
			(
				p__desires(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA50, axiom,
	(![X1,X2]: 
		(
			(
				p__considers(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA51, axiom,
	(![X1,X2]: 
		(
			(
				p__believes(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA52, axiom,
	(![X1,X2]: 
		(
			(
				p__knows(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA53, axiom,
	(![X1,X2]: 
		(
			(
				p__doubts(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA54, axiom,
	(![X1,X2]: 
		(
			(
				p__disapproves(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA55, axiom,
	(![X1,X2]: 
		(
			(
				p__immediateInstance(X1,X2)
			)
			=>
			(
				p__d__instance(X2,c__SetOrClass)
			)
		)
	)
).

fof( typeA56, axiom,
	(![X1,X2]: 
		(
			(
				p__immediateSubclass(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__SetOrClass)
					)
				)
			)
		)
	)
).

fof( typeA57, axiom,
	(![X1,X2]: 
		(
			(
				p__range(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__Function)
					)
				)
			)
		)
	)
).

fof( typeA58, axiom,
	(![X1,X2]: 
		(
			(
				p__rangeSubclass(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__Function)
					)
				)
			)
		)
	)
).

fof( typeA59, axiom,
	(![X1,X2]: 
		(
			(
				p__valence(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(X1,c__Relation)
					)
				)
			)
		)
	)
).

fof( typeA60, axiom,
	(![X1,X2]: 
		(
			(
				p__successorAttribute(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Attribute)
					)
				 &
					(
						p__d__instance(X1,c__Attribute)
					)
				)
			)
		)
	)
).

fof( typeA61, axiom,
	(![X1,X2]: 
		(
			(
				p__FrontFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__SelfConnectedObject)
			)
		)
	)
).

fof( typeA62, axiom,
	(![X1,X2]: 
		(
			(
				p__BackFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__SelfConnectedObject)
			)
		)
	)
).

fof( typeA63, axiom,
	(![X1,X2]: 
		(
			(
				p__properPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA64, axiom,
	(![X1,X2]: 
		(
			(
				p__contains(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA65, axiom,
	(![X1,X2]: 
		(
			(
				p__member(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Collection)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA66, axiom,
	(![X1,X2]: 
		(
			(
				p__containsInformation(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Proposition)
					)
				 &
					(
						p__d__instance(X1,c__ContentBearingPhysical)
					)
				)
			)
		)
	)
).

fof( typeA67, axiom,
	(![X1,X2]: 
		(
			(
				p__leader(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA68, axiom,
	(![X1,X2]: 
		(
			(
				p__attribute(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Attribute)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA69, axiom,
	(![X1,X2]: 
		(
			(
				p__manner(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Attribute)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA70, axiom,
	(![X1,X2]: 
		(
			(
				p__involvedInEvent(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Process)
			)
		)
	)
).

fof( typeA71, axiom,
	(![X1,X2]: 
		(
			(
				p__ProbabilityFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Formula)
			)
		)
	)
).

fof( typeA72, axiom,
	(![X1,X2]: 
		(
			(
				p__inList(X1,X2)
			)
			=>
			(
				p__d__instance(X2,c__List)
			)
		)
	)
).

fof( typeA73, axiom,
	(![X1,X2]: 
		(
			(
				p__closedOn(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__Function)
					)
				)
			)
		)
	)
).

fof( typeA74, axiom,
	(![X1,X2]: 
		(
			(
				p__reflexiveOn(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__BinaryRelation)
					)
				)
			)
		)
	)
).

fof( typeA75, axiom,
	(![X1,X2]: 
		(
			(
				p__irreflexiveOn(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__BinaryRelation)
					)
				)
			)
		)
	)
).

fof( typeA76, axiom,
	(![X1,X2]: 
		(
			(
				p__partialOrderingOn(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__BinaryRelation)
					)
				)
			)
		)
	)
).

fof( typeA77, axiom,
	(![X1,X2]: 
		(
			(
				p__totalOrderingOn(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__BinaryRelation)
					)
				)
			)
		)
	)
).

fof( typeA78, axiom,
	(![X1,X2]: 
		(
			(
				p__trichotomizingOn(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__BinaryRelation)
					)
				)
			)
		)
	)
).

fof( typeA79, axiom,
	(![X1,X2]: 
		(
			(
				p__equivalenceRelationOn(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__BinaryRelation)
					)
				)
			)
		)
	)
).

fof( typeA80, axiom,
	(![X1,X2]: 
		(
			(
				p__causes(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Process)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA81, axiom,
	(![X1,X2]: 
		(
			(
				p__causesSubclass(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Process)
					)
				 &
					(
						p__d__subclass(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA82, axiom,
	(![X1,X2]: 
		(
			(
				p__causesProposition(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA83, axiom,
	(![X1,X2]: 
		(
			(
				p__time(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimePosition)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA84, axiom,
	(![X1,X2]: 
		(
			(
				p__holdsDuring(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__TimePosition)
					)
				)
			)
		)
	)
).

fof( typeA85, axiom,
	(![X1,X2]: 
		(
			(
				p__exploits(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA86, axiom,
	(![X1,X2]: 
		(
			(
				p__hasPurpose(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA87, axiom,
	(![X1,X2]: 
		(
			(
				p__hasSkill(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__subclass(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA88, axiom,
	(![X1,X2]: 
		(
			(
				p__crosses(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA89, axiom,
	(![X1,X2]: 
		(
			(
				p__penetrates(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA90, axiom,
	(![X1,X2]: 
		(
			(
				p__possesses(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA91, axiom,
	(![X1,X2]: 
		(
			(
				p__precondition(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Process)
					)
				 &
					(
						p__d__subclass(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA92, axiom,
	(![X1,X2]: 
		(
			(
				p__realization(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Proposition)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA93, axiom,
	(![X1,X2]: 
		(
			(
				p__expressedInLanguage(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Language)
					)
				 &
					(
						p__d__instance(X1,c__LinguisticExpression)
					)
				)
			)
		)
	)
).

fof( typeA94, axiom,
	(![X1,X2]: 
		(
			(
				p__uses(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA95, axiom,
	(![X1,X2]: 
		(
			(
				p__identityElement(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__BinaryFunction)
			)
		)
	)
).

fof( typeA96, axiom,
	(![X1,X2]: 
		(
			(
				p__element(X1,X2)
			)
			=>
			(
				p__d__instance(X2,c__Set)
			)
		)
	)
).

fof( typeA97, axiom,
	(![X1,X2]: 
		(
			(
				p__graphPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Graph)
					)
				 &
					(
						p__d__instance(X1,c__GraphElement)
					)
				)
			)
		)
	)
).

fof( typeA98, axiom,
	(![X1,X2]: 
		(
			(
				p__pathLength(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(X1,c__GraphPath)
					)
				)
			)
		)
	)
).

fof( typeA99, axiom,
	(![X1,X2]: 
		(
			(
				p__measure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PhysicalQuantity)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA100, axiom,
	(![X1,X2]: 
		(
			(
				p__barometricPressure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__UnitOfAtmosphericPressure)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA101, axiom,
	(![X1,X2]: 
		(
			(
				p__duration(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeDuration)
					)
				 &
					(
						p__d__instance(X1,c__TimeInterval)
					)
				)
			)
		)
	)
).

fof( typeA102, axiom,
	(![X1,X2]: 
		(
			(
				p__frequency(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeDuration)
					)
				 &
					(
						p__d__subclass(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA103, axiom,
	(![X1,X2]: 
		(
			(
				p__meetsTemporally(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(X1,c__TimeInterval)
					)
				)
			)
		)
	)
).

fof( typeA104, axiom,
	(![X1,X2]: 
		(
			(
				p__date(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Day)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA105, axiom,
	(![X1,X2]: 
		(
			(
				p__surface(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA106, axiom,
	(![X1,X2]: 
		(
			(
				p__interiorPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA107, axiom,
	(![X1,X2]: 
		(
			(
				p__hole(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(X1,c__Hole)
					)
				)
			)
		)
	)
).

fof( typeA108, axiom,
	(![X1,X2]: 
		(
			(
				p__HoleHostFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Hole)
			)
		)
	)
).

fof( typeA109, axiom,
	(![X1,X2]: 
		(
			(
				p__partiallyFills(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Hole)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA110, axiom,
	(![X1,X2]: 
		(
			(
				p__properlyFills(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Hole)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA111, axiom,
	(![X1,X2]: 
		(
			(
				p__completelyFills(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Hole)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA112, axiom,
	(![X1,X2]: 
		(
			(
				p__fills(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Hole)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA113, axiom,
	(![X1,X2]: 
		(
			(
				p__HoleSkinFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Hole)
			)
		)
	)
).

fof( typeA114, axiom,
	(![X1,X2]: 
		(
			(
				p__atomicNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(X1,c__ElementalSubstance)
					)
				)
			)
		)
	)
).

fof( typeA115, axiom,
	(![X1,X2]: 
		(
			(
				p__geographicSubregion(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GeographicArea)
					)
				 &
					(
						p__d__instance(X1,c__GeographicArea)
					)
				)
			)
		)
	)
).

fof( typeA116, axiom,
	(![X1,X2]: 
		(
			(
				p__geopoliticalSubdivision(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(X1,c__GeopoliticalArea)
					)
				)
			)
		)
	)
).

fof( typeA117, axiom,
	(![X1,X2]: 
		(
			(
				p__developmentalForm(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__DevelopmentalAttribute)
					)
				 &
					(
						p__d__instance(X1,c__OrganicObject)
					)
				)
			)
		)
	)
).

fof( typeA118, axiom,
	(![X1,X2]: 
		(
			(
				p__inhabits(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Organism)
					)
				)
			)
		)
	)
).

fof( typeA119, axiom,
	(![X1,X2]: 
		(
			(
				p__authors(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Text)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA120, axiom,
	(![X1,X2]: 
		(
			(
				p__editor(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Text)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA121, axiom,
	(![X1,X2]: 
		(
			(
				p__publishes(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Text)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA122, axiom,
	(![X1,X2]: 
		(
			(
				p__version(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Artifact)
					)
				 &
					(
						p__d__subclass(X1,c__Artifact)
					)
				)
			)
		)
	)
).

fof( typeA123, axiom,
	(![X1,X2]: 
		(
			(
				p__parent(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organism)
					)
				 &
					(
						p__d__instance(X1,c__Organism)
					)
				)
			)
		)
	)
).

fof( typeA124, axiom,
	(![X1,X2]: 
		(
			(
				p__husband(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Woman)
					)
				 &
					(
						p__d__instance(X1,c__Man)
					)
				)
			)
		)
	)
).

fof( typeA125, axiom,
	(![X1,X2]: 
		(
			(
				p__wife(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Man)
					)
				 &
					(
						p__d__instance(X1,c__Woman)
					)
				)
			)
		)
	)
).

fof( typeA126, axiom,
	(![X1,X2]: 
		(
			(
				p__citizen(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Nation)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA127, axiom,
	(![X1,X2]: 
		(
			(
				p__modalAttribute(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__NormativeAttribute)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA128, axiom,
	(![X1,X2]: 
		(
			(
				p__holdsRight(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA129, axiom,
	(![X1,X2]: 
		(
			(
				p__holdsObligation(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA130, axiom,
	(![X1,X2]: 
		(
			(
				p__yearOfFounding(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Integer)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA131, axiom,
	(![X1,X2]: 
		(
			(
				p__powerPlant(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Artifact)
					)
				 &
					(
						p__d__instance(X1,c__Device)
					)
				)
			)
		)
	)
).

fof( typeA132, axiom,
	(![X1,X2]: 
		(
			(
				p__insured(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organization)
					)
				 &
					(
						p__d__instance(X1,c__Proposition)
					)
				)
			)
		)
	)
).

fof( typeA133, axiom,
	(![X1,X2]: 
		(
			(
				p__loss(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(X1,c__FinancialTransaction)
					)
				)
			)
		)
	)
).

fof( typeA134, axiom,
	(![X1,X2]: 
		(
			(
				p__profit(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(X1,c__FinancialTransaction)
					)
				)
			)
		)
	)
).

fof( typeA135, axiom,
	(![X1,X2]: 
		(
			(
				p__customer(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA136, axiom,
	(![X1,X2]: 
		(
			(
				p__familyName(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA137, axiom,
	(![X1,X2]: 
		(
			(
				p__middleName(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA138, axiom,
	(![X1,X2]: 
		(
			(
				p__givenName(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA139, axiom,
	(![X1,X2]: 
		(
			(
				p__structure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__StructureAttribute)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA140, axiom,
	(![X1,X2]: 
		(
			(
				p__operator(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA141, axiom,
	(![X1,X2]: 
		(
			(
				p__transported(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Transportation)
					)
				)
			)
		)
	)
).

fof( typeA142, axiom,
	(![X1,X2]: 
		(
			(
				p__cargo(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Shipping)
					)
				)
			)
		)
	)
).

fof( typeA143, axiom,
	(![X1,X2]: 
		(
			(
				p__serviceProvider(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__ServiceProcess)
					)
				)
			)
		)
	)
).

fof( typeA144, axiom,
	(![X1,X2]: 
		(
			(
				p__serviceRecipient(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__ServiceProcess)
					)
				)
			)
		)
	)
).

fof( typeA145, axiom,
	(![X1,X2]: 
		(
			(
				p__benefits(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA146, axiom,
	(![X1,X2]: 
		(
			(
				p__grandparent(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA147, axiom,
	(![X1,X2]: 
		(
			(
				p__alias(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA148, axiom,
	(![X1,X2]: 
		(
			(
				p__workAddress(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA149, axiom,
	(![X1,X2]: 
		(
			(
				p__homeAddress(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__PermanentResidence)
					)
				)
			)
		)
	)
).

fof( typeA150, axiom,
	(![X1,X2]: 
		(
			(
				p__deceptiveIdentifier(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__ContentBearingObject)
					)
				)
			)
		)
	)
).

fof( typeA151, axiom,
	(![X1,X2]: 
		(
			(
				p__stringLength(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X1,c__NonnegativeInteger)
					)
				)
			)
		)
	)
).

fof( typeA152, axiom,
	(![X1,X2]: 
		(
			(
				p__siteForContact(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__ContactSite)
					)
				)
			)
		)
	)
).

fof( typeA153, axiom,
	(![X1,X2]: 
		(
			(
				p__postContactSite(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__PostalPlace)
					)
				)
			)
		)
	)
).

fof( typeA154, axiom,
	(![X1,X2]: 
		(
			(
				p__postNeighborhood(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Neighborhood)
					)
				 &
					(
						p__d__instance(X1,c__PostalPlace)
					)
				)
			)
		)
	)
).

fof( typeA155, axiom,
	(![X1,X2]: 
		(
			(
				p__postCountry(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(X1,c__PostalPlace)
					)
				)
			)
		)
	)
).

fof( typeA156, axiom,
	(![X1,X2]: 
		(
			(
				p__postDistrict(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__StateOrProvince)
					)
				 &
					(
						p__d__instance(X1,c__PostalPlace)
					)
				)
			)
		)
	)
).

fof( typeA157, axiom,
	(![X1,X2]: 
		(
			(
				p__postCity(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__City)
					)
				 &
					(
						p__d__instance(X1,c__PostalPlace)
					)
				)
			)
		)
	)
).

fof( typeA158, axiom,
	(![X1,X2]: 
		(
			(
				p__postPostcodeArea(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PostcodeArea)
					)
				 &
					(
						p__d__instance(X1,c__PostalPlace)
					)
				)
			)
		)
	)
).

fof( typeA159, axiom,
	(![X1,X2]: 
		(
			(
				p__postStreet(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Roadway)
					)
				 &
					(
						p__d__instance(X1,c__PostalPlace)
					)
				)
			)
		)
	)
).

fof( typeA160, axiom,
	(![X1,X2]: 
		(
			(
				p__postStreetNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA161, axiom,
	(![X1,X2]: 
		(
			(
				p__postPostOfficeBox(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA162, axiom,
	(![X1,X2]: 
		(
			(
				p__postAddressText(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(X1,c__PostalAddressText)
					)
				)
			)
		)
	)
).

fof( typeA163, axiom,
	(![X1,X2]: 
		(
			(
				p__telecomContactDevice(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__TelephonyDevice)
					)
				)
			)
		)
	)
).

fof( typeA164, axiom,
	(![X1,X2]: 
		(
			(
				p__deviceTelecomNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TelephonyDevice)
					)
				 &
					(
						p__d__instance(X1,c__TelecomNumber)
					)
				)
			)
		)
	)
).

fof( typeA165, axiom,
	(![X1,X2]: 
		(
			(
				p__telecomCoreNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA166, axiom,
	(![X1,X2]: 
		(
			(
				p__telecomCountryCode(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA167, axiom,
	(![X1,X2]: 
		(
			(
				p__telecomAreaCode(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA168, axiom,
	(![X1,X2]: 
		(
			(
				p__telecomCode2(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA169, axiom,
	(![X1,X2]: 
		(
			(
				p__telecomExtension(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TelecomNumber)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA170, axiom,
	(![X1,X2]: 
		(
			(
				p__telephoneNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__TelecomNumber)
					)
				)
			)
		)
	)
).

fof( typeA171, axiom,
	(![X1,X2]: 
		(
			(
				p__personalPhoneNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__TelecomNumber)
					)
				)
			)
		)
	)
).

fof( typeA172, axiom,
	(![X1,X2]: 
		(
			(
				p__homePhoneNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__TelecomNumber)
					)
				)
			)
		)
	)
).

fof( typeA173, axiom,
	(![X1,X2]: 
		(
			(
				p__workPhoneNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__TelecomNumber)
					)
				)
			)
		)
	)
).

fof( typeA174, axiom,
	(![X1,X2]: 
		(
			(
				p__mobilePhoneNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__TelecomNumber)
					)
				)
			)
		)
	)
).

fof( typeA175, axiom,
	(![X1,X2]: 
		(
			(
				p__faxNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__TelecomNumber)
					)
				)
			)
		)
	)
).

fof( typeA176, axiom,
	(![X1,X2]: 
		(
			(
				p__inverse(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__BinaryRelation)
					)
				 &
					(
						p__d__instance(X1,c__BinaryRelation)
					)
				)
			)
		)
	)
).

fof( typeA177, axiom,
	(![X1,X2]: 
		(
			(
				p__disjointRelation(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Relation)
					)
				 &
					(
						p__d__instance(X1,c__Relation)
					)
				)
			)
		)
	)
).

fof( typeA178, axiom,
	(![X1,X2]: 
		(
			(
				p__successorAttributeClosure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Attribute)
					)
				 &
					(
						p__d__instance(X1,c__Attribute)
					)
				)
			)
		)
	)
).

fof( typeA179, axiom,
	(![X1,X2]: 
		(
			(
				p__lessThan(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA180, axiom,
	(![X1,X2]: 
		(
			(
				p__greaterThan(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA181, axiom,
	(![X1,X2]: 
		(
			(
				p__increasesLikelihood(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA182, axiom,
	(![X1,X2]: 
		(
			(
				p__decreasesLikelihood(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA183, axiom,
	(![X1,X2]: 
		(
			(
				p__hindersSubclass(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Process)
					)
				 &
					(
						p__d__subclass(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA184, axiom,
	(![X1,X2]: 
		(
			(
				p__preventsSubclass(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Process)
					)
				 &
					(
						p__d__subclass(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA185, axiom,
	(![X1,X2]: 
		(
			(
				p__prevents(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Process)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA186, axiom,
	(![X1,X2]: 
		(
			(
				p__hinders(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Process)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA187, axiom,
	(![X1,X2]: 
		(
			(
				p__subProposition(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Proposition)
					)
				 &
					(
						p__d__instance(X1,c__Proposition)
					)
				)
			)
		)
	)
).

fof( typeA188, axiom,
	(![X1,X2]: 
		(
			(
				p__subPlan(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Plan)
					)
				 &
					(
						p__d__instance(X1,c__Plan)
					)
				)
			)
		)
	)
).

fof( typeA189, axiom,
	(![X1,X2]: 
		(
			(
				p__larger(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA190, axiom,
	(![X1,X2]: 
		(
			(
				p__smaller(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA191, axiom,
	(![X1,X2]: 
		(
			(
				p__starts(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(X1,c__TimeInterval)
					)
				)
			)
		)
	)
).

fof( typeA192, axiom,
	(![X1,X2]: 
		(
			(
				p__finishes(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(X1,c__TimeInterval)
					)
				)
			)
		)
	)
).

fof( typeA193, axiom,
	(![X1,X2]: 
		(
			(
				p__before(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimePoint)
					)
				 &
					(
						p__d__instance(X1,c__TimePoint)
					)
				)
			)
		)
	)
).

fof( typeA194, axiom,
	(![X1,X2]: 
		(
			(
				p__during(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(X1,c__TimeInterval)
					)
				)
			)
		)
	)
).

fof( typeA195, axiom,
	(![X1,X2]: 
		(
			(
				p__earlier(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(X1,c__TimeInterval)
					)
				)
			)
		)
	)
).

fof( typeA196, axiom,
	(![X1,X2]: 
		(
			(
				p__meetsSpatially(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA197, axiom,
	(![X1,X2]: 
		(
			(
				p__overlapsPartially(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA198, axiom,
	(![X1,X2]: 
		(
			(
				p__superficialPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA199, axiom,
	(![X1,X2]: 
		(
			(
				p__connectedEngineeringComponents(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(X1,c__EngineeringComponent)
					)
				)
			)
		)
	)
).

fof( typeA200, axiom,
	(![X1,X2]: 
		(
			(
				p__ancestor(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organism)
					)
				 &
					(
						p__d__instance(X1,c__Organism)
					)
				)
			)
		)
	)
).

fof( typeA201, axiom,
	(![X1,X2]: 
		(
			(
				p__sibling(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organism)
					)
				 &
					(
						p__d__instance(X1,c__Organism)
					)
				)
			)
		)
	)
).

fof( typeA202, axiom,
	(![X1,X2]: 
		(
			(
				p__brother(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Man)
					)
				)
			)
		)
	)
).

fof( typeA203, axiom,
	(![X1,X2]: 
		(
			(
				p__sister(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Woman)
					)
				)
			)
		)
	)
).

fof( typeA204, axiom,
	(![X1,X2]: 
		(
			(
				p__spouse(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA205, axiom,
	(![X1,X2]: 
		(
			(
				p__conjugate(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CompoundSubstance)
					)
				 &
					(
						p__d__instance(X1,c__CompoundSubstance)
					)
				)
			)
		)
	)
).

fof( typeA206, axiom,
	(![X1,X2]: 
		(
			(
				p__neighbor(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA207, axiom,
	(![X1,X2]: 
		(
			(
				p__hostileForces(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__MilitaryUnit)
					)
				 &
					(
						p__d__instance(X1,c__MilitaryUnit)
					)
				)
			)
		)
	)
).

fof( typeA208, axiom,
	(![X1,X2]: 
		(
			(
				p__subField(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__FieldOfStudy)
					)
				 &
					(
						p__d__instance(X1,c__FieldOfStudy)
					)
				)
			)
		)
	)
).

fof( typeA209, axiom,
	(![X1,X2]: 
		(
			(
				p__ancestorOrganization(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organization)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA210, axiom,
	(![X1,X2]: 
		(
			(
				p__disjoint(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__SetOrClass)
					)
				)
			)
		)
	)
).

fof( typeA211, axiom,
	(![X1,X2]: 
		(
			(
				p__independentProbability(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA212, axiom,
	(![X1,X2]: 
		(
			(
				p__relatedEvent(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Process)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA213, axiom,
	(![X1,X2]: 
		(
			(
				p__relative(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organism)
					)
				 &
					(
						p__d__instance(X1,c__Organism)
					)
				)
			)
		)
	)
).

fof( typeA214, axiom,
	(![X1,X2]: 
		(
			(
				p__legalRelation(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA215, axiom,
	(![X1,X2]: 
		(
			(
				p__mutualAcquaintance(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA216, axiom,
	(![X1,X2]: 
		(
			(
				p__consistent(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Proposition)
					)
				 &
					(
						p__d__instance(X1,c__Proposition)
					)
				)
			)
		)
	)
).

fof( typeA217, axiom,
	(![X1,X2]: 
		(
			(
				p__friend(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA218, axiom,
	(![X1,X2]: 
		(
			(
				p__coworker(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA219, axiom,
	(![X1,X2]: 
		(
			(
				p__cohabitant(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA220, axiom,
	(![X1,X2]: 
		(
			(
				p__mutualStranger(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA221, axiom,
	(![X1,X2]: 
		(
			(
				p__domesticPartner(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA222, axiom,
	(![X1,X2]: 
		(
			(
				p__located(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA223, axiom,
	(![X1,X2]: 
		(
			(
				p__stored(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__DataStorageDevice)
					)
				 &
					(
						p__d__instance(X1,c__ContentBearingObject)
					)
				)
			)
		)
	)
).

fof( typeA224, axiom,
	(![X1,X2]: 
		(
			(
				p__legalGuardian(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA225, axiom,
	(![X1,X2]: 
		(
			(
				p__multiplicativeFactor(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Integer)
					)
				 &
					(
						p__d__instance(X1,c__Integer)
					)
				)
			)
		)
	)
).

fof( typeA226, axiom,
	(![X1,X2]: 
		(
			(
				p__covers(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA227, axiom,
	(![X1,X2]: 
		(
			(
				p__KiloFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__UnitOfMeasure)
			)
		)
	)
).

fof( typeA228, axiom,
	(![X1,X2]: 
		(
			(
				p__MegaFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__UnitOfMeasure)
			)
		)
	)
).

fof( typeA229, axiom,
	(![X1,X2]: 
		(
			(
				p__GigaFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__UnitOfMeasure)
			)
		)
	)
).

fof( typeA230, axiom,
	(![X1,X2]: 
		(
			(
				p__TeraFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__UnitOfMeasure)
			)
		)
	)
).

fof( typeA231, axiom,
	(![X1,X2]: 
		(
			(
				p__MilliFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__UnitOfMeasure)
			)
		)
	)
).

fof( typeA232, axiom,
	(![X1,X2]: 
		(
			(
				p__MicroFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__UnitOfMeasure)
			)
		)
	)
).

fof( typeA233, axiom,
	(![X1,X2]: 
		(
			(
				p__NanoFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__UnitOfMeasure)
			)
		)
	)
).

fof( typeA234, axiom,
	(![X1,X2]: 
		(
			(
				p__PicoFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__UnitOfMeasure)
			)
		)
	)
).

fof( typeA235, axiom,
	(![X1,X2]: 
		(
			(
				p__PowerSetFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__SetOrClass)
			)
		)
	)
).

fof( typeA236, axiom,
	(![X1,X2]: 
		(
			(
				p__ExtensionFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Attribute)
			)
		)
	)
).

fof( typeA237, axiom,
	(![X1,X2]: 
		(
			(
				p__ListLengthFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__List)
			)
		)
	)
).

fof( typeA238, axiom,
	(![X1,X2]: 
		(
			(
				p__PropertyFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Agent)
			)
		)
	)
).

fof( typeA239, axiom,
	(![X1,X2]: 
		(
			(
				p__AbsoluteValueFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__RealNumber)
			)
		)
	)
).

fof( typeA240, axiom,
	(![X1,X2]: 
		(
			(
				p__CeilingFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__RealNumber)
			)
		)
	)
).

fof( typeA241, axiom,
	(![X1,X2]: 
		(
			(
				p__CosineFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__PlaneAngleMeasure)
			)
		)
	)
).

fof( typeA242, axiom,
	(![X1,X2]: 
		(
			(
				p__DenominatorFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__RealNumber)
			)
		)
	)
).

fof( typeA243, axiom,
	(![X1,X2]: 
		(
			(
				p__FloorFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__RealNumber)
			)
		)
	)
).

fof( typeA244, axiom,
	(![X1,X2]: 
		(
			(
				p__ImaginaryPartFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__ComplexNumber)
			)
		)
	)
).

fof( typeA245, axiom,
	(![X1,X2]: 
		(
			(
				p__IntegerSquareRootFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__RealNumber)
			)
		)
	)
).

fof( typeA246, axiom,
	(![X1,X2]: 
		(
			(
				p__NumeratorFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__RealNumber)
			)
		)
	)
).

fof( typeA247, axiom,
	(![X1,X2]: 
		(
			(
				p__RationalNumberFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Number)
			)
		)
	)
).

fof( typeA248, axiom,
	(![X1,X2]: 
		(
			(
				p__RealNumberFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Number)
			)
		)
	)
).

fof( typeA249, axiom,
	(![X1,X2]: 
		(
			(
				p__ReciprocalFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Quantity)
			)
		)
	)
).

fof( typeA250, axiom,
	(![X1,X2]: 
		(
			(
				p__RoundFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Quantity)
			)
		)
	)
).

fof( typeA251, axiom,
	(![X1,X2]: 
		(
			(
				p__SignumFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__RealNumber)
			)
		)
	)
).

fof( typeA252, axiom,
	(![X1,X2]: 
		(
			(
				p__SineFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__PlaneAngleMeasure)
			)
		)
	)
).

fof( typeA253, axiom,
	(![X1,X2]: 
		(
			(
				p__SquareRootFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__RealNumber)
			)
		)
	)
).

fof( typeA254, axiom,
	(![X1,X2]: 
		(
			(
				p__TangentFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__PlaneAngleMeasure)
			)
		)
	)
).

fof( typeA255, axiom,
	(![X1,X2]: 
		(
			(
				p__SuccessorFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Integer)
			)
		)
	)
).

fof( typeA256, axiom,
	(![X1,X2]: 
		(
			(
				p__PredecessorFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Integer)
			)
		)
	)
).

fof( typeA257, axiom,
	(![X1,X2]: 
		(
			(
				p__ComplementFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__SetOrClass)
			)
		)
	)
).

fof( typeA258, axiom,
	(![X1,X2]: 
		(
			(
				p__GeneralizedUnionFn(X1,X2)
			)
			=>
			(
				p__d__subclass(X1,c__SetOrClass)
			)
		)
	)
).

fof( typeA259, axiom,
	(![X1,X2]: 
		(
			(
				p__GeneralizedIntersectionFn(X1,X2)
			)
			=>
			(
				p__d__subclass(X1,c__SetOrClass)
			)
		)
	)
).

fof( typeA260, axiom,
	(![X1,X2]: 
		(
			(
				p__InitialNodeFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__GraphArc)
			)
		)
	)
).

fof( typeA261, axiom,
	(![X1,X2]: 
		(
			(
				p__TerminalNodeFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__GraphArc)
			)
		)
	)
).

fof( typeA262, axiom,
	(![X1,X2]: 
		(
			(
				p__BeginNodeFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__GraphPath)
			)
		)
	)
).

fof( typeA263, axiom,
	(![X1,X2]: 
		(
			(
				p__EndNodeFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__GraphPath)
			)
		)
	)
).

fof( typeA264, axiom,
	(![X1,X2]: 
		(
			(
				p__PathWeightFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__GraphPath)
			)
		)
	)
).

fof( typeA265, axiom,
	(![X1,X2]: 
		(
			(
				p__CutSetFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Graph)
			)
		)
	)
).

fof( typeA266, axiom,
	(![X1,X2]: 
		(
			(
				p__MinimalCutSetFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Graph)
			)
		)
	)
).

fof( typeA267, axiom,
	(![X1,X2]: 
		(
			(
				p__MagnitudeFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__PhysicalQuantity)
			)
		)
	)
).

fof( typeA268, axiom,
	(![X1,X2]: 
		(
			(
				p__UnitFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__PhysicalQuantity)
			)
		)
	)
).

fof( typeA269, axiom,
	(![X1,X2]: 
		(
			(
				p__CenterOfCircleFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Circle)
			)
		)
	)
).

fof( typeA270, axiom,
	(![X1,X2]: 
		(
			(
				p__WealthFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Agent)
			)
		)
	)
).

fof( typeA271, axiom,
	(![X1,X2]: 
		(
			(
				p__BeginFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__TimeInterval)
			)
		)
	)
).

fof( typeA272, axiom,
	(![X1,X2]: 
		(
			(
				p__EndFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__TimeInterval)
			)
		)
	)
).

fof( typeA273, axiom,
	(![X1,X2]: 
		(
			(
				p__WhenFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Physical)
			)
		)
	)
).

fof( typeA274, axiom,
	(![X1,X2]: 
		(
			(
				p__PastFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__TimePosition)
			)
		)
	)
).

fof( typeA275, axiom,
	(![X1,X2]: 
		(
			(
				p__ImmediatePastFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__TimePosition)
			)
		)
	)
).

fof( typeA276, axiom,
	(![X1,X2]: 
		(
			(
				p__FutureFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__TimePosition)
			)
		)
	)
).

fof( typeA277, axiom,
	(![X1,X2]: 
		(
			(
				p__ImmediateFutureFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__TimePosition)
			)
		)
	)
).

fof( typeA278, axiom,
	(![X1,X2]: 
		(
			(
				p__YearFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Integer)
			)
		)
	)
).

fof( typeA279, axiom,
	(![X1,X2]: 
		(
			(
				p__MereologicalComplementFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Object)
			)
		)
	)
).

fof( typeA280, axiom,
	(![X1,X2]: 
		(
			(
				p__FoodForFn(X1,X2)
			)
			=>
			(
				p__d__subclass(X1,c__Organism)
			)
		)
	)
).

fof( typeA281, axiom,
	(![X1,X2]: 
		(
			(
				p__ImmediateFamilyFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Human)
			)
		)
	)
).

fof( typeA282, axiom,
	(![X1,X2]: 
		(
			(
				p__GovernmentFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__GeopoliticalArea)
			)
		)
	)
).

fof( typeA283, axiom,
	(![X1,X2]: 
		(
			(
				p__PremisesFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Argument)
			)
		)
	)
).

fof( typeA284, axiom,
	(![X1,X2]: 
		(
			(
				p__DeadFn(X1,X2)
			)
			=>
			(
				p__d__subclass(X1,c__Organism)
			)
		)
	)
).

fof( typeA285, axiom,
	(![X1,X2]: 
		(
			(
				p__StartFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Process)
			)
		)
	)
).

fof( typeA286, axiom,
	(![X1,X2]: 
		(
			(
				p__StopFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Process)
			)
		)
	)
).

fof( typeA287, axiom,
	(![X1,X2]: 
		(
			(
				p__DiameterFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Circle)
			)
		)
	)
).

fof( typeA288, axiom,
	(![X1,X2]: 
		(
			(
				p__RadiusFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Circle)
			)
		)
	)
).

fof( typeA289, axiom,
	(![X1,X2]: 
		(
			(
				p__LastFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__List)
			)
		)
	)
).

fof( typeA290, axiom,
	(![X1,X2]: 
		(
			(
				p__FirstFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__List)
			)
		)
	)
).

fof( typeA291, axiom,
	(![X1,X2]: 
		(
			(
				p__DescendantsFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Human)
			)
		)
	)
).

fof( typeA292, axiom,
	(![X1,X2]: 
		(
			(
				p__ResidentFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__GeopoliticalArea)
			)
		)
	)
).

fof( typeA293, axiom,
	(![X1,X2]: 
		(
			(
				p__OperatingFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Device)
			)
		)
	)
).

fof( typeA294, axiom,
	(![X1,X2]: 
		(
			(
				p__OccupationFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__IntentionalProcess)
			)
		)
	)
).

fof( typeA295, axiom,
	(![X1,X2]: 
		(
			(
				p__StringLengthFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__SymbolicString)
			)
		)
	)
).

fof( typeA296, axiom,
	(![X1,X2]: 
		(
			(
				p__CoveringFn(X1,X2)
			)
			=>
			(
				p__d__subclass(X1,c__BodyPart)
			)
		)
	)
).

fof( typeA297, axiom,
	(![X1,X2]: 
		(
			(
				p__instance(X1,X2)
			)
			=>
			(
				p__d__instance(X2,c__SetOrClass)
			)
		)
	)
).

fof( typeA298, axiom,
	(![X1,X2]: 
		(
			(
				p__externalImage(X1,X2)
			)
			=>
			(
				p__d__instance(X2,c__SymbolicString)
			)
		)
	)
).

fof( typeA299, axiom,
	(![X1,X2]: 
		(
			(
				p__entails(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA300, axiom,
	(![X1,X2]: 
		(
			(
				p__material(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CorpuscularObject)
					)
				 &
					(
						p__d__subclass(X1,c__Substance)
					)
				)
			)
		)
	)
).

fof( typeA301, axiom,
	(![X1,X2]: 
		(
			(
				p__property(X1,X2)
			)
			=>
			(
				p__d__instance(X2,c__Attribute)
			)
		)
	)
).

fof( typeA302, axiom,
	(![X1,X2]: 
		(
			(
				p__inScopeOfInterest(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__CognitiveAgent)
			)
		)
	)
).

fof( typeA303, axiom,
	(![X1,X2]: 
		(
			(
				p__needs(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Physical)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA304, axiom,
	(![X1,X2]: 
		(
			(
				p__wants(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Physical)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA305, axiom,
	(![X1,X2]: 
		(
			(
				p__distributes(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__BinaryFunction)
					)
				 &
					(
						p__d__instance(X1,c__BinaryFunction)
					)
				)
			)
		)
	)
).

fof( typeA306, axiom,
	(![X1,X2]: 
		(
			(
				p__partlyLocated(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA307, axiom,
	(![X1,X2]: 
		(
			(
				p__traverses(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA308, axiom,
	(![X1,X2]: 
		(
			(
				p__average(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__RealNumber)
					)
				 &
					(
						p__d__instance(X1,c__List)
					)
				)
			)
		)
	)
).

fof( typeA309, axiom,
	(![X1,X2]: 
		(
			(
				p__arcWeight(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__GraphArc)
					)
				)
			)
		)
	)
).

fof( typeA310, axiom,
	(![X1,X2]: 
		(
			(
				p__abstractCounterpart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Physical)
					)
				 &
					(
						p__d__instance(X1,c__Abstract)
					)
				)
			)
		)
	)
).

fof( typeA311, axiom,
	(![X1,X2]: 
		(
			(
				p__subSystem(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PhysicalSystem)
					)
				 &
					(
						p__d__instance(X1,c__PhysicalSystem)
					)
				)
			)
		)
	)
).

fof( typeA312, axiom,
	(![X1,X2]: 
		(
			(
				p__systemPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PhysicalSystem)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA313, axiom,
	(![X1,X2]: 
		(
			(
				p__graphMeasure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__UnitOfMeasure)
					)
				 &
					(
						p__d__instance(X1,c__Graph)
					)
				)
			)
		)
	)
).

fof( typeA314, axiom,
	(![X1,X2]: 
		(
			(
				p__weight(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__MassMeasure)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA315, axiom,
	(![X1,X2]: 
		(
			(
				p__radius(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X1,c__Circle)
					)
				)
			)
		)
	)
).

fof( typeA316, axiom,
	(![X1,X2]: 
		(
			(
				p__diameter(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X1,c__Circle)
					)
				)
			)
		)
	)
).

fof( typeA317, axiom,
	(![X1,X2]: 
		(
			(
				p__transactionAmount(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(X1,c__FinancialTransaction)
					)
				)
			)
		)
	)
).

fof( typeA318, axiom,
	(![X1,X2]: 
		(
			(
				p__boilingPoint(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TemperatureMeasure)
					)
				 &
					(
						p__d__subclass(X1,c__PureSubstance)
					)
				)
			)
		)
	)
).

fof( typeA319, axiom,
	(![X1,X2]: 
		(
			(
				p__meltingPoint(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TemperatureMeasure)
					)
				 &
					(
						p__d__subclass(X1,c__PureSubstance)
					)
				)
			)
		)
	)
).

fof( typeA320, axiom,
	(![X1,X2]: 
		(
			(
				p__wears(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__WearableItem)
					)
				 &
					(
						p__d__instance(X1,c__Animal)
					)
				)
			)
		)
	)
).

fof( typeA321, axiom,
	(![X1,X2]: 
		(
			(
				p__acquaintance(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA322, axiom,
	(![X1,X2]: 
		(
			(
				p__employs(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA323, axiom,
	(![X1,X2]: 
		(
			(
				p__premise(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Proposition)
					)
				 &
					(
						p__d__instance(X1,c__Argument)
					)
				)
			)
		)
	)
).

fof( typeA324, axiom,
	(![X1,X2]: 
		(
			(
				p__conclusion(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Proposition)
					)
				 &
					(
						p__d__instance(X1,c__Argument)
					)
				)
			)
		)
	)
).

fof( typeA325, axiom,
	(![X1,X2]: 
		(
			(
				p__faces(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__DirectionalAttribute)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA326, axiom,
	(![X1,X2]: 
		(
			(
				p__parallel(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__OneDimensionalFigure)
					)
				 &
					(
						p__d__instance(X1,c__OneDimensionalFigure)
					)
				)
			)
		)
	)
).

fof( typeA327, axiom,
	(![X1,X2]: 
		(
			(
				p__angularMeasure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PlaneAngleMeasure)
					)
				 &
					(
						p__d__instance(X1,c__TwoDimensionalAngle)
					)
				)
			)
		)
	)
).

fof( typeA328, axiom,
	(![X1,X2]: 
		(
			(
				p__lineMeasure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X1,c__OneDimensionalFigure)
					)
				)
			)
		)
	)
).

fof( typeA329, axiom,
	(![X1,X2]: 
		(
			(
				p__older(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA330, axiom,
	(![X1,X2]: 
		(
			(
				p__speaksLanguage(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Language)
					)
				 &
					(
						p__d__instance(X1,c__SentientAgent)
					)
				)
			)
		)
	)
).

fof( typeA331, axiom,
	(![X1,X2]: 
		(
			(
				p__soundFrequency(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__FunctionQuantity)
					)
				 &
					(
						p__d__instance(X1,c__MusicalTone)
					)
				)
			)
		)
	)
).

fof( typeA332, axiom,
	(![X1,X2]: 
		(
			(
				p__dateEstablished(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__TimePosition)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA333, axiom,
	(![X1,X2]: 
		(
			(
				p__effectiveRange(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X1,c__Device)
					)
				)
			)
		)
	)
).

fof( typeA334, axiom,
	(![X1,X2]: 
		(
			(
				p__deviceState(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__DeviceStateAttribute)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA335, axiom,
	(![X1,X2]: 
		(
			(
				p__discovers(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA336, axiom,
	(![X1,X2]: 
		(
			(
				p__measurementReading(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__ConstantQuantity)
					)
				 &
					(
						p__d__instance(X1,c__MeasuringDevice)
					)
				)
			)
		)
	)
).

fof( typeA337, axiom,
	(![X1,X2]: 
		(
			(
				p__emailAddress(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA338, axiom,
	(![X1,X2]: 
		(
			(
				p__potentialOfHydrogen(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__RealNumber)
					)
				 &
					(
						p__d__instance(X1,c__Solution)
					)
				)
			)
		)
	)
).

fof( typeA339, axiom,
	(![X1,X2]: 
		(
			(
				p__fleetSize(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Integer)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA340, axiom,
	(![X1,X2]: 
		(
			(
				p__carries(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA341, axiom,
	(![X1,X2]: 
		(
			(
				p__tangent(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TwoDimensionalFigure)
					)
				 &
					(
						p__d__instance(X1,c__OneDimensionalFigure)
					)
				)
			)
		)
	)
).

fof( typeA342, axiom,
	(![X1,X2]: 
		(
			(
				p__sliceOfFigure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(X1,c__TwoDimensionalObject)
					)
				)
			)
		)
	)
).

fof( typeA343, axiom,
	(![X1,X2]: 
		(
			(
				p__patientMedical(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA344, axiom,
	(![X1,X2]: 
		(
			(
				p__parasite(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organism)
					)
				 &
					(
						p__d__instance(X1,c__Organism)
					)
				)
			)
		)
	)
).

fof( typeA345, axiom,
	(![X1,X2]: 
		(
			(
				p__capacity(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__ConstantQuantity)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA346, axiom,
	(![X1,X2]: 
		(
			(
				p__humanCapacity(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(X1,c__StationaryArtifact)
					)
				)
			)
		)
	)
).

fof( typeA347, axiom,
	(![X1,X2]: 
		(
			(
				p__landlord(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PermanentResidence)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA348, axiom,
	(![X1,X2]: 
		(
			(
				p__tenant(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Residence)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA349, axiom,
	(![X1,X2]: 
		(
			(
				p__expects(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA350, axiom,
	(![X1,X2]: 
		(
			(
				p__medicalPatient(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CareOrganization)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA351, axiom,
	(![X1,X2]: 
		(
			(
				p__intelligenceQuotient(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__RationalNumber)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA352, axiom,
	(![X1,X2]: 
		(
			(
				p__secretesSubstance(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__NaturalSubstance)
					)
				 &
					(
						p__d__subclass(X1,c__OrganicObject)
					)
				)
			)
		)
	)
).

fof( typeA353, axiom,
	(![X1,X2]: 
		(
			(
				p__creator(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Agent)
			)
		)
	)
).

fof( typeA354, axiom,
	(![X1,X2]: 
		(
			(
				p__partyToAgreement(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agreement)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA355, axiom,
	(![X1,X2]: 
		(
			(
				p__agreementPeriod(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(X1,c__Agreement)
					)
				)
			)
		)
	)
).

fof( typeA356, axiom,
	(![X1,X2]: 
		(
			(
				p__agreementEffectiveDate(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimePoint)
					)
				 &
					(
						p__d__instance(X1,c__Agreement)
					)
				)
			)
		)
	)
).

fof( typeA357, axiom,
	(![X1,X2]: 
		(
			(
				p__agreementExpirationDate(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimePoint)
					)
				 &
					(
						p__d__instance(X1,c__Agreement)
					)
				)
			)
		)
	)
).

fof( typeA358, axiom,
	(![X1,X2]: 
		(
			(
				p__localLongName(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__SymbolicString)
			)
		)
	)
).

fof( typeA359, axiom,
	(![X1,X2]: 
		(
			(
				p__localShortName(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__SymbolicString)
			)
		)
	)
).

fof( typeA360, axiom,
	(![X1,X2]: 
		(
			(
				p__commentator(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Process)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA361, axiom,
	(![X1,X2]: 
		(
			(
				p__describes(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA362, axiom,
	(![X1,X2]: 
		(
			(
				p__issuedBy(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__Certificate)
					)
				)
			)
		)
	)
).

fof( typeA363, axiom,
	(![X1,X2]: 
		(
			(
				p__registeredItem(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Physical)
					)
				 &
					(
						p__d__instance(X1,c__Text)
					)
				)
			)
		)
	)
).

fof( typeA364, axiom,
	(![X1,X2]: 
		(
			(
				p__axis(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA365, axiom,
	(![X1,X2]: 
		(
			(
				p__waterDepth(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X1,c__WaterArea)
					)
				)
			)
		)
	)
).

fof( typeA366, axiom,
	(![X1,X2]: 
		(
			(
				p__hasAward(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA367, axiom,
	(![X1,X2]: 
		(
			(
				p__meatOfAnimal(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Animal)
					)
				 &
					(
						p__d__subclass(X1,c__Meat)
					)
				)
			)
		)
	)
).

fof( typeA368, axiom,
	(![X1,X2]: 
		(
			(
				p__occupation(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__FinancialTransaction)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA369, axiom,
	(![X1,X2]: 
		(
			(
				p__constructionPeriod(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(X1,c__StationaryArtifact)
					)
				)
			)
		)
	)
).

fof( typeA370, axiom,
	(![X1,X2]: 
		(
			(
				p__contractor(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__StationaryArtifact)
					)
				)
			)
		)
	)
).

fof( typeA371, axiom,
	(![X1,X2]: 
		(
			(
				p__hasExpertise(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__FieldOfStudy)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA372, axiom,
	(![X1,X2]: 
		(
			(
				p__hasOccupation(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__IntentionalProcess)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA373, axiom,
	(![X1,X2]: 
		(
			(
				p__protonNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(X1,c__PureSubstance)
					)
				)
			)
		)
	)
).

fof( typeA374, axiom,
	(![X1,X2]: 
		(
			(
				p__electronNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(X1,c__PureSubstance)
					)
				)
			)
		)
	)
).

fof( typeA375, axiom,
	(![X1,X2]: 
		(
			(
				p__memberCount(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Integer)
					)
				 &
					(
						p__d__instance(X1,c__Collection)
					)
				)
			)
		)
	)
).

fof( typeA376, axiom,
	(![X1,X2]: 
		(
			(
				p__memberType(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__Collection)
					)
				)
			)
		)
	)
).

fof( typeA377, axiom,
	(![X1,X2]: 
		(
			(
				p__inventory(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Collection)
					)
				 &
					(
						p__d__instance(X1,c__ContentBearingObject)
					)
				)
			)
		)
	)
).

fof( typeA378, axiom,
	(![X1,X2]: 
		(
			(
				p__stranger(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA379, axiom,
	(![X1,X2]: 
		(
			(
				p__typicalPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Object)
					)
				 &
					(
						p__d__subclass(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA380, axiom,
	(![X1,X2]: 
		(
			(
				p__typicallyContainsPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Object)
					)
				 &
					(
						p__d__subclass(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA381, axiom,
	(![X1,X2]: 
		(
			(
				p__initialPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Object)
					)
				 &
					(
						p__d__subclass(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA382, axiom,
	(![X1,X2]: 
		(
			(
				p__initiallyContainsPart(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Object)
					)
				 &
					(
						p__d__subclass(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA383, axiom,
	(![X1,X2]: 
		(
			(
				p__affiliatedOrganization(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organization)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA384, axiom,
	(![X1,X2]: 
		(
			(
				p__ideologicalAffiliationOfOrganization(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__FormOfGovernment)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA385, axiom,
	(![X1,X2]: 
		(
			(
				p__religiousAffiliationOfOrganization(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__BeliefGroup)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA386, axiom,
	(![X1,X2]: 
		(
			(
				p__allegiance(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA387, axiom,
	(![X1,X2]: 
		(
			(
				p__anniversary(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA388, axiom,
	(![X1,X2]: 
		(
			(
				p__birthplace(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Animal)
					)
				)
			)
		)
	)
).

fof( typeA389, axiom,
	(![X1,X2]: 
		(
			(
				p__birthdate(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Day)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA390, axiom,
	(![X1,X2]: 
		(
			(
				p__deathdate(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Day)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA391, axiom,
	(![X1,X2]: 
		(
			(
				p__deathplace(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Animal)
					)
				)
			)
		)
	)
).

fof( typeA392, axiom,
	(![X1,X2]: 
		(
			(
				p__equipmentType(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Device)
					)
				 &
					(
						p__d__instance(X1,c__Artifact)
					)
				)
			)
		)
	)
).

fof( typeA393, axiom,
	(![X1,X2]: 
		(
			(
				p__grammaticalRelation(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Sentence)
					)
				 &
					(
						p__d__instance(X1,c__Phrase)
					)
				)
			)
		)
	)
).

fof( typeA394, axiom,
	(![X1,X2]: 
		(
			(
				p__distanceOnPath(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Transitway)
					)
				 &
					(
						p__d__instance(X1,c__ConstantQuantity)
					)
				)
			)
		)
	)
).

fof( typeA395, axiom,
	(![X1,X2]: 
		(
			(
				p__inString(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X1,c__Character)
					)
				)
			)
		)
	)
).

fof( typeA396, axiom,
	(![X1,X2]: 
		(
			(
				p__unitNumber(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA397, axiom,
	(![X1,X2]: 
		(
			(
				p__floorCode(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PostalPlace)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA398, axiom,
	(![X1,X2]: 
		(
			(
				p__voltageMeasure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PhysicalQuantity)
					)
				 &
					(
						p__d__instance(X1,c__PowerSource)
					)
				)
			)
		)
	)
).

fof( typeA399, axiom,
	(![X1,X2]: 
		(
			(
				p__hasUniform(X1,X2)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__UniformClothing)
					)
				 &
					(
						p__d__instance(X1,c__Group)
					)
				)
			)
		)
	)
).

fof( typeA400, axiom,
	(![X1,X2]: 
		(
			(
				p__policyOwner(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Policy)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA401, axiom,
	(![X1,X2]: 
		(
			(
				p__approximateValue(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__RealNumber)
					)
				 &
					(
						p__d__instance(X1,c__RealNumber)
					)
				)
			)
		)
	)
).

fof( typeA402, axiom,
	(![X1,X2]: 
		(
			(
				p__CitizenryFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__GeopoliticalArea)
			)
		)
	)
).

fof( typeA403, axiom,
	(![X1,X2]: 
		(
			(
				p__subset(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Set)
					)
				 &
					(
						p__d__instance(X1,c__Set)
					)
				)
			)
		)
	)
).

fof( typeA404, axiom,
	(![X1,X2]: 
		(
			(
				p__piece(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Substance)
					)
				 &
					(
						p__d__instance(X1,c__Substance)
					)
				)
			)
		)
	)
).

fof( typeA405, axiom,
	(![X1,X2]: 
		(
			(
				p__component(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CorpuscularObject)
					)
				 &
					(
						p__d__instance(X1,c__CorpuscularObject)
					)
				)
			)
		)
	)
).

fof( typeA406, axiom,
	(![X1,X2]: 
		(
			(
				p__bottom(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA407, axiom,
	(![X1,X2]: 
		(
			(
				p__top(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA408, axiom,
	(![X1,X2]: 
		(
			(
				p__side(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA409, axiom,
	(![X1,X2]: 
		(
			(
				p__engineeringSubcomponent(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(X1,c__EngineeringComponent)
					)
				)
			)
		)
	)
).

fof( typeA410, axiom,
	(![X1,X2]: 
		(
			(
				p__groupMember(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GroupOfPeople)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA411, axiom,
	(![X1,X2]: 
		(
			(
				p__half(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA412, axiom,
	(![X1,X2]: 
		(
			(
				p__third(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA413, axiom,
	(![X1,X2]: 
		(
			(
				p__quarter(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA414, axiom,
	(![X1,X2]: 
		(
			(
				p__most(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA415, axiom,
	(![X1,X2]: 
		(
			(
				p__student(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__EducationalOrganization)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA416, axiom,
	(![X1,X2]: 
		(
			(
				p__teacher(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__EducationalOrganization)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA417, axiom,
	(![X1,X2]: 
		(
			(
				p__pointOfFigure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GeometricFigure)
					)
				 &
					(
						p__d__instance(X1,c__GeometricPoint)
					)
				)
			)
		)
	)
).

fof( typeA418, axiom,
	(![X1,X2]: 
		(
			(
				p__angleOfFigure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GeometricFigure)
					)
				 &
					(
						p__d__instance(X1,c__TwoDimensionalAngle)
					)
				)
			)
		)
	)
).

fof( typeA419, axiom,
	(![X1,X2]: 
		(
			(
				p__sideOfFigure(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GeometricFigure)
					)
				 &
					(
						p__d__instance(X1,c__OneDimensionalFigure)
					)
				)
			)
		)
	)
).

fof( typeA420, axiom,
	(![X1,X2]: 
		(
			(
				p__mother(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organism)
					)
				 &
					(
						p__d__instance(X1,c__Organism)
					)
				)
			)
		)
	)
).

fof( typeA421, axiom,
	(![X1,X2]: 
		(
			(
				p__father(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organism)
					)
				 &
					(
						p__d__instance(X1,c__Organism)
					)
				)
			)
		)
	)
).

fof( typeA422, axiom,
	(![X1,X2]: 
		(
			(
				p__daughter(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organism)
					)
				 &
					(
						p__d__instance(X1,c__Organism)
					)
				)
			)
		)
	)
).

fof( typeA423, axiom,
	(![X1,X2]: 
		(
			(
				p__son(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Organism)
					)
				 &
					(
						p__d__instance(X1,c__Organism)
					)
				)
			)
		)
	)
).

fof( typeA424, axiom,
	(![X1,X2]: 
		(
			(
				p__grandmother(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Woman)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA425, axiom,
	(![X1,X2]: 
		(
			(
				p__grandfather(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Man)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA426, axiom,
	(![X1,X2]: 
		(
			(
				p__aunt(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Woman)
					)
				)
			)
		)
	)
).

fof( typeA427, axiom,
	(![X1,X2]: 
		(
			(
				p__cousin(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA428, axiom,
	(![X1,X2]: 
		(
			(
				p__nephew(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Man)
					)
				)
			)
		)
	)
).

fof( typeA429, axiom,
	(![X1,X2]: 
		(
			(
				p__niece(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Woman)
					)
				)
			)
		)
	)
).

fof( typeA430, axiom,
	(![X1,X2]: 
		(
			(
				p__uncle(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Man)
					)
				)
			)
		)
	)
).

fof( typeA431, axiom,
	(![X1,X2]: 
		(
			(
				p__grasps(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Animal)
					)
				)
			)
		)
	)
).

fof( typeA432, axiom,
	(![X1,X2]: 
		(
			(
				p__plaintiff(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__LegalAction)
					)
				)
			)
		)
	)
).

fof( typeA433, axiom,
	(![X1,X2]: 
		(
			(
				p__contestParticipant(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Agent)
					)
				 &
					(
						p__d__instance(X1,c__Contest)
					)
				)
			)
		)
	)
).

fof( typeA434, axiom,
	(![X1,X2]: 
		(
			(
				p__attends(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Demonstrating)
					)
				)
			)
		)
	)
).

fof( typeA435, axiom,
	(![X1,X2]: 
		(
			(
				p__instrument(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Physical)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA436, axiom,
	(![X1,X2]: 
		(
			(
				p__resource(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA437, axiom,
	(![X1,X2]: 
		(
			(
				p__result(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Process)
			)
		)
	)
).

fof( typeA438, axiom,
	(![X1,X2]: 
		(
			(
				p__reactant(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Substance)
					)
				 &
					(
						p__d__instance(X1,c__ChemicalProcess)
					)
				)
			)
		)
	)
).

fof( typeA439, axiom,
	(![X1,X2]: 
		(
			(
				p__reagent(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Substance)
					)
				 &
					(
						p__d__instance(X1,c__ChemicalProcess)
					)
				)
			)
		)
	)
).

fof( typeA440, axiom,
	(![X1,X2]: 
		(
			(
				p__defendant(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__LegalAction)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA441, axiom,
	(![X1,X2]: 
		(
			(
				p__eventLocated(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA442, axiom,
	(![X1,X2]: 
		(
			(
				p__color(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__ColorAttribute)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA443, axiom,
	(![X1,X2]: 
		(
			(
				p__financialAsset(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA444, axiom,
	(![X1,X2]: 
		(
			(
				p__age(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeDuration)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA445, axiom,
	(![X1,X2]: 
		(
			(
				p__linearExtent(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA446, axiom,
	(![X1,X2]: 
		(
			(
				p__width(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA447, axiom,
	(![X1,X2]: 
		(
			(
				p__height(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA448, axiom,
	(![X1,X2]: 
		(
			(
				p__length(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA449, axiom,
	(![X1,X2]: 
		(
			(
				p__monetaryValue(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA450, axiom,
	(![X1,X2]: 
		(
			(
				p__wavelength(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X1,c__Radiating)
					)
				)
			)
		)
	)
).

fof( typeA451, axiom,
	(![X1,X2]: 
		(
			(
				p__airTemperature(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TemperatureMeasure)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA452, axiom,
	(![X1,X2]: 
		(
			(
				p__home(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PermanentResidence)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA453, axiom,
	(![X1,X2]: 
		(
			(
				p__stays(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TemporaryResidence)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA454, axiom,
	(![X1,X2]: 
		(
			(
				p__stepfather(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Man)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA455, axiom,
	(![X1,X2]: 
		(
			(
				p__stepmother(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Woman)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA456, axiom,
	(![X1,X2]: 
		(
			(
				p__exactlyLocated(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA457, axiom,
	(![X1,X2]: 
		(
			(
				p__headquartersOfOrganization(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA458, axiom,
	(![X1,X2]: 
		(
			(
				p__onboard(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Vehicle)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA459, axiom,
	(![X1,X2]: 
		(
			(
				p__truth(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TruthValue)
					)
				 &
					(
						p__d__instance(X1,c__Sentence)
					)
				)
			)
		)
	)
).

fof( typeA460, axiom,
	(![X1,X2]: 
		(
			(
				p__enjoys(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__CognitiveAgent)
			)
		)
	)
).

fof( typeA461, axiom,
	(![X1,X2]: 
		(
			(
				p__dislikes(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA462, axiom,
	(![X1,X2]: 
		(
			(
				p__lacks(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Physical)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA463, axiom,
	(![X1,X2]: 
		(
			(
				p__approves(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA464, axiom,
	(![X1,X2]: 
		(
			(
				p__names(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__SymbolicString)
			)
		)
	)
).

fof( typeA465, axiom,
	(![X1,X2]: 
		(
			(
				p__uniqueIdentifier(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__SymbolicString)
			)
		)
	)
).

fof( typeA466, axiom,
	(![X1,X2]: 
		(
			(
				p__record(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Physical)
					)
				 &
					(
						p__d__instance(X1,c__ContentBearingObject)
					)
				)
			)
		)
	)
).

fof( typeA467, axiom,
	(![X1,X2]: 
		(
			(
				p__titles(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__SymbolicString)
			)
		)
	)
).

fof( typeA468, axiom,
	(![X1,X2]: 
		(
			(
				p__formerName(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__SymbolicString)
			)
		)
	)
).

fof( typeA469, axiom,
	(![X1,X2]: 
		(
			(
				p__conforms(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Proposition)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA470, axiom,
	(![X1,X2]: 
		(
			(
				p__fears(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA471, axiom,
	(![X1,X2]: 
		(
			(
				p__hopes(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA472, axiom,
	(![X1,X2]: 
		(
			(
				p__birthday(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Day)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA473, axiom,
	(![X1,X2]: 
		(
			(
				p__sententialObject(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Sentence)
					)
				 &
					(
						p__d__instance(X1,c__NounPhrase)
					)
				)
			)
		)
	)
).

fof( typeA474, axiom,
	(![X1,X2]: 
		(
			(
				p__sententialSubject(X1,X2)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Sentence)
					)
				 &
					(
						p__d__instance(X1,c__NounPhrase)
					)
				)
			)
		)
	)
).

fof( typeA475, axiom,
	(![X1,X2,X3,X4]: 
		(
			(
				p__d__holds4(X1,X2,X3,X4)
			)
			=>
			(
				p__d__instance(X1,c__TernaryRelation)
			)
		)
	)
).

fof( typeA476, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__MultiplicationFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA477, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__AdditionFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA478, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__SubtractionFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA479, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__DivisionFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA480, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__MaxFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA481, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__MinFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA482, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__ListOrderFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(X1,c__List)
					)
				)
			)
		)
	)
).

fof( typeA483, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__ListConcatenateFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__List)
					)
				 &
					(
						p__d__instance(X1,c__List)
					)
				)
			)
		)
	)
).

fof( typeA484, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__WhereFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimePoint)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA485, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__ExponentiationFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Integer)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA486, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__LogFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(X1,c__RealNumber)
					)
				)
			)
		)
	)
).

fof( typeA487, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__RemainderFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Quantity)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA488, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__UnionFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__SetOrClass)
					)
				)
			)
		)
	)
).

fof( typeA489, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__IntersectionFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__SetOrClass)
					)
				)
			)
		)
	)
).

fof( typeA490, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__RelativeComplementFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__SetOrClass)
					)
				)
			)
		)
	)
).

fof( typeA491, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__KappaFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA492, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__MinimalWeightedPathFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GraphNode)
					)
				 &
					(
						p__d__instance(X1,c__GraphNode)
					)
				)
			)
		)
	)
).

fof( typeA493, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__MaximalWeightedPathFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GraphNode)
					)
				 &
					(
						p__d__instance(X1,c__GraphNode)
					)
				)
			)
		)
	)
).

fof( typeA494, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__GraphPathFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GraphNode)
					)
				 &
					(
						p__d__instance(X1,c__GraphNode)
					)
				)
			)
		)
	)
).

fof( typeA495, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__MeasureFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__UnitOfMeasure)
					)
				 &
					(
						p__d__instance(X1,c__RealNumber)
					)
				)
			)
		)
	)
).

fof( typeA496, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__IntervalFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__ConstantQuantity)
					)
				 &
					(
						p__d__instance(X1,c__ConstantQuantity)
					)
				)
			)
		)
	)
).

fof( typeA497, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__PerFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PhysicalQuantity)
					)
				 &
					(
						p__d__instance(X1,c__PhysicalQuantity)
					)
				)
			)
		)
	)
).

fof( typeA498, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__TimeIntervalFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimePoint)
					)
				 &
					(
						p__d__instance(X1,c__TimePoint)
					)
				)
			)
		)
	)
).

fof( typeA499, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__RecurrentTimeIntervalFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__TimeInterval)
					)
				 &
					(
						p__d__subclass(X1,c__TimeInterval)
					)
				)
			)
		)
	)
).

fof( typeA500, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__MonthFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Year)
					)
				 &
					(
						p__d__subclass(X1,c__Month)
					)
				)
			)
		)
	)
).

fof( typeA501, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__DayFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Month)
					)
				 &
					(
						p__d__instance(X1,c__PositiveInteger)
					)
				)
			)
		)
	)
).

fof( typeA502, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__HourFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Day)
					)
				 &
					(
						p__d__instance(X1,c__NonnegativeInteger)
					)
				)
			)
		)
	)
).

fof( typeA503, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__MinuteFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Hour)
					)
				 &
					(
						p__d__instance(X1,c__NonnegativeInteger)
					)
				)
			)
		)
	)
).

fof( typeA504, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__SecondFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__Minute)
					)
				 &
					(
						p__d__instance(X1,c__PositiveRealNumber)
					)
				)
			)
		)
	)
).

fof( typeA505, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__TemporalCompositionFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__subclass(X2,c__TimeInterval)
					)
				 &
					(
						p__d__instance(X1,c__TimeInterval)
					)
				)
			)
		)
	)
).

fof( typeA506, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__MereologicalSumFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA507, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__MereologicalProductFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA508, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__MereologicalDifferenceFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA509, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__EditionFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(X1,c__ContentBearingObject)
					)
				)
			)
		)
	)
).

fof( typeA510, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__RelativeTimeFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeZone)
					)
				 &
					(
						p__d__instance(X1,c__TimePosition)
					)
				)
			)
		)
	)
).

fof( typeA511, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__PerCapitaFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__GeopoliticalArea)
					)
				 &
					(
						p__d__instance(X1,c__Quantity)
					)
				)
			)
		)
	)
).

fof( typeA512, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__TimePeriodFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeDuration)
					)
				 &
					(
						p__d__instance(X1,c__TimePoint)
					)
				)
			)
		)
	)
).

fof( typeA513, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__SeriesVolumeFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(X1,c__Series)
					)
				)
			)
		)
	)
).

fof( typeA514, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__PeriodicalIssueFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__subclass(X1,c__Periodical)
					)
				)
			)
		)
	)
).

fof( typeA515, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__StringConcatenateFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA516, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__domain(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(X1,c__Relation)
					)
				)
			)
		)
	)
).

fof( typeA517, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__domainSubclass(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X2,c__PositiveInteger)
					)
				 &
					(
						p__d__instance(X1,c__Relation)
					)
				)
			)
		)
	)
).

fof( typeA518, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__documentation(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X2,c__HumanLanguage)
					)
				)
			)
		)
	)
).

fof( typeA519, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__format(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X1,c__Language)
					)
				)
			)
		)
	)
).

fof( typeA520, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__termFormat(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X1,c__Language)
					)
				)
			)
		)
	)
).

fof( typeA521, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__relatedExternalConcept(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Language)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA522, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__greaterThanByQuality(X1,X2,X3)
			)
			=>
			(
				p__d__instance(X3,c__Attribute)
			)
		)
	)
).

fof( typeA523, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__conditionalProbability(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__RealNumber)
					)
				 &
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA524, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__prefers(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Formula)
					)
				 &
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__CognitiveAgent)
					)
				)
			)
		)
	)
).

fof( typeA525, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__capability(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Object)
					)
				 &
					(
						p__d__instance(X2,c__CaseRole)
					)
				 &
					(
						p__d__subclass(X1,c__Process)
					)
				)
			)
		)
	)
).

fof( typeA526, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__hasPurposeForAgent(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X2,c__Formula)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA527, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__confersNorm(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__ObjectiveNorm)
					)
				 &
					(
						p__d__instance(X2,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA528, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__deprivesNorm(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__ObjectiveNorm)
					)
				 &
					(
						p__d__instance(X2,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA529, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__between(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Object)
					)
				 &
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA530, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__representsForAgent(X1,X2,X3)
			)
			=>
			(
				p__d__instance(X3,c__Agent)
			)
		)
	)
).

fof( typeA531, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__representsInLanguage(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Language)
					)
				 &
					(
						p__d__instance(X1,c__LinguisticExpression)
					)
				)
			)
		)
	)
).

fof( typeA532, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__links(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__GraphArc)
					)
				 &
					(
						p__d__instance(X2,c__GraphNode)
					)
				 &
					(
						p__d__instance(X1,c__GraphNode)
					)
				)
			)
		)
	)
).

fof( typeA533, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__distance(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X2,c__Physical)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA534, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__temporallyBetween(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__TimePoint)
					)
				 &
					(
						p__d__instance(X2,c__TimePoint)
					)
				 &
					(
						p__d__instance(X1,c__TimePoint)
					)
				)
			)
		)
	)
).

fof( typeA535, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__temporallyBetweenOrEqual(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__TimePoint)
					)
				 &
					(
						p__d__instance(X2,c__TimePoint)
					)
				 &
					(
						p__d__instance(X1,c__TimePoint)
					)
				)
			)
		)
	)
).

fof( typeA536, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__connects(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(X2,c__SelfConnectedObject)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA537, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__orientation(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__PositionalAttribute)
					)
				 &
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA538, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__occupiesPosition(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Organization)
					)
				 &
					(
						p__d__instance(X2,c__Position)
					)
				 &
					(
						p__d__instance(X1,c__Human)
					)
				)
			)
		)
	)
).

fof( typeA539, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__confersRight(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA540, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__confersObligation(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X1,c__Formula)
					)
				)
			)
		)
	)
).

fof( typeA541, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__pointOfIntersection(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__GeometricPoint)
					)
				 &
					(
						p__d__instance(X2,c__OneDimensionalFigure)
					)
				 &
					(
						p__d__instance(X1,c__OneDimensionalFigure)
					)
				)
			)
		)
	)
).

fof( typeA542, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__geometricDistance(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X2,c__GeometricPoint)
					)
				 &
					(
						p__d__instance(X1,c__GeometricPoint)
					)
				)
			)
		)
	)
).

fof( typeA543, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__comment(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X2,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA544, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__dateUsed(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Agent)
					)
				 &
					(
						p__d__instance(X2,c__TimePoint)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA545, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__price(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Agent)
					)
				 &
					(
						p__d__instance(X2,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA546, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__memberTypeCount(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__NonnegativeInteger)
					)
				 &
					(
						p__d__instance(X2,c__SetOrClass)
					)
				 &
					(
						p__d__instance(X1,c__Collection)
					)
				)
			)
		)
	)
).

fof( typeA547, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__memberAtTime(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__TimePosition)
					)
				 &
					(
						p__d__instance(X2,c__Collection)
					)
				 &
					(
						p__d__instance(X1,c__SelfConnectedObject)
					)
				)
			)
		)
	)
).

fof( typeA548, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__subordinateInOrganization(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Human)
					)
				 &
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA549, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__subordinatePosition(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Position)
					)
				 &
					(
						p__d__instance(X2,c__Position)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA550, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__areaOfResponsibility(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__GeographicArea)
					)
				 &
					(
						p__d__subclass(X2,c__Process)
					)
				 &
					(
						p__d__instance(X1,c__Agent)
					)
				)
			)
		)
	)
).

fof( typeA551, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__playsRoleInEvent(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Process)
					)
				 &
					(
						p__d__instance(X2,c__CaseRole)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA552, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__locatedAtTime(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Object)
					)
				 &
					(
						p__d__instance(X2,c__TimePosition)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA553, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__equipmentCount(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Quantity)
					)
				 &
					(
						p__d__subclass(X2,c__Device)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA554, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__stringConcatenation(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA555, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__precedesInString(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X2,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA556, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__canonicalPlaceName(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__SymbolicString)
					)
				 &
					(
						p__d__instance(X2,c__Language)
					)
				 &
					(
						p__d__instance(X1,c__Region)
					)
				)
			)
		)
	)
).

fof( typeA557, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__DensityFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__VolumeMeasure)
					)
				 &
					(
						p__d__instance(X1,c__MassMeasure)
					)
				)
			)
		)
	)
).

fof( typeA558, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__SpeedFn(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X2,c__TimeDuration)
					)
				 &
					(
						p__d__instance(X1,c__LengthMeasure)
					)
				)
			)
		)
	)
).

fof( typeA559, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__altitude(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X2,c__Physical)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA560, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__depth(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__LengthMeasure)
					)
				 &
					(
						p__d__instance(X2,c__Physical)
					)
				 &
					(
						p__d__instance(X1,c__Physical)
					)
				)
			)
		)
	)
).

fof( typeA561, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__connectsEngineeringComponents(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(X2,c__EngineeringComponent)
					)
				 &
					(
						p__d__instance(X1,c__EngineeringConnection)
					)
				)
			)
		)
	)
).

fof( typeA562, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__synonymousExternalConcept(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Language)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA563, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__subsumingExternalConcept(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Language)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA564, axiom,
	(![X1,X2,X3]: 
		(
			(
				p__subsumedExternalConcept(X1,X2,X3)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__Language)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA565, axiom,
	(![X1,X2,X3,X4,X5]: 
		(
			(
				p__d__holds5(X1,X2,X3,X4,X5)
			)
			=>
			(
				p__d__instance(X1,c__QuaternaryRelation)
			)
		)
	)
).

fof( typeA566, axiom,
	(![X1,X2,X3,X4]: 
		(
			(
				p__SubstringFn(X1,X2,X3,X4)
			)
			=>
			(
				(
					(
						p__d__instance(X3,c__NonnegativeInteger)
					)
				 &
					(
						p__d__instance(X2,c__NonnegativeInteger)
					)
				 &
					(
						p__d__instance(X1,c__SymbolicString)
					)
				)
			)
		)
	)
).

fof( typeA567, axiom,
	(![X1,X2,X3,X4]: 
		(
			(
				p__betweenOnPath(X1,X2,X3,X4)
			)
			=>
			(
				(
					(
						p__d__instance(X4,c__Object)
					)
				 &
					(
						p__d__instance(X3,c__Object)
					)
				 &
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA568, axiom,
	(![X1,X2,X3,X4]: 
		(
			(
				p__agreementClause(X1,X2,X3,X4)
			)
			=>
			(
				(
					(
						p__d__instance(X4,c__CognitiveAgent)
					)
				 &
					(
						p__d__instance(X3,c__Agreement)
					)
				 &
					(
						p__d__instance(X2,c__DeonticAttribute)
					)
				 &
					(
						p__d__instance(X1,c__Proposition)
					)
				)
			)
		)
	)
).

fof( typeA569, axiom,
	(![X1,X2,X3,X4]: 
		(
			(
				p__monetaryWage(X1,X2,X3,X4)
			)
			=>
			(
				(
					(
						p__d__instance(X4,c__CurrencyMeasure)
					)
				 &
					(
						p__d__instance(X3,c__TimeDuration)
					)
				 &
					(
						p__d__instance(X2,c__Human)
					)
				 &
					(
						p__d__instance(X1,c__Organization)
					)
				)
			)
		)
	)
).

fof( typeA570, axiom,
	(![X1,X2,X3,X4]: 
		(
			(
				p__beforeOnPath(X1,X2,X3,X4)
			)
			=>
			(
				(
					(
						p__d__instance(X4,c__Transfer)
					)
				 &
					(
						p__d__instance(X3,c__Object)
					)
				 &
					(
						p__d__instance(X2,c__Object)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA571, axiom,
	(![X1,X2,X3,X4,X5,X6]: 
		(
			(
				p__d__holds6(X1,X2,X3,X4,X5,X6)
			)
			=>
			(
				p__d__instance(X1,c__QuintaryRelation)
			)
		)
	)
).

fof( typeA572, axiom,
	(![X1,X2,X3,X4,X5]: 
		(
			(
				p__VelocityFn(X1,X2,X3,X4,X5)
			)
			=>
			(
				(
					(
						p__d__instance(X4,c__DirectionalAttribute)
					)
				 &
					(
						p__d__instance(X3,c__Region)
					)
				 &
					(
						p__d__instance(X2,c__TimeDuration)
					)
				 &
					(
						p__d__instance(X1,c__LengthMeasure)
					)
				)
			)
		)
	)
).

fof( typeA573, axiom,
	(![X1,X2,X3,X4,X5]: 
		(
			(
				p__StreetAddressFn(X1,X2,X3,X4,X5)
			)
			=>
			(
				(
					(
						p__d__instance(X4,c__Nation)
					)
				 &
					(
						p__d__instance(X3,c__City)
					)
				 &
					(
						p__d__instance(X2,c__Roadway)
					)
				 &
					(
						p__d__instance(X1,c__StationaryArtifact)
					)
				)
			)
		)
	)
).

fof( typeA574, axiom,
	(![X1,X2,X3,X4,X5]: 
		(
			(
				p__playsRoleInEventOfType(X1,X2,X3,X4,X5)
			)
			=>
			(
				(
					(
						p__d__instance(X5,c__Object)
					)
				 &
					(
						p__d__instance(X4,c__TimePosition)
					)
				 &
					(
						p__d__subclass(X3,c__Process)
					)
				 &
					(
						p__d__instance(X2,c__CaseRole)
					)
				 &
					(
						p__d__instance(X1,c__Object)
					)
				)
			)
		)
	)
).

fof( typeA575, axiom,
	(![X1,X2]: 
		(
			(
				p__exhaustiveAttribute(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Attribute)
			)
		)
	)
).

fof( typeA576, axiom,
	(![X1]: 
		(
			(
				p__exhaustiveDecomposition(X1)
			)
			=>
			(
				p__d__instance(X1,c__Class)
			)
		)
	)
).

fof( typeA577, axiom,
	(![X1]: 
		(
			(
				p__disjointDecomposition(X1)
			)
			=>
			(
				p__d__instance(X1,c__Class)
			)
		)
	)
).

fof( typeA578, axiom,
	(![X1]: 
		(
			(
				p__partition(X1)
			)
			=>
			(
				p__d__instance(X1,c__Class)
			)
		)
	)
).

fof( typeA579, axiom,
	(![X1,X2]: 
		(
			(
				p__AssignmentFn(X1,X2)
			)
			=>
			(
				p__d__instance(X1,c__Function)
			)
		)
	)
).

fof( whiteBoxTruthTest0005, conjecture,
	(?[CLASS]: 
		(
			~ (
				p__d__instance(CLASS,c__SetOrClass)
			)
		)
	)
).

