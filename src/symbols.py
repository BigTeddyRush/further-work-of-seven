functions = {
    'ImmediateFamilyFn1': "the immediate family of {}",
    'DescendantsFn1':     "the descendants of {}",
    'GovernmentFn1':      "the government of {}",
    'ResidentFn1':        "the residents of {}",
    'PredecessorFn1':     "the predecessor of {}",
    'SuccessorFn1':       "the successor of {}",
    'ProbabilityFn1':     "the probability of {}",
    'CardinalityFn1':     "the cardinality of {}",
    'PremisesFn1':        "the complete set of premises of the argument {}",
    'StringLengthFn1':       "the length of the string {}",
    'StringConcatenateFn2':  "the concatenation of strings {} and {}",

    'YearFn1':           "the year {}",

    'KiloFn1':           "one thousand {}s",
    'MegaFn1':           "one million {}s",
    'GigaFn1':           "one billion {}s",
    'TeraFn1':           "one trillion {}s",
    'UnitFn1':           "the unit of {}",
    'MeasureFn2':        "{} measured in {}",

    'SineFn1':           "the sine of {}",
    'CosineFn1':         "the cosine of {}",
    'TangentFn1':        "the tangent of {}",
    'RadiusFn1':         "the radius of {}",
    'DiameterFn1':       "the diameter of {}",
    'SquareRootFn1':     "the square root of {}",
    'FloorFn1':          "the largest integer less than or equal to {}",
    'CeilingFn1':        "the smallest integer greater than or equal to {}",
    'AbsoluteValueFn1':  "the absolute value of {}",
    'CenterOfCircleFn1': "the center of the circle {}",
    'MagnitudeFn1':      "the magnitude of {}",

    'AdditionFn2':       "{} plus {}",
    'SubtractionFn2':    "{} minus {}",
    'MultiplicationFn2': "{} multiplied by {}",
    'DivisionFn2':       "{} divided by {}",
    'RemainderFn2':      "the remainder of {} divided by {}",
    'SignumFn1':         "the sign of {}",
    'ReciprocalFn1':     "the reciprocal element of {}",

    'MaxFn2': "the larger of {} and {}",
    'MinFn2': "the smaller of {} and {}",

    'HoleSkinFn1': "the skin of the hole {}",
    'HoleHostFn1': "the host of the hole {}",

    'BeginFn1':  "the beginning of the interval {}",
    'EndFn1':    "the end of the interval {}",
    'TimeIntervalFn2': "the time interval between {} and {}",
    'TimePeriodFn2':   "the time period starting at {} and ending after {}",

    'FutureFn1': "after {}",
    'PastFn1':   "before {}",

    'ImmediatePastFn1':    "immediately before {}",
    'ImmediateFutureFn1':  "immediately after {}",

    'PerFn2': "{} per {}",
    'RelativeTimeFn2': "the time {} in zone {}",
    'TemporalCompositionFn2': "the class of {1} that make up {0}",

    'WhenFn1':   "the time when {} takes place",
    'WhereFn2':  "the place where {} takes place at {}",

    'MereologicalComplementFn1': "the mereological complement of {}",
    'MereologicalProductFn2':    "the mereological product of {} and {}",
    'MereologicalSumFn2':        "the mereological sum of {} and {}",
    'MereologicalDifferenceFn2': "the mereological difference between {} and {}",

    'BeginNodeFn1':      "the beginning of {}",
    'EndNodeFn1':        "the end of {}",
    'InitialNodeFn1':    "the starting node of {}",
    'TerminalNodeFn1':   "the terminal node of {}",
    'GraphPathFn2':      "the set of paths between {} and {}",
    'PathWeightFn1':     "the weight of the path {}",
    'MinimalCutSetFn1':  "the set of minimal paths that partition {} into two separate graphs",

    'FrontFn1':  "the front of {}",
    'BackFn1':   "the back of {}",

    'EditionFn2':        "the edition {1} of {0}",
    'SeriesVolumeFn2':   "the volume {1} in the series {0}",
    'PeriodicalIssueFn2': "the periodical issue number {1} of {0}",

    'SpeedFn2':          "{} per {}",
    'VelocityFn4':       "{} per {} in {} in the direction {}",
    'StreetAddressFn4':  "the agent that resides at {} {} {} {}",

    'PerCapitaFn2': "the average amount of {} possessed by a resident of {}",
}

predicates = {
    #=============================================
    # BASE ONTOLOGY
    #=============================================
    'agent':               "{1} is the agent of {0}",
    'patient':             "{1} is a participant in {0}",

    'attribute':    "{} has the attribute {}",
    'between':      "{1} is between {0} and {2}",
    'capability':   "{2} is capable to do {0} in role {1}",
    'component':    "{} is a component of {}",
    'copy':         "{} is a exact copy of {}",
    'decreasesLikelihood':    "{} (decreases|does not decrease) the likelihood of {}",
    'increasesLikelihood':    "{} (increases|does not increase) the likelihood of {}",
    'independentProbability': "the probabilities of {} and {} being true are independent",
    'conditionalProbability': "the probability of {1} provided that {0} holds is {2}",
    'distributes':      "{} is distributive over {}",
    'documentation':    "{2} is the documentation of {0} in the language {1}",
    'exactlyLocated':   "{} is exactly located at {}",

    'greaterThan':           "{} is greater than {}",
    'greaterThanOrEqualTo':  "{} is greater than or equal to {}",
    'lessThan':              "{} is less than {}",
    'lessThanOrEqualTo':     "{} is less than or equal to {}",

    'hasPurpose':            "{} has the purpose of {}",
    'hasPurposeForAgent':    "{} has the purpose of {} for {}",
    'hasSkill':              "{} has the skill to do {}",

    'holdsDuring':       "{1} (holds|does not hold) during {0}",
    'holdsRight':        "{1} has the right to perform {0}",
    'holdsObligation':   "{1} is obliged to perform tasks of the type {0}",
    'confersRight':      "{1} (authorizes|does not authorize) {2} to perform tasks of the type {0}",
    'confersObligation': "{1} (obligates|does not obligate) {2} to perform tasks of the type {0}",

    'closedOn':              "{} is closed on {}",
    'reflexiveOn':           "{} is reflexive on {}",
    'irreflexiveOn':         "{} is irreflexive on {}",
    'trichotomizingOn':      "{} is trichotomizing on {}",
    'totalOrderingOn':       "{} is a total ordering on {}",
    'partialOrderingOn':     "{} is a partial ordering on {}",
    'equivalenceRelationOn': "{} is an equivalence relation on {}",

    'subList':      "{} is a sublist of {}",
    'inList':       "{} is in list {}",
    'initialList':  "{} (starts|does not start) the list {}",
    'identicalListItems': "{} has identical items as list {}",

    'inScopeOfInterest': "{} is interested in {}",
    'instrument':                "{1} is an instrument for {0}",
    'resource':                  "{1} is a resource for {0}",
    'located':           "{} is located at {}",
    'partlyLocated':     "{} is partly located at {}",
    'manner':                    "{} is performed in the manner of {}",
    'material':                  "{1} is made out of {0}",
    'member':            "{} is a member of {}",
    'origin':        "{1} is the origin of {0}",
    'part':              "{} is a part of {}",
    'piece':         "{} is a piece of {}",
    'property':              "{} has the property {}",
    'equivalentContentClass':    "{} is equivalent to {}",
    'equivalentContentInstance': "{} is equivalent to {}",
    'expressedInLanguage':       "{} is expressed in the language {}",
    'realization':           "{} (realizes|does not realize) the content of {}",
    'representsForAgent':    "{2} (uses|does not use) {1} to represent {0}",
    'representsInLanguage':   "{} (represents|does not represent) {} in the language {}",
    'subsumesContentClass':      "{} (subsumes|does not subsume) the content of {}",
    'subsumesContentInstance':   "{} (subsumes|does not subsume) the content of {}",

    'properPart':       "{} is a proper part of {}",
    'systemPart':       "{} is a part of the system {}",
    'typicalPart':      "{} is a typical part of ",
    'geometricPart':    "{} is a geometric part of {}",
    'abstractPart':     "{} is an abstract part of {}",
    'initialPart':      "{} is an initial part of {}",

    'typicallyContainsPart': "{1} typically (contains|does not contain) {0}",
    'initiallyContainsPart': "{1} initially (contains|does not contain) {0}",

    'subPlan':          "{} is a sub-plan of {}",
    'subProposition':   "{} is a sub-proposition of {}",
    'subCollection':    "{} is a proper sub-collection of {}",

    'premise':       "{1} is a premise of {0}",
    'conclusion':    "{} is the conclusion of {}",
    'precondition':  "{} is a precondition of {}",
    'result':        "{1} is a result of {0}",

    'crosses':       "{} (crosses|does not cross) {}",
    'causes':        "{} (causes|does not cause) {}",
    'believes':      "{} (believes|does not believe) {}",
    'traverses':     "{} (traverses|does not traverse) {}",
    'uses':          "{} (uses|does not use) {}",
    'refers':        "{} (refers|does not refer) to {}",
    'represents':    "{} (represents|does not represent) {}",
    'prevents':      "{} (prevents|does not prevent) {}",
    'penetrates':    "{} (penetrates|does not penetrates) {}",
    'wants':         "{} (wants|does not want) {}",
    'needs':         "{} (needs|does not need) {}",
    'knows':         "{} (knows|does not know) {}",
    'desires':       "{} (desires|does not desire) {}",
    'possesses':     "{} (possesses|does not possess) {}",
    'prefers':       "{} (prefers|does not prefer) {} over {}",
    'experiencer':   "{1} (experiences|does not experience) {0}",
    'exploits':      "{} (exploits|does not exploit) {}",
    'faces':         "{} (faces|does not face) {}",
    'considers':     "{} (considers|does not consider) {}",
    'destination':   "{} (ends|does not end) at {}",
    'containsInformation':    "{} (contains|does not contain) information {}",

    #=============================================
    #  STRUCTURAL ONTOLOGY
    #=============================================
    'holds3': "{} (holds|does not hold) with the arguments {} and {}",
    'holds4': "{} (holds|does not hold) with the arguments {}, {} and {}",
    'holds5': "{} (holds|does not hold) with the arguments {}, {}, {} and {}",
    'holds6': "{} (holds|does not hold) with the arguments {}, {}, {}, {} and {}",

    'entails':  "{} (entails|does not entail) {}",
    'instance': "{} is an instance of {}",
    'subclass': "{} is a subclass of {}",
    'immediateInstance': "{} is an immediate instance of {}",
    'immediateSubclass': "{} is an immediate subclass of {}",
    'subrelation':         "{} is a subrelation of {}",
    'successorAttribute':        "{} is an immediate successor attribute of {}",
    'successorAttributeClosure': "{} is a successor attribute of {}",
    'valence':           "{} has a valence of {}",
    'uniqueIdentifier':      "{} is an unique identifier for {}",

    'domain':         "the {1}th argument of {0} is an instance of {2}",
    'domainSubclass': "the {1}th argument of {0} is a subclass of {2}",

    'equal':    "{} is equal to {}",
    'inverse':  "{} is an inverse of {}",
    'abstractCounterpart': "{} is the abstract counterpart of {}",
    
    'range':               "the range of {} is an instance of {}",
    'rangeSubclass':       "the values returned by {} are subclasses of {}",
    'relatedInternalConcept':    "{} is internally related to {}",
    'relatedExternalConcept':    "the concept of {0} in language {2} is related to the concept of {1}",
    'subsumedExternalConcept':   "the concept of {0} in language {2} is subsumed by the concept of {1}",
    'subsumingExternalConcept':  "the concept of {0} in language {2} (subsumes|does not subsume) the concept of {1}",
    'synonymousExternalConcept': "the concept of {0} in language {2} is synonymous with the concept of {1}",

    'contraryAttribute2': "(nothing|things) can simultaneously be {} and {}",
    'contraryAttribute4': "(nothing|things) can simultaneously be {}, {}, {} and {}",

    'disjoint':          "{} is disjoint from {}",
    'disjointRelation':  "{} and {} are disjoint",

    'disjointDecomposition':  "{} is a disjoint decomposition",
    'disjointDecomposition3': "{} is disjointly decomposed into {} and {}",
    'disjointDecomposition4': "{} is disjointly decomposed into {}, {} and {}",
    'disjointDecomposition5': "{} is disjointly decomposed into {}, {}, {} and {}",
    'disjointDecomposition6': "{} is disjointly decomposed into {}, {}, {}, {} and {}",
    'disjointDecomposition7': "{} is disjointly decomposed into {}, {}, {}, {}, {} and {}",
    
    'exhaustiveDecomposition':  "{} is an exhaustive decomposition",
    'exhaustiveDecomposition3': "{} is covered by {} and {}",
    'exhaustiveDecomposition4': "{} is covered by {} and {}",
    'exhaustiveDecomposition5': "{} is covered by {} and {}",
    'exhaustiveDecomposition6': "{} is covered by {} and {}",
    'exhaustiveDecomposition7': "{} is covered by {} and {}",
    
    'partition':  "{} is a partition",
    'partition3': "{} is exhaustively partitioned into {} and {}",
    'partition4': "{} is exhaustively partitioned into {}, {} and {}",
    'partition5': "{} is exhaustively partitioned into {}, {}, {} and {}",
    'partition6': "{} is exhaustively partitioned into {}, {}, {}, {} and {}",
    'partition7': "{} is exhaustively partitioned into {}, {}, {}, {}, {} and {}",
    
    'subAttribute':         "{} is a subattribute of {}",
    'exhaustiveAttribute':  "{1} is the only instance of {0}",
    'exhaustiveAttribute3': "{1} and {2} are the only instances of {0}",
    'exhaustiveAttribute6': "{1}, {2}, {3}, {4} and {5} are the only instances of {0}",

    #=============================================
    # MEREOTOPOLOGY
    #=============================================
    'bottom':            "{} is the bottom of {}",
    'connected':         "{} is connected to {}",
    'connects':          "{} (connects|does not connect) {} and {}",
    'meetsSpatially':    "{} (meets|does not meet) {}",
    'overlapsSpatially': "{} (overlaps|does not overlap) with {} ",
    'overlapsPartially': "{} (partially overlaps|does not partially overlap) with {}",
    'superficialPart':   "{} is a superficial part of {}",
    'surface':           "{} is a surface of {}",
    'interiorPart':      "{} is an interior part of {}",
    'hole':              "{} is a hole in {}",
    'fills':             "{} (fills|does not fill) {}",
    'partiallyFills':    "{} (partially fills|does not partially fill) {}",
    'completelyFills':   "{} (completely fills|does not completely fill) {}",
    'properlyFills':     "{} (properly fills|does not properly fill) {}",
    'side':              "{} is a side of {}",
    'top':               "{} is the top of {}",

    #=============================================
    # TEMPORAL CONCEPTS 
    #=============================================
    'time':         "{} (exists|does not exist) during {}",
    'duration':     "{} has a duration of {}",
    'frequency':    "{} (occurs|does not occur) every {}",
    'temporalPart': "{} is a temporal part of {}",
    'starts':       "{} (starts|does not start) {}",
    'finishes':     "{} (finishes|does not finish) {}",

    'before':        "{} (occurs|does not occur) before {}",
    'beforeOrEqual': "{} (occurs|does not occur) before or at {}",
    'temporallyBetween':         "{1} (occurs|does not occur) between {0} and {2}",
    'temporallyBetweenOrEqual':  "{1} (occurs|does not occur) between or at {0} and {1}",
    'overlapsTemporally':    "{} (overlaps|does not overlap) {}",
    'meetsTemporally':       "{} (meets|does not meet) {}",
    'during':        "{} (takes|does not take) place during {}",
    'earlier':       "{} (occurs|does not occur) earlier than {}",

    'cooccur':       "{} (occurs|does not occur) at the same time as {}",
    'date':          "{1} is the date of {0}",
    'dateEstablished':       "{} is established at the timepostition {}",
    'dateUsed':              "{0} is used by {2} at the timepoint {1}",
    'locatedAtTime':         "{0} is at {2} during {1}",
    'constructionPeriod':    "{} is constructed during {}",
    'yearOfFounding':        "{} is founded in the year {}",

    #=============================================
    # SET/CLASS THEORY
    #=============================================
    'subset':   "{} is a subset of {}",
    'element':  "{} is an element of {}",
    'topClass': "{} is a topclass",
    
    #=============================================
    # OBJECTS
    #=============================================
    'familyRelation':  "{} is related to {}",
    'legalRelation':   "{} is legally realted to {}",
    'relative':      "{} is a relative of {}",
    'parent':        "{} is a parent of {}",
    'grandparent':   "{} is a grandparent of {}",
    'aunt':          "{} is the aunt of {}",
    'uncle':         "{} is the uncle of {}",
    'cousin':        "{} is the cousin of {}",
    'stepfather':    "{} is the stepfather of {}",
    'stepmother':    "{} is the stepmother of {}",
    'sister':        "{} is the sister of {}",
    'brother':       "{} is the brother of {}",
    'sibling':       "{} is the sibling of {}",
    'grandmother':   "{} is the grandmother of {}",
    'grandfather':   "{} is the grandfather of {}",
    'daughter':      "{} is the daughter of {}",
    'son':           "{} is the son of {}",
    'spouse':        "{} is the spouse of {}",
    'wife':          "{} is the wife of {}",
    'husband':       "{} is the husband of {}",
    'niece':         "{} is the niece of {}",
    'nephew':        "{} is the nephew of {}",
    'mother':        "{} is the mother of {}",
    'father':        "{} is the father of {}",
    'legalGuardian': "{} is the legal guardian of {}",
    'authors':       "{} is the author of {}",
    'editor':        "{} is the editor of {}",
    
    'citizen':           "{} is a citizen of {}",
    'cohabitant':        "{} is a cohabitant of {}",
    'domesticPartner':   "{} is a domestic partner of {}",
    'groupMember':       "{} is a member of the group {}",
    'coworker':          "{} is a coworker of {}",
    'friend':            "{} is a friend of {}",
    'acquaintance':      "{} is an acquanintance of {}",
    'mutualAcquaintance':"{} is a mutal acquaintance of {}",
    'neighbor':          "{} is a neighbor of {}",
    'ancestor':          "{} is an ancestor of {}",
    'customer':          "{} is a customer of {}",
    'tenant':            "{} is a tenant of {}",
    'landlord':          "{} is the landlord of {}",
    'teacher':           "{} is a teacher at {}",
    'student':           "{} is a student at {}",
    'stranger':          "{} is a stranger to {}",
    'mutualStranger':    "{} and {} are strangers to each other",
    'commentator':       "{} is the commentator of {}",
    'contractor':        "{} is a contractor for {}",
    'leader':            "{1} is the leader of {0}",
    'detainee':          "{1} is detained by {0}",
    'plaintiff':         "{1} is the plaintiff in {0}",
    'defendant':         "{} is the defendant in {}",
    'medicalPatient':    "{} is a medical patient of {}",
    'patientMedical':    "{} is the patient of the doctor {}",
    'operator':          "{1} is operating {0}",
    'creator':           "{} is the creator of {}",
    'policyOwner':       "{} is the owner of the policy {}",
    
    'publishes':     "{} (publishes|does not publish) {}",
    'version':       "{} is a version of {}",
    'inhabits':      "{} (lives|does not live) in {}",
    'developmentalForm':    "{1} is an earlier stage in the development of {0}",
    'connectedEngineeringComponents': "{} is connected to {}",
    'connectsEngineeringComponents':  "{} (connects|does not connect) {} and {}",
    'engineeringSubcomponent':        "{} is a component of {}",
    'employs':       "{} (employs|does not employ) {}",

    'subOrganization':              "{} is a part of the organization {}",
    'ancestorOrganization':         "{} is the ancestor organization of {}",
    'affiliatedOrganization':       "{} is affiliated to organization {}",
    'headquartersOfOrganization':   "the headquarters of the organization {} is in {}",
    'subordinateInOrganization':    "{1} is subordinate to {2} in organization {0}",
    'ideologicalAffiliationOfOrganization': "organization {} has an ideological affiliation to {}",
    'religiousAffiliationOfOrganization':   "organization {} has a religious affiliation to {}",

    'occupiesPosition': "{} (holds|does not hold) the position of {} in {}",
    'occupation':       "the occupation of {} is {}",
    'hasOccupation':    "{} has the occupation {}",

    #=============================================
    # PROCESSES
    #=============================================
    'subProcess':   "{} is a subprocess of {}",
    'path':         "{1} is the path which {0} follows",

    #=============================================
    # QUALITIES
    #=============================================
    'orientation':               "{0} is {2} to {1}",
    'direction':     "entities in the process {} are moving {}",
    'modalAttribute':    "the statement {} has the modal force of {}",

    #=============================================
    # UNITS OF MEASURE
    #=============================================
    'measure':           "{} is measured by {}",
    'altitude':    "the difference in height between {} and {} is {}",
    'depth':       "the difference in depth between {} and {} is {}",
    'waterDepth':  "the depth of water at {} is {}",
    'age':           "{} is the age of {}",
    'width':                 "{} has a width of {}",
    'height':                "{} has a height of {}",
    'length':                "{} has a length of {}",
    'diameter':              "{} has a diameter of {}",
    'distance':              "{2} is the distance between {0} and {1}",
    'larger':                "{} is larger than {}",
    'smaller':               "{} is smaller than {}",
    'monetaryValue':     "{} has a monetary value of {}",
    'weight':                "{} has a weight of {}",
    'linearExtent':          "{} has a linear extent of {}",
    'radius':                "{} has a radius of {}",

    'measurementReading': "{1} is the measurement taken with {0}",
    'voltageMeasure':    "{0} is the amount of electricity generated by {1}",
    'lineMeasure':       "the line {} has a length of {}",
    'angularMeasure':    "the angle {} is equal to {}",
    'wavelength':            "{} has a wavelength of {}",
    'soundFrequency':        "{} has a sound frequency of {}",
    'capacity':              "{} has a capacity of {}",
    'fleetSize':             "{} has a fleet size of {}",
    'boilingPoint':      "{1} is the boiling point of {0}",
    'meltingPoint':      "{1} is the melting point of {0}",
    'potentialOfHydrogen': "{} has a pH value of {}",
    'airTemperature':      "the air temperature of {} is {}",
    'barometricPressure':  "the barometric pressure of {} is {}",
    
    #=============================================
    # NUMERIC FUNCTIONS
    #=============================================
    'identityElement':       "{1} is the identity element of {0}",
    'multiplicativeFactor':  "{} is a multiplicative factor of {}",

    #=============================================
    # GRAPH THEORY
    #=============================================
    'links':         "{2} (links|does not link) {0} and {1}",
    'graphPart':     "{} is part of the graph {}",
    'subGraph':      "{} is a subgraph of {}",
    'arcWeight':     "the arc {} has a weight of {}",
    'pathLength':    "the path {} has a length of {}",
    'graphMeasure':  "{1} is the measure for the arc weight of {0}",
    
    #=============================================
    # FUNCTIONS
    #=============================================
    'ImmediateFamilyFn': "the immediate family of {} is {}",
    'DescendantsFn':     "the descendants of {} is {}",
    'GovernmentFn':      "the government of {} is {}",
    'ResidentFn':        "the residents of {} is {}",
    'PredecessorFn':     "the predecessor of {} is {}",
    'SuccessorFn':       "the successor of {} is {}",
    'ProbabilityFn':     "the probability of {} is {}",
    'CardinalityFn':     "the cardinality of {} is {}",
    'CitizenryFn':       "{1} are citizens of {0}",
    'OperatingFn':       "{} is operated during {}",
    'PremisesFn':        "the complete set of premises of the argument {} is {}",
    'PowerSetFn':        "{1} is the set of all subclasses of {0}",
    'StringLengthFn':        "the length of the string {} is {}",
    'StringConcatenateFn':   "the concatenation of strings {} and {} is {}",
    'SubstringFn':           "the substring of {} starting at index {} and ending at index {} minus one is {}",

    'SineFn':              "the sine of {} is {}",
    'CosineFn':            "the cosine of {} is {}",
    'TangentFn':           "the tangent of {} is {}",
    'RadiusFn':            "the radius of {} is {}",
    'DiameterFn':          "the diameter of {} is {}",
    'FloorFn':             "the largest integer less than or equal to {} is {}",
    'CeilingFn':           "the smallest integer greater than or equal to {} is {}",
    'RoundFn':             "the nearest integer to {} is {}",
    'AbsoluteValueFn':     "the absolute value of {} is {}",
    'CenterOfCircleFn':    "the center of the circle {} is {}",
    'MagnitudeFn':         "the magnitude of {} is {}",

    'AdditionFn':          "{} plus {} is {}",
    'SubtractionFn':       "{} minus {} is {}",
    'MultiplicationFn':    "{} multiplied by {} is {}",
    'DivisionFn':          "{} divided by {} is {}",
    'RemainderFn':         "the remainder of {} divided by {} is {}",
    'SquareRootFn':        "the square root of {} is {}",
    'IntegerSquareRootFn': "the integer square root of {} is {}",
    'ExponentiationFn':    "{} raised to the power of {} is {}",
    'SignumFn':            "the sign of {} is {}",
    'ReciprocalFn':        "the reciprocal of {} is {}",
    'RationalNumberFn':    "the rational representation of {} is {}",
    'RealNumberFn':        "the real part of {} is {}",
    'ImaginaryPartFn':     "the imaginary part of {} is {}",

    'LogFn': "the logarithm of {} to the base {} is {}",

    'NumeratorFn':   "the numerator of {} is {}",
    'DenominatorFn': "the denominator of {} is {}",

    'MaxFn': "the larger of {} and {} is {}",
    'MinFn': "the smaller of {} and {} is {}",

    'BeginFn':        "the beginning of the interval {} is {}",
    'EndFn':          "the end of the interval {} is {}",
    'TimeIntervalFn': "the time interval between {} and {} is {}",
    'TimePeriodFn':   "the time period starting at {} and ending after {} is {}",
    'RelativeTimeFn': "{2} is the time {0} in zone {1}",
    'TemporalCompositionFn':     "{2} is the class of {1} that make up {0}",
    'RecurrentTimeIntervalFn':   "the recurring period from {} to {} is {}",

    'ImmediatePastFn':    "{1} (occurs|does not occur) immediately before {0}",
    'ImmediateFutureFn':  "{1} (occurs|does not occur) immediately after {0}",

    'PastFn':    "{1} is the time intervall starting at negative infinity up until {0}",
    'FutureFn':  "{1} is the time intervall starting at {0} up until positive infinity",

    'WhenFn':   "the time when {} takes place is {}",
    'WhereFn':  "the place where {} takes place at {} is {}",

    'SecondFn':  "{2} is the class of every {0}th second of {1}",
    'MinuteFn':  "{2} is the class of every {0}th minute of {1}",
    'HourFn':    "{2} is the class of every {0}th hour of {1}",
    'DayFn':     "{2} is the class of every {0}th day of {1}",
    'MonthFn':   "{2} is the class of every moth of {0} of {1}",
    'YearFn':    "{1} is the year {0}",

    'UnitFn':    "the unit of {} is {}",
    'MeasureFn': "{} measured in {} is {}",
    'PicoFn':  "{1} is one trillionth of {0}",
    'NanoFn':  "{1} is one billionth of {0}",
    'MicroFn': "{1} is one millionth of {0}",
    'MilliFn': "{1} is one thousandth {0}",
    'KiloFn':  "{1} is one thousand {0}s",
    'MegaFn':  "{1} is one million {0}s",
    'GigaFn':  "{1} is one billion {0}s",
    'TeraFn':  "{1} is one trillion {0}s",

    'SpeedFn':       "{} per {} is {}",
    'DensityFn':     "{} per {} is {}",
    'VelocityFn':    "{} per {} in {} in the direction {} is {}",

    'ExtensionFn':   "{} is the condition for membership in the class {}",
    'CoveringFn':    "{1} is intended to be used to cover {0}",
    'AssignmentFn':  "the result of the function {} is {}",
    'OccupationFn':  "{1} is the set of possible occupations for the process {0}",
    'IntervalFn':    "the interval from {} to {} is {}",
    
    'StartFn': "{1} (needs|does not need) to happen for {0} to start",
    'StopFn':  "{1} (needs|does not need) to happen for {0} to stop",

    'KappaFn': "the kappa function with the arguments {} and {} (returns|does not return) {}",

    'UnionFn':               "the union of {} and {} is {}",
    'IntersectionFn':        "the intersection of {} and {} is {}",
    'ComplementFn':          "the complement of {} is {}",
    'RelativeComplementFn':  "the relative complement of {} and {} is {}",
    'GeneralizedUnionFn':        "the generalized union of {} is {}",
    'GeneralizedIntersectionFn': "the generalized intersection of {} is {}",

    'HoleSkinFn': "{} is a hole in the skin {}",
    'HoleHostFn': "the principle host of the hole {} is {}",

    'DeadFn': "the remains of {} are {}",
    'FoodForFn': "{1} is food for {0}",

    'WealthFn':   "the wealth of {} is {}",
    'PropertyFn': "the property of {} is {}",
    
    'FirstFn': "the first item in the list {} is {}",
    'LastFn':  "the last item in the list {} is {}",
    'ListOrderFn': "the value at the index {1} in list {0} is {2}",
    'ListLengthFn': "the length of the list {} is {}",
    'ListConcatenateFn': "the concatenation of the two lists {} and {} is {}",

    'MereologicalSumFn':        "the union of the parts {} and {} is {}",
    'MereologicalProductFn':    "the intersection of the parts {} and {} is {}",
    'MereologicalDifferenceFn': "the difference between the parts {} and {} is {}",
    'MereologicalComplementFn': "the mereological complement of {} is {}",

    'BeginNodeFn':      "the beginning of {} is {}",
    'EndNodeFn':        "the end of {} is {}",
    'InitialNodeFn':    "the starting node of {} is {}",
    'TerminalNodeFn':   "the terminal node of {} is {}",
    'GraphPathFn':      "the set of paths between {} and {} is {}",
    'PathWeightFn':     "the weight of the path {} is {}",
    'CutSetFn':         "the set of paths that partition {} into two separate graphs is {}",
    'MinimalCutSetFn':  "the set of minimal paths that partition {} into two separate graphs is {}",

    'MaximalWeightedPathFn': "the maximal weighted path between {} and {} is {}",
    'MinimalWeightedPathFn': "the minimal weighted path between {} and {} is {}",

    'FrontFn':  "the front of {} is {}",
    'BackFn':   "the back of {} is {}",
    
    'EditionFn':        "the edition {1} of {0} is {2}",
    'SeriesVolumeFn':   "the volume {1} in the series {0} is {2}",
    'PeriodicalIssueFn': "the periodical issue number {1} of {0} is {2}",

    'PerFn': "{} per {} is {}",
    'PerCapitaFn': "the average amount of {} possessed by a resident of {} is {}",
    'StreetAddressFn':  "the agent that resides at {} {} {} {} is {}",

    #=============================================
    # REST
    #=============================================
    'relatedEvent':              "{} and {} are related events",
    'externalImage':             "the image at {1} (exemplifies|does not exemplify) {0}",

    'subField':          "{} is a sub-field of {}",
    'subSystem':         "{} is a sub-system of {}",

    'preventsSubclass':      "{} (prevents|does not prevent) subclass {}",
    'hindersSubclass':       "{} (hinders|does not hinder) subclass {}",
    'causesSubclass':        "{} (causes|does not cause) subclass {}",
    'causesProposition':     "{} (causes|does not cause) proposition {}",


    'approximateValue':      "{} is the approximated value of {}",
    'truth':                 "the truth value of {} is {}",

    'tangent':       "{} is tangent to {}",
    'parallel':      "{} is parallel to {}",
    'average':       "{1} is the average of {0}",
    'most':          "{} is the largest part of {}",
    'half':          "{} is half of {}",
    'quarter':       "{} is a quarter of {}",
    'third':         "{} is a third of {}",
    'older':         "{} is older than {}",
    
    'angleOfFigure': "{} is an angle of the figure {}",
    'pointOfFigure': "{} is a point of the figure {}",
    'sliceOfFigure': "{} is a slice of the figure {}",
    'sideOfFigure':  "{} is a side of the figure {}",
    'axis':          "{} is the axis of rotation of {}",


    'alias':                 "{} is an alias of {}",
    'deceptiveIdentifier':   "{} is a deceptive representation of {}",

    'grammaticalRelation':   "{} has a grammatical relation to {}",
    'sententialSubject':     "{} is the subject in the sentence {}",
    'sententialObject':      "{} is the object in the sentence {}",

    'format':     "{1} is presented as {2} in the language {0}",
    'termFormat': "the term {1} is presented as {2} in the language {0}",

    'eventLocated':        "the entire process {} is located on {}",
    'eventPartlyLocated':  "the process {} is partly located on {}",
    'involvedInEvent':     "{1} is involved in {0}",
    'subordinatePosition': "the role {1} is subordinate to the role {2} in the organization {0}",
    'areaOfResponsibility': "{} is responsible for actions of type {} in {}",

    'confersNorm':   "{} (brings|does not bring) it about that {} has the norm {}",
    'deprivesNorm':  "{} (brings|does not bring) it about that {} does not have the norm {}",

    'experimentalControl':   "{1} (serves|does not serve) as a control in {0}",
    'registeredItem':        "{} (contains|does not contain) an official record of {}",
    'structure':             "the structure of {} is {}",
    'inventory':             "{} has {} in its inventory",
    'greaterThanByQuality':  "{0} has more of {2} than {1}",

    'meatOfAnimal':              "{} is the meat of the animal {}",
    'contestParticipant':        "{1} is a participant in the contest {0}",
    'allegiance':                "{} is in allegiance to {}",
    'geopoliticalSubdivision':   "{} is a geopolitical subdivision of {}",
    'geographicSubregion':       "{} is a geographic subregion of {}",
    'powerPlant':                "{} is the power-producing component of {}",
    'targetInAttack':            "{1} is a target in the attack {0}",
    'hostileForces':             "{} is a force hostile to {}",

    'equipmentType': "{} is equipped with a device of type {}",
    'equipmentCount': "{0} is equipped with {2} devices of the type {1}",

    'profit':            "{} has a profit of {}",
    'loss':              "{} has a loss of {}",
    'price':             "{2} (pays|does not pay) {1} for {0}",
    'financialAsset':    "{1} is the financial asset of {0}",
    'transactionAmount': "{} is a transaction with an amount of {}",
    'monetaryWage':      "{0} employs {1} and pays them {3} per {2}",

    'agreementPeriod':         "the agreement {} is valid during the time period {}",
    'agreementEffectiveDate':  "the agreement {} (becomes|does not become) effective at {}",
    'agreementExpirationDate': "{1} is the expiration date of the agreement {0}",
    'partyToAgreement':        "{} is a party to the agreement {}",
    'agreementClause':         "{3} is responsible for the {0} with the attribute {1} in the agreement {2}",

    'memberCount':     "there is a total {1} of members in {0}",
    'memberType':      "the members of {} (belong|do not belong) to the class {}",
    'memberTypeCount': "{0} has {2} members of the kind {1}",
    'memberAtTime':    "{} is a member of {} dureing the time period {}",

    'distanceOnPath':        "{} is a distance on the path {}",
    'beforeOnPath':          "{} is located before {} on the path {} with respect to {}",
    'betweenOnPath':         "{1} is located between {0} and {2} on the path {3}",
    'conveyance':            "{1} is the transportation device used in {0}",
    'geometricDistance':     "the distance between the two points {} and {} is {}",
    'pointOfIntersection':   "{} and {} (intersect|do not intersect) at the point {}",

    'color':                 "{} has the color {}",
    'humanCapacity':         "{} has a human capacity of {}",
    'effectiveRange':        "{} has an effective range of {}",
    'deviceState':           "{} has the device state {}",
    'intelligenceQuotient':  "{} has an intelligence quotient of {}",
    'hasAward':              "{} has the award {}",
    'hasExpertise':          "{} has the expertise to do {}",
    'hasUniform':            "{} has the uniform {}",

    'subString':             "{} is a sub string in {}",
    'inString':              "{} is in string {}",
    'stringLength':          "{} is the length of the string {}",
    'precedesInString':      "{} (precedes|does not precede) {} in {}",
    'stringConcatenation':   "{2} is the concatenation of the strings {0} and {1}",

    'conjugate':         "{} and {} are conjugated",
    'atomicNumber':      "{1} is the atomic number of {0}",
    'electronNumber':    "the number of electrons in {} is {}",
    'protonNumber':      "the number of protons in {} is {}",
    'reagent':           "{} is a reagent in {}",
    'reactant':          "{} is a reactant in {}",

    'parasite':          "{} is a parasite of {}",
    'cargo':             "{1} is cargo on {0}",
    'onboard':           "{} is on board of {}",
    'consistent':        "{} is consistent with {}",
    'stored':            "{} is stored on {}",
    'titles':            "{} is the title of {}",
    'arrested':          "{} is arrested by {}",
    'insured':           "{} is insured by {}",
    'transported':       "{} is transported by {}",
    'controlled':        "{1} is controlled by {0}",
    'issuedBy':          "{} is issued by {}",

    'serviceProvider':   "{1} is the supplier of the service provided in {0}",
    'serviceRecipient':  "{1} is the receiver of the service provided in {0}",

    # addresses and other contact info
    'homeAddress':   "{} is the home address of {}",
    'workAddress':   "{} is the work address of {}",
    'emailAddress':  "{} is the email address of {}",

    'deviceTelecomNumber':   "{} is the device telecom number of {}",
    'telecomCoreNumber':     "{} is the telecom core number of {}",
    'telecomExtension':      "{} is the telecom extension of {}",
    'telecomAreaCode':       "{} is the telecom area code of {}",
    'telecomCountryCode':    "{} is the telecom country code of {}",
    'telecomContactDevice':  "{} is the telecom contact device of {}",
    'telecomCode2':          "{} is the telecom code of {}",

    'faxNumber':             "{} is the fax number of {}",
    'telephoneNumber':       "{} is the telephone number of {}",
    'mobilePhoneNumber':     "{} is the mobile phone number of {}",
    'personalPhoneNumber':   "{} is the personal phone number of {}",
    'workPhoneNumber':       "{} is the work phone number of {}",
    'homePhoneNumber':       "{} is the home phone number of {}",
    
    'postContactSite':       "{} is the post contact site of {}",
    'postCountry':           "{} is the postal place of the country {}",
    'postCity':              "{} is the postal place of the city {}",
    'postDistrict':          "{} is the postal place of the district {}",
    'postNeighborhood':      "{} is the postal place of the neighborhood {}",
    'postStreet':            "{} is the postal place of the street {}",
    'postPostcodeArea':      "{} is the postal place of the postcode area {}",

    'postStreetNumber':      "{} is the street number of the postal place {}",
    'postPostOfficeBox':     "{} is the post office box of the postal place {}",
    'postAddressText':       "{} is the post addresss text of the postal place {}",

    'floorCode':         "{1} is located on floor {0}",
    'unitNumber':        "{1} is located in unit {0}",
    'siteForContact':    "{} is the site at which {} can be contacted",

    'home':          "{1} is the home of {0}",
    'record':        "{} is recorded on {}",
    'anniversary':   "{1} is the anniversary of {0}",
    'birthday':      "{1} is the birthday of {0}",
    'birthdate':     "{1} is the birthdate of {0}",
    'deathdate':     "{1} is the deathdate of {0}",
    'birthplace':    "{1} is the birthplace of {0}",
    'deathplace':    "{1} is the deathplace of {0}",

    # names
    'givenName':     "{} is the given name of {}",
    'middleName':    "{} is the middle name of {}",
    'familyName':    "{} is the family name of {}",
    'formerName':    "{} is the former name of {}",
    'localShortName':      "{} is the local short name of {}",
    'localLongName':       "{} is the local long name of {}",
    'canonicalPlaceName':  "{2} is a canonical name for {0} in the language {1}",

    'comment':           "{1} is a comment on {0} by {2}",

    # verbs
    'contains':      "{} (contains|does not contain) {}",
    'stays':         "{} (stays|does not stay) in {}",
    'names':         "{} (names|does not name) {}",
    'moves':         "{} (moves|does not move) {}",
    'approves':      "{} (approves|does not approve) of {}",
    'conforms':      "{} (conforms|does not conform) to {}",
    'enjoys':        "{} (enjoys|does not enjoy) {}",
    'hinders':       "{} (hinders|does not hinder) {}",
    'carries':       "{} (carries|does not carry) {}",
    'doubts':        "{} (doubts|does not doubt) {}",
    'lacks':         "{} (lacks|does not lack) {}",
    'benefits':      "{} (benefits|does not benefit) {}",
    'attends':       "{1} (attends|does not attend) {0}",
    'describes':     "{} (describes|does not describe) {}",
    'dislikes':      "{} (dislikes|does not dislike) {}",
    'disapproves':   "{} (disapproves|does not disapprove) {}",
    'discovers':     "{} (discovers|does not discover) {}",
    'hopes':         "{} (hopes|does not hope) that {} will be true",
    'fears':         "{} (fears|does not fear) that {} will be true",
    'grasps':        "{} (grasps|does not grasp) {}",
    'expects':       "{} (expects|does not expect) {}",
    'suffers':       "{1} (suffers|does not suffer) from {0}",
    'covers':        "{} (covers|does not cover) {}",
    'wears':         "{} (wears|does not wear) {}",
    'secretesSubstance':      "{} (secretes|does not secrete) substance {}",
    'gainsControl':           "{} (gains|does not gain) control over {}",
    'losesControl':           "{} (loses|does not lose) control over {}",
    'changesLocation':        "{} (changes|does not change) the location of {}",
    'speaksLanguage':         "{} (speaks|does not speak) the language {}",
    'playsRoleInEvent':       "{} (plays|does not play) the role {} in the process {}",
    'playsRoleInEventOfType': "{} (plays|does not play) the role {} in {}, which occurs at {} and {}",
}